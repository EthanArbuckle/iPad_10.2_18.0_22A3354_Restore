uint64_t sub_10008BD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = *v3;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v4[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008BDE0, 0, 0);
}

uint64_t sub_10008BDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  void (*v27)(uint64_t, _QWORD, uint64_t);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore credentialIdentifiersInPartitionsDocType", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD **)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if ((sub_1000099C0(v9) & 1) != 0)
  {
    v10 = *(_QWORD *)(v1 + 56);
    v12 = *(_QWORD *)(v1 + 32);
    v11 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 24);
    v14 = (_QWORD *)swift_allocObject(&unk_100169B68, 48, 7);
    *(_QWORD *)(v1 + 112) = v14;
    v14[2] = v13;
    v14[3] = v12;
    v14[4] = v11;
    v14[5] = v10;
    v15 = swift_allocObject(&unk_100169B90, 32, 7);
    *(_QWORD *)(v1 + 120) = v15;
    *(_QWORD *)(v15 + 16) = sub_100095FB0;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    swift_retain(v14);
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v1 + 128) = v17;
    v18 = sub_100008E84(&qword_100177060);
    *v17 = v1;
    v17[1] = sub_10008C1C0;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 16, sub_100039668, v15, v18);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 72);
    v20 = *(_QWORD *)(v1 + 80);
    v22 = *(_QWORD *)(v1 + 64);
    v23 = *(_QWORD *)(v1 + 24);
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v24._countAndFlagsBits = Array.description.getter(v23, &type metadata for String);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26._countAndFlagsBits = 0xD000000000000024;
    v26._object = (void *)0x8000000100133510;
    String.append(_:)(v26);
    v27 = *(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104);
    v27(v20, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v22);
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6F69746974726170, 0xEB0000000020736ELL, 0, v20, 0, v28, 0xD000000000000055, 0x8000000100133360, 0xD000000000000025, 0x8000000100133540, 123);
    swift_willThrow(v32);
    v36 = *(_QWORD *)(v1 + 104);
    v33 = *(_QWORD *)(v1 + 80);
    v27(v33, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 64));
    swift_errorRetain(v31);
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v29, v30, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v33, 0, v34, 0xD000000000000055, 0x8000000100133360, 0xD000000000000025, 0x8000000100133540, 136);
    swift_willThrow(v35);
    swift_errorRelease(v31);
    swift_task_dealloc(v36);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008C1C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008C26C, 0, 0);
  v5 = *(_QWORD *)(v3 + 112);
  v6 = *(_QWORD *)(v3 + 104);
  v7 = *(_QWORD *)(v3 + 80);
  swift_release(*(_QWORD *)(v3 + 120));
  swift_release(v5);
  v8 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v8);
}

uint64_t sub_10008C26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v3(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v4);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v6, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD000000000000025, 0x8000000100133540, 136);
  swift_willThrow(v10);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008C428, 0, 0);
}

uint64_t sub_10008C428(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore getProperties", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[10];
  v7 = v1[11];
  v8 = v1[9];
  v10 = v1[4];
  v9 = v1[5];
  v11 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v12 = (_QWORD *)swift_allocObject(&unk_100169B18, 40, 7);
  v1[12] = v12;
  v12[2] = v9;
  v12[3] = v11;
  v12[4] = v10;
  v13 = swift_allocObject(&unk_100169B40, 32, 7);
  v1[13] = v13;
  *(_QWORD *)(v13 + 16) = sub_100095F44;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v1[14] = v15;
  v16 = sub_100095F60();
  *v15 = v1;
  v15[1] = sub_10008C5B4;
  return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 2, sub_100039C00, v13, v16);
}

uint64_t sub_10008C5B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008C660, 0, 0);
  v5 = *(_QWORD *)(v3 + 96);
  v6 = *(_QWORD *)(v3 + 88);
  v7 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v3 + 104));
  swift_release(v5);
  v8 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v8);
}

uint64_t sub_10008C660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD000000000000012, 0x80000001001334F0, 388);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008C798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v4[18] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[20] = v8;
  v4[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v4[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[23] = v10;
  v4[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008C84C, 0, 0);
}

uint64_t sub_10008C84C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore createCredential", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 192);
  v8 = *(_QWORD *)(v1 + 176);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if (byte_100178C90 == 1
    && (v9 = sub_1000097C4(42, 0xE100000000000000, *(_QWORD *)(*(_QWORD *)(v1 + 120) + 16)), (v9 & 1) != 0)
    || (v9 = sub_1000097C4(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(*(_QWORD *)(v1 + 120) + 16)),
        (v9 & 1) != 0))
  {
    v11 = *(_QWORD *)(v1 + 160);
    v10 = *(_QWORD *)(v1 + 168);
    v12 = *(_QWORD *)(v1 + 152);
    v13 = *(id *)(v1 + 112);
    v14 = UUID.init()(v9);
    v45 = UUID.uuidString.getter(v14);
    v47 = v15;
    *(_QWORD *)(v1 + 200) = v45;
    *(_QWORD *)(v1 + 208) = v15;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    if (v13)
    {
      v16 = *(id *)(v1 + 112);
      v17 = objc_msgSend(v16, "deleteIncompleteCredentialAfterDays");
      v18 = objc_msgSend(v16, "deleteInactiveKeysAfterDays");
      v13 = objc_msgSend(v16, "readerAuthenticationPolicy");
      v19 = objc_msgSend(v16, "presentmentAuthPolicy");
      v20 = objc_msgSend(v16, "payloadProtectionPolicy");

    }
    else
    {
      v20 = 0;
      v19 = 0;
      v18 = 0;
      v17 = 0;
    }
    v38 = *(_QWORD *)(v1 + 96);
    v39 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 16) = v17;
    *(_QWORD *)(v1 + 24) = v18;
    *(_QWORD *)(v1 + 32) = v13;
    *(_QWORD *)(v1 + 40) = v19;
    *(_QWORD *)(v1 + 48) = v20;
    sub_10007EE60((__n128 *)(v1 + 56));
    v40 = swift_allocObject(&unk_100169DE8, 88, 7);
    *(_QWORD *)(v1 + 216) = v40;
    *(_QWORD *)(v40 + 16) = v38;
    *(_QWORD *)(v40 + 24) = v39;
    *(_QWORD *)(v40 + 32) = v45;
    *(_QWORD *)(v40 + 40) = v47;
    v41 = *(_OWORD *)(v1 + 72);
    *(_OWORD *)(v40 + 48) = *(_OWORD *)(v1 + 56);
    *(_OWORD *)(v40 + 64) = v41;
    *(_QWORD *)(v40 + 80) = *(_QWORD *)(v1 + 88);
    v42 = swift_allocObject(&unk_100169E10, 32, 7);
    *(_QWORD *)(v1 + 224) = v42;
    *(_QWORD *)(v42 + 16) = sub_10009634C;
    *(_QWORD *)(v42 + 24) = v40;
    v43 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v47);
    swift_retain(v40);
    v44 = (_QWORD *)swift_task_alloc(v43);
    *(_QWORD *)(v1 + 232) = v44;
    *v44 = v1;
    v44[1] = sub_10008CD24;
    return AsyncCoreDataContainer.performWrite<A>(_:)(v44, sub_1000963B4, v42, (char *)&type metadata for () + 8);
  }
  else
  {
    v22 = *(_QWORD *)(v1 + 136);
    v21 = *(_QWORD *)(v1 + 144);
    v23 = *(_QWORD *)(v1 + 128);
    v25 = *(_QWORD *)(v1 + 96);
    v24 = *(void **)(v1 + 104);
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(0xE000000000000000);
    v26._countAndFlagsBits = v25;
    v26._object = v24;
    String.append(_:)(v26);
    v27._countAndFlagsBits = 0xD000000000000023;
    v27._object = (void *)0x800000010012DC00;
    String.append(_:)(v27);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104);
    v28(v21, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v23);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    v32 = swift_allocError(v30, v31, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6F69746974726170, 0xEA0000000000206ELL, 0, v21, 0, v29, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133770, 68);
    swift_willThrow(v33);
    v46 = *(_QWORD *)(v1 + 192);
    v48 = *(_QWORD *)(v1 + 168);
    v34 = *(_QWORD *)(v1 + 144);
    v28(v34, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 128));
    swift_errorRetain(v32);
    v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v30, v31, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v32, v34, 0, v35, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133770, 88);
    swift_willThrow(v36);
    swift_errorRelease(v32);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008CD24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008CDE8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 216);
    swift_release(*(_QWORD *)(v2 + 224));
    swift_release(v5);
    v4 = sub_10008CD98;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008CD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
}

uint64_t sub_10008CDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_release(v1);
  swift_bridgeObjectRelease(v2);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v3 + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 128));
  swift_errorRetain(v4);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v7, 0, v8, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133770, 88);
  swift_willThrow(v11);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10008CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  NSString v19;
  uint64_t v20;
  Class isa;
  void (*v22)(char *, uint64_t);
  objc_class *v23;
  Class v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a6;
  v7 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StoredCredential(0);
  v27 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v14));
  v17 = objc_msgSend(v16, "initWithContext:", v15, v26);
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setPartition:", v18);

  objc_msgSend(v17, "setState:", 1);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setCredentialIdentifier:", v19);

  Date.init()(v20);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v13, v10);
  objc_msgSend(v17, "setCreatedAt:", isa);

  v23 = (objc_class *)objc_msgSend(v17, "createdAt");
  v24 = v23;
  if (v23)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      v24 = 0;
    }
    else
    {
      v24 = Date._bridgeToObjectiveC()().super.isa;
      v22(v9, v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  objc_msgSend(v17, "setUpdatedAt:", v24);

  v25 = sub_10007F6CC(v27);
  objc_msgSend(v17, "setOptions:", v25);

  sub_1000091F8();
}

uint64_t sub_10008D1D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008D268, 0, 0);
}

uint64_t sub_10008D268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  Swift::String v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore getCredentialIdentifiers", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD **)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if ((sub_1000099C0(v9) & 1) != 0)
  {
    v10 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 24);
    v12 = swift_allocObject(&unk_100169D98, 32, 7);
    *(_QWORD *)(v1 + 96) = v12;
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v10;
    v13 = swift_allocObject(&unk_100169DC0, 32, 7);
    *(_QWORD *)(v1 + 104) = v13;
    *(_QWORD *)(v13 + 16) = sub_100096308;
    *(_QWORD *)(v13 + 24) = v12;
    v14 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v1 + 112) = v15;
    v16 = sub_100008E84(&qword_100177060);
    *v15 = v1;
    v15[1] = sub_10008D634;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 16, sub_100039668, v13, v16);
  }
  else
  {
    v19 = *(_QWORD *)(v1 + 56);
    v18 = *(_QWORD *)(v1 + 64);
    v20 = *(_QWORD *)(v1 + 48);
    v21 = *(_QWORD *)(v1 + 24);
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v22._countAndFlagsBits = Array.description.getter(v21, &type metadata for String);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._countAndFlagsBits = 0xD000000000000024;
    v24._object = (void *)0x8000000100133510;
    String.append(_:)(v24);
    v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
    v25(v18, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v20);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    v29 = swift_allocError(v27, v28, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6F69746974726170, 0xEB0000000020736ELL, 0, v18, 0, v26, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133750, 100);
    swift_willThrow(v30);
    v34 = *(_QWORD *)(v1 + 88);
    v31 = *(_QWORD *)(v1 + 64);
    v25(v31, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 48));
    swift_errorRetain(v29);
    v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v27, v28, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v29, v31, 0, v32, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133750, 114);
    swift_willThrow(v33);
    swift_errorRelease(v29);
    swift_task_dealloc(v34);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008D634()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008D6E0, 0, 0);
  v5 = *(_QWORD *)(v3 + 96);
  v6 = *(_QWORD *)(v3 + 88);
  v7 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v3 + 104));
  swift_release(v5);
  v8 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v8);
}

uint64_t sub_10008D6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v3(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v4);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v6, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD00000000000001DLL, 0x8000000100133750, 114);
  swift_willThrow(v10);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10008D810@<X0>(_QWORD *a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t result;

  if (byte_100178C90 == 1 && (sub_1000D9C34(42, 0xE100000000000000, a1) & 1) != 0)
    v5 = _swiftEmptyArrayStorage;
  else
    v5 = a1;
  result = sub_10011AE44((uint64_t)v5);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10008D884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = *v5;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008D91C, 0, 0);
}

uint64_t sub_10008D91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  Swift::String v28;
  void (*v29)(uint64_t, _QWORD, uint64_t);
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore credentialIdentifiersInPartitionsDocTypeRegion", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 112);
  v6 = *(_QWORD *)(v1 + 120);
  v8 = *(_QWORD *)(v1 + 104);
  v9 = *(_QWORD **)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if ((sub_1000099C0(v9) & 1) != 0)
  {
    v10 = *(_QWORD *)(v1 + 72);
    v12 = *(_QWORD *)(v1 + 48);
    v11 = *(_QWORD *)(v1 + 56);
    v14 = *(_QWORD *)(v1 + 32);
    v13 = *(_QWORD *)(v1 + 40);
    v15 = *(_QWORD *)(v1 + 24);
    v16 = (_QWORD *)swift_allocObject(&unk_100169D48, 64, 7);
    *(_QWORD *)(v1 + 128) = v16;
    v16[2] = v15;
    v16[3] = v14;
    v16[4] = v13;
    v16[5] = v12;
    v16[6] = v11;
    v16[7] = v10;
    v17 = swift_allocObject(&unk_100169D70, 32, 7);
    *(_QWORD *)(v1 + 136) = v17;
    *(_QWORD *)(v17 + 16) = sub_1000962C4;
    *(_QWORD *)(v17 + 24) = v16;
    v18 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    swift_retain(v16);
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v1 + 144) = v19;
    v20 = sub_100008E84(&qword_100177060);
    *v19 = v1;
    v19[1] = sub_10008DD0C;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 16, sub_100039668, v17, v20);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 88);
    v22 = *(_QWORD *)(v1 + 96);
    v24 = *(_QWORD *)(v1 + 80);
    v25 = *(_QWORD *)(v1 + 24);
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v26._countAndFlagsBits = Array.description.getter(v25, &type metadata for String);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    v28._countAndFlagsBits = 0xD000000000000024;
    v28._object = (void *)0x8000000100133510;
    String.append(_:)(v28);
    v29 = *(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104);
    v29(v22, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v24);
    v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v31 = type metadata accessor for DIPError(0);
    v32 = sub_10000745C();
    v33 = swift_allocError(v31, v32, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6F69746974726170, 0xEB0000000020736ELL, 0, v22, 0, v30, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x8000000100133720, 150);
    swift_willThrow(v34);
    v38 = *(_QWORD *)(v1 + 120);
    v35 = *(_QWORD *)(v1 + 96);
    v29(v35, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 80));
    swift_errorRetain(v33);
    v36 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v31, v32, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v33, v35, 0, v36, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x8000000100133720, 163);
    swift_willThrow(v37);
    swift_errorRelease(v33);
    swift_task_dealloc(v38);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008DD0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 144);
  v3 = *v1;
  *(_QWORD *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008DDB8, 0, 0);
  v5 = *(_QWORD *)(v3 + 128);
  v6 = *(_QWORD *)(v3 + 120);
  v7 = *(_QWORD *)(v3 + 96);
  swift_release(*(_QWORD *)(v3 + 136));
  swift_release(v5);
  v8 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v8);
}

uint64_t sub_10008DDB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v3(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 80));
  swift_errorRetain(v4);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v6, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x8000000100133720, 163);
  swift_willThrow(v10);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10008DEE8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  _QWORD *v13;
  unint64_t result;

  if (byte_100178C90 == 1 && (sub_1000D9C34(42, 0xE100000000000000, a1) & 1) != 0)
    v13 = _swiftEmptyArrayStorage;
  else
    v13 = a1;
  result = sub_10011BBE0((uint64_t)v13, a2, a3, a4, a5);
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t sub_10008DF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = *v3;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v4[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008E024, 0, 0);
}

uint64_t sub_10008E024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  void (*v27)(uint64_t, _QWORD, uint64_t);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore activeRegionsInPartitions", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 96);
  v6 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD **)(v1 + 24);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if ((sub_1000099C0(v9) & 1) != 0)
  {
    v10 = *(_QWORD *)(v1 + 56);
    v12 = *(_QWORD *)(v1 + 32);
    v11 = *(_QWORD *)(v1 + 40);
    v13 = *(_QWORD *)(v1 + 24);
    v14 = (_QWORD *)swift_allocObject(&unk_100169CF8, 48, 7);
    *(_QWORD *)(v1 + 112) = v14;
    v14[2] = v13;
    v14[3] = v12;
    v14[4] = v11;
    v14[5] = v10;
    v15 = swift_allocObject(&unk_100169D20, 32, 7);
    *(_QWORD *)(v1 + 120) = v15;
    *(_QWORD *)(v15 + 16) = sub_10009626C;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v11);
    swift_retain(v14);
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v1 + 128) = v17;
    v18 = sub_100008E84(&qword_1001770B0);
    *v17 = v1;
    v17[1] = sub_10008E404;
    return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 16, sub_100039668, v15, v18);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 72);
    v20 = *(_QWORD *)(v1 + 80);
    v22 = *(_QWORD *)(v1 + 64);
    v23 = *(_QWORD *)(v1 + 24);
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v24._countAndFlagsBits = Array.description.getter(v23, &type metadata for String);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26._countAndFlagsBits = 0xD000000000000024;
    v26._object = (void *)0x8000000100133510;
    String.append(_:)(v26);
    v27 = *(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104);
    v27(v20, enum case for DIPError.Code.idcsUnauthorizedPartition(_:), v22);
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x6F69746974726170, 0xEB0000000020736ELL, 0, v20, 0, v28, 0xD000000000000055, 0x8000000100133360, 0xD000000000000026, 0x80000001001336F0, 176);
    swift_willThrow(v32);
    v36 = *(_QWORD *)(v1 + 104);
    v33 = *(_QWORD *)(v1 + 80);
    v27(v33, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 64));
    swift_errorRetain(v31);
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v29, v30, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v33, 0, v34, 0xD000000000000055, 0x8000000100133360, 0xD000000000000026, 0x80000001001336F0, 189);
    swift_willThrow(v35);
    swift_errorRelease(v31);
    swift_task_dealloc(v36);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008E404()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10008E4B0, 0, 0);
  v5 = *(_QWORD *)(v3 + 112);
  v6 = *(_QWORD *)(v3 + 104);
  v7 = *(_QWORD *)(v3 + 80);
  swift_release(*(_QWORD *)(v3 + 120));
  swift_release(v5);
  v8 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v8);
}

uint64_t sub_10008E4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v1);
  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v3(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v4);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v6, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD000000000000026, 0x80000001001336F0, 189);
  swift_willThrow(v10);
  swift_errorRelease(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E5E0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t)@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;

  if (byte_100178C90 == 1 && (sub_1000D9C34(42, 0xE100000000000000, a1) & 1) != 0)
    v11 = _swiftEmptyArrayStorage;
  else
    v11 = a1;
  result = a4(v11, a2, a3);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_10008E67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100174E30);
  v3[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v3[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[10] = v8;
  v3[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008E72C, 0, 0);
}

uint64_t sub_10008E72C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore deleteCredential", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[10];
  v6 = v1[11];
  v8 = v1[9];
  v10 = v1[3];
  v9 = v1[4];
  v11 = v1[2];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v12 = (_QWORD *)swift_allocObject(&unk_100169BB8, 40, 7);
  v1[12] = v12;
  v12[2] = v9;
  v12[3] = v11;
  v12[4] = v10;
  v13 = swift_allocObject(&unk_100169BE0, 32, 7);
  v1[13] = v13;
  *(_QWORD *)(v13 + 16) = &unk_100177078;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v1[14] = v15;
  *v15 = v1;
  v15[1] = sub_10008E8AC;
  return AsyncCoreDataContainer.write<A>(_:)(v15, &unk_100175AA0, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_10008E8AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10008E9E4;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 96);
    swift_release(*(_QWORD *)(v2 + 104));
    swift_release(v5);
    v4 = sub_10008E920;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008E920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_100169C08, 40, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v4;
  swift_retain(v4);
  v7 = sub_10008BC00(v2, (uint64_t)&unk_100177090, (uint64_t)v6);
  swift_release(v7);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008E9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v8, 0xD000000000000055, 0x8000000100133360, 0xD000000000000014, 0x8000000100133590, 324);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v6 = type metadata accessor for DIPError(0);
  v5[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[15] = v7;
  v5[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v5[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[18] = v9;
  v5[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v5[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[21] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[22] = swift_task_alloc(v12);
  v5[23] = swift_task_alloc(v12);
  v5[24] = swift_task_alloc(v12);
  v13 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[25] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[26] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v15);
  v5[28] = swift_task_alloc(v15);
  return swift_task_switch(sub_10008EC30, 0, 0);
}

uint64_t sub_10008EC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = (_QWORD *)swift_allocObject(&unk_100169C58, 48, 7);
  *(_QWORD *)(v0 + 232) = v7;
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v6;
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(v6 + 16);
  v8 = swift_allocObject(&unk_100169C80, 32, 7);
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v8 + 16) = sub_100096174;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 456) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104);
  *(_QWORD *)(v0 + 256) = v10;
  swift_retain(v5);
  swift_bridgeObjectRetain(v4);
  swift_retain(v6);
  v10(v15, v9, v2);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 264) = v12;
  v13 = sub_100008E84(&qword_1001770A0);
  *v12 = v0;
  v12[1] = sub_10008ED78;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 224), sub_1000961B4, v8, v13);
}

uint64_t sub_10008ED78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 248);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 208) + 8))(*(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 200));
    swift_release(v4);
    v5 = sub_10008EE30;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 248);
    v7 = *(_QWORD *)(v2 + 224);
    v8 = *(_QWORD *)(v2 + 232);
    v9 = *(_QWORD *)(v2 + 200);
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 208) + 8);
    *(_QWORD *)(v2 + 280) = v10;
    v10(v7, v9);
    swift_release(v6);
    swift_release(v8);
    *(_OWORD *)(v2 + 288) = *(_OWORD *)(v2 + 16);
    v5 = sub_10008EEC8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008EE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008EEC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  Swift::String v35;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v2 = *(_QWORD *)(v1 + 288);
  defaultLogger()(a1);
  swift_bridgeObjectRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 288);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    *(_QWORD *)(v1 + 72) = *(_QWORD *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v7 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deleting %{public}ld key signing keys", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 288));
  }

  v8 = *(_QWORD *)(v1 + 288);
  v9 = *(_QWORD *)(v1 + 192);
  v10 = *(_QWORD *)(v1 + 160);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 8);
  *(_QWORD *)(v1 + 304) = v11;
  v11(v9, v10);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v1 + 312) = v12;
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + 288);
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 112);
    *(_DWORD *)(v1 + 460) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v1 + 320) = v14;
    *(_QWORD *)(v1 + 328) = 0;
    v16 = *(_QWORD *)(v13 + 32);
    v15 = *(void **)(v13 + 40);
    *(_QWORD *)(v1 + 336) = v15;
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v1 + 32) = 778793835;
    *(_QWORD *)(v1 + 40) = 0xE400000000000000;
    v17._countAndFlagsBits = v16;
    v17._object = v15;
    String.append(_:)(v17);
    v18 = *(_QWORD *)(v1 + 32);
    v19 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 344) = v19;
    v20 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v1 + 352) = v20;
    v21 = sub_10008F304;
LABEL_11:
    *v20 = v1;
    v20[1] = v21;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v18, v19);
  }
  v22 = *(_QWORD *)(v1 + 296);
  v23 = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 288));
  defaultLogger()(v23);
  swift_bridgeObjectRetain(v22);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(_QWORD *)(v1 + 296);
  if (v27)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v29 = 134349056;
    *(_QWORD *)(v1 + 64) = *(_QWORD *)(v28 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v29 + 4);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Deleting %{public}ld device encryption keys", v29, 0xCu);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 296));
  }

  v30 = *(_QWORD *)(v1 + 296);
  (*(void (**)(_QWORD, _QWORD))(v1 + 304))(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 160));
  v31 = *(_QWORD *)(v30 + 16);
  *(_QWORD *)(v1 + 368) = v31;
  if (v31)
  {
    v32 = *(_QWORD *)(v1 + 296);
    *(_QWORD *)(v1 + 376) = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 112);
    *(_DWORD *)(v1 + 464) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v1 + 416) = 0;
    v34 = *(_QWORD *)(v32 + 32);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v1 + 424) = v33;
    swift_bridgeObjectRetain(v33);
    *(_QWORD *)(v1 + 48) = 778790244;
    *(_QWORD *)(v1 + 56) = 0xE400000000000000;
    v35._countAndFlagsBits = v34;
    v35._object = v33;
    String.append(_:)(v35);
    v18 = *(_QWORD *)(v1 + 48);
    v19 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 432) = v19;
    v20 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v1 + 440) = v20;
    v21 = sub_10008FDE8;
    goto LABEL_11;
  }
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 256);
  v38 = *(unsigned int *)(v1 + 456);
  v39 = *(_QWORD *)(v1 + 216);
  v40 = *(_QWORD *)(v1 + 200);
  v42 = *(_QWORD *)(v1 + 96);
  v41 = *(_QWORD *)(v1 + 104);
  v44 = *(_QWORD *)(v1 + 80);
  v43 = *(_QWORD *)(v1 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 296));
  v45 = (_QWORD *)swift_allocObject(&unk_100169CA8, 48, 7);
  *(_QWORD *)(v1 + 384) = v45;
  v45[2] = v43;
  v45[3] = v42;
  v45[4] = v41;
  v45[5] = v44;
  v46 = swift_allocObject(&unk_100169CD0, 32, 7);
  *(_QWORD *)(v1 + 392) = v46;
  *(_QWORD *)(v46 + 16) = sub_1000961F4;
  *(_QWORD *)(v46 + 24) = v45;
  swift_retain(v43);
  swift_bridgeObjectRetain(v41);
  swift_retain(v44);
  v37(v39, v38, v40);
  v47 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v45);
  v48 = (_QWORD *)swift_task_alloc(v47);
  *(_QWORD *)(v1 + 400) = v48;
  *v48 = v1;
  v48[1] = sub_10008FC20;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v48, *(_QWORD *)(v1 + 216), sub_100095B58, v46, (char *)&type metadata for () + 8);
}

uint64_t sub_10008F304()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 344));
  if (v0)
    v4 = sub_10008F6CC;
  else
    v4 = sub_10008F370;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008F370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
  v1 = *(_QWORD *)(v0 + 328) + 1;
  if (v1 != *(_QWORD *)(v0 + 312))
  {
    *(_QWORD *)(v0 + 328) = v1;
    v10 = *(_QWORD *)(v0 + 288) + 16 * v1;
    v12 = *(_QWORD *)(v10 + 32);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v0 + 336) = v11;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 32) = 778793835;
    *(_QWORD *)(v0 + 40) = 0xE400000000000000;
    v13._countAndFlagsBits = v12;
    v13._object = v11;
    String.append(_:)(v13);
    v14 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 344) = v15;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 352) = v16;
    v17 = sub_10008F304;
LABEL_8:
    *v16 = v0;
    v16[1] = v17;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v14, v15);
  }
  v2 = *(_QWORD *)(v0 + 296);
  v3 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  defaultLogger()(v3);
  swift_bridgeObjectRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 296);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134349056;
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting %{public}ld device encryption keys", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  }

  v18 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  v19 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v0 + 368) = v19;
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)(v0 + 376) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 464) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v0 + 416) = 0;
    v22 = *(_QWORD *)(v20 + 32);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v0 + 424) = v21;
    swift_bridgeObjectRetain(v21);
    *(_QWORD *)(v0 + 48) = 778790244;
    *(_QWORD *)(v0 + 56) = 0xE400000000000000;
    v23._countAndFlagsBits = v22;
    v23._object = v21;
    String.append(_:)(v23);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 432) = v15;
    v16 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 440) = v16;
    v17 = sub_10008FDE8;
    goto LABEL_8;
  }
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  v26 = *(unsigned int *)(v0 + 456);
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 104);
  v32 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  v33 = (_QWORD *)swift_allocObject(&unk_100169CA8, 48, 7);
  *(_QWORD *)(v0 + 384) = v33;
  v33[2] = v31;
  v33[3] = v30;
  v33[4] = v29;
  v33[5] = v32;
  v34 = swift_allocObject(&unk_100169CD0, 32, 7);
  *(_QWORD *)(v0 + 392) = v34;
  *(_QWORD *)(v34 + 16) = sub_1000961F4;
  *(_QWORD *)(v34 + 24) = v33;
  swift_retain(v31);
  swift_bridgeObjectRetain(v29);
  swift_retain(v32);
  v25(v27, v26, v28);
  v35 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v33);
  v36 = (_QWORD *)swift_task_alloc(v35);
  *(_QWORD *)(v0 + 400) = v36;
  *v36 = v0;
  v36[1] = sub_10008FC20;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v36, *(_QWORD *)(v0 + 216), sub_100095B58, v34, (char *)&type metadata for () + 8);
}

uint64_t sub_10008F6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 360);
  v50 = *(_QWORD *)(v0 + 336);
  v2 = *(unsigned int *)(v0 + 460);
  v3 = *(_QWORD *)(v0 + 152);
  v55 = *(_QWORD *)(v0 + 160);
  v56 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v4 = *(_QWORD *)(v0 + 136);
  v52 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v53 = *(_QWORD *)(v0 + 120);
  v54 = *(_QWORD *)(v0 + 176);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 104);
  v6(v3, v2, v4);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v51 = sub_10000745C();
  v8 = swift_allocError(v5, v51, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v7, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000001ALL, 0x80000001001335B0, 117);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v50);
  v6(v3, v2, v4);
  swift_errorRetain(v8);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x80000001001335D0, v8, v3, 0, v10, 0xD000000000000055, 0x8000000100133360, 0xD000000000000014, 0x8000000100133590, 241);
  v11 = swift_allocError(v5, v51, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v12, v52, v5);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v54);
  swift_errorRelease(v8);
  v56(v54, v55);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v5);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 328) + 1;
  if (v14 != *(_QWORD *)(v0 + 312))
  {
    *(_QWORD *)(v0 + 328) = v14;
    v23 = *(_QWORD *)(v0 + 288) + 16 * v14;
    v25 = *(_QWORD *)(v23 + 32);
    v24 = *(void **)(v23 + 40);
    *(_QWORD *)(v0 + 336) = v24;
    swift_bridgeObjectRetain(v24);
    *(_QWORD *)(v0 + 32) = 778793835;
    *(_QWORD *)(v0 + 40) = 0xE400000000000000;
    v26._countAndFlagsBits = v25;
    v26._object = v24;
    String.append(_:)(v26);
    v27 = *(_QWORD *)(v0 + 32);
    v28 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v0 + 344) = v28;
    v29 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 352) = v29;
    v30 = sub_10008F304;
LABEL_8:
    *v29 = v0;
    v29[1] = v30;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v27, v28);
  }
  v15 = *(_QWORD *)(v0 + 296);
  v16 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  defaultLogger()(v16);
  swift_bridgeObjectRetain(v15);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 296);
  if (v20)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v22 = 134349056;
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v21 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v22 + 4);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting %{public}ld device encryption keys", v22, 0xCu);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  }

  v31 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  v32 = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(v0 + 368) = v32;
  if (v32)
  {
    v33 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)(v0 + 376) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
    *(_DWORD *)(v0 + 464) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v0 + 416) = 0;
    v35 = *(_QWORD *)(v33 + 32);
    v34 = *(void **)(v33 + 40);
    *(_QWORD *)(v0 + 424) = v34;
    swift_bridgeObjectRetain(v34);
    *(_QWORD *)(v0 + 48) = 778790244;
    *(_QWORD *)(v0 + 56) = 0xE400000000000000;
    v36._countAndFlagsBits = v35;
    v36._object = v34;
    String.append(_:)(v36);
    v27 = *(_QWORD *)(v0 + 48);
    v28 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 432) = v28;
    v29 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 440) = v29;
    v30 = sub_10008FDE8;
    goto LABEL_8;
  }
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  v39 = *(unsigned int *)(v0 + 456);
  v40 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 200);
  v43 = *(_QWORD *)(v0 + 96);
  v42 = *(_QWORD *)(v0 + 104);
  v45 = *(_QWORD *)(v0 + 80);
  v44 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  v46 = (_QWORD *)swift_allocObject(&unk_100169CA8, 48, 7);
  *(_QWORD *)(v0 + 384) = v46;
  v46[2] = v44;
  v46[3] = v43;
  v46[4] = v42;
  v46[5] = v45;
  v47 = swift_allocObject(&unk_100169CD0, 32, 7);
  *(_QWORD *)(v0 + 392) = v47;
  *(_QWORD *)(v47 + 16) = sub_1000961F4;
  *(_QWORD *)(v47 + 24) = v46;
  swift_retain(v44);
  swift_bridgeObjectRetain(v42);
  swift_retain(v45);
  v38(v40, v39, v41);
  v48 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v46);
  v49 = (_QWORD *)swift_task_alloc(v48);
  *(_QWORD *)(v0 + 400) = v49;
  *v49 = v0;
  v49[1] = sub_10008FC20;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v49, *(_QWORD *)(v0 + 216), sub_100095B58, v47, (char *)&type metadata for () + 8);
}

uint64_t sub_10008FC20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 400);
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 392);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 280))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 200));
    swift_release(v4);
    v5 = sub_10008FD50;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 384);
    (*(void (**)(_QWORD, _QWORD))(v2 + 280))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 200));
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10008FCCC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008FCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008FDE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 432));
  if (v0)
    v4 = sub_100090038;
  else
    v4 = sub_10008FE54;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10008FE54()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 424));
  v1 = *(_QWORD *)(v0 + 416) + 1;
  if (v1 == *(_QWORD *)(v0 + 368))
  {
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
    v3 = *(unsigned int *)(v0 + 456);
    v4 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
    v10 = (_QWORD *)swift_allocObject(&unk_100169CA8, 48, 7);
    *(_QWORD *)(v0 + 384) = v10;
    v10[2] = v8;
    v10[3] = v7;
    v10[4] = v6;
    v10[5] = v9;
    v11 = swift_allocObject(&unk_100169CD0, 32, 7);
    *(_QWORD *)(v0 + 392) = v11;
    *(_QWORD *)(v11 + 16) = sub_1000961F4;
    *(_QWORD *)(v11 + 24) = v10;
    swift_retain(v8);
    swift_bridgeObjectRetain(v6);
    swift_retain(v9);
    v2(v4, v3, v5);
    v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v10);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 400) = v13;
    *v13 = v0;
    v13[1] = sub_10008FC20;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v13, *(_QWORD *)(v0 + 216), sub_100095B58, v11, (char *)&type metadata for () + 8);
  }
  else
  {
    *(_QWORD *)(v0 + 416) = v1;
    v15 = *(_QWORD *)(v0 + 296) + 16 * v1;
    v17 = *(_QWORD *)(v15 + 32);
    v16 = *(void **)(v15 + 40);
    *(_QWORD *)(v0 + 424) = v16;
    swift_bridgeObjectRetain(v16);
    *(_QWORD *)(v0 + 48) = 778790244;
    *(_QWORD *)(v0 + 56) = 0xE400000000000000;
    v18._countAndFlagsBits = v17;
    v18._object = v16;
    String.append(_:)(v18);
    v19 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 432) = v20;
    v21 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 440) = v21;
    *v21 = v0;
    v21[1] = sub_10008FDE8;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v19, v20);
  }
}

uint64_t sub_100090038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 448);
  v35 = *(_QWORD *)(v0 + 424);
  v2 = *(unsigned int *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 160);
  v41 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v4 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v38 = *(_QWORD *)(v0 + 120);
  v39 = *(_QWORD *)(v0 + 176);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 104);
  v6(v3, v2, v4);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v36 = sub_10000745C();
  v8 = swift_allocError(v5, v36, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v7, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000020, 0x8000000100130E90, 201);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v35);
  v6(v3, v2, v4);
  swift_errorRetain(v8);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001001335F0, v8, v3, 0, v10, 0xD000000000000055, 0x8000000100133360, 0xD000000000000014, 0x8000000100133590, 252);
  v11 = swift_allocError(v5, v36, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v12, v37, v5);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v39);
  swift_errorRelease(v8);
  v41(v39, v40);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v5);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 416) + 1;
  if (v14 == *(_QWORD *)(v0 + 368))
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
    v16 = *(unsigned int *)(v0 + 456);
    v17 = *(_QWORD *)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
    v23 = (_QWORD *)swift_allocObject(&unk_100169CA8, 48, 7);
    *(_QWORD *)(v0 + 384) = v23;
    v23[2] = v21;
    v23[3] = v20;
    v23[4] = v19;
    v23[5] = v22;
    v24 = swift_allocObject(&unk_100169CD0, 32, 7);
    *(_QWORD *)(v0 + 392) = v24;
    *(_QWORD *)(v24 + 16) = sub_1000961F4;
    *(_QWORD *)(v24 + 24) = v23;
    swift_retain(v21);
    swift_bridgeObjectRetain(v19);
    swift_retain(v22);
    v15(v17, v16, v18);
    v25 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v23);
    v26 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 400) = v26;
    *v26 = v0;
    v26[1] = sub_10008FC20;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v26, *(_QWORD *)(v0 + 216), sub_100095B58, v24, (char *)&type metadata for () + 8);
  }
  else
  {
    *(_QWORD *)(v0 + 416) = v14;
    v28 = *(_QWORD *)(v0 + 296) + 16 * v14;
    v30 = *(_QWORD *)(v28 + 32);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v0 + 424) = v29;
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)(v0 + 48) = 778790244;
    *(_QWORD *)(v0 + 56) = 0xE400000000000000;
    v31._countAndFlagsBits = v30;
    v31._object = v29;
    String.append(_:)(v31);
    v32 = *(_QWORD *)(v0 + 48);
    v33 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 432) = v33;
    v34 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 440) = v34;
    *v34 = v0;
    v34[1] = sub_10008FDE8;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v32, v33);
  }
}

void sub_100090410(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v9 = sub_1000093E8(a1, a2);
  if (v4)
    return;
  v10 = v9;
  v11 = (uint64_t)sub_1000C5240();
  v44 = v10;
  v47 = a3;
  v12 = v11;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v26 = v11;
    else
      v26 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v13 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v12);
    v42 = a4;
    if (v13)
      goto LABEL_4;
LABEL_20:
    v5 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  v42 = a4;
  if (!v13)
    goto LABEL_20;
LABEL_4:
  if (v13 < 1)
  {
    __break(1u);
LABEL_38:
    if (v6 < 0)
      v41 = v6;
    else
      v41 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v28 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v6);
    if (v28)
      goto LABEL_25;
LABEL_42:
    v30 = (char *)_swiftEmptyArrayStorage;
LABEL_43:
    swift_bridgeObjectRelease(v6);
    sub_1000091F8();

    *v42 = v5;
    v42[1] = v30;
    return;
  }
  v14 = 0;
  v15 = v12 & 0xC000000000000001;
  v5 = (char *)_swiftEmptyArrayStorage;
  v45 = v12;
  do
  {
    if (v15)
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
    else
      v17 = *(id *)(v12 + 8 * v14 + 32);
    v18 = v17;
    v19 = objc_msgSend(v17, "identifier");
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_1000A73AC(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v25 = *((_QWORD *)v5 + 2);
      v24 = *((_QWORD *)v5 + 3);
      if (v25 >= v24 >> 1)
        v5 = sub_1000A73AC((char *)(v24 > 1), v25 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v25 + 1;
      v16 = &v5[16 * v25];
      *((_QWORD *)v16 + 4) = v21;
      *((_QWORD *)v16 + 5) = v23;
      objc_msgSend(*(id *)(v47 + 16), "deleteObject:", v18);
      v12 = v45;
    }
    ++v14;

  }
  while (v13 != v14);
LABEL_21:
  swift_bridgeObjectRelease(v12);
  sub_1000091F8();
  v27 = (unint64_t)sub_1000C4FBC();
  v6 = v27;
  if (v27 >> 62)
    goto LABEL_38;
  v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v28)
    goto LABEL_42;
LABEL_25:
  if (v28 >= 1)
  {
    v29 = 0;
    v46 = v6 & 0xC000000000000001;
    v30 = (char *)_swiftEmptyArrayStorage;
    v43 = v6;
    do
    {
      if (v46)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v6);
      else
        v32 = *(id *)(v6 + 8 * v29 + 32);
      v33 = v32;
      v34 = objc_msgSend(v32, "identifier");
      if (v34)
      {
        v35 = v34;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v38 = v37;

        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = sub_1000A73AC(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
        v40 = *((_QWORD *)v30 + 2);
        v39 = *((_QWORD *)v30 + 3);
        if (v40 >= v39 >> 1)
          v30 = sub_1000A73AC((char *)(v39 > 1), v40 + 1, 1, v30);
        *((_QWORD *)v30 + 2) = v40 + 1;
        v31 = &v30[16 * v40];
        *((_QWORD *)v31 + 4) = v36;
        *((_QWORD *)v31 + 5) = v38;
        objc_msgSend(*(id *)(v47 + 16), "deleteObject:", v33);
        v6 = v43;
      }
      ++v29;

    }
    while (v28 != v29);
    goto LABEL_43;
  }
  __break(1u);
}

void sub_1000907D8(uint64_t a1, unint64_t a2, void *a3, id *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  int v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id *v74;
  void *v75;
  uint64_t v76;
  _QWORD v77[12];
  uint64_t v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  int v85;
  int v86;
  void (*v87)(unint64_t, uint64_t);
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  id *v101;
  id *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;

  v100 = a2;
  v96 = type metadata accessor for DIPError(0);
  v93 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v92 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DIPError.Code(0);
  v91 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v94 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001755B8);
  __chkstk_darwin(v9);
  v98 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for CredentialKeyType(0);
  v106 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v12 = (id *)((char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)v77 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)v77 - v21;
  v23 = v102;
  v24 = sub_1000093E8(v100, a3);
  if (v23)
    return;
  v99 = (unint64_t)v22;
  v100 = v14;
  v102 = v12;
  v84 = a1;
  v83 = v17;
  v88 = v20;
  v90 = v13;
  v101 = a4;
  v25 = v24;
  v26 = (uint64_t)sub_1000C5D54();
  v79 = v25;
  v27 = v99;
  defaultLogger()(v26);
  v28 = swift_bridgeObjectRetain_n(v26, 2);
  v29 = Logger.logObject.getter(v28);
  LOBYTE(v12) = static os_log_type_t.info.getter();
  v30 = (unint64_t)v26 >> 62;
  if (!os_log_type_enabled(v29, (os_log_type_t)v12))
  {

    swift_bridgeObjectRelease_n(v26, 2);
    v32 = v90;
    v33 = v100;
    goto LABEL_7;
  }
  v31 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v31 = 134349056;
  v32 = v90;
  v33 = v100;
  if (v30)
    goto LABEL_50;
  v97 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v26);
    v104 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v31 + 4);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v12, "Deleting %{public}ld presentment keys", v31, 0xCu);
    swift_slowDealloc(v31, -1, -1);

LABEL_7:
    v87 = *(void (**)(unint64_t, uint64_t))(v33 + 8);
    v87(v27, v32);
    v12 = v101;
    v31 = (uint8_t *)v103;
    if (v30)
      break;
    v33 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v33)
      goto LABEL_32;
LABEL_9:
    if (v33 >= 1)
    {
      v34 = 0;
      v100 = v26 & 0xC000000000000001;
      v89 = enum case for CredentialKeyType.legacySE(_:);
      v85 = enum case for CredentialKeyType.ses(_:);
      v86 = enum case for DIPError.Code.internalError(_:);
      v77[11] = "state transition from ";
      v82 = 0x8000000100133590;
      LODWORD(v97) = enum case for CredentialKeyType.invalid(_:);
      v81 = 0x8000000100133650;
      v77[10] = "featureFlagProvider";
      v80 = 0x8000000100133360;
      v77[9] = 0x8000000100133670;
      v77[8] = 0x800000010012FD00;
      v77[7] = 0x8000000100133690;
      v77[6] = 0x80000001001336C0;
      v99 = v26;
      while (1)
      {
        if (v100)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v26);
        else
          v35 = *(id *)(v26 + 8 * v34 + 32);
        v36 = v35;
        v37 = objc_msgSend(v35, "keyType");
        if (!v37)
          goto LABEL_17;
        v38 = v37;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v41 = v40;

        v42 = (uint64_t)v98;
        v43 = v41;
        v31 = (uint8_t *)v103;
        CredentialKeyType.init(rawValue:)(v39, v43);
        v44 = v106;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *))(v106 + 48))(v42, 1, v31) == 1)
          break;
        v45 = v102;
        (*(void (**)(void))(v44 + 32))();
        v46 = (*(uint64_t (**)(id *, uint8_t *))(v44 + 88))(v45, v31);
        v12 = v101;
        if (v46 == v89)
        {
          sub_100104754((uint64_t)objc_msgSend(v36, "keySlot"));
          goto LABEL_19;
        }
        if (v46 != v85)
          goto LABEL_18;
        v47 = objc_msgSend(v36, "keyBlob");
        if (!v47)
        {
          v26 = v99;
          goto LABEL_20;
        }
        v48 = v47;
        v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
        v51 = v50;

        v78 = v49;
        dispatch thunk of SESKeystore.deleteKey(_:)(v49, v51);
        sub_100005AB0(v78, v51);
LABEL_19:
        v26 = v99;
        objc_msgSend(v12[2], "deleteObject:", v36);
LABEL_20:
        ++v34;

        if (v33 == v34)
          goto LABEL_32;
      }
      sub_1000150E8(v42, &qword_1001755B8);
      v12 = v101;
LABEL_17:
      v44 = v106;
      v45 = v102;
      (*(void (**)(id *, _QWORD, uint8_t *))(v106 + 104))(v102, v97, v31);
LABEL_18:
      (*(void (**)(id *, uint8_t *))(v44 + 8))(v45, v31);
      goto LABEL_19;
    }
    __break(1u);
LABEL_50:
    if (v26 < 0)
      v72 = v26;
    else
      v72 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v97 = _CocoaArrayWrapper.endIndex.getter(v72);
    swift_bridgeObjectRelease(v26);
  }
  if (v26 < 0)
    v52 = v26;
  else
    v52 = v26 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v26);
  v33 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease(v26);
  if (v33)
    goto LABEL_9;
LABEL_32:
  swift_bridgeObjectRelease(v26);
  sub_1000091F8();
  v53 = sub_1000C70A0();
  v54 = (uint64_t)v53;
  v55 = v83;
  defaultLogger()(v53);
  v56 = swift_bridgeObjectRetain_n(v54, 2);
  v57 = Logger.logObject.getter(v56);
  LOBYTE(v58) = static os_log_type_t.info.getter();
  v59 = (unint64_t)v54 >> 62;
  if (!os_log_type_enabled(v57, (os_log_type_t)v58))
  {

    swift_bridgeObjectRelease_n(v54, 2);
    v60 = v90;
    goto LABEL_39;
  }
  v31 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v31 = 134349056;
  v60 = v90;
  if (v59)
    goto LABEL_60;
  v61 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v54);
    v104 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v31 + 4);
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "Deleting %{public}ld payload protection keys", v31, 0xCu);
    swift_slowDealloc(v31, -1, -1);

LABEL_39:
    v87((unint64_t)v55, v60);
    if (v59)
    {
      if (v54 < 0)
        v73 = v54;
      else
        v73 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v54);
      v58 = _CocoaArrayWrapper.endIndex.getter(v73);
      swift_bridgeObjectRelease(v54);
      if (!v58)
        goto LABEL_58;
    }
    else
    {
      v58 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v58)
        goto LABEL_58;
    }
    if (v58 >= 1)
      break;
    __break(1u);
LABEL_60:
    if (v54 < 0)
      v76 = v54;
    else
      v76 = v54 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v54);
    v61 = _CocoaArrayWrapper.endIndex.getter(v76);
    swift_bridgeObjectRelease(v54);
  }
  v62 = 0;
  LODWORD(v102) = enum case for DIPError.Code.internalError(_:);
  v99 = 0x8000000100133620;
  v100 = 0x8000000100133590;
  v98 = (char *)0x8000000100133360;
  v106 = v58;
  v103 = v54 & 0xC000000000000001;
  do
  {
    if ((v54 & 0xC000000000000001) != 0)
      v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v54);
    else
      v63 = *(id *)(v54 + 8 * v62 + 32);
    v64 = v63;
    v65 = objc_msgSend(v63, "identifier");
    if (v65)
    {
      v66 = v65;
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v69 = v68;

      v104 = 778793072;
      v105 = 0xE400000000000000;
      v70._countAndFlagsBits = v67;
      v70._object = v69;
      String.append(_:)(v70);
      v71 = v105;
      sub_100040514(v104, v105);
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v101[2], "deleteObject:", v64);
    }
    ++v62;

  }
  while (v58 != v62);
LABEL_58:
  swift_bridgeObjectRelease(v54);
  v74 = v101;
  sub_1000091F8();
  v75 = v79;
  objc_msgSend(v74[2], "deleteObject:", v79);
  sub_1000091F8();

}

uint64_t sub_100091690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = sub_100008E84(&qword_100174E30);
  v4[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v4[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[5] = v7;
  v4[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100091714, 0, 0);
}

uint64_t sub_100091714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Kicking off MobileAsset clear cache", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 16);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v9);
  v11 = *(_QWORD *)(v10 + 160);
  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  swift_retain(v11);
  v13(v8, 1, 1, v12);
  v14 = (_QWORD *)swift_allocObject(&unk_100169C30, 40, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v11;
  swift_retain(v11);
  v15 = sub_10008BC00(v8, (uint64_t)&unk_100177098, (uint64_t)v14);
  swift_release(v15);
  swift_release(v11);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10009186C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100008E84(&qword_100174E30);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009191C, 0, 0);
}

uint64_t sub_10009191C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore setState", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[11];
  v6 = v1[12];
  v8 = v1[10];
  v10 = v1[4];
  v9 = v1[5];
  v12 = v1[2];
  v11 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v13 = (_QWORD *)swift_allocObject(&unk_100169A50, 48, 7);
  v1[13] = v13;
  v13[2] = v9;
  v13[3] = v12;
  v13[4] = v11;
  v13[5] = v10;
  v14 = swift_allocObject(&unk_100169A78, 32, 7);
  v1[14] = v14;
  *(_QWORD *)(v14 + 16) = sub_100095D98;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_retain(v13);
  v16 = (_QWORD *)swift_task_alloc(v15);
  v1[15] = v16;
  *v16 = v1;
  v16[1] = sub_100091A9C;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_100091A9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100091BD8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 112));
    swift_release(v5);
    v4 = sub_100091B10;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100091B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 32) == 2)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    v4 = (_QWORD *)swift_allocObject(&unk_100169AA0, 40, 7);
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = v1;
    swift_retain(v1);
    v5 = sub_10008BC00(v2, (uint64_t)&unk_100177028, (uint64_t)v4);
    swift_release(v5);
  }
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100091BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v7);
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v8, 0xD000000000000055, 0x8000000100133360, 0xD000000000000010, 0x80000001001334D0, 354);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100091D1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  Swift::UInt v15;
  Swift::UInt v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000093E8(a3, a4);
  if (!v5)
  {
    v14 = v13;
    v15 = (Swift::UInt)objc_msgSend(v13, "state");
    if ((v15 & 0x8000000000000000) == 0)
    {
      v16 = v15;
      if ((sub_100009D80(v15, a5) & 1) == 0)
      {
        v35 = 0;
        v36 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease(v36);
        v35 = 0xD000000000000016;
        v36 = 0x8000000100133570;
        v17 = (id)DCCredentialStateToString(v16);
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v21._countAndFlagsBits = v18;
        v21._object = v20;
        String.append(_:)(v21);
        swift_bridgeObjectRelease(v20);
        v22._countAndFlagsBits = 544175136;
        v22._object = (void *)0xE400000000000000;
        String.append(_:)(v22);
        v23 = (id)DCCredentialStateToString(a5);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        v27._countAndFlagsBits = v24;
        v27._object = v26;
        String.append(_:)(v27);
        swift_bridgeObjectRelease(v26);
        v28._countAndFlagsBits = 0x20746F6E20736920;
        v28._object = (void *)0xEF6465776F6C6C61;
        String.append(_:)(v28);
        v29 = v35;
        v30 = v36;
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.idcsInvalidCredentialStateTransition(_:), v9);
        v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v32 = type metadata accessor for DIPError(0);
        v33 = sub_10000745C();
        swift_allocError(v32, v33, 0, 0);
        v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v29, v30, 0, v12, 0, v31, 0xD000000000000055, 0x8000000100133360, 0xD000000000000010, 0x80000001001334D0, 341);
        swift_willThrow(v34);
        goto LABEL_7;
      }
      if ((a5 & 0x8000000000000000) == 0)
      {
        objc_msgSend(v14, "setState:", a5);
        sub_1000091F8();
LABEL_7:

        return;
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
}

uint64_t sub_100092024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = sub_100008E84(&qword_100174E30);
  v4[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v4[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[5] = v7;
  v4[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000920A8, 0, 0);
}

uint64_t sub_1000920A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Kicking off MobileAssetRefresh", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 16);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v9);
  v11 = *(_QWORD *)(v10 + 160);
  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  swift_retain(v11);
  v13(v8, 1, 1, v12);
  v14 = (_QWORD *)swift_allocObject(&unk_100169AF0, 40, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v11;
  swift_retain(v11);
  v15 = sub_10008BC00(v8, (uint64_t)&unk_100177040, (uint64_t)v14);
  swift_release(v15);
  swift_release(v11);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100092200(uint64_t a1@<X2>, void *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v5 = sub_1000093E8(a1, a2);
  if (!v3)
  {
    v6 = v5;
    v7 = (void *)sub_1000C70BC();
    v8 = objc_msgSend(v7, "options");
    v9 = objc_msgSend(v8, "presentmentAuthPolicy");

    if ((unint64_t)v9 < 2
      || v9 == (id)2
      && (v12 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0),
          v13 = v12,
          v12,
          v13))
    {
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v10 = v7;
      v11 = 0;
    }
    objc_msgSend(v10, "setHasUsablePresentmentAuthPolicy:", v11);

    *a3 = v7;
  }
}

uint64_t sub_100092334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000923C0, 0, 0);
}

uint64_t sub_1000923C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore getPayloadAuthACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[11];
  v7 = v1[12];
  v8 = v1[10];
  v10 = v1[5];
  v9 = v1[6];
  v11 = v1[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v12 = (_QWORD *)swift_allocObject(&unk_1001699B0, 40, 7);
  v1[13] = v12;
  v12[2] = v9;
  v12[3] = v11;
  v12[4] = v10;
  v13 = swift_allocObject(&unk_1001699D8, 32, 7);
  v1[14] = v13;
  *(_QWORD *)(v13 + 16) = &unk_100176FF0;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v1[15] = v15;
  v16 = sub_100008E84(&qword_100177008);
  *v15 = v1;
  v15[1] = sub_100092550;
  return AsyncCoreDataContainer.read<A>(_:)(v1 + 2, &unk_100177000, v13, v16);
}

uint64_t sub_100092550()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100092618;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 112));
    swift_release(v5);
    v4 = sub_1000925C4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000925C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t sub_100092618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_10000745C();
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v7, 0xD000000000000055, 0x8000000100133360, 0xD000000000000017, 0x80000001001334B0, 431);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[20] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[21] = swift_task_alloc(v8);
  v5[22] = swift_task_alloc(v8);
  v5[23] = swift_task_alloc(v8);
  v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[25] = v10;
  v5[26] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000927FC, 0, 0);
}

uint64_t sub_1000927FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[25];
  v1 = v0[26];
  v3 = v0[24];
  v4 = v0[17];
  v5 = v0[18];
  v7 = v0[15];
  v6 = v0[16];
  v8 = (_QWORD *)swift_allocObject(&unk_100169A00, 48, 7);
  v0[27] = v8;
  v8[2] = v6;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100169A28, 32, 7);
  v0[28] = v9;
  *(_QWORD *)(v9 + 16) = sub_100095D20;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[29] = v13;
  v14 = sub_100008E84(&qword_100177010);
  *v13 = v0;
  v13[1] = sub_10009293C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 10, v0[26], sub_100095D3C, v9, v14);
}

uint64_t sub_10009293C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  v5 = *(_QWORD *)(*v1 + 200);
  v4 = *(_QWORD *)(*v1 + 208);
  v6 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 224));
    v7 = sub_100092E68;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 216);
    swift_release(*(_QWORD *)(v2 + 224));
    swift_release(v8);
    *(_QWORD *)(v2 + 248) = *(_QWORD *)(v2 + 80);
    *(_BYTE *)(v2 + 89) = *(_BYTE *)(v2 + 88);
    v7 = sub_1000929F0;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000929F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  _QWORD *v24;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if ((*(_BYTE *)(v1 + 89) & 1) != 0)
    goto LABEL_15;
  v2 = *(_QWORD *)(v1 + 248);
  if ((unint64_t)(v2 - 1) >= 2)
  {
    if (v2)
    {
      v26 = defaultLogger()(a1);
      v14 = Logger.logObject.getter(v26);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v27))
      {
        v28 = *(_QWORD *)(v1 + 248);
        v42 = *(_QWORD *)(v1 + 160);
        v44 = *(_QWORD *)(v1 + 152);
        v46 = *(_QWORD *)(v1 + 168);
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v47 = v30;
        *(_DWORD *)v29 = 136315138;
        v31 = (id)DCCredentialPayloadProtectionTypeToString(v28);
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

        *(_QWORD *)(v1 + 96) = sub_10003FA80(v32, v34, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v29 + 4);
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v14, v27, "Unknown payload protection type %s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v44);
LABEL_15:
        v37 = *(_QWORD *)(v1 + 208);
        v38 = *(_QWORD *)(v1 + 176);
        v39 = *(_QWORD *)(v1 + 184);
        v40 = *(_QWORD *)(v1 + 168);
        *(_OWORD *)*(_QWORD *)(v1 + 112) = xmmword_10012AC40;
        swift_task_dealloc(v37);
        swift_task_dealloc(v39);
        swift_task_dealloc(v38);
        swift_task_dealloc(v40);
        return (*(uint64_t (**)(void))(v1 + 8))();
      }
      v17 = *(_QWORD *)(v1 + 168);
    }
    else
    {
      v13 = defaultLogger()(a1);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Payload uses standard protection, no ACL required", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }
      v17 = *(_QWORD *)(v1 + 184);
    }
    v35 = *(_QWORD *)(v1 + 152);
    v36 = *(_QWORD *)(v1 + 160);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v17, v35);
    goto LABEL_15;
  }
  v3 = defaultLogger()(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 248);
    v41 = *(_QWORD *)(v1 + 160);
    v43 = *(_QWORD *)(v1 + 152);
    v45 = *(_QWORD *)(v1 + 176);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v47 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = (id)DCCredentialPayloadProtectionTypeToString(v6);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    *(_QWORD *)(v1 + 104) = sub_10003FA80(v10, v12, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v7 + 4);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Payload uses key protection: %s, fetching ACL", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 176);
    v19 = *(_QWORD *)(v1 + 152);
    v20 = *(_QWORD *)(v1 + 160);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 24);
  v22 = type metadata accessor for ACLFetcher();
  inited = swift_initStackObject(v22, v1 + 16);
  *(_QWORD *)(v1 + 256) = inited;
  *(_QWORD *)(inited + 16) = v21;
  type metadata accessor for AppleIDVManager(0);
  swift_retain(v21);
  sub_100112A6C((uint64_t *)(inited + 24));
  v24 = (_QWORD *)swift_task_alloc(dword_100176D44);
  *(_QWORD *)(v1 + 264) = v24;
  *v24 = v1;
  v24[1] = sub_100092ECC;
  return sub_1000878CC();
}

uint64_t sub_100092E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 216));
  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 264);
  *(_QWORD *)(*v3 + 272) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_100092FCC;
  }
  else
  {
    *(_QWORD *)(v6 + 280) = a2;
    *(_QWORD *)(v6 + 288) = a1;
    v8 = sub_100092F44;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100092F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 256);
  swift_setDeallocating(v1);
  swift_release(*(_QWORD *)(v1 + 16));
  sub_10000CE40((_QWORD *)(v1 + 24));
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD **)(v0 + 112);
  *v7 = *(_QWORD *)(v0 + 288);
  v7[1] = v2;
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100092FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 256);
  swift_setDeallocating(v1);
  swift_release(*(_QWORD *)(v1 + 16));
  sub_10000CE40((_QWORD *)(v1 + 24));
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100093048(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000093E8(a1, a2);
  if (!v3)
  {
    v12 = v11;
    v13 = (uint64_t)sub_1000C4E40();
    v14 = v13;
    if ((unint64_t)v13 >> 62)
    {
      if (v13 >= 0)
        v13 &= 0xFFFFFFFFFFFFFF8uLL;
      v15 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (v15)
      {
LABEL_4:
        if ((v14 & 0xC000000000000001) != 0)
        {
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
        }
        else
        {
          if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_19;
          }
          v16 = *(id *)(v14 + 32);
        }
        v17 = v16;
        swift_bridgeObjectRelease(v14);
        v18 = (unint64_t)objc_msgSend(v17, "protectionType");
        if ((v18 & 0x8000000000000000) == 0)
        {
          v19 = v18;

LABEL_15:
          *(_QWORD *)a3 = v19;
          *(_BYTE *)(a3 + 8) = v15 == 0;
          return;
        }
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        __break(1u);
        return;
      }
    }
    else
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15)
        goto LABEL_4;
    }
    v20 = swift_bridgeObjectRelease(v14);
    v21 = defaultLogger()(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      v28 = v15;
      v25 = v24;
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Credential has no payloads, so no payload auth acl", v24, 2u);
      v26 = v25;
      v15 = v28;
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v19 = 0;
    goto LABEL_15;
  }
}

uint64_t sub_100093294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[14] = v8;
  v6[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[17] = v10;
  v6[18] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100093324, 0, 0);
}

uint64_t sub_100093324(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStore getElements", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[17];
  v7 = v1[18];
  v8 = v1[16];
  v10 = v1[11];
  v9 = v1[12];
  v11 = v1[10];
  v13 = v1[7];
  v12 = v1[8];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v14 = (_QWORD *)swift_allocObject(&unk_100169910, 56, 7);
  v1[19] = v14;
  v14[2] = v9;
  v14[3] = v13;
  v14[4] = v12;
  v14[5] = v11;
  v14[6] = v10;
  swift_retain(v9);
  swift_bridgeObjectRetain(v12);
  sub_10000B178(v11, v10);
  v15 = swift_allocObject(&unk_100169938, 32, 7);
  v1[20] = v15;
  *(_QWORD *)(v15 + 16) = &unk_100176FC0;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v14);
  v17 = (_QWORD *)swift_task_alloc(v16);
  v1[21] = v17;
  v18 = sub_100008E84(&qword_100176FD8);
  *v17 = v1;
  v17[1] = sub_1000934D4;
  return AsyncCoreDataContainer.read<A>(_:)(v1 + 2, &unk_100176FD0, v15, v18);
}

uint64_t sub_1000934D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009363C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 152);
    swift_release(*(_QWORD *)(v2 + 160));
    swift_release(v5);
    v4 = sub_100093548;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100093548()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[5];
  v2 = v0[6];
  sub_1000151A4(v0 + 2, v1);
  v3 = *(int **)(v2 + 16);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[23] = v4;
  *v4 = v0;
  v4[1] = sub_1000935C8;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v6)(v0[9], v1, v2);
}

uint64_t sub_1000935C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000937E4;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v6 = sub_100093768;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10009363C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v2);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_10000745C();
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v4, 0, v5, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 528);
  swift_willThrow(v8);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = sub_10007A8B8(v1);
  swift_bridgeObjectRelease(v1);
  sub_10000CE40((_QWORD *)(v0 + 16));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000937E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_10000CE40((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v1);
  v4 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_10000745C();
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 528);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100093908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[42] = a2;
  v7[43] = a3;
  v7[41] = a1;
  v8 = type metadata accessor for DIPError.Code(0);
  v7[48] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[49] = v9;
  v7[50] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v7[51] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[52] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[53] = swift_task_alloc(v12);
  v7[54] = swift_task_alloc(v12);
  v7[55] = swift_task_alloc(v12);
  v7[56] = swift_task_alloc(v12);
  v13 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v7[57] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[58] = v14;
  v7[59] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000939EC, 0, 0);
}

uint64_t sub_1000939EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[58];
  v1 = v0[59];
  v3 = v0[57];
  v4 = v0[44];
  v5 = v0[45];
  v7 = v0[42];
  v6 = v0[43];
  v8 = (_QWORD *)swift_allocObject(&unk_100169960, 48, 7);
  v0[60] = v8;
  v8[2] = v6;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_100169988, 32, 7);
  v0[61] = v9;
  *(_QWORD *)(v9 + 16) = sub_100095B3C;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[62] = v13;
  *v13 = v0;
  v13[1] = sub_100093B24;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[59], sub_100095B58, v9, &type metadata for CredentialStorage.DBResult);
}

uint64_t sub_100093B24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc(v3);
  v4 = v2[61];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[58] + 8))(v2[59], v2[57]);
    swift_release(v4);
    v5 = sub_1000942FC;
  }
  else
  {
    v6 = v2[60];
    (*(void (**)(_QWORD, _QWORD))(v2[58] + 8))(v2[59], v2[57]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_100093BCC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100093BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t (*v49)();
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 512) = v3;
  *(_QWORD *)(v0 + 520) = v2;
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 528) = v4;
  v6 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 536) = v6;
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 544) = v8;
  v74 = v1;
  v75 = v7;
  *(_QWORD *)(v0 + 552) = v7;
  v76 = *(_QWORD *)(v0 + 104);
  v77 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 560) = v76;
  *(_QWORD *)(v0 + 568) = v77;
  v9 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 576) = v9;
  v10 = (void *)objc_opt_self(NSUserDefaults);
  swift_bridgeObjectRetain(v3);
  v79 = v2;
  sub_100005A38(v2, v4);
  swift_bridgeObjectRetain(v8);
  v11 = objc_msgSend(v10, "standardUserDefaults", swift_bridgeObjectRetain(v6).n128_f64[0]);
  v12._countAndFlagsBits = 0xD00000000000001ELL;
  v12._object = (void *)0x800000010012DCD0;
  LOBYTE(v2) = NSUserDefaults.internalBool(forKey:)(v12);

  v80 = v4;
  v78 = v9;
  if ((v2 & 1) == 0)
  {
    v38 = *(_QWORD *)(v0 + 376);
    if (v5 == 1)
    {
      if (v38 >> 60 != 15)
        goto LABEL_13;
    }
    else if (v5 != 2 || v38 >> 60 != 15)
    {
      goto LABEL_5;
    }
    v50 = *(_QWORD *)(v0 + 400);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 104))(v50, enum case for DIPError.Code.idcsPayloadRequiresAuth(_:), *(_QWORD *)(v0 + 384));
    v51 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v52 = type metadata accessor for DIPError(0);
    v53 = sub_10000745C();
    swift_allocError(v52, v53, 0, 0);
    v54 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000050, 0x8000000100133420, 0, v50, 0, v51, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 489);
    swift_willThrow(v54);
    swift_bridgeObjectRelease(v3);
    sub_100005AB0(v79, v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v3);
    sub_100005AB0(v79, v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    sub_100051880(v75, v76, v77, v78);
    goto LABEL_25;
  }
  v14 = defaultLogger()(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Attempting to access payload due to internal defaults setting", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 416);

  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
LABEL_5:
  switch(v5)
  {
    case 2:
      v55 = defaultLogger()(v13);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Payload protection type is payload encryption key", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }
      v43 = v0 + 168;
      v59 = *(_QWORD *)(v0 + 416);
      v60 = *(_QWORD *)(v0 + 424);
      v61 = *(_QWORD *)(v0 + 408);
      v62 = *(_QWORD *)(v0 + 344);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v61);
      sub_1000151A4((_QWORD *)(v62 + 72), *(_QWORD *)(v62 + 96));
      v48 = (_QWORD *)swift_task_alloc(dword_1001789EC);
      *(_QWORD *)(v0 + 616) = v48;
      v49 = sub_100094C5C;
      goto LABEL_22;
    case 1:
LABEL_13:
      v39 = defaultLogger()(v13);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Payload protection type is device encryption key", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }
      v43 = v0 + 248;
      v44 = *(_QWORD *)(v0 + 432);
      v46 = *(_QWORD *)(v0 + 408);
      v45 = *(_QWORD *)(v0 + 416);
      v47 = *(_QWORD *)(v0 + 344);

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      sub_1000151A4((_QWORD *)(v47 + 72), *(_QWORD *)(v47 + 96));
      v48 = (_QWORD *)swift_task_alloc(dword_1001789EC);
      *(_QWORD *)(v0 + 600) = v48;
      v49 = sub_1000947EC;
LABEL_22:
      *v48 = v0;
      v48[1] = v49;
      v30 = v43;
      v31 = v79;
      v32 = v80;
      v33 = v74;
      v34 = v75;
      v35 = v76;
      v36 = v77;
      v37 = v78;
      return sub_1001189B8(v30, v31, v32, v33, v34, v35, v36, v37);
    case 0:
      v21 = defaultLogger()(v13);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Payload protection type is standard, extracting elements from credential payload", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }
      v25 = *(_QWORD *)(v0 + 440);
      v27 = *(_QWORD *)(v0 + 408);
      v26 = *(_QWORD *)(v0 + 416);
      v28 = *(_QWORD *)(v0 + 344);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      sub_1000151A4((_QWORD *)(v28 + 72), *(_QWORD *)(v28 + 96));
      v29 = (_QWORD *)swift_task_alloc(dword_1001789EC);
      *(_QWORD *)(v0 + 584) = v29;
      *v29 = v0;
      v29[1] = sub_10009437C;
      v30 = v0 + 288;
      v31 = v79;
      v32 = v80;
      v33 = v74;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      return sub_1001189B8(v30, v31, v32, v33, v34, v35, v36, v37);
  }
  v64 = *(_QWORD *)(v0 + 400);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 104))(v64, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 384));
  v65 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v66 = type metadata accessor for DIPError(0);
  v67 = sub_10000745C();
  swift_allocError(v66, v67, 0, 0);
  v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100132100, 0, v64, 0, v65, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 515);
  swift_willThrow(v68);
  swift_bridgeObjectRelease(v3);
  sub_100005AB0(v79, v80);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  sub_100051880(v75, v76, v77, v78);
  swift_bridgeObjectRelease(v3);
  sub_100005AB0(v79, v80);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
LABEL_25:
  v70 = *(_QWORD *)(v0 + 440);
  v69 = *(_QWORD *)(v0 + 448);
  v72 = *(_QWORD *)(v0 + 424);
  v71 = *(_QWORD *)(v0 + 432);
  v73 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000942FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 480));
  v2 = *(_QWORD *)(v0 + 440);
  v1 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009437C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000946E4;
  else
    v3 = sub_1000943E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000943E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  sub_100095B78(v0 + 288, v0 + 128);
  sub_100095BC0(v0 + 128, v0 + 208);
  v29 = *(_QWORD *)(v0 + 568);
  v30 = *(_QWORD *)(v0 + 576);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 560);
  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 512);
  if (*(_QWORD *)(v0 + 232))
  {
    v6 = *(_QWORD *)(v0 + 472);
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 440);
    v23 = *(_QWORD *)(v0 + 432);
    v24 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 328);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    sub_100051880(v27, v28, v29, v30);
    sub_10002597C((__int128 *)(v0 + 208), v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 544);
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 384);
    sub_1000150E8(v0 + 208, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v9, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_10000745C();
    swift_allocError(v12, v13, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x80000001001333F0, 0, v9, 0, v11, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 519);
    swift_willThrow(v14);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    sub_100051880(v27, v28, v29, v30);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v15 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 448);
    v18 = *(_QWORD *)(v0 + 424);
    v17 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000946E4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  v11 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000947EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100094B54;
  else
    v3 = sub_100094850;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100094850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  sub_100095B78(v0 + 248, v0 + 128);
  sub_100095BC0(v0 + 128, v0 + 208);
  v29 = *(_QWORD *)(v0 + 568);
  v30 = *(_QWORD *)(v0 + 576);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 560);
  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 512);
  if (*(_QWORD *)(v0 + 232))
  {
    v6 = *(_QWORD *)(v0 + 472);
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 440);
    v23 = *(_QWORD *)(v0 + 432);
    v24 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 328);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    sub_100051880(v27, v28, v29, v30);
    sub_10002597C((__int128 *)(v0 + 208), v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 544);
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 384);
    sub_1000150E8(v0 + 208, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v9, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_10000745C();
    swift_allocError(v12, v13, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x80000001001333F0, 0, v9, 0, v11, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 519);
    swift_willThrow(v14);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    sub_100051880(v27, v28, v29, v30);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v15 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 448);
    v18 = *(_QWORD *)(v0 + 424);
    v17 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094B54()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  v11 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100094FC4;
  else
    v3 = sub_100094CC0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100094CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  sub_100095B78(v0 + 168, v0 + 128);
  sub_100095BC0(v0 + 128, v0 + 208);
  v29 = *(_QWORD *)(v0 + 568);
  v30 = *(_QWORD *)(v0 + 576);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 560);
  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 512);
  if (*(_QWORD *)(v0 + 232))
  {
    v6 = *(_QWORD *)(v0 + 472);
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 440);
    v23 = *(_QWORD *)(v0 + 432);
    v24 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 328);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    sub_100051880(v27, v28, v29, v30);
    sub_10002597C((__int128 *)(v0 + 208), v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 544);
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 384);
    sub_1000150E8(v0 + 208, &qword_1001768D8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v9, enum case for DIPError.Code.idcsErrorInitializingPayloadProcessor(_:), v10);
    v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_10000745C();
    swift_allocError(v12, v13, 0, 0);
    v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x80000001001333F0, 0, v9, 0, v11, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 519);
    swift_willThrow(v14);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v25);
    sub_100051880(v27, v28, v29, v30);
    sub_1000150E8(v0 + 128, &qword_1001768D8);
    v15 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 448);
    v18 = *(_QWORD *)(v0 + 424);
    v17 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094FC4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  sub_100051880(v4, v3, v2, v1);
  swift_bridgeObjectRelease(v9);
  sub_100005AB0(v8, v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  v11 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000950CC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __n128 v72;
  uint64_t v73;
  id v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v77 = a5;
  v78 = a4;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError.Code(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v86;
  v17 = sub_1000093E8(a2, a3);
  if (!v16)
  {
    v18 = a1;
    v76 = v11;
    v78 = v9;
    v86 = v8;
    v19 = v17;
    sub_100009BC0(v17);
    v75 = v19;
    v20 = (uint64_t)sub_1000C4E40();
    v21 = v20;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 >= 0)
        v20 &= 0xFFFFFFFFFFFFFF8uLL;
      v22 = _CocoaArrayWrapper.endIndex.getter(v20);
    }
    else
    {
      v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v23 = v18;
    v24 = v12;
    v25 = v13;
    if (!v22)
    {
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DIPError.Code.idcsMissingPayload(_:), v12);
      v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v30 = type metadata accessor for DIPError(0);
      v31 = sub_10000745C();
      swift_allocError(v30, v31, 0, 0);
      v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100133480, 0, v15, 0, v29, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 458);
      swift_willThrow(v32);

      return;
    }
    if ((v21 & 0xC000000000000001) != 0)
    {
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
      goto LABEL_10;
    }
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v26 = *(id *)(v21 + 32);
LABEL_10:
      v27 = v26;
      swift_bridgeObjectRelease(v21);
      sub_1000C6D08(v79.n128_u64);
      v74 = v27;
      v33 = v80;
      v73 = v81;
      v34 = v82;
      if ((_QWORD)v83 != 2)
      {
        if ((_QWORD)v83 == 1)
        {
          v67 = v85;
          v70 = v84;
          v71 = v83;
          v72 = v79;
          v54 = v75;
          sub_1000151A4((_QWORD *)(v23 + 32), *(_QWORD *)(v23 + 56));
          v68 = v34;
          v55 = (void *)sub_10000B18C((uint64_t)v54, v73, v34, v72.n128_i64[0]);
          v69 = v33;
          if (v55)
          {
            v56 = v55;
            v57 = objc_msgSend(v55, "identifier");
            v44 = v57;
            if (!v57)
            {

              v47 = 0;
              v43 = 0;
LABEL_38:
              v53 = 0;
              goto LABEL_39;
            }
            v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
            v43 = v58;

            v59 = objc_msgSend(v56, "publicKeyIdentifier");
            if (v59)
            {
              v60 = v59;
              v44 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
              v53 = v61;

LABEL_39:
              v45 = v77;
              v46 = v73;
              goto LABEL_40;
            }

            swift_bridgeObjectRelease(v43);
          }
          else
          {

          }
        }
        else
        {
          if ((_QWORD)v83)
          {
            (*(void (**)(char *, _QWORD, uint64_t, __n128))(v25 + 104))(v15, enum case for DIPError.Code.internalError(_:), v24, v79);
            v62 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v63 = type metadata accessor for DIPError(0);
            v64 = sub_10000745C();
            swift_allocError(v63, v64, 0, 0);
            v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100132100, 0, v15, 0, v62, 0xD000000000000055, 0x8000000100133360, 0xD00000000000002CLL, 0x80000001001333C0, 479);
            swift_willThrow(v65);

            sub_10006C9F8(&v79);
            return;
          }
          v67 = v85;
          v68 = v82;
          v69 = v80;
          v70 = v84;
          v71 = v83;
          v72 = v79;
          v35 = v76;
          v36 = defaultLogger()(v28);
          v37 = Logger.logObject.getter(v36);
          v38 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v39 = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "no key needed", v39, 2u);
            swift_slowDealloc(v39, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v78 + 8))(v35, v86);
        }
        v47 = 0;
        v43 = 0;
LABEL_37:
        v44 = 0;
        goto LABEL_38;
      }
      v40 = v75;
      v67 = v85;
      v68 = v82;
      v69 = v80;
      v70 = v84;
      v71 = v83;
      v72 = v79;
      v41 = v74;
      v42 = objc_msgSend(v74, "payloadProtectionKey");
      v43 = v42;
      if (!v42)
      {

        v47 = 0;
        goto LABEL_37;
      }
      v44 = objc_msgSend(v42, "identifier");

      v45 = v77;
      v46 = v73;
      if (v44)
      {
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v43 = v48;

        v49 = v74;
        v50 = objc_msgSend(v74, "payloadProtectionKey");
        v44 = v50;
        if (v50)
        {
          v51 = objc_msgSend(v50, "publicKeyIdentifier");

          if (v51)
          {
            v44 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
            v53 = v52;

LABEL_40:
            *(__n128 *)v45 = v72;
            *(_QWORD *)(v45 + 16) = v69;
            *(_QWORD *)(v45 + 24) = v46;
            *(_QWORD *)(v45 + 32) = v68;
            *(_OWORD *)(v45 + 40) = v71;
            *(_OWORD *)(v45 + 56) = v70;
            *(_QWORD *)(v45 + 72) = v67;
            *(_QWORD *)(v45 + 80) = v47;
            *(_QWORD *)(v45 + 88) = v43;
            *(_QWORD *)(v45 + 96) = v44;
            *(_QWORD *)(v45 + 104) = v53;
            return;
          }

          swift_bridgeObjectRelease(v43);
          v47 = 0;
          v43 = 0;
          v44 = 0;
LABEL_34:
          v53 = 0;
          goto LABEL_40;
        }

        swift_bridgeObjectRelease(v43);
      }
      else
      {

      }
      v47 = 0;
      v43 = 0;
      goto LABEL_34;
    }
    __break(1u);
  }
}

uint64_t sub_100095810()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  sub_10000CE40(v0 + 4);
  sub_10000CE40(v0 + 9);
  swift_release(v0[14]);
  sub_10000CE40(v0 + 15);
  swift_release(v0[20]);
  return swift_deallocClassInstance(v0, 168, 7);
}

uint64_t type metadata accessor for CredentialStorage()
{
  return objc_opt_self(_TtC7idcredd17CredentialStorage);
}

uint64_t sub_100095884()
{
  _QWORD *v0;
  unint64_t v1;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  v1 = v0[6];
  if (v1 >> 60 != 15)
    sub_100005AB0(v0[5], v1);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000958C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc(dword_100176FBC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100016474;
  return sub_100093908(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_100095958(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000959BC;
  return v6(a1);
}

uint64_t sub_1000959BC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100095A08(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v6 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100016474;
  return v8(a1, v5);
}

_QWORD *sub_100095A78@<X0>(_QWORD *a1@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;

  result = a2(&v6, *a1);
  if (!v3)
    *a3 = v6;
  return result;
}

uint64_t sub_100095AB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100176FCC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100176FC8 + dword_100176FC8))(a1, a2, v6);
}

void sub_100095B3C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000950CC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100095B58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100095B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001768D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001768D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095C08()
{
  return sub_100096224((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100095C20(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100176FEC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100016474;
  return sub_100092750(a1, a2, v6, v7, v8);
}

uint64_t sub_100095C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100176FFC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100176FF8 + dword_100176FF8))(a1, a2, v6);
}

void sub_100095D20(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100093048(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

_QWORD *sub_100095D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  char v5;
  uint64_t v6;
  char v7;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    v5 = v7;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t sub_100095D80()
{
  return sub_100096224((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 48);
}

void sub_100095D98(uint64_t a1)
{
  uint64_t v1;

  sub_100091D1C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100095DB4()
{
  return sub_100096224((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100095DCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100177024);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100016474;
  return sub_100092024(a1, v4, v5, v6);
}

uint64_t sub_100095E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100177034);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100177030 + dword_100177030))(a1, v4);
}

uint64_t sub_100095EA8()
{
  return sub_100096224((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100095EC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100176A3C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100016474;
  return sub_100075F70(a1, v4, v5, v6);
}

uint64_t sub_100095F2C()
{
  return sub_100096224((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

void sub_100095F44(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100092200(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

unint64_t sub_100095F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100177050;
  if (!qword_100177050)
  {
    v1 = objc_opt_self(DCCredentialProperties);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100177050);
  }
  return result;
}

uint64_t sub_100095F9C()
{
  return sub_100096224((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_100095FB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10008E5E0(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10011B4E8, a1);
}

uint64_t sub_100095FD4()
{
  return sub_100096224((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100095FEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_100177074);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000935C;
  return sub_10008EB28(a1, a2, v6, v7, v8);
}

uint64_t sub_100096068()
{
  return sub_100096224((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100096080(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10017708C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000935C;
  return sub_100091690(a1, v4, v5, v6);
}

uint64_t sub_1000960EC()
{
  return sub_100096224((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100096104(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100176A4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100016474;
  return sub_100078124(a1, v4, v5, v6);
}

void sub_100096174(char **a1@<X8>)
{
  uint64_t v1;

  sub_100090410(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100096190()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_1000961B4@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  __int128 v5;

  (*(void (**)(__int128 *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

void sub_1000961F4()
{
  uint64_t v0;

  sub_1000907D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(id **)(v0 + 40));
}

uint64_t sub_100096210()
{
  return sub_100096224((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_100096224(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 32));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_10009626C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10008E5E0(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10011C460, a1);
}

uint64_t sub_100096290()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_1000962C4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10008DEE8(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1000962E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100096308@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10008D810(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_100096320()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 88, 7);
}

void sub_10009634C(uint64_t a1)
{
  uint64_t *v1;

  sub_10008CF38(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)(v1 + 6));
}

ValueMetadata *type metadata accessor for CredentialStorage.DBResult()
{
  return &type metadata for CredentialStorage.DBResult;
}

uint64_t sub_1000963B4(_QWORD *a1)
{
  return sub_10006CC88(a1);
}

void sub_1000963C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  void (*v30)(_QWORD *);
  char *v31;
  char **v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  unint64_t v47;

  v47 = sub_10003E3FC((uint64_t)_swiftEmptyArrayStorage);
  v37 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  if (v2 < 64)
    v3 = ~(-1 << v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(v2 + 63) >> 6;
  v39 = a1;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  while (2)
  {
    if (!v4)
    {
      v7 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_53;
      if (v7 >= v38)
        goto LABEL_50;
      v8 = *(_QWORD *)(v37 + 8 * v7);
      v9 = v5 + 1;
      if (!v8)
      {
        v9 = v5 + 2;
        if (v5 + 2 >= v38)
          goto LABEL_50;
        v8 = *(_QWORD *)(v37 + 8 * v9);
        if (!v8)
        {
          v9 = v5 + 3;
          if (v5 + 3 >= v38)
            goto LABEL_50;
          v8 = *(_QWORD *)(v37 + 8 * v9);
          if (!v8)
          {
            v10 = v5 + 4;
            if (v5 + 4 < v38)
            {
              v8 = *(_QWORD *)(v37 + 8 * v10);
              if (v8)
              {
                v9 = v5 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                v9 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_54;
                if (v9 >= v38)
                  break;
                v8 = *(_QWORD *)(v37 + 8 * v9);
                ++v10;
                if (v8)
                  goto LABEL_21;
              }
            }
LABEL_50:
            swift_release(v39);
            return;
          }
        }
      }
LABEL_21:
      v40 = (v8 - 1) & v8;
      v41 = v9;
      v6 = __clz(__rbit64(v8)) + (v9 << 6);
      goto LABEL_22;
    }
    v40 = (v4 - 1) & v4;
    v41 = v5;
    v6 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_22:
    v11 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * v6);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v6);
    swift_bridgeObjectRetain_n(v13, 2);
    swift_bridgeObjectRetain(v14);
    v15 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
    v46[0] = v15;
    v44 = v12;
    sub_10011FB7C((uint64_t)_swiftEmptyArrayStorage, v12, v13, isUniquelyReferenced_nonNull_native);
    v47 = v46[0];
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000);
    v17 = 0;
    v42 = v14 + 64;
    v45 = v14;
    v18 = 1 << *(_BYTE *)(v14 + 32);
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v20 = v19 & *(_QWORD *)(v14 + 64);
    v43 = (unint64_t)(v18 + 63) >> 6;
    while (1)
    {
      if (v20)
      {
        v21 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v22 = v21 | (v17 << 6);
        goto LABEL_44;
      }
      v23 = v17 + 1;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v23 >= v43)
        goto LABEL_5;
      v24 = *(_QWORD *)(v42 + 8 * v23);
      ++v17;
      if (!v24)
      {
        v17 = v23 + 1;
        if (v23 + 1 >= v43)
          goto LABEL_5;
        v24 = *(_QWORD *)(v42 + 8 * v17);
        if (!v24)
        {
          v17 = v23 + 2;
          if (v23 + 2 >= v43)
            goto LABEL_5;
          v24 = *(_QWORD *)(v42 + 8 * v17);
          if (!v24)
            break;
        }
      }
LABEL_43:
      v20 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_44:
      v26 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * v22);
      v27 = *v26;
      v28 = v26[1];
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v28);
      v30 = sub_10011CFB8(v46, v44, v13);
      v31 = *v29;
      if (*v29)
      {
        v32 = v29;
        v33 = swift_isUniquelyReferenced_nonNull_native(*v29);
        *v32 = v31;
        if ((v33 & 1) == 0)
        {
          v31 = sub_1000A73AC(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
          *v32 = v31;
        }
        v35 = *((_QWORD *)v31 + 2);
        v34 = *((_QWORD *)v31 + 3);
        if (v35 >= v34 >> 1)
        {
          v31 = sub_1000A73AC((char *)(v34 > 1), v35 + 1, 1, v31);
          *v32 = v31;
        }
        *((_QWORD *)v31 + 2) = v35 + 1;
        v36 = &v31[16 * v35];
        *((_QWORD *)v36 + 4) = v27;
        *((_QWORD *)v36 + 5) = v28;
      }
      else
      {
        swift_bridgeObjectRelease(v28);
      }
      ((void (*)(_QWORD *, _QWORD))v30)(v46, 0);
      swift_bridgeObjectRelease(v13);
    }
    v25 = v23 + 3;
    if (v25 >= v43)
    {
LABEL_5:
      swift_bridgeObjectRelease(v13);
      swift_release(v45);
      v4 = v40;
      v5 = v41;
      continue;
    }
    break;
  }
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
  {
    v17 = v25;
    goto LABEL_43;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_5;
    v24 = *(_QWORD *)(v42 + 8 * v17);
    ++v25;
    if (v24)
      goto LABEL_43;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t DCPresentmentMessageEncodingFormat.codingKeyFormat.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v9 = (unsigned int *)&enum case for ISO18013CodingKeyFormat.standard(_:);
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    v9 = (unsigned int *)&enum case for ISO18013CodingKeyFormat.ACWG(_:);
LABEL_5:
    v10 = *v9;
    v11 = type metadata accessor for ISO18013CodingKeyFormat(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a2, v10, v11);
  }
  v13 = defaultLogger()(v6);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v31 = v29;
    v28 = v16;
    *(_DWORD *)v16 = 136315138;
    v27 = v16 + 4;
    v17 = (id)DCPresentmentMessageEncodingFormatToString(a1);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v30 = sub_10003FA80(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v27);
    swift_bridgeObjectRelease(v20);
    v21 = v15;
    v22 = v28;
    _os_log_impl((void *)&_mh_execute_header, v14, v21, "Unknown message encoding format: %s", v28, 0xCu);
    v23 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v24 = enum case for ISO18013CodingKeyFormat.standard(_:);
  v25 = type metadata accessor for ISO18013CodingKeyFormat(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(a2, v24, v25);
}

uint64_t DCPresentmentMessageEncodingFormat.description.getter(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = (id)DCPresentmentMessageEncodingFormatToString(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100096A60()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;

  v1 = (id)DCPresentmentMessageEncodingFormatToString(*v0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t ISO18013CodingKeyFormat.messageEncodingFormat.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  int v13;
  uint64_t result;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  os_log_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v26 - v10, v0, v5);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
  result = 0;
  if (v13 != enum case for ISO18013CodingKeyFormat.standard(_:))
  {
    if (v13 == enum case for ISO18013CodingKeyFormat.ACWG(_:))
    {
      return 1;
    }
    else
    {
      defaultLogger()(0);
      v15 = ((uint64_t (*)(char *, uint64_t, uint64_t))v12)(v9, v0, v5);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v31 = v29;
        v27 = v18;
        v28 = v16;
        *(_DWORD *)v18 = 136315138;
        v26 = v18 + 4;
        v19 = ISO18013CodingKeyFormat.rawValue.getter();
        v21 = v20;
        v30 = sub_10003FA80(v19, v20, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v26);
        swift_bridgeObjectRelease(v21);
        v22 = *(void (**)(char *, uint64_t))(v6 + 8);
        v22(v9, v5);
        v24 = v27;
        v23 = v28;
        _os_log_impl((void *)&_mh_execute_header, v28, v17, "Unknown coding encoding format: %s", v27, 0xCu);
        v25 = v29;
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {
        v22 = *(void (**)(char *, uint64_t))(v6 + 8);
        v22(v9, v5);

      }
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v22(v11, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100096D3C(unsigned __int8 a1, uint64_t a2, char a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v5 = a1;
  v6 = sub_100008E84(&qword_1001752C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5 == 2)
    return 0;
  if ((v5 & 1) != 0)
    return 1;
  if (a3 != 2 && (a3 & 1) == 0 && a2)
  {
    v11 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter(v7);
    v13 = v12;
    if (*(_QWORD *)(a2 + 16) && (v14 = sub_1000FBC04(v11, v12), (v15 & 1) != 0))
    {
      v16 = v14;
      v17 = *(_QWORD *)(a2 + 56);
      v18 = type metadata accessor for AnyCodable(0);
      v19 = *(_QWORD *)(v18 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v9, v17 + *(_QWORD *)(v19 + 72) * v16, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v18);
    }
    else
    {
      v18 = type metadata accessor for AnyCodable(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
    }
    swift_bridgeObjectRelease(v13);
    type metadata accessor for AnyCodable(0);
    v20 = *(_QWORD *)(v18 - 8);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v18);
    if ((_DWORD)v21 == 1)
    {
      sub_10007AE60((uint64_t)v9);
    }
    else
    {
      v22 = AnyCodable.BOOLValue.getter(v21);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v18);
      if ((v22 & 1) != 0)
        return 3;
    }
  }
  return 2;
}

char *sub_100096EC8(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for COSE_Sign1(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    v15 = v4;
    v16 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12, v16))
    {
      v17 = sub_100008E84(&qword_100176828);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(_OWORD *)((char *)a2 + v18);
    *(_OWORD *)&v7[v18] = v20;
    *(_QWORD *)&v7[v19] = *(char **)((char *)a2 + v19);
    v21 = a3[9];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)&v7[v21] = v22;
    swift_retain(v20);
    swift_bridgeObjectRetain(v22);
  }
  return v7;
}

uint64_t sub_100097008(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for COSE_Sign1(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

_QWORD *sub_10009709C(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t, __n128);
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for COSE_Sign1(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v12 + 48);
  v14 = v7;
  v15 = swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11, v15))
  {
    v16 = sub_100008E84(&qword_100176828);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = a3[7];
  v18 = a3[8];
  v19 = *(_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)a1 + v17) = v19;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)(a2 + v18);
  v20 = a3[9];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  swift_retain(v19);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1000971AC(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for COSE_Sign1(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100008E84(&qword_100176828);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = a3[7];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  v25 = *v21;
  *v21 = *v22;
  swift_retain(v23);
  swift_release(v25);
  v21[1] = v24;
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v26 = a3[9];
  v27 = *(_QWORD *)(a2 + v26);
  v28 = *(_QWORD *)(a1 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

_OWORD *sub_100097338(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for COSE_Sign1(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100008E84(&qword_100176828);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100097424(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for COSE_Sign1(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100008E84(&qword_100176828);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = v19[1];
  v21 = *v18;
  *v18 = *v19;
  swift_release(v21);
  v18[1] = v20;
  v22 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)((char *)a2 + v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_100097590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009759C);
}

uint64_t sub_10009759C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008E84(&qword_100176828);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10009761C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097628);
}

char *sub_100097628(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100008E84(&qword_100176828);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PresentmentProposal(uint64_t a1)
{
  uint64_t result;

  result = qword_100177128;
  if (!qword_100177128)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PresentmentProposal);
  return result;
}

void sub_1000976DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  sub_10006D79C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10012B4F0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100097780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000977E4, 0, 0);
}

uint64_t sub_1000977E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v5 = (_QWORD *)swift_allocObject(&unk_10016A2D8, 48, 7);
  v0[11] = v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v2;
  swift_retain(v1);
  sub_100005A38(v4, v3);
  v6 = swift_allocObject(&unk_10016A300, 32, 7);
  v0[12] = v6;
  *(_QWORD *)(v6 + 16) = &unk_100177388;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[13] = v8;
  v9 = sub_100008E84(&qword_100177008);
  *v8 = v0;
  v8[1] = sub_1000978E8;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 2, &unk_100177000, v6, v9);
}

uint64_t sub_1000978E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009799C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v5);
    v4 = sub_10009795C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009795C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10009799C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001FLL, 0x8000000100133F70, 58);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100097AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100097B40, 0, 0);
}

uint64_t sub_100097B40()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[2];
  v6 = (_QWORD *)swift_allocObject(&unk_10016A3A0, 56, 7);
  v0[10] = v6;
  v6[2] = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[5] = v3;
  v6[6] = v1;
  swift_retain(v2);
  sub_100005A38(v5, v4);
  sub_100005A38(v3, v1);
  v7 = swift_allocObject(&unk_10016A3C8, 32, 7);
  v0[11] = v7;
  *(_QWORD *)(v7 + 16) = &unk_1001773E0;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v6);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[12] = v9;
  *v9 = v0;
  v9[1] = sub_100097C48;
  return AsyncCoreDataContainer.write<A>(_:)(v9, &unk_1001773E8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100097C48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100097CF0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 88));
    swift_release(v5);
    v4 = sub_100097CBC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100097CBC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100097CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v13;
  void (*v14)(uint64_t);
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v2);
  v13 = enum case for DIPError.Code.internalError(_:);
  v14 = *(void (**)(uint64_t))(v4 + 104);
  v14(v3);
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v8 = swift_allocError(v6, v7, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v5, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 293);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  ((void (*)(uint64_t, _QWORD, uint64_t))v14)(v3, v13, v15);
  swift_errorRetain(v8);
  v10 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  swift_allocError(v6, v7, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v3, 0, v10, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 296);
  swift_willThrow(v11);
  swift_errorRelease(v8);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100097EE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100097F48, 0, 0);
}

uint64_t sub_100097F48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  v2 = swift_allocObject(&unk_10016A328, 32, 7);
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = &unk_1001773B8;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain_n(v1, 2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_100098004;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 9, &unk_1001773C8, v2, &type metadata for Bool);
}

uint64_t sub_100098004()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000980A4, 0, 0);
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_QWORD *)(v3 + 16);
  swift_release(*(_QWORD *)(v3 + 48));
  swift_release(v6);
  v7 = *(unsigned __int8 *)(v3 + 72);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_1000980A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000015, 0x800000010012F1E0, 505);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000981E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v4[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_1001772D4);
  v4[12] = v9;
  *v9 = v4;
  v9[1] = sub_100098284;
  return sub_1000A45A0(1);
}

uint64_t sub_100098284(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000987D0;
  else
    v5 = sub_1000982F0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000982F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
  {
    v18 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v18, enum case for DIPError.Code.progenitorKeyUnavailable(_:), *(_QWORD *)(v0 + 48));
    v19 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v10 = swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100133D80, 0, v18, 0, v19, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002ALL, 0x8000000100133FE0, 711);
    swift_willThrow(v22);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD **)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v3[6];
  v7 = v3[7];
  sub_1000151A4(v3 + 3, v6);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_100005A38(v8, v9);
  dispatch thunk of AppleIDVManaging.generatePrearmTrustKeyforWatchAndCopyPublicKey(nonce:prognitorPublicKey:)(&v39, v5, v4, v8, v9, v6, v7);
  v10 = v2;
  v11 = v40;
  v36 = v40;
  v37 = v39;
  *(_QWORD *)(v0 + 120) = v39;
  *(_QWORD *)(v0 + 128) = v11;
  v12 = v42;
  v38 = v41;
  *(_QWORD *)(v0 + 136) = v41;
  *(_QWORD *)(v0 + 144) = v12;
  v13 = v43;
  v14 = v44;
  *(_QWORD *)(v0 + 152) = v43;
  *(_QWORD *)(v0 + 160) = v14;
  v15 = v45;
  v16 = v46;
  *(_QWORD *)(v0 + 168) = v45;
  *(_QWORD *)(v0 + 176) = v16;
  v17 = sub_100005AB0(v8, v9);
  if (v10)
  {
    swift_release(v1);
LABEL_5:
    v23 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v24, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
    swift_errorRetain(v10);
    v25 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v24, 0, v25, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002ALL, 0x8000000100133FE0, 726);
    swift_willThrow(v28);
    swift_errorRelease(v10);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v30 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 80);
  v35 = *(_QWORD *)(v0 + 72);
  defaultLogger()(v17);
  v31 = (_QWORD *)swift_task_alloc(80);
  v31[2] = v37;
  v31[3] = v36;
  v31[4] = v38;
  v31[5] = v12;
  v31[6] = v13;
  v31[7] = v14;
  v31[8] = v15;
  v31[9] = v16;
  Logger.sensitive(_:)(sub_1000AA4F4, v31);
  swift_task_dealloc(v31);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v30, v35);
  sub_100005A38(v37, v36);
  sub_100005A38(v38, v12);
  sub_100005A38(v13, v14);
  sub_100005A38(v15, v16);
  v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to DIPTrustKey.init(encryptedPrivateKey:attestation:publicKey:keyBlob:)
                                   + 1));
  *(_QWORD *)(v0 + 184) = v32;
  *v32 = v0;
  v32[1] = sub_1000986C4;
  v33 = *(_QWORD *)(v0 + 16);
  v47 = v16;
  return DIPTrustKey.init(encryptedPrivateKey:attestation:publicKey:keyBlob:)(v33, v37, v36, v38, v12, v13, v14, v15);
}

uint64_t sub_1000986C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100098904;
  else
    v3 = sub_100098728;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100098728()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 64);
  sub_100005AB0(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  sub_100005AB0(v6, v5);
  sub_100005AB0(v4, v3);
  sub_100005AB0(v1, v2);
  swift_release(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000987D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002ALL, 0x8000000100133FE0, 726);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098904()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 104);
  sub_100005AB0(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  sub_100005AB0(v6, v5);
  sub_100005AB0(v4, v3);
  sub_100005AB0(v1, v2);
  swift_release(v7);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v10, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v8);
  v11 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v12 = type metadata accessor for DIPError(0);
  v13 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v12, v13, 0, 0);
  v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v10, 0, v11, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002ALL, 0x8000000100133FE0, 726);
  swift_willThrow(v14);
  swift_errorRelease(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100098A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_1001772D4);
  v3[11] = v8;
  *v8 = v3;
  v8[1] = sub_100098B24;
  return sub_1000A45A0(1);
}

uint64_t sub_100098B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100098F34;
  else
    v5 = sub_100098B90;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100098B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[9];

  v1 = *(_QWORD *)(v0 + 96);
  if (!v1)
  {
    v16 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v16, enum case for DIPError.Code.progenitorKeyUnavailable(_:), *(_QWORD *)(v0 + 40));
    v17 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v10 = swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100133D80, 0, v16, 0, v17, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ALL, 0x800000010012F130, 735);
    swift_willThrow(v20);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD **)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = v3[6];
  v7 = v3[7];
  sub_1000151A4(v3 + 3, v6);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_100005A38(v8, v9);
  dispatch thunk of AppleIDVManaging.updatePrearmTrustKeyforWatch(inKeyBlob:prognitorPublicKey:)(v37, v5, v4, v8, v9, v6, v7);
  v10 = v2;
  v12 = v37[0];
  v11 = v37[1];
  v13 = v37[4];
  v34 = v37[3];
  v35 = v37[2];
  v14 = v37[6];
  v36 = v37[5];
  v15 = v37[7];
  sub_100005AB0(v8, v9);
  if (v10)
  {
    swift_release(v1);
LABEL_5:
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v22, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
    swift_errorRetain(v10);
    v23 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v24 = type metadata accessor for DIPError(0);
    v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v24, v25, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v22, 0, v23, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ALL, 0x800000010012F130, 746);
    swift_willThrow(v26);
    swift_errorRelease(v10);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v28 = *(_QWORD *)(v0 + 80);
  v31 = *(_QWORD *)(v0 + 72);
  v32 = *(_QWORD *)(v0 + 64);
  v33 = *(_QWORD *)(v0 + 56);
  v29 = sub_100005AB0(v12, v11);
  defaultLogger()(v29);
  v30 = (_QWORD *)swift_task_alloc(64);
  v30[2] = v35;
  v30[3] = v34;
  v30[4] = v13;
  v30[5] = v36;
  v30[6] = v14;
  v30[7] = v15;
  Logger.sensitive(_:)(sub_1000AA4E4, v30);
  swift_release(v1);
  swift_task_dealloc(v30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v28, v32);
  sub_100005AB0(v35, v34);
  sub_100005AB0(v13, v36);
  swift_task_dealloc(v28);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v14, v15);
}

uint64_t sub_100098F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 40));
  swift_errorRetain(v1);
  v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ALL, 0x800000010012F130, 746);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v4[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1001772C4);
  v4[14] = v7;
  *v7 = v4;
  v7[1] = sub_1000990F4;
  return sub_1000A2C6C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_1000990F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 112);
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = a3;
  v5[18] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_1000992E8;
  else
    v7 = sub_100099164;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100099164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 152) = sub_10009ADA4();
  *(_QWORD *)(v0 + 160) = v2;
  if (v1)
  {
    v3 = v1;
    sub_10000B164(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v4 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
    swift_errorRetain(v1);
    v5 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v6, v7, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v4, 0, v5, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000021, 0x8000000100133F90, 764);
    swift_willThrow(v8);
    swift_errorRelease(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_100177354);
    *(_QWORD *)(v0 + 168) = v10;
    *v10 = v0;
    v10[1] = sub_100099410;
    return sub_10009AF20();
  }
}

uint64_t sub_1000992E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000021, 0x8000000100133F90, 764);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 168);
  v4[22] = a1;
  v4[23] = a2;
  v4[24] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100099784;
  else
    v6 = sub_100099480;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100099480()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v35 = *(_QWORD *)(v0 + 184);
  v37 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 120);
  v33 = *(_QWORD *)(v0 + 72);
  v34 = *(_QWORD *)(v0 + 176);
  v5 = *(void **)(v0 + 56);
  v32 = *(_QWORD *)(v0 + 64);
  sub_100025938(*(_QWORD *)(v0 + 80) + 24, v0 + 16);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v39 = (_QWORD *)(v0 + 16);
  sub_1000151A4((_QWORD *)(v0 + 16), v6);
  v8 = objc_msgSend(v5, "credentialNonce");
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  if (v3 >> 60 == 15)
    v12 = 0;
  else
    v12 = v4;
  if (v3 >> 60 == 15)
    v13 = 0xC000000000000000;
  else
    v13 = v3;
  v14 = v4;
  v15 = v12;
  sub_10000B178(v14, v3);
  sub_100005A38(v2, v1);
  v16 = dispatch thunk of AppleIDVManaging.generatePhoneToken(withNonce:aclBlob:keyBlob:keyAttestation:casdCertificate:)(v9, v11, v15, v13, v32, v33, v34, v35, v2, v1, v6, v7);
  v18 = v17;
  v20 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 120);
  if (v37)
  {
    sub_10000B164(v24, v23);
    sub_100005AB0(v21, v22);
    sub_100005AB0(v9, v11);
    sub_10000B164(v20, v19);
    sub_100005AB0(v21, v22);
    sub_100005AB0(v15, v13);
    sub_10000CE40(v39);
    v25 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v25, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
    swift_errorRetain(v37);
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v37, v25, 0, v26, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000021, 0x8000000100133F90, 764);
    swift_willThrow(v29);
    swift_errorRelease(v37);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 104);
    v36 = v16;
    v38 = v18;
    sub_10000B164(v24, v23);
    sub_100005AB0(v21, v22);
    sub_100005AB0(v9, v11);
    sub_10000B164(v20, v19);
    sub_100005AB0(v21, v22);
    sub_100005AB0(v15, v13);
    sub_10000CE40(v39);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v36, v38);
  }
}

uint64_t sub_100099784()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  sub_100005AB0(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10000B164(v2, v1);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v3);
  v5 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v4, 0, v5, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000021, 0x8000000100133F90, 764);
  swift_willThrow(v8);
  swift_errorRelease(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000998CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  return swift_task_switch(sub_100099964, 0, 0);
}

uint64_t sub_100099964(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = *(void **)(v1 + 24);
  defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v1 + 24);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    *(_DWORD *)(v1 + 192) = objc_msgSend(v5, "credentialAccessibilityEnabled");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 196, v6 + 4);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "establishPrearmTrust called with accessibility enabled: %{BOOL,public}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {

  }
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(void **)(v1 + 24);
  v10 = *(_QWORD **)(v1 + 32);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 72) + 8);
  *(_QWORD *)(v1 + 96) = v11;
  v11(v7, v8);
  v12 = v10[6];
  v13 = v10[7];
  sub_1000151A4(v10 + 3, v12);
  v14 = dispatch thunk of AppleIDVManaging.prepareUnboundACLForWatch(withAccessibilityEnabled:)(objc_msgSend(v9, "credentialAccessibilityEnabled"), v12, v13);
  *(_QWORD *)(v1 + 104) = v14;
  *(_QWORD *)(v1 + 112) = v15;
  v16 = v14;
  v17 = v15;
  if (objc_msgSend(*(id *)(v1 + 24), "credentialAccessibilityEnabled"))
    v18 = 2;
  else
    v18 = 3;
  v19 = (_QWORD *)swift_task_alloc(dword_100177374);
  *(_QWORD *)(v1 + 120) = v19;
  *v19 = v1;
  v19[1] = sub_100099B54;
  return sub_100097780(v16, v17, v18);
}

uint64_t sub_100099B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_10009A270;
  else
    v6 = sub_100099BC4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100099BC4()
{
  uint64_t v0;
  id v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint8_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;

  v1 = objc_msgSend(*(id *)(v0 + 24), "credentialAccessibilityEnabled");
  if ((v1 & 1) != 0)
  {
    v2 = *(void **)(v0 + 24);
    defaultLogger()(v1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 64);
    v9 = *(void **)(v0 + 24);
    if (v5)
    {
      v54 = (uint64_t *)(v0 + 16);
      v56 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = v8;
      v11 = swift_slowAlloc(32, -1);
      v57 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = objc_msgSend(v9, "credentialAccessibilityEnabled");
      v13 = v12 == 0;
      if (v12)
        v14 = 20047;
      else
        v14 = 4605519;
      if (v13)
        v15 = 0xE300000000000000;
      else
        v15 = 0xE200000000000000;
      *v54 = sub_10003FA80(v14, v15, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v0 + 24, v10 + 4);
      swift_bridgeObjectRelease(v15);

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Skipping establishing prearm trust with watch because phone's accessibility is turned %{public}s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      v56(v7, v55);
    }
    else
    {

      v6(v7, v8);
    }
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 112);
    if (*(_QWORD *)(v0 + 136) >> 60 == 15)
    {
      v35 = *(_QWORD *)(v0 + 56);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v35, enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), *(_QWORD *)(v0 + 40));
      v36 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v37 = type metadata accessor for DIPError(0);
      v38 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v37, v38, 0, 0);
      v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100133EF0, 0, v35, 0, v36, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x8000000100133F20, 828);
      swift_willThrow(v39);
      v31 = v33;
      v32 = v34;
      goto LABEL_15;
    }
    v44 = *(_QWORD *)(v0 + 80);
    v43 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 56);
    sub_100005AB0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 144);
    v18 = *(void **)(v0 + 24);
    v17 = *(_QWORD **)(v0 + 32);
    v19 = v17[6];
    v20 = v17[7];
    sub_1000151A4(v17 + 3, v19);
    v21 = objc_msgSend(v18, "credentialBAACertificate");
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25 = dispatch thunk of AppleIDVManaging.establishPrearmTrust(baaCertificate:)(v22, v24, v19, v20);
    *(_QWORD *)(v0 + 152) = v25;
    *(_QWORD *)(v0 + 160) = v26;
    if (v16)
    {
      v27 = *(_QWORD *)(v0 + 128);
      v28 = *(_QWORD *)(v0 + 136);
      v30 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 112);
      sub_100005AB0(v22, v24);
      sub_10000B164(v27, v28);
      v31 = v30;
      v32 = v29;
LABEL_15:
      sub_100005AB0(v31, v32);
      v40 = *(_QWORD *)(v0 + 80);
      v41 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 88));
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v46 = v25;
    v47 = v26;
    v48 = *(void **)(v0 + 24);
    sub_100005AB0(v22, v24);
    v49 = objc_msgSend(v48, "credentialPairingID");
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    *(_QWORD *)(v0 + 168) = v52;
    v53 = (_QWORD *)swift_task_alloc(dword_10017737C);
    *(_QWORD *)(v0 + 176) = v53;
    *v53 = v0;
    v53[1] = sub_10009A054;
    return sub_1000A4D44(v46, v47, v50, v52);
  }
}

uint64_t sub_10009A054()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009A2C8;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
    v4 = sub_10009A0C0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009A0C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100005AB0(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  if (*(_QWORD *)(v0 + 136) >> 60 == 15)
  {
    v3 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 104))(v3, enum case for DIPError.Code.idcsMissingProgenitorKeyAttestation(_:), *(_QWORD *)(v0 + 40));
    v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v5 = type metadata accessor for DIPError(0);
    v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v5, v6, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100133EF0, 0, v3, 0, v4, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x8000000100133F20, 828);
    swift_willThrow(v7);
    sub_100005AB0(v1, v2);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 56);
    sub_100005AB0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  }
}

uint64_t sub_10009A270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005AB0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A2C8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  sub_100005AB0(v2, v1);
  sub_10000B164(v4, v3);
  sub_100005AB0(v6, v5);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A358(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009A3E0, 0, 0);
}

uint64_t sub_10009A3E0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = objc_msgSend(*(id *)(v0 + 32), "credentialPairingID");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  *(_QWORD *)(v0 + 96) = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_100177364);
  *(_QWORD *)(v0 + 104) = v5;
  *v5 = v0;
  v5[1] = sub_10009A468;
  return sub_1000A55BC(v2, v4);
}

uint64_t sub_10009A468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_10009AA34;
  }
  else
  {
    swift_bridgeObjectRelease(v4[12]);
    v6 = sub_10009A4E0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10009A4E0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v1 = v0[15];
  if (v1 >> 60 == 15)
  {
    v2 = v0[8];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[7] + 104))(v2, enum case for DIPError.Code.watchPrearmTrustDoesNotExist(_:), v0[6]);
    v3 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v4 = type metadata accessor for DIPError(0);
    v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v4, v5, 0, 0);
    v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x8000000100133EA0, 0, v2, 0, v3, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000017, 0x800000010012F050, 796);
    swift_willThrow(v7);
  }
  else
  {
    v8 = (void *)v0[4];
    v9 = v0[14];
    v10 = sub_100005A38(v9, v0[15]);
    defaultLogger()(v10);
    sub_10000B178(v9, v1);
    v11 = v8;
    sub_10000B178(v9, v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v16 = v0[14];
    v15 = v0[15];
    v18 = v0[10];
    v17 = v0[11];
    v19 = v0[9];
    v20 = (void *)v0[4];
    if (v14)
    {
      v53 = v0[10];
      v52 = v0[9];
      v21 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(64, -1);
      v54[0] = v50;
      *(_DWORD *)v21 = 136315394;
      v51 = v17;
      v22 = Data.base64EncodedString(options:)(0);
      v0[2] = sub_10003FA80(v22._countAndFlagsBits, (unint64_t)v22._object, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v21 + 4);
      swift_bridgeObjectRelease(v22._object);
      sub_10000B164(v16, v15);
      sub_10000B164(v16, v15);
      *(_WORD *)(v21 + 12) = 2080;
      v23 = objc_msgSend(v20, "credentialPairingID");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v0[3] = sub_10003FA80(v24, v26, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v21 + 14);
      swift_bridgeObjectRelease(v26);

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully retrieved persisted protected public key: %s for pairingID: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    }
    else
    {
      sub_10000B164(v0[14], v0[15]);
      sub_10000B164(v16, v15);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    v27 = v0[15];
    v28 = v0[16];
    v29 = v0[14];
    v31 = (void *)v0[4];
    v30 = (_QWORD *)v0[5];
    v32 = v30[6];
    v33 = v30[7];
    sub_1000151A4(v30 + 3, v32);
    v34 = objc_msgSend(v31, "credentialAuthorizationToken");
    v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    dispatch thunk of AppleIDVManaging.prearmCredential(withAuthorizationToken:protectedPublicKey:)(v35, v37, v29, v27, v32, v33);
    v6 = v28;
    v39 = v0[14];
    v38 = v0[15];
    if (!v6)
    {
      v47 = v0[11];
      v48 = v0[8];
      sub_100005AB0(v35, v37);
      sub_10000B164(v39, v38);
      sub_10000B164(v39, v38);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      v46 = (uint64_t (*)(void))v0[1];
      return v46();
    }
    sub_100005AB0(v35, v37);
    sub_10000B164(v39, v38);
    sub_10000B164(v39, v38);
  }
  v40 = v0[11];
  v41 = v0[8];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[7] + 104))(v41, enum case for DIPError.Code.internalError(_:), v0[6]);
  swift_errorRetain(v6);
  v42 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v43 = type metadata accessor for DIPError(0);
  v44 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v43, v44, 0, 0);
  v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v41, 0, v42, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000017, 0x800000010012F050, 804);
  swift_willThrow(v45);
  swift_errorRelease(v6);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

uint64_t sub_10009AA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v4, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000017, 0x800000010012F050, 804);
  swift_willThrow(v7);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009AB70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  v2 = v0[6];
  v3 = v0[7];
  sub_1000151A4(v0 + 3, v2);
  dispatch thunk of AppleIDVManaging.credentialAuthenticationTokenStatus()(v2, v3);
  return 2;
}

uint64_t sub_10009ADA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = dispatch thunk of SESKeystore.getCASDCertificate()(v3);
  if (v0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DIPError.Code.internalError(_:), v1);
    swift_errorRetain(v0);
    v7 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v8 = type metadata accessor for DIPError(0);
    v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v8, v9, 0, 0);
    v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v0, v5, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000016, 0x8000000100133E80, 865);
    swift_willThrow(v10);
    swift_errorRelease(v0);
  }
  return v6;
}

uint64_t sub_10009AF20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_1001772D4);
  v1[6] = v4;
  *v4 = v1;
  v4[1] = sub_10009AF94;
  return sub_1000A45A0(0);
}

uint64_t sub_10009AF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10009B190;
  else
    v5 = sub_10009B000;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009B000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = sub_100100E8C(*(_QWORD *)(v0 + 56));
    v5 = v4;
    v6 = v2;
    swift_release(v1);
    if (v2)
    {
      v7 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
      swift_errorRetain(v2);
      v8 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v9 = type metadata accessor for DIPError(0);
      v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v9, v10, 0, 0);
      v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v7, 0, v8, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000025, 0x8000000100133E50, 878);
      swift_willThrow(v11);
      swift_errorRelease(v6);
      swift_task_dealloc(v7);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v3 = 0;
    v5 = 0xF000000000000000;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v5);
}

uint64_t sub_10009B190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000025, 0x8000000100133E50, 878);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009B2B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_100177344);
  v1[6] = v4;
  *v4 = v1;
  v4[1] = sub_10009B328;
  return sub_1000A5B64();
}

uint64_t sub_10009B328(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10009B52C;
  else
    v5 = sub_10009B394;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009B394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = swift_retain(*(_QWORD *)(v0 + 56));
    v4 = sub_100100E8C(v3);
    v6 = v5;
    v7 = v2;
    swift_release_n(v1, 2);
    if (v2)
    {
      v8 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
      swift_errorRetain(v2);
      v9 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v10 = type metadata accessor for DIPError(0);
      v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v10, v11, 0, 0);
      v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v7, v8, 0, v9, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002FLL, 0x8000000100133E20, 892);
      swift_willThrow(v12);
      swift_errorRelease(v7);
      swift_task_dealloc(v8);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v4 = 0;
    v6 = 0xF000000000000000;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_10009B52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 24));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002FLL, 0x8000000100133E20, 892);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009B654()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[10] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009B6B4, 0, 0);
}

uint64_t sub_10009B6B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  _QWORD *v4;

  v1 = v0[10];
  v2 = type metadata accessor for ACLFetcher();
  inited = swift_initStackObject(v2, v0 + 2);
  v0[14] = inited;
  *(_QWORD *)(inited + 16) = v1;
  type metadata accessor for AppleIDVManager(0);
  swift_retain(v1);
  sub_100112A6C((uint64_t *)(inited + 24));
  v4 = (_QWORD *)swift_task_alloc(dword_1001772D4);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_10009B750;
  return sub_1000A45A0(0);
}

uint64_t sub_10009B750(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10009BEAC;
  else
    v5 = sub_10009B7BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009B7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1)
  {
    v2 = v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    *(_QWORD *)(v0 + 144) = v3;
    v4 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v0 + 152) = v4;
    sub_100005A38(v3, v4);
    swift_release(v1);
    v5 = (_QWORD *)swift_task_alloc(dword_100177344);
    *(_QWORD *)(v0 + 160) = v5;
    *v5 = v0;
    v5[1] = sub_10009BA20;
    return sub_1000A5B64();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v7, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 88));
    v9 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v12 = swift_allocError(v10, v11, 0, 0);
    v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100133D80, 0, v7, 0, v9, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1064);
    swift_willThrow(v13);
    swift_release(v8);
    v14 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v14, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
    swift_errorRetain(v12);
    v15 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    swift_allocError(v10, v11, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v12, v14, 0, v15, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1079);
    swift_willThrow(v16);
    swift_errorRelease(v12);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009BA20(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10009BFDC;
  else
    v5 = sub_10009BA8C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009BA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  SecAccessControlRef v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  SecAccessControlRef v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 168);
  if (!v1)
  {
    v15 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v16, enum case for DIPError.Code.idcsMissingGlobalThirdPartyAuthACL(_:), *(_QWORD *)(v0 + 88));
    v17 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v8 = swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100133DA0, 0, v16, 0, v17, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1067);
    swift_willThrow(v20);
    v12 = v15;
    v13 = v14;
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
  sub_100005A38(v6, v5);
  swift_release(v1);
  v7 = sub_1000885EC(v4, v3, v6, v5);
  if (v2)
  {
    v8 = v2;
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 112);
    sub_100005AB0(v6, v5);
    v12 = v10;
    v13 = v9;
LABEL_7:
    sub_100005AB0(v12, v13);
    swift_release(v11);
    v30 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v30, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
    swift_errorRetain(v8);
    v31 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v32, v33, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v30, 0, v31, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1079);
    swift_willThrow(v34);
    swift_errorRelease(v8);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = v7;
  v22 = SecAccessControlRef.constraintsData.getter(v7);
  v24 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  if (v23 >> 60 == 15)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(*(_QWORD *)(v0 + 104), enum case for DIPError.Code.idcsInvalidACL(_:), *(_QWORD *)(v0 + 88));
    v26 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v8 = swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100133DD0, 0, v25, 0, v26, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1075);
    swift_willThrow(v29);

    sub_100005AB0(v6, v5);
    v12 = v38;
    v13 = v24;
    goto LABEL_7;
  }
  v36 = v22;
  v37 = v23;

  sub_100005AB0(v6, v5);
  sub_100005AB0(v38, v24);
  swift_setDeallocating(v11);
  swift_release(*(_QWORD *)(v11 + 16));
  sub_10000CE40((_QWORD *)(v11 + 24));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v36, v37);
}

uint64_t sub_10009BEAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1079);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009BFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 112);
  sub_100005AB0(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 88));
  swift_errorRetain(v2);
  v4 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v3, 0, v4, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001BLL, 0x800000010012EF60, 1079);
  swift_willThrow(v7);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C118(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v4 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009C180, 0, 0);
}

uint64_t sub_10009C180()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 104) + 16);
  *(_QWORD *)(v0 + 64) = v4;
  v5 = swift_allocObject(&unk_10016A058, 41, 7);
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 40) = v2;
  swift_retain_n(v4, 2);
  sub_10000B178(v3, v1);
  v6 = swift_allocObject(&unk_10016A080, 32, 7);
  *(_QWORD *)(v0 + 80) = v6;
  *(_QWORD *)(v6 + 16) = &unk_1001772A0;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  *(_QWORD *)(v0 + 88) = v8;
  *v8 = v0;
  v8[1] = sub_10009C284;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_10009C284()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009C334;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 72);
    swift_release(*(_QWORD *)(v2 + 80));
    swift_release(v5);
    v4 = sub_10009C2F8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009C2F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v4);
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000043, 0x8000000100133B60, 1097);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C480()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10009C4E0, 0, 0);
}

uint64_t sub_10009C4E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0[2] + 104) + 16);
  v0[6] = v1;
  v2 = swift_allocObject(&unk_10016A1E8, 32, 7);
  v0[7] = v2;
  *(_QWORD *)(v2 + 16) = &unk_100177328;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain_n(v1, 3);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_10009C598;
  return AsyncCoreDataContainer.write<A>(_:)();
}

uint64_t sub_10009C598()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10009C648;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 48);
    swift_release(*(_QWORD *)(v2 + 56));
    swift_release(v5);
    v4 = sub_10009C60C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009C60C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release_n(v2, 2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000020, 0x800000010012EEE0, 1110);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;

  *(_QWORD *)(v6 + 16) = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_10017726C);
  *(_QWORD *)(v6 + 24) = v11;
  *v11 = v6;
  v11[1] = sub_10009C80C;
  return sub_10009C8A8(a4, a5, a6, a2, 0);
}

uint64_t sub_10009C80C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 24);
  v8 = *v3;
  swift_task_dealloc(v7);
  if (v2)
    return (*(uint64_t (**)(void))(v8 + 8))();
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a1;
  return swift_task_switch(sub_10009C88C, 0, 0);
}

uint64_t sub_10009C88C()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v6 + 128) = a4;
  *(_QWORD *)(v6 + 136) = v5;
  *(_BYTE *)(v6 + 444) = a5;
  *(_QWORD *)(v6 + 112) = a2;
  *(_QWORD *)(v6 + 120) = a3;
  *(_QWORD *)(v6 + 104) = a1;
  v7 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v6 + 144) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 152) = v8;
  *(_QWORD *)(v6 + 160) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CoreIDVFeatureFlag(0);
  *(_QWORD *)(v6 + 168) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 176) = v10;
  *(_QWORD *)(v6 + 184) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v6 + 192) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 200) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v13);
  return swift_task_switch(sub_10009C974, 0, 0);
}

uint64_t sub_10009C974()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = swift_allocObject(&unk_100169F90, 32, 7);
  v0[28] = v1;
  *(_OWORD *)(v1 + 16) = xmmword_10012AC40;
  v2 = (uint64_t **)swift_task_alloc(dword_100177274);
  v0[29] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10009C9F4;
  return sub_10009DEC4((uint64_t)(v0 + 2), v0[13], v0[14], v0[15]);
}

uint64_t sub_10009C9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009D75C;
  else
    v3 = sub_10009CA58;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009CA58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v1 = *(_QWORD *)(v0[17] + 104);
  v0[31] = v1;
  v2 = *(_QWORD *)(v1 + 16);
  v0[32] = v2;
  v3 = dword_10017563C;
  swift_retain(v2);
  v4 = (uint64_t **)swift_task_alloc(v3);
  v0[33] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_10009CAC8;
  return sub_10003BC6C(v0[16], v2);
}

uint64_t sub_10009CAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009D8C0;
  else
    v3 = sub_10009CB2C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009CB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = swift_allocObject(&unk_100169FB8, 32, 7);
  *(_QWORD *)(v0 + 280) = v6;
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v5 + 16);
  v7 = swift_allocObject(&unk_100169FE0, 32, 7);
  *(_QWORD *)(v0 + 296) = v7;
  *(_QWORD *)(v7 + 16) = sub_1000A9F44;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 440) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 304) = v9;
  swift_retain(v4);
  swift_retain(v5);
  v9(v1, v8, v2);
  v10 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v6);
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 312) = v11;
  *v11 = v0;
  v11[1] = sub_10009CC50;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v11, *(_QWORD *)(v0 + 216), sub_10003DE8C, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_10009CC50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  v4 = v2[37];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[27], v2[24]);
    swift_release(v4);
    v5 = sub_10009CDBC;
  }
  else
  {
    v6 = v2[35];
    v7 = v2[27];
    v8 = v2[24];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[25] + 8);
    v2[41] = v9;
    v9(v7, v8);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10009CD00;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009CD00()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = (_QWORD *)swift_task_alloc(dword_1001787D4);
  *(_QWORD *)(v0 + 336) = v2;
  *v2 = v0;
  v2[1] = sub_10009CD50;
  return sub_100100AC0(v1);
}

uint64_t sub_10009CD50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 336);
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10009DA38;
  else
    v5 = sub_10009CF40;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009CDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 256));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v2);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v7, 0, v8, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_release(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009CF40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  void (*v29)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD **)(v0 + 136);
  v2 = v1[18];
  v3 = v1[19];
  sub_1000151A4(v1 + 15, v2);
  if ((dispatch thunk of DeviceInformationProviding.isPhone.getter(v2, v3) & 1) == 0)
    goto LABEL_4;
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD **)(v0 + 136);
  v8 = v7[11];
  v9 = v7[12];
  sub_1000151A4(v7 + 8, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for CoreIDVFeatureFlag.bbkc(_:), v6);
  v10 = dispatch thunk of FeatureFlagProviding.isEnabled(_:)(v4, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(v0 + 40);
    v12 = (_QWORD *)swift_task_alloc(dword_1001787D4);
    *(_QWORD *)(v0 + 360) = v12;
    *v12 = v0;
    v12[1] = sub_10009D188;
    return sub_100100AC0(v11);
  }
  else
  {
LABEL_4:
    *(_QWORD *)(v0 + 384) = 0;
    v14 = *(_QWORD *)(v0 + 344);
    v29 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 304);
    v28 = *(_DWORD *)(v0 + 440);
    v15 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 136);
    v19 = *(_BYTE *)(v0 + 444);
    v20 = *(_QWORD *)(v0 + 120);
    v21 = swift_allocObject(&unk_10016A008, 136, 7);
    *(_QWORD *)(v0 + 392) = v21;
    *(_QWORD *)(v21 + 16) = v15;
    *(_QWORD *)(v21 + 24) = v17;
    *(_QWORD *)(v21 + 32) = v14;
    *(_BYTE *)(v21 + 40) = v19;
    v22 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v21 + 64) = v22;
    v23 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v21 + 96) = v23;
    *(_QWORD *)(v21 + 112) = v18;
    *(_QWORD *)(v21 + 120) = v20;
    *(_QWORD *)(v21 + 128) = 0;
    swift_retain(v17);
    swift_retain(v18);
    swift_retain(v15);
    swift_retain(v14);
    sub_1000A9FF4((_QWORD *)(v0 + 16));
    v24 = swift_allocObject(&unk_10016A030, 32, 7);
    *(_QWORD *)(v0 + 400) = v24;
    *(_QWORD *)(v24 + 16) = sub_1000A9FC8;
    *(_QWORD *)(v24 + 24) = v21;
    v29(v16, v28, v27);
    v25 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v21);
    v26 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 408) = v26;
    *v26 = v0;
    v26[1] = sub_10009D374;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v26, *(_QWORD *)(v0 + 208), sub_100052C50, v24, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10009D188(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 360);
  *(_QWORD *)(*v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10009DBB0;
  }
  else
  {
    *(_QWORD *)(v4 + 376) = a1;
    v6 = sub_10009D1FC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10009D1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void (*v18)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 384) = v1;
  v2 = *(_QWORD *)(v0 + 344);
  v18 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 304);
  v17 = *(_DWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_BYTE *)(v0 + 444);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = swift_allocObject(&unk_10016A008, 136, 7);
  *(_QWORD *)(v0 + 392) = v8;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v5;
  *(_QWORD *)(v8 + 32) = v2;
  *(_BYTE *)(v8 + 40) = v6;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v8 + 64) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 112) = v4;
  *(_QWORD *)(v8 + 120) = v7;
  *(_QWORD *)(v8 + 128) = v1;
  swift_retain(v5);
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  sub_1000A9FF4((_QWORD *)(v0 + 16));
  v11 = swift_allocObject(&unk_10016A030, 32, 7);
  *(_QWORD *)(v0 + 400) = v11;
  *(_QWORD *)(v11 + 16) = sub_1000A9FC8;
  *(_QWORD *)(v11 + 24) = v8;
  swift_retain(v1);
  v18(v15, v17, v16);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 408) = v13;
  *v13 = v0;
  v13[1] = sub_10009D374;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v13, *(_QWORD *)(v0 + 208), sub_100052C50, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10009D374()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 408);
  *(_QWORD *)(*v1 + 416) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 400);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 328))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 192));
    swift_release(v4);
    v5 = sub_10009D4E0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 392);
    (*(void (**)(_QWORD, _QWORD))(v2 + 328))(*(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 192));
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10009D420;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009D420()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10017561C);
  v0[53] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10009D47C;
  return sub_10003C330(v0[16], 0, 0xF000000000000000, 0, v0[32]);
}

uint64_t sub_10009D47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009DD34;
  else
    v3 = sub_10009D678;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009D4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 392));
  swift_release(v2);
  swift_release(v3);
  swift_release(v1);
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v4 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v9, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v4);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v9, 0, v10, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v13);
  swift_errorRelease(v4);
  swift_release(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 344));
  swift_release(v2);
  swift_release(v1);
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  swift_beginAccess(v3 + 16, v0 + 80, 0, 0);
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  sub_10000B178(v9, v8);
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v9, v8);
}

uint64_t sub_10009D75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_release(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*(_QWORD *)(v0 + 256));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_release(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*(_QWORD *)(v0 + 256));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_release(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 344));
  swift_release(v1);
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v2);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v7, 0, v8, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_release(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 344));
  swift_release(v2);
  swift_release(v1);
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 144));
  swift_errorRetain(v3);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v8, 0, v9, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000003CLL, 0x80000001001339C0, 149);
  swift_willThrow(v12);
  swift_errorRelease(v3);
  swift_release(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009DEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v10);
  v5[15] = swift_task_alloc(v10);
  v5[16] = swift_task_alloc(v10);
  v5[17] = swift_task_alloc(v10);
  return swift_task_switch(sub_10009DF7C, 0, 0);
}

uint64_t sub_10009DF7C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t type;
  NSObject *log;
  uint64_t v69;
  char v70;
  unint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  id v73;
  void *v74;
  uint64_t v75[2];

  v1 = sub_10009ED48(v0[5], v0[6], v0[7]);
  v3 = v2;
  type metadata accessor for SecAccessControl(0);
  v4 = static SecAccessControlRef.fromData(_:)(v1, v3);
  v5 = v0[17];
  v6 = v0[12];
  v7 = v0[13];
  v74 = (void *)v4;
  defaultLogger()(v4);
  v8 = (_QWORD *)swift_task_alloc(48);
  v8[2] = v1;
  v8[3] = v3;
  v8[4] = v74;
  Logger.cryptoParam(_:)(sub_1000AA054, v8);
  swift_task_dealloc(v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v10 = v9(v5, v6);
  v11 = dispatch thunk of BiometricsHelper.requiresDoublePress.getter(v10);
  v12 = v11;
  if ((v11 & 1) == 0
    || (v11 = SecAccessControlRef.hasStockholmPolicy.getter(), (v11 & 1) != 0)
    || (v11 = SecAccessControlRef.hasIDVPolicy.getter(), (v11 & 1) != 0))
  {
    v13 = defaultLogger()(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No double press required", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = v0[14];
    v18 = v0[12];

    v9(v17, v18);
    sub_100005A38(v1, v3);
    v73 = v74;
    v19 = v1;
    v20 = v3;
  }
  else
  {
    v70 = v12;
    v35 = defaultLogger()(v11);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Double press required, updating ACL", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    v39 = v0[16];
    v40 = v0[12];
    v41 = (_QWORD *)v0[8];

    v9(v39, v40);
    v72 = (void (*)(uint64_t, uint64_t))v9;
    v42 = v41[6];
    v43 = v41[7];
    sub_1000151A4(v41 + 3, v42);
    v44 = dispatch thunk of AppleIDVManaging.requireDoublePressOnACL(_:)(v1, v3, v42, v43);
    v20 = v45;
    if (v45 >> 60 == 15)
    {
      v46 = v0[11];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[10] + 104))(v46, enum case for DIPError.Code.appleIDVErrorRequireDoublePressOnACL(_:), v0[9]);
      v47 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v48 = type metadata accessor for DIPError(0);
      v49 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v48, v49, 0, 0);
      v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100133AB0, 0, v46, 0, v47, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002BLL, 0x8000000100133AD0, 196);
      swift_willThrow(v50);
      sub_100005AB0(v1, v3);

      v24 = v0[16];
      v26 = v0[14];
      v25 = v0[15];
      v27 = v0[11];
      swift_task_dealloc(v0[17]);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      v34 = (uint64_t (*)(void))v0[1];
      return v34();
    }
    v51 = v44;
    sub_100005A38(v44, v45);
    v52 = (id)static SecAccessControlRef.fromData(_:)(v51, v20);
    defaultLogger()(v52);
    sub_10000B178(v51, v20);
    v53 = v51;
    sub_10000B178(v51, v20);
    v54 = v52;
    v55 = Logger.logObject.getter(v54);
    log = v55;
    type = static os_log_type_t.debug.getter();
    v56 = os_log_type_enabled(v55, type);
    v57 = v0[15];
    v58 = v0[12];
    v73 = v54;
    if (v56)
    {
      v66 = v0[15];
      v59 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v75[0] = v65;
      *(_DWORD *)v59 = 136315394;
      v60 = Data.base16EncodedString()();
      v0[2] = sub_10003FA80(v60._countAndFlagsBits, (unint64_t)v60._object, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v59 + 4);
      swift_bridgeObjectRelease(v60._object);
      sub_10000B164(v53, v20);
      v61 = sub_10000B164(v53, v20);
      *(_WORD *)(v59 + 12) = 2080;
      v62 = SecAccessControlRef.constraintsDescription.getter(v61);
      v64 = v63;
      v0[3] = sub_10003FA80(v62, v63, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v59 + 14);
      swift_bridgeObjectRelease(v64);

      _os_log_impl((void *)&_mh_execute_header, log, type, "setSESBackedGlobalAuthACL ACL with double press: %s = %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v19 = v53;
      sub_10000B164(v53, v20);
      v72(v66, v58);
      v12 = v70;
    }
    else
    {
      sub_10000B164(v53, v20);
      sub_10000B164(v53, v20);
      sub_100005AB0(v53, v20);

      v72(v57, v58);
      v12 = v70;
      v19 = v53;
    }
  }
  v21 = (_QWORD *)v0[8];
  v23 = v21[6];
  v22 = v21[7];
  sub_1000151A4(v21 + 3, v23);
  v29 = dispatch thunk of AppleIDVManaging.getUUIDsFromACL(_:)(v19, v20, v23, v22);
  v30 = v0[16];
  v32 = v0[14];
  v31 = v0[15];
  v69 = v0[11];
  v71 = v20;
  v33 = v0[4];
  swift_task_dealloc(v0[17]);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v69);
  *(_BYTE *)v33 = v12 & 1;
  *(_QWORD *)(v33 + 8) = v1;
  *(_QWORD *)(v33 + 16) = v3;
  *(_QWORD *)(v33 + 24) = v74;
  *(_QWORD *)(v33 + 32) = v19;
  *(_QWORD *)(v33 + 40) = v71;
  *(_QWORD *)(v33 + 48) = v73;
  *(_QWORD *)(v33 + 56) = v29;
  v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

uint64_t sub_10009E6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  uint64_t result;

  v4 = *(char **)(a1 + 104);
  result = sub_1000A8304((char *)0xD000000000000012, (void *)0x800000010012D7B0, a2, v4);
  if (!v2)
    return sub_1000A8304((char *)0xD00000000000001ELL, (void *)0x800000010012D7D0, a2, v4);
  return result;
}

void sub_10009E734(uint64_t a1, _QWORD *a2, void *a3, int a4, objc_class *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint8_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  objc_class *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  objc_class *v50;
  id v51;
  NSString v52;
  Class isa;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  NSString v60;
  Class v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  objc_class *ObjCClassFromMetadata;
  id v70;
  uint64_t v71;
  _BYTE v72[24];
  unint64_t v73;

  v64 = a8;
  v66 = a6;
  v67 = a7;
  ObjCClassFromMetadata = a5;
  v70 = a3;
  LODWORD(v68) = a4;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v65 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v63 - v16;
  v18 = defaultLogger()(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "created a new progenitor key", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  v23 = a2;
  v24 = (uint64_t)v70;
  v25 = sub_100100E8C((uint64_t)v70);
  if (!v8)
  {
    v27 = v25;
    v28 = v26;
    swift_beginAccess(a1 + 16, v72, 1, 0);
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v28;
    v31 = sub_10000B164(v29, v30);
    if ((v68 & 1) != 0)
    {
      v32 = v65;
      v33 = defaultLogger()(v31);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v68 = swift_slowAlloc(32, -1);
        v73 = v68;
        *(_DWORD *)v36 = 136315138;
        v23 = a2;
        v63 = v36 + 4;
        v37 = v36;
        v71 = sub_10003FA80(0xD00000000000003CLL, 0x80000001001339C0, (uint64_t *)&v73);
        v24 = (uint64_t)v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v63);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s keeping sidv acl", v37, 0xCu);
        v38 = v68;
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }

      v22(v32, v11);
      v39 = v23 + 3;
      v40 = v23[6];
      v41 = v23[7];
      sub_1000151A4(v39, v40);
      v42 = ObjCClassFromMetadata;
      v43 = dispatch thunk of AppleIDVManaging.persistACLBlob(_:requiresDoublePress:)(*((_QWORD *)ObjCClassFromMetadata + 1), *((_QWORD *)ObjCClassFromMetadata + 2), *(unsigned __int8 *)ObjCClassFromMetadata, v40, v41);
      v68 = v44;
      swift_bridgeObjectRelease(v45);
      v46 = v67;
    }
    else
    {
      v43 = 0;
      v68 = 0xC000000000000000;
      v46 = v67;
      v42 = ObjCClassFromMetadata;
    }
    v47 = type metadata accessor for StoredCryptoKey(0);
    v48 = *(_QWORD *)(v66 + 16);
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v47);
    v70 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initWithContext:", v48);
    sub_1000C8EB8(v24);
    v49 = type metadata accessor for StoredAuthACL(0);
    v50 = (objc_class *)swift_getObjCClassFromMetadata(v49);
    v51 = objc_msgSend(objc_allocWithZone(v50), "initWithContext:", v48);
    objc_msgSend(v51, "setVersion:", 2);
    if (v46 < 0)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v51, "setAclType:", v46);
      v52 = String._bridgeToObjectiveC()();
      objc_msgSend(v51, "setIdentifier:", v52);

      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v51, "setEncryptedACL:", isa);

      v54 = *((_QWORD *)v42 + 7);
      if (v54)
        v55 = (_QWORD *)*((_QWORD *)v42 + 7);
      else
        v55 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v54);
      sub_1000C8ED4((uint64_t)v55);
      v65 = (char *)v43;
      swift_bridgeObjectRelease(v55);
      objc_msgSend(v51, "setProgenitorKey:", v70);
      v56 = v64;
      if (v64)
      {
        v57 = objc_allocWithZone(ObjCClassFromMetadata);
        swift_retain(v56);
        v58 = objc_msgSend(v57, "initWithContext:", v48);
        sub_1000C8EB8(v56);
        v59 = objc_msgSend(objc_allocWithZone(v50), "initWithContext:", v48);
        objc_msgSend(v59, "setVersion:", 2);
        objc_msgSend(v59, "setAclType:", v67);
        v60 = String._bridgeToObjectiveC()();
        objc_msgSend(v59, "setIdentifier:", v60);

        v61 = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v59, "setEncryptedACL:", v61);

        swift_bridgeObjectRetain(v54);
        sub_1000C8ED4((uint64_t)v55);
        v62 = (uint64_t)v65;
        swift_bridgeObjectRelease(v55);
        objc_msgSend(v59, "setProgenitorKey:", v58);
        swift_release(v64);

      }
      else
      {
        v62 = (uint64_t)v65;
      }
      sub_1000091F8();
      sub_100005AB0(v62, v68);

    }
  }
}

uint64_t sub_10009ED48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v78 = a2;
  v82 = a3;
  v77 = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  __chkstk_darwin(v3);
  v73 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  __chkstk_darwin(v5);
  v81 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for EnrolledBiometricType(0);
  v7 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_100177278);
  __chkstk_darwin(v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100008E84(&qword_100177280);
  v13 = __chkstk_darwin(v70);
  v80 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v67 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v67 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v67 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v67 - v25;
  dispatch thunk of BiometricsHelper.biometricType.getter(v24);
  v83 = v26;
  sub_1000AA060((uint64_t)v26, (uint64_t)v23);
  if (v82 != 1)
  {
    v34 = sub_1000150E8((uint64_t)v23, &qword_100177280);
    v35 = 0;
    v33 = (uint64_t)v80;
    v32 = v81;
    goto LABEL_10;
  }
  v27 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v20, enum case for EnrolledBiometricType.touchID(_:), v74);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v27);
  v28 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1000AA060((uint64_t)v23, (uint64_t)v12);
  sub_1000AA060((uint64_t)v20, v28);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v29((uint64_t)v12, 1, v27) == 1)
  {
    v30 = (uint64_t)v12;
    sub_1000150E8((uint64_t)v20, &qword_100177280);
    sub_1000150E8((uint64_t)v23, &qword_100177280);
    v31 = v29(v28, 1, v27);
    v33 = (uint64_t)v80;
    v32 = v81;
    if (v31 == 1)
    {
      v34 = sub_1000150E8((uint64_t)v12, &qword_100177280);
      v35 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  sub_1000AA060((uint64_t)v12, (uint64_t)v17);
  v36 = v29(v28, 1, v27);
  v33 = (uint64_t)v80;
  v32 = v81;
  v37 = (uint64_t)v12;
  v38 = v17;
  if (v36 == 1)
  {
    v30 = v37;
    sub_1000150E8((uint64_t)v20, &qword_100177280);
    sub_1000150E8((uint64_t)v23, &qword_100177280);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v74);
LABEL_8:
    v34 = sub_1000150E8(v30, &qword_100177278);
    v35 = 0;
    goto LABEL_10;
  }
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  v40 = v9;
  v69 = v37;
  v41 = v9;
  v42 = v74;
  v39(v41, v28, v74);
  v43 = sub_1000058C8(&qword_100177288, (uint64_t (*)(uint64_t))&type metadata accessor for EnrolledBiometricType, (uint64_t)&protocol conformance descriptor for EnrolledBiometricType);
  v68 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v40, v42, v43);
  v67 = v38;
  v44 = *(void (**)(char *, uint64_t))(v7 + 8);
  v44(v40, v42);
  sub_1000150E8((uint64_t)v20, &qword_100177280);
  sub_1000150E8((uint64_t)v23, &qword_100177280);
  v44(v67, v42);
  v35 = v68;
  v34 = sub_1000150E8(v69, &qword_100177280);
LABEL_10:
  defaultLogger()(v34);
  v45 = sub_1000AA060((uint64_t)v83, v33);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(28, -1);
    v49 = swift_slowAlloc(64, -1);
    v86 = v49;
    *(_DWORD *)v48 = 67109634;
    LODWORD(v84) = v35 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 4, v48 + 4);
    *(_WORD *)(v48 + 8) = 2080;
    v50 = (id)DCCredentialAuthACLTypeToString(v82);
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    v84 = sub_10003FA80(v51, v53, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v48 + 10);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v48 + 18) = 2080;
    v54 = (uint64_t)v80;
    v55 = Optional.debugDescription.getter(v70);
    v57 = v56;
    v84 = sub_10003FA80(v55, v56, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v48 + 20);
    swift_bridgeObjectRelease(v57);
    sub_1000150E8(v54, &qword_100177280);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Calling migrateOACLOperation with shouldHaveOACL = %{BOOL}d, acl type = %s, biometric type = %s", (uint8_t *)v48, 0x1Cu);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v81, v76);
  }
  else
  {
    sub_1000150E8(v33, &qword_100177280);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v32, v76);
  }
  v58 = v79;
  sub_10012590C(v77, v78, v35 & 1);
  v60 = v59;
  sub_1000150E8((uint64_t)v83, &qword_100177280);
  if (v58)
  {
    v61 = v73;
    (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v73, enum case for DIPError.Code.internalError(_:), v72);
    swift_errorRetain(v58);
    v62 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v63 = type metadata accessor for DIPError(0);
    v64 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v63, v64, 0, 0);
    v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v58, v61, 0, v62, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000022, 0x8000000100133B30, 1053);
    swift_willThrow(v65);
    swift_errorRelease(v58);
  }
  return v60;
}

uint64_t sub_10009F478()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;

  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000100133B00;
  v0._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v0);
  v1 = Data.base16EncodedString()();
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 2112800;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = SecAccessControlRef.constraintsDescription.getter();
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_10009F53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[10] = a2;
  v7[11] = a3;
  v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v7[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[17] = v9;
  v7[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError.Code(0);
  v7[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[20] = v11;
  v7[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)swift_task_alloc(dword_100177254);
  v7[22] = v12;
  *v12 = v7;
  v12[1] = sub_10009F5F8;
  return sub_1000A292C(0xD000000000000012, 0x800000010012D7B0);
}

uint64_t sub_10009F5F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v2 + 176);
  v4 = *v2;
  *(_QWORD *)(v4 + 184) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10009F680, 0, 0);
  v5 = *(_QWORD *)(v4 + 144);
  swift_task_dealloc(*(_QWORD *)(v4 + 168));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10009F680()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 184);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 184), "aclType");

    v3 = (_QWORD *)swift_task_alloc(dword_100177274);
    *(_QWORD *)(v0 + 192) = v3;
    *v3 = v0;
    v3[1] = sub_10009F82C;
    return sub_10009DEC4(v0 + 16, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), (uint64_t)v2);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v5, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 152));
    v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v7 = type metadata accessor for DIPError(0);
    v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v7, v8, 0, 0);
    v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100134070, 0, v5, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 231);
    swift_willThrow(v9);
    v10 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10009F82C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10009F8A8, 0, 0);
  v5 = *(_QWORD *)(v2 + 168);
  v6 = *(_QWORD *)(v2 + 144);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10009F8A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0[11] + 104) + 16);
  v0[25] = v1;
  v2 = dword_10017563C;
  swift_retain(v1);
  v3 = (uint64_t **)swift_task_alloc(v2);
  v0[26] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10009F914;
  return sub_10003BC6C(v0[10], v1);
}

uint64_t sub_10009F914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009FCFC;
  else
    v3 = sub_10009F978;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009F978()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = swift_allocObject(&unk_10016A3F0, 128, 7);
  *(_QWORD *)(v0 + 224) = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v2;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v8 + 80) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v8 + 112) = v10;
  swift_retain(v7);
  swift_retain(v6);
  sub_100005A38(v5, v4);
  sub_100005A38(v3, v2);
  sub_1000A9FF4((_QWORD *)(v0 + 16));
  v11 = swift_allocObject(&unk_10016A418, 32, 7);
  *(_QWORD *)(v0 + 232) = v11;
  *(_QWORD *)(v11 + 16) = sub_1000AA784;
  *(_QWORD *)(v11 + 24) = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v16, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v15);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 240) = v13;
  *v13 = v0;
  v13[1] = sub_10009FAD0;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v13, *(_QWORD *)(v0 + 144), sub_100052C50, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_10009FAD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  v4 = v2[29];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
    swift_release(v4);
    v5 = sub_10009FC3C;
  }
  else
  {
    v6 = v2[28];
    (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10009FB7C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10009FB7C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10017561C);
  v0[32] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10009FBD8;
  return sub_10003C330(v0[10], 0, 0xF000000000000000, 0, v0[25]);
}

uint64_t sub_10009FBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10009FD50;
  else
    v3 = sub_10009FC9C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009FC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009FC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 200));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009FCFC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 200));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009FD50()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 200));
  sub_1000A9EDC((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009FDA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  v63 = a4;
  v64 = a7;
  v66 = a5;
  v67 = a6;
  v62 = a3;
  v65 = a2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v56 - v13;
  v15 = type metadata accessor for DIPError.Code(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v68;
  v20 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v19)
  {
    v21 = v20;
    v60 = v9;
    v61 = v15;
    v57 = v12;
    v58 = v8;
    v59 = a1;
    v68 = v18;
    if (!v20)
    {
      v32 = v68;
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v68, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v61);
      v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v34 = type metadata accessor for DIPError(0);
      v35 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v34, v35, 0, 0);
      v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100133BB0, 0, v32, 0, v33, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 243);
      swift_willThrow(v36);
      return;
    }
    v22 = objc_msgSend(v20, "version");
    v23 = v16;
    if ((_DWORD)v22 == 1)
    {
      sub_1000A0440(v21, v62, (uint64_t)v63, v59, v66, v67);
      v63 = v21;
      v42 = v68;
    }
    else
    {
      v63 = v21;
      v24 = v60;
      if ((unsigned __int16)v22 != 2)
      {
        v37 = v68;
        (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v68, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v61);
        v38 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v39 = type metadata accessor for DIPError(0);
        v40 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v39, v40, 0, 0);
        v41 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100133C10, 0, v37, 0, v38, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 267);
        swift_willThrow(v41);

        return;
      }
      v25 = defaultLogger()(v22);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Updating global progenitor key", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v58);
      v29 = *(void **)(v64 + 48);
      v31 = v66;
      v30 = v67;
      sub_1000A8B1C(v63, v29, *(_QWORD *)(v64 + 32), *(_QWORD *)(v64 + 40), v66, v67);
      sub_1000A0B84((uint64_t)v29, v59, v31, v30);
      v42 = v68;
    }
    v43 = v61;
    v44 = (void *)sub_100122C60(0xD00000000000001ELL, (void *)0x800000010012D7D0);
    v45 = v44;
    if (!v44)
      goto LABEL_16;
    v46 = objc_msgSend(v44, "version");
    if ((_DWORD)v46 == 2)
    {
      v47 = v57;
      v48 = defaultLogger()(v46);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Updating global third party progenitor key", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v58);
      sub_1000A8B1C(v45, *(void **)(v64 + 24), *(_QWORD *)(v64 + 8), *(_QWORD *)(v64 + 16), v66, v67);

LABEL_16:
      sub_1000091F8();

      return;
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v42, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v43);
    v52 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v53 = type metadata accessor for DIPError(0);
    v54 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v53, v54, 0, 0);
    v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x80000001001340A0, 0, v42, 0, v52, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000035, 0x8000000100134030, 283);
    swift_willThrow(v55);

  }
}

uint64_t sub_1000A0440(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  Swift::String v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  Class isa;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;

  v87 = a6;
  v12 = type metadata accessor for DIPError.Code(0);
  v90 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v89 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v85 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v86 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "encryptedACL");
  if (!v16)
    goto LABEL_6;
  v17 = v16;
  v81 = v14;
  v84 = a4;
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  v21 = objc_msgSend(a1, "identifier");
  if (!v21)
  {
    sub_100005AB0(v18, v20);
LABEL_6:
    v43 = v89;
    v44 = v90;
    (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v89, enum case for DIPError.Code.invalidStoredData(_:), v12);
    v33 = v12;
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v30 = swift_allocError(v35, v36, 0, 0);
    v37 = v34;
    v45 = v33;
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x80000001001340E0, 0, v43, 0, v37, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000049, 0x8000000100134120, 313);
    swift_willThrow(v38);
    goto LABEL_8;
  }
  v82 = v12;
  v22 = v21;
  v80 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v83 = v23;
  v79 = objc_msgSend(a1, "aclType");
  v25 = v6[6];
  v24 = v6[7];
  sub_1000151A4(v6 + 3, v25);
  v26 = (uint64_t)v88;
  v27 = dispatch thunk of AppleIDVManaging.persistModifiedACLBlob(_:referenceACLBlob:externalizedLAContext:)(a2, a3, v18, v20, a5, v87, v25, v24);
  v30 = v26;
  v31 = v20;
  v32 = v18;
  if (v26)
  {
    swift_bridgeObjectRelease(v83);

    sub_100005AB0(v18, v31);
    v43 = v89;
    v44 = v90;
    v45 = v82;
LABEL_8:
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v43, enum case for DIPError.Code.internalError(_:), v45);
    swift_errorRetain(v30);
    v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v47 = type metadata accessor for DIPError(0);
    v48 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v47, v48, 0, 0);
    v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v30, v43, 0, v46, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000049, 0x8000000100134120, 329);
    swift_willThrow(v49);
    return swift_errorRelease(v30);
  }
  v39 = v27;
  v40 = v28;
  v41 = v29;
  v88 = v22;
  v42 = v83;
  sub_10012315C(v80, v83);
  v51 = swift_bridgeObjectRelease(v42);
  v52 = v86;
  defaultLogger()(v51);
  sub_100005A38(v39, v40);
  v53 = v41;
  swift_bridgeObjectRetain(v41);
  sub_100005A38(v39, v40);
  swift_bridgeObjectRetain(v41);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.debug.getter();
  v57 = os_log_type_enabled(v55, v56);
  v87 = v39;
  v75 = v32;
  v76 = v31;
  v77 = v53;
  v78 = v40;
  if (v57)
  {
    v58 = (char *)swift_slowAlloc(12, -1);
    v59 = v53;
    v83 = swift_slowAlloc(32, -1);
    v93 = v83;
    v80 = v58;
    *(_DWORD *)v58 = 136315138;
    v74 = v58 + 4;
    v60 = v87;
    v61 = Data.base64EncodedString(options:)(0);
    v91 = sub_10003FA80(v61._countAndFlagsBits, (unint64_t)v61._object, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v74);
    swift_bridgeObjectRelease(v61._object);
    sub_100005AB0(v60, v40);
    swift_bridgeObjectRelease(v59);
    sub_100005AB0(v60, v40);
    swift_bridgeObjectRelease(v59);
    v62 = v80;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Modified ACL: %s", (uint8_t *)v80, 0xCu);
    v63 = v83;
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v81);
  }
  else
  {
    v64 = v87;
    sub_100005AB0(v87, v40);
    swift_bridgeObjectRelease(v53);
    sub_100005AB0(v64, v40);

    swift_bridgeObjectRelease(v53);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v52, v81);
  }
  v65 = v84;
  v66 = type metadata accessor for StoredAuthACL(0);
  v67 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v66)), "initWithContext:", *(_QWORD *)(v65 + 16));
  v68 = v87;
  v69 = v78;
  sub_100005A38(v87, v78);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100005AB0(v68, v69);
  objc_msgSend(v67, "setEncryptedACL:", isa);

  objc_msgSend(v67, "setAclType:", v79);
  v71 = v88;
  objc_msgSend(v67, "setIdentifier:", v88);

  sub_100005A38(v68, v69);
  v72 = v77;
  swift_bridgeObjectRetain(v77);
  sub_100005AB0(v68, v69);
  if (v72)
    v73 = v72;
  else
    v73 = _swiftEmptyArrayStorage;
  sub_1000C8ED4((uint64_t)v73);
  sub_100005AB0(v75, v76);
  sub_100005AB0(v87, v78);
  swift_bridgeObjectRelease(v73);

  return swift_bridgeObjectRelease(v72);
}

void sub_1000A0B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint8_t *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint8_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  id v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v93 = a3;
  v94 = a4;
  v92 = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CredentialKeyType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v97 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v96 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v95 = (char *)&v74 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v74 - v16;
  v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v19._countAndFlagsBits = 0xD000000000000031;
  v19._object = (void *)0x8000000100134170;
  v20 = NSUserDefaults.internalBool(forKey:)(v19);

  if (v20)
  {
    v22 = defaultLogger()(v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Skipping ACL update to presentment keys due to internal defaults setting", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v97 + 8))(v17, v11);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for CredentialKeyType.ses(_:), v7);
    v26 = sub_10000DAC4((uint64_t)v10, 2);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v29 = v27;
      if (v27 >> 62)
        goto LABEL_29;
      v30 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (v30)
      {
        v81 = v29 & 0xC000000000000001;
        v75 = &v99;
        v31 = 4;
        *(_QWORD *)&v28 = 136315138;
        v78 = v28;
        v74 = (char *)&type metadata for Any + 8;
        v77 = v29;
        v79 = v30;
        v80 = v11;
        while (1)
        {
          v32 = v81
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31 - 4, v29)
              : *(id *)(v29 + 8 * v31);
          v33 = v32;
          if (__OFADD__(v31 - 4, 1))
            break;
          v34 = objc_msgSend(v32, "identifier");
          if (!v34)
          {
            v67 = v29;
LABEL_27:
            swift_bridgeObjectRelease(v67);
            v68 = v85;
            (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v85, enum case for DIPError.Code.invalidStoredData(_:), v84);
            v69 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
            v70 = type metadata accessor for DIPError(0);
            v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
            swift_allocError(v70, v71, 0, 0);
            v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x80000001001341B0, 0, v68, 0, v69, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000004ALL, 0x80000001001341E0, 409);
            swift_willThrow(v72);

            return;
          }
          v35 = v34;
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v38 = v37;

          v39 = objc_msgSend(v33, "keyBlob");
          if (!v39)
          {
            swift_bridgeObjectRelease(v29);
            v67 = v38;
            goto LABEL_27;
          }
          v40 = v39;
          v86 = v31 - 3;
          v87 = v31;
          v41 = v29;
          v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v44 = v43;

          v82 = v36;
          v91 = v42;
          v45 = sub_1000FF1E8(v36, v38, v42, v44, 0, 0xF000000000000000);
          v88 = v44;
          v89 = v33;
          v90 = v45;
          v11 = 0;
          v46 = dispatch thunk of SESKeystore.getACLConstraints(of:)(*(_QWORD *)(v45 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob), *(_QWORD *)(v45 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob + 8));
          v48 = v47;
          v29 = v41;
          type metadata accessor for SecAccessControl(0);
          v49 = (void *)static SecAccessControlRef.fromConstraintsData(_:)(v46, v48);
          v50 = sub_100005AB0(v46, v48);
          v51 = SecAccessControlRef.isOSGNChild.getter(v50);
          if ((v51 & 1) != 0)
          {
            v52 = v95;
            defaultLogger()(v51);
            swift_bridgeObjectRetain(0);
            v54 = Logger.logObject.getter(v53);
            v55 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v54, v55))
            {
              v56 = swift_slowAlloc(12, -1);
              v57 = swift_slowAlloc(32, -1);
              v100 = v57;
              *(_DWORD *)v56 = v78;
              swift_bridgeObjectRetain(0);
              *(_QWORD *)(v56 + 4) = sub_10003FA80(v82, 0, &v100);
              swift_bridgeObjectRelease_n(0, 3);
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Presentment key %s is a child key; skipping ACL change",
                (uint8_t *)v56,
                0xCu);
              swift_arrayDestroy(v57, 1, v74);
              swift_slowDealloc(v57, -1, -1);
              swift_slowDealloc(v56, -1, -1);
              swift_release(v90);

              sub_100005AB0(v91, v88);
              (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v80);
            }
            else
            {
              swift_release(v90);

              swift_bridgeObjectRelease_n(0, 2);
              sub_100005AB0(v91, v88);

              (*(void (**)(char *, uint64_t))(v97 + 8))(v52, v80);
            }
          }
          else
          {
            v58 = v96;
            defaultLogger()(v51);
            swift_bridgeObjectRetain(0);
            v60 = Logger.logObject.getter(v59);
            v61 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v60, v61))
            {
              v62 = (uint8_t *)swift_slowAlloc(12, -1);
              v11 = swift_slowAlloc(32, -1);
              v100 = v11;
              *(_DWORD *)v62 = v78;
              v76 = v62 + 4;
              swift_bridgeObjectRetain(0);
              v98 = sub_10003FA80(v82, 0, &v100);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v75, v76);
              swift_bridgeObjectRelease_n(0, 3);
              _os_log_impl((void *)&_mh_execute_header, v60, v61, "Updating ACL for presentment key %s", v62, 0xCu);
              swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v11, -1, -1);
              v63 = v62;
              v29 = v77;
              swift_slowDealloc(v63, -1, -1);

              (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v80);
            }
            else
            {

              swift_bridgeObjectRelease_n(0, 2);
              (*(void (**)(char *, uint64_t))(v97 + 8))(v58, v80);
            }
            v64 = v89;
            v65 = v90;
            v66 = sub_100101674(v90, v92, v93, v94);
            sub_1000C90E4(v66);
            swift_release(v65);

            swift_release(v66);
            sub_100005AB0(v91, v88);

          }
          v31 = v87 + 1;
          if (v86 == v79)
            goto LABEL_33;
        }
        __break(1u);
LABEL_29:
        if (v29 < 0)
          v73 = v29;
        else
          v73 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v29);
        v30 = _CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease(v29);
      }
LABEL_33:
      swift_bridgeObjectRelease(v29);
    }
  }
}

uint64_t sub_1000A1678()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A16D8, 0, 0);
}

uint64_t sub_1000A16D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Checking global auth oacl for migration", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[4];
  v6 = v1[5];
  v9 = v1[2];
  v8 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = swift_allocObject(&unk_10016A0A8, 32, 7);
  v1[6] = v10;
  *(_QWORD *)(v10 + 16) = sub_1000AA17C;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain_n(v9, 2);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v1[7] = v12;
  *v12 = v1;
  v12[1] = sub_1000A1818;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000A1818()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A18C4;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 48));
    swift_release(v5);
    v4 = sub_1000A1890;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A1890()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A18C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A190C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint8_t *v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v100 = a2;
  v3 = (_QWORD *)type metadata accessor for Logger(0);
  v4 = *(v3 - 1);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v89 - v11;
  v13 = type metadata accessor for DIPError.Code(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v101;
  v18 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (v17)
    return;
  v98 = v3;
  v99 = v14;
  v101 = v13;
  v97 = a1;
  if (!v18)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v16, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v101);
    v37 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002BLL, 0x8000000100133BB0, 0, v16, 0, v37, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000020, 0x8000000100133BE0, 440);
    swift_willThrow(v40);
    return;
  }
  v96 = 0;
  v19 = v18;
  v20 = objc_msgSend(v18, "version");
  v21 = v101;
  if ((_DWORD)v20 == 1)
  {
    v95 = v19;
    v41 = defaultLogger()(v20);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Global auth acl is v1, no migration necessary", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    (*(void (**)(char *, id))(v4 + 8))(v12, v98);
    goto LABEL_14;
  }
  if ((unsigned __int16)v20 != 2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v16, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v101);
    v45 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v47 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v46, v47, 0, 0);
    v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100133C10, 0, v16, 0, v45, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000020, 0x8000000100133BE0, 479);
LABEL_19:
    swift_willThrow(v48);

    return;
  }
  v22 = objc_msgSend(v19, "progenitorKey");
  if (!v22)
  {
LABEL_18:
    (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v16, enum case for DIPError.Code.idcsMissingProgenitorKeyFromACL(_:), v21);
    v49 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v50 = type metadata accessor for DIPError(0);
    v51 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v50, v51, 0, 0);
    v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100133C30, 0, v16, 0, v49, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000020, 0x8000000100133BE0, 450);
    goto LABEL_19;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "identifier");
  if (!v24)
  {

    goto LABEL_18;
  }
  v25 = v24;
  v89 = v4;
  v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = objc_msgSend(v23, "keyBlob");
  if (!v28)
  {

    swift_bridgeObjectRelease(v27);
    goto LABEL_18;
  }
  v29 = v28;
  v95 = v19;
  v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v92 = v30;

  v31 = *(_QWORD *)(v100 + 104);
  v91 = v23;
  v32 = objc_msgSend(v23, "publicKeyIdentifier");
  if (v32)
  {
    v33 = v32;
    v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0xF000000000000000;
  }
  v52 = v27;
  v90 = v27;
  v53 = v92;
  v54 = v34;
  v55 = v96;
  v56 = sub_100100EB4(v93, v52, v94, v92, v34, v36);
  if (v55)
  {
    sub_10000B164(v34, v36);
    sub_100005AB0(v94, v53);

    swift_bridgeObjectRelease(v90);
    return;
  }
  v57 = v56;
  swift_bridgeObjectRelease(v90);
  sub_10000B164(v54, v36);
  v58 = (void *)sub_1001033D8(*(_QWORD *)(v57 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(_QWORD *)(v57 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8));
  v99 = v31;
  v101 = v57;
  v59 = SecAccessControlRef.data.getter();
  v61 = v60;
  v62 = (uint64_t)objc_msgSend(v95, "aclType");
  if (v62 < 0)
    goto LABEL_33;
  v63 = sub_10009ED48(v59, v61, v62);
  v64 = v89;
  v93 = v63;
  v100 = v65;
  v90 = v61;
  sub_1001044DC(v63, v65);
  if ((v66 & 1) == 0)
  {
    v73 = v7;
    v74 = defaultLogger()(v66);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Global auth acl requires migration", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }

    (*(void (**)(char *, id))(v64 + 8))(v73, v98);
    v78 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
    sub_100126CC8(v78);
    type metadata accessor for SecAccessControl(0);
    v79 = (void *)static SecAccessControlRef.fromData(_:)(v93, v100);
    v98 = v58;
    v80 = objc_msgSend(v78, "externalizedContext");
    if (v80)
    {
      v81 = v80;
      v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
      v84 = v83;

      v85 = v101;
      v86 = sub_100101438(v101, (uint64_t)v79, v82, v84);
      v96 = 0;
      v87 = v86;
      sub_100005AB0(v82, v84);
      v88 = v91;
      sub_1000C8EB8(v87);

      swift_release(v87);
      sub_100005AB0(v93, v100);
      sub_100005AB0(v59, v90);
      swift_release(v85);

      sub_100005AB0(v94, v92);
LABEL_14:
      sub_1000091F8();

      return;
    }
    __break(1u);
LABEL_33:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return;
  }
  v67 = v10;
  v68 = defaultLogger()(v66);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Global auth acl already migrated, nothing to do", v71, 2u);
    v72 = v71;
    v67 = v10;
    swift_slowDealloc(v72, -1, -1);
  }

  sub_100005AB0(v93, v100);
  sub_100005AB0(v59, v90);
  swift_release(v101);

  sub_100005AB0(v94, v92);
  (*(void (**)(char *, id))(v64 + 8))(v67, v98);
}

uint64_t sub_1000A24C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A252C, 0, 0);
}

uint64_t sub_1000A252C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 104) + 16);
  v0[8] = v1;
  v2 = dword_10017563C;
  swift_retain(v1);
  v3 = (uint64_t **)swift_task_alloc(v2);
  v0[9] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1000A2598;
  return sub_10003BC6C(v0[3], v1);
}

uint64_t sub_1000A2598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000A2818;
  else
    v3 = sub_1000A25FC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A25FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v5 = v0[3];
  v6 = swift_allocObject(&unk_10016A350, 32, 7);
  v0[11] = v6;
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = swift_allocObject(&unk_10016A378, 32, 7);
  v0[12] = v7;
  *(_QWORD *)(v7 + 16) = sub_1000AA62C;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v4);
  swift_retain(v5);
  v9(v1, v8, v3);
  v10 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v6);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[13] = v11;
  *v11 = v0;
  v11[1] = sub_1000A2720;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 15, v0[7], sub_1000AA644, v7, &type metadata for Bool);
}

uint64_t sub_1000A2720()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  _BYTE *v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 56);
  v6 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 96));
    v7 = sub_1000A27D0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 88);
    v9 = *(_BYTE **)(v2 + 16);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v8);
    *v9 = *(_BYTE *)(v2 + 120);
    v7 = sub_10009C2F8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000A27D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A2818()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000A2854@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *v5;
  char v6;
  id result;
  char *v8;

  v5 = (char *)sub_100079C04();
  v6 = sub_1000A8304((char *)0xD000000000000012, (void *)0x800000010012D7B0, a1, v5);
  result = (id)swift_release(v5);
  if (!v2)
  {
    v8 = (char *)sub_100079C04();
    sub_1000A8304((char *)0xD00000000000001ELL, (void *)0x800000010012D7D0, a1, v8);
    swift_release(v8);
    result = sub_1000091F8();
    *a2 = v6 & 1;
  }
  return result;
}

uint64_t sub_1000A292C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A2990, 0, 0);
}

uint64_t sub_1000A2990()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_100169F40, 40, 7);
  v0[9] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_100169F68, 32, 7);
  v0[10] = v5;
  *(_QWORD *)(v5 + 16) = sub_1000A9D9C;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v2);
  swift_retain(v1);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[11] = v7;
  v8 = sub_100008E84(&qword_100177258);
  *v7 = v0;
  v7[1] = sub_1000A2A90;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039668, v5, v8);
}

uint64_t sub_1000A2A90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000A2B30, 0, 0);
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v3 + 80));
  swift_release(v5);
  v7 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_1000A2B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001DLL, 0x8000000100133920, 577);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A2C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A2CD0, 0, 0);
}

uint64_t sub_1000A2CD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[6];
  v2 = v0[5];
  v3 = swift_allocObject(&unk_10016A0D0, 32, 7);
  v0[11] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = swift_allocObject(&unk_10016A0F8, 32, 7);
  v0[12] = v4;
  *(_QWORD *)(v4 + 16) = sub_1000AA194;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_retain(v3);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[13] = v6;
  v7 = sub_100008E84(&qword_1001772C8);
  *v6 = v0;
  v6[1] = sub_1000A2DBC;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039AB4, v4, v7);
}

uint64_t sub_1000A2DBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A2E80;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
    swift_release(*(_QWORD *)(v2 + 96));
    swift_release(v5);
    v4 = sub_1000A2E30;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A2E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3);
}

uint64_t sub_1000A2E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000026, 0x8000000100133C50, 594);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A2FBC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  _QWORD *v39;
  uint8_t *v40;
  void *v41;
  id v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  Class isa;
  id v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  Class v71;
  id v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  void *v77;

  v73 = a4;
  v74 = a5;
  v75 = a1;
  v76 = a3;
  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v73 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v73 - v18;
  v20 = v77;
  v21 = (void *)sub_100122C60(a2, v76);
  if (!v20)
  {
    v75 = v6;
    v76 = v7;
    if (v21)
    {
      v77 = v21;
      v22 = objc_msgSend(v21, "version");
      if ((_DWORD)v22 == 1)
      {
        v34 = v17;
        v35 = defaultLogger()(v22);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.debug.getter();
        v38 = os_log_type_enabled(v36, v37);
        v39 = v74;
        if (v38)
        {
          v40 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "v1 acl", v40, 2u);
          swift_slowDealloc(v40, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
        v41 = v77;
        v42 = objc_msgSend(v41, "encryptedACL");
        v43 = (_QWORD *)v73;
        if (!v42)
        {

          *v39 = 0;
          return;
        }
        v44 = v42;
        v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v47 = v46;

        v48 = (unint64_t)objc_msgSend(v41, "aclType");
        if ((v48 & 0x8000000000000000) == 0)
        {
          v49 = v48;

          v50 = v43[6];
          v51 = v43[7];
          sub_1000151A4(v43 + 3, v50);
          sub_100005A38(v45, v47);
          v57 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)(v45, v47, v50, v51);
          v59 = v58;
          v60 = objc_allocWithZone((Class)DCCredentialAuthACL);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v62 = objc_msgSend(v60, "initWithData:type:", isa, v49);
          sub_100005AB0(v57, v59);

          sub_100005AB0(v45, v47);
          sub_100005AB0(v45, v47);
          *v74 = v62;
          return;
        }
      }
      else
      {
        if ((unsigned __int16)v22 != 2)
        {
          (*((void (**)(char *, _QWORD, uint64_t))v76 + 13))(v9, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v75);
          v52 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
          v53 = type metadata accessor for DIPError(0);
          v54 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v53, v54, 0, 0);
          v55 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100133940, 0, v9, 0, v52, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001DLL, 0x8000000100133920, 570);
          swift_willThrow(v55);

          return;
        }
        v23 = v10;
        v24 = defaultLogger()(v22);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "v2 acl", v27, 2u);
          v28 = v27;
          v23 = v10;
          swift_slowDealloc(v28, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v23);
        v56 = sub_1000A7C08(v77, *(char **)(v73 + 104));
        v63 = (void *)sub_1001033D8(*(_QWORD *)&v56[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob], *(_QWORD *)&v56[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8]);
        v64 = SecAccessControlRef.data.getter();
        v66 = v65;

        v67 = v77;
        v68 = (unint64_t)objc_msgSend(v77, "aclType");
        if ((v68 & 0x8000000000000000) == 0)
        {
          v69 = v68;
          v70 = objc_allocWithZone((Class)DCCredentialAuthACL);
          v71 = Data._bridgeToObjectiveC()().super.isa;
          v72 = objc_msgSend(v70, "initWithData:type:", v71, v69);
          sub_100005AB0(v64, v66);
          swift_release(v56);

          *v74 = v72;
          return;
        }
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
      return;
    }
    v29 = v14;
    v30 = defaultLogger()(0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "no acl", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v29, v10);
    *v74 = 0;
  }
}

void sub_1000A3740(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = (void *)sub_100122C60(a1, a2);
  if (!v3)
  {
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v6, "encryptedACL");
      v8 = v7;
      if (v7)
      {
        v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v11 = v10;

        v12 = (unint64_t)objc_msgSend(v6, "aclType");
        if ((v12 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
          return;
        }
        v8 = (void *)v12;

        goto LABEL_9;
      }

      v9 = 0;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v11 = 0xF000000000000000;
LABEL_9:
    *a3 = v9;
    a3[1] = v11;
    a3[2] = (uint64_t)v8;
  }
}

uint64_t sub_1000A385C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t CredentialUUIDsEventResult;
  uint64_t v10;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  CredentialUUIDsEventResult = type metadata accessor for IDCSAnalytics.FetchCredentialUUIDsEventResult(0);
  v3[14] = CredentialUUIDsEventResult;
  v10 = *(_QWORD *)(CredentialUUIDsEventResult - 8);
  v3[15] = v10;
  v3[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A3920, 0, 0);
}

uint64_t sub_1000A3920()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[5];
  v2 = v0[4];
  v0[17] = *(_QWORD *)(v0[6] + 16);
  v3 = swift_allocObject(&unk_100169EC8, 32, 7);
  v0[18] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = swift_allocObject(&unk_100169EF0, 32, 7);
  v0[19] = v4;
  *(_QWORD *)(v4 + 16) = sub_1000A7394;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_retain(v3);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[20] = v6;
  v7 = sub_100008E84(&qword_100177240);
  *v6 = v0;
  v6[1] = sub_1000A3A10;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039668, v4, v7);
}

uint64_t sub_1000A3A10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A3D24;
  }
  else
  {
    v5 = v2[18];
    swift_release(v2[19]);
    swift_release(v5);
    v2[22] = v2[2];
    v4 = sub_1000A3A8C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A3A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v2 = *(_QWORD *)(v0 + 48);
      v3 = swift_allocObject(&unk_100169F18, 32, 7);
      *(_QWORD *)(v0 + 184) = v3;
      *(_QWORD *)(v3 + 16) = sub_1000A7948;
      *(_QWORD *)(v3 + 24) = v2;
      v4 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
      swift_retain_n(v2, 2);
      v5 = (_QWORD *)swift_task_alloc(v4);
      *(_QWORD *)(v0 + 192) = v5;
      *v5 = v0;
      v5[1] = sub_1000A3E84;
      return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 24, sub_100039C00, v3, &type metadata for Int);
    }
    v7 = (uint64_t *)(v0 + 104);
    v13 = swift_bridgeObjectRelease(v1);
    v14 = defaultLogger()(v13);
    v9 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v9, v15))
    {
      v12 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noUUIDsToReturn(_:);
      goto LABEL_11;
    }
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v15, "fetchCredentialUUIDsForAuthACL: No UUIDs to return", v11, 2u);
    v12 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noUUIDsToReturn(_:);
  }
  else
  {
    v7 = (uint64_t *)(v0 + 96);
    v8 = defaultLogger()(0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v9, v10))
    {
      v12 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noACLToReturn(_:);
      goto LABEL_11;
    }
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "fetchCredentialUUIDsForAuthACL: No ACL to return", v11, 2u);
    v12 = (unsigned int *)&enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.noACLToReturn(_:);
  }
  swift_slowDealloc(v11, -1, -1);
LABEL_11:
  v16 = *v7;
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 72);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v19, *v12, v21);
  static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)(v19);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc(v19);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void *, _QWORD))(v0 + 8))(&_swiftEmptyArrayStorage, 0);
}

uint64_t sub_1000A3D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v2);
  v7 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v6, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002FLL, 0x8000000100133850, 664);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A3E84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A3FD0;
  }
  else
  {
    v5 = v2[6];
    swift_release(v2[23]);
    swift_release(v5);
    v2[26] = v2[3];
    v4 = sub_1000A3F04;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A3F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for IDCSAnalytics.FetchCredentialUUIDsEventResult.uuidsReturned(_:), v5);
  static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)(v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000A3FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v2);
  swift_bridgeObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v3);
  v8 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v7, 0, v8, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000002FLL, 0x8000000100133850, 664);
  swift_willThrow(v11);
  swift_errorRelease(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A413C(uint64_t a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;

  v38 = a3;
  v6 = sub_100008E84(&qword_100176D48);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  v16 = (void *)sub_100122C60(a1, a2);
  if (!v3)
  {
    v17 = v38;
    v37 = v15;
    if (v16)
    {
      v18 = v16;
      v19 = sub_1000C9428();

      v20 = v17;
      if (v19)
      {
        v21 = v19;
        v22 = v19[2];
        if (v22)
        {
          v34 = v18;
          v35 = 0;
          v33 = swift_bridgeObjectRetain(v21);
          v23 = (_QWORD *)(v33 + 40);
          v24 = &_swiftEmptyArrayStorage;
          v36 = v13;
          do
          {
            v25 = *(v23 - 1);
            v26 = *v23;
            swift_bridgeObjectRetain(*v23);
            UUID.init(uuidString:)(v25, v26);
            swift_bridgeObjectRelease(v26);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
            {
              sub_1000150E8((uint64_t)v8, &qword_100176D48);
            }
            else
            {
              v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
              v28 = v37;
              v27(v37, v8, v9);
              v27(v13, v28, v9);
              if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
                v24 = (_QWORD *)sub_1000A75EC(0, v24[2] + 1, 1, (unint64_t)v24, &qword_100177248, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
              v30 = v24[2];
              v29 = v24[3];
              if (v30 >= v29 >> 1)
                v24 = (_QWORD *)sub_1000A75EC(v29 > 1, v30 + 1, 1, (unint64_t)v24, &qword_100177248, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
              v24[2] = v30 + 1;
              v31 = (unint64_t)v24
                  + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                  + *(_QWORD *)(v10 + 72) * v30;
              v13 = v36;
              v27((char *)v31, v36, v9);
              v20 = v38;
            }
            v23 += 2;
            --v22;
          }
          while (v22);

          swift_bridgeObjectRelease_n(v33, 2);
          *v20 = v24;
        }
        else
        {
          swift_bridgeObjectRelease(v21);

          *v17 = &_swiftEmptyArrayStorage;
        }
      }
      else
      {

        *v17 = 0;
      }
    }
    else
    {
      *v38 = 0;
    }
  }
}

void sub_1000A4434(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_1000A9B1C();
  if (!v1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRelease(v3);
    *a1 = v4;
  }
}

uint64_t sub_1000A4474(uint64_t a1, uint64_t a2)
{
  return sub_1000A44B4(a1, a2, 24, 0xD000000000000016);
}

uint64_t sub_1000A4494(uint64_t a1, uint64_t a2)
{
  return sub_1000A44B4(a1, a2, 29, 0xD00000000000001BLL);
}

uint64_t sub_1000A44B4(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4)
{
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;

  type metadata accessor for SecAccessControl(0);
  v8 = (void *)static SecAccessControlRef.fromData(_:)(a1, a2);
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (v8)
  {
    v9 = v8;
    v10 = SecAccessControlRef.constraintsDescription.getter();
    v12 = v11;

  }
  else
  {
    v12 = (void *)0xE500000000000000;
    v10 = 0x3E6C696E3CLL;
  }
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);

  swift_bridgeObjectRelease(v12);
  return a4;
}

uint64_t sub_1000A45A0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  v3 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A4604, 0, 0);
}

uint64_t sub_1000A4604()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 88);
  v3 = swift_allocObject(&unk_10016A120, 25, 7);
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_10016A148, 32, 7);
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v4 + 16) = &unk_1001772E0;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v1);
  swift_retain(v3);
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 72) = v6;
  v7 = sub_100008E84(&qword_1001772F8);
  *v6 = v0;
  v6[1] = sub_1000A46F4;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 16, &unk_1001772F0, v4, v7);
}

uint64_t sub_1000A46F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000A4794, 0, 0);
  v5 = *(_QWORD *)(v3 + 56);
  v6 = *(_QWORD *)(v3 + 48);
  swift_release(*(_QWORD *)(v3 + 64));
  swift_release(v5);
  v7 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_1000A4794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000022, 0x8000000100133C80, 937);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000A48D0()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;

  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = Data.base16EncodedString()();
  v3 = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(0x8000000100134010);
  v4._countAndFlagsBits = 0x617473657474410ALL;
  v4._object = (void *)0xEF203A206E6F6974;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(0x8000000100134010);
  swift_bridgeObjectRelease(0xEF203A206E6F6974);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = Data.base16EncodedString()();
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(0x8000000100134010);
  v7._countAndFlagsBits = 0x4B63696C6275700ALL;
  v7._object = (void *)0xEF203A2020207965;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(0x8000000100134010);
  swift_bridgeObjectRelease(0xEF203A2020207965);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v8 = Data.base16EncodedString()();
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRetain(0x8000000100134010);
  v10._countAndFlagsBits = 0x6220656C6F68770ALL;
  v10._object = (void *)0xEF203A2020626F6CLL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(0x8000000100134010);
  swift_bridgeObjectRelease(0xEF203A2020626F6CLL);
  return 0xD00000000000001ELL;
}

unint64_t sub_1000A4B3C()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x617473657474410ALL;
  v2._object = (void *)0xEF203A206E6F6974;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(0xEF203A206E6F6974);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3 = Data.base16EncodedString()();
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(0x8000000100133FC0);
  v5._countAndFlagsBits = 0x4B63696C6275700ALL;
  v5._object = (void *)0xEF203A2020207965;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(0x8000000100133FC0);
  swift_bridgeObjectRelease(0xEF203A2020207965);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v6 = Data.base16EncodedString()();
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRetain(0x8000000100133FC0);
  v8._countAndFlagsBits = 0x6220656C6F68770ALL;
  v8._object = (void *)0xEF203A2020626F6CLL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(0x8000000100133FC0);
  swift_bridgeObjectRelease(0xEF203A2020626F6CLL);
  return 0xD00000000000001CLL;
}

uint64_t sub_1000A4D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v5[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A4DD4, 0, 0);
}

uint64_t sub_1000A4DD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1[4];
  v3 = v1[7];
  v4 = v1[5];
  defaultLogger()(a1);
  sub_100005A38(v2, v4);
  swift_bridgeObjectRetain(v3);
  sub_100005A38(v2, v4);
  v5 = swift_bridgeObjectRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v30 = v1[13];
    v31 = v1[12];
    v32 = v1[14];
    v8 = v1[5];
    v27 = v1[7];
    v28 = v1[6];
    v9 = v1[4];
    v10 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v33 = v29;
    *(_DWORD *)v10 = 136315394;
    v11 = Data.base64EncodedString(options:)(0);
    v1[2] = sub_10003FA80(v11._countAndFlagsBits, (unint64_t)v11._object, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v10 + 4);
    swift_bridgeObjectRelease(v11._object);
    sub_100005AB0(v9, v8);
    sub_100005AB0(v9, v8);
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain(v27);
    v1[3] = sub_10003FA80(v28, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v10 + 14);
    swift_bridgeObjectRelease_n(v27, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Trying to persist protected public key: %s for pairingID: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }
  else
  {
    v13 = v1[13];
    v12 = v1[14];
    v14 = v1[12];
    v15 = v1[7];
    v17 = v1[4];
    v16 = v1[5];
    sub_100005AB0(v17, v16);
    sub_100005AB0(v17, v16);
    swift_bridgeObjectRelease_n(v15, 2);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v18 = v1[7];
  v19 = v1[5];
  v20 = v1[6];
  v21 = v1[4];
  v22 = (_QWORD *)swift_allocObject(&unk_10016A288, 48, 7);
  v1[15] = v22;
  v22[2] = v20;
  v22[3] = v18;
  v22[4] = v21;
  v22[5] = v19;
  sub_100005A38(v21, v19);
  v23 = swift_allocObject(&unk_10016A2B0, 32, 7);
  v1[16] = v23;
  *(_QWORD *)(v23 + 16) = sub_1000AA3F4;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_bridgeObjectRetain(v18);
  swift_retain(v22);
  v25 = (_QWORD *)swift_task_alloc(v24);
  v1[17] = v25;
  *v25 = v1;
  v25[1] = sub_1000A50F4;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000A50F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A51A8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 120);
    swift_release(*(_QWORD *)(v2 + 128));
    swift_release(v5);
    v4 = sub_1000A5168;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A5168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A51A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000028, 0x8000000100133F40, 782);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A52F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  Class isa;
  NSString v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  Swift::String v26;
  os_log_t v27;
  uint8_t *v28;
  os_log_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044D18(a2, a3);
  if (!v5)
  {
    v31 = v12;
    v32 = v11;
    v15 = type metadata accessor for StoredTrustKey(0);
    v16 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v15)), "initWithContext:", *(_QWORD *)(a1 + 16));
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "setProtectedPublicKey:", isa);

    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setPairingID:", v18);

    v19 = sub_1000091F8();
    defaultLogger()(v19);
    sub_100005A38(a4, a5);
    v20 = sub_100005A38(a4, a5);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v29 = v21;
      v23 = swift_slowAlloc(12, -1);
      v30 = v16;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v35 = v25;
      *(_DWORD *)v24 = 136315138;
      v28 = v24 + 4;
      v26 = Data.base64EncodedString(options:)(0);
      v33 = sub_10003FA80(v26._countAndFlagsBits, (unint64_t)v26._object, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v28);
      swift_bridgeObjectRelease(v26._object);
      sub_100005AB0(a4, a5);
      sub_100005AB0(a4, a5);
      v27 = v29;
      _os_log_impl((void *)&_mh_execute_header, v29, v22, "Successfully persisted protected public key: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      sub_100005AB0(a4, a5);
      sub_100005AB0(a4, a5);

    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  }
}

uint64_t sub_1000A55BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[12] = v7;
  v3[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A5648, 0, 0);
}

uint64_t sub_1000A5648(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1[6];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v21 = v1[12];
    v22 = v1[11];
    v23 = v1[13];
    v6 = v1[6];
    v7 = v1[5];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v1[4] = sub_10003FA80(v7, v6, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Trying to retrieve persisted protected public key for pairingID: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    v11 = v1[12];
    v10 = v1[13];
    v12 = v1[11];
    swift_bridgeObjectRelease_n(v1[6], 2);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v13 = v1[6];
  v14 = v1[5];
  v15 = swift_allocObject(&unk_10016A238, 32, 7);
  v1[14] = v15;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  v16 = swift_allocObject(&unk_10016A260, 32, 7);
  v1[15] = v16;
  *(_QWORD *)(v16 + 16) = sub_1000AA3B0;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_bridgeObjectRetain(v13);
  swift_retain(v15);
  v18 = (_QWORD *)swift_task_alloc(v17);
  v1[16] = v18;
  v19 = sub_100008E84(&qword_100177008);
  *v18 = v1;
  v18[1] = sub_1000A58B4;
  return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 2, sub_100039AB4, v16, v19);
}

uint64_t sub_1000A58B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000A597C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 112);
    swift_release(*(_QWORD *)(v2 + 120));
    swift_release(v5);
    v4 = sub_1000A5928;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000A5928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t sub_1000A597C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for DIPError.Code.internalError(_:), v6);
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v7, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000023, 0x8000000100130890, 842);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A5ACC(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = (void *)sub_100044820(a1, a2);
  if (!v3)
  {
    v6 = v5;
    if (v5)
    {
      v7 = objc_msgSend(v5, "protectedPublicKey");
      if (v7)
      {
        v8 = v7;
        v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v11 = v10;

LABEL_7:
        *a3 = v9;
        a3[1] = v11;
        return;
      }

    }
    v9 = 0;
    v11 = 0xF000000000000000;
    goto LABEL_7;
  }
}

uint64_t sub_1000A5B64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A5BC4, 0, 0);
}

uint64_t sub_1000A5BC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[3];
  v2 = swift_allocObject(&unk_10016A210, 32, 7);
  v0[7] = v2;
  *(_QWORD *)(v2 + 16) = sub_1000AA374;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain_n(v1, 2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[8] = v4;
  v5 = sub_100008E84(&qword_1001772F8);
  *v4 = v0;
  v4[1] = sub_1000A5C88;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039668, v2, v5);
}

uint64_t sub_1000A5C88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000A5D28, 0, 0);
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 24);
  swift_release(*(_QWORD *)(v3 + 56));
  swift_release(v6);
  v7 = *(_QWORD *)(v3 + 16);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_1000A5D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for DIPError.Code.internalError(_:), v3);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v6, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ELL, 0x8000000100133E00, 953);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A5E64(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v4 + 25) = a4;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v4 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A5ECC, 0, 0);
}

uint64_t sub_1000A5ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_BYTE *)(v0 + 25);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = swift_allocObject(&unk_10016A170, 33, 7);
  *(_QWORD *)(v0 + 80) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v4;
  *(_BYTE *)(v7 + 32) = v5;
  v8 = swift_allocObject(&unk_10016A198, 32, 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = sub_1000AA2C8;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_retain(v4);
  v10(v1, v9, v3);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v7);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 96) = v12;
  *v12 = v0;
  v12[1] = sub_1000A5FF8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 72), sub_100095D3C, v8, &type metadata for BiometricStorage.DBResult);
}

uint64_t sub_1000A5FF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v6 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v7 = sub_1000A6134;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 88));
    swift_release(v8);
    *(_QWORD *)(v2 + 112) = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v2 + 26) = *(_BYTE *)(v2 + 24);
    v7 = sub_1000A60AC;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000A60AC()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 112);
  if (v1)
    v2 = 1;
  else
    v2 = *(_BYTE *)(v0 + 26) == 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 72);
    **(_QWORD **)(v0 + 32) = v1;
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc(dword_100177304);
    *(_QWORD *)(v0 + 120) = v4;
    *v4 = v0;
    v4[1] = sub_1000A6170;
    return sub_1000A6608(*(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_1000A6134()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A6170(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 72));
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    return swift_task_switch(sub_1000A61F4, 0, 0);
  }
}

uint64_t sub_1000A61F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A6234(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  char v17;
  id v18;
  char *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char *v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v47 = a2;
  v45 = a1;
  v46 = a3;
  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v15 = sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v3)
  {
    v16 = v15;
    v17 = v47;
    v41 = v4;
    v42 = v9;
    v43 = v8;
    v44 = 0;
    if (v15)
    {
      v18 = -[NSObject version](v15, "version");
      if ((_DWORD)v18 != 2)
      {
        if ((v17 & 1) == 0)
        {
          v33 = defaultLogger()(v18);
          v34 = Logger.logObject.getter(v33);
          v35 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v34, v35))
          {
            v36 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v36 = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "acl does not contain progenitor key, returning nil", v36, 2u);
            swift_slowDealloc(v36, -1, -1);
            v37 = v16;
          }
          else
          {
            v37 = v34;
            v34 = v16;
          }
          v38 = v46;
          v40 = v42;
          v39 = v43;

          (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v39);
          v31 = 0;
          v32 = 0;
          goto LABEL_16;
        }

        v31 = 0;
        v32 = 1;
LABEL_15:
        v38 = v46;
LABEL_16:
        *(_QWORD *)v38 = v31;
        *(_BYTE *)(v38 + 8) = v32;
        return;
      }
      v19 = *(char **)(v45 + 104);
      v20 = v16;
      v21 = v44;
      v22 = sub_1000A7C08(v16, v19);
      if (v21)
      {

        (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.internalError(_:), v41);
        swift_errorRetain(v21);
        v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v24 = type metadata accessor for DIPError(0);
        v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v24, v25, 0, 0);
        v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100133D60, v21, v7, 0, v23, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000022, 0x8000000100133C80, 918);
        swift_willThrow(v26);
        swift_errorRelease(v21);

        return;
      }
      v31 = v22;
      v44 = 0;

    }
    else
    {
      v27 = defaultLogger()(0);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "no global acl, returning nil attestation", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
      v31 = 0;
    }
    v32 = 0;
    goto LABEL_15;
  }
}

uint64_t sub_1000A6608(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A6690, 0, 0);
}

uint64_t sub_1000A6690(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Migrating progenitor key ACL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[11];
  v6 = v1[12];
  v9 = v1[9];
  v8 = v1[10];
  v10 = v1[7];
  v11 = v1[8];
  v12 = v1[5];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v13 = swift_allocObject(&unk_10016A1C0, 32, 7);
  v1[13] = v13;
  *(_QWORD *)(v13 + 16) = sub_1000AA2E4;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  swift_retain(v12);
  v15(v9, v14, v10);
  v16 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v12);
  v17 = (_QWORD *)swift_task_alloc(v16);
  v1[14] = v17;
  v18 = sub_100008E84(&qword_100177308);
  *v17 = v1;
  v17[1] = sub_1000A681C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 2, v1[9], sub_10003DE8C, v13, v18);
}

uint64_t sub_1000A681C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  v5 = v2[13];
  v6 = v2[9];
  v7 = v2[7];
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v7);
    swift_release(v5);
    v8 = sub_1000A69AC;
  }
  else
  {
    v9 = v2[5];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v7);
    swift_release(v5);
    swift_release(v9);
    v8 = sub_1000A68C4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000A68C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v3;
  v4 = *(_QWORD *)(v0 + 32);
  v5 = sub_10009ED48(v2, v3, v4);
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v6;
  if (v1)
  {
    sub_100005AB0(v2, v3);
    v7 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v5;
    v10 = v6;
    v11 = (_QWORD *)swift_task_alloc(dword_10017726C);
    *(_QWORD *)(v0 + 160) = v11;
    *v11 = v0;
    v11[1] = sub_1000A69F4;
    return sub_10009C8A8(v9, v10, v4, *(_QWORD *)(v0 + 40), 1);
  }
}

uint64_t sub_1000A69AC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A69F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)();

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  *(_QWORD *)(*(_QWORD *)v3 + 168) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_1000A6BB0;
  }
  else
  {
    sub_10000B164(a1, a2);
    v7 = sub_1000A6A74;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000A6A74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 136);
    sub_100005AB0(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    sub_100005AB0(v3, v4);
    v11 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = v2;
    v6 = sub_1000A7C08(v2, *(char **)(*(_QWORD *)(v0 + 48) + 104));
    v8 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    v13 = v6;
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 72);

    sub_100005AB0(v8, v7);
    sub_100005AB0(v10, v9);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(char *))(v0 + 8))(v13);
  }
}

uint64_t sub_1000A6BB0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  sub_100005AB0(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_100005AB0(v1, v2);
  v3 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A6C08(uint64_t a1@<X1>, char **a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  char *v7;
  id v8;
  char *v9;

  v5 = (void *)sub_100122C60(0xD00000000000001ELL, (void *)0x800000010012D7D0);
  if (!v2)
  {
    v6 = v5;
    if (v5)
    {
      v7 = *(char **)(a1 + 104);
      v8 = v5;
      v9 = sub_1000A7C08(v6, v7);

      *a2 = v9;
    }
    else
    {
      *a2 = 0;
    }
  }
}

void sub_1000A6CAC(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Class isa;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v1)
  {
    v8 = v7;
    if (!v7)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v19 = type metadata accessor for DIPError(0);
      v20 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v19, v20, 0, 0);
      v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100133CB0, 0, v6, 0, v18, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ELL, 0x8000000100133CE0, 963);
      swift_willThrow(v21);
      return;
    }
    if (objc_msgSend(v7, "version") == 1)
    {
      v9 = objc_msgSend(v8, "encryptedACL");
      if (v9)
      {
        v10 = v9;
        v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

        v14 = (unint64_t)objc_msgSend(v8, "aclType");
        if ((v14 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
        }
        else
        {
          v15 = v14;
          type metadata accessor for AppleIDVManager(0);
          sub_100112A6C(&v45);
          v16 = v47;
          v17 = v48;
          sub_1000151A4(&v45, v47);
          v34 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)(v11, v13, v16, v17);
          v36 = v35;
          v44 = objc_allocWithZone((Class)DCCredentialAuthACL);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v38 = objc_msgSend(v44, "initWithData:type:", isa, v15);
          sub_100005AB0(v34, v36);

          sub_10000CE40(&v45);
          sub_100005AB0(v11, v13);
          v39 = objc_msgSend(v38, "aclData");
          v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v42 = v41;

          *a1 = v40;
          a1[1] = v42;
          v43 = objc_msgSend(v38, "aclType");

          a1[2] = (uint64_t)v43;
        }
        return;
      }
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v32 = type metadata accessor for DIPError(0);
      v33 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v32, v33, 0, 0);
      v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100133D30, 0, v6, 0, v31, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ELL, 0x8000000100133CE0, 971);
    }
    else
    {
      v45 = 0;
      v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      v22._countAndFlagsBits = 0xD000000000000025;
      v22._object = (void *)0x8000000100133D00;
      String.append(_:)(v22);
      v23 = objc_msgSend(v8, "version");
      if (v23 == 2)
        v24 = 1;
      else
        v24 = 2;
      if (v23 == 1)
        v24 = 0;
      v49 = v24;
      _print_unlocked<A, B>(_:_:)(&v49, &v45, &_s7VersionON, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v25 = v45;
      v26 = v46;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsInvalidACLVersionStored(_:), v3);
      v27 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v28 = type metadata accessor for DIPError(0);
      v29 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v28, v29, 0, 0);
      v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v25, v26, 0, v6, 0, v27, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000001ELL, 0x8000000100133CE0, 966);
    }
    swift_willThrow(v30);

  }
}

uint64_t sub_1000A7234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc(dword_10017561C);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_100016474;
  return sub_10003C330(a2, a4, a5, a6, a3);
}

uint64_t sub_1000A72B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10017563C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10000935C;
  return sub_10003BC6C(a2, a3);
}

uint64_t sub_1000A7304()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10000CE40(v0 + 3);
  sub_10000CE40(v0 + 8);
  swift_release(v0[13]);
  swift_release(v0[14]);
  sub_10000CE40(v0 + 15);
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for BiometricStorage()
{
  return objc_opt_self(_TtC7idcredd16BiometricStorage);
}

uint64_t sub_1000A7370()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A7394(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000A413C(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

char *sub_1000A73AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008E84(&qword_1001752D8);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000A7A28(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1000A74B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008E84(&qword_1001773F0);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000A7B18(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A75C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A75EC(a1, a2, a3, a4, &qword_1001772B8, type metadata accessor for ElementFallback);
}

uint64_t sub_1000A75D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A75EC(a1, a2, a3, a4, &qword_100175C68, type metadata accessor for CredentialElement);
}

uint64_t sub_1000A75EC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100008E84(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000A9A04(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000A77F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A75EC(a1, a2, a3, a4, &qword_1001772B0, type metadata accessor for PresentmentProposal);
}

uint64_t sub_1000A780C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000A75EC(a1, a2, a3, a4, &qword_100177310, (uint64_t (*)(_QWORD))&type metadata accessor for AnyCodable);
}

_QWORD *sub_1000A7820(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100008E84(&qword_100177260);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000A9DB8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

void sub_1000A7948(_QWORD *a1@<X8>)
{
  sub_1000A4434(a1);
}

uint64_t sub_1000A7960(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v4 = *a2;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_1000A79D4;
  return v7(v3 + 32, v4);
}

uint64_t sub_1000A79D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 24);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    **(_BYTE **)(v2 + 16) = *(_BYTE *)(v2 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000A7A28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A7B18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000A7C08(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_9;
  v9 = objc_msgSend(a1, "progenitorKey");
  if (!v9)
    goto LABEL_9;
  v10 = v9;
  v11 = objc_msgSend(v9, "identifier");
  if (!v11)
  {

LABEL_9:
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.idcsMissingProgenitorKeyInAuthACL(_:), v5);
    v25 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100133960, 0, v8, 0, v25, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000022, 0x8000000100133990, 1015);
    swift_willThrow(v28);
    return v8;
  }
  v12 = v11;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = objc_msgSend(v10, "keyBlob");
  if (!v15)
  {

    swift_bridgeObjectRelease(v14);
    goto LABEL_9;
  }
  v16 = v15;
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  v20 = objc_msgSend(v10, "publicKeyIdentifier");
  if (v20)
  {
    v21 = v20;
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0xF000000000000000;
  }
  v8 = a2;
  v30 = sub_100100EB4(v32, v14, v17, v19, v22, v24);
  if (!v2)
    v8 = (char *)v30;
  sub_10000B164(v22, v24);
  sub_100005AB0(v17, v19);

  swift_bridgeObjectRelease(v14);
  return v8;
}

uint64_t sub_1000A7ECC(void *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  uint8_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  unint64_t v47;
  unint64_t v48;
  char v49[8];

  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v43 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v18 = objc_msgSend(a1, "version");
  if ((_DWORD)v18 == 2)
  {
    v19 = sub_1000A7C08(a1, a2);
    if (v2)
    {
      v43 = 0;
      v47 = 0;
      v48 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v48);
      v47 = 0xD000000000000024;
      v48 = 0x8000000100133A40;
      swift_getErrorValue(v2, v49, v46);
      v22._countAndFlagsBits = Error.localizedDescription.getter(v46[1], v46[2]);
      object = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object);
      v24 = v47;
      v25 = v48;
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.idcsProgenitorKeyDeletionError(_:), v5);
      v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v27 = type metadata accessor for DIPError(0);
      v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v29 = swift_allocError(v27, v28, 0, 0);
      v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v24, v25, 0, v8, 0, v26, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000030, 0x8000000100133A70, 1032);
      defaultLogger()(v30);
      DIPRecordError(_:message:log:)(v29, 0, 0xE000000000000000, v12);
      swift_errorRelease(v2);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
      return swift_errorRelease(v29);
    }
    else
    {
      v43 = v19;
      v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob];
      v20 = *(_QWORD *)&v19[OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8];
      sub_100005A38(v21, v20);
      sub_1001018B0(v21, v20);
      v36 = sub_100005AB0(v21, v20);
      v37 = defaultLogger()(v36);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.info.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = v43;
      if (v40)
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "deleted progenitor key", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
        swift_release(v41);

      }
      else
      {

        swift_release(v41);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v17, v45);
    }
  }
  else
  {
    v32 = defaultLogger()(v18);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "no progenitor key to delete", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v15, v45);
  }
}

uint64_t sub_1000A8304(char *a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v67 = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v71 = *(_QWORD **)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v66 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v62 - v14;
  v16 = __chkstk_darwin(v13);
  v64 = (char *)&v62 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v62 - v19;
  defaultLogger()(v18);
  v21 = swift_bridgeObjectRetain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v65 = v10;
    v24 = swift_slowAlloc(12, -1);
    v62 = a3;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v63 = v15;
    v68 = a1;
    v27 = v26;
    v75 = v26;
    *(_DWORD *)v25 = 136315138;
    swift_bridgeObjectRetain(a2);
    v73 = sub_10003FA80((uint64_t)v68, (unint64_t)a2, &v75);
    v10 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v25 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "BiometricStorage deleteAuthACL with identifier %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v28 = v27;
    a1 = v68;
    v15 = v63;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v29 = (void (*)(char *, uint64_t))v71[1];
  v29(v20, v10);
  v30 = v72;
  v31 = (_QWORD *)sub_100122C60((uint64_t)a1, a2);
  if (v30)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v9, enum case for DIPError.Code.internalError(_:), v70);
    swift_errorRetain(v30);
    v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v30, v9, 0, v32, 0xD000000000000054, 0x80000001001337F0, 0xD000000000000031, 0x8000000100133A00, 533);
    swift_willThrow(v35);
    swift_errorRelease(v30);
    return v15 & 1;
  }
  v37 = v31;
  if (!v31)
  {
    v68 = a1;
    v38 = v66;
    defaultLogger()(0);
    v39 = swift_bridgeObjectRetain_n(a2, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v65 = v10;
      v44 = v43;
      v75 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain(a2);
      v73 = sub_10003FA80((uint64_t)v68, (unint64_t)a2, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v42 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No acl found with identifier %s", v42, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      v29(v66, v65);
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      v29(v38, v10);
    }
LABEL_12:
    LOBYTE(v15) = 0;
    return v15 & 1;
  }
  v72 = v29;
  sub_1000A7ECC(v31, v67);
  v71 = v37;
  v45 = sub_10012315C(a1, (unint64_t)a2);
  v68 = a1;
  if ((v45 & 1) == 0)
  {
    defaultLogger()(v45);
    v54 = swift_bridgeObjectRetain_n(a2, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v65 = v10;
      v59 = v58;
      v75 = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain(a2);
      v73 = sub_10003FA80((uint64_t)v68, (unint64_t)a2, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v57 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "No auth acl exists with identifier %s so nothing to delete", v57, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      v60 = v15;
      v61 = v65;
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      v60 = v15;
      v61 = v10;
    }
    v72(v60, v61);
    goto LABEL_12;
  }
  v46 = v64;
  defaultLogger()(v45);
  v47 = swift_bridgeObjectRetain_n(a2, 2);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = v46;
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    v65 = v10;
    v53 = v52;
    v75 = v52;
    *(_DWORD *)v51 = 136315138;
    swift_bridgeObjectRetain(a2);
    v73 = sub_10003FA80((uint64_t)v68, (unint64_t)a2, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v51 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Auth ACL %s was deleted", v51, 0xCu);
    LOBYTE(v15) = 1;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);

    v72(v50, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v72(v46, v10);
    LOBYTE(v15) = 1;
  }
  return v15 & 1;
}

void sub_1000A8B1C(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint8_t *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t);
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v125 = a1;
  v11 = type metadata accessor for DIPError.Code(0);
  v130 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v132 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Logger(0);
  v128 = *(_QWORD *)(v133 - 8);
  v13 = __chkstk_darwin(v133);
  v123 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v124 = (char *)&v112 - v16;
  v17 = __chkstk_darwin(v15);
  v119 = (char *)&v112 - v18;
  v19 = __chkstk_darwin(v17);
  v126 = (uint64_t)&v112 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v112 - v22;
  defaultLogger()(v21);
  sub_100005A38(a3, a4);
  v24 = a2;
  sub_100005A38(a3, a4);
  v25 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter();
  v28 = v27;
  v29 = os_log_type_enabled(v26, v27);
  v121 = a5;
  v122 = a6;
  v120 = (uint64_t)v25;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v127 = v11;
    v31 = v30;
    v118 = swift_slowAlloc(64, -1);
    v136 = v118;
    *(_DWORD *)v31 = 136315394;
    LODWORD(v117) = v28;
    v32 = Data.base16EncodedString()();
    v134 = sub_10003FA80(v32._countAndFlagsBits, (unint64_t)v32._object, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v31 + 4);
    swift_bridgeObjectRelease(v32._object);
    sub_100005AB0(a3, a4);
    v33 = sub_100005AB0(a3, a4);
    *(_WORD *)(v31 + 12) = 2080;
    v34 = SecAccessControlRef.constraintsDescription.getter(v33);
    v36 = v35;
    v134 = sub_10003FA80(v34, v35, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v31 + 14);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v117, "New acl is %s = %s", (uint8_t *)v31, 0x16u);
    v37 = v118;
    swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v31;
    v11 = v127;
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {
    sub_100005AB0(a3, a4);
    sub_100005AB0(a3, a4);

  }
  v128 = *(_QWORD *)(v128 + 8);
  ((void (*)(char *, uint64_t))v128)(v23, v133);
  v39 = a3;
  v40 = v129;
  v41 = v131 + 3;
  v42 = v131[6];
  v43 = v131[7];
  sub_1000151A4(v131 + 3, v42);
  v44 = dispatch thunk of AppleIDVManaging.getUUIDsFromACL(_:)(v39, a4, v42, v43);
  v45 = v40;
  if (v40)
  {
    v46 = v130;
LABEL_24:
    v81 = *(void (**)(char *, _QWORD, uint64_t))(v46 + 104);
    v82 = v132;
    v81(v132, enum case for DIPError.Code.internalError(_:), v11);
    swift_errorRetain(v45);
    v83 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v84 = type metadata accessor for DIPError(0);
    v85 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v84, v85, 0, 0);
    v86 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v45, v82, 0, v83, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000005DLL, 0x8000000100134250, 386);
    swift_willThrow(v86);
    swift_errorRelease(v45);
    return;
  }
  v47 = v44;
  v116 = v41;
  v117 = v39;
  v118 = a4;
  v127 = v11;
  v48 = v126;
  defaultLogger()(v44);
  v49 = swift_bridgeObjectRetain_n(v47, 2);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  v52 = os_log_type_enabled(v50, v51);
  v129 = 0;
  if (v52)
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v115 = swift_slowAlloc(32, -1);
    v136 = v115;
    *(_DWORD *)v53 = 136315138;
    if (v47)
      v54 = (_QWORD *)v47;
    else
      v54 = _swiftEmptyArrayStorage;
    v114 = v53 + 4;
    swift_bridgeObjectRetain(v47);
    v55 = Array.description.getter(v54, &type metadata for String);
    v57 = v56;
    swift_bridgeObjectRelease(v54);
    v134 = sub_10003FA80(v55, v57, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v114);
    swift_bridgeObjectRelease_n(v47, 2);
    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "New ACL uuids are %s", v53, 0xCu);
    v58 = v115;
    swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    v59 = v133;
    ((void (*)(uint64_t, uint64_t))v128)(v126, v133);
    v11 = v127;
    v60 = v125;
    if (!v47)
      goto LABEL_16;
  }
  else
  {

    swift_bridgeObjectRelease_n(v47, 2);
    v59 = v133;
    ((void (*)(uint64_t, uint64_t))v128)(v48, v133);
    v11 = v127;
    v60 = v125;
    if (!v47)
      goto LABEL_16;
  }
  v61 = v129;
  sub_1000C8ED4(v47);
  v129 = v61;
  if (v61)
  {
    swift_bridgeObjectRelease(v47);
    v45 = v129;
    v46 = v130;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease(v47);
LABEL_16:
  v46 = v130;
  v62 = objc_msgSend(v60, "progenitorKey");
  if (!v62)
  {
LABEL_23:
    v76 = v132;
    (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v132, enum case for DIPError.Code.idcsMissingProgenitorKeyInAuthACL(_:), v11);
    v77 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v78 = type metadata accessor for DIPError(0);
    v79 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v45 = swift_allocError(v78, v79, 0, 0);
    v80 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100133960, 0, v76, 0, v77, 0xD000000000000054, 0x80000001001337F0, 0xD00000000000005DLL, 0x8000000100134250, 359);
    swift_willThrow(v80);
    goto LABEL_24;
  }
  v63 = v62;
  v64 = objc_msgSend(v62, "identifier");
  if (!v64)
  {

    goto LABEL_23;
  }
  v65 = v64;
  v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v67 = v66;

  v68 = objc_msgSend(v63, "keyBlob");
  if (!v68)
  {

    swift_bridgeObjectRelease(v67);
    goto LABEL_23;
  }
  v69 = v68;
  v114 = v63;
  v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v113 = v71;

  v72 = objc_msgSend(v125, "encryptedACL");
  v126 = v67;
  v112 = v70;
  if (v72)
  {
    v73 = v72;
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v75 = v74;

    __asm { BR              X10 }
  }
  v87 = defaultLogger()(0);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "skip manipulating legacy sidv encryptedACL because there isn't one", v90, 2u);
    swift_slowDealloc(v90, -1, -1);
  }

  v91 = v123;
  v92 = ((uint64_t (*)(char *, unint64_t))v128)(v124, v59);
  defaultLogger()(v92);
  v93 = v126;
  v94 = swift_bridgeObjectRetain_n(v126, 2);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    v136 = v98;
    *(_DWORD *)v97 = 136315138;
    swift_bridgeObjectRetain(v93);
    v134 = sub_10003FA80(v115, v93, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v97 + 4);
    swift_bridgeObjectRelease_n(v93, 3);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Updating acl for progenitor key %s", v97, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);

    v99 = v123;
    v100 = v133;
  }
  else
  {

    swift_bridgeObjectRelease_n(v93, 2);
    v99 = v91;
    v100 = v59;
  }
  ((void (*)(char *, unint64_t))v128)(v99, v100);
  v101 = objc_msgSend(v114, "publicKeyIdentifier");
  if (v101)
  {
    v102 = v101;
    v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v101);
    v133 = v104;

  }
  else
  {
    v103 = 0;
    v133 = 0xF000000000000000;
  }
  v105 = v126;
  v106 = v112;
  v107 = v129;
  v108 = sub_100100EB4(v115, v126, v112, v113, v103, v133);
  v45 = v107;
  if (v107)
  {
    sub_10000B164(v103, v133);
    sub_100005AB0(v106, v113);

    swift_bridgeObjectRelease(v105);
    goto LABEL_24;
  }
  v109 = v108;
  swift_bridgeObjectRelease(v105);
  sub_10000B164(v103, v133);
  v133 = v109;
  v110 = sub_100101438(v109, v120, v121, v122);
  v111 = v114;
  sub_1000C8EB8(v110);
  swift_release(v133);
  swift_release(v110);
  sub_100005AB0(v112, v113);

}

uint64_t sub_1000A9A04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1000A9B1C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;

  v1 = sub_10011AA9C();
  if (!v0)
  {
    v2 = v1;
    if (v1 >> 62)
      goto LABEL_22;
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v20))
    {
      v24 = v2 & 0xC000000000000001;
      v22 = v3;
      v23 = (char *)&_swiftEmptyArrayStorage;
      v4 = 4;
      v21 = v2;
      while (1)
      {
        v5 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v8 = (void *)sub_1000C70BC();
        v9 = objc_msgSend(v6, "credentialIdentifier");
        if (v9)
        {
          v10 = v9;
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
          v13 = v12;

          v14 = objc_msgSend(v8, "options");
          v15 = objc_msgSend(v14, "presentmentAuthPolicy");

          if (v15 == (id)2)
          {
            v16 = v23;
            if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
              v16 = sub_1000A73AC(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
            v18 = *((_QWORD *)v16 + 2);
            v17 = *((_QWORD *)v16 + 3);
            v23 = v16;
            if (v18 >= v17 >> 1)
              v23 = sub_1000A73AC((char *)(v17 > 1), v18 + 1, 1, v16);
            *((_QWORD *)v23 + 2) = v18 + 1;
            v19 = &v23[16 * v18];
            *((_QWORD *)v19 + 4) = v11;
            *((_QWORD *)v19 + 5) = v13;
          }
          else
          {
            swift_bridgeObjectRelease(v13);
          }
          v2 = v21;
          v3 = v22;
        }
        else
        {

        }
        ++v4;
        if (v7 == v3)
          goto LABEL_26;
      }
      __break(1u);
LABEL_22:
      if (v2 < 0)
        v20 = v2;
      else
        v20 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
    }
LABEL_26:
    swift_bridgeObjectRelease_n(v2, 2);
  }
}

uint64_t sub_1000A9D70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000A9D9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1000A2FBC(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1000A9DB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9EA8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_100005AB0(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1000A9EDC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v6 = (void *)a1[6];
  v5 = a1[7];
  sub_100005AB0(a1[1], a1[2]);

  sub_100005AB0(v3, v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000A9F3C()
{
  return sub_1000AA5F4(32);
}

uint64_t sub_1000A9F44()
{
  uint64_t v0;

  return sub_10009E6BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A9F5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100005AB0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));

  sub_100005AB0(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 128));
  return swift_deallocObject(v0, 136, 7);
}

void sub_1000A9FC8()
{
  uint64_t v0;

  sub_10009E734(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(void **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), (objc_class *)(v0 + 48), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

_QWORD *sub_1000A9FF4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v2 = (void *)a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v6 = (void *)a1[6];
  v5 = a1[7];
  sub_100005A38(a1[1], a1[2]);
  v7 = v2;
  sub_100005A38(v3, v4);
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  return a1;
}

uint64_t sub_1000AA054()
{
  return sub_10009F478();
}

uint64_t sub_1000AA060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100177280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA0A8()
{
  _QWORD *v0;
  unint64_t v1;

  swift_release(v0[2]);
  v1 = v0[4];
  if (v1 >> 60 != 15)
    sub_100005AB0(v0[3], v1);
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000AA0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_BYTE *)(v2 + 40);
  v9 = (_QWORD *)swift_task_alloc(dword_10017729C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100016474;
  v10 = (_QWORD *)swift_task_alloc(dword_10017561C);
  v9[2] = v10;
  *v10 = v9;
  v10[1] = sub_100016474;
  return sub_10003C330(a2, v6, v7, v8, v5);
}

void sub_1000AA17C(uint64_t a1)
{
  unint64_t v1;

  sub_1000A190C(a1, v1);
}

void sub_1000AA194(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000A3740(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000AA1AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000AA1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_BYTE *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1001772DC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100016474;
  return sub_1000A5E64(a1, a2, v6, v7);
}

uint64_t sub_1000AA240(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001772EC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001772E8 + dword_1001772E8))(a1, a2, v6);
}

uint64_t sub_1000AA2C0()
{
  return sub_1000AA5F4(33);
}

void sub_1000AA2C8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000A6234(*(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

void sub_1000AA2E4(uint64_t *a1@<X8>)
{
  sub_1000A6CAC(a1);
}

uint64_t sub_1000AA2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;

  v5 = (_QWORD *)swift_task_alloc(dword_100177324);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100016474;
  v6 = (_QWORD *)swift_task_alloc(dword_10017563C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_10000935C;
  return sub_10003BC6C(a2, v2);
}

void sub_1000AA374(char **a1@<X8>)
{
  uint64_t v1;

  sub_1000A6C08(v1, a1);
}

uint64_t sub_1000AA38C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000AA3B0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000A5ACC(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000AA3C8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_100005AB0(v0[4], v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000AA3F4(uint64_t a1)
{
  uint64_t v1;

  sub_1000A52F8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000AA410()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100005AB0(v0[3], v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AA43C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = v2[3];
  v8 = v2[4];
  v7 = v2[5];
  v9 = (_QWORD *)swift_task_alloc(dword_100177384);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000935C;
  v9[2] = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_10017726C);
  v9[3] = v10;
  *v10 = v9;
  v10[1] = sub_10009C80C;
  return sub_10009C8A8(v6, v8, v7, a2, 0);
}

unint64_t sub_1000AA4E4()
{
  return sub_1000A4B3C();
}

unint64_t sub_1000AA4F4()
{
  return sub_1000A48D0();
}

uint64_t sub_1000AA508(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001773B4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100016474;
  return sub_1000A24C8(a1, a2, v2);
}

uint64_t sub_1000AA56C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001773C4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_1001773C0 + dword_1001773C0))(a1, a2, v6);
}

uint64_t sub_1000AA5EC()
{
  return sub_1000AA5F4(32);
}

uint64_t sub_1000AA5F4(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

id sub_1000AA62C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000A2854(*(_QWORD *)(v1 + 24), a1);
}

_QWORD *sub_1000AA644@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_10006EC74(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000AA65C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100005AB0(v0[3], v0[4]);
  sub_100005AB0(v0[5], v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AA690(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc(dword_1001773DC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100016474;
  return sub_10009F53C(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AA720()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  sub_100005AB0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_100005AB0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_100005AB0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));

  sub_100005AB0(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

void sub_1000AA784()
{
  uint64_t v0;

  sub_10009FDA4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v0 + 64);
}

uint64_t initializeBufferWithCopyOfBuffer for BiometricStorage.DBResult(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t destroy for BiometricStorage.DBResult(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for BiometricStorage.DBResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t initializeWithTake for BiometricStorage.DBResult(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for BiometricStorage.DBResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BiometricStorage.DBResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BiometricStorage.DBResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BiometricStorage.DBResult()
{
  return &type metadata for BiometricStorage.DBResult;
}

uint64_t *sub_1000AA944(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for EncryptedAuthACL(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100005AB0(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for EncryptedAuthACL(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005AB0(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EncryptedAuthACL(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EncryptedAuthACL(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedAuthACL()
{
  return &type metadata for EncryptedAuthACL;
}

_QWORD *sub_1000AAB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v33 = a3;
  v5 = type metadata accessor for ISO18013KnownNamespaces(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  v34 = _swiftEmptyArrayStorage;
  v12 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v14 = v13((char *)&v33 - v10, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v5);
  v15 = ISO18013KnownNamespaces.rawValue.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v11, v5);
  if (*(_QWORD *)(a1 + 16) && (v19 = sub_1000FBC04(v15, v17), (v20 & 1) != 0))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v17);
    v22 = v13(v9, v12, v5);
    v23 = ISO18013KnownNamespaces.rawValue.getter(v22);
    v25 = v24;
    v18(v9, v5);
    if (*(_QWORD *)(a2 + 16) && (v26 = sub_1000FBC04(v23, v25), (v27 & 1) != 0))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v26);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v25);
      if (v33 == 1)
      {
        v29 = sub_1000AD22C(v21, v28);
        goto LABEL_13;
      }
      if (v33 == 2)
      {
        v29 = sub_1000AAF24(v21, v28);
LABEL_13:
        v32 = (uint64_t)v29;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v21);
        sub_1000AF754(v32);
        return v34;
      }
      swift_bridgeObjectRelease(v28);
      v30 = v21;
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v30 = v25;
    }
  }
  else
  {
    v30 = v17;
  }
  swift_bridgeObjectRelease(v30);
  return v34;
}

uint64_t sub_1000AAD28(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v2 << 6); ; i = __clz(__rbit64(v14)) + (v2 << 6))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v12 = *v10;
    v11 = v10[1];
    swift_bridgeObjectRetain(v11);
    if ((static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(v12, v11) & 1) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1000557E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        result = sub_1000557E4(v16 > 1, v17 + 1, 1);
        v18 = v17 + 1;
      }
      _swiftEmptyArrayStorage[2] = v18;
      v19 = (char *)&_swiftEmptyArrayStorage[2 * v17];
      *((_QWORD *)v19 + 4) = v12;
      *((_QWORD *)v19 + 5) = v11;
      if (v6)
        goto LABEL_4;
    }
    else
    {
      result = swift_bridgeObjectRelease(v11);
      if (v6)
        goto LABEL_4;
    }
LABEL_7:
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v7)
      goto LABEL_29;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_29;
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          goto LABEL_29;
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            goto LABEL_29;
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v7)
  {
LABEL_29:
    swift_release(v1);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      goto LABEL_29;
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *sub_1000AAF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *result;
  uint64_t v41;
  __n128 v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  NSObject *v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  _QWORD *v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  char *v174;
  char *v175;
  __n128 v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  unsigned int v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;

  v182 = type metadata accessor for ISO18013KnownNamespaces(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001773F8);
  __chkstk_darwin(v5);
  v192 = (char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IDCSAnalytics.NamespaceElement(0);
  v190 = *(_QWORD *)(v7 - 8);
  v191 = v7;
  __chkstk_darwin(v7);
  v189 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm(0);
  v204 = *(_QWORD *)(v9 - 8);
  v205 = v9;
  __chkstk_darwin(v9);
  v188 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ElementFallback(0);
  v197 = *(_QWORD *)(v11 - 8);
  v198 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v187 = (char **)((char *)&v164 - v15);
  v16 = sub_100008E84(&qword_100177400);
  v17 = __chkstk_darwin(v16);
  v186 = (uint64_t)&v164 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v164 - v19);
  v21 = type metadata accessor for AnyCodable(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v170 = (char *)&v164 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008E84(&qword_100175320);
  __chkstk_darwin(v26);
  v194 = (uint64_t *)((char *)&v164 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v196 = sub_100008E84(&qword_100175348);
  v193 = *(_QWORD *)(v196 - 8);
  v28 = __chkstk_darwin(v196);
  v183 = (uint64_t *)((char *)&v164 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  v31 = (char *)&v164 - v30;
  v206 = type metadata accessor for Logger(0);
  v195 = *(_QWORD *)(v206 - 8);
  v32 = __chkstk_darwin(v206);
  v167 = (char *)&v164 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v203 = (char *)&v164 - v35;
  __chkstk_darwin(v34);
  v37 = (char *)&v164 - v36;
  v38 = sub_100008E84(&qword_1001752E0);
  __chkstk_darwin(v38);
  v207 = (char *)&v164 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v210 = _swiftEmptyArrayStorage;
  v41 = *(_QWORD *)(a1 + 16);
  if (!v41)
    return result;
  v169 = v31;
  v164 = v24;
  v165 = v22;
  v166 = v21;
  v174 = v14;
  v184 = enum case for IDCSAnalytics.ElementFallbackAlgorithm.ageOverToNearestAgeOver(_:);
  v173 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  v42 = swift_bridgeObjectRetain(a1);
  v168 = a1;
  v43 = (unint64_t *)(a1 + 40);
  v42.n128_u64[0] = 136315138;
  v176 = v42;
  v175 = (char *)&type metadata for Any + 8;
  v208 = a2;
  v202 = v20;
  v185 = v37;
  v44 = (uint64_t)v207;
  v45 = a2;
  while (1)
  {
    v47 = *(v43 - 1);
    v46 = *v43;
    swift_bridgeObjectRetain(*v43);
    if ((static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(v47, v46) & 1) != 0)
    {
      if (*(_QWORD *)(v45 + 16))
      {
        swift_bridgeObjectRetain(v46);
        v48 = sub_1000FBC04(v47, v46);
        if ((v49 & 1) != 0)
        {
          v50 = v48;
          v51 = *(_QWORD *)(v208 + 56);
          v52 = v47;
          v53 = sub_100008E84(&qword_1001752E8);
          v54 = *(_QWORD *)(v53 - 8);
          v55 = v51 + *(_QWORD *)(v54 + 72) * v50;
          v44 = (uint64_t)v207;
          v45 = v208;
          (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v207, v55, v53);
          v56 = v53;
          v47 = v52;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v44, 0, 1, v56);
        }
        else
        {
          v58 = sub_100008E84(&qword_1001752E8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v44, 1, 1, v58);
        }
        swift_bridgeObjectRelease(v46);
        v59 = sub_100008E84(&qword_1001752E8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v44, 1, v59) != 1)
        {
          swift_bridgeObjectRelease(v46);
          sub_1000150E8(v44, &qword_1001752E0);
          goto LABEL_4;
        }
      }
      else
      {
        v57 = sub_100008E84(&qword_1001752E8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v44, 1, 1, v57);
      }
      sub_1000150E8(v44, &qword_1001752E0);
      v60 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(v47, v46);
      if ((v61 & 1) == 0)
        break;
    }
    swift_bridgeObjectRelease(v46);
LABEL_4:
    v43 += 2;
    if (!--v41)
    {
      swift_bridgeObjectRelease(v168);
      return v210;
    }
  }
  v200 = v60;
  defaultLogger()(v60);
  v62 = swift_bridgeObjectRetain_n(v46, 2);
  v63 = Logger.logObject.getter(v62);
  v64 = v37;
  v65 = static os_log_type_t.debug.getter();
  v66 = os_log_type_enabled(v63, v65);
  v201 = v47;
  if (v66)
  {
    v67 = swift_slowAlloc(12, -1);
    v68 = v45;
    v69 = swift_slowAlloc(32, -1);
    v209 = v69;
    *(_DWORD *)v67 = v176.n128_u32[0];
    swift_bridgeObjectRetain(v46);
    *(_QWORD *)(v67 + 4) = sub_10003FA80(v47, v46, &v209);
    swift_bridgeObjectRelease_n(v46, 3);
    _os_log_impl((void *)&_mh_execute_header, v63, v65, "Falling back from %s to nearest age_over_nn", (uint8_t *)v67, 0xCu);
    swift_arrayDestroy(v69, 1, v175);
    v70 = v69;
    v45 = v68;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v67, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v46, 2);
  }
  v199 = *(void (**)(char *, uint64_t))(v195 + 8);
  v199(v64, v206);
  result = (_QWORD *)sub_1000ED080(v45);
  if ((v72 & 1) != 0)
    goto LABEL_48;
  if (*(_DWORD *)(v45 + 36) == v71)
  {
    if (result == (_QWORD *)(1 << *(_BYTE *)(v45 + 32)))
    {
      v73 = (uint64_t)v194;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v193 + 56))(v194, 1, 1, v196);
      goto LABEL_22;
    }
    v74 = v196;
    v75 = v183;
    v76 = (uint64_t)v183 + *(int *)(v196 + 48);
    v77 = sub_100074618(v76, (uint64_t)result, v71, 0, v45);
    v79 = v78;
    *v75 = v77;
    v75[1] = v78;
    v80 = v194;
    *v194 = v77;
    v80[1] = v78;
    v81 = v45;
    v82 = (char *)v80 + *(int *)(v74 + 48);
    v83 = sub_100008E84(&qword_1001752E8);
    v178 = *(_QWORD *)(v83 - 8);
    v84 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
    v85 = v82;
    v45 = v81;
    v86 = v76;
    v73 = (uint64_t)v80;
    v179 = v83;
    v177 = v84;
    ((void (*)(char *, uint64_t))v84)(v85, v86);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v79);
    sub_1000150E8((uint64_t)v75, &qword_100175348);
    v87 = v193;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v193 + 56))(v73, 0, 1, v74);
    swift_bridgeObjectRelease(v81);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v73, 1, v74) == 1)
    {
LABEL_22:
      v88 = sub_1000150E8(v73, &qword_100175320);
      goto LABEL_34;
    }
    v89 = v196;
    v90 = *(int *)(v196 + 48);
    v91 = (char *)v73;
    v92 = v169;
    v93 = (char *)v169 + v90;
    v95 = *(_QWORD *)v91;
    v94 = *((_QWORD *)v91 + 1);
    *v169 = *(_QWORD *)v91;
    v92[1] = v94;
    v96 = v178;
    v97 = v179;
    (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v93, &v91[v90], v179);
    v98 = v183;
    v99 = (char *)v183 + *(int *)(v89 + 48);
    *v183 = v95;
    v98[1] = v94;
    v177(v99, v93, v97);
    v100 = v170;
    CBOREncodedCBOR.value.getter(v97);
    v101 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v99, v97);
    if (ISO18013IssuerSignedItem.digestID.getter(v101))
    {
      (*(void (**)(char *, uint64_t))(v171 + 8))(v100, v172);
      v102 = v92;
LABEL_33:
      v88 = sub_1000150E8((uint64_t)v102, &qword_100175348);
      v45 = v208;
LABEL_34:
      v116 = v201;
      v115 = v202;
      goto LABEL_35;
    }
    v103 = ISO18013IssuerSignedItem.random.getter();
    v105 = v104;
    sub_1001044DC(v103, v104);
    v107 = v106;
    v108 = sub_100005AB0(v103, v105);
    if ((v107 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v171 + 8))(v100, v172);
      v102 = v169;
      goto LABEL_33;
    }
    v109 = v164;
    ISO18013IssuerSignedItem.elementValue.getter(v108);
    v110 = v208;
    v111 = v100;
    if (qword_1001743F8 != -1)
      swift_once(&qword_1001743F8, sub_100073610);
    v112 = v166;
    v113 = sub_100075EC8(v166, (uint64_t)qword_100178D70);
    v114 = static AnyCodable.== infix(_:_:)(v109, v113);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v109, v112);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v111, v172);
    v88 = sub_1000150E8((uint64_t)v169, &qword_100175348);
    v116 = v201;
    v115 = v202;
    v45 = v110;
    if ((v114 & 1) != 0)
    {
      v117 = defaultLogger()(v88);
      v118 = Logger.logObject.getter(v117);
      v119 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v118, v119))
      {
        v120 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v120 = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "Element values are not available, falling back to nearby elements", v120, 2u);
        swift_slowDealloc(v120, -1, -1);
      }

      v199(v167, v206);
      v121 = sub_1000AE754(v110, v116, v46, v200);
      swift_bridgeObjectRelease(v46);
      sub_1000AF754((uint64_t)v121);
    }
    else
    {
LABEL_35:
      v122 = defaultLogger()(v88);
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v125 = 0;
        _os_log_impl((void *)&_mh_execute_header, v123, v124, "Elements are available, performing ISO fallback", v125, 2u);
        swift_slowDealloc(v125, -1, -1);
      }

      v199(v203, v206);
      sub_1000ABFBC(v45, v116, v46, v200, v115);
      v126 = v186;
      sub_10002E908((uint64_t)v115, v186, &qword_100177400);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v126, 1, v198) == 1)
      {
        sub_1000150E8(v126, &qword_100177400);
        v200 = type metadata accessor for IDCSAnalytics(0);
        v127 = v188;
        (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v188, v184, v205);
        v128 = v181;
        v129 = v180;
        v130 = v182;
        v131 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, v173, v182);
        v132 = ISO18013KnownNamespaces.rawValue.getter(v131);
        v134 = v133;
        (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v130);
        v135 = v189;
        IDCSAnalytics.NamespaceElement.init(namespace:element:)(v132, v134, v116, v46, v136);
        v138 = v190;
        v137 = v191;
        v139 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56))(v192, 1, 1, v191);
        static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)(v127, v135, v139);
        sub_1000150E8(v139, &qword_1001773F8);
        v140 = *(void (**)(char *, uint64_t))(v138 + 8);
        v45 = v208;
        v140(v135, v137);
        (*(void (**)(char *, uint64_t))(v204 + 8))(v127, v205);
        sub_1000150E8((uint64_t)v202, &qword_100177400);
      }
      else
      {
        swift_bridgeObjectRelease(v46);
        v141 = v126;
        v142 = v187;
        sub_100041230(v141, (uint64_t)v187, type metadata accessor for ElementFallback);
        v143 = (uint64_t)v174;
        sub_10006BC40((uint64_t)v142, (uint64_t)v174, type metadata accessor for ElementFallback);
        v144 = (unint64_t)v210;
        if ((swift_isUniquelyReferenced_nonNull_native(v210) & 1) == 0)
          v144 = sub_1000A75C4(0, *(_QWORD *)(v144 + 16) + 1, 1, v144);
        v146 = *(_QWORD *)(v144 + 16);
        v145 = *(_QWORD *)(v144 + 24);
        if (v146 >= v145 >> 1)
          v144 = sub_1000A75C4(v145 > 1, v146 + 1, 1, v144);
        *(_QWORD *)(v144 + 16) = v146 + 1;
        sub_100041230(v143, v144+ ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80))+ *(_QWORD *)(v197 + 72) * v146, type metadata accessor for ElementFallback);
        v210 = (_QWORD *)v144;
        v201 = type metadata accessor for IDCSAnalytics(0);
        v147 = v188;
        (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v188, v184, v205);
        v148 = v187;
        v149 = *v187;
        v150 = v187[1];
        v151 = v187[2];
        v152 = v187[3];
        swift_bridgeObjectRetain(v150);
        v153 = swift_bridgeObjectRetain(v152);
        v154 = v189;
        IDCSAnalytics.NamespaceElement.init(namespace:element:)(v149, v150, v151, v152, v153);
        v155 = v148[4];
        v156 = v148[5];
        v157 = (_QWORD *)((char *)v148 + *(int *)(v198 + 28));
        v158 = *v157;
        v159 = v157[1];
        swift_bridgeObjectRetain(v156);
        v160 = swift_bridgeObjectRetain(v159);
        v161 = (uint64_t)v192;
        IDCSAnalytics.NamespaceElement.init(namespace:element:)(v155, v156, v158, v159, v160);
        v163 = v190;
        v162 = v191;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v190 + 56))(v161, 0, 1, v191);
        static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)(v147, v154, v161);
        sub_1000150E8(v161, &qword_1001773F8);
        (*(void (**)(char *, uint64_t))(v163 + 8))(v154, v162);
        (*(void (**)(char *, uint64_t))(v204 + 8))(v147, v205);
        sub_10006CA8C((uint64_t)v148, type metadata accessor for ElementFallback);
        sub_1000150E8((uint64_t)v202, &qword_100177400);
        v45 = v208;
      }
    }
    v37 = v185;
    v44 = (uint64_t)v207;
    goto LABEL_4;
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1000ABEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;
  uint64_t v20;

  v8 = type metadata accessor for ISO18013KnownNamespaces(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v8);
  v13 = ISO18013KnownNamespaces.rawValue.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v13 == a1 && v15 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v13, v15, 0);
    swift_bridgeObjectRelease(v15);
    v18 = 0;
    if ((v17 & 1) == 0)
      return v18 & 1;
  }
  v18 = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(a3, a4);
  return v18 & 1;
}

uint64_t sub_1000ABFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int *v106;
  uint64_t (**v107)(uint64_t, uint64_t);
  uint64_t (**v108)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138[3];
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;

  v10 = type metadata accessor for ISO18013KnownNamespaces(0);
  v131 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v130 = (char *)&v115 - v14;
  v118 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v16);
  v18 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v128);
  v129 = (uint64_t *)((char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100008E84(&qword_1001752E0);
  v21 = __chkstk_darwin(v20);
  v126 = (uint64_t)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v124 = (uint64_t)&v115 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v115 - v25;
  v27 = type metadata accessor for Logger(0);
  v132 = *(_QWORD *)(v27 - 8);
  v133 = v27;
  v28 = __chkstk_darwin(v27);
  v127 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v115 - v30;
  v32 = (_QWORD *)sub_1000AE470(a1, a2, a3, a4, 1);
  v141 = v32;
  v33 = v32[2];
  v136 = a3;
  v125 = a1;
  if (!v33)
  {
    swift_bridgeObjectRelease(v32);
    v32 = (_QWORD *)sub_1000AE470(a1, a2, a3, a4, 0);
    v141 = v32;
    if (!v32[2])
    {
      v109 = swift_bridgeObjectRelease(v32);
      v110 = defaultLogger()(v109);
      v111 = Logger.logObject.getter(v110);
      v112 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v111, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v113 = 0;
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "No available nearest age_over_nn fallbacks found in payload", v113, 2u);
        swift_slowDealloc(v113, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v132 + 8))(v31, v133);
      v114 = type metadata accessor for ElementFallback(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(a5, 1, 1, v114);
    }
  }
  v121 = v13;
  v122 = v10;
  v134 = a2;
  v123 = a5;
  v120 = v18;
  v135 = v26;
  v34 = v32[4];
  v35 = v32[5];
  swift_bridgeObjectRetain(v35);
  sub_1000AE5EC(0, 1);
  v139 = v34;
  v140 = v35;
  v36 = v141[2];
  v119 = v141;
  if (!v36)
  {
    v38 = v35;
LABEL_21:
    v50 = swift_bridgeObjectRelease(v119);
    v51 = v127;
    defaultLogger()(v50);
    v52 = v136;
    swift_bridgeObjectRetain_n(v136, 2);
    v53 = swift_bridgeObjectRetain_n(v38, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(64, -1);
      v138[0] = v57;
      *(_DWORD *)v56 = 136315394;
      swift_bridgeObjectRetain(v52);
      v137 = sub_10003FA80(v134, v52, v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v56 + 4);
      swift_bridgeObjectRelease_n(v52, 3);
      *(_WORD *)(v56 + 12) = 2080;
      swift_bridgeObjectRetain(v38);
      v137 = sub_10003FA80(v34, v38, v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138, v56 + 14);
      swift_bridgeObjectRelease_n(v38, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Falling back from %s to %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease_n(v52, 2);
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v51, v133);
    v58 = v125;
    swift_beginAccess(&v139, v138, 0, 0);
    v59 = v139;
    v60 = v140;
    v61 = (uint64_t)v135;
    v62 = (uint64_t)v120;
    if (*(_QWORD *)(v58 + 16))
    {
      swift_bridgeObjectRetain(v140);
      v63 = sub_1000FBC04(v59, v60);
      if ((v64 & 1) != 0)
      {
        v65 = v63;
        v66 = *(_QWORD *)(v58 + 56);
        v67 = sub_100008E84(&qword_1001752E8);
        v68 = *(_QWORD *)(v67 - 8);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v68 + 16))(v61, v66 + *(_QWORD *)(v68 + 72) * v65, v67);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v61, 0, 1, v67);
      }
      else
      {
        v70 = sub_100008E84(&qword_1001752E8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v61, 1, 1, v70);
      }
      swift_bridgeObjectRelease(v60);
    }
    else
    {
      v69 = sub_100008E84(&qword_1001752E8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v61, 1, 1, v69);
    }
    v71 = v124;
    sub_10002E908(v61, v124, &qword_1001752E0);
    v72 = sub_100008E84(&qword_1001752E8);
    v73 = *(_QWORD *)(v72 - 8);
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    v75 = v74(v71, 1, v72);
    swift_bridgeObjectRetain(v60);
    if (v75 == 1)
    {
      sub_1000150E8(v71, &qword_1001752E0);
      v76 = type metadata accessor for AnyCodable(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v62, 1, 1, v76);
    }
    else
    {
      v77 = v116;
      CBOREncodedCBOR.value.getter(v72);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
      ISO18013IssuerSignedItem.elementValue.getter(v78);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v77, v118);
      v79 = type metadata accessor for AnyCodable(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v62, 0, 1, v79);
    }
    v80 = v126;
    sub_10002E908(v61, v126, &qword_1001752E0);
    if (v74(v80, 1, v72) == 1)
    {
      sub_1000150E8(v80, &qword_1001752E0);
      v81 = 0;
      v82 = 0xF000000000000000;
    }
    else
    {
      v81 = CBOREncodedCBOR.dataValue.getter(v72);
      v82 = v83;
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v80, v72);
    }
    v84 = v128;
    v85 = (uint64_t)v129;
    *v129 = v59;
    *(_QWORD *)(v85 + 8) = v60;
    sub_1000AE1AC(v62, v85 + *(int *)(v84 + 20));
    v86 = (uint64_t *)(v85 + *(int *)(v84 + 24));
    *v86 = v81;
    v86[1] = v82;
    v87 = v139;
    v88 = v140;
    v89 = swift_allocObject(&unk_10016A568, 32, 7);
    *(_QWORD *)(v89 + 16) = v87;
    *(_QWORD *)(v89 + 24) = v88;
    v90 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    v91 = v130;
    v92 = v131;
    v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v131 + 104);
    v94 = v122;
    v95 = v93(v130, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v122);
    v133 = ISO18013KnownNamespaces.rawValue.getter(v95);
    v97 = v96;
    v98 = *(void (**)(char *, uint64_t))(v92 + 8);
    v98(v91, v94);
    v99 = v121;
    v93(v121, v90, v94);
    v100 = v136;
    v101 = swift_bridgeObjectRetain(v136);
    v102 = ISO18013KnownNamespaces.rawValue.getter(v101);
    v104 = v103;
    v98(v99, v94);
    sub_1000150E8((uint64_t)v135, &qword_1001752E0);
    v105 = v123;
    *v123 = v133;
    v105[1] = v97;
    v105[2] = v134;
    v105[3] = v100;
    v105[4] = v102;
    v105[5] = v104;
    v106 = (int *)type metadata accessor for ElementFallback(0);
    sub_100041230(v85, (uint64_t)v105 + v106[7], type metadata accessor for CredentialElement);
    v107 = (uint64_t (**)(uint64_t, uint64_t))((char *)v105 + v106[8]);
    *v107 = sub_1000ABEA0;
    v107[1] = 0;
    v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v105 + v106[9]);
    *v108 = sub_1000AF388;
    v108[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v89;
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v106 - 1) + 56))(v105, 0, 1, v106);
  }
  v37 = v141 + 5;
  while (1)
  {
    v39 = *(v37 - 1);
    v38 = *v37;
    swift_bridgeObjectRetain(*v37);
    v40 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(v39, v38);
    if ((v41 & 1) != 0)
      goto LABEL_5;
    v42 = v40;
    swift_bridgeObjectRetain(v35);
    v43 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(v34, v35);
    v45 = v44;
    result = swift_bridgeObjectRelease(v35);
    if ((v45 & 1) != 0)
      goto LABEL_5;
    v47 = v42 - a4;
    if (__OFSUB__(v42, a4))
      break;
    if (v47 < 0)
    {
      v49 = __OFSUB__(0, v47);
      v47 = a4 - v42;
      if (v49)
        goto LABEL_43;
      v48 = v43 - a4;
      if (__OFSUB__(v43, a4))
        goto LABEL_44;
    }
    else
    {
      v48 = v43 - a4;
      if (__OFSUB__(v43, a4))
        goto LABEL_42;
    }
    if (v48 < 0)
    {
      v49 = __OFSUB__(0, v48);
      v48 = -v48;
      if (v49)
        goto LABEL_45;
    }
    if (v47 < v48)
    {
      swift_bridgeObjectRelease(v35);
      v139 = v39;
      v140 = v38;
      v34 = v39;
      goto LABEL_6;
    }
LABEL_5:
    swift_bridgeObjectRelease(v38);
    v38 = v35;
LABEL_6:
    v37 += 2;
    v35 = v38;
    if (!--v36)
      goto LABEL_21;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000AC980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v15;

  v4 = type metadata accessor for ISO18013KnownNamespaces(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v4);
  v9 = ISO18013KnownNamespaces.rawValue.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v9 == a1 && v11 == a2)
  {
    v13 = 1;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v9, v11, 0);
    a2 = v11;
  }
  swift_bridgeObjectRelease(a2);
  return v13 & 1;
}

uint64_t sub_1000ACA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v11 = type metadata accessor for ISO18013KnownNamespaces(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v11);
  v16 = ISO18013KnownNamespaces.rawValue.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v16 == a1 && v18 == a2)
  {
    swift_bridgeObjectRelease(a2);
    v22 = 1;
    if (a3 == a5)
    {
      v20 = 1;
      v21 = v25;
      if (a4 == v25)
        return v20 & v22 & 1;
LABEL_14:
      v20 = v22;
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a5, v21, 0);
      return v20 & v22 & 1;
    }
LABEL_12:
    v21 = v25;
    goto LABEL_14;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v16, v18, 0);
  swift_bridgeObjectRelease(v18);
  if (a3 != a5)
  {
    v22 = v20;
    goto LABEL_12;
  }
  v21 = v25;
  if (a4 != v25)
  {
    v22 = v20;
    goto LABEL_14;
  }
  v22 = 1;
  return v20 & v22 & 1;
}

uint64_t sub_1000ACBE0()
{
  return 0;
}

BOOL sub_1000ACBE8(uint64_t *a1, uint64_t a2, _BYTE *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 result;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a2;
  v64 = a5;
  v69 = a4;
  v68 = a3;
  v6 = type metadata accessor for Logger(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  __chkstk_darwin(v6);
  v67 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008E84(&qword_1001752E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AnyCodable(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[1];
  v20 = *a1;
  if ((static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(v20, v19) & 1) == 0)
    return 0;
  v56 = v18;
  v57 = v16;
  v58 = v15;
  v59 = v8;
  v62 = v19;
  v63 = v14;
  v60 = v11;
  v61 = v9;
  v21 = v69;
  v22 = v70;
  if (!*(_QWORD *)(v70 + 16))
  {
    v32 = sub_100008E84(&qword_1001752E8);
    v31 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v63, 1, 1, v32);
    v33 = v68;
LABEL_8:
    sub_1000150E8(v31, &qword_1001752E0);
LABEL_9:
    result = 0;
    *v33 = 1;
    return result;
  }
  v23 = v62;
  swift_bridgeObjectRetain(v62);
  v24 = sub_1000FBC04(v20, v23);
  v55 = v20;
  if ((v25 & 1) != 0)
  {
    v26 = v24;
    v27 = *(_QWORD *)(v22 + 56);
    v28 = sub_100008E84(&qword_1001752E8);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = v27 + *(_QWORD *)(v29 + 72) * v26;
    v31 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v63, v30, v28);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v28);
  }
  else
  {
    v34 = sub_100008E84(&qword_1001752E8);
    v31 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v63, 1, 1, v34);
  }
  v33 = v68;
  v36 = v60;
  v35 = v61;
  swift_bridgeObjectRelease(v23);
  v37 = sub_100008E84(&qword_1001752E8);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v31, 1, v37) == 1)
    goto LABEL_8;
  CBOREncodedCBOR.value.getter(v37);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v31, v37);
  v41 = v56;
  ISO18013IssuerSignedItem.elementValue.getter(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v59);
  v43 = AnyCodable.BOOLValue.getter(v42);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v41, v58);
  if (v43 == 2)
    goto LABEL_9;
  v45 = v43 & 1;
  v46 = v67;
  defaultLogger()(v44);
  v47 = swift_bridgeObjectRetain_n(v23, 2);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = swift_slowAlloc(18, -1);
    v51 = swift_slowAlloc(32, -1);
    v73 = v51;
    *(_DWORD *)v50 = 136315394;
    swift_bridgeObjectRetain(v62);
    v71 = sub_10003FA80(v55, v62, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v50 + 4);
    swift_bridgeObjectRelease_n(v62, 3);
    *(_WORD *)(v50 + 12) = 1024;
    LODWORD(v71) = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 4, v50 + 14);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Considering %s : %{BOOL}d", (uint8_t *)v50, 0x12u);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    v52 = v51;
    v23 = v62;
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
  }
  (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v66);
  if ((((v45 != 0) ^ v21) & 1) != 0)
    return 0;
  v53 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(v55, v23);
  if ((v54 & 1) != 0)
    return 0;
  if ((v21 & 1) != 0)
    return v53 >= v64;
  return v53 <= v64;
}

char *sub_1000AD09C(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char **v6;
  char *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  char *v18;
  char *result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = *v6;
  v9 = *((_QWORD *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > *((_QWORD *)v8 + 3) >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    v8 = sub_1000A74B8(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  v18 = &v8[32 * a1 + 32];
  result = (char *)swift_arrayDestroy(v18, v11, &type metadata for MockSESKeystore.MockKey);
  if (!v12)
    goto LABEL_20;
  v20 = *((_QWORD *)v8 + 2);
  v21 = __OFSUB__(v20, a2);
  v22 = v20 - a2;
  if (v21)
    goto LABEL_26;
  if ((v22 & 0x8000000000000000) == 0)
  {
    result = v18 + 32;
    v23 = &v8[32 * a2 + 32];
    if (v18 + 32 != v23 || result >= &v23[32 * v22])
      result = (char *)memmove(result, v23, 32 * v22);
    v24 = *((_QWORD *)v8 + 2);
    v21 = __OFADD__(v24, v12);
    v25 = v24 + v12;
    if (!v21)
    {
      *((_QWORD *)v8 + 2) = v25;
LABEL_20:
      *(_QWORD *)v18 = a3;
      *((_QWORD *)v18 + 1) = a4;
      *((_QWORD *)v18 + 2) = a5;
      *((_QWORD *)v18 + 3) = a6;
      *v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v26 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1000AD22C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t (**v122)(uint64_t, uint64_t);
  _QWORD *v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(char *, uint64_t, uint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  char *v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t (**v152)(uint64_t, uint64_t);
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  void (*v178)(char *, uint64_t);
  char *v179;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  __n128 v187;
  void *v188;
  uint64_t v189;
  unsigned int (*v190)(char *, uint64_t, uint64_t);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t, uint64_t);
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  void (*v199)(char *, uint64_t);
  uint64_t (*v200)(char *, _QWORD, uint64_t);
  unsigned int v201;
  char *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;

  v196 = a2;
  v184 = a1;
  v2 = sub_100008E84(&qword_1001773F8);
  __chkstk_darwin(v2);
  v183 = (char *)&v181 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for IDCSAnalytics.NamespaceElement(0);
  v213 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v219 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm(0);
  v221 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v220 = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ISO18013KnownNamespaces(0);
  v208 = *(_QWORD *)(v6 - 8);
  v209 = v6;
  v7 = __chkstk_darwin(v6);
  v207 = (char *)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v206 = (char *)&v181 - v9;
  v217 = type metadata accessor for ElementFallback(0);
  v210 = *(_QWORD *)(v217 - 8);
  v10 = __chkstk_darwin(v217);
  v222 = (uint64_t *)((char *)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v212 = (uint64_t *)((char *)&v181 - v13);
  __chkstk_darwin(v12);
  v204 = (uint64_t *)((char *)&v181 - v14);
  v193 = type metadata accessor for Logger(0);
  v192 = *(_QWORD *)(v193 - 8);
  v15 = __chkstk_darwin(v193);
  v218 = (uint64_t)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v191 = (char *)&v181 - v17;
  v18 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v18);
  v216 = (char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for ISO18013IssuerSignedItem(0);
  v20 = *(_QWORD *)(v205 - 8);
  v21 = __chkstk_darwin(v205);
  v198 = (char *)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v181 - v23;
  v215 = type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v215);
  v211 = (uint64_t *)((char *)&v181 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100008E84(&qword_1001752E0);
  v27 = __chkstk_darwin(v26);
  v195 = (char *)&v181 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v30 = (char *)&v181 - v29;
  v31 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v202 = (char *)&v181 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v181 - v35;
  v37 = sub_100008E84(&qword_1001752E8);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v185 = (char *)&v181 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(uint64_t (**)(_QWORD))(v32 + 104);
  v201 = enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:);
  v200 = (uint64_t (*)(char *, _QWORD, uint64_t))v40;
  v41 = v40(v36);
  v42 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v41);
  v44 = v43;
  v45 = *(void (**)(char *, uint64_t))(v32 + 8);
  v46 = v196;
  v203 = v31;
  v199 = v45;
  v45(v36, v31);
  v47 = *(_QWORD *)(v46 + 16);
  v197 = v37;
  v189 = v38;
  if (v47)
  {
    v48 = sub_1000FBC04(v42, v44);
    v38 = v189;
    if ((v49 & 1) != 0)
    {
      v37 = v197;
      (*(void (**)(char *, unint64_t, uint64_t))(v189 + 16))(v30, *(_QWORD *)(v46 + 56) + *(_QWORD *)(v189 + 72) * v48, v197);
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
      v51 = v30;
      v52 = 0;
    }
    else
    {
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v189 + 56);
      v51 = v30;
      v52 = 1;
      v37 = v197;
    }
  }
  else
  {
    v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    v51 = v30;
    v52 = 1;
  }
  v194 = v50;
  v50(v51, v52, 1, v37);
  v53 = v222;
  swift_bridgeObjectRelease(v44);
  v190 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v190(v30, 1, v37) == 1)
  {
    v54 = sub_1000150E8((uint64_t)v30, &qword_1001752E0);
    v55 = v218;
    v56 = defaultLogger()(v54);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Not checking age over fallbacks because payload does not contain age in years element", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v55, v193);
    return (char *)_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v185, v30, v37);
  v61 = CBOREncodedCBOR.value.getter(v37);
  v218 = ISO18013IssuerSignedItem.elementIdentifier.getter(v61);
  v63 = v62;
  v64 = *(void (**)(char *, uint64_t))(v20 + 8);
  v65 = v24;
  v66 = v205;
  v64(v65, v205);
  v67 = v198;
  v68 = CBOREncodedCBOR.value.getter(v37);
  v69 = (uint64_t)v216;
  ISO18013IssuerSignedItem.elementValue.getter(v68);
  v64(v67, v66);
  v70 = type metadata accessor for AnyCodable(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 0, 1, v70);
  v71 = CBOREncodedCBOR.dataValue.getter(v37);
  v73 = v72;
  v74 = v211;
  *v211 = v218;
  v74[1] = v63;
  v75 = v215;
  sub_1000AE1AC(v69, (uint64_t)v74 + *(int *)(v215 + 20));
  v76 = (uint64_t *)((char *)v74 + *(int *)(v75 + 24));
  *v76 = v71;
  v76[1] = v73;
  if (*(_QWORD *)(v184 + 16))
  {
    v77 = *(_QWORD *)(v184 + 16);
    LODWORD(v205) = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    v78 = swift_bridgeObjectRetain(v184);
    v80 = (unint64_t *)(v79 + 40);
    v60 = (char *)_swiftEmptyArrayStorage;
    v78.n128_u64[0] = 136315138;
    v187 = v78;
    v186 = (char *)&type metadata for Any + 8;
    v188 = (void *)0x8000000100134340;
    v81 = v77;
    while (1)
    {
      v85 = *(v80 - 1);
      v86 = *v80;
      v218 = (uint64_t)v80;
      swift_bridgeObjectRetain(v86);
      if ((static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(v85, v86) & 1) != 0)
      {
        v87 = v196;
        if (!*(_QWORD *)(v196 + 16))
        {
          v91 = (uint64_t)v195;
          v194(v195, 1, 1, v197);
LABEL_22:
          v95 = v191;
          v96 = sub_1000150E8(v91, &qword_1001752E0);
          defaultLogger()(v96);
          v97 = swift_bridgeObjectRetain_n(v86, 2);
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.debug.getter();
          v100 = os_log_type_enabled(v98, v99);
          v198 = v60;
          v216 = (char *)v85;
          if (v100)
          {
            v101 = swift_slowAlloc(12, -1);
            v102 = swift_slowAlloc(32, -1);
            v223 = v102;
            *(_DWORD *)v101 = v187.n128_u32[0];
            swift_bridgeObjectRetain(v86);
            *(_QWORD *)(v101 + 4) = sub_10003FA80(v85, v86, &v223);
            swift_bridgeObjectRelease_n(v86, 3);
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Falling back from %s to age_in_years", (uint8_t *)v101, 0xCu);
            swift_arrayDestroy(v102, 1, v186);
            swift_slowDealloc(v102, -1, -1);
            swift_slowDealloc(v101, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v86, 2);
          }
          (*(void (**)(char *, uint64_t))(v192 + 8))(v95, v193);
          v103._countAndFlagsBits = 0x3738336362613536;
          v103._object = (void *)0xE800000000000000;
          v104._countAndFlagsBits = 0xD000000000000020;
          v104._object = v188;
          logMilestone(tag:description:)(v103, v104);
          v105 = v208;
          v106 = v209;
          v107 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v208 + 104);
          v108 = v206;
          v109 = v205;
          v110 = v107(v206, v205, v209);
          v111 = ISO18013KnownNamespaces.rawValue.getter(v110);
          v113 = v112;
          v114 = *(void (**)(char *, uint64_t))(v105 + 8);
          v114(v108, v106);
          v115 = v207;
          v116 = v107(v207, v109, v106);
          v117 = ISO18013KnownNamespaces.rawValue.getter(v116);
          v119 = v118;
          v114(v115, v106);
          v120 = v217;
          v121 = v204;
          sub_10006BC40((uint64_t)v211, (uint64_t)v204 + *(int *)(v217 + 28), type metadata accessor for CredentialElement);
          *v121 = v111;
          v121[1] = v113;
          v121[2] = (uint64_t)v216;
          v121[3] = v86;
          v121[4] = v117;
          v121[5] = v119;
          v122 = (uint64_t (**)(uint64_t, uint64_t))((char *)v121 + *(int *)(v120 + 32));
          *v122 = sub_1000ABEA0;
          v122[1] = 0;
          v123 = (uint64_t *)((char *)v121 + *(int *)(v120 + 36));
          *v123 = sub_1000ABEA4;
          v123[1] = 0;
          v60 = v198;
          if ((swift_isUniquelyReferenced_nonNull_native(v198) & 1) == 0)
            v60 = (char *)sub_1000A75C4(0, *((_QWORD *)v60 + 2) + 1, 1, (unint64_t)v60);
          v124 = v220;
          v53 = v222;
          v126 = *((_QWORD *)v60 + 2);
          v125 = *((_QWORD *)v60 + 3);
          if (v126 >= v125 >> 1)
            v60 = (char *)sub_1000A75C4(v125 > 1, v126 + 1, 1, (unint64_t)v60);
          *((_QWORD *)v60 + 2) = v126 + 1;
          v82 = (uint64_t)&v60[((*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80))
                            + *(_QWORD *)(v210 + 72) * v126];
          v83 = (uint64_t)v204;
          goto LABEL_13;
        }
        swift_bridgeObjectRetain(v86);
        v88 = sub_1000FBC04(v85, v86);
        if ((v89 & 1) != 0)
        {
          v90 = *(_QWORD *)(v87 + 56) + *(_QWORD *)(v189 + 72) * v88;
          v91 = (uint64_t)v195;
          v92 = v197;
          (*(void (**)(char *, unint64_t, uint64_t))(v189 + 16))(v195, v90, v197);
          v93 = (char *)v91;
          v94 = 0;
        }
        else
        {
          v91 = (uint64_t)v195;
          v93 = v195;
          v94 = 1;
          v92 = v197;
        }
        v194(v93, v94, 1, v92);
        swift_bridgeObjectRelease(v86);
        if (v190((char *)v91, 1, v92) == 1)
          goto LABEL_22;
        sub_1000150E8(v91, &qword_1001752E0);
      }
      v215 = v81;
      v127 = v202;
      v128 = v203;
      v129 = v200(v202, v201, v203);
      v130 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v129);
      v132 = v131;
      v199(v127, v128);
      if (v85 == v130 && v86 == v132)
      {
        swift_bridgeObjectRelease(v86);
      }
      else
      {
        v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, v130, v132, 0);
        swift_bridgeObjectRelease(v132);
        if ((v133 & 1) == 0)
        {
          swift_bridgeObjectRelease(v86);
          v124 = v220;
          v53 = v222;
          v81 = v215;
          goto LABEL_14;
        }
      }
      v134 = (unint64_t)v60;
      v135 = v208;
      v136 = v209;
      v216 = (char *)v85;
      v137 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v208 + 104);
      v138 = v206;
      v139 = v205;
      v140 = v137(v206, v205, v209);
      v141 = ISO18013KnownNamespaces.rawValue.getter(v140);
      v143 = v142;
      v144 = *(void (**)(char *, uint64_t))(v135 + 8);
      v144(v138, v136);
      v145 = v207;
      v146 = v137(v207, v139, v136);
      v147 = (int *)v217;
      v148 = ISO18013KnownNamespaces.rawValue.getter(v146);
      v150 = v149;
      v144(v145, v136);
      v60 = (char *)v134;
      v151 = v212;
      sub_10006BC40((uint64_t)v211, (uint64_t)v212 + v147[7], type metadata accessor for CredentialElement);
      *v151 = v141;
      v151[1] = v143;
      v151[2] = (uint64_t)v216;
      v151[3] = v86;
      v151[4] = v148;
      v151[5] = v150;
      v152 = (uint64_t (**)(uint64_t, uint64_t))((char *)v151 + v147[8]);
      *v152 = sub_1000ABEA0;
      v152[1] = 0;
      v153 = (uint64_t *)((char *)v151 + v147[9]);
      *v153 = sub_1000ABEA4;
      v153[1] = 0;
      if ((swift_isUniquelyReferenced_nonNull_native(v134) & 1) == 0)
        v60 = (char *)sub_1000A75C4(0, *(_QWORD *)(v134 + 16) + 1, 1, v134);
      v155 = *((_QWORD *)v60 + 2);
      v154 = *((_QWORD *)v60 + 3);
      v124 = v220;
      v53 = v222;
      v81 = v215;
      if (v155 >= v154 >> 1)
        v60 = (char *)sub_1000A75C4(v154 > 1, v155 + 1, 1, (unint64_t)v60);
      *((_QWORD *)v60 + 2) = v155 + 1;
      v82 = (uint64_t)&v60[((*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80))
                        + *(_QWORD *)(v210 + 72) * v155];
      v83 = (uint64_t)v212;
LABEL_13:
      sub_100041230(v83, v82, type metadata accessor for ElementFallback);
LABEL_14:
      v80 = (unint64_t *)(v218 + 16);
      --v81;
      v84 = v221;
      if (!v81)
      {
        swift_bridgeObjectRelease(v184);
        v38 = v189;
        goto LABEL_42;
      }
    }
  }
  v60 = (char *)_swiftEmptyArrayStorage;
  v124 = v220;
  v84 = v221;
LABEL_42:
  v156 = *((_QWORD *)v60 + 2);
  v157 = v214;
  if (v156)
  {
    type metadata accessor for IDCSAnalytics(0);
    v158 = (uint64_t)&v60[(*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80)];
    v218 = *(_QWORD *)(v210 + 72);
    LODWORD(v216) = enum case for IDCSAnalytics.ElementFallbackAlgorithm.ageOverToAgeInYears(_:);
    v198 = v60;
    swift_bridgeObjectRetain(v60);
    v159 = v182;
    v160 = (uint64_t)v183;
    do
    {
      sub_10006BC40(v158, (uint64_t)v53, type metadata accessor for ElementFallback);
      (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v124, v216, v157);
      v161 = *v53;
      v162 = v222[1];
      v163 = v222[2];
      v164 = v222[3];
      swift_bridgeObjectRetain(v162);
      v165 = swift_bridgeObjectRetain(v164);
      IDCSAnalytics.NamespaceElement.init(namespace:element:)(v161, v162, v163, v164, v165);
      v166 = v222[4];
      v167 = v222[5];
      v168 = (uint64_t *)((char *)v222 + *(int *)(v217 + 28));
      v169 = *v168;
      v170 = v168[1];
      swift_bridgeObjectRetain(v167);
      v171 = swift_bridgeObjectRetain(v170);
      v172 = v166;
      v173 = v167;
      v174 = v169;
      v175 = v213;
      v157 = v214;
      v176 = v170;
      v177 = v219;
      v124 = v220;
      IDCSAnalytics.NamespaceElement.init(namespace:element:)(v172, v173, v174, v176, v171);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v175 + 56))(v160, 0, 1, v159);
      static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)(v124, v177, v160);
      sub_1000150E8(v160, &qword_1001773F8);
      v178 = *(void (**)(char *, uint64_t))(v175 + 8);
      v179 = v177;
      v84 = v221;
      v53 = v222;
      v178(v179, v159);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v124, v157);
      sub_10006CA8C((uint64_t)v53, type metadata accessor for ElementFallback);
      v158 += v218;
      --v156;
    }
    while (v156);
    v60 = v198;
    swift_bridgeObjectRelease(v198);
    v38 = v189;
  }
  sub_10006CA8C((uint64_t)v211, type metadata accessor for CredentialElement);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v185, v197);
  return v60;
}

uint64_t sub_1000AE1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001752C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AE1F4(uint64_t result, uint64_t a2, _BYTE *a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t i;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v33[2];
  _QWORD *v34;

  v6 = a5;
  v7 = result;
  v8 = 0;
  v9 = *(_QWORD *)(result + 64);
  v29 = result + 64;
  v10 = 1 << *(_BYTE *)(result + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v30 = (unint64_t)(v10 + 63) >> 6;
  v13 = &_swiftEmptyArrayStorage;
  v14 = a4 & 1;
  v28 = result;
  if ((v11 & v9) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v8 >= v30)
    goto LABEL_33;
  v18 = *(_QWORD *)(v29 + 8 * v8);
  if (v18)
    goto LABEL_19;
  v19 = v8 + 1;
  if (v8 + 1 >= v30)
    goto LABEL_33;
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
  {
LABEL_18:
    v8 = v19;
LABEL_19:
    v12 = (v18 - 1) & v18;
    for (i = __clz(__rbit64(v18)) + (v8 << 6); ; i = v15 | (v8 << 6))
    {
      v20 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * i);
      v21 = *v20;
      v22 = v20[1];
      v33[0] = *v20;
      v33[1] = v22;
      swift_bridgeObjectRetain(v22);
      v23 = sub_1000ACBE8(v33, a2, a3, v14, v6);
      if (v5)
        break;
      if (v23)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v13);
        v34 = v13;
        if ((result & 1) == 0)
        {
          result = sub_1000557E4(0, v13[2] + 1, 1);
          v13 = v34;
        }
        v25 = v13[2];
        v24 = v13[3];
        if (v25 >= v24 >> 1)
        {
          result = sub_1000557E4(v24 > 1, v25 + 1, 1);
          v13 = v34;
        }
        v13[2] = v25 + 1;
        v26 = (char *)&v13[2 * v25];
        *((_QWORD *)v26 + 4) = v21;
        *((_QWORD *)v26 + 5) = v22;
        v6 = a5;
        v7 = v28;
        if (!v12)
          goto LABEL_7;
      }
      else
      {
        result = swift_bridgeObjectRelease(v22);
        if (!v12)
          goto LABEL_7;
      }
LABEL_6:
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
    }
    swift_release(v13);
    swift_release(v7);
    swift_bridgeObjectRelease(v22);
    return (uint64_t)v13;
  }
  v19 = v8 + 2;
  if (v8 + 2 >= v30)
  {
LABEL_33:
    swift_release(v7);
    return (uint64_t)v13;
  }
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v8 + 3;
  if (v8 + 3 >= v30)
    goto LABEL_33;
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v8 + 4;
  if (v8 + 4 >= v30)
    goto LABEL_33;
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
    goto LABEL_18;
  while (1)
  {
    v8 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v8 >= v30)
      goto LABEL_33;
    v18 = *(_QWORD *)(v29 + 8 * v8);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000AE470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v24;
  char v25;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v14 = swift_bridgeObjectRetain(a1);
  v15 = sub_1000AE1F4(v14, a1, &v25, a5, a4);
  v16 = v15;
  if (v25 == 1)
  {
    v17 = swift_bridgeObjectRelease(v15);
    v18 = defaultLogger()(v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Encrypted fallbacks found in payload, passing fallback responsibility to response builder", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v22 = sub_100008E84(&qword_1001752D8);
    v16 = swift_allocObject(v22, 48, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v16 + 32) = a2;
    *(_QWORD *)(v16 + 40) = a3;
    swift_bridgeObjectRetain(a3);
  }
  return v16;
}

void *sub_1000AE5EC(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1000A73AC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[16 * a1 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15])
      result = memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1000AE754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (**v30)(char *, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint8_t *v83;
  uint64_t v84;
  const char *v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(char *, _QWORD, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t (**v125)();
  uint64_t (**v126)();
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  char v157[24];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v148 = a3;
  v146 = a2;
  v144 = type metadata accessor for ISO18013KnownNamespaces(0);
  v140 = *(_QWORD *)(v144 - 8);
  v6 = __chkstk_darwin(v144);
  v141 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v139 = (char *)&v131 - v8;
  v143 = type metadata accessor for ElementFallback(0);
  v145 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v147 = (uint64_t *)((char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v10);
  v138 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for CredentialElement(0);
  __chkstk_darwin(v137);
  v142 = (uint64_t *)((char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v134 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v132 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v149 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v135 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v131 - v18;
  v20 = __chkstk_darwin(v17);
  v136 = (char *)&v131 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v131 - v22;
  v24 = swift_bridgeObjectRetain(a1);
  v25 = sub_1000AAD28(v24);
  v26 = *(_QWORD *)(v25 + 16);
  v151 = v19;
  v152 = v14;
  v150 = v23;
  if (!v26)
  {
    swift_bridgeObjectRelease(v25);
    isUniquelyReferenced_nonNull_native = swift_allocObject(&unk_10016A540, 24, 7);
    v50 = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = _swiftEmptyArrayStorage;
    goto LABEL_62;
  }
  v27 = 0;
  v156 = 0;
  v28 = 0;
  v29 = 0;
  v153 = 0;
  v154 = 0;
  v131 = v25;
  v30 = (void (**)(char *, uint64_t))(v25 + 40);
  LODWORD(v155) = 1;
  v31 = 1;
  do
  {
    v33 = (uint64_t)*(v30 - 1);
    v34 = *v30;
    swift_bridgeObjectRetain(*v30);
    v35 = static ISO18013_5_1_ElementIdentifier.parseAgeOverElement(_:)(v33, v34);
    if ((v36 & 1) != 0)
      goto LABEL_3;
    v32 = v35;
    if (v35 == a4)
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v131);
      swift_bridgeObjectRelease((void (*)(char *, uint64_t))v28);
      swift_bridgeObjectRelease(v154);
      return _swiftEmptyArrayStorage;
    }
    if (v35 >= a4)
    {
LABEL_12:
      if (v35 > a4)
      {
        if (v35 < v27)
          v38 = (void (*)(char *, uint64_t))v28;
        else
          v38 = v34;
        if (v35 < v27)
          v39 = v35;
        else
          v39 = v27;
        v40 = v156;
        if (v35 < v27)
          v41 = v33;
        else
          v41 = v156;
        if (v35 < v27)
          v42 = v34;
        else
          v42 = (void (*)(char *, uint64_t))v28;
        if (v35 == 0x7FFFFFFFFFFFFFFFLL)
          v43 = v34;
        else
          v43 = (void (*)(char *, uint64_t))v28;
        if (v35 == 0x7FFFFFFFFFFFFFFFLL)
          v44 = v27;
        else
          v44 = v35;
        if (v35 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v45 = (void (*)(char *, uint64_t))v28;
        }
        else
        {
          v40 = v33;
          v45 = v34;
        }
        v46 = v155;
        if ((v155 & 1) != 0)
          v34 = v43;
        else
          v34 = v38;
        if ((v155 & 1) != 0)
          v27 = v44;
        else
          v27 = v39;
        v47 = (v155 & 1) != 0 && v32 == 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(v155) = v47;
        if ((v46 & 1) != 0)
          v48 = v40;
        else
          v48 = v41;
        v156 = v48;
        if ((v46 & 1) != 0)
          v28 = (void (*)(_QWORD, _QWORD))v45;
        else
          v28 = (void (*)(_QWORD, _QWORD))v42;
      }
LABEL_3:
      v32 = v29;
      goto LABEL_4;
    }
    if ((v31 & 1) != 0)
    {
      if (v35 < 0)
        goto LABEL_12;
    }
    else if (v29 >= v35)
    {
      goto LABEL_12;
    }
    v31 = 0;
    v37 = v34;
    v34 = v154;
    v153 = v33;
    v154 = v37;
LABEL_4:
    v30 += 2;
    swift_bridgeObjectRelease(v34);
    v29 = v32;
    --v26;
  }
  while (v26);
  swift_bridgeObjectRelease(v131);
  isUniquelyReferenced_nonNull_native = swift_allocObject(&unk_10016A540, 24, 7);
  v50 = isUniquelyReferenced_nonNull_native;
  v51 = (char *)_swiftEmptyArrayStorage;
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = _swiftEmptyArrayStorage;
  v52 = v154;
  if (!v154)
  {
    v14 = v152;
    v23 = v150;
    v19 = v151;
    if (!v28)
      goto LABEL_62;
    goto LABEL_57;
  }
  isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000A73AC(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v51 = (char *)isUniquelyReferenced_nonNull_native;
  v54 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
  v53 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
  if (v54 >= v53 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000A73AC((char *)(v53 > 1), v54 + 1, 1, (char *)isUniquelyReferenced_nonNull_native);
    v51 = (char *)isUniquelyReferenced_nonNull_native;
  }
  v14 = v152;
  v55 = v153;
  *((_QWORD *)v51 + 2) = v54 + 1;
  v56 = &v51[16 * v54];
  *((_QWORD *)v56 + 4) = v55;
  *((_QWORD *)v56 + 5) = v52;
  *(_QWORD *)(v50 + 16) = v51;
  v23 = v150;
  v19 = v151;
  if (v28)
  {
LABEL_57:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000A73AC(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
      v51 = (char *)isUniquelyReferenced_nonNull_native;
    }
    v58 = *((_QWORD *)v51 + 2);
    v57 = *((_QWORD *)v51 + 3);
    if (v58 >= v57 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000A73AC((char *)(v57 > 1), v58 + 1, 1, v51);
      v51 = (char *)isUniquelyReferenced_nonNull_native;
    }
    *((_QWORD *)v51 + 2) = v58 + 1;
    v59 = &v51[16 * v58];
    *((_QWORD *)v59 + 4) = v156;
    *((_QWORD *)v59 + 5) = v28;
    *(_QWORD *)(v50 + 16) = v51;
  }
LABEL_62:
  v60 = defaultLogger()(isUniquelyReferenced_nonNull_native);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v160 = v64;
    *(_DWORD *)v63 = 136315138;
    swift_beginAccess(v50 + 16, v157, 0, 0);
    v65 = *(_QWORD *)(v50 + 16);
    v66 = swift_bridgeObjectRetain(v65);
    v67 = Array.description.getter(v66, &type metadata for String);
    v69 = v68;
    swift_retain(v50);
    swift_bridgeObjectRelease(v65);
    v159 = sub_10003FA80(v67, v69, &v160);
    v14 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160, v63 + 4);
    swift_release(v50);
    swift_bridgeObjectRelease(v69);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Discovered closest possible fallbacks are %s", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    v70 = v64;
    v19 = v151;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    v71 = *(void (**)(char *, uint64_t))(v149 + 8);
    v71(v150, v14);
  }
  else
  {

    v72 = v23;
    v71 = *(void (**)(char *, uint64_t))(v149 + 8);
    v71(v72, v14);
  }
  v73 = swift_beginAccess(v50 + 16, &v160, 0, 0);
  v74 = *(_QWORD **)(v50 + 16);
  v75 = v74[2];
  if (v75)
  {
    v156 = v50;
    if (v75 == 1)
    {
      v76 = v74[4];
      v77 = v74[5];
      v78 = swift_bridgeObjectRetain(v77);
      v19 = v136;
      defaultLogger()(v78);
      v79 = swift_bridgeObjectRetain_n(v77, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.debug.getter();
      v82 = os_log_type_enabled(v80, v81);
      v155 = v76;
      if (v82)
      {
        v154 = v71;
        v83 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v159 = v84;
        *(_DWORD *)v83 = 136315138;
        swift_bridgeObjectRetain(v77);
        v158 = sub_10003FA80(v76, v77, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v83 + 4);
        swift_bridgeObjectRelease_n(v77, 3);
        v85 = "Encountered one possible fallback, falling back to %s";
        goto LABEL_75;
      }
LABEL_76:

      swift_bridgeObjectRelease_n(v77, 2);
      v71(v19, v14);
    }
    else
    {
      v92 = v133;
      v93 = v132;
      v94 = v134;
      v95 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v133 + 104))(v132, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v134);
      v96 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v95);
      v77 = v97;
      v98 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v93, v94);
      defaultLogger()(v98);
      v99 = swift_bridgeObjectRetain_n(v77, 2);
      v80 = Logger.logObject.getter(v99);
      v81 = static os_log_type_t.debug.getter();
      v100 = os_log_type_enabled(v80, v81);
      v155 = v96;
      if (!v100)
        goto LABEL_76;
      v154 = v71;
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = swift_slowAlloc(32, -1);
      v159 = v84;
      *(_DWORD *)v83 = 136315138;
      swift_bridgeObjectRetain(v77);
      v158 = sub_10003FA80(v96, v77, &v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v83 + 4);
      swift_bridgeObjectRelease_n(v77, 3);
      v85 = "Encountered multiple possible fallback, falling back to %s";
LABEL_75:
      _os_log_impl((void *)&_mh_execute_header, v80, v81, v85, v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      v154(v19, v14);
    }
    if (qword_1001743F8 != -1)
      swift_once(&qword_1001743F8, sub_100073610);
    v101 = type metadata accessor for AnyCodable(0);
    v102 = sub_100075EC8(v101, (uint64_t)qword_100178D70);
    v103 = *(_QWORD *)(v101 - 8);
    v104 = (uint64_t)v138;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v138, v102, v101);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56))(v104, 0, 1, v101);
    v105 = (uint64_t)v142;
    *v142 = v155;
    *(_QWORD *)(v105 + 8) = v77;
    v106 = v137;
    sub_1000AE1AC(v104, v105 + *(int *)(v137 + 20));
    *(_OWORD *)(v105 + *(int *)(v106 + 24)) = xmmword_10012A6F0;
    v107 = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
    v108 = v140;
    v109 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v140 + 104);
    v110 = v139;
    v111 = v144;
    v112 = v109(v139, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v144);
    v113 = ISO18013KnownNamespaces.rawValue.getter(v112);
    v115 = v114;
    v116 = *(void (**)(char *, uint64_t))(v108 + 8);
    v116(v110, v111);
    v117 = v141;
    v109(v141, v107, v111);
    v118 = v148;
    v119 = swift_bridgeObjectRetain(v148);
    v120 = ISO18013KnownNamespaces.rawValue.getter(v119);
    v122 = v121;
    v116(v117, v111);
    v123 = v143;
    v124 = v147;
    sub_10006BC40(v105, (uint64_t)v147 + *(int *)(v143 + 28), type metadata accessor for CredentialElement);
    *v124 = v113;
    v124[1] = v115;
    v124[2] = v146;
    v124[3] = v118;
    v124[4] = v120;
    v124[5] = v122;
    v125 = (uint64_t (**)())((char *)v124 + *(int *)(v123 + 32));
    *v125 = sub_1000ACBE0;
    v125[1] = 0;
    v126 = (uint64_t (**)())((char *)v124 + *(int *)(v123 + 36));
    *v126 = sub_1000ACBE0;
    v126[1] = 0;
    v127 = sub_100008E84(&qword_1001772B8);
    v128 = *(unsigned __int8 *)(v145 + 80);
    v129 = (v128 + 32) & ~v128;
    v91 = swift_allocObject(v127, v129 + *(_QWORD *)(v145 + 72), v128 | 7);
    *(_OWORD *)(v91 + 16) = xmmword_10012A6D0;
    sub_100041230((uint64_t)v124, v91 + v129, type metadata accessor for ElementFallback);
    sub_10006CA8C(v105, type metadata accessor for CredentialElement);
    swift_release(v156);
  }
  else
  {
    v86 = v135;
    v87 = defaultLogger()(v73);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "No possible fallbacks, not falling back", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }

    v71(v86, v14);
    swift_release(v50);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v91;
}

uint64_t sub_1000AF340()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AF364()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AF388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000ACA70(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1000AF390(uint64_t result)
{
  char **v1;
  int64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  int64_t v41;
  unint64_t v42;

  v3 = *(_QWORD *)(result + 16);
  v4 = *v1;
  v5 = *((_QWORD *)*v1 + 2);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = *((_QWORD *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_1000A73AC(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = *((_QWORD *)v4 + 3) >> 1;
  }
  v11 = *((_QWORD *)v4 + 2);
  v12 = v9 - v11;
  result = sub_1000BEEFC((uint64_t)v39, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3)
    goto LABEL_16;
  if (result)
  {
    v14 = *((_QWORD *)v4 + 2);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_49;
    }
    *((_QWORD *)v4 + 2) = v16;
  }
  if (result != v12)
  {
    v17 = v39[0];
LABEL_14:
    result = sub_100039B9C(v17);
    *v1 = v4;
    return result;
  }
LABEL_17:
  v2 = *((_QWORD *)v4 + 2);
  v3 = v39[0];
  v38 = v39[1];
  v13 = v40;
  v6 = v41;
  if (v42)
  {
    v18 = (v42 - 1) & v42;
    v19 = __clz(__rbit64(v42)) | (v41 << 6);
    v37 = (unint64_t)(v40 + 64) >> 6;
    goto LABEL_19;
  }
LABEL_49:
  v33 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_67;
  v37 = (unint64_t)(v13 + 64) >> 6;
  if (v33 >= v37)
  {
    v17 = v3;
    goto LABEL_14;
  }
  v34 = *(_QWORD *)(v38 + 8 * v33);
  v35 = v6 + 1;
  if (v34)
    goto LABEL_52;
  v35 = v6 + 2;
  if (v6 + 2 >= v37)
    goto LABEL_46;
  v34 = *(_QWORD *)(v38 + 8 * v35);
  if (!v34)
  {
    v35 = v6 + 3;
    if (v6 + 3 >= v37)
      goto LABEL_46;
    v34 = *(_QWORD *)(v38 + 8 * v35);
    if (!v34)
    {
      v35 = v6 + 4;
      if (v6 + 4 >= v37)
        goto LABEL_46;
      v34 = *(_QWORD *)(v38 + 8 * v35);
      if (!v34)
      {
        v35 = v6 + 5;
        if (v6 + 5 < v37)
        {
          v34 = *(_QWORD *)(v38 + 8 * v35);
          if (!v34)
          {
            v36 = v6 + 6;
            do
            {
              if (v37 == v36)
                goto LABEL_46;
              v34 = *(_QWORD *)(v38 + 8 * v36++);
            }
            while (!v34);
            v35 = v36 - 1;
          }
          goto LABEL_52;
        }
LABEL_46:
        v17 = v3;
        goto LABEL_14;
      }
    }
  }
LABEL_52:
  v18 = (v34 - 1) & v34;
  v19 = __clz(__rbit64(v34)) + (v35 << 6);
  v6 = v35;
LABEL_19:
  v20 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v19);
  v22 = *v20;
  v21 = v20[1];
  result = swift_bridgeObjectRetain(v21);
  while (1)
  {
    v23 = *((_QWORD *)v4 + 3);
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
      break;
    if (v2 < v24)
      goto LABEL_26;
LABEL_20:
    *((_QWORD *)v4 + 2) = v2;
  }
  result = (uint64_t)sub_1000A73AC((char *)(v23 > 1), v2 + 1, 1, v4);
  v4 = (char *)result;
  v24 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v24)
    goto LABEL_20;
  while (1)
  {
LABEL_26:
    v28 = &v4[16 * v2 + 32];
    *(_QWORD *)v28 = v22;
    *((_QWORD *)v28 + 1) = v21;
    ++v2;
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_25;
    }
    v29 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v29 >= v37)
      goto LABEL_45;
    v30 = *(_QWORD *)(v38 + 8 * v29);
    v31 = v6 + 1;
    if (!v30)
    {
      v31 = v6 + 2;
      if (v6 + 2 >= v37)
        goto LABEL_45;
      v30 = *(_QWORD *)(v38 + 8 * v31);
      if (!v30)
      {
        v31 = v6 + 3;
        if (v6 + 3 >= v37)
          goto LABEL_45;
        v30 = *(_QWORD *)(v38 + 8 * v31);
        if (!v30)
        {
          v31 = v6 + 4;
          if (v6 + 4 >= v37)
            goto LABEL_45;
          v30 = *(_QWORD *)(v38 + 8 * v31);
          if (!v30)
          {
            v31 = v6 + 5;
            if (v6 + 5 >= v37)
              goto LABEL_45;
            v30 = *(_QWORD *)(v38 + 8 * v31);
            if (!v30)
            {
              v32 = v6 + 6;
              while (v37 != v32)
              {
                v30 = *(_QWORD *)(v38 + 8 * v32++);
                if (v30)
                {
                  v31 = v32 - 1;
                  goto LABEL_42;
                }
              }
LABEL_45:
              *((_QWORD *)v4 + 2) = v2;
              goto LABEL_46;
            }
          }
        }
      }
    }
LABEL_42:
    v18 = (v30 - 1) & v30;
    v26 = __clz(__rbit64(v30)) + (v31 << 6);
    v6 = v31;
LABEL_25:
    v27 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v26);
    v22 = *v27;
    v21 = v27[1];
    result = swift_bridgeObjectRetain(v21);
    if (v2 >= v24)
      goto LABEL_20;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_1000AF754(uint64_t a1)
{
  return sub_1000AF8CC(a1, (uint64_t (*)(void))sub_1000A75C4, type metadata accessor for ElementFallback);
}

uint64_t sub_1000AF768(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000A73AC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000AF8B8(uint64_t a1)
{
  return sub_1000AF8CC(a1, (uint64_t (*)(void))sub_1000A75D8, type metadata accessor for CredentialElement);
}

uint64_t sub_1000AF8CC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy(v16);
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000AFA44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = *(_QWORD *)(type metadata accessor for PresentmentProposal(0) - 8);
  v3[19] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v5);
  v3[21] = swift_task_alloc(v5);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001776C0);
  v3[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[26] = v9;
  v3[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  v3[28] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[29] = v11;
  v3[30] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_1001754B8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v12);
  v3[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for ISO18013ReaderRequest.DocRequest(0);
  v3[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[34] = v14;
  v3[35] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176830) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v15);
  v3[37] = swift_task_alloc(v15);
  v16 = type metadata accessor for ISO18013ReaderRequest(0);
  v3[38] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[39] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v18);
  v3[41] = swift_task_alloc(v18);
  v19 = type metadata accessor for DIPSignpost.Config(0);
  v3[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DIPSignpost(0);
  v3[43] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[44] = v21;
  v3[45] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger(0);
  v3[46] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v3[47] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[48] = swift_task_alloc(v24);
  v3[49] = swift_task_alloc(v24);
  return swift_task_switch(sub_1000AFC78, 0, 0);
}

uint64_t sub_1000AFC78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t **v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter interpretRequest", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[49];
  v7 = v1[46];
  v8 = v1[47];
  v9 = v1[42];

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v1[50] = (uint64_t)v10;
  v11 = v10(v6, v7);
  static IDCSSignposts.presentmentInterpretRequest.getter(v11);
  DIPSignpost.init(_:)(v9);
  v12 = (uint64_t **)swift_task_alloc(dword_100177474);
  v1[51] = (uint64_t)v12;
  *v12 = v1;
  v12[1] = (uint64_t *)sub_1000AFD8C;
  return sub_1000B1A28(v1[40], v1[36], v1[17]);
}

uint64_t sub_1000AFD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 408);
  v4[52] = a1;
  v4[53] = a2;
  v4[54] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000B10A8;
  else
    v6 = sub_1000AFDFC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000AFDFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;

  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 32))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
  v3 = sub_10002E94C(v2, v1, &qword_100176830);
  v4 = ISO18013ReaderRequest.version.getter(v3);
  v6 = v5;
  v7 = sub_100120C70(v4, v5);
  LOBYTE(v2) = v8;
  v9 = swift_bridgeObjectRelease(v6);
  if ((v2 & 1) != 0 || v7 != (_QWORD *)1)
  {
    v21 = *(_QWORD *)(v0 + 416);
    v60 = *(_QWORD *)(v0 + 424);
    v67 = *(_QWORD *)(v0 + 328);
    v62 = *(_QWORD *)(v0 + 312);
    v22 = *(_QWORD *)(v0 + 296);
    v64 = *(_QWORD *)(v0 + 304);
    v23 = *(_QWORD *)(v0 + 192);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v23, enum case for DIPError.Code.idcsUnsupportedReaderRequestVersion(_:), *(_QWORD *)(v0 + 176));
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v27 = swift_allocError(v25, v26, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100134EF0, 0, v23, 0, v24, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 109);
    swift_willThrow(v28);
    sub_10000B164(v21, v60);
    sub_1000150E8(v22, &qword_100176830);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v67, v64);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v51 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 384);
    v29 = *(_QWORD *)(v0 + 360);
    v53 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 328);
    v55 = *(_QWORD *)(v0 + 320);
    v56 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 288);
    v58 = *(_QWORD *)(v0 + 280);
    v59 = *(_QWORD *)(v0 + 256);
    v61 = *(_QWORD *)(v0 + 248);
    v63 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 176);
    v65 = *(_QWORD *)(v0 + 216);
    v68 = *(_QWORD *)(v0 + 168);
    v70 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v29, *(_QWORD *)(v0 + 344));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v31, enum case for DIPError.Code.internalError(_:), v32);
    swift_errorRetain(v27);
    v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v25, v26, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v27, v31, 0, v33, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
    swift_willThrow(v34);
    swift_errorRelease(v27);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v29);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v31);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(void **)(v0 + 136);
    defaultLogger()(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = *(void **)(v0 + 136);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v71 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = objc_msgSend(v13, "regionCode");
      if (v16)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v20 = v19;

      }
      else
      {
        v18 = 0;
        v20 = 0xE000000000000000;
      }
      v66 = *(_QWORD *)(v0 + 384);
      v69 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 400);
      v41 = *(_QWORD *)(v0 + 368);
      v42 = *(void **)(v0 + 136);
      *(_QWORD *)(v0 + 120) = sub_10003FA80(v18, v20, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4);

      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "PresentmentRequestInterpreter interpretRequest regionCode %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v40 = v69(v66, v41);
    }
    else
    {
      v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 400);
      v37 = *(_QWORD *)(v0 + 384);
      v38 = *(_QWORD *)(v0 + 368);
      v39 = *(void **)(v0 + 136);

      v40 = v36(v37, v38);
    }
    v43 = *(void **)(v0 + 136);
    v44 = ISO18013ReaderRequest.docRequests.getter(v40);
    *(_QWORD *)(v0 + 440) = v44;
    v45 = objc_msgSend(v43, "regionCode");
    if (v45)
    {
      v46 = v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

    }
    else
    {
      v47 = 0;
      v49 = 0;
    }
    *(_QWORD *)(v0 + 448) = v49;
    v50 = (_QWORD *)swift_task_alloc(dword_100177484);
    *(_QWORD *)(v0 + 456) = v50;
    *v50 = v0;
    v50[1] = sub_1000B03BC;
    return sub_1000B50D0(*(_QWORD *)(v0 + 280), v44, v47, v49);
  }
}

uint64_t sub_1000B03BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 448);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 440));
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000B12C0;
  else
    v5 = sub_1000B0438;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000B0438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 472) = v2;
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 80);
  *(_BYTE *)(v0 + 592) = v1;
  if ((_DWORD)v1)
    v3 = 0;
  else
    v3 = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_10017747C);
  *(_QWORD *)(v0 + 480) = v4;
  *v4 = v0;
  v4[1] = sub_1000B04AC;
  return sub_1000B305C(*(_QWORD *)(v0 + 280), v3, *(_QWORD *)(v0 + 296));
}

uint64_t sub_1000B04AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 480);
  *(_QWORD *)(v6 + 488) = a1;
  *(_QWORD *)(v6 + 496) = a2;
  *(_BYTE *)(v6 + 593) = a4;
  *(_QWORD *)(v6 + 504) = a3;
  *(_QWORD *)(v6 + 512) = v4;
  swift_task_dealloc(v7);
  if (v4)
    v8 = sub_1000B150C;
  else
    v8 = sub_1000B0520;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000B0520()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = *(id *)(v0 + 488);
  v2 = *(id *)(v0 + 504);
  if (!v1)
  {
    v3 = objc_msgSend(*(id *)(v0 + 136), "relyingPartyIdentifier");
    if (v3)
    {
      v4 = v3;
      v6 = *(_QWORD *)(v0 + 248);
      v5 = *(_QWORD *)(v0 + 256);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v9 = v8;

      v10 = type metadata accessor for URL(0);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
      v11(v5, 1, 1, v10);
      v11(v6, 1, 1, v10);
      v12 = objc_allocWithZone((Class)DCPresentmentProposalReaderMetadata);
      v1 = sub_1000BE858(v7, v9, 0, 0, 0, 0, 0, 0xF000000000000000, v5, 0, 0, v6, 0);
    }
    else
    {
      v1 = 0;
    }
  }
  *(_QWORD *)(v0 + 520) = v1;
  v14 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(id *)(v0 + 488);
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter();
  CBOREncodedCBOR.value.getter(v15);
  v18.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v19 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v18);
  v21 = v20;
  v22 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v19);
  sub_1000EDFF0(v19, v21, v22, *(_QWORD *)(v16 + 32), v0 + 56);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10002597C((__int128 *)(v0 + 56), v0 + 16);
    v23 = *(_QWORD *)(v0 + 40);
    v24 = *(_QWORD *)(v0 + 48);
    sub_1000151A4((_QWORD *)(v0 + 16), v23);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24) & 1) == 0)
    {
      v30 = *(void **)(v0 + 504);
      v31 = *(_QWORD *)(v0 + 416);
      v60 = *(_QWORD *)(v0 + 424);
      v61 = *(void **)(v0 + 496);
      v78 = *(_QWORD *)(v0 + 304);
      v80 = *(_QWORD *)(v0 + 328);
      v74 = *(_QWORD *)(v0 + 296);
      v76 = *(_QWORD *)(v0 + 312);
      v70 = *(_QWORD *)(v0 + 264);
      v72 = *(_QWORD *)(v0 + 280);
      v66 = *(_QWORD *)(v0 + 240);
      v68 = *(_QWORD *)(v0 + 272);
      v62 = *(_QWORD *)(v0 + 232);
      v64 = *(_QWORD *)(v0 + 224);
      v32 = *(_QWORD *)(v0 + 192);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 104))(v32, enum case for DIPError.Code.idcsRestrictedElementRequested(_:), *(_QWORD *)(v0 + 176));
      v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v84 = type metadata accessor for DIPError(0);
      v83 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v34 = swift_allocError(v84, v83, 0, 0);
      v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100134F10, 0, v32, 0, v33, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 147);
      swift_willThrow(v35);
      sub_10000B164(v31, v60);

      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v66, v64);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v70);
      sub_1000150E8(v74, &qword_100176830);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v78);
      sub_10000CE40((_QWORD *)(v0 + 16));
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      v36 = *(_QWORD *)(v0 + 384);
      v37 = *(_QWORD *)(v0 + 392);
      v38 = *(_QWORD *)(v0 + 360);
      v39 = *(_QWORD *)(v0 + 336);
      v63 = *(_QWORD *)(v0 + 328);
      v65 = *(_QWORD *)(v0 + 320);
      v67 = *(_QWORD *)(v0 + 296);
      v69 = *(_QWORD *)(v0 + 288);
      v71 = *(_QWORD *)(v0 + 280);
      v73 = *(_QWORD *)(v0 + 256);
      v75 = *(_QWORD *)(v0 + 248);
      v77 = *(_QWORD *)(v0 + 240);
      v41 = *(_QWORD *)(v0 + 184);
      v40 = *(_QWORD *)(v0 + 192);
      v42 = *(_QWORD *)(v0 + 176);
      v79 = *(_QWORD *)(v0 + 216);
      v81 = *(_QWORD *)(v0 + 168);
      v82 = *(_QWORD *)(v0 + 160);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v38, *(_QWORD *)(v0 + 344));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.internalError(_:), v42);
      swift_errorRetain(v34);
      v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      swift_allocError(v84, v83, 0, 0);
      v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v34, v40, 0, v43, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
      swift_willThrow(v44);
      swift_errorRelease(v34);
      swift_task_dealloc(v37);
      swift_task_dealloc(v36);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v71);
      swift_task_dealloc(v73);
      swift_task_dealloc(v75);
      swift_task_dealloc(v77);
      swift_task_dealloc(v79);
      swift_task_dealloc(v40);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    sub_10000CE40((_QWORD *)(v0 + 16));
  }
  else
  {
    sub_1000150E8(v0 + 56, &qword_100177700);
  }
  v25 = objc_msgSend(*(id *)(v0 + 136), "regionCode");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  *(_QWORD *)(v0 + 528) = v29;
  v46 = objc_msgSend(*(id *)(v0 + 136), "requiredPublicKeyIdentifier");
  if (v46)
  {
    v47 = v46;
    v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v50 = v49;

  }
  else
  {
    v48 = 0;
    v50 = 0xF000000000000000;
  }
  *(_QWORD *)(v0 + 544) = v50;
  *(_QWORD *)(v0 + 536) = v48;
  v51 = *(void **)(v0 + 504);
  if (v51)
  {
    v52 = v51;
    v53 = SecCertificateRef.derRepresentation()();
    v55 = v54;

  }
  else
  {
    v53 = 0;
    v55 = 0xF000000000000000;
  }
  *(_QWORD *)(v0 + 560) = v55;
  *(_QWORD *)(v0 + 552) = v53;
  v56 = *(unsigned __int8 *)(v0 + 592);
  v57 = *(_QWORD *)(v0 + 472);
  v58 = (_QWORD *)swift_task_alloc(dword_10017748C);
  *(_QWORD *)(v0 + 568) = v58;
  *v58 = v0;
  v58[1] = sub_1000B0BA0;
  if (v56)
    v59 = 0;
  else
    v59 = v57;
  return sub_1000B69CC(*(_QWORD *)(v0 + 240), v27, v29, v48, v50, v59, v53, v55);
}

uint64_t sub_1000B0BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 568);
  v3[72] = a1;
  v3[73] = v1;
  swift_task_dealloc(v4);
  v5 = v3[70];
  v6 = v3[69];
  v7 = v3[68];
  v8 = v3[67];
  v9 = v3[66];
  sub_10000B164(v6, v5);
  sub_10000B164(v8, v7);
  swift_bridgeObjectRelease(v9);
  if (v1)
    v10 = sub_1000B1770;
  else
    v10 = sub_1000B0C44;
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_1000B0C44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = (_QWORD *)sub_10003E9E8((uint64_t)_swiftEmptyArrayStorage);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 576)
       + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v59 = *(_QWORD *)(v4 + 72);
    while (1)
    {
      v61 = v3;
      v8 = *(_QWORD *)(v0 + 160);
      v7 = *(id **)(v0 + 168);
      sub_10006BC40(v5, (uint64_t)v7, type metadata accessor for PresentmentProposal);
      v9 = objc_msgSend(*v7, "credentialIdentifier");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      sub_10006BC40((uint64_t)v7, v8, type metadata accessor for PresentmentProposal);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      v15 = sub_1000FBC04(v10, v12);
      v16 = v2[2];
      v17 = (v14 & 1) == 0;
      result = v16 + v17;
      if (__OFADD__(v16, v17))
        break;
      v19 = v14;
      if (v2[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10007E17C();
      }
      else
      {
        sub_10007C4E4(result, isUniquelyReferenced_nonNull_native);
        v20 = sub_1000FBC04(v10, v12);
        if ((v19 & 1) != (v21 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v15 = v20;
      }
      v22 = *(_QWORD *)(v0 + 160);
      if ((v19 & 1) != 0)
      {
        sub_1000C15C0(v22, v2[7] + v15 * v59);
      }
      else
      {
        v2[(v15 >> 6) + 8] |= 1 << v15;
        v23 = (uint64_t *)(v2[6] + 16 * v15);
        *v23 = v10;
        v23[1] = v12;
        result = sub_1000C108C(v22, v2[7] + v15 * v59);
        v24 = v2[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_17;
        v2[2] = v26;
        swift_bridgeObjectRetain(v12);
      }
      v6 = *(_QWORD *)(v0 + 168);
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRelease(v12);
      sub_10006CA8C(v6, type metadata accessor for PresentmentProposal);
      v5 += v59;
      v3 = v61 - 1;
      if (v61 == 1)
        goto LABEL_14;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_14:
    v40 = *(void **)(v0 + 520);
    v28 = *(void **)(v0 + 496);
    v27 = *(void **)(v0 + 504);
    v29 = *(void **)(v0 + 488);
    v45 = *(_QWORD *)(v0 + 416);
    v50 = *(_QWORD *)(v0 + 392);
    v51 = *(_QWORD *)(v0 + 384);
    v46 = *(_QWORD *)(v0 + 424);
    v47 = *(_QWORD *)(v0 + 360);
    v48 = *(_QWORD *)(v0 + 352);
    v49 = *(_QWORD *)(v0 + 344);
    v52 = *(_QWORD *)(v0 + 336);
    v53 = *(_QWORD *)(v0 + 320);
    v41 = *(_QWORD *)(v0 + 304);
    v42 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 240);
    v55 = *(_QWORD *)(v0 + 256);
    v56 = *(_QWORD *)(v0 + 248);
    v32 = *(_QWORD *)(v0 + 224);
    v33 = *(_QWORD *)(v0 + 232);
    v57 = *(_QWORD *)(v0 + 216);
    v58 = *(_QWORD *)(v0 + 192);
    v60 = *(_QWORD *)(v0 + 168);
    v62 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD **)(v0 + 128);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v41);
    v35 = type metadata accessor for PresentmentRequestInterpretation(0);
    sub_10002E94C(v44, (uint64_t)v34 + *(int *)(v35 + 24), &qword_100176830);
    v36 = v43 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
    swift_beginAccess(v43 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator, v0 + 96, 0, 0);
    sub_10002E908(v36, (uint64_t)v34 + *(int *)(v35 + 28), &qword_100176910);
    *v34 = v2;
    v34[1] = v45;
    v34[2] = v46;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v47);
    swift_task_dealloc(v52);
    swift_task_dealloc(v42);
    swift_task_dealloc(v53);
    swift_task_dealloc(v44);
    swift_task_dealloc(v54);
    swift_task_dealloc(v30);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v31);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1000B10A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 168);
  v24 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v4, *(_QWORD *)(v0 + 344));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v1);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v10, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v8);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B12C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  sub_10000B164(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  sub_1000150E8(v4, &qword_100176830);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v5 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 296);
  v21 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 240);
  v26 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 168);
  v28 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v8, *(_QWORD *)(v0 + 344));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v12, enum case for DIPError.Code.internalError(_:), v13);
  swift_errorRetain(v5);
  v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v15 = type metadata accessor for DIPError(0);
  v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v15, v16, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v12, 0, v14, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
  swift_willThrow(v17);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v12);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B150C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 264);
  sub_10000B164(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_1000150E8(v4, &qword_100176830);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v8 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 320);
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 288);
  v25 = *(_QWORD *)(v0 + 280);
  v26 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v11, *(_QWORD *)(v0 + 344));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v15, enum case for DIPError.Code.internalError(_:), v16);
  swift_errorRetain(v8);
  v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v18, v19, 0, 0);
  v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v15, 0, v17, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
  swift_willThrow(v20);
  swift_errorRelease(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v15);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1770()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v28 = *(void **)(v0 + 520);
  v2 = *(void **)(v0 + 496);
  v1 = *(void **)(v0 + 504);
  v3 = *(void **)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 304);
  v36 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 296);
  v32 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 224);
  sub_10000B164(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  sub_1000150E8(v30, &qword_100176830);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v34);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v10 = *(_QWORD *)(v0 + 584);
  v12 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 328);
  v24 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 296);
  v26 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 256);
  v31 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 240);
  v35 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 176);
  v37 = *(_QWORD *)(v0 + 168);
  v38 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(v13, *(_QWORD *)(v0 + 344));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v17, enum case for DIPError.Code.internalError(_:), v18);
  swift_errorRetain(v10);
  v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for DIPError(0);
  v21 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v20, v21, 0, 0);
  v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v17, 0, v19, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ALL, 0x8000000100134ED0, 171);
  swift_willThrow(v22);
  swift_errorRelease(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v17);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ISO18013ReaderRequest(0);
  v4[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[10] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v9);
  v4[12] = swift_task_alloc(v9);
  v10 = type metadata accessor for ISO18013SessionEstablishment(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v12);
  v4[16] = swift_task_alloc(v12);
  v4[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DIPSignpost(0);
  v4[19] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[20] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[21] = swift_task_alloc(v16);
  v4[22] = swift_task_alloc(v16);
  v17 = sub_100008E84(&qword_1001776E0);
  v4[23] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[24] = v18;
  v4[25] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008E84(&qword_100176830);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008E84(&qword_100175A80);
  v4[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v4[28] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[29] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[30] = swift_task_alloc(v23);
  v4[31] = swift_task_alloc(v23);
  v24 = type metadata accessor for Logger(0);
  v4[32] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v4[33] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[34] = swift_task_alloc(v26);
  v4[35] = swift_task_alloc(v26);
  v4[36] = swift_task_alloc(v26);
  return swift_task_switch(sub_1000B1C50, 0, 0);
}

uint64_t sub_1000B1C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter extractReaderRequest", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 288);
  v7 = *(_QWORD *)(v1 + 256);
  v8 = *(_QWORD *)(v1 + 264);
  v9 = *(void **)(v1 + 32);

  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 296) = v10;
  v10(v6, v7);
  v11 = objc_msgSend(v9, "sessionEstablishment");
  if (v11)
  {
    v12 = v11;
    v13 = *(void **)(v1 + 32);
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v16 = v15;

    *(_QWORD *)(v1 + 304) = v14;
    *(_QWORD *)(v1 + 312) = v16;
    v17 = objc_msgSend(v13, "sessionTranscript");
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)(v1 + 40);
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v22 = v21;

      *(_QWORD *)(v1 + 320) = v20;
      *(_QWORD *)(v1 + 328) = v22;
      v23 = type metadata accessor for CBORDecoder(0);
      v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      *(_QWORD *)(v1 + 336) = CBORDecoder.init()(v24);
      v25 = *(_QWORD *)(v1 + 248);
      if ((*(_BYTE *)(v19 + 80) & 1) != 0)
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 232) + 104))(v25, enum case for ISO18013CodingKeyFormat.standard(_:), *(_QWORD *)(v1 + 224));
      }
      else
      {
        v36 = *(_QWORD *)(v1 + 232);
        v37 = *(_QWORD *)(v1 + 240);
        v38 = *(_QWORD *)(v1 + 224);
        DCPresentmentMessageEncodingFormat.codingKeyFormat.getter(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 72), v37);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v25, v37, v38);
      }
      v39 = *(_QWORD *)(v1 + 24);
      CBORDecoder.codingKeyFormat.setter(*(_QWORD *)(v1 + 248));
      v40 = type metadata accessor for ISO18013SessionTranscript(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
      __asm { BR              X10 }
    }
    v31 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v31, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), *(_QWORD *)(v1 + 48));
    v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v33, v34, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100134C60, 0, v31, 0, v32, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ELL, 0x8000000100134C40, 190);
    swift_willThrow(v35);
    sub_100005AB0(v14, v16);
  }
  else
  {
    v26 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v26, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionEstablishment(_:), *(_QWORD *)(v1 + 48));
    v27 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v28 = type metadata accessor for DIPError(0);
    v29 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v28, v29, 0, 0);
    v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003BLL, 0x8000000100134C00, 0, v26, 0, v27, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ELL, 0x8000000100134C40, 187);
    swift_willThrow(v30);
  }
  v41 = *(_QWORD *)(v1 + 280);
  v42 = *(_QWORD *)(v1 + 272);
  v44 = *(_QWORD *)(v1 + 240);
  v43 = *(_QWORD *)(v1 + 248);
  v45 = *(_QWORD *)(v1 + 208);
  v46 = *(_QWORD *)(v1 + 216);
  v47 = *(_QWORD *)(v1 + 200);
  v49 = *(_QWORD *)(v1 + 168);
  v48 = *(_QWORD *)(v1 + 176);
  v51 = *(_QWORD *)(v1 + 144);
  v52 = *(_QWORD *)(v1 + 136);
  v53 = *(_QWORD *)(v1 + 128);
  v54 = *(_QWORD *)(v1 + 120);
  v55 = *(_QWORD *)(v1 + 96);
  v56 = *(_QWORD *)(v1 + 88);
  v57 = *(_QWORD *)(v1 + 64);
  swift_task_dealloc(*(_QWORD *)(v1 + 288));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000B282C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();

  v2 = v0[45];
  v1 = v0[46];
  v3 = v0[43];
  v5 = v0[14];
  v4 = v0[15];
  v6 = v0[13];
  v7 = sub_100045584(v4, v0[40], v0[41], v2, v1);
  v0[47] = v3;
  v0[48] = v7;
  v0[49] = v8;
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[50] = v9;
  v9(v4, v6);
  sub_10000B164(v2, v1);
  if (v3)
    v10 = sub_1000B2EB4;
  else
    v10 = sub_1000B28D4;
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_1000B28D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v61 = *(_QWORD *)(v0 + 376);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 144);
  v7._countAndFlagsBits = 0xD000000000000053;
  v8 = *(_QWORD *)(v0 + 72);
  v7._object = (void *)0x8000000100134D70;
  v9._countAndFlagsBits = 0x3738393861336365;
  v9._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v9, v7);
  defaultLogger()(v10);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v2;
  *(_QWORD *)(v11 + 24) = v1;
  Logger.sensitive(_:)(sub_1000C1558, v11);
  swift_task_dealloc(v11);
  v12 = v3(v4, v5);
  static IDCSSignposts.presentmentDecodeReaderRequest.getter(v12);
  DIPSignpost.init(_:)(v6);
  v13 = sub_1000058C8(&qword_1001776F8, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderRequest, (uint64_t)&protocol conformance descriptor for ISO18013ReaderRequest);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v8, v2, v1, v8, v13);
  if (!v61)
  {
    v36 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 392);
    v60 = *(_QWORD *)(v0 + 336);
    v38 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 312);
    v39 = *(_QWORD *)(v0 + 96);
    v41 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 80);
    v42 = *(_QWORD *)(v0 + 16);
    v62 = *(_QWORD *)(v0 + 328) >> 62;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 32))(v39, *(_QWORD *)(v0 + 88), v41);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_100005AB0(v38, v37);
    sub_100005AB0(v36, v35);
    swift_release(v60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v42, v39, v41);
    __asm { BR              X9 }
  }
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 312);
  v45 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 304);
  v56 = *(_QWORD *)(v0 + 176);
  v58 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v46 = *(_QWORD *)(v0 + 168);
  v48 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 336);
  v44 = *(_QWORD *)(v0 + 160);
  v50 = *(_QWORD *)(v0 + 104);
  v52 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 64);
  v54 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v19, enum case for DIPError.Code.idcsInvalidReaderRequest(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v61);
  v20 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for DIPError(0);
  v22 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v21, v22, 0, 0);
  v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100134DD0, v61, v19, 0, v20, 0xD000000000000065, 0x8000000100134400, 0xD00000000000001ELL, 0x8000000100134C40, 247);
  swift_willThrow(v23);
  sub_100005AB0(v17, v16);
  sub_100005AB0(v15, v14);
  swift_release(v43);
  swift_errorRelease(v61);
  sub_100005AB0(v45, v48);
  v24 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v24(v46, v18);
  v58(v52, v50);
  v24(v56, v18);
  sub_1000150E8(v54, &qword_100176830);
  v25 = *(_QWORD *)(v0 + 280);
  v26 = *(_QWORD *)(v0 + 272);
  v28 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 216);
  v31 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 168);
  v32 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 136);
  v51 = *(_QWORD *)(v0 + 128);
  v53 = *(_QWORD *)(v0 + 120);
  v55 = *(_QWORD *)(v0 + 96);
  v57 = *(_QWORD *)(v0 + 88);
  v59 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(unsigned __int8 *)(v0 + 334);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v4, v6);
  v3(v8, v9);
  v10(v5, v6);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  if (v2)
  {
    *(_QWORD *)(v1 - 88) = v12;
    v30 = v11;
  }
  else
  {
    sub_100005AB0(v11, v12);
    v30 = 0;
    *(_QWORD *)(v1 - 88) = 0xF000000000000000;
  }
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v30, *(_QWORD *)(v1 - 88));
}

uint64_t sub_1000B2EB4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);

  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 24);
  sub_100005AB0(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
  swift_release(v2);
  sub_100005AB0(v3, v1);
  v27(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1000150E8(v9, &qword_100176830);
  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000B3040()
{
  return 0xD000000000000039;
}

uint64_t sub_1000B305C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4[120] = v3;
  v4[119] = a3;
  v4[118] = a2;
  v4[117] = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[121] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[122] = v6;
  v4[123] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176910) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[124] = swift_task_alloc(v7);
  v4[125] = swift_task_alloc(v7);
  v8 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  v4[126] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[127] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[128] = swift_task_alloc(v10);
  v4[129] = swift_task_alloc(v10);
  v11 = sub_100008E84(&qword_1001776C0);
  v4[130] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[131] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[132] = swift_task_alloc(v13);
  v4[133] = swift_task_alloc(v13);
  v4[134] = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176828) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[135] = swift_task_alloc(v14);
  v4[136] = swift_task_alloc(v14);
  v15 = type metadata accessor for IdentityReaderAuthenticator(0);
  v4[137] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[138] = v16;
  v4[139] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_100176830);
  v4[140] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ISO18013SessionTranscript(0);
  v4[141] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[142] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[143] = swift_task_alloc(v20);
  v4[144] = swift_task_alloc(v20);
  v21 = type metadata accessor for DIPSignpost.Config(0);
  v4[145] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DIPSignpost(0);
  v4[146] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[147] = v23;
  v4[148] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Logger(0);
  v4[149] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v4[150] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[151] = swift_task_alloc(v26);
  v4[152] = swift_task_alloc(v26);
  v4[153] = swift_task_alloc(v26);
  v4[154] = swift_task_alloc(v26);
  v4[155] = swift_task_alloc(v26);
  v4[156] = swift_task_alloc(v26);
  return swift_task_switch(sub_1000B32E4, 0, 0);
}

uint64_t sub_1000B32E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(void);
  id v124;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter performReaderAuth", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 1248);
  v7 = *(_QWORD *)(v1 + 1200);
  v8 = *(_QWORD *)(v1 + 1192);
  v9 = *(_QWORD *)(v1 + 1160);
  v10 = *(_QWORD *)(v1 + 944);

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v1 + 1256) = v11;
  v12 = v11(v6, v8);
  static IDCSSignposts.presentmentReaderAuth.getter(v12);
  v13 = DIPSignpost.init(_:)(v9);
  if (v10 == 1)
  {
    v30 = defaultLogger()(v13);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Performing optional identity reader authentication policy", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }
    v34 = *(_QWORD *)(v1 + 1232);
    v35 = *(_QWORD *)(v1 + 1192);
    v36 = *(_QWORD *)(v1 + 1136);
    v37 = *(_QWORD *)(v1 + 1128);
    v38 = *(_QWORD *)(v1 + 1120);
    v39 = *(_QWORD *)(v1 + 952);

    v11(v34, v35);
    sub_10002E908(v39, v38, &qword_100176830);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v37) != 1)
    {
      v96 = *(_QWORD *)(v1 + 1136);
      v99 = *(_QWORD *)(v1 + 1152);
      v68 = *(_QWORD *)(v1 + 1128);
      v69 = *(_QWORD *)(v1 + 1112);
      v70 = *(int **)(v1 + 1096);
      v71 = *(_QWORD *)(v1 + 1072);
      v72 = *(_QWORD *)(v1 + 1064);
      v73 = *(_QWORD *)(v1 + 1048);
      v74 = *(_QWORD *)(v1 + 1040);
      v102 = *(_QWORD *)(v1 + 1032);
      v105 = *(_QWORD *)(v1 + 1144);
      v114 = *(_QWORD *)(v1 + 1088);
      v117 = *(_QWORD *)(v1 + 1016);
      v120 = *(_QWORD *)(v1 + 1008);
      v123 = *(uint64_t (**)(void))(v96 + 32);
      v75 = v123();
      v76 = ISO18013ReaderRequest.DocRequest.readerAuth.getter(v75);
      ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v76);
      v77 = CBOREncodedCBOR.dataValue.getter(v74);
      v108 = v78;
      v111 = v77;
      v79 = *(double (**)(uint64_t, uint64_t))(v73 + 8);
      *(_QWORD *)(v1 + 1264) = v79;
      v79(v71, v74);
      v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v105, v99, v68);
      ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v80);
      CBOREncodedCBOR.value.getter(v74);
      v81.n128_f64[0] = v79(v72, v74);
      v82 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v81);
      v84 = v83;
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v102, v120);
      sub_10002E94C(v114, v69, &qword_100176828);
      v85 = (uint64_t *)(v69 + v70[5]);
      *v85 = v111;
      v85[1] = v108;
      ((void (*)(uint64_t, uint64_t, uint64_t))v123)(v69 + v70[6], v105, v68);
      v86 = (uint64_t *)(v69 + v70[7]);
      *v86 = v82;
      v86[1] = v84;
      *(_QWORD *)(v69 + v70[8]) = 0;
      *(_BYTE *)(v69 + v70[9]) = 2;
      v87 = (_QWORD *)swift_task_alloc(dword_10017839C);
      *(_QWORD *)(v1 + 1272) = v87;
      *v87 = v1;
      v87[1] = sub_1000B3C48;
      return sub_1000EED28(v1 + 128);
    }
    v40 = *(_QWORD *)(v1 + 984);
    v41 = *(_QWORD *)(v1 + 976);
    v42 = *(_QWORD *)(v1 + 968);
    sub_1000150E8(*(_QWORD *)(v1 + 1120), &qword_100176830);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v40, enum case for DIPError.Code.idcsInvalidPresentmentRequestSessionTranscript(_:), v42);
    v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v44 = type metadata accessor for DIPError(0);
    v45 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v44, v45, 0, 0);
    v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100134A80, 0, v40, 0, v43, 0xD000000000000065, 0x8000000100134400, 0xD00000000000002FLL, 0x8000000100134A50, 282);
LABEL_13:
    swift_willThrow(v46);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v59 = *(_QWORD *)(v1 + 1248);
    v60 = *(_QWORD *)(v1 + 1240);
    v61 = *(_QWORD *)(v1 + 1232);
    v62 = *(_QWORD *)(v1 + 1224);
    v63 = *(_QWORD *)(v1 + 1216);
    v64 = *(_QWORD *)(v1 + 1208);
    v65 = *(_QWORD *)(v1 + 1184);
    v66 = *(_QWORD *)(v1 + 1160);
    v67 = *(_QWORD *)(v1 + 1152);
    v89 = *(_QWORD *)(v1 + 1144);
    v91 = *(_QWORD *)(v1 + 1120);
    v93 = *(_QWORD *)(v1 + 1112);
    v95 = *(_QWORD *)(v1 + 1088);
    v98 = *(_QWORD *)(v1 + 1080);
    v101 = *(_QWORD *)(v1 + 1072);
    v104 = *(_QWORD *)(v1 + 1064);
    v107 = *(_QWORD *)(v1 + 1056);
    v110 = *(_QWORD *)(v1 + 1032);
    v113 = *(_QWORD *)(v1 + 1024);
    v116 = *(_QWORD *)(v1 + 1000);
    v119 = *(_QWORD *)(v1 + 992);
    v122 = *(_QWORD *)(v1 + 984);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1176) + 8))(v65, *(_QWORD *)(v1 + 1168));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    swift_task_dealloc(v113);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (v10)
  {
    v47 = *(_QWORD *)(v1 + 984);
    v48 = *(_QWORD *)(v1 + 976);
    v49 = *(_QWORD *)(v1 + 968);
    v50 = *(_QWORD *)(v1 + 944);
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(0xE000000000000000);
    v51 = (id)DCCredentialReaderAuthenticationPolicyToString(v50);
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104))(v47, enum case for DIPError.Code.idcsInvalidReaderAuthenticationPolicy(_:), v49);
    v56 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v57, v58, 0, 0);
    v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100134A20, 0, v47, 0, v56, 0xD000000000000065, 0x8000000100134400, 0xD00000000000002FLL, 0x8000000100134A50, 376);
    goto LABEL_13;
  }
  v14 = defaultLogger()(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Skipping reader authentication because session policy is set to none", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(_QWORD *)(v1 + 1240);
  v19 = *(_QWORD *)(v1 + 1192);

  v11(v18, v19);
  v124 = objc_msgSend(objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics), "initWithTrusted:untrustedIdentifier:untrustedOrganization:untrustedIssuerIdentifier:untrustedIssuerOrganization:", 0, 0, 0, 0, 0);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v20 = *(_QWORD *)(v1 + 1248);
  v21 = *(_QWORD *)(v1 + 1240);
  v22 = *(_QWORD *)(v1 + 1232);
  v23 = *(_QWORD *)(v1 + 1224);
  v24 = *(_QWORD *)(v1 + 1216);
  v25 = *(_QWORD *)(v1 + 1208);
  v26 = *(_QWORD *)(v1 + 1184);
  v27 = *(_QWORD *)(v1 + 1160);
  v28 = *(_QWORD *)(v1 + 1152);
  v88 = *(_QWORD *)(v1 + 1144);
  v90 = *(_QWORD *)(v1 + 1120);
  v92 = *(_QWORD *)(v1 + 1112);
  v94 = *(_QWORD *)(v1 + 1088);
  v97 = *(_QWORD *)(v1 + 1080);
  v100 = *(_QWORD *)(v1 + 1072);
  v103 = *(_QWORD *)(v1 + 1064);
  v106 = *(_QWORD *)(v1 + 1056);
  v109 = *(_QWORD *)(v1 + 1032);
  v112 = *(_QWORD *)(v1 + 1024);
  v115 = *(_QWORD *)(v1 + 1000);
  v118 = *(_QWORD *)(v1 + 992);
  v121 = *(_QWORD *)(v1 + 984);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 1176) + 8))(v26, *(_QWORD *)(v1 + 1168));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v106);
  swift_task_dealloc(v109);
  swift_task_dealloc(v112);
  swift_task_dealloc(v115);
  swift_task_dealloc(v118);
  swift_task_dealloc(v121);
  return (*(uint64_t (**)(_QWORD, id, _QWORD, uint64_t))(v1 + 8))(0, v124, 0, 2);
}

uint64_t sub_1000B3C48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  __int128 v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1272);
  *(_QWORD *)(*v1 + 1280) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B4D80;
  }
  else
  {
    *(_QWORD *)(v2 + 1288) = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v2 + 1296) = *(_QWORD *)(v2 + 144);
    *(_QWORD *)(v2 + 1304) = *(_QWORD *)(v2 + 160);
    v5 = *(_OWORD *)(v2 + 192);
    *(_OWORD *)(v2 + 1312) = *(_OWORD *)(v2 + 176);
    *(_OWORD *)(v2 + 1328) = v5;
    *(_OWORD *)(v2 + 1344) = *(_OWORD *)(v2 + 208);
    *(_QWORD *)(v2 + 1360) = *(_QWORD *)(v2 + 224);
    v4 = sub_1000B3CE0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B3CE0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  id v4;
  Swift::String v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  void *v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v34)(uint64_t, uint64_t);
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  const __CFData *isa;
  SecCertificateRef v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  const __CFData *v77;
  SecCertificateRef v78;
  uint64_t v79;
  __SecCertificate *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint8_t *v92;
  uint8_t *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  __SecCertificate *v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint8_t *bufa;
  uint8_t *bufb;
  uint8_t *buf;
  uint8_t *bufc;
  uint8_t *bufd;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  sub_10002E94C(v0 + 128, v0 + 352, &qword_1001776D0);
  v212 = v0 + 128;
  if (*(_QWORD *)(v0 + 352))
  {
    v1 = *(_QWORD *)(v0 + 368);
    v2 = *(_QWORD *)(v0 + 384);
    v206 = *(_QWORD *)(v0 + 376);
    v3 = *(_QWORD *)(v0 + 400);
    v197 = *(_QWORD *)(v0 + 360);
    v202 = *(_QWORD *)(v0 + 392);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v2);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v5._countAndFlagsBits = 0xD000000000000021;
    v5._object = (void *)0x8000000100134AB0;
    v6 = NSUserDefaults.internalBool(forKey:)(v5);

    if (v6)
    {
      v8 = defaultLogger()(v7);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Using mock reader metadata due to user defaults setting", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
      v13 = *(_QWORD *)(v0 + 1224);
      v14 = *(_QWORD *)(v0 + 1192);

      v12(v13, v14);
      v202 = 0xD000000000000018;
      v206 = 0xD000000000000011;
      v3 = 0x8000000100134B80;
      v2 = 0x8000000100134B60;
      v1 = 0x8000000100134B40;
      v197 = 0xD000000000000010;
    }
    else
    {
      v197 = 0;
      v202 = 0;
      v1 = 0;
      v206 = 0;
      v2 = 0;
      v3 = 0;
    }
  }
  v15 = *(_QWORD *)(v0 + 1104);
  v16 = *(_QWORD *)(v0 + 1096);
  v17 = *(_QWORD *)(v0 + 1000);
  v18 = *(_QWORD *)(v0 + 992);
  v19 = *(_QWORD *)(v0 + 960);
  sub_10006BC40(*(_QWORD *)(v0 + 1112), v17, type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v16);
  sub_10002E94C(v17, v18, &qword_100176910);
  v20 = v19 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
  swift_beginAccess(v19 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator, v0 + 872, 33, 0);
  sub_1000C11A0(v18, v20, &qword_100176910);
  swift_endAccess(v0 + 872);
  v21._countAndFlagsBits = 0xD00000000000005ELL;
  v21._object = (void *)0x8000000100134AE0;
  v22._countAndFlagsBits = 0x3461653530636166;
  v22._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v22, v21);
  if (!v1)
  {
    v56 = *(_QWORD *)(v0 + 1080);
    ISO18013ReaderRequest.DocRequest.readerAuth.getter();
    v57 = type metadata accessor for COSE_Sign1(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57);
    v60 = *(_QWORD *)(v0 + 1080);
    v61 = v0 + 128;
    if ((_DWORD)v59 == 1)
    {
      sub_1000150E8(*(_QWORD *)(v0 + 1080), &qword_100176828);
      goto LABEL_54;
    }
    v68 = (_QWORD *)COSE_Sign1.x509Chain.getter(v59);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v57);
    if (!v68)
      goto LABEL_54;
    if (v68[2])
    {
      v70 = v68[4];
      v69 = v68[5];
      sub_100005A38(v70, v69);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v72 = SecCertificateCreateWithData(0, isa);

      if (v72)
      {
        v73 = v68[2];
        if (v73 <= 1)
        {
          swift_bridgeObjectRelease(v68);
          v200 = 0;
          v205 = 0;
          v122 = 0;
          v211 = 0;
          v79 = *(_QWORD *)(v0 + 1280);
        }
        else
        {
          v74 = (uint64_t)&v68[2 * v73 + 4];
          v75 = *(_QWORD *)(v74 - 16);
          v76 = *(_QWORD *)(v74 - 8);
          sub_100005A38(v75, v76);
          swift_bridgeObjectRelease(v68);
          v77 = Data._bridgeToObjectiveC()().super.isa;
          sub_100005AB0(v75, v76);
          v78 = SecCertificateCreateWithData(kCFAllocatorDefault, v77);

          v79 = *(_QWORD *)(v0 + 1280);
          if (!v78)
          {
LABEL_51:
            v200 = 0;
            v205 = 0;
            v122 = 0;
            v211 = 0;
            goto LABEL_52;
          }
          v80 = v78;
          sub_10007A334((uint64_t *)(v0 + 784));
          if (v79)
          {

            defaultLogger()(v81);
            swift_errorRetain(v79);
            v82 = swift_errorRetain(v79);
            v83 = Logger.logObject.getter(v82);
            v84 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v83, v84))
            {
              v209 = v83;
              v85 = (uint8_t *)swift_slowAlloc(12, -1);
              v179 = (uint64_t *)swift_slowAlloc(8, -1);
              bufb = v85;
              *(_DWORD *)v85 = 138412290;
              v193 = v69;
              v86 = v85 + 4;
              swift_errorRetain(v79);
              v87 = _swift_stdlib_bridgeErrorToNSError(v79);
              *(_QWORD *)(v0 + 928) = v87;
              v88 = v86;
              v69 = v193;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v88);
              *v179 = v87;
              swift_errorRelease(v79);
              swift_errorRelease(v79);
              _os_log_impl((void *)&_mh_execute_header, v209, v84, "Failed to extract distinguished names from reader certificate's root issuer (non-fatal): %@", bufb, 0xCu);
              v89 = sub_100008E84(&qword_100175350);
              swift_arrayDestroy(v179, 1, v89);
              swift_slowDealloc(v179, -1, -1);
              swift_slowDealloc(bufb, -1, -1);

            }
            else
            {

              swift_errorRelease(v79);
              swift_errorRelease(v79);
              v80 = (__SecCertificate *)v83;
            }
            swift_errorRelease(v79);

            (*(void (**)(_QWORD, _QWORD))(v0 + 1256))(*(_QWORD *)(v0 + 1208), *(_QWORD *)(v0 + 1192));
            v79 = 0;
            goto LABEL_51;
          }

          v200 = *(_QWORD *)(v0 + 784);
          v211 = *(_QWORD *)(v0 + 792);
          v205 = *(_QWORD *)(v0 + 800);
          v122 = *(_QWORD *)(v0 + 808);
          sub_10002E94C(v0 + 816, v0 + 912, &qword_100174860);
          sub_1000C12B0(v0 + 912);
        }
LABEL_52:
        v123 = v72;
        sub_10007A334((uint64_t *)(v0 + 736));
        v124 = v79;
        v125 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
        v126 = *(_QWORD *)(v0 + 1216);
        v127 = *(_QWORD *)(v0 + 1192);
        if (!v124)
        {
          v172 = *(_QWORD *)(v0 + 1192);
          v177 = *(_QWORD *)(v0 + 1136);
          v182 = *(_QWORD *)(v0 + 1128);
          bufd = *(uint8_t **)(v0 + 1152);
          v167 = *(_QWORD *)(v0 + 1112);

          v142 = *(_QWORD *)(v0 + 736);
          v191 = v70;
          v196 = v69;
          v143 = *(_QWORD *)(v0 + 744);
          v144 = *(_QWORD *)(v0 + 752);
          v162 = v125;
          v145 = *(_QWORD *)(v0 + 760);
          v146 = objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics);
          v147 = sub_1000BEA58(0, v142, v143, v144, v145, v200, v211, v205, v122);
          sub_10002E94C(v0 + 768, v0 + 896, &qword_100174860);
          v148 = sub_1000C12B0(v0 + 896);
          defaultLogger()(v148);
          v149 = swift_task_alloc(32);
          v150 = v147;
          *(_QWORD *)(v149 + 16) = v147;
          Logger.sensitive(_:)(sub_1000C1E88, v149);
          sub_100005AB0(v191, v196);

          sub_1000C13B8(v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C11E4);
          swift_task_dealloc(v149);
          v162(v126, v172);
          sub_10006CA8C(v167, type metadata accessor for IdentityReaderAuthenticator);
          (*(void (**)(uint8_t *, uint64_t))(v177 + 8))(bufd, v182);
          goto LABEL_55;
        }

        swift_bridgeObjectRelease(v122);
        v128 = swift_bridgeObjectRelease(v211);
        defaultLogger()(v128);
        DIPRecordError(_:message:log:)(v124, 0, 0xE000000000000000, v126);
        sub_100005AB0(v70, v69);
        swift_errorRelease(v124);

        v125(v126, v127);
        v61 = v0 + 128;
LABEL_54:
        v129 = *(_QWORD *)(v0 + 1152);
        v130 = *(_QWORD *)(v0 + 1136);
        v131 = *(_QWORD *)(v0 + 1128);
        v132 = *(_QWORD *)(v0 + 1112);
        v150 = objc_msgSend(objc_allocWithZone((Class)DCPresentmentProposalReaderAnalytics), "initWithTrusted:untrustedIdentifier:untrustedOrganization:untrustedIssuerIdentifier:untrustedIssuerOrganization:", 0, 0, 0, 0, 0);
        sub_1000C13B8(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C11E4);
        sub_10006CA8C(v132, type metadata accessor for IdentityReaderAuthenticator);
        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v129, v131);
LABEL_55:
        v151 = 0;
        v204 = 0;
        v210 = 2;
        goto LABEL_56;
      }
      sub_100005AB0(v70, v69);
    }
    swift_bridgeObjectRelease(v68);
    goto LABEL_54;
  }
  *(_QWORD *)(v0 + 688) = v197;
  *(_QWORD *)(v0 + 696) = v1;
  v198 = (_QWORD *)(v0 + 832);
  *(_QWORD *)(v0 + 704) = v206;
  *(_QWORD *)(v0 + 712) = v2;
  *(_QWORD *)(v0 + 720) = v202;
  *(_QWORD *)(v0 + 728) = v3;
  v23 = (id)sub_10002E94C(v212, v0 + 464, &qword_1001776D0);
  v24 = *(void **)(v0 + 464);
  if (v24)
    v23 = v24;
  v207 = *(_QWORD *)(v0 + 1280);
  v25 = *(void (**)(uint64_t, uint64_t))(v0 + 1264);
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1040);
  v28 = *(_QWORD *)(v0 + 1024);
  v29 = (uint64_t *)(*(_QWORD *)(v0 + 960)
                  + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_readerMetadataProvider);
  v30 = *v29;
  v31 = v29[1];
  ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v23);
  CBOREncodedCBOR.value.getter(v27);
  v25(v26, v27);
  sub_10002E94C(v212, v0 + 576, &qword_1001776D0);
  if (*(_QWORD *)(v0 + 576))
    v32 = *(unsigned __int8 *)(v0 + 680);
  else
    v32 = 2;
  v33 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8);
  *(_QWORD *)(v0 + 856) = v30;
  *(_QWORD *)(v0 + 864) = v31;
  sub_1000258FC(v198);
  v33(v24, v28, v0 + 688, v32, v30, v31);
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
  v35 = v24;
  v36 = v34(v30, v31);
  if (v207)
  {
    sub_1000C13B8(v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C11E4);

    sub_10000CE40(v198);
    v37 = *(_QWORD *)(v0 + 1152);
    v38 = *(_QWORD *)(v0 + 1136);
    v39 = *(_QWORD *)(v0 + 1128);
    v40 = *(_QWORD *)(v0 + 1112);
    v41 = *(_QWORD *)(v0 + 984);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 104))(v41, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 968));
    swift_errorRetain(v207);
    v42 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v43 = type metadata accessor for DIPError(0);
    v44 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v43, v44, 0, 0);
    v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v207, v41, 0, v42, 0xD000000000000065, 0x8000000100134400, 0xD00000000000002FLL, 0x8000000100134A50, 372);
    swift_willThrow(v45);
    swift_errorRelease(v207);
    sub_10006CA8C(v40, type metadata accessor for IdentityReaderAuthenticator);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v46 = *(_QWORD *)(v0 + 1248);
    v47 = *(_QWORD *)(v0 + 1240);
    v48 = *(_QWORD *)(v0 + 1232);
    v49 = *(_QWORD *)(v0 + 1224);
    v50 = *(_QWORD *)(v0 + 1216);
    v51 = *(_QWORD *)(v0 + 1208);
    v52 = *(_QWORD *)(v0 + 1184);
    v53 = *(_QWORD *)(v0 + 1160);
    v54 = *(_QWORD *)(v0 + 1152);
    v153 = *(_QWORD *)(v0 + 1144);
    v156 = *(_QWORD *)(v0 + 1120);
    v159 = *(_QWORD *)(v0 + 1112);
    v163 = *(_QWORD *)(v0 + 1088);
    v168 = *(_QWORD *)(v0 + 1080);
    v173 = *(_QWORD *)(v0 + 1072);
    v178 = *(_QWORD *)(v0 + 1064);
    bufa = *(uint8_t **)(v0 + 1056);
    v188 = *(_QWORD *)(v0 + 1032);
    v192 = *(_QWORD *)(v0 + 1024);
    v199 = *(_QWORD *)(v0 + 1000);
    v203 = *(_QWORD *)(v0 + 992);
    v208 = *(_QWORD *)(v0 + 984);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1176) + 8))(v52, *(_QWORD *)(v0 + 1168));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v153);
    swift_task_dealloc(v156);
    swift_task_dealloc(v159);
    swift_task_dealloc(v163);
    swift_task_dealloc(v168);
    swift_task_dealloc(v173);
    swift_task_dealloc(v178);
    swift_task_dealloc(bufa);
    swift_task_dealloc(v188);
    swift_task_dealloc(v192);
    swift_task_dealloc(v199);
    swift_task_dealloc(v203);
    swift_task_dealloc(v208);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v62 = (void *)v36;
  v204 = v24;
  v63 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
  v64 = *(_QWORD *)(v0 + 1216);
  v65 = *(_QWORD *)(v0 + 1192);
  defaultLogger()(v36);
  v66 = swift_task_alloc(32);
  *(_QWORD *)(v66 + 16) = v62;
  Logger.sensitive(_:)(sub_1000C12D8, v66);
  swift_task_dealloc(v66);
  v63(v64, v65);
  sub_10002E94C(v212, v0 + 240, &qword_1001776D0);
  if (*(_QWORD *)(v0 + 240))
  {
    v67 = *(unsigned __int8 *)(v0 + 344);
    v174 = v67 != 2;
    v169 = sub_1000C130C();
  }
  else
  {
    v169 = sub_1000C130C();
    v174 = 0;
    v67 = 2;
  }
  v90 = objc_msgSend(v62, "identifier");
  v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
  v93 = v92;

  v94 = objc_msgSend(v62, "organization");
  if (v94)
  {
    v95 = v94;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v194 = v97;

  }
  else
  {
    v96 = 0;
    v194 = 0;
  }
  sub_10002E94C(v212, v0 + 16, &qword_1001776D0);
  v151 = v62;
  v210 = v67;
  v160 = v35;
  buf = v93;
  v189 = v91;
  v180 = v96;
  if (*(_QWORD *)(v0 + 16))
  {
    v98 = *(_QWORD *)(v0 + 80);
    v157 = v98;
    if (v98)
    {
      v154 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRetain(v98);
    }
    else
    {
      v154 = 0;
    }
    v105 = *(_QWORD *)(v0 + 1360);
    v106 = *(_QWORD *)(v0 + 1352);
    v107 = *(_QWORD *)(v0 + 1344);
    v108 = *(_QWORD *)(v0 + 1336);
    v109 = *(_QWORD *)(v0 + 1328);
    v110 = *(_QWORD *)(v0 + 1320);
    v164 = *(_QWORD *)(v0 + 1312);
    v111 = *(_QWORD *)(v0 + 1304);
    v112 = *(_QWORD *)(v0 + 1296);
    v113 = *(void **)(v0 + 1288);
    sub_1000C137C(v110, v109, v108, v107, v106, v105);
    sub_1000C13B8(v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C1414);

    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v164);
    sub_1000C1274(v110, v109, v108, v107, v106, v105);
    if (v109)
    {
      v114 = *(_QWORD *)(v0 + 1360);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1328));
      swift_bridgeObjectRelease(v114);
      v100 = *(_QWORD *)(v0 + 1344);
      v99 = *(_QWORD *)(v0 + 1336);
    }
    else
    {
      v99 = 0;
      v100 = 0;
    }
    v103 = v174;
    v104 = v169;
    v101 = v154;
    v102 = v157;
  }
  else
  {
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = v174;
    v104 = v169;
  }
  v115 = *(void (**)(uint64_t, uint64_t))(v0 + 1256);
  v116 = *(_QWORD *)(v0 + 1216);
  v117 = *(_QWORD *)(v0 + 1192);
  v165 = *(_QWORD *)(v0 + 1136);
  v170 = *(_QWORD *)(v0 + 1128);
  v175 = *(_QWORD *)(v0 + 1152);
  v118 = *(_QWORD *)(v0 + 1112);
  v119 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v104));
  v120 = sub_1000BEA58(v103, v189, (uint64_t)buf, v180, v194, v101, v102, v99, v100);
  defaultLogger()(v120);
  v121 = swift_task_alloc(32);
  *(_QWORD *)(v121 + 16) = v120;
  Logger.sensitive(_:)(sub_1000C1348, v121);
  sub_1000C13B8(v212, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C11E4);
  swift_task_dealloc(v121);
  v115(v116, v117);
  sub_10006CA8C(v118, type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v175, v170);
  if (v210 == 2 || (v210 & 1) != 0)
  {

    v204 = 0;
  }
  sub_10000CE40(v198);
  v150 = v120;
LABEL_56:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v133 = *(_QWORD *)(v0 + 1248);
  v134 = *(_QWORD *)(v0 + 1240);
  v135 = *(_QWORD *)(v0 + 1232);
  v136 = *(_QWORD *)(v0 + 1224);
  v137 = *(_QWORD *)(v0 + 1216);
  v138 = *(_QWORD *)(v0 + 1208);
  v139 = *(_QWORD *)(v0 + 1184);
  v140 = *(_QWORD *)(v0 + 1160);
  v141 = *(_QWORD *)(v0 + 1152);
  v152 = *(_QWORD *)(v0 + 1144);
  v155 = *(_QWORD *)(v0 + 1120);
  v158 = *(_QWORD *)(v0 + 1112);
  v161 = *(_QWORD *)(v0 + 1088);
  v166 = *(_QWORD *)(v0 + 1080);
  v171 = *(_QWORD *)(v0 + 1072);
  v176 = *(_QWORD *)(v0 + 1064);
  v181 = *(_QWORD *)(v0 + 1056);
  bufc = *(uint8_t **)(v0 + 1032);
  v190 = *(_QWORD *)(v0 + 1024);
  v195 = *(_QWORD *)(v0 + 1000);
  v201 = *(_QWORD *)(v0 + 992);
  v213 = *(_QWORD *)(v0 + 984);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1176) + 8))(v139, *(_QWORD *)(v0 + 1168));
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v140);
  swift_task_dealloc(v141);
  swift_task_dealloc(v152);
  swift_task_dealloc(v155);
  swift_task_dealloc(v158);
  swift_task_dealloc(v161);
  swift_task_dealloc(v166);
  swift_task_dealloc(v171);
  swift_task_dealloc(v176);
  swift_task_dealloc(v181);
  swift_task_dealloc(bufc);
  swift_task_dealloc(v190);
  swift_task_dealloc(v195);
  swift_task_dealloc(v201);
  swift_task_dealloc(v213);
  return (*(uint64_t (**)(void *, id, void *, _QWORD))(v0 + 8))(v151, v150, v204, v210);
}

uint64_t sub_1000B4D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 1280);
  v2 = *(_QWORD *)(v0 + 1152);
  v3 = *(_QWORD *)(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1128);
  v5 = *(_QWORD *)(v0 + 1112);
  v6 = *(_QWORD *)(v0 + 984);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 968));
  swift_errorRetain(v1);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v6, 0, v7, 0xD000000000000065, 0x8000000100134400, 0xD00000000000002FLL, 0x8000000100134A50, 372);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  sub_10006CA8C(v5, type metadata accessor for IdentityReaderAuthenticator);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v11 = *(_QWORD *)(v0 + 1248);
  v12 = *(_QWORD *)(v0 + 1240);
  v13 = *(_QWORD *)(v0 + 1232);
  v14 = *(_QWORD *)(v0 + 1224);
  v15 = *(_QWORD *)(v0 + 1216);
  v16 = *(_QWORD *)(v0 + 1208);
  v17 = *(_QWORD *)(v0 + 1184);
  v18 = *(_QWORD *)(v0 + 1160);
  v19 = *(_QWORD *)(v0 + 1152);
  v21 = *(_QWORD *)(v0 + 1144);
  v22 = *(_QWORD *)(v0 + 1120);
  v23 = *(_QWORD *)(v0 + 1112);
  v24 = *(_QWORD *)(v0 + 1088);
  v25 = *(_QWORD *)(v0 + 1080);
  v26 = *(_QWORD *)(v0 + 1072);
  v27 = *(_QWORD *)(v0 + 1064);
  v28 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1032);
  v30 = *(_QWORD *)(v0 + 1024);
  v31 = *(_QWORD *)(v0 + 1000);
  v32 = *(_QWORD *)(v0 + 992);
  v33 = *(_QWORD *)(v0 + 984);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 1176) + 8))(v17, *(_QWORD *)(v0 + 1168));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5034(void *a1, Swift::Int a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v11;

  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v11 = a3;
  v5 = objc_msgSend(a1, "description");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return v11;
}

uint64_t sub_1000B50D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  v6 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  v5[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001776C0);
  v5[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[19] = v9;
  v5[20] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ISO18013ReaderRequest.DocRequest(0);
  v5[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[22] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v12);
  v5[24] = swift_task_alloc(v12);
  v5[25] = swift_task_alloc(v12);
  v13 = type metadata accessor for DIPError.Code(0);
  v5[26] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[27] = v14;
  v5[28] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v5[29] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[30] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v17);
  v5[32] = swift_task_alloc(v17);
  v5[33] = swift_task_alloc(v17);
  v5[34] = swift_task_alloc(v17);
  v5[35] = swift_task_alloc(v17);
  v5[36] = swift_task_alloc(v17);
  return swift_task_switch(sub_1000B5238, 0, 0);
}

uint64_t sub_1000B5238(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *(*v26)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t type[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];

  v2 = v1[13];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v96 = v1[36];
    v89 = v1[30];
    v92 = v1[29];
    v7 = v1[12];
    v6 = v1[13];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136446210;
    v100[0] = v9;
    if (v6)
      v10 = v7;
    else
      v10 = 0;
    if (v6)
      v11 = v2;
    else
      v11 = 0xE000000000000000;
    swift_bridgeObjectRetain(v2);
    v1[9] = sub_10003FA80(v10, v11, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 9, v1 + 10, v8 + 4);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PresentmentRequestInterpreter: chooseDocRequest regionCode: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8);
    v13 = v12(v96, v92);
  }
  else
  {
    v14 = v1[36];
    v15 = v1[29];
    v16 = v1[30];
    swift_bridgeObjectRelease_n(v2, 2);

    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    v13 = v12(v14, v15);
  }
  v1[37] = v12;
  v17 = v1[11];
  v18 = *(_QWORD *)(v17 + 16);
  v1[38] = v18;
  if (v18)
  {
    v19 = *(_QWORD *)(v1[14] + 16);
    if (v1[13])
    {
      v20 = v1 + 6;
      v21 = swift_allocObject(&unk_10016A720, 24, 7);
      v1[39] = v21;
      *(_QWORD *)(v21 + 16) = v19;
      v22 = swift_allocObject(&unk_10016A748, 32, 7);
      v1[40] = v22;
      *(_QWORD *)(v22 + 16) = sub_1000C1180;
      *(_QWORD *)(v22 + 24) = v21;
      v23 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
      swift_bridgeObjectRetain(v19);
      swift_retain(v21);
      v24 = (_QWORD *)swift_task_alloc(v23);
      v1[41] = v24;
      v25 = sub_100008E84(&qword_1001776C8);
      *v24 = v1;
      v24[1] = sub_1000B5A6C;
      v26 = sub_100039668;
      return AsyncCoreDataContainer.performRead<A>(_:)(v20, v26, v22, v25);
    }
    if (v18 != 1)
    {
      v20 = v1 + 2;
      v61 = swift_allocObject(&unk_10016A6D0, 24, 7);
      v1[44] = v61;
      *(_QWORD *)(v61 + 16) = v19;
      v22 = swift_allocObject(&unk_10016A6F8, 32, 7);
      v1[45] = v22;
      *(_QWORD *)(v22 + 16) = sub_1000C1148;
      *(_QWORD *)(v22 + 24) = v61;
      v62 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
      swift_bridgeObjectRetain(v19);
      swift_retain(v61);
      v63 = (_QWORD *)swift_task_alloc(v62);
      v1[46] = v63;
      v25 = sub_100008E84(&qword_1001770B0);
      *v63 = v1;
      v63[1] = sub_1000B61EC;
      v26 = sub_1000C1168;
      return AsyncCoreDataContainer.performRead<A>(_:)(v20, v26, v22, v25);
    }
    v37 = v1[24];
    v39 = v1[21];
    v38 = v1[22];
    v40 = v17 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    defaultLogger()(v13);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
    v42 = v41(v37, v40, v39);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.debug.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = v1[33];
    v47 = v1[29];
    v48 = v1[24];
    if (v45)
    {
      v98 = v40;
      v49 = v1[20];
      v74 = v1[19];
      v94 = v41;
      v51 = v1[17];
      v50 = v1[18];
      v76 = v1[16];
      v78 = v1[15];
      v91 = v1[33];
      v84 = v1[21];
      v81 = v1[22];
      v88 = v1[29];
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = swift_slowAlloc(32, -1);
      v100[0] = v86;
      *(_DWORD *)v52 = 136446210;
      ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v86);
      CBOREncodedCBOR.value.getter(v50);
      v53 = v49;
      v40 = v98;
      v54.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v74 + 8))(v53, v50);
      v55 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v54);
      v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v51, v78);
      v1[5] = sub_10003FA80(v55, v57, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v52 + 4);
      v58 = v57;
      v41 = v94;
      swift_bridgeObjectRelease(v58);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v48, v84);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "PresentmentRequestInterpreter: Request for one doc request of type %{public}s", v52, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      v60 = v88;
      v59 = v91;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v1[22] + 8))(v1[24], v1[21]);

      v59 = v46;
      v60 = v47;
    }
    v12(v59, v60);
    v41(v1[10], v40, v1[21]);
    v65 = v1[35];
    v67 = v1[33];
    v66 = v1[34];
    v69 = v1[31];
    v68 = v1[32];
    v70 = v1[28];
    v72 = v1[24];
    v71 = v1[25];
    v73 = v1[23];
    v95 = v1[20];
    v99 = v1[17];
    swift_task_dealloc(v1[36]);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v95);
    swift_task_dealloc(v99);
    v36 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    v27 = v1[28];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[27] + 104))(v27, enum case for DIPError.Code.idcsInvalidReaderRequest(_:), v1[26]);
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000030, 0x80000001001349E0, 0, v27, 0, v28, 0xD000000000000065, 0x8000000100134400, 0xD000000000000022, 0x80000001001349B0, 393);
    swift_willThrow(v32);
    v75 = v1[36];
    v77 = v1[35];
    *(_QWORD *)type = v1[34];
    v80 = v1[33];
    v82 = v1[32];
    v83 = v1[31];
    v33 = v1[28];
    v85 = v1[25];
    v87 = v1[24];
    v90 = v1[23];
    v93 = v1[20];
    v97 = v1[17];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[27] + 104))(v33, enum case for DIPError.Code.internalError(_:), v1[26]);
    swift_errorRetain(v31);
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v29, v30, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v31, v33, 0, v34, 0xD000000000000065, 0x8000000100134400, 0xD000000000000022, 0x80000001001349B0, 446);
    swift_willThrow(v35);
    swift_errorRelease(v31);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v33);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v90);
    swift_task_dealloc(v93);
    swift_task_dealloc(v97);
    v36 = (uint64_t (*)(void))v1[1];
  }
  return v36();
}

uint64_t sub_1000B5A6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B5AE8;
  }
  else
  {
    v5 = v2[39];
    swift_release(v2[40]);
    swift_release(v5);
    v2[43] = v2[6];
    v4 = sub_1000B5CAC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B5AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 320));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 208));
  swift_errorRetain(v2);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v9, 0xD000000000000065, 0x8000000100134400, 0xD000000000000022, 0x80000001001349B0, 446);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v14);
  swift_task_dealloc(v8);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B5CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v2 = *(_QWORD *)(v1 + 344);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 344);
    v63 = *(_QWORD *)(v1 + 280);
    v67 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v61 = *(_QWORD *)(v1 + 232);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v71 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain(v6);
    v9 = sub_100008E84(&qword_1001770B0);
    v10 = Dictionary.description.getter(v6, &type metadata for String, v9, &protocol witness table for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 64) = sub_10003FA80(v10, v12, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PresentmentRequestInterpreter: docTypesAndRegionsDictionary active on device: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v67(v63, v61);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v14 = *(_QWORD *)(v1 + 280);
    v15 = *(_QWORD *)(v1 + 232);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 344), 2);

    v13(v14, v15);
  }
  v16 = *(_QWORD *)(v1 + 176);
  v59 = *(_QWORD *)(v1 + 128);
  v60 = *(_QWORD *)(v1 + 152);
  v17 = *(_QWORD *)(v1 + 88);
  v57 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v58 = v17 + v57;
  v18 = swift_bridgeObjectRetain(v17);
  v19 = 0;
  while (1)
  {
    v20 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    v21 = *(_QWORD *)(v1 + 160);
    v23 = *(_QWORD *)(v1 + 136);
    v22 = *(_QWORD *)(v1 + 144);
    v24 = *(_QWORD *)(v1 + 120);
    v64 = *(_QWORD *)(v1 + 104);
    v68 = *(_QWORD *)(v1 + 344);
    v62 = *(_QWORD *)(v1 + 96);
    v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
    v26 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, __n128))v25)(*(_QWORD *)(v1 + 200), v58 + *(_QWORD *)(v16 + 72) * v19, *(_QWORD *)(v1 + 168), v18);
    ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v26);
    CBOREncodedCBOR.value.getter(v22);
    v27.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v60 + 8))(v21, v22);
    v28 = v16;
    v29 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v27);
    v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v23, v24);
    if ((sub_1000BF2F4(v29, v31, v68, v62, v64) & 1) != 0)
    {
      v37 = *(_QWORD *)(v1 + 344);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v38 = swift_bridgeObjectRelease(v37);
      defaultLogger()(v38);
      swift_bridgeObjectRetain(v31);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      v42 = os_log_type_enabled(v40, v41);
      v43 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
      v44 = *(_QWORD *)(v1 + 272);
      v45 = *(_QWORD *)(v1 + 232);
      if (v42)
      {
        v69 = *(_QWORD *)(v1 + 272);
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = v43;
        v47 = swift_slowAlloc(32, -1);
        v71 = v47;
        *(_DWORD *)v46 = 136446210;
        swift_bridgeObjectRetain(v31);
        *(_QWORD *)(v1 + 56) = sub_10003FA80(v29, v31, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v46 + 4);
        swift_bridgeObjectRelease_n(v31, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "PresentmentRequestInterpreter: doctype %{public}s present on device", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        v65(v69, v45);
      }
      else
      {
        swift_bridgeObjectRelease_n(v31, 2);

        v43(v44, v45);
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 176) + 32))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 168));
      goto LABEL_13;
    }
    v32 = *(_QWORD *)(v1 + 304);
    (*(void (**)(_QWORD, _QWORD))(v28 + 8))(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 168));
    swift_bridgeObjectRelease(v31);
    ++v19;
    v16 = v28;
    if (v20 == v32)
    {
      v33 = *(_QWORD *)(v1 + 344);
      v34 = *(_QWORD *)(v1 + 168);
      v36 = *(_QWORD *)(v1 + 80);
      v35 = *(_QWORD *)(v1 + 88);
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v33);
      v25(v36, v35 + v57, v34);
LABEL_13:
      v48 = *(_QWORD *)(v1 + 280);
      v50 = *(_QWORD *)(v1 + 264);
      v49 = *(_QWORD *)(v1 + 272);
      v52 = *(_QWORD *)(v1 + 248);
      v51 = *(_QWORD *)(v1 + 256);
      v53 = *(_QWORD *)(v1 + 224);
      v55 = *(_QWORD *)(v1 + 192);
      v54 = *(_QWORD *)(v1 + 200);
      v56 = *(_QWORD *)(v1 + 184);
      v66 = *(_QWORD *)(v1 + 160);
      v70 = *(_QWORD *)(v1 + 136);
      swift_task_dealloc(*(_QWORD *)(v1 + 288));
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v66);
      swift_task_dealloc(v70);
      (*(void (**)(void))(v1 + 8))();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000B61EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B6268;
  }
  else
  {
    v5 = v2[44];
    swift_release(v2[45]);
    swift_release(v5);
    v2[48] = v2[2];
    v4 = sub_1000B642C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B6268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 352);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 208));
  swift_errorRetain(v2);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v9, 0xD000000000000065, 0x8000000100134400, 0xD000000000000022, 0x80000001001349B0, 446);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v14);
  swift_task_dealloc(v8);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B642C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, unint64_t, _QWORD);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = *(_QWORD *)(v1 + 384);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v1 + 384);
    v61 = *(_QWORD *)(v1 + 256);
    v65 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v59 = *(_QWORD *)(v1 + 232);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v69 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = swift_bridgeObjectRetain(v6);
    v10 = Set.description.getter(v9);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 32) = sub_10003FA80(v10, v12, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "PresentmentRequestInterpreter: Doctypes active on device: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v65(v61, v59);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
    v14 = *(_QWORD *)(v1 + 256);
    v15 = *(_QWORD *)(v1 + 232);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 384), 2);

    v13(v14, v15);
  }
  v16 = *(_QWORD *)(v1 + 176);
  v60 = *(_QWORD *)(v1 + 128);
  v62 = *(_QWORD *)(v1 + 152);
  v17 = *(_QWORD *)(v1 + 88);
  v57 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v58 = v17 + v57;
  v18 = swift_bridgeObjectRetain(v17);
  v19 = 0;
  while (1)
  {
    v20 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    v66 = *(_QWORD *)(v1 + 384);
    v21 = *(_QWORD *)(v1 + 160);
    v23 = *(_QWORD *)(v1 + 136);
    v22 = *(_QWORD *)(v1 + 144);
    v24 = *(_QWORD *)(v1 + 120);
    v25 = *(void (**)(_QWORD, unint64_t, _QWORD))(v16 + 16);
    v26 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, __n128))v25)(*(_QWORD *)(v1 + 184), v58 + *(_QWORD *)(v16 + 72) * v19, *(_QWORD *)(v1 + 168), v18);
    ISO18013ReaderRequest.DocRequest.itemsRequest.getter(v26);
    CBOREncodedCBOR.value.getter(v22);
    v27.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v62 + 8))(v21, v22);
    v28 = v16;
    v29 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v27);
    v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v23, v24);
    if ((sub_1000097C4(v29, v31, v66) & 1) != 0)
    {
      v37 = *(_QWORD *)(v1 + 384);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 88));
      v38 = swift_bridgeObjectRelease(v37);
      defaultLogger()(v38);
      swift_bridgeObjectRetain(v31);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      v42 = os_log_type_enabled(v40, v41);
      v43 = *(void (**)(uint64_t, uint64_t))(v1 + 296);
      v44 = *(_QWORD *)(v1 + 248);
      v45 = *(_QWORD *)(v1 + 232);
      if (v42)
      {
        v67 = *(_QWORD *)(v1 + 248);
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = v43;
        v47 = swift_slowAlloc(32, -1);
        v69 = v47;
        *(_DWORD *)v46 = 136446210;
        swift_bridgeObjectRetain(v31);
        *(_QWORD *)(v1 + 24) = sub_10003FA80(v29, v31, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v46 + 4);
        swift_bridgeObjectRelease_n(v31, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "PresentmentRequestInterpreter: Selecting matching doctype %{public}s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        v63(v67, v45);
      }
      else
      {
        swift_bridgeObjectRelease_n(v31, 2);

        v43(v44, v45);
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 176) + 32))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 168));
      goto LABEL_13;
    }
    v32 = *(_QWORD *)(v1 + 304);
    (*(void (**)(_QWORD, _QWORD))(v28 + 8))(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 168));
    swift_bridgeObjectRelease(v31);
    ++v19;
    v16 = v28;
    if (v20 == v32)
    {
      v33 = *(_QWORD *)(v1 + 384);
      v34 = *(_QWORD *)(v1 + 168);
      v36 = *(_QWORD *)(v1 + 80);
      v35 = *(_QWORD *)(v1 + 88);
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(v33);
      v25(v36, v35 + v57, v34);
LABEL_13:
      v48 = *(_QWORD *)(v1 + 280);
      v50 = *(_QWORD *)(v1 + 264);
      v49 = *(_QWORD *)(v1 + 272);
      v52 = *(_QWORD *)(v1 + 248);
      v51 = *(_QWORD *)(v1 + 256);
      v53 = *(_QWORD *)(v1 + 224);
      v55 = *(_QWORD *)(v1 + 192);
      v54 = *(_QWORD *)(v1 + 200);
      v56 = *(_QWORD *)(v1 + 184);
      v64 = *(_QWORD *)(v1 + 160);
      v68 = *(_QWORD *)(v1 + 136);
      swift_task_dealloc(*(_QWORD *)(v1 + 288));
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v64);
      swift_task_dealloc(v68);
      (*(void (**)(void))(v1 + 8))();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000B6948@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD *)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRetain(a1);
  v7 = sub_1000BEE18(a1);
  swift_bridgeObjectRelease(a1);
  v8 = a2(v7);
  result = swift_release(v7);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_1000B69CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char v27;

  *(_QWORD *)(v9 + 192) = v26;
  *(_QWORD *)(v9 + 200) = v8;
  *(_BYTE *)(v9 + 556) = v27;
  *(_QWORD *)(v9 + 176) = a8;
  *(_QWORD *)(v9 + 184) = v25;
  *(_QWORD *)(v9 + 160) = a6;
  *(_QWORD *)(v9 + 168) = a7;
  *(_QWORD *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 152) = a5;
  *(_QWORD *)(v9 + 128) = a2;
  *(_QWORD *)(v9 + 136) = a3;
  *(_QWORD *)(v9 + 120) = a1;
  v10 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v9 + 208) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 216) = v11;
  *(_QWORD *)(v9 + 224) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPError(0);
  *(_QWORD *)(v9 + 232) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 240) = v13;
  *(_QWORD *)(v9 + 248) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PresentmentProposal(0);
  *(_QWORD *)(v9 + 256) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 264) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 272) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 280) = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_1001768E0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 288) = swift_task_alloc(v17);
  *(_QWORD *)(v9 + 296) = swift_task_alloc(v17);
  v18 = type metadata accessor for ISO18013ReaderRequest.ItemsRequest(0);
  *(_QWORD *)(v9 + 304) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 312) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 320) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 328) = swift_task_alloc(v20);
  v21 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 336) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v9 + 344) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 352) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 360) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 368) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 376) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 384) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 392) = swift_task_alloc(v23);
  return swift_task_switch(sub_1000B6B80, 0, 0);
}

uint64_t sub_1000B6B80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter findProposals", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[49];
  v7 = v1[42];
  v8 = v1[43];
  v9 = v1[25];
  v10 = v1[17];

  v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[50] = v11;
  v11(v6, v7);
  v12 = *(_QWORD *)(v9 + 16);
  v1[51] = v12;
  v13 = swift_bridgeObjectRetain(v12);
  v14 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v13);
  v16 = v15;
  v1[6] = _swiftEmptyArrayStorage;
  if (v10)
  {
    v17 = v1[16];
    v18 = v1[17];
    v19 = (_QWORD *)swift_allocObject(&unk_10016A680, 56, 7);
    v1[52] = v19;
    v19[2] = v12;
    v19[3] = v14;
    v19[4] = v16;
    v19[5] = v17;
    v19[6] = v18;
    v20 = swift_allocObject(&unk_10016A6A8, 32, 7);
    v1[53] = v20;
    *(_QWORD *)(v20 + 16) = sub_1000C1104;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_bridgeObjectRetain_n(v18, 2);
    swift_retain(v19);
    v22 = (_QWORD *)swift_task_alloc(v21);
    v1[54] = v22;
    v23 = sub_100008E84(&qword_100177CB0);
    *v22 = v1;
    v22[1] = sub_1000B6DF4;
    v24 = v1 + 10;
  }
  else
  {
    v25 = (_QWORD *)swift_allocObject(&unk_10016A630, 40, 7);
    v1[57] = v25;
    v25[2] = v12;
    v25[3] = v14;
    v25[4] = v16;
    v20 = swift_allocObject(&unk_10016A658, 32, 7);
    v1[58] = v20;
    *(_QWORD *)(v20 + 16) = sub_1000C1070;
    *(_QWORD *)(v20 + 24) = v25;
    v26 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
    swift_retain(v25);
    v27 = (_QWORD *)swift_task_alloc(v26);
    v1[59] = v27;
    v23 = sub_100008E84(&qword_100177CB0);
    *v27 = v1;
    v27[1] = sub_1000B7830;
    v24 = v1 + 5;
  }
  return AsyncCoreDataContainer.performRead<A>(_:)(v24, sub_100039668, v20, v23);
}

uint64_t sub_1000B6DF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B771C;
  }
  else
  {
    v5 = v2[53];
    swift_release(v2[52]);
    swift_release(v5);
    v2[56] = v2[10];
    v4 = sub_1000B6E70;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B6E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  char v117;

  v1 = v0 + 48;
  v2 = *(_QWORD *)(v0 + 448);
  v112 = v0 + 64;
  if (*(_QWORD *)(v2 + 16))
  {
    v107 = *(_QWORD *)(v2 + 16);
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 312);
    v7 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 136);
    defaultLogger()(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
    swift_retain_n(v7, 2);
    swift_bridgeObjectRetain(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(_QWORD *)(v0 + 408);
      v101 = *(_QWORD *)(v0 + 384);
      v103 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 400);
      v13 = *(_QWORD *)(v0 + 328);
      v99 = *(_QWORD *)(v0 + 336);
      v93 = *(_QWORD *)(v0 + 312);
      v94 = *(_QWORD *)(v0 + 304);
      v95 = *(_QWORD *)(v0 + 200);
      v96 = *(_QWORD *)(v0 + 136);
      v97 = *(_QWORD *)(v0 + 128);
      v14 = swift_slowAlloc(32, -1);
      v98 = swift_slowAlloc(96, -1);
      v114 = v98;
      v15.n128_u64[0] = 136446722;
      *(_DWORD *)v14 = 136446722;
      v16 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v15);
      v18 = v17;
      *(_QWORD *)(v0 + 96) = sub_10003FA80(v16, v17, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 4);
      swift_bridgeObjectRelease(v18);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v13, v94);
      *(_WORD *)(v14 + 12) = 2082;
      v19 = swift_bridgeObjectRetain(v12);
      v20 = Set.description.getter(v19);
      v22 = v21;
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(v0 + 104) = sub_10003FA80(v20, v22, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v14 + 14);
      swift_release_n(v95, 2);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v14 + 22) = 2082;
      swift_bridgeObjectRetain(v96);
      *(_QWORD *)(v0 + 112) = sub_10003FA80(v97, v96, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v14 + 24);
      swift_bridgeObjectRelease_n(v96, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "PresentmentRequestInterpreter: Identifiers found with doctype %{public}s in partitions %{public}s for region %{public}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v98, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v23 = v103(v101, v99);
    }
    else
    {
      v48 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 400);
      v49 = *(_QWORD *)(v0 + 384);
      v50 = *(_QWORD *)(v0 + 336);
      v51 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 136);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));

      swift_bridgeObjectRelease_n(v52, 2);
      swift_release_n(v51, 2);
      v23 = v48(v49, v50);
    }
    v53 = *(_QWORD *)(v0 + 448);
    defaultLogger()(v23);
    swift_bridgeObjectRetain(v53);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = *(_QWORD *)(v0 + 448);
    v1 = v0 + 48;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v59 = 134349056;
      *(_QWORD *)(v0 + 88) = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v59 + 4);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "PresentmentRequestInterpreter: regionCredentialIdentifiers count %{public}ld", v59, 0xCu);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
    }

    v60 = *(_QWORD *)(v0 + 448);
    (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 336));
    v25 = sub_1000AF768(v60);
    v26 = *(_QWORD **)(v0 + 48);
    if (v26[2])
      goto LABEL_12;
LABEL_5:
    v28 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 304);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 120);
    v32 = swift_bridgeObjectRelease(v26);
    defaultLogger()(v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v31, v29);
    v33 = swift_retain_n(v30, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = *(_QWORD *)(v0 + 408);
      v110 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      v105 = *(_QWORD *)(v0 + 336);
      v108 = *(_QWORD *)(v0 + 368);
      v37 = *(_QWORD *)(v0 + 320);
      v100 = *(_QWORD *)(v0 + 312);
      v102 = *(_QWORD *)(v0 + 304);
      v104 = *(_QWORD *)(v0 + 200);
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v114 = v39;
      v40.n128_u64[0] = 136446466;
      *(_DWORD *)v38 = 136446466;
      v41 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v40);
      v43 = v42;
      *(_QWORD *)(v0 + 64) = sub_10003FA80(v41, v42, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v0 + 72, v38 + 4);
      swift_bridgeObjectRelease(v43);
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v37, v102);
      *(_WORD *)(v38 + 12) = 2082;
      v44 = swift_bridgeObjectRetain(v36);
      v45 = Set.description.getter(v44);
      v47 = v46;
      swift_bridgeObjectRelease(v36);
      *(_QWORD *)(v0 + 72) = sub_10003FA80(v45, v47, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v38 + 14);
      swift_release_n(v104, 2);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "PresentmentRequestInterpreter: Did not find any documents with doctype %{public}s in partitions %{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v110(v108, v105);
    }
    else
    {
      v80 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
      v81 = *(_QWORD *)(v0 + 368);
      v82 = *(_QWORD *)(v0 + 336);
      v83 = *(_QWORD *)(v0 + 200);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));

      swift_release_n(v83, 2);
      v80(v81, v82);
    }
    goto LABEL_19;
  }
  v24 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease(v2);
  v25 = swift_bridgeObjectRelease(v24);
  v26 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_5;
LABEL_12:
  defaultLogger()(v25);
  swift_bridgeObjectRetain(v26);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v64 = 134349056;
    *(_QWORD *)(v0 + 56) = v26[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v112, v64 + 4);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "PresentmentRequestInterpreter: Found %{public}ld candidate credentials", v64, 0xCu);
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v26);
  }

  (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 336));
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v65 = *(_QWORD **)(v0 + 48);
  *(_QWORD *)(v0 + 496) = v65;
  v66 = v65[2];
  *(_QWORD *)(v0 + 504) = v66;
  if (v66)
  {
    *(_DWORD *)(v0 + 552) = enum case for DIPError.Code.internalError(_:);
    *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 512) = 0;
    v68 = v65[4];
    v67 = v65[5];
    *(_QWORD *)(v0 + 528) = v67;
    v69 = dword_100177494;
    swift_bridgeObjectRetain(v67);
    v70 = (_QWORD *)swift_task_alloc(v69);
    *(_QWORD *)(v0 + 536) = v70;
    *v70 = v0;
    v70[1] = sub_1000B7E80;
    v71 = *(_QWORD *)(v0 + 296);
    v72 = *(_QWORD *)(v0 + 192);
    v73 = *(_OWORD *)(v0 + 176);
    v74 = *(_QWORD *)(v0 + 160);
    v75 = *(_QWORD *)(v0 + 168);
    v76 = *(_QWORD *)(v0 + 144);
    v77 = *(_QWORD *)(v0 + 152);
    v78 = *(_QWORD *)(v0 + 120);
    v117 = *(_BYTE *)(v0 + 556);
    v116 = v72;
    v115 = v73;
    return sub_1000B88B4(v71, v68, v67, v78, v76, v77, v74, v75);
  }
  swift_bridgeObjectRelease(v65);
LABEL_19:
  v84 = *(_QWORD *)(v0 + 384);
  v86 = *(_QWORD *)(v0 + 368);
  v85 = *(_QWORD *)(v0 + 376);
  v88 = *(_QWORD *)(v0 + 352);
  v87 = *(_QWORD *)(v0 + 360);
  v90 = *(_QWORD *)(v0 + 320);
  v89 = *(_QWORD *)(v0 + 328);
  v92 = *(_QWORD *)(v0 + 288);
  v91 = *(_QWORD *)(v0 + 296);
  v106 = *(_QWORD *)(v0 + 280);
  v109 = *(_QWORD *)(v0 + 272);
  v111 = *(_QWORD *)(v0 + 248);
  v113 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v106);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1000B771C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 424));
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  swift_release(v1);
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 272);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7830()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B7D84;
  }
  else
  {
    v5 = v2[58];
    swift_release(v2[57]);
    swift_release(v5);
    v2[61] = v2[5];
    v4 = sub_1000B78AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B78AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char v69;

  v2 = *(_QWORD *)(v1 + 488);
  *(_QWORD *)(v1 + 48) = v2;
  if (*(_QWORD *)(v2 + 16))
  {
    defaultLogger()(a1);
    swift_bridgeObjectRetain(v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v6 = 134349056;
      *(_QWORD *)(v1 + 56) = *(_QWORD *)(v2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v6 + 4);
      swift_bridgeObjectRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "PresentmentRequestInterpreter: Found %{public}ld candidate credentials", v6, 0xCu);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v2);
    }

    (*(void (**)(_QWORD, _QWORD))(v1 + 400))(*(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 336));
    swift_beginAccess(v1 + 48, v1 + 16, 0, 0);
    v27 = *(_QWORD **)(v1 + 48);
    *(_QWORD *)(v1 + 496) = v27;
    v28 = v27[2];
    *(_QWORD *)(v1 + 504) = v28;
    if (v28)
    {
      *(_DWORD *)(v1 + 552) = enum case for DIPError.Code.internalError(_:);
      *(_QWORD *)(v1 + 520) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v1 + 512) = 0;
      v30 = v27[4];
      v29 = v27[5];
      *(_QWORD *)(v1 + 528) = v29;
      v31 = dword_100177494;
      swift_bridgeObjectRetain(v29);
      v32 = (_QWORD *)swift_task_alloc(v31);
      *(_QWORD *)(v1 + 536) = v32;
      *v32 = v1;
      v32[1] = sub_1000B7E80;
      v33 = *(_QWORD *)(v1 + 296);
      v34 = *(_QWORD *)(v1 + 192);
      v35 = *(_OWORD *)(v1 + 176);
      v36 = *(_QWORD *)(v1 + 160);
      v37 = *(_QWORD *)(v1 + 168);
      v38 = *(_QWORD *)(v1 + 144);
      v39 = *(_QWORD *)(v1 + 152);
      v40 = *(_QWORD *)(v1 + 120);
      v69 = *(_BYTE *)(v1 + 556);
      v68 = v34;
      v67 = v35;
      return sub_1000B88B4(v33, v30, v29, v40, v38, v39, v36, v37);
    }
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 312);
    v7 = *(_QWORD *)(v1 + 320);
    v9 = *(_QWORD *)(v1 + 304);
    v10 = *(_QWORD *)(v1 + 200);
    v11 = *(_QWORD *)(v1 + 120);
    v12 = swift_bridgeObjectRelease(v2);
    defaultLogger()(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v9);
    v13 = swift_retain_n(v10, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = *(_QWORD *)(v1 + 408);
      v62 = *(_QWORD *)(v1 + 368);
      v64 = *(void (**)(uint64_t, uint64_t))(v1 + 400);
      v60 = *(_QWORD *)(v1 + 336);
      v17 = *(_QWORD *)(v1 + 320);
      v55 = *(_QWORD *)(v1 + 312);
      v56 = *(_QWORD *)(v1 + 304);
      v57 = *(_QWORD *)(v1 + 200);
      v18 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(64, -1);
      v66 = v58;
      v19.n128_u64[0] = 136446466;
      *(_DWORD *)v18 = 136446466;
      v20 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v19);
      v22 = v21;
      *(_QWORD *)(v1 + 64) = sub_10003FA80(v20, v21, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v18 + 4);
      swift_bridgeObjectRelease(v22);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v17, v56);
      *(_WORD *)(v18 + 12) = 2082;
      v23 = swift_bridgeObjectRetain(v16);
      v24 = Set.description.getter(v23);
      v26 = v25;
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(v1 + 72) = sub_10003FA80(v24, v26, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v18 + 14);
      swift_release_n(v57, 2);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "PresentmentRequestInterpreter: Did not find any documents with doctype %{public}s in partitions %{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v64(v62, v60);
    }
    else
    {
      v42 = *(void (**)(uint64_t, uint64_t))(v1 + 400);
      v43 = *(_QWORD *)(v1 + 368);
      v44 = *(_QWORD *)(v1 + 336);
      v45 = *(_QWORD *)(v1 + 200);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 312) + 8))(*(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 304));

      swift_release_n(v45, 2);
      v42(v43, v44);
    }
  }
  v46 = *(_QWORD *)(v1 + 384);
  v48 = *(_QWORD *)(v1 + 368);
  v47 = *(_QWORD *)(v1 + 376);
  v50 = *(_QWORD *)(v1 + 352);
  v49 = *(_QWORD *)(v1 + 360);
  v52 = *(_QWORD *)(v1 + 320);
  v51 = *(_QWORD *)(v1 + 328);
  v54 = *(_QWORD *)(v1 + 288);
  v53 = *(_QWORD *)(v1 + 296);
  v59 = *(_QWORD *)(v1 + 280);
  v61 = *(_QWORD *)(v1 + 272);
  v63 = *(_QWORD *)(v1 + 248);
  v65 = *(_QWORD *)(v1 + 224);
  swift_task_dealloc(*(_QWORD *)(v1 + 392));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1000B7D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 456);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  if (v0)
    v4 = sub_1000B81BC;
  else
    v4 = sub_1000B7EF0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B7EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  sub_10002E908(*(_QWORD *)(v0 + 296), v1, &qword_1001768E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 288);
    sub_1000150E8(*(_QWORD *)(v0 + 296), &qword_1001768E0);
    sub_1000150E8(v4, &qword_1001768E0);
    v5 = *(_QWORD *)(v0 + 520);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 520);
    v7 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 272);
    sub_1000C108C(*(_QWORD *)(v0 + 288), v7);
    sub_10006BC40(v7, v8, type metadata accessor for PresentmentProposal);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v5 = *(_QWORD *)(v0 + 520);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v5 = sub_1000A77F8(0, *(_QWORD *)(v5 + 16) + 1, 1, *(_QWORD *)(v0 + 520));
    v11 = *(_QWORD *)(v5 + 16);
    v10 = *(_QWORD *)(v5 + 24);
    if (v11 >= v10 >> 1)
      v5 = sub_1000A77F8(v10 > 1, v11 + 1, 1, v5);
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 280);
    v15 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v5 + 16) = v11 + 1;
    sub_1000C108C(v13, v5+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v11);
    sub_10006CA8C(v14, type metadata accessor for PresentmentProposal);
    sub_1000150E8(v12, &qword_1001768E0);
  }
  v16 = *(_QWORD *)(v0 + 512) + 1;
  if (v16 == *(_QWORD *)(v0 + 504))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 496));
    v17 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 376);
    v21 = *(_QWORD *)(v0 + 352);
    v20 = *(_QWORD *)(v0 + 360);
    v23 = *(_QWORD *)(v0 + 320);
    v22 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 288);
    v32 = *(_QWORD *)(v0 + 280);
    v33 = *(_QWORD *)(v0 + 272);
    v34 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v5);
  }
  else
  {
    *(_QWORD *)(v0 + 520) = v5;
    *(_QWORD *)(v0 + 512) = v16;
    v26 = *(_QWORD *)(v0 + 496) + 16 * v16;
    v28 = *(_QWORD *)(v26 + 32);
    v27 = *(_QWORD *)(v26 + 40);
    *(_QWORD *)(v0 + 528) = v27;
    v29 = dword_100177494;
    swift_bridgeObjectRetain(v27);
    v30 = (_QWORD *)swift_task_alloc(v29);
    *(_QWORD *)(v0 + 536) = v30;
    *v30 = v0;
    v30[1] = sub_1000B7E80;
    return sub_1000B88B4(*(_QWORD *)(v0 + 296), v28, v27, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  }
}

uint64_t sub_1000B81BC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 104))(v8, *(unsigned int *)(v0 + 552), *(_QWORD *)(v0 + 208));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v9, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001348D0, 544);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v7, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v12, v5, v7);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0xD000000000000021, 0x8000000100134980, v3);
  swift_errorRelease(v1);
  v2(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 512) + 1;
  if (v14 == *(_QWORD *)(v0 + 504))
  {
    v34 = *(_QWORD *)(v0 + 520);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 496));
    v15 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 368);
    v16 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 352);
    v18 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 328);
    v22 = *(_QWORD *)(v0 + 288);
    v23 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 272);
    v32 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v34);
  }
  else
  {
    *(_QWORD *)(v0 + 512) = v14;
    v25 = *(_QWORD *)(v0 + 496) + 16 * v14;
    v27 = *(_QWORD *)(v25 + 32);
    v26 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v0 + 528) = v26;
    v28 = dword_100177494;
    swift_bridgeObjectRetain(v26);
    v29 = (_QWORD *)swift_task_alloc(v28);
    *(_QWORD *)(v0 + 536) = v29;
    *v29 = v0;
    v29[1] = sub_1000B7E80;
    return sub_1000B88B4(*(_QWORD *)(v0 + 296), v27, v26, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  }
}

void sub_1000B849C(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, char **a6@<X8>)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char **v30;

  swift_bridgeObjectRetain(a1);
  v13 = sub_1000BEE18(a1);
  swift_bridgeObjectRelease(a1);
  v14 = sub_10011DE30((uint64_t)v13, a2, a3, a4, a5);
  swift_release(v13);
  if (!v6)
  {
    v30 = a6;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v29 = v14;
      else
        v29 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v15 = _CocoaArrayWrapper.endIndex.getter(v29);
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v14);
    }
    v16 = a6;
    if (v15)
    {
      if (v15 < 1)
      {
        __break(1u);
        return;
      }
      v17 = 0;
      v18 = (char *)_swiftEmptyArrayStorage;
      do
      {
        if ((v14 & 0xC000000000000001) != 0)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
        else
          v19 = *(id *)(v14 + 8 * v17 + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, "credentialIdentifier");
        if (v21)
        {
          v22 = v21;
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          v25 = v24;

          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = sub_1000A73AC(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
          v27 = *((_QWORD *)v18 + 2);
          v26 = *((_QWORD *)v18 + 3);
          if (v27 >= v26 >> 1)
            v18 = sub_1000A73AC((char *)(v26 > 1), v27 + 1, 1, v18);
          *((_QWORD *)v18 + 2) = v27 + 1;
          v28 = &v18[16 * v27];
          *((_QWORD *)v28 + 4) = v23;
          *((_QWORD *)v28 + 5) = v25;
          v16 = v30;
        }
        else
        {

        }
        ++v17;
      }
      while (v15 != v17);
    }
    else
    {
      v18 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(v14, 2);
    *v16 = v18;
  }
}

void sub_1000B86AC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;

  swift_bridgeObjectRetain(a1);
  v9 = sub_1000BEE18(a1);
  swift_bridgeObjectRelease(a1);
  v10 = sub_10011EA90((uint64_t)v9, a2, a3);
  swift_release(v9);
  if (!v4)
  {
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v25 = v10;
      else
        v25 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v25);
      if (v11)
        goto LABEL_4;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v11)
      {
LABEL_4:
        if (v11 < 1)
        {
          __break(1u);
          return;
        }
        v12 = 0;
        v13 = (char *)_swiftEmptyArrayStorage;
        do
        {
          if ((v10 & 0xC000000000000001) != 0)
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
          else
            v14 = *(id *)(v10 + 8 * v12 + 32);
          v15 = v14;
          v16 = objc_msgSend(v14, "credentialIdentifier");
          if (v16)
          {
            v17 = v16;
            v18 = a4;
            v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
            v21 = v20;

            if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
              v13 = sub_1000A73AC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
            v23 = *((_QWORD *)v13 + 2);
            v22 = *((_QWORD *)v13 + 3);
            if (v23 >= v22 >> 1)
              v13 = sub_1000A73AC((char *)(v22 > 1), v23 + 1, 1, v13);
            *((_QWORD *)v13 + 2) = v23 + 1;
            v24 = &v13[16 * v23];
            *((_QWORD *)v24 + 4) = v19;
            *((_QWORD *)v24 + 5) = v21;
            a4 = v18;
          }
          else
          {

          }
          ++v12;
        }
        while (v11 != v12);
        goto LABEL_22;
      }
    }
    v13 = (char *)_swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease_n(v10, 2);
    *a4 = v13;
  }
}

uint64_t sub_1000B88B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  char v20;

  *(_QWORD *)(v9 + 536) = v8;
  *(_BYTE *)(v9 + 760) = v20;
  *(_QWORD *)(v9 + 528) = v19;
  *(_OWORD *)(v9 + 512) = v18;
  *(_QWORD *)(v9 + 496) = a7;
  *(_QWORD *)(v9 + 504) = a8;
  *(_QWORD *)(v9 + 480) = a5;
  *(_QWORD *)(v9 + 488) = a6;
  *(_QWORD *)(v9 + 464) = a3;
  *(_QWORD *)(v9 + 472) = a4;
  *(_QWORD *)(v9 + 448) = a1;
  *(_QWORD *)(v9 + 456) = a2;
  *(_QWORD *)(v9 + 544) = *v8;
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100176828) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 552) = swift_task_alloc(v10);
  *(_QWORD *)(v9 + 560) = swift_task_alloc(v10);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  *(_QWORD *)(v9 + 568) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DIPSignpost(0);
  *(_QWORD *)(v9 + 576) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 584) = v13;
  *(_QWORD *)(v9 + 592) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 600) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 608) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 616) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 624) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 632) = swift_task_alloc(v16);
  return swift_task_switch(sub_1000B89DC, 0, 0);
}

uint64_t sub_1000B89DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter buildProposal", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 632);
  v7 = *(_QWORD *)(v1 + 608);
  v8 = *(_QWORD *)(v1 + 600);
  v9 = *(_QWORD *)(v1 + 568);
  v29 = *(_QWORD *)(v1 + 544);
  v10 = *(_QWORD *)(v1 + 536);
  v27 = *(void **)(v1 + 520);
  v28 = *(_QWORD *)(v1 + 496);
  v25 = *(_QWORD *)(v1 + 480);
  v26 = *(_QWORD *)(v1 + 488);
  v11 = *(_QWORD *)(v1 + 464);
  v24 = *(_QWORD *)(v1 + 456);

  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v1 + 640) = v12;
  v13 = v12(v6, v8);
  static IDCSSignposts.presentmentBuildProposal.getter(v13);
  DIPSignpost.init(_:)(v9);
  v14 = *(_QWORD *)(v10 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_presentmentKeySelectionProvider);
  v15 = *(_QWORD *)(v10 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_credentialKeyManager);
  v16 = *(_QWORD *)(v10 + 32);
  sub_100025938(v10 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder, v1 + 352);
  v17 = (_QWORD *)swift_allocObject(&unk_10016A590, 136, 7);
  *(_QWORD *)(v1 + 648) = v17;
  v17[2] = v24;
  v17[3] = v11;
  v17[4] = v14;
  v17[5] = v25;
  v17[6] = v26;
  v17[7] = v27;
  v17[8] = v15;
  v17[9] = v16;
  v17[10] = v28;
  sub_10002597C((__int128 *)(v1 + 352), (uint64_t)(v17 + 11));
  v17[16] = v29;
  swift_bridgeObjectRetain(v11);
  swift_retain(v14);
  sub_10000B178(v25, v26);
  v18 = swift_allocObject(&unk_10016A5B8, 32, 7);
  *(_QWORD *)(v1 + 656) = v18;
  *(_QWORD *)(v18 + 16) = &unk_100177690;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  v20 = v27;
  swift_retain(v15);
  swift_retain(v17);
  v21 = (_QWORD *)swift_task_alloc(v19);
  *(_QWORD *)(v1 + 664) = v21;
  v22 = sub_100008E84(&qword_1001776A8);
  *v21 = v1;
  v21[1] = sub_1000B8C3C;
  return AsyncCoreDataContainer.read<A>(_:)(v1 + 16, &unk_1001776A0, v18, v22);
}

uint64_t sub_1000B8C3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B8E64;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 656);
    swift_release(*(_QWORD *)(v2 + 648));
    swift_release(v5);
    v4 = sub_1000B8CB4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B8CB4()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10002E908(v0 + 16, v0 + 128, &qword_1001776A8);
  if (*(_QWORD *)(v0 + 136))
  {
    v1 = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 320) = v1;
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 224);
    v2 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 256) = v2;
    v3 = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 288) = v3;
    v4 = (_QWORD *)swift_task_alloc(dword_10017749C);
    *(_QWORD *)(v0 + 680) = v4;
    *v4 = v0;
    v4[1] = sub_1000B8F48;
    return sub_1000BC0B0(*(_QWORD *)(v0 + 472), v0 + 280, *(_BYTE *)(v0 + 760));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 448);
    sub_1000150E8(v0 + 16, &qword_1001776A8);
    sub_1000150E8(v0 + 128, &qword_1001776A8);
    v7 = type metadata accessor for PresentmentProposal(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    v8 = *(_QWORD *)(v0 + 632);
    v9 = *(_QWORD *)(v0 + 624);
    v10 = *(_QWORD *)(v0 + 616);
    v11 = *(_QWORD *)(v0 + 592);
    v12 = *(_QWORD *)(v0 + 584);
    v13 = *(_QWORD *)(v0 + 576);
    v14 = *(_QWORD *)(v0 + 568);
    v15 = *(_QWORD *)(v0 + 560);
    v16 = *(_QWORD *)(v0 + 552);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B8E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 648);
  swift_release(*(_QWORD *)(v0 + 656));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);
  v4 = *(_QWORD *)(v0 + 616);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v8 = *(_QWORD *)(v0 + 568);
  v9 = *(_QWORD *)(v0 + 560);
  v10 = *(_QWORD *)(v0 + 552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B8F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 680);
  v4[86] = a1;
  v4[87] = a2;
  v4[88] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000B9A54;
  else
    v6 = sub_1000B8FBC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B8FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  int *v38;
  uint64_t v39;

  if (*(_QWORD *)(v0 + 696))
  {
    sub_10002E908(v0 + 280, v0 + 392, &qword_1001768D8);
    v1 = *(_QWORD *)(v0 + 416);
    if (v1)
    {
      v2 = *(_QWORD *)(v0 + 424);
      sub_1000151A4((_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 416));
      v3 = *(int **)(v2 + 32);
      v38 = (int *)((char *)v3 + *v3);
      v4 = (_QWORD *)swift_task_alloc(v3[1]);
      *(_QWORD *)(v0 + 712) = v4;
      *v4 = v0;
      v4[1] = sub_1000B93A4;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v38)(*(_QWORD *)(v0 + 560), v1, v2);
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 560);
      sub_1000150E8(v0 + 392, &qword_1001768D8);
      v22 = type metadata accessor for COSE_Sign1(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
      v23 = *(_QWORD *)(v0 + 272);
      v24 = (_QWORD *)swift_task_alloc(dword_100176D74);
      *(_QWORD *)(v0 + 728) = v24;
      *v24 = v0;
      v24[1] = sub_1000B9478;
      return sub_100086A88(v23);
    }
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 464);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 688));
    v7._object = (void *)0x8000000100134510;
    v8._countAndFlagsBits = 0x3466623961626336;
    v8._object = (void *)0xE800000000000000;
    v7._countAndFlagsBits = 0xD00000000000005CLL;
    logMilestone(tag:description:)(v8, v7);
    defaultLogger()(v9);
    v10 = swift_bridgeObjectRetain_n(v6, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    v15 = *(_QWORD *)(v0 + 616);
    v16 = *(_QWORD *)(v0 + 600);
    v17 = *(_QWORD *)(v0 + 464);
    if (v13)
    {
      v37 = *(_QWORD *)(v0 + 616);
      v18 = *(_QWORD *)(v0 + 456);
      v36 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v39 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(v17);
      *(_QWORD *)(v0 + 432) = sub_10003FA80(v18, v17, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v19 + 4);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Not proposing credential %s because it has no elements matching the request", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v36(v37, v16);
      sub_1000BFFE8((_QWORD *)(v0 + 240));
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 464), 2);

      v14(v15, v16);
      sub_1000BFFE8((_QWORD *)(v0 + 240));
    }
    sub_1000150E8(v0 + 16, &qword_1001776A8);
    v25 = *(_QWORD *)(v0 + 448);
    v26 = type metadata accessor for PresentmentProposal(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    v27 = *(_QWORD *)(v0 + 632);
    v28 = *(_QWORD *)(v0 + 624);
    v29 = *(_QWORD *)(v0 + 616);
    v30 = *(_QWORD *)(v0 + 592);
    v31 = *(_QWORD *)(v0 + 584);
    v32 = *(_QWORD *)(v0 + 576);
    v33 = *(_QWORD *)(v0 + 568);
    v34 = *(_QWORD *)(v0 + 560);
    v35 = *(_QWORD *)(v0 + 552);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B93A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 712);
  *(_QWORD *)(*v1 + 720) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 688);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 696));
    swift_bridgeObjectRelease(v4);
    v5 = sub_1000B9B40;
  }
  else
  {
    v5 = sub_1000B941C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000B941C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10000CE40(v0 + 49);
  v1 = v0[34];
  v2 = (_QWORD *)swift_task_alloc(dword_100176D74);
  v0[91] = v2;
  *v2 = v0;
  v2[1] = sub_1000B9478;
  return sub_100086A88(v1);
}

uint64_t sub_1000B9478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 728);
  v4[92] = a1;
  v4[93] = a2;
  v4[94] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[86];
    swift_bridgeObjectRelease(v4[87]);
    swift_bridgeObjectRelease(v6);
    v7 = sub_1000B9C38;
  }
  else
  {
    v7 = sub_1000B9500;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000B9500(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t *);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t (*v29)(uint64_t, uint64_t *);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t *v81;
  uint64_t v82;

  v2 = *(_QWORD *)(v1 + 744);
  v3 = *(_QWORD *)(v1 + 736);
  defaultLogger()(a1);
  sub_10000B178(v3, v2);
  v4 = sub_10000B178(v3, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v1 + 744);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v82 = v10;
    *(_DWORD *)v9 = 136315138;
    if (v8 >> 60 == 15)
    {
      object = (void *)0xE500000000000000;
      countAndFlagsBits = 0x3E6C696E3CLL;
    }
    else
    {
      v17 = Data.base16EncodedString()();
      countAndFlagsBits = v17._countAndFlagsBits;
      object = v17._object;
    }
    v18 = *(_QWORD *)(v1 + 744);
    v19 = *(_QWORD *)(v1 + 736);
    v78 = *(_QWORD *)(v1 + 624);
    v80 = *(void (**)(uint64_t, uint64_t))(v1 + 640);
    v77 = *(_QWORD *)(v1 + 600);
    *(_QWORD *)(v1 + 440) = sub_10003FA80(countAndFlagsBits, (unint64_t)object, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 440, v1 + 448, v9 + 4);
    swift_bridgeObjectRelease(object);
    sub_10000B164(v19, v18);
    sub_10000B164(v19, v18);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Proposed credential has auth ACL: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v80(v78, v77);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 736);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 640);
    v15 = *(_QWORD *)(v1 + 624);
    v16 = *(_QWORD *)(v1 + 600);
    sub_10000B164(v13, v8);
    sub_10000B164(v13, v8);

    v14(v15, v16);
  }
  v20 = *(unsigned __int8 *)(v1 + 760);
  v21 = *(uint64_t **)(v1 + 256);
  v22 = *(uint64_t **)(v1 + 264);
  v23 = *v21;
  v24 = (uint64_t (*)(uint64_t, uint64_t *))v22[2];
  swift_retain(v21);
  v25 = v24(v23, v22);
  v27 = v26;
  swift_release(v21);
  v28 = Data.base64EncodedString(options:)(0);
  sub_100005AB0(v25, v27);
  v29 = (uint64_t (*)(uint64_t, uint64_t *))v22[1];
  swift_retain(v21);
  v30 = v29(v23, v22);
  v32 = v31;
  swift_release(v21);
  v72 = *(_QWORD *)(v1 + 248);
  v73 = *(_QWORD *)(v1 + 240);
  v33 = swift_bridgeObjectRetain(v72);
  v81 = v22;
  v74 = v32;
  v75 = v30;
  v71 = ISO18013ReaderRequest.ItemsRequest.docType.getter(v33);
  v70 = v34;
  if (v20 == 2)
  {
    v62 = 0;
    v63 = 0xF000000000000000;
  }
  else
  {
    sub_10000B178(*(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 512));
    v62 = *(_QWORD *)(v1 + 504);
    v63 = *(_QWORD *)(v1 + 512);
  }
  v35 = *(_QWORD *)(v1 + 744);
  v36 = *(_QWORD *)(v1 + 736);
  v67 = *(_QWORD *)(v1 + 696);
  v76 = *(_QWORD *)(v1 + 688);
  v68 = *(_QWORD *)(v1 + 560);
  v69 = *(_QWORD *)(v1 + 552);
  v37 = *(void **)(v1 + 528);
  v38 = *(void **)(v1 + 520);
  v39 = *(_QWORD *)(v1 + 464);
  v40 = *(_QWORD **)(v1 + 448);
  v66 = *(_QWORD *)(v1 + 456);
  v41 = *(_QWORD *)(v1 + 328);
  v42 = *(_QWORD *)(v1 + 344);
  v64 = *(_QWORD *)(v1 + 336);
  v65 = *(_QWORD *)(v1 + 320);
  objc_allocWithZone((Class)DCPresentmentProposal);
  swift_bridgeObjectRetain(v39);
  v43 = v38;
  sub_10000B178(v36, v35);
  swift_bridgeObjectRetain(v42);
  v44 = v37;
  swift_bridgeObjectRetain(v41);
  v45 = sub_1000BEB80(v66, v39, v28._countAndFlagsBits, (uint64_t)v28._object, v75, v74, v73, v72, v71, v70, v67, v36, v35, v62, v63, v38, v37, v65, v41,
          v64,
          v42);
  v46._object = (void *)0x8000000100134570;
  v47._countAndFlagsBits = 0x3735313330633933;
  v47._object = (void *)0xE800000000000000;
  v46._countAndFlagsBits = 0xD000000000000055;
  logMilestone(tag:description:)(v47, v46);
  sub_10002E908(v68, v69, &qword_100176828);
  v79 = *(_QWORD *)(v1 + 272);
  v48 = swift_retain(v21);
  v49 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v48);
  sub_10000B164(v36, v35);
  sub_1000150E8(v68, &qword_100176828);
  sub_1000BFFE8((_QWORD *)(v1 + 240));
  sub_1000150E8(v1 + 16, &qword_1001776A8);
  *v40 = v45;
  v40[1] = v76;
  v50 = (int *)type metadata accessor for PresentmentProposal(0);
  sub_10002E94C(v69, (uint64_t)v40 + v50[6], &qword_100176828);
  v51 = (uint64_t **)((char *)v40 + v50[7]);
  *v51 = v21;
  v51[1] = v81;
  *(_QWORD *)((char *)v40 + v50[8]) = v79;
  *(_QWORD *)((char *)v40 + v50[9]) = v49;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v50 - 1) + 56))(v40, 0, 1, v50);
  v52 = *(_QWORD *)(v1 + 632);
  v53 = *(_QWORD *)(v1 + 624);
  v54 = *(_QWORD *)(v1 + 616);
  v55 = *(_QWORD *)(v1 + 592);
  v56 = *(_QWORD *)(v1 + 584);
  v57 = *(_QWORD *)(v1 + 576);
  v58 = *(_QWORD *)(v1 + 568);
  v59 = *(_QWORD *)(v1 + 560);
  v60 = *(_QWORD *)(v1 + 552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000B9A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000BFFE8((_QWORD *)(v0 + 240));
  sub_1000150E8(v0 + 16, &qword_1001776A8);
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000BFFE8((_QWORD *)(v0 + 240));
  sub_1000150E8(v0 + 16, &qword_1001776A8);
  sub_10000CE40((_QWORD *)(v0 + 392));
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000150E8(*(_QWORD *)(v0 + 560), &qword_100176828);
  sub_1000BFFE8((_QWORD *)(v0 + 240));
  sub_1000150E8(v0 + 16, &qword_1001776A8);
  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)(v8 + 1336) = v20;
  *(_OWORD *)(v8 + 1320) = v19;
  *(_OWORD *)(v8 + 1304) = v18;
  *(_QWORD *)(v8 + 1296) = a8;
  *(_QWORD *)(v8 + 1288) = a7;
  *(_QWORD *)(v8 + 1280) = a6;
  *(_QWORD *)(v8 + 1272) = a5;
  *(_QWORD *)(v8 + 1264) = a4;
  *(_QWORD *)(v8 + 1256) = a3;
  *(_QWORD *)(v8 + 1248) = a2;
  *(_QWORD *)(v8 + 1240) = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 1344) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 1352) = v10;
  *(_QWORD *)(v8 + 1360) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008E84(&qword_100175AC8);
  *(_QWORD *)(v8 + 1368) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 1376) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 1384) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 1392) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 1400) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 1408) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 1416) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 1424) = swift_task_alloc(v14);
  v15 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v8 + 1432) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 1440) = v16;
  *(_QWORD *)(v8 + 1448) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B9E78, 0, 0);
}

uint64_t sub_1000B9E78()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *(_QWORD *)(v0 + 1448);
  v21 = *(_QWORD *)(v0 + 1440);
  v22 = *(_QWORD *)(v0 + 1432);
  v20 = *(_QWORD *)(v0 + 1336);
  v19 = *(_OWORD *)(v0 + 1312);
  v1 = *(_QWORD *)(v0 + 1304);
  v2 = *(void **)(v0 + 1296);
  v3 = *(_QWORD *)(v0 + 1288);
  v4 = *(_QWORD *)(v0 + 1280);
  v5 = *(_QWORD *)(v0 + 1272);
  v6 = *(_QWORD *)(v0 + 1264);
  v7 = *(_QWORD *)(v0 + 1256);
  v8 = *(_QWORD *)(v0 + 1248);
  v9 = swift_allocObject(&unk_10016A5E0, 104, 7);
  *(_QWORD *)(v0 + 1456) = v9;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = v4;
  *(_QWORD *)(v9 + 56) = v3;
  *(_QWORD *)(v9 + 64) = v2;
  *(_QWORD *)(v9 + 72) = v1;
  v10 = v2;
  *(_OWORD *)(v9 + 80) = v19;
  *(_QWORD *)(v9 + 96) = v20;
  swift_retain(v8);
  swift_bridgeObjectRetain(v6);
  swift_retain(v5);
  sub_10000B178(v4, v3);
  v11 = swift_allocObject(&unk_10016A608, 32, 7);
  *(_QWORD *)(v0 + 1464) = v11;
  *(_QWORD *)(v11 + 16) = sub_1000C0070;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104);
  v14 = v10;
  swift_retain(v1);
  v13(v23, v12, v22);
  v15 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v9);
  v16 = (_QWORD *)swift_task_alloc(v15);
  *(_QWORD *)(v0 + 1472) = v16;
  v17 = sub_100008E84(&qword_1001776B8);
  *v16 = v0;
  v16[1] = sub_1000BA018;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 1448), sub_10003DE8C, v11, v17);
}

uint64_t sub_1000BA018()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1472);
  *(_QWORD *)(*(_QWORD *)v1 + 1480) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[183];
    (*(void (**)(_QWORD, _QWORD))(v2[180] + 8))(v2[181], v2[179]);
    swift_release(v4);
    v5 = sub_1000BA990;
  }
  else
  {
    v6 = v2[183];
    v7 = v2[182];
    (*(void (**)(_QWORD, _QWORD))(v2[180] + 8))(v2[181], v2[179]);
    swift_release(v7);
    swift_release(v6);
    v5 = sub_1000BA0D0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BA0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;

  sub_10002E94C(v0 + 16, v0 + 320, &qword_1001776B8);
  sub_10002E94C(v0 + 320, v0 + 168, &qword_1001776B8);
  v1 = sub_1000C00D0(v0 + 168);
  if ((_DWORD)v1 == 1)
  {
    v2 = defaultLogger()(v1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "no results or error thrown so returning nil", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 1424);
    v7 = *(_QWORD *)(v0 + 1384);
    v8 = *(_QWORD *)(v0 + 1376);
    v9 = *(_QWORD *)(v0 + 1360);
    v10 = *(_QWORD *)(v0 + 1352);
    v11 = *(_QWORD *)(v0 + 1344);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DIPError.Code.internalError(_:), v11);
    v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x726F727265, 0xE500000000000000, 0, v9, 0, v12, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001345D0, 642);
    swift_willThrow(v15);
    goto LABEL_19;
  }
  *(_QWORD *)(v0 + 1152) = 0;
  *(_OWORD *)(v0 + 1120) = 0u;
  *(_OWORD *)(v0 + 1136) = 0u;
  v16 = *(_QWORD *)(v0 + 184);
  if (v16 == 2)
  {
    sub_10002E94C(v0 + 320, v0 + 776, &qword_1001776B8);
    v35 = sub_1000C00E8((_QWORD *)(v0 + 776));
    v36 = defaultLogger()(v35);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Payload protection type is payload protection key", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }
    v40 = *(_QWORD *)(v0 + 1400);
    v41 = *(_QWORD *)(v0 + 1392);
    v42 = *(_QWORD *)(v0 + 1384);
    v43 = *(_QWORD *)(v0 + 1376);

    v44 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v44(v40, v43);
    v45 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRetain(v45);
    defaultLogger()(v46);
    v47 = swift_task_alloc(32);
    *(_QWORD *)(v47 + 16) = v45;
    Logger.sensitive(_:)(sub_1000C0288, v47);
    swift_task_dealloc(v47);
    v44(v41, v43);
    if (v45)
    {
      if (*(_QWORD *)(v45 + 16))
      {
        v48 = type metadata accessor for InaccessiblyEncryptedPayloadProcessor();
        swift_allocObject(v48, 120, 15);
        v49 = sub_10008A770(v45);
        *(_QWORD *)(v0 + 1104) = v48;
        *(_QWORD *)(v0 + 1112) = &off_1001698B0;
        sub_1000C0188(v0 + 320);
        *(_QWORD *)(v0 + 1080) = v49;
        v50 = v0 + 1120;
        sub_1000C11A0(v0 + 1080, v0 + 1120, &qword_1001768D8);
      }
      else
      {
        v50 = v0 + 1120;
        sub_1000C0188(v0 + 320);
        swift_bridgeObjectRelease(v45);
      }
    }
    else
    {
      v50 = v0 + 1120;
      sub_1000C0188(v0 + 320);
    }
    goto LABEL_24;
  }
  if (v16 == 1)
  {
    sub_10002E94C(v0 + 320, v0 + 928, &qword_1001776B8);
    v51 = sub_1000C00E8((_QWORD *)(v0 + 928));
    v52 = defaultLogger()(v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter();
    v50 = v0 + 1120;
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Payload protection type is device encryption key, skipping element extraction", v55, 2u);
      swift_slowDealloc(v55, -1, -1);

      sub_1000C0188(v0 + 320);
    }
    else
    {
      sub_1000C0188(v0 + 320);

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1384) + 8))(*(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1376));
LABEL_24:
    v78 = *(_QWORD *)(v0 + 1448);
    v79 = *(_QWORD *)(v0 + 1424);
    v80 = *(_QWORD *)(v0 + 1416);
    v81 = *(_QWORD *)(v0 + 1408);
    v82 = *(_QWORD *)(v0 + 1400);
    v83 = *(_QWORD *)(v0 + 1392);
    v84 = *(_QWORD *)(v0 + 1368);
    v85 = *(_QWORD *)(v0 + 1360);
    v69 = *(_QWORD *)(v0 + 1240);
    v70 = *(_QWORD *)(v0 + 176);
    v77 = *(_QWORD *)(v0 + 168);
    v71 = *(_QWORD *)(v0 + 312);
    v86 = *(_OWORD *)(v0 + 296);
    v72 = v50;
    sub_10002E908(v50, v69 + 40, &qword_1001768D8);
    v73 = *(_QWORD *)(v0 + 240);
    v74 = *(_QWORD *)(v0 + 248);
    v75 = *(_QWORD *)(v0 + 256);
    v76 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v70);
    swift_retain(v86);
    swift_bridgeObjectRetain(v74);
    sub_1000C0188(v0 + 320);
    *(_QWORD *)v69 = v77;
    *(_QWORD *)(v69 + 8) = v70;
    *(_OWORD *)(v69 + 16) = v86;
    *(_QWORD *)(v69 + 32) = v71;
    *(_QWORD *)(v69 + 80) = v73;
    *(_QWORD *)(v69 + 88) = v74;
    *(_QWORD *)(v69 + 96) = v75;
    *(_QWORD *)(v69 + 104) = v76;
    sub_1000150E8(v72, &qword_1001768D8);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    v68 = *(uint64_t (**)(void))(v0 + 8);
    return v68();
  }
  if (v16)
  {
    v56 = *(_QWORD *)(v0 + 1360);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1352) + 104))(v56, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 1344));
    sub_10002E94C(v0 + 320, v0 + 624, &qword_1001776B8);
    sub_1000C00E8((_QWORD *)(v0 + 624));
    v57 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v58 = type metadata accessor for DIPError(0);
    v59 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v58, v59, 0, 0);
    v60 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x8000000100132100, 0, v56, 0, v57, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001345D0, 665);
    swift_willThrow(v60);
    sub_1000C0188(v0 + 320);
    sub_1000C0188(v0 + 320);
    sub_1000150E8(v0 + 1120, &qword_1001768D8);
LABEL_19:
    v61 = *(_QWORD *)(v0 + 1424);
    v62 = *(_QWORD *)(v0 + 1416);
    v63 = *(_QWORD *)(v0 + 1408);
    v64 = *(_QWORD *)(v0 + 1400);
    v65 = *(_QWORD *)(v0 + 1392);
    v66 = *(_QWORD *)(v0 + 1368);
    v67 = *(_QWORD *)(v0 + 1360);
    swift_task_dealloc(*(_QWORD *)(v0 + 1448));
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    v68 = *(uint64_t (**)(void))(v0 + 8);
    return v68();
  }
  sub_10002E94C(v0 + 320, v0 + 472, &qword_1001776B8);
  v17 = sub_1000C00E8((_QWORD *)(v0 + 472));
  v18 = defaultLogger()(v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Payload protection type is standard, extracting elements from credential payload", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }
  v22 = *(_QWORD *)(v0 + 1416);
  v23 = *(_QWORD *)(v0 + 1384);
  v24 = *(_QWORD *)(v0 + 1376);
  v25 = *(_QWORD **)(v0 + 1328);

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  v26 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 1488) = v27;
  *(_QWORD *)(v0 + 1496) = v28;
  v29 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 1504) = v29;
  v30 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 1512) = v30;
  v31 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 1520) = v31;
  sub_1000151A4(v25, v25[3]);
  swift_bridgeObjectRetain(v27);
  sub_100005A38(v28, v29);
  v32 = dword_1001789EC;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  v33 = (_QWORD *)swift_task_alloc(v32);
  *(_QWORD *)(v0 + 1528) = v33;
  *v33 = v0;
  v33[1] = sub_1000BAA38;
  return sub_1001189B8(v0 + 1160, v28, v29, v26, 0, 0, 0, 0);
}

uint64_t sub_1000BA990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 1456));
  v1 = *(_QWORD *)(v0 + 1424);
  v2 = *(_QWORD *)(v0 + 1416);
  v3 = *(_QWORD *)(v0 + 1408);
  v4 = *(_QWORD *)(v0 + 1400);
  v5 = *(_QWORD *)(v0 + 1392);
  v6 = *(_QWORD *)(v0 + 1368);
  v7 = *(_QWORD *)(v0 + 1360);
  swift_task_dealloc(*(_QWORD *)(v0 + 1448));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BAA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1528);
  *(_QWORD *)(*(_QWORD *)v1 + 1536) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BAD08;
  else
    v3 = sub_1000BAA9C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BAA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  __int128 v30;

  sub_1000C11A0(v0 + 1160, v0 + 1120, &qword_1001768D8);
  if (*(_QWORD *)(v0 + 1144))
  {
    sub_100025938(v0 + 1120, v0 + 1200);
    v1 = *(_QWORD *)(v0 + 1224);
    v2 = *(_QWORD *)(v0 + 1232);
    sub_1000151A4((_QWORD *)(v0 + 1200), v1);
    v3 = *(int **)(v2 + 8);
    v29 = (int *)((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 1544) = v4;
    *v4 = v0;
    v4[1] = sub_1000BAE08;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v29)(*(_QWORD *)(v0 + 1368), 1, v1, v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 1520);
    v7 = *(_QWORD *)(v0 + 1512);
    v8 = *(_QWORD *)(v0 + 1504);
    v9 = *(_QWORD *)(v0 + 1496);
    v10 = *(_QWORD *)(v0 + 1488);
    v11 = *(_QWORD *)(v0 + 1368);
    sub_1000C0188(v0 + 320);
    swift_bridgeObjectRelease(v10);
    sub_100005AB0(v9, v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    v12 = type metadata accessor for PayloadMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_1000150E8(v11, &qword_100175AC8);
    v21 = *(_QWORD *)(v0 + 1448);
    v22 = *(_QWORD *)(v0 + 1424);
    v23 = *(_QWORD *)(v0 + 1416);
    v24 = *(_QWORD *)(v0 + 1408);
    v25 = *(_QWORD *)(v0 + 1400);
    v26 = *(_QWORD *)(v0 + 1392);
    v27 = *(_QWORD *)(v0 + 1368);
    v28 = *(_QWORD *)(v0 + 1360);
    v13 = *(_QWORD *)(v0 + 1240);
    v15 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 312);
    v30 = *(_OWORD *)(v0 + 296);
    sub_10002E908(v0 + 1120, v13 + 40, &qword_1001768D8);
    v17 = *(_QWORD *)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v14);
    swift_retain(v30);
    swift_bridgeObjectRetain(v18);
    sub_1000C0188(v0 + 320);
    *(_QWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v14;
    *(_OWORD *)(v13 + 16) = v30;
    *(_QWORD *)(v13 + 32) = v16;
    *(_QWORD *)(v13 + 80) = v17;
    *(_QWORD *)(v13 + 88) = v18;
    *(_QWORD *)(v13 + 96) = v19;
    *(_QWORD *)(v13 + 104) = v20;
    sub_1000150E8(v0 + 1120, &qword_1001768D8);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000BAD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1512);
  v3 = *(_QWORD *)(v0 + 1504);
  v4 = *(_QWORD *)(v0 + 1496);
  v5 = *(_QWORD *)(v0 + 1488);
  sub_1000C0188(v0 + 320);
  sub_1000C0188(v0 + 320);
  swift_bridgeObjectRelease(v5);
  sub_100005AB0(v4, v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  sub_1000150E8(v0 + 1120, &qword_1001768D8);
  v6 = *(_QWORD *)(v0 + 1424);
  v7 = *(_QWORD *)(v0 + 1416);
  v8 = *(_QWORD *)(v0 + 1408);
  v9 = *(_QWORD *)(v0 + 1400);
  v10 = *(_QWORD *)(v0 + 1392);
  v11 = *(_QWORD *)(v0 + 1368);
  v12 = *(_QWORD *)(v0 + 1360);
  swift_task_dealloc(*(_QWORD *)(v0 + 1448));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BAE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1544);
  *(_QWORD *)(*(_QWORD *)v1 + 1552) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BB03C;
  else
    v3 = sub_1000BAE6C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BAE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1512);
  v3 = *(_QWORD *)(v0 + 1504);
  v4 = *(_QWORD *)(v0 + 1496);
  v5 = *(_QWORD *)(v0 + 1488);
  v6 = *(_QWORD *)(v0 + 1368);
  sub_1000C0188(v0 + 320);
  swift_bridgeObjectRelease(v5);
  sub_100005AB0(v4, v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  v7 = type metadata accessor for PayloadMetadata(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  sub_1000150E8(v6, &qword_100175AC8);
  sub_10000CE40((_QWORD *)(v0 + 1200));
  v17 = *(_QWORD *)(v0 + 1448);
  v18 = *(_QWORD *)(v0 + 1424);
  v19 = *(_QWORD *)(v0 + 1416);
  v20 = *(_QWORD *)(v0 + 1408);
  v21 = *(_QWORD *)(v0 + 1400);
  v22 = *(_QWORD *)(v0 + 1392);
  v23 = *(_QWORD *)(v0 + 1368);
  v24 = *(_QWORD *)(v0 + 1360);
  v8 = *(_QWORD *)(v0 + 1240);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 312);
  v25 = *(_OWORD *)(v0 + 296);
  sub_10002E908(v0 + 1120, v8 + 40, &qword_1001768D8);
  v12 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 264);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v10);
  swift_retain(v25);
  swift_bridgeObjectRetain(v13);
  sub_1000C0188(v0 + 320);
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = v10;
  *(_OWORD *)(v8 + 16) = v25;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 80) = v12;
  *(_QWORD *)(v8 + 88) = v13;
  *(_QWORD *)(v8 + 96) = v14;
  *(_QWORD *)(v8 + 104) = v15;
  sub_1000150E8(v0 + 1120, &qword_1001768D8);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1512);
  v3 = *(_QWORD *)(v0 + 1504);
  v4 = *(_QWORD *)(v0 + 1496);
  v5 = *(_QWORD *)(v0 + 1488);
  sub_1000C0188(v0 + 320);
  swift_bridgeObjectRelease(v5);
  sub_100005AB0(v4, v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  sub_1000C0188(v0 + 320);
  sub_10000CE40((_QWORD *)(v0 + 1200));
  sub_1000150E8(v0 + 1120, &qword_1001768D8);
  v6 = *(_QWORD *)(v0 + 1424);
  v7 = *(_QWORD *)(v0 + 1416);
  v8 = *(_QWORD *)(v0 + 1408);
  v9 = *(_QWORD *)(v0 + 1400);
  v10 = *(_QWORD *)(v0 + 1392);
  v11 = *(_QWORD *)(v0 + 1368);
  v12 = *(_QWORD *)(v0 + 1360);
  swift_task_dealloc(*(_QWORD *)(v0 + 1448));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BB148(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X6>, NSObject *a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  NSObject *v32;
  NSObject *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  id v40;
  NSObject *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  id v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  NSObject *v108;
  uint64_t v109;
  id v110;
  void *v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  uint64_t v115;
  id v116;
  unint64_t v117;
  void *v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  id v128;
  NSObject *v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  NSObject *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152[10];
  uint64_t v153;
  uint64_t v154;

  v129 = a7;
  v126 = a6;
  v128 = a5;
  v127 = (void *)a4;
  v125 = a8;
  v124 = type metadata accessor for Logger(0);
  v130 = *(_QWORD *)(v124 - 8);
  v13 = __chkstk_darwin(v124);
  v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v115 - v16;
  v18 = (_QWORD *)type metadata accessor for DIPError.Code(0);
  v19 = *(v18 - 1);
  __chkstk_darwin(v18);
  v21 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = a2;
  v22 = a2;
  v23 = a3;
  v24 = v132;
  v25 = (void *)sub_10011A590(v22, a3);
  if (!v24)
  {
    v26 = v25;
    v123 = v19;
    v132 = v18;
    v120 = (unint64_t)v17;
    v122 = (unint64_t)v21;
    v121 = v23;
    v119 = (unint64_t)v15;
    if (!v25)
    {
      v133 = 0;
      v134 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v134);
      v133 = (id)0xD000000000000024;
      v134 = 0x8000000100134680;
      v39._countAndFlagsBits = v131;
      v39._object = v121;
      String.append(_:)(v39);
      v40 = v133;
      v41 = v134;
      v42 = v122;
      (*(void (**)(unint64_t, _QWORD, id))(v123 + 104))(v122, enum case for DIPError.Code.idcsUnknownCredential(_:), v132);
      v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v44 = type metadata accessor for DIPError(0);
      v45 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v44, v45, 0, 0);
      v46 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v40, v41, 0, v42, 0, v43, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001345D0, 594);
      swift_willThrow(v46);
      return;
    }
    v27 = objc_msgSend(v25, "partition");
    v28 = v26;
    v29 = v122;
    if (!v27)
    {
      (*(void (**)(unint64_t, _QWORD, id))(v123 + 104))(v122, enum case for DIPError.Code.invalidStoredData(_:), v132);
      v47 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v48 = type metadata accessor for DIPError(0);
      v49 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v48, v49, 0, 0);
      v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001001346B0, 0, v29, 0, v47, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001345D0, 598);
      swift_willThrow(v50);

      return;
    }
    v30 = v27;
    v118 = v28;
    v31 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v33 = v32;

    if (v126)
    {
      v34 = objc_msgSend(v126, "identifier");
      v126 = 0;
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

      v24 = v126;
    }
    else
    {
      v36 = 0;
      v38 = 0;
    }
    v51 = v130;
    v52 = v36;
    v53 = v118;
    v54 = sub_100113034(a1, (uint64_t)v127, (unint64_t)v128, v52, v38, v118);
    v55 = v129;
    if (v24)
    {
      swift_bridgeObjectRelease(v33);

      swift_bridgeObjectRelease(v38);
      return;
    }
    v56 = v54;
    swift_bridgeObjectRelease(v38);
    if (!v56)
    {
      v57 = swift_bridgeObjectRelease(v33);
      v58 = v120;
      defaultLogger()(v57);
      v59 = (unint64_t)v121;
      v60 = swift_bridgeObjectRetain_n(v121, 2);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = (id)swift_slowAlloc(32, -1);
        v126 = 0;
        v65 = v64;
        v133 = v64;
        *(_DWORD *)v63 = 136315138;
        swift_bridgeObjectRetain(v59);
        v153 = sub_10003FA80(v131, v59, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v63 + 4);
        swift_bridgeObjectRelease_n(v59, 3);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No presentment key available, skipping credential %s", v63, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v63, -1, -1);

        (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v120, v124);
      }
      else
      {

        swift_bridgeObjectRelease_n(v59, 2);
        (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v58, v124);
      }
LABEL_20:
      v75 = v125;
      sub_1000C0290((uint64_t)&v133);
      sub_10002E94C((uint64_t)&v133, v75, &qword_1001776B8);
      return;
    }
    v66 = sub_1000C02B0(v56, (uint64_t)v55);
    v68 = v67;
    v69 = objc_msgSend(v56, "payload");
    if (!v69)
    {
      swift_bridgeObjectRelease(v33);
      (*(void (**)(unint64_t, _QWORD, id))(v123 + 104))(v29, enum case for DIPError.Code.invalidStoredData(_:), v132);
      v76 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v77 = v56;
      v78 = type metadata accessor for DIPError(0);
      v79 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v78, v79, 0, 0);
      v80 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003ALL, 0x80000001001346E0, 0, v29, 0, v76, 0xD000000000000065, 0x8000000100134400, 0xD0000000000000A3, 0x80000001001345D0, 614);
      swift_willThrow(v80);
      swift_release(v66);

      return;
    }
    v128 = v31;
    v129 = v33;
    v132 = v69;
    v70 = v119;
    if (a9 != 1)
    {
      v71 = objc_msgSend(v53, "options");
      if (v71)
      {
        v72 = v71;
        v73 = (unint64_t)objc_msgSend(v71, "readerAuthenticationPolicy");
        if ((v73 & 0x8000000000000000) != 0)
        {
LABEL_36:
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
          return;
        }
        v74 = v73;

      }
      else
      {
        v74 = 0;
      }
      if (v74 != a10)
      {
        v128 = v56;
        v93 = swift_bridgeObjectRelease(v129);
        defaultLogger()(v93);
        v94 = (unint64_t)v121;
        v95 = swift_bridgeObjectRetain_n(v121, 2);
        v96 = Logger.logObject.getter(v95);
        v97 = static os_log_type_t.debug.getter();
        v129 = v96;
        if (os_log_type_enabled(v96, v97))
        {
          v98 = swift_slowAlloc(32, -1);
          v127 = (void *)swift_slowAlloc(96, -1);
          v133 = v127;
          *(_DWORD *)v98 = 136315650;
          swift_bridgeObjectRetain(v94);
          v153 = sub_10003FA80(v131, v94, (uint64_t *)&v133);
          v131 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v98 + 4);
          swift_bridgeObjectRelease_n(v94, 3);
          *(_WORD *)(v98 + 12) = 2082;
          v99 = (id)DCCredentialReaderAuthenticationPolicyToString(v74);
          v100 = v53;
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          v126 = 0;
          v103 = v102;

          v153 = sub_10003FA80(v101, v103, (uint64_t *)&v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v98 + 14);
          swift_bridgeObjectRelease(v103);
          *(_WORD *)(v98 + 22) = 2082;
          v104 = (id)DCCredentialReaderAuthenticationPolicyToString(a10);
          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
          v107 = v106;

          v153 = sub_10003FA80(v105, v107, (uint64_t *)&v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v98 + 24);
          swift_bridgeObjectRelease(v107);
          v108 = v129;
          _os_log_impl((void *)&_mh_execute_header, v129, v97, "Not proposing credential %s because its reader authentication policy %{public}s does not match the session's reader authentication policy %{public}s", (uint8_t *)v98, 0x20u);
          v109 = (uint64_t)v127;
          swift_arrayDestroy(v127, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v109, -1, -1);
          swift_slowDealloc(v98, -1, -1);

          swift_release(v131);
          (*(void (**)(unint64_t, uint64_t))(v130 + 8))(v119, v124);
        }
        else
        {

          swift_release(v66);
          swift_bridgeObjectRelease_n(v94, 2);

          (*(void (**)(unint64_t, uint64_t))(v130 + 8))(v70, v124);
        }
        goto LABEL_20;
      }
    }
    v81 = v56;
    v82 = v132;
    v83 = (unint64_t)objc_msgSend(v132, "protectionType");
    if ((v83 & 0x8000000000000000) == 0)
    {
      v84 = v83;
      sub_1000C6D08(v152);
      v85 = v152[0];
      v86 = v152[1];
      v87 = (void *)v152[2];
      v124 = v152[3];
      v123 = v152[4];
      v122 = v152[5];
      v121 = (void *)v152[6];
      v120 = v152[7];
      v119 = v152[8];
      v117 = v152[9];
      v88 = objc_msgSend(v82, "payloadData");
      v130 = v85;
      v127 = (void *)v86;
      v126 = v87;
      if (v88)
      {
        v89 = v88;
        v90 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v92 = v91;

      }
      else
      {
        v90 = 0;
        v92 = 0xF000000000000000;
      }
      v116 = sub_1000C963C();
      v131 = v66;
      v110 = objc_msgSend(v118, "options");
      if (!v110)
      {
        v113 = 0;
        v111 = v118;
        v114 = v132;
        goto LABEL_35;
      }
      v111 = v110;
      v112 = (unint64_t)objc_msgSend(v110, "presentmentAuthPolicy");
      if ((v112 & 0x8000000000000000) == 0)
      {
        v113 = v112;

        v114 = v81;
        v81 = v118;
LABEL_35:

        v133 = v128;
        v134 = v129;
        v135 = v84;
        v136 = v130;
        v137 = (uint64_t)v127;
        v138 = v126;
        v139 = v124;
        v140 = v123;
        v141 = v122;
        v142 = v121;
        v143 = v120;
        v144 = v119;
        v145 = v117;
        v146 = v90;
        v147 = v92;
        v148 = v116;
        v149 = v131;
        v150 = v68;
        v151 = v113;
        KeyDesignationProvider.init(sesKeystore:)(&v133);
        sub_10002E94C((uint64_t)&v133, v125, &qword_1001776B8);
        return;
      }
    }
    goto LABEL_36;
  }
}

unint64_t sub_1000BBFEC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::String v4;
  void *object;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (a1)
    v2 = a1;
  else
    v2 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(a1);
  v3 = sub_100008E84(&qword_100177CB0);
  v4._countAndFlagsBits = Dictionary.description.getter(v2, &type metadata for String, v3, &protocol witness table for String);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000028;
}

uint64_t sub_1000BC0B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 112) = v3;
  *(_BYTE *)(v4 + 208) = a3;
  *(_QWORD *)(v4 + 96) = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v4 + 120) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 136) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 144) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 152) = v8;
  *(_QWORD *)(v4 + 160) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BC140, 0, 0);
}

uint64_t sub_1000BC140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentRequestInterpreter getProposalElements", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 152);
  v6 = *(_QWORD *)(v1 + 160);
  v8 = *(_QWORD *)(v1 + 144);
  v9 = *(_QWORD *)(v1 + 104);

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v11 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v10);
  sub_1000963C8(v11);
  v13 = v12;
  *(_QWORD *)(v1 + 168) = v12;
  swift_bridgeObjectRelease(v11);
  v14 = sub_10003E8BC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v14);
  sub_10002E908(v9, v1 + 56, &qword_1001768D8);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_10002597C((__int128 *)(v1 + 56), v1 + 16);
    v15 = (_QWORD *)swift_task_alloc(dword_1001774A4);
    *(_QWORD *)(v1 + 176) = v15;
    *v15 = v1;
    v15[1] = sub_1000BC328;
    return sub_1000BC55C(v13, *(_QWORD *)(v1 + 96), v1 + 16, *(_BYTE *)(v1 + 208));
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 96);
    v18 = *(unsigned __int8 *)(v1 + 208);
    sub_1000150E8(v1 + 56, &qword_1001768D8);
    v19 = sub_1000BF75C(v13, v17, v18);
    swift_bridgeObjectRelease(v13);
    if (!*(_QWORD *)(v19 + 16))
    {
      swift_bridgeObjectRelease(v19);
      v19 = 0;
    }
    v20 = *(_QWORD *)(v1 + 136);
    swift_task_dealloc(*(_QWORD *)(v1 + 160));
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(0, v19);
  }
}

uint64_t sub_1000BC328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  *(_QWORD *)(*(_QWORD *)v3 + 184) = v2;
  swift_task_dealloc(v7);
  swift_bridgeObjectRelease(v6[21]);
  if (v2)
  {
    v8 = sub_1000BC41C;
  }
  else
  {
    v6[24] = a2;
    v6[25] = a1;
    v8 = sub_1000BC3A8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000BC3A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  sub_10000CE40((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 192);
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000BC41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  sub_10000CE40((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003FLL, 0x80000001001344D0, 850);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BC55C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v5 + 184) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(type metadata accessor for CredentialElement(0) - 8);
  *(_QWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BC610, 0, 0);
}

uint64_t sub_1000BC610()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);

  v1 = sub_10003E408((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v1);
  v2 = sub_10003E8BC((uint64_t)_swiftEmptyArrayStorage);
  v0[14] = v2;
  v3 = defaultLogger()(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "getProposalElements: payloadProcessor provided; extracting elements from payload",
      v6,
      2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v8 = v0[12];
  v7 = v0[13];
  v9 = v0[11];
  v10 = (_QWORD *)v0[4];
  v11 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v12 = v10[3];
  v13 = v10[4];
  sub_1000151A4(v10, v12);
  v14 = *(int **)(v13 + 16);
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc(v14[1]);
  v0[15] = v15;
  *v15 = v0;
  v15[1] = sub_1000BC750;
  return v17(v11, v12, v13);
}

uint64_t sub_1000BC750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[14]);
    v5 = sub_1000BD0D8;
  }
  else
  {
    v5 = sub_1000BC7C4;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_1000BC7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(_QWORD *@<X8>);
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned __int8 v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  id v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  Swift::String v73;
  Swift::Bool v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 72);
  v89 = *(_QWORD *)(v0 + 80);
  v3 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  v8 = *(_QWORD **)(v0 + 112);
  swift_bridgeObjectRetain(v1);
  v10 = 0;
  v11 = 0;
  v88 = v0;
LABEL_4:
  *(_QWORD *)(v0 + 144) = v8;
  *(_QWORD *)(v0 + 152) = v10;
  while (v6)
  {
    v12 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v13 = v12 | (v11 << 6);
LABEL_6:
    v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v13);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v81 = v6;
      v82 = v11;
      v83 = v7;
      v84 = v3;
      v86 = v9;
      v19 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v13);
      v20 = v19[1];
      v90 = *v19;
      v21 = v14 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v22 = v14;
      swift_bridgeObjectRetain(v20);
      v80 = v22;
      swift_bridgeObjectRetain(v22);
      v85 = v2;
      v87 = *(_QWORD *)(v2 + 72);
      while (1)
      {
        v23 = sub_10006BC40(v21, *(_QWORD *)(v0 + 80), type metadata accessor for CredentialElement);
        v24 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v23);
        v25 = v24;
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_31;
        swift_bridgeObjectRetain(v20);
        v26 = sub_1000FBC04(v90, v20);
        if ((v27 & 1) == 0)
          break;
        v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v20);
        if (!*(_QWORD *)(v28 + 16))
        {
          v24 = v28;
          goto LABEL_31;
        }
        v29 = *(_QWORD *)(v89 + 8);
        v30 = **(_QWORD **)(v0 + 80);
        swift_bridgeObjectRetain(v29);
        v31 = sub_1000FBC04(v30, v29);
        if ((v32 & 1) != 0)
        {
          v33 = *(_BYTE *)(*(_QWORD *)(v28 + 56) + v31);
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v29);
        }
        else
        {
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v29);
          v33 = 2;
        }
        v0 = v88;
LABEL_32:
        v35 = *(_BYTE *)(v0 + 184);
        v36 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v34);
        v37 = sub_100096D3C(v33, v36, v35);
        swift_bridgeObjectRelease(v36);
        v38 = *(_QWORD *)(v89 + 8);
        v39 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
        swift_bridgeObjectRetain(v38);
        v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v38);
        v41 = objc_msgSend(v39, "initWithElementIdentifier:intentToRetain:", v40, v37);

        swift_bridgeObjectRetain(v20);
        v42 = v41;
        sub_100008FC0((uint64_t)v10, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v45 = sub_1000FBC04(v90, v20);
        v46 = v8[2];
        v47 = (v44 & 1) == 0;
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
        {
          __break(1u);
          goto LABEL_61;
        }
        v49 = v44;
        if (v8[3] >= v48)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_10007E170();
        }
        else
        {
          sub_10007C4D8(v48, isUniquelyReferenced_nonNull_native);
          v50 = sub_1000FBC04(v90, v20);
          if ((v49 & 1) != (v51 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            return;
          }
          v45 = v50;
        }
        swift_bridgeObjectRelease(0x8000000000000000);
        v52 = v8;
        if ((v49 & 1) == 0)
        {
          v8[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v8[6] + 16 * v45);
          *v53 = v90;
          v53[1] = v20;
          *(_QWORD *)(v8[7] + 8 * v45) = _swiftEmptyArrayStorage;
          v54 = v8[2];
          v55 = v54 + 1;
          v56 = __OFADD__(v54, 1);
          swift_bridgeObjectRetain(v8);
          if (v56)
            goto LABEL_62;
          v8[2] = v55;
          v52 = (_QWORD *)v20;
        }
        v57 = v8[7];
        swift_bridgeObjectRetain(v52);
        v58 = swift_bridgeObjectRelease(v8);
        v59 = (_QWORD *)(v57 + 8 * v45);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
        v61 = *(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v60 = *(_QWORD *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v61 >= v60 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        v0 = v88;
        v62 = *(_QWORD *)(v88 + 80);
        v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v42);
        specialized Array._endMutation()(v63);

        swift_bridgeObjectRelease(v20);
        sub_10006CA8C(v62, type metadata accessor for CredentialElement);
        v21 += v87;
        v10 = sub_1000BD384;
        if (!--v15)
        {
          swift_bridgeObjectRelease(v80);
          swift_bridgeObjectRelease(v20);
          v2 = v85;
          v9 = v86;
          v7 = v83;
          v3 = v84;
          v6 = v81;
          v11 = v82;
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease(v25);
      v24 = v20;
LABEL_31:
      swift_bridgeObjectRelease(v24);
      v33 = 2;
      goto LABEL_32;
    }
  }
  v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v16 >= v7)
    goto LABEL_50;
  v17 = *(_QWORD *)(v3 + 8 * v16);
  ++v11;
  if (v17)
    goto LABEL_21;
  v11 = v16 + 1;
  if (v16 + 1 >= v7)
    goto LABEL_50;
  v17 = *(_QWORD *)(v3 + 8 * v11);
  if (v17)
    goto LABEL_21;
  v11 = v16 + 2;
  if (v16 + 2 >= v7)
    goto LABEL_50;
  v17 = *(_QWORD *)(v3 + 8 * v11);
  if (v17)
  {
LABEL_21:
    v6 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_6;
  }
  v18 = v16 + 3;
  if (v18 >= v7)
  {
LABEL_50:
    swift_release(*(_QWORD *)(v0 + 128));
    v64 = *(_QWORD *)(v0 + 40);
    if (*(_BYTE *)(v64 + 80) == 1)
    {
      v65 = *(_QWORD *)(v0 + 128);
      v66 = *(_QWORD *)(v0 + 104);
      v67 = *(_QWORD *)(v0 + 80);
      v68 = *(_QWORD *)(v0 + 64);
      sub_100008FC0(*(_QWORD *)(v0 + 152), 0);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      (*(void (**)(uint64_t, _QWORD *))(v0 + 8))(v65, v8);
    }
    else
    {
      v69 = *(_QWORD **)(v0 + 32);
      v70 = *(_QWORD *)(v64 + 64);
      if (v70 == 1)
        v71 = 1;
      else
        v71 = 2 * (v70 == 2);
      v72 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v73._object = (void *)0x80000001001321E0;
      v73._countAndFlagsBits = 0xD000000000000016;
      v74 = NSUserDefaults.internalBool(forKey:)(v73);

      if (v74)
        v75 = 2;
      else
        v75 = v71;
      v76 = v69[3];
      v77 = v69[4];
      sub_1000151A4(v69, v76);
      v78 = *(int **)(v77 + 24);
      v91 = (int *)((char *)v78 + *v78);
      v79 = (_QWORD *)swift_task_alloc(v78[1]);
      *(_QWORD *)(v0 + 160) = v79;
      *v79 = v0;
      v79[1] = sub_1000BCE44;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))v91)(*(_QWORD *)(v0 + 16), v75, v76, v77);
    }
    return;
  }
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v7)
      goto LABEL_50;
    v17 = *(_QWORD *)(v3 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_21;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_1000BCE44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[16];
    swift_bridgeObjectRelease(v3[18]);
    swift_bridgeObjectRelease(v5);
    v6 = sub_1000BD22C;
  }
  else
  {
    v6 = sub_1000BCEC4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000BCEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = sub_1000F6E9C(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 128), *(_QWORD **)(v0 + 144), *(unsigned __int8 *)(v0 + 184));
  v4 = v1;
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  if (v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v5);
    v8 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
    swift_errorRetain(v4);
    v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v11, 0, v12, 0xD000000000000065, 0x8000000100134400, 0xD00000000000005CLL, 0x8000000100134470, 896);
    swift_willThrow(v15);
    swift_errorRelease(v4);
    sub_100008FC0(v8, 0);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = v2;
    v18 = v3;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 64);
    sub_100008FC0(*(_QWORD *)(v0 + 152), 0);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v17, v18);
  }
}

uint64_t sub_1000BD0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v4, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v6, v7, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v4, 0, v5, 0xD000000000000065, 0x8000000100134400, 0xD00000000000005CLL, 0x8000000100134470, 896);
  swift_willThrow(v8);
  swift_errorRelease(v1);
  sub_100008FC0(0, 0);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BD22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v6, 0xD000000000000065, 0x8000000100134400, 0xD00000000000005CLL, 0x8000000100134470, 896);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  sub_100008FC0(v2, 0);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BD384(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

_QWORD *sub_1000BD394()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  sub_1000150E8((uint64_t)v0 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator, &qword_100176910);
  sub_10000CE40((_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_credentialKeyManager));
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_presentmentKeySelectionProvider));
  return v0;
}

uint64_t sub_1000BD410()
{
  uint64_t v0;

  sub_1000BD394();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BD434()
{
  return type metadata accessor for PresentmentRequestInterpreter(0);
}

uint64_t type metadata accessor for PresentmentRequestInterpreter(uint64_t a1)
{
  return sub_1000147F0(a1, (uint64_t *)&unk_100177458, (uint64_t)&nominal type descriptor for PresentmentRequestInterpreter);
}

void sub_1000BD450(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = ")";
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000BE80C(319, (unint64_t *)&unk_1001774A8, type metadata accessor for IdentityReaderAuthenticator);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = L"(";
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = &unk_10012B640;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

uint64_t sub_1000BD518(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, int *);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = a2[2];
    swift_bridgeObjectRetain(v5);
    if (v9 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *v8;
    }
    else
    {
      v10 = *(_QWORD *)v8;
      sub_100005A38(v10, v9);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v9;
    }
    v11 = *(int *)(a3 + 24);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ISO18013SessionTranscript(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100008E84(&qword_100176830);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v17 = *(int *)(a3 + 28);
    v18 = (char *)(a1 + v17);
    v19 = (char *)a2 + v17;
    v20 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100008E84(&qword_100176910);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = type metadata accessor for COSE_Sign1(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
      {
        v25 = sub_100008E84(&qword_100176828);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v18, v19, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
      }
      v26 = v20[5];
      v27 = (uint64_t *)&v18[v26];
      v28 = (uint64_t *)&v19[v26];
      v29 = *v28;
      v30 = v28[1];
      sub_100005A38(*v28, v30);
      *v27 = v29;
      v27[1] = v30;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v18[v20[6]], &v19[v20[6]], v14);
      v31 = v20[7];
      v32 = &v18[v31];
      v33 = &v19[v31];
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      v35 = v20[8];
      v36 = *(_QWORD *)&v19[v35];
      *(_QWORD *)&v18[v35] = v36;
      v18[v20[9]] = v19[v20[9]];
      v37 = *(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56);
      swift_bridgeObjectRetain(v34);
      swift_retain(v36);
      v37(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_1000BD7A4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[2];
  if (v4 >> 60 != 15)
    sub_100005AB0(a1[1], v4);
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for ISO18013SessionTranscript(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v8 = (char *)a1 + *(int *)(a2 + 28);
  v9 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
  result = (*(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for COSE_Sign1(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
    sub_100005AB0(*(_QWORD *)&v8[v9[5]], *(_QWORD *)&v8[v9[5] + 8]);
    (*(void (**)(char *, uint64_t))(v7 + 8))(&v8[v9[6]], v6);
    swift_bridgeObjectRelease(*(_QWORD *)&v8[v9[7] + 8]);
    return swift_release(*(_QWORD *)&v8[v9[8]]);
  }
  return result;
}

uint64_t sub_1000BD8EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = a2[2];
  swift_bridgeObjectRetain(v6);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_100005A38(*v7, v8);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v8;
  }
  v10 = *(int *)(a3 + 24);
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ISO18013SessionTranscript(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100008E84(&qword_100176830);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = *(int *)(a3 + 28);
  v17 = (char *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
  v20 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100008E84(&qword_100176910);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for COSE_Sign1(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
    {
      v24 = sub_100008E84(&qword_100176828);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v18, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
    }
    v25 = v19[5];
    v26 = (uint64_t *)&v17[v25];
    v27 = (uint64_t *)&v18[v25];
    v28 = *v27;
    v29 = v27[1];
    sub_100005A38(*v27, v29);
    *v26 = v28;
    v26[1] = v29;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(&v17[v19[6]], &v18[v19[6]], v13);
    v30 = v19[7];
    v31 = &v17[v30];
    v32 = &v18[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v19[8];
    v35 = *(_QWORD *)&v18[v34];
    *(_QWORD *)&v17[v34] = v35;
    v17[v19[9]] = v18[v19[9]];
    v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56);
    swift_bridgeObjectRetain(v33);
    swift_retain(v35);
    v36(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t *sub_1000BDB54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2 + 1;
  v9 = a2[2];
  if ((unint64_t)a1[2] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_100005A38(*v8, a2[2]);
      a1[1] = v10;
      a1[2] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_100014A1C((uint64_t)(a1 + 1));
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_100005A38(*v8, a2[2]);
  v12 = a1[1];
  v13 = a1[2];
  a1[1] = v11;
  a1[2] = v9;
  sub_100005AB0(v12, v13);
LABEL_8:
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for ISO18013SessionTranscript(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_13:
    v22 = sub_100008E84(&qword_100176830);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_14:
  v23 = *(int *)(a3 + 28);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (v30)
    {
      sub_10006CA8C((uint64_t)v24, type metadata accessor for IdentityReaderAuthenticator);
      goto LABEL_20;
    }
    v35 = type metadata accessor for COSE_Sign1(0);
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48);
    v38 = v37(v24, 1, v35);
    v39 = v37(v25, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 16))(v24, v25, v35);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v24, 0, 1, v35);
LABEL_30:
        v53 = v26[5];
        v54 = (uint64_t *)&v24[v53];
        v55 = (uint64_t *)&v25[v53];
        v56 = *v55;
        v57 = v55[1];
        sub_100005A38(*v55, v57);
        v58 = *v54;
        v59 = v54[1];
        *v54 = v56;
        v54[1] = v57;
        sub_100005AB0(v58, v59);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 24))(&v24[v26[6]], &v25[v26[6]], v17);
        v60 = v26[7];
        v61 = &v24[v60];
        v62 = &v25[v60];
        *v61 = *v62;
        v63 = v62[1];
        v64 = v61[1];
        v61[1] = v63;
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRelease(v64);
        v65 = v26[8];
        v66 = *(_QWORD *)&v24[v65];
        v67 = *(_QWORD *)&v25[v65];
        *(_QWORD *)&v24[v65] = v67;
        swift_retain(v67);
        swift_release(v66);
        v24[v26[9]] = v25[v26[9]];
        return a1;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 24))(v24, v25, v35);
        goto LABEL_30;
      }
      (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v24, v35);
    }
    v52 = sub_100008E84(&qword_100176828);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_30;
  }
  if (v30)
  {
LABEL_20:
    v34 = sub_100008E84(&qword_100176910);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  v31 = type metadata accessor for COSE_Sign1(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v25, 1, v31))
  {
    v33 = sub_100008E84(&qword_100176828);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 16))(v24, v25, v31);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v24, 0, 1, v31);
  }
  v40 = v26[5];
  v41 = (uint64_t *)&v24[v40];
  v42 = (uint64_t *)&v25[v40];
  v43 = *v42;
  v44 = v42[1];
  sub_100005A38(*v42, v44);
  *v41 = v43;
  v41[1] = v44;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(&v24[v26[6]], &v25[v26[6]], v17);
  v45 = v26[7];
  v46 = &v24[v45];
  v47 = &v25[v45];
  *v46 = *v47;
  v48 = v47[1];
  v46[1] = v48;
  v49 = v26[8];
  v50 = *(_QWORD *)&v25[v49];
  *(_QWORD *)&v24[v49] = v50;
  v24[v26[9]] = v25[v26[9]];
  v51 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v27 + 56);
  swift_bridgeObjectRetain(v48);
  swift_retain(v50);
  v51(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_1000BDFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for ISO18013SessionTranscript(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100008E84(&qword_100176830);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 28);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100008E84(&qword_100176910);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for COSE_Sign1(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
    {
      v20 = sub_100008E84(&qword_100176828);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    }
    *(_OWORD *)&v13[v15[5]] = *(_OWORD *)&v14[v15[5]];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[v15[6]], &v14[v15[6]], v9);
    *(_OWORD *)&v13[v15[7]] = *(_OWORD *)&v14[v15[7]];
    *(_QWORD *)&v13[v15[8]] = *(_QWORD *)&v14[v15[8]];
    v13[v15[9]] = v14[v15[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *sub_1000BE1E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int *v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, int *);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a2 + 1;
  v8 = a1[2];
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = a2[2];
  if (v9 >> 60 == 15)
  {
    sub_100014A1C((uint64_t)(a1 + 1));
LABEL_4:
    *(_OWORD *)(a1 + 1) = *v7;
    goto LABEL_6;
  }
  v10 = a1[1];
  a1[1] = *(_QWORD *)v7;
  a1[2] = v9;
  sub_100005AB0(v10, v8);
LABEL_6:
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for ISO18013SessionTranscript(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_11:
    v19 = sub_100008E84(&qword_100176830);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_12:
  v20 = *(int *)(a3 + 28);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = (int *)type metadata accessor for IdentityReaderAuthenticator(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      sub_10006CA8C((uint64_t)v21, type metadata accessor for IdentityReaderAuthenticator);
      goto LABEL_18;
    }
    v32 = type metadata accessor for COSE_Sign1(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v21, 1, v32);
    v36 = v34(v22, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 32))(v21, v22, v32);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v21, 0, 1, v32);
LABEL_28:
        v38 = v23[5];
        v39 = *(_QWORD *)&v21[v38];
        v40 = *(_QWORD *)&v21[v38 + 8];
        *(_OWORD *)&v21[v38] = *(_OWORD *)&v22[v38];
        sub_100005AB0(v39, v40);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 40))(&v21[v23[6]], &v22[v23[6]], v14);
        v41 = v23[7];
        v42 = &v21[v41];
        v43 = (uint64_t *)&v22[v41];
        v45 = *v43;
        v44 = v43[1];
        v46 = v42[1];
        *v42 = v45;
        v42[1] = v44;
        swift_bridgeObjectRelease(v46);
        v47 = v23[8];
        v48 = *(_QWORD *)&v21[v47];
        *(_QWORD *)&v21[v47] = *(_QWORD *)&v22[v47];
        swift_release(v48);
        v21[v23[9]] = v22[v23[9]];
        return a1;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 40))(v21, v22, v32);
        goto LABEL_28;
      }
      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v21, v32);
    }
    v37 = sub_100008E84(&qword_100176828);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_28;
  }
  if (v27)
  {
LABEL_18:
    v31 = sub_100008E84(&qword_100176910);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  v28 = type metadata accessor for COSE_Sign1(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v28))
  {
    v30 = sub_100008E84(&qword_100176828);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(v21, v22, v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v21, 0, 1, v28);
  }
  *(_OWORD *)&v21[v23[5]] = *(_OWORD *)&v22[v23[5]];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(&v21[v23[6]], &v22[v23[6]], v14);
  *(_OWORD *)&v21[v23[7]] = *(_OWORD *)&v22[v23[7]];
  *(_QWORD *)&v21[v23[8]] = *(_QWORD *)&v22[v23[8]];
  v21[v23[9]] = v22[v23[9]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_1000BE5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE5E4);
}

uint64_t sub_1000BE5E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008E84(&qword_100176830);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100008E84(&qword_100176910);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1000BE68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE698);
}

char *sub_1000BE698(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100008E84(&qword_100176830);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100008E84(&qword_100176910);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for PresentmentRequestInterpretation(uint64_t a1)
{
  return sub_1000147F0(a1, (uint64_t *)&unk_100177640, (uint64_t)&nominal type descriptor for PresentmentRequestInterpretation);
}

void sub_1000BE750(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = &unk_10012B688;
  sub_1000BE80C(319, (unint64_t *)&unk_100177650, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013SessionTranscript);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000BE80C(319, (unint64_t *)&unk_1001774A8, type metadata accessor for IdentityReaderAuthenticator);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_1000BE80C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

id sub_1000BE858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  NSString v19;
  NSString v20;
  uint64_t v21;
  NSString v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  NSURL *v27;
  void *v28;
  void *v29;
  NSString v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    v21 = a9;
    if (a6)
    {
LABEL_3:
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a6);
      goto LABEL_6;
    }
  }
  else
  {
    v20 = 0;
    v21 = a9;
    if (a6)
      goto LABEL_3;
  }
  v22 = 0;
LABEL_6:
  v38 = v19;
  v39 = v13;
  v36 = v22;
  v37 = v20;
  if (a8 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a7, a8);
  }
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v28 = 0;
  if (v26(v21, 1, v24) != 1)
  {
    URL._bridgeToObjectiveC()(v27);
    v28 = v29;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v21, v24);
  }
  if (a11)
  {
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a11);
  }
  else
  {
    v30 = 0;
  }
  if (v26(a12, 1, v24) == 1)
  {
    v32 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v31);
    v32 = v33;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a12, v24);
  }
  v34 = objc_msgSend(v39, "initWithIdentifier:organization:organizationalUnit:iconData:iconURL:iconMediaType:privacyPolicyURL:merchantCategoryCode:", v38, v37, v36, isa, v28, v30, v32, a13);

  return v34;
}

id sub_1000BEA58(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  NSString v14;
  NSString v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;

  if (a3)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    if (a5)
      goto LABEL_3;
  }
  else
  {
    v14 = 0;
    if (a5)
    {
LABEL_3:
      v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a5);
      v16 = a9;
      if (a7)
        goto LABEL_4;
LABEL_8:
      v17 = 0;
      if (v16)
        goto LABEL_5;
LABEL_9:
      v18 = 0;
      goto LABEL_10;
    }
  }
  v15 = 0;
  v16 = a9;
  if (!a7)
    goto LABEL_8;
LABEL_4:
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!v16)
    goto LABEL_9;
LABEL_5:
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
LABEL_10:
  v19 = objc_msgSend(v9, "initWithTrusted:untrustedIdentifier:untrustedOrganization:untrustedIssuerIdentifier:untrustedIssuerOrganization:", a1 & 1, v14, v15, v17, v18);

  return v19;
}

id sub_1000BEB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  NSString v26;
  NSString v27;
  NSString v28;
  Class v29;
  Class v30;
  void *v31;
  void *v32;
  Class v33;
  uint64_t v34;
  NSString v35;
  void *v36;
  void *v37;
  NSString v38;
  Class isa;
  id v41;
  Class v42;
  NSString v43;
  id v44;

  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a5, a6);
  }
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  sub_100008E84(&qword_1001776B0);
  v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a11);
  v42 = v29;
  if (a13 >> 60 == 15)
  {
    v30 = 0;
  }
  else
  {
    v30 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a12, a13);
  }
  v31 = v27;
  v32 = v26;
  if (a15 >> 60 == 15)
  {
    v33 = 0;
    v34 = a21;
    if (a19)
      goto LABEL_9;
LABEL_12:
    v35 = 0;
    v37 = a16;
    v36 = a17;
    if (v34)
      goto LABEL_10;
LABEL_13:
    v38 = 0;
    goto LABEL_14;
  }
  v33 = Data._bridgeToObjectiveC()().super.isa;
  sub_10000B164(a14, a15);
  v34 = a21;
  if (!a19)
    goto LABEL_12;
LABEL_9:
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a19);
  v37 = a16;
  v36 = a17;
  if (!v34)
    goto LABEL_13;
LABEL_10:
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
LABEL_14:
  v41 = objc_msgSend(v44, "initWithCredentialIdentifier:presentmentKeyIdentifier:presentmentPublicKey:partition:docType:elements:authACL:readerAuthCertificateData:readerMetadata:readerAnalytics:region:issuingJurisdiction:", v43, v32, isa, v31, v28, v42, v30, v33, v37, v36, v35, v38);

  return v41;
}

_QWORD *sub_1000BEE18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100008E84(&qword_1001752D8);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000BF0F8((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100039B9C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1000BEEFC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000BF0F8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000BF2F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v46 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v46 - v19;
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain(a2);
  v21 = sub_1000FBC04(a1, a2);
  if ((v22 & 1) == 0)
  {
    v18 = swift_bridgeObjectRelease(a2);
LABEL_8:
    defaultLogger()(v18);
    v32 = swift_bridgeObjectRetain_n(a2, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v47 = v10;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v49 = v36;
      *(_DWORD *)v35 = 136446210;
      swift_bridgeObjectRetain(a2);
      v48 = sub_10003FA80(a1, a2, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v35 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: docType: %{public}s does not exist on device", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v47);
      return 0;
    }

    swift_bridgeObjectRelease_n(a2, 2);
    v37 = *(void (**)(char *, uint64_t))(v11 + 8);
    v38 = v14;
LABEL_16:
    v37(v38, v10);
    return 0;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v21);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(a2);
  if (!a5)
  {
    v39 = v23;
LABEL_13:
    v40 = swift_bridgeObjectRelease(v39);
    v41 = defaultLogger()(v40);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: returning false", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v37 = *(void (**)(char *, uint64_t))(v11 + 8);
    v38 = v17;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(a5);
  v24 = sub_1000097C4(a4, a5, v23);
  v25 = swift_bridgeObjectRelease(v23);
  if ((v24 & 1) == 0)
  {
    v39 = a5;
    goto LABEL_13;
  }
  defaultLogger()(v25);
  swift_bridgeObjectRetain(a5);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v47 = v10;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v49 = v30;
    *(_DWORD *)v29 = 136446210;
    swift_bridgeObjectRetain(a5);
    v48 = sub_10003FA80(a4, a5, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v29 + 4);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "PresentmentRequestInterpreter: documentPresentForAnyRequestedRegion: region: %{public}s exists", v29, 0xCu);
    v31 = 1;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v47);
  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    return 1;
  }
  return v31;
}

uint64_t sub_1000BF75C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  void (*v21)(_QWORD *@<X8>);
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  id v49;
  NSString v50;
  id v51;
  id v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;

  v96 = a3;
  v98 = a2;
  v4 = sub_100008E84(&qword_1001752C8);
  __chkstk_darwin(v4);
  v90 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = defaultLogger()(v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "getProposalElements: no payloadProcessor provided; returning all requested elements",
      v14,
      2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = (_QWORD *)sub_10003E8BC((uint64_t)_swiftEmptyArrayStorage);
  v16 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v21 = 0;
  v22 = 0;
  v92 = a1 + 64;
  v93 = a1;
  v91 = v20;
  if (v19)
    goto LABEL_6;
LABEL_9:
  v27 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v27 < v20)
    {
      v28 = *(_QWORD *)(v16 + 8 * v27);
      ++v22;
      if (v28)
        goto LABEL_22;
      v22 = v27 + 1;
      if (v27 + 1 >= v20)
        goto LABEL_66;
      v28 = *(_QWORD *)(v16 + 8 * v22);
      if (v28)
        goto LABEL_22;
      v22 = v27 + 2;
      if (v27 + 2 >= v20)
        goto LABEL_66;
      v28 = *(_QWORD *)(v16 + 8 * v22);
      if (v28)
      {
LABEL_22:
        v19 = (v28 - 1) & v28;
        for (i = __clz(__rbit64(v28)) + (v22 << 6); ; i = v23 | (v22 << 6))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
          v26 = *(_QWORD *)(v25 + 16);
          if (!v26)
          {
            if (!v19)
              goto LABEL_9;
            goto LABEL_6;
          }
          v94 = v19;
          v95 = v22;
          v30 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v31 = v30[1];
          v99 = *v30;
          swift_bridgeObjectRetain(v31);
          swift_bridgeObjectRetain(v25);
          v32 = (uint64_t *)(v25 + 40);
          do
          {
            v34 = *(v32 - 1);
            v33 = *v32;
            swift_bridgeObjectRetain(*v32);
            v36 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v35);
            if (!*(_QWORD *)(v36 + 16))
              goto LABEL_34;
            swift_bridgeObjectRetain(v31);
            v37 = sub_1000FBC04(v99, v31);
            if ((v38 & 1) == 0)
            {
              v46 = v31;
              goto LABEL_33;
            }
            v39 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRelease(v31);
            swift_bridgeObjectRelease(v36);
            if (!*(_QWORD *)(v39 + 16))
            {
              v36 = v39;
              goto LABEL_34;
            }
            swift_bridgeObjectRetain(v33);
            v40 = sub_1000FBC04(v34, v33);
            if ((v41 & 1) == 0)
            {
              v46 = v33;
              v36 = v39;
LABEL_33:
              swift_bridgeObjectRelease(v46);
LABEL_34:
              swift_bridgeObjectRelease(v36);
              v48 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v47);
              swift_bridgeObjectRelease(v48);
              v45 = 0;
              goto LABEL_35;
            }
            LODWORD(v97) = *(unsigned __int8 *)(*(_QWORD *)(v39 + 56) + v40);
            swift_bridgeObjectRelease(v33);
            swift_bridgeObjectRelease(v39);
            v43 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v42);
            v44 = v43;
            if ((_DWORD)v97 == 1)
            {
              swift_bridgeObjectRelease(v43);
              v45 = 1;
              goto LABEL_35;
            }
            if (v96 == 2 || (v96 & 1) != 0)
              goto LABEL_57;
            if (!v43)
              goto LABEL_58;
            v73 = static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter(v43);
            v75 = *(_QWORD *)(v44 + 16);
            v88 = v74;
            v89 = v44;
            if (v75 && (v76 = sub_1000FBC04(v73, v74), (v77 & 1) != 0))
            {
              v97 = *(_QWORD *)(v44 + 56);
              v87 = v76;
              v78 = type metadata accessor for AnyCodable(0);
              v79 = *(_QWORD *)(v78 - 8);
              (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v90, v97 + *(_QWORD *)(v79 + 72) * v87, v78);
              v80 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56);
              v81 = (uint64_t)v90;
              v97 = v78;
              v80(v90, 0, 1, v78);
            }
            else
            {
              v82 = type metadata accessor for AnyCodable(0);
              v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56);
              v81 = (uint64_t)v90;
              v97 = v82;
              v83(v90, 1, 1, v82);
            }
            swift_bridgeObjectRelease(v88);
            type metadata accessor for AnyCodable(0);
            v84 = *(_QWORD *)(v97 - 8);
            v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 48))(v81, 1);
            if ((_DWORD)v85 == 1)
            {
              sub_1000150E8(v81, &qword_1001752C8);
              v43 = v89;
LABEL_57:
              swift_bridgeObjectRelease(v43);
LABEL_58:
              v45 = 2;
              goto LABEL_35;
            }
            LODWORD(v88) = AnyCodable.BOOLValue.getter(v85);
            (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v81, v97);
            swift_bridgeObjectRelease(v89);
            if ((v88 & 1) == 0)
              goto LABEL_58;
            v45 = 3;
LABEL_35:
            v49 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
            v50 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v33);
            v51 = objc_msgSend(v49, "initWithElementIdentifier:intentToRetain:", v50, v45);

            swift_bridgeObjectRetain(v31);
            v52 = v51;
            sub_100008FC0((uint64_t)v21, 0);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
            v100 = v15;
            v55 = sub_1000FBC04(v99, v31);
            v56 = v15[2];
            v57 = (v54 & 1) == 0;
            v58 = v56 + v57;
            if (__OFADD__(v56, v57))
            {
              __break(1u);
LABEL_68:
              __break(1u);
              goto LABEL_69;
            }
            v59 = v54;
            if (v15[3] >= v58)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_10007E170();
            }
            else
            {
              sub_10007C4D8(v58, isUniquelyReferenced_nonNull_native);
              v60 = sub_1000FBC04(v99, v31);
              if ((v59 & 1) != (v61 & 1))
                goto LABEL_71;
              v55 = v60;
            }
            v15 = v100;
            swift_bridgeObjectRelease(0x8000000000000000);
            v62 = v15;
            if ((v59 & 1) == 0)
            {
              v15[(v55 >> 6) + 8] |= 1 << v55;
              v63 = (_QWORD *)(v15[6] + 16 * v55);
              *v63 = v99;
              v63[1] = v31;
              *(_QWORD *)(v15[7] + 8 * v55) = _swiftEmptyArrayStorage;
              v64 = v15[2];
              v65 = v64 + 1;
              v66 = __OFADD__(v64, 1);
              swift_bridgeObjectRetain(v15);
              if (v66)
                goto LABEL_68;
              v15[2] = v65;
              v62 = (_QWORD *)v31;
            }
            swift_bridgeObjectRetain(v62);
            v67 = v15[7];
            v68 = swift_bridgeObjectRelease(v15);
            v69 = (_QWORD *)(v67 + 8 * v55);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v68);
            v71 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v70 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v71 >= v70 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
            v32 += 2;
            v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v52);
            specialized Array._endMutation()(v72);
            swift_bridgeObjectRelease(v31);

            v21 = sub_1000BD384;
            --v26;
          }
          while (v26);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v25);
          v16 = v92;
          a1 = v93;
          v20 = v91;
          v19 = v94;
          v22 = v95;
          if (!v94)
            goto LABEL_9;
LABEL_6:
          v23 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
        }
      }
      v29 = v27 + 3;
      if (v29 < v20)
      {
        v28 = *(_QWORD *)(v16 + 8 * v29);
        if (v28)
        {
          v22 = v29;
          goto LABEL_22;
        }
        while (1)
        {
          v22 = v29 + 1;
          if (__OFADD__(v29, 1))
            goto LABEL_70;
          if (v22 >= v20)
            break;
          v28 = *(_QWORD *)(v16 + 8 * v22);
          ++v29;
          if (v28)
            goto LABEL_22;
        }
      }
    }
LABEL_66:
    swift_release(a1);
    sub_100008FC0((uint64_t)v21, 0);
    return (uint64_t)v15;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000BFE48()
{
  uint64_t v0;
  unint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 60 != 15)
    sub_100005AB0(*(_QWORD *)(v0 + 40), v1);

  swift_release(*(_QWORD *)(v0 + 64));
  sub_10000CE40((_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_1000BFEA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v5 = v2[3];
  v12 = v2[2];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v10 = (_QWORD *)swift_task_alloc(dword_10017768C);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_100016474;
  return sub_1000B9D38(a1, a2, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_1000BFF68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10017769C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000935C;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100177698 + dword_100177698))(a1, a2, v6);
}

_QWORD *sub_1000BFFE8(_QWORD *a1)
{
  destroy for PresentmentRequestInterpreter.DBResults(a1);
  return a1;
}

uint64_t sub_1000C0014()
{
  uint64_t v0;
  unint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 56);
  if (v1 >> 60 != 15)
    sub_100005AB0(*(_QWORD *)(v0 + 48), v1);

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 104, 7);
}

void sub_1000C0070(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000BB148(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(NSObject **)(v1 + 72), a1, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_1000C00AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C00D0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000C00E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  v10 = a1[16];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_100005A38(v3, v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  sub_10000B178(v7, v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000C0188(uint64_t a1)
{
  sub_1000C01E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  return a1;
}

uint64_t sub_1000C01E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a6);
    sub_100005AB0(a7, a8);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    sub_10000B164(a14, a15);
    swift_release(a17);
    return swift_bridgeObjectRelease(a16);
  }
  return result;
}

unint64_t sub_1000C0288()
{
  uint64_t v0;

  return sub_1000BBFEC(*(_QWORD **)(v0 + 16));
}

double sub_1000C0290(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000C02B0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  unint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  id v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, _QWORD, uint64_t);
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, uint64_t);
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;

  v120 = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v129 = *(_QWORD *)(v3 - 8);
  v130 = v3;
  __chkstk_darwin(v3);
  v135 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001755B8);
  v6 = __chkstk_darwin(v5);
  v123 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v124 = (char *)&v117 - v8;
  v9 = type metadata accessor for CredentialKeyType(0);
  v127 = *(_QWORD *)(v9 - 8);
  v128 = v9;
  v10 = __chkstk_darwin(v9);
  v125 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v121 = (char *)&v117 - v13;
  __chkstk_darwin(v12);
  v126 = (char *)&v117 - v14;
  v15 = sub_100008E84(&qword_100174840);
  __chkstk_darwin(v15);
  v17 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CredentialKeyUsage(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v117 - v23;
  v25 = objc_msgSend(a1, "usage");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    CredentialKeyUsage.init(rawValue:)(v27, v29);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
      v30 = *(void (**)(char *, _QWORD, uint64_t))(v19 + 104);
      goto LABEL_6;
    }
    sub_1000150E8((uint64_t)v17, &qword_100174840);
  }
  v30 = *(void (**)(char *, _QWORD, uint64_t))(v19 + 104);
  v30(v24, enum case for CredentialKeyUsage.invalid(_:), v18);
LABEL_6:
  v30(v22, enum case for CredentialKeyUsage.presentment(_:), v18);
  v31 = sub_1000058C8(&qword_100174848, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialKeyUsage, (uint64_t)&protocol conformance descriptor for CredentialKeyUsage);
  dispatch thunk of RawRepresentable.rawValue.getter(&v133, v18, v31);
  dispatch thunk of RawRepresentable.rawValue.getter(&v131, v18, v31);
  v32 = v134;
  v33 = v132;
  if (v133 == v131 && v134 == v132)
  {
    swift_bridgeObjectRelease_n(v134, 2);
    v34 = *(void (**)(char *, uint64_t))(v19 + 8);
    v34(v22, v18);
    v34(v24, v18);
  }
  else
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v134, v131, v132, 0);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v33);
    v36 = *(void (**)(char *, uint64_t))(v19 + 8);
    v36(v22, v18);
    v36(v24, v18);
    if ((v35 & 1) == 0)
    {
      v56 = v130;
      v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
      v55 = v135;
      v64(v135, enum case for DIPError.Code.badLogic(_:), v130);
      v65 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v71 = type metadata accessor for DIPError(0);
      v72 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v68 = swift_allocError(v71, v72, 0, 0);
      v69 = 0xD000000000000039;
      v116 = 729;
      v70 = 0x8000000100134720;
      goto LABEL_23;
    }
  }
  v37 = objc_msgSend(a1, "identifier");
  if (!v37)
  {
    v56 = v130;
    v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
    v55 = v135;
    v64(v135, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v130);
    v65 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v66 = type metadata accessor for DIPError(0);
    v67 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v68 = swift_allocError(v66, v67, 0, 0);
    v69 = 0xD000000000000032;
    v116 = 733;
    v70 = 0x80000001001347A0;
LABEL_23:
    v75 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v69, v70, 0, v55, 0, v65, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003CLL, 0x8000000100134760, v116);
    swift_willThrow(v75);
LABEL_29:
    v64(v55, enum case for DIPError.Code.internalError(_:), v56);
LABEL_30:
    swift_errorRetain(v68);
    v87 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v95 = type metadata accessor for DIPError(0);
    v96 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v95, v96, 0, 0);
    v97 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v68, v55, 0, v87, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003CLL, 0x8000000100134760, 763);
    swift_willThrow(v97);
    swift_errorRelease(v68);
    return v87;
  }
  v38 = v37;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v41 = v40;

  v42 = objc_msgSend(a1, "publicKeyIdentifier");
  if (!v42)
  {
    swift_bridgeObjectRelease(v41);
    v56 = v130;
    v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
    v55 = v135;
    v64(v135, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v130);
    v65 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v73 = type metadata accessor for DIPError(0);
    v74 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v68 = swift_allocError(v73, v74, 0, 0);
    v116 = 736;
    v70 = 0x80000001001347E0;
    v69 = 0xD00000000000003CLL;
    goto LABEL_23;
  }
  v43 = v42;
  v118 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v119 = v44;

  v45 = objc_msgSend(a1, "keyType");
  if (!v45)
  {
LABEL_15:
    v51 = v127;
    v52 = v128;
    (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, enum case for CredentialKeyType.invalid(_:), v128);
    goto LABEL_16;
  }
  v46 = v45;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v49 = v48;

  v50 = (uint64_t)v124;
  CredentialKeyType.init(rawValue:)(v47, v49);
  v51 = v127;
  v52 = v128;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v50, 1, v128) == 1)
  {
    sub_1000150E8(v50, &qword_1001755B8);
    goto LABEL_15;
  }
  v76 = v50;
  v77 = v126;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v126, v76, v52);
  v78 = (*(uint64_t (**)(char *, uint64_t))(v51 + 88))(v77, v52);
  v79 = v78;
  if ((_DWORD)v78 != enum case for CredentialKeyType.legacySE(_:))
  {
    if ((_DWORD)v78 != enum case for CredentialKeyType.ses(_:))
    {
      if ((_DWORD)v78 == enum case for CredentialKeyType.externalSE(_:))
      {
        v106 = v39;
        v107 = v118;
        v108 = v119;
        v87 = sub_1001057CC(v106, v41, v118, v119);
        sub_100005AB0(v107, v108);
        swift_bridgeObjectRelease(v41);
        return v87;
      }
LABEL_16:
      swift_bridgeObjectRelease(v41);
      v133 = 0;
      v134 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v53._countAndFlagsBits = 0xD000000000000011;
      v53._object = (void *)0x8000000100134820;
      String.append(_:)(v53);
      v54 = objc_msgSend(a1, "keyType");
      v55 = v135;
      v56 = v130;
      if (v54)
      {
        v57 = v54;
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v60 = v59;

        v61 = (uint64_t)v123;
        v62 = v60;
        v51 = v127;
        CredentialKeyType.init(rawValue:)(v58, v62);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v61, 1, v52) != 1)
        {
          v63 = v125;
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v125, v61, v52);
          goto LABEL_28;
        }
        sub_1000150E8(v61, &qword_1001755B8);
      }
      v63 = v125;
      (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v125, enum case for CredentialKeyType.invalid(_:), v52);
LABEL_28:
      _print_unlocked<A, B>(_:_:)(v63, &v133, v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v88 = *(void (**)(char *, uint64_t))(v51 + 8);
      v88(v63, v52);
      v89._countAndFlagsBits = 0xD00000000000001BLL;
      v89._object = (void *)0x8000000100134840;
      String.append(_:)(v89);
      v90 = v134;
      v127 = v133;
      v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
      v64(v55, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v56);
      v91 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v92 = type metadata accessor for DIPError(0);
      v93 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v68 = swift_allocError(v92, v93, 0, 0);
      v94 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v127, v90, 0, v55, 0, v91, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003CLL, 0x8000000100134760, 760);
      swift_willThrow(v94);
      sub_100005AB0(v118, v119);
      v88(v126, v128);
      goto LABEL_29;
    }
    v99 = objc_msgSend(a1, "keyBlob");
    if (v99)
    {
      v100 = v99;
      v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
      v103 = v102;

      v104 = v122;
      v105 = sub_1000FF1E8(v39, v41, v101, v103, 0, 0xF000000000000000);
      if (!v104)
      {
        v87 = v105;
        sub_100005AB0(v118, v119);
        sub_100005AB0(v101, v103);
        swift_bridgeObjectRelease(v41);
        return v87;
      }
      sub_100005AB0(v118, v119);
      swift_bridgeObjectRelease(v41);
      sub_100005AB0(v101, v103);
      v68 = v104;
      v55 = v135;
      (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v135, enum case for DIPError.Code.internalError(_:), v130);
      goto LABEL_30;
    }
    swift_bridgeObjectRelease(v41);
    v56 = v130;
    v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
    v55 = v135;
    v64(v135, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v130);
    v113 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v114 = type metadata accessor for DIPError(0);
    v115 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v68 = swift_allocError(v114, v115, 0, 0);
    v112 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x8000000100134860, 0, v55, 0, v113, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003CLL, 0x8000000100134760, 754);
LABEL_40:
    swift_willThrow(v112);
    sub_100005AB0(v118, v119);
    goto LABEL_29;
  }
  v80 = objc_msgSend(a1, "publicKey");
  if (!v80)
  {
    swift_bridgeObjectRelease(v41);
    v56 = v130;
    v64 = *(void (**)(char *, _QWORD, uint64_t))(v129 + 104);
    v55 = v135;
    v64(v135, enum case for DIPError.Code.idcsInvalidPresentmentKey(_:), v130);
    v109 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v110 = type metadata accessor for DIPError(0);
    v111 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v68 = swift_allocError(v110, v111, 0, 0);
    v112 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000031, 0x8000000100134890, 0, v55, 0, v109, 0xD000000000000065, 0x8000000100134400, 0xD00000000000003CLL, 0x8000000100134760, 743);
    goto LABEL_40;
  }
  v81 = v80;
  v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v84 = v83;

  v85 = objc_msgSend(a1, "keySlot");
  v86 = (uint64_t)v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 104))(v121, v79, v52);
  return sub_100058144(v39, v41, v118, v119, v82, v84, v86, (uint64_t)v85, 0);
}

uint64_t sub_1000C1044()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C1070(char **a1@<X8>)
{
  uint64_t *v1;

  sub_1000B86AC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000C108C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PresentmentProposal(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C10D0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000C1104(char **a1@<X8>)
{
  uint64_t v1;

  sub_1000B849C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1000C1124()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C1148@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B6948(*(_QWORD *)(v1 + 16), (uint64_t (*)(_QWORD *))sub_10011D94C, a1);
}

_QWORD *sub_1000C1168@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100095A78(a1, *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(v2 + 16), a2);
}

uint64_t sub_1000C1180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000B6948(*(_QWORD *)(v1 + 16), (uint64_t (*)(_QWORD *))sub_10011D05C, a1);
}

uint64_t sub_1000C11A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008E84(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void *sub_1000C11E4(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (result)
  {

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return (void *)sub_1000C1274(a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1000C1274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_1000C12B0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000C12D8()
{
  uint64_t v0;

  return sub_1000B5034(*(void **)(v0 + 16), 46, 0xD00000000000002CLL);
}

unint64_t sub_1000C130C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001776D8;
  if (!qword_1001776D8)
  {
    v1 = objc_opt_self(DCPresentmentProposalReaderAnalytics);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001776D8);
  }
  return result;
}

uint64_t sub_1000C1348()
{
  uint64_t v0;

  return sub_1000B5034(*(void **)(v0 + 16), 47, 0xD00000000000002DLL);
}

uint64_t sub_1000C137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000C13B8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 104);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  return a1;
}

uint64_t sub_1000C1414(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v16;
  id v17;

  if (result)
  {
    v16 = (void *)result;
    swift_bridgeObjectRetain(a7);
    v17 = v16;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    return sub_1000C137C(a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1000C14A4()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 22, 0xD000000000000014);
}

unint64_t sub_1000C14D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001776E8;
  if (!qword_1001776E8)
  {
    v1 = sub_100016404(&qword_1001776E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for CBOREncodedCBOR<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001776E8);
  }
  return result;
}

uint64_t sub_1000C1524()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 40, 0xD000000000000026);
}

uint64_t sub_1000C1558()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 30, 0xD00000000000001CLL);
}

uint64_t sub_1000C158C()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 44, 0xD00000000000002ALL);
}

uint64_t sub_1000C15C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PresentmentProposal(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PresentmentRequestInterpreter.DBResult(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  sub_100005AB0(a1[6], a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  v2 = a1[14];
  if (v2 >> 60 != 15)
    sub_100005AB0(a1[13], v2);
  swift_bridgeObjectRelease(a1[15]);
  return swift_release(a1[16]);
}

uint64_t initializeWithCopy for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_100005A38(v6, v7);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = (uint64_t *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_100005A38(*v11, v12);
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = v12;
  }
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v14;
  v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain(v14);
  swift_retain(v16);
  return a1;
}

_QWORD *assignWithCopy for PresentmentRequestInterpreter.DBResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[6];
  v9 = a2[7];
  sub_100005A38(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  a1[6] = v8;
  a1[7] = v9;
  sub_100005AB0(v10, v11);
  a1[8] = a2[8];
  a1[9] = a2[9];
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  v14 = a2[12];
  v15 = a1[12];
  a1[12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2 + 13;
  v17 = a2[14];
  if (a1[14] >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      v19 = *v16;
      sub_100005A38(*v16, a2[14]);
      v20 = a1[13];
      v21 = a1[14];
      a1[13] = v19;
      a1[14] = v17;
      sub_100005AB0(v20, v21);
      goto LABEL_8;
    }
    sub_100014A1C((uint64_t)(a1 + 13));
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 13) = *(_OWORD *)v16;
    goto LABEL_8;
  }
  v18 = *v16;
  sub_100005A38(*v16, a2[14]);
  a1[13] = v18;
  a1[14] = v17;
LABEL_8:
  v22 = a1[15];
  v23 = a2[15];
  a1[15] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v22);
  v24 = a2[16];
  v25 = a2[17];
  v26 = a1[16];
  a1[16] = v24;
  swift_retain(v24);
  swift_release(v26);
  a1[17] = v25;
  a1[18] = a2[18];
  return a1;
}

__n128 initializeWithTake for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PresentmentRequestInterpreter.DBResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100005AB0(v8, v9);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = (_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  if (v14 >> 60 != 15)
  {
    v15 = *(_QWORD *)(a2 + 112);
    if (v15 >> 60 != 15)
    {
      v16 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v13;
      *(_QWORD *)(a1 + 112) = v15;
      sub_100005AB0(v16, v14);
      goto LABEL_6;
    }
    sub_100014A1C(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v13;
LABEL_6:
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v19);
  v20 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentRequestInterpreter.DBResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentRequestInterpreter.DBResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentRequestInterpreter.DBResult()
{
  return &type metadata for PresentmentRequestInterpreter.DBResult;
}

uint64_t destroy for PresentmentRequestInterpreter.DBResults(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  if (a1[8])
    sub_10000CE40(a1 + 5);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = a2 + 40;
  v6 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v4);
  swift_retain(v13);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 40, v5, v6);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v5 + 32);
  }
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    v10 = *(_OWORD *)(a2 + 40);
    v11 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 56) = v11;
    goto LABEL_8;
  }
  if (!v9)
  {
    sub_10000CE40((_QWORD *)(a1 + 40));
    goto LABEL_7;
  }
  sub_10000CEBC((_QWORD *)(a1 + 40), (_QWORD *)(a2 + 40));
LABEL_8:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t assignWithTake for PresentmentRequestInterpreter.DBResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v8;
  if (*(_QWORD *)(a1 + 64))
    sub_10000CE40((_QWORD *)(a1 + 40));
  v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentRequestInterpreter.DBResults(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentRequestInterpreter.DBResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentRequestInterpreter.DBResults()
{
  return &type metadata for PresentmentRequestInterpreter.DBResults;
}

uint64_t sub_1000C1E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008E84(&qword_100174B68);
  v3[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for COSEKey(0);
  v3[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[24] = v8;
  v3[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v3[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[27] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v11);
  v3[29] = swift_task_alloc(v11);
  v3[30] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000C1F84, 0, 0);
}

uint64_t sub_1000C1F84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[17];
  v2 = v0[18];
  v3 = v0[16];
  v0[31] = *(_QWORD *)(v2 + 160);
  v4 = (_QWORD *)swift_allocObject(&unk_10016A898, 40, 7);
  v0[32] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  v5 = swift_allocObject(&unk_10016A8C0, 32, 7);
  v0[33] = v5;
  *(_QWORD *)(v5 + 16) = sub_1000C450C;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v2);
  swift_bridgeObjectRetain(v1);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[34] = v7;
  *v7 = v0;
  v7[1] = sub_1000C2070;
  return AsyncCoreDataContainer.performRead<A>(_:)(v7, sub_10006CC88, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1000C2070()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C21A0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 256);
    swift_release(*(_QWORD *)(v2 + 264));
    swift_release(v5);
    v4 = sub_1000C20E4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C20E4()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[36] = *(_QWORD *)(v0[18] + 112);
  v1 = (_QWORD *)swift_task_alloc(dword_1001787E4);
  v0[37] = v1;
  *v1 = v0;
  v1[1] = sub_1000C2134;
  return sub_100101B2C();
}

uint64_t sub_1000C2134(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000C41C0;
  else
    v5 = sub_1000C2320;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C21A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v2);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v9, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2320()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = v0[38];
  v3 = v0[17];
  v2 = v0[18];
  v4 = v0[16];
  v5 = (_QWORD *)swift_allocObject(&unk_10016A8E8, 48, 7);
  v0[40] = v5;
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  v6 = swift_allocObject(&unk_10016A910, 32, 7);
  v0[41] = v6;
  *(_QWORD *)(v6 + 16) = sub_1000C4AD4;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v1);
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[42] = v8;
  v9 = sub_100008E84(&qword_100177710);
  *v8 = v0;
  v8[1] = sub_1000C242C;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v0 + 7, sub_100039AB4, v6, v9);
}

uint64_t sub_1000C242C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000C31A0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 320);
    swift_release(*(_QWORD *)(v2 + 328));
    swift_release(v5);
    v4 = sub_1000C24A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C24A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  os_unfair_lock_s *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;

  v2 = v1;
  *(_OWORD *)(v1 + 88) = xmmword_10012AC40;
  v3 = (_QWORD *)(v1 + 88);
  v5 = *(v3 - 4);
  v4 = *(v3 - 3);
  v3[33] = v5;
  v3[34] = v4;
  v6 = *(v3 - 2);
  v7 = *(v3 - 1);
  v3[35] = v6;
  v3[36] = v7;
  if (v4)
  {
    sub_1000517CC(v5, v4, v6, v7);
    sub_100005A38(v6, v7);
    v8 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v2 + 384) = v8;
    *v8 = v2;
    v8[1] = sub_1000C312C;
    return sub_1000FE76C(v5, v4, v6, v7);
  }
  v10 = *(_QWORD *)(v2 + 136);
  defaultLogger()(a1);
  v11 = swift_bridgeObjectRetain_n(v10, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v2 + 232);
  v16 = *(_QWORD *)(v2 + 216);
  v144 = *(_QWORD *)(v2 + 208);
  v17 = *(_QWORD *)(v2 + 136);
  if (v14)
  {
    v18 = *(_QWORD *)(v2 + 128);
    v141 = *(_QWORD *)(v2 + 232);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v146 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v2 + 104) = sub_10003FA80(v18, v17, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 + 2, v2 + 112, v19 + 4);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Skipping ksk signature because no ksk exists for credential %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v141, v144);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v2 + 136), 2);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v144);
  }
  v21 = *(_QWORD *)(v2 + 344);
  v22 = *(_QWORD *)(v2 + 304);
  v23 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v24 = *(os_unfair_lock_s **)(v22 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  v25 = swift_task_alloc(32);
  *(_QWORD *)(v25 + 16) = sub_100056AC8;
  *(_QWORD *)(v25 + 24) = v22;
  v24 += 4;
  swift_retain(v22);
  os_unfair_lock_lock(v24);
  sub_100104334(v26, *(uint64_t (**)(void))(v25 + 16));
  os_unfair_lock_unlock(v24);
  if (v21)
    return swift_task_dealloc(v25);
  swift_release(*(_QWORD *)(v2 + 304));
  swift_task_dealloc(v25);
  v27 = v147;
  if (v147 >> 60 == 15)
  {
    v28 = *(_QWORD *)(v2 + 368);
    v29 = *(_QWORD *)(v2 + 376);
    v31 = *(_QWORD *)(v2 + 352);
    v30 = *(_QWORD *)(v2 + 360);
    v32 = *(_QWORD *)(v2 + 304);
    v34 = *(_QWORD *)(v2 + 160);
    v33 = *(_QWORD *)(v2 + 168);
    v35 = *(_QWORD *)(v2 + 152);
    swift_bridgeObjectRelease(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v33, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v35);
    v36 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v37 = type metadata accessor for DIPError(0);
    v38 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v37, v38, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x80000001001313D0, 0, v33, 0, v36, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 71);
    swift_willThrow(v40);
    swift_release(v32);
    sub_100051880(v31, v30, v28, v29);
LABEL_15:
    sub_10000B164(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
    v75 = *(_QWORD *)(v2 + 232);
    v74 = *(_QWORD *)(v2 + 240);
    v76 = *(_QWORD *)(v2 + 224);
    v77 = *(_QWORD *)(v2 + 200);
    v79 = *(_QWORD *)(v2 + 168);
    v78 = *(_QWORD *)(v2 + 176);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2 + 160) + 104))(v79, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v2 + 152));
    swift_errorRetain(v39);
    v80 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v81 = type metadata accessor for DIPError(0);
    v82 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v81, v82, 0, 0);
    v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v39, v79, 0, v80, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
    swift_willThrow(v83);
    swift_errorRelease(v39);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  v41 = v146;
  v42 = *(_QWORD *)(v2 + 304);
  v43 = *(os_unfair_lock_s **)(v22 + v23);
  v44 = swift_task_alloc(32);
  *(_QWORD *)(v44 + 16) = sub_100056AE0;
  *(_QWORD *)(v44 + 24) = v42;
  v43 += 4;
  swift_retain(v42);
  os_unfair_lock_lock(v43);
  sub_100104334(v45, *(uint64_t (**)(void))(v44 + 16));
  os_unfair_lock_unlock(v43);
  v145 = v41;
  swift_release(*(_QWORD *)(v2 + 304));
  swift_task_dealloc(v44);
  if (v147 >> 60 == 15)
  {
    v47 = *(_QWORD *)(v2 + 368);
    v46 = *(_QWORD *)(v2 + 376);
    v48 = *(_QWORD *)(v2 + 352);
    v49 = *(_QWORD *)(v2 + 360);
    v50 = *(_QWORD *)(v2 + 304);
    v52 = *(_QWORD *)(v2 + 160);
    v51 = *(_QWORD *)(v2 + 168);
    v53 = *(_QWORD *)(v2 + 152);
    swift_bridgeObjectRelease(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v51, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v53);
    v54 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v55 = type metadata accessor for DIPError(0);
    v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v55, v56, 0, 0);
    v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131450, 0, v51, 0, v54, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 74);
    swift_willThrow(v57);
    swift_release(v50);
    sub_100051880(v48, v49, v47, v46);
LABEL_14:
    sub_10000B164(v145, v27);
    goto LABEL_15;
  }
  v142 = v146;
  v143 = v147;
  v58 = *(_QWORD *)(v2 + 304);
  v60 = *(_QWORD *)(v2 + 184);
  v59 = *(_QWORD *)(v2 + 192);
  v61 = *(_QWORD *)(v2 + 176);
  swift_retain(v58);
  sub_100056DE4(v61);
  swift_release(v58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v61, 1, v60) == 1)
  {
    v62 = *(_QWORD *)(v2 + 376);
    v138 = *(_QWORD *)(v2 + 368);
    v63 = *(_QWORD *)(v2 + 352);
    v64 = *(_QWORD *)(v2 + 360);
    v65 = *(_QWORD *)(v2 + 304);
    v66 = *(_QWORD *)(v2 + 168);
    v67 = *(_QWORD *)(v2 + 176);
    v68 = *(_QWORD *)(v2 + 152);
    v69 = *(_QWORD *)(v2 + 160);
    swift_bridgeObjectRelease(0);
    sub_100019A28(v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v69 + 104))(v66, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v68);
    v70 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v71, v72, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x8000000100134FE0, 0, v66, 0, v70, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 77);
    swift_willThrow(v73);
    swift_release(v65);
    sub_100051880(v63, v64, v138, v62);
    sub_10000B164(v142, v143);
    goto LABEL_14;
  }
  v84 = *(_QWORD *)(v2 + 200);
  v85 = *(_QWORD *)(v2 + 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 + 192) + 32))(v84, *(_QWORD *)(v2 + 176), v85);
  v86 = type metadata accessor for CBOREncoder(0);
  v87 = swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
  v88 = CBOREncoder.init()(v87);
  v89 = sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
  v90 = dispatch thunk of CBOREncoder.encode<A>(_:)(v84, v85, v89);
  v139 = *(_QWORD *)(v2 + 304);
  v91 = *(_QWORD *)(v2 + 224);
  v133 = *(_QWORD *)(v2 + 216);
  v136 = *(_QWORD *)(v2 + 208);
  v92 = v90;
  v93 = v88;
  v95 = v94;
  v96 = swift_release(v93);
  defaultLogger()(v96);
  v97 = swift_task_alloc(32);
  v131 = v92;
  v132 = v95;
  *(_QWORD *)(v97 + 16) = v92;
  *(_QWORD *)(v97 + 24) = v95;
  Logger.sensitive(_:)(sub_1000C4B14, v97);
  swift_task_dealloc(v97);
  v134 = *(uint64_t (**)(uint64_t, uint64_t))(v133 + 8);
  v98 = v134(v91, v136);
  defaultLogger()(v98);
  v99 = swift_task_alloc(32);
  *(_QWORD *)(v99 + 16) = v3;
  Logger.sensitive(_:)(sub_1000C4B1C, v99);
  swift_task_dealloc(v99);
  v134(v91, v136);
  v100 = *(os_unfair_lock_s **)(v22 + v23);
  v101 = swift_task_alloc(32);
  *(_QWORD *)(v101 + 16) = sub_100056AF8;
  *(_QWORD *)(v101 + 24) = v139;
  swift_retain(v139);
  os_unfair_lock_lock(v100 + 4);
  sub_1000D7E98(*(_QWORD *(**)(uint64_t *__return_ptr))(v101 + 16), &v146);
  os_unfair_lock_unlock(v100 + 4);
  v102 = v146;
  swift_release(*(_QWORD *)(v2 + 304));
  swift_task_dealloc(v101);
  v103 = *(_QWORD *)(v2 + 376);
  v140 = *(_QWORD *)(v2 + 368);
  v135 = *(_QWORD *)(v2 + 352);
  v137 = *(_QWORD *)(v2 + 360);
  v104 = *(_QWORD *)(v2 + 304);
  if (!v102)
  {
    v113 = *(_QWORD *)(v2 + 192);
    v130 = *(_QWORD *)(v2 + 200);
    v114 = *(_QWORD *)(v2 + 184);
    v116 = *(_QWORD *)(v2 + 160);
    v115 = *(_QWORD *)(v2 + 168);
    v117 = *(_QWORD *)(v2 + 152);
    swift_bridgeObjectRelease(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v116 + 104))(v115, enum case for DIPError.Code.idcsInvalidAttestation(_:), v117);
    v118 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v119 = type metadata accessor for DIPError(0);
    v120 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v39 = swift_allocError(v119, v120, 0, 0);
    v121 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100135000, 0, v115, 0, v118, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 85);
    swift_willThrow(v121);
    sub_100005AB0(v131, v132);
    sub_10000B164(v145, v27);
    sub_10000B164(v142, v143);
    sub_100051880(v135, v137, v140, v103);
    swift_release(v104);
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v130, v114);
    goto LABEL_15;
  }
  v125 = *(_QWORD *)(v2 + 240);
  v126 = *(_QWORD *)(v2 + 232);
  v105 = *(_QWORD *)(v2 + 200);
  v122 = *(_QWORD *)(v2 + 376);
  v123 = *(_QWORD *)(v2 + 192);
  v124 = *(_QWORD *)(v2 + 184);
  v127 = *(_QWORD *)(v2 + 224);
  v128 = *(_QWORD *)(v2 + 176);
  v129 = *(_QWORD *)(v2 + 168);
  v106 = *(_QWORD *)(v2 + 304);
  v107 = *(_QWORD *)(v104 + 16);
  v108 = *(_QWORD *)(v104 + 24);
  v109 = *(_QWORD *)(v2 + 88);
  v110 = *(_QWORD *)(v2 + 96);
  v111 = objc_allocWithZone((Class)DCCredentialCryptoKey);
  swift_bridgeObjectRetain(v108);
  sub_10000B178(v109, v110);
  v112 = sub_1000C48D4(v107, v108, v145, v27, v142, v143, v131, v132, 0, 1, v102, v109, v110, 0);
  sub_100051880(v135, v137, v140, v122);
  swift_release(v106);
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v105, v124);
  sub_10000B164(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v105);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  return (*(uint64_t (**)(id))(v2 + 8))(v112);
}

uint64_t sub_1000C312C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc(v4);
  sub_100005AB0(v3[46], v3[47]);
  if (v1)
    v5 = sub_1000C4330;
  else
    v5 = sub_1000C332C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000C31A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 304);
  swift_release(*(_QWORD *)(v0 + 328));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v9, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v3);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v9, 0, v10, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
  swift_willThrow(v13);
  swift_errorRelease(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C332C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, os_log_t);
  uint64_t v153;
  uint64_t v154;
  NSObject *loga;
  os_log_t logb;
  os_log_t log;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;

  v2 = *(_QWORD *)(v1 + 392);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 400);
    *(_QWORD *)(v1 + 40) = &type metadata for KeySigningKeySignatureProvider;
    *(_QWORD *)(v1 + 48) = &off_10016CA58;
    *(_QWORD *)(v1 + 16) = v2;
    swift_retain_n(v2, 2);
    v4 = sub_100110DD0();
    v6 = v3;
    if (v3)
    {
      v8 = *(_QWORD *)(v1 + 368);
      v7 = *(_QWORD *)(v1 + 376);
      v10 = *(_QWORD *)(v1 + 352);
      v9 = *(_QWORD *)(v1 + 360);
      v11 = *(_QWORD *)(v1 + 304);
      sub_100019A68(v1 + 16);
      swift_release(v11);
      sub_100051880(v10, v9, v8, v7);
      swift_release_n(v2, 2);
      v12 = v10;
      v13 = v9;
      v14 = v8;
      v15 = v7;
LABEL_4:
      sub_100051880(v12, v13, v14, v15);
LABEL_5:
      sub_10000B164(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
      v16 = *(_QWORD *)(v1 + 232);
      v17 = *(_QWORD *)(v1 + 240);
      v18 = *(_QWORD *)(v1 + 224);
      v19 = *(_QWORD *)(v1 + 200);
      v21 = *(_QWORD *)(v1 + 168);
      v20 = *(_QWORD *)(v1 + 176);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 160) + 104))(v21, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 152));
      swift_errorRetain(v6);
      v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v23 = type metadata accessor for DIPError(0);
      v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v23, v24, 0, 0);
      v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v21, 0, v22, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
      swift_willThrow(v25);
      swift_errorRelease(v6);
      swift_task_dealloc(v17);
      swift_task_dealloc(v16);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    v47 = v4;
    v48 = v5;
    sub_10000B164(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
    *(_QWORD *)(v1 + 88) = v47;
    *(_QWORD *)(v1 + 96) = v48;
    v49 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
    v50 = swift_task_alloc(32);
    *(_QWORD *)(v50 + 16) = sub_100056AF8;
    *(_QWORD *)(v50 + 24) = v2;
    swift_retain(v2);
    os_unfair_lock_lock(v49 + 4);
    sub_1000D7E98(*(_QWORD *(**)(uint64_t *__return_ptr))(v50 + 16), &v170);
    os_unfair_lock_unlock(v49 + 4);
    v52 = *(_QWORD *)(v1 + 368);
    v51 = *(_QWORD *)(v1 + 376);
    v54 = *(_QWORD *)(v1 + 352);
    v53 = *(_QWORD *)(v1 + 360);
    v45 = v170;
    swift_release_n(v2, 3);
    sub_100051880(v54, v53, v52, v51);
    swift_task_dealloc(v50);
    sub_100019A68(v1 + 16);
    v46 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 368);
    v28 = *(_QWORD *)(v1 + 376);
    v30 = *(_QWORD *)(v1 + 352);
    v29 = *(_QWORD *)(v1 + 360);
    v31 = *(_QWORD *)(v1 + 136);
    defaultLogger()(a1);
    swift_bridgeObjectRetain(v31);
    sub_1000517CC(v30, v29, v27, v28);
    swift_bridgeObjectRetain(v31);
    v32 = sub_1000517CC(v30, v29, v27, v28);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = os_log_type_enabled(v33, v34);
    v37 = *(_QWORD *)(v1 + 368);
    v36 = *(_QWORD *)(v1 + 376);
    v39 = *(_QWORD *)(v1 + 352);
    v38 = *(_QWORD *)(v1 + 360);
    v40 = *(_QWORD *)(v1 + 240);
    v41 = *(_QWORD *)(v1 + 216);
    v168 = *(_QWORD *)(v1 + 208);
    v42 = *(_QWORD *)(v1 + 136);
    if (v35)
    {
      v165 = *(_QWORD *)(v1 + 240);
      v43 = *(_QWORD *)(v1 + 128);
      loga = v33;
      v44 = swift_slowAlloc(22, -1);
      v158 = swift_slowAlloc(64, -1);
      v170 = v158;
      *(_DWORD *)v44 = 136315394;
      swift_bridgeObjectRetain(v42);
      *(_QWORD *)(v1 + 112) = sub_10003FA80(v43, v42, &v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v44 + 4);
      swift_bridgeObjectRelease_n(v42, 3);
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v1 + 120) = sub_10003FA80(v39, v38, &v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v44 + 14);
      swift_bridgeObjectRelease(v38);
      sub_100051880(v39, v38, v37, v36);
      sub_100051880(v39, v38, v37, v36);
      _os_log_impl((void *)&_mh_execute_header, loga, v34, "Credential %s referenced ksk %s but no such key exists", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v158, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_100051880(v39, v38, v37, v36);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v165, v168);
    }
    else
    {
      sub_100051880(v39, v38, v37, v36);
      swift_bridgeObjectRelease_n(v42, 2);
      sub_100051880(v39, v38, v37, v36);
      sub_100051880(v39, v38, v37, v36);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v168);
    }
    v45 = 0;
    v46 = *(_QWORD *)(v1 + 400);
  }
  v55 = *(_QWORD *)(v1 + 304);
  v56 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v57 = *(os_unfair_lock_s **)(v55 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  v58 = swift_task_alloc(32);
  *(_QWORD *)(v58 + 16) = sub_100056AC8;
  *(_QWORD *)(v58 + 24) = v55;
  v57 += 4;
  swift_retain(v55);
  os_unfair_lock_lock(v57);
  sub_100104334(v59, *(uint64_t (**)(void))(v58 + 16));
  os_unfair_lock_unlock(v57);
  if (v46)
    return swift_task_dealloc(v58);
  swift_release(*(_QWORD *)(v1 + 304));
  swift_task_dealloc(v58);
  v60 = v171;
  if (v171 >> 60 == 15)
  {
    v61 = *(_QWORD *)(v1 + 368);
    v62 = *(_QWORD *)(v1 + 376);
    v64 = *(_QWORD *)(v1 + 352);
    v63 = *(_QWORD *)(v1 + 360);
    v65 = *(_QWORD *)(v1 + 304);
    v67 = *(_QWORD *)(v1 + 160);
    v66 = *(_QWORD *)(v1 + 168);
    v68 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRelease(v45);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 104))(v66, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v68);
    v69 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v70, v71, 0, 0);
    v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x80000001001313D0, 0, v66, 0, v69, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 71);
    swift_willThrow(v72);
    swift_release(v65);
    v12 = v64;
    v13 = v63;
    v14 = v61;
    v15 = v62;
    goto LABEL_4;
  }
  v73 = v170;
  v74 = *(_QWORD *)(v1 + 304);
  v75 = *(os_unfair_lock_s **)(v55 + v56);
  v76 = swift_task_alloc(32);
  *(_QWORD *)(v76 + 16) = sub_100056AE0;
  *(_QWORD *)(v76 + 24) = v74;
  v75 += 4;
  swift_retain(v74);
  os_unfair_lock_lock(v75);
  sub_100104334(v77, *(uint64_t (**)(void))(v76 + 16));
  os_unfair_lock_unlock(v75);
  v169 = v73;
  swift_release(*(_QWORD *)(v1 + 304));
  swift_task_dealloc(v76);
  if (v171 >> 60 == 15)
  {
    v78 = *(_QWORD *)(v1 + 368);
    v166 = *(_QWORD *)(v1 + 376);
    v80 = *(_QWORD *)(v1 + 352);
    v79 = *(_QWORD *)(v1 + 360);
    v81 = *(_QWORD *)(v1 + 304);
    v82 = *(_QWORD *)(v1 + 160);
    v83 = *(_QWORD *)(v1 + 168);
    v84 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRelease(v45);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v83, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v84);
    v85 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v86 = type metadata accessor for DIPError(0);
    v87 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v86, v87, 0, 0);
    v88 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x8000000100131450, 0, v83, 0, v85, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 74);
    swift_willThrow(v88);
    swift_release(v81);
    sub_100051880(v80, v79, v78, v166);
LABEL_19:
    sub_10000B164(v169, v60);
    goto LABEL_5;
  }
  v164 = v170;
  v167 = v171;
  v89 = *(_QWORD *)(v1 + 304);
  v90 = *(_QWORD *)(v1 + 184);
  v91 = *(_QWORD *)(v1 + 192);
  v92 = *(_QWORD *)(v1 + 176);
  swift_retain(v89);
  sub_100056DE4(v92);
  swift_release(v89);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v92, 1, v90) == 1)
  {
    v161 = *(_QWORD *)(v1 + 376);
    v93 = *(_QWORD *)(v1 + 360);
    v159 = *(_QWORD *)(v1 + 368);
    v94 = *(_QWORD *)(v1 + 352);
    v95 = *(_QWORD *)(v1 + 304);
    v96 = *(_QWORD *)(v1 + 168);
    v97 = *(_QWORD *)(v1 + 176);
    v98 = *(_QWORD *)(v1 + 152);
    v99 = *(_QWORD *)(v1 + 160);
    swift_bridgeObjectRelease(v45);
    sub_100019A28(v97);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v96, enum case for DIPError.Code.idcsCOSEKeyCreationFailed(_:), v98);
    v100 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v101 = type metadata accessor for DIPError(0);
    v102 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v101, v102, 0, 0);
    v103 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x8000000100134FE0, 0, v96, 0, v100, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 77);
    swift_willThrow(v103);
    swift_release(v95);
    sub_100051880(v94, v93, v159, v161);
    sub_10000B164(v164, v167);
    goto LABEL_19;
  }
  v104 = *(_QWORD *)(v1 + 200);
  v105 = *(_QWORD *)(v1 + 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 192) + 32))(v104, *(_QWORD *)(v1 + 176), v105);
  v106 = type metadata accessor for CBOREncoder(0);
  v107 = swift_allocObject(v106, *(unsigned int *)(v106 + 48), *(unsigned __int16 *)(v106 + 52));
  v108 = CBOREncoder.init()(v107);
  v109 = sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
  v110 = dispatch thunk of CBOREncoder.encode<A>(_:)(v104, v105, v109);
  v162 = *(_QWORD *)(v1 + 304);
  v111 = *(_QWORD *)(v1 + 224);
  v151 = *(_QWORD *)(v1 + 216);
  logb = *(os_log_t *)(v1 + 208);
  v112 = v110;
  v113 = v108;
  v115 = v114;
  v116 = swift_release(v113);
  defaultLogger()(v116);
  v117 = swift_task_alloc(32);
  v149 = v112;
  *(_QWORD *)(v117 + 16) = v112;
  *(_QWORD *)(v117 + 24) = v115;
  Logger.sensitive(_:)(sub_1000C4B14, v117);
  swift_task_dealloc(v117);
  v150 = v115;
  v152 = *(uint64_t (**)(uint64_t, os_log_t))(v151 + 8);
  v118 = v152(v111, logb);
  defaultLogger()(v118);
  v119 = swift_task_alloc(32);
  *(_QWORD *)(v119 + 16) = v1 + 88;
  Logger.sensitive(_:)(sub_1000C4B1C, v119);
  swift_task_dealloc(v119);
  v152(v111, logb);
  v120 = *(os_unfair_lock_s **)(v55 + v56);
  v121 = swift_task_alloc(32);
  *(_QWORD *)(v121 + 16) = sub_100056AF8;
  *(_QWORD *)(v121 + 24) = v162;
  v120 += 4;
  swift_retain(v162);
  os_unfair_lock_lock(v120);
  sub_1000D7E98(*(_QWORD *(**)(uint64_t *__return_ptr))(v121 + 16), &v170);
  os_unfair_lock_unlock(v120);
  v122 = v170;
  swift_release(*(_QWORD *)(v1 + 304));
  swift_task_dealloc(v121);
  v123 = *(_QWORD *)(v1 + 376);
  v163 = *(_QWORD *)(v1 + 368);
  log = *(os_log_t *)(v1 + 352);
  v160 = *(_QWORD *)(v1 + 360);
  v124 = *(_QWORD *)(v1 + 304);
  if (!v122)
  {
    v132 = *(_QWORD *)(v1 + 192);
    v154 = *(_QWORD *)(v1 + 200);
    v133 = *(_QWORD *)(v1 + 184);
    v135 = *(_QWORD *)(v1 + 160);
    v134 = *(_QWORD *)(v1 + 168);
    v136 = *(_QWORD *)(v1 + 152);
    swift_bridgeObjectRelease(v45);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v135 + 104))(v134, enum case for DIPError.Code.idcsInvalidAttestation(_:), v136);
    v137 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v138 = type metadata accessor for DIPError(0);
    v139 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v6 = swift_allocError(v138, v139, 0, 0);
    v140 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100135000, 0, v134, 0, v137, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 85);
    swift_willThrow(v140);
    sub_100005AB0(v149, v150);
    sub_10000B164(v169, v60);
    sub_10000B164(v164, v167);
    sub_100051880((uint64_t)log, v160, v163, v123);
    swift_release(v124);
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v154, v133);
    goto LABEL_5;
  }
  v145 = *(_QWORD *)(v1 + 240);
  v146 = *(_QWORD *)(v1 + 232);
  v141 = *(_QWORD *)(v1 + 376);
  v142 = *(_QWORD *)(v1 + 192);
  v143 = *(_QWORD *)(v1 + 184);
  v144 = *(_QWORD *)(v1 + 200);
  v147 = *(_QWORD *)(v1 + 224);
  v148 = *(_QWORD *)(v1 + 176);
  v153 = *(_QWORD *)(v1 + 168);
  v126 = *(_QWORD *)(v124 + 16);
  v125 = *(_QWORD *)(v124 + 24);
  v127 = *(_QWORD *)(v1 + 88);
  v128 = *(_QWORD *)(v1 + 96);
  v129 = *(_QWORD *)(v1 + 304);
  v130 = objc_allocWithZone((Class)DCCredentialCryptoKey);
  swift_bridgeObjectRetain(v125);
  sub_10000B178(v127, v128);
  v131 = sub_1000C48D4(v126, v125, v169, v60, v164, v167, v149, v150, 0, 1, v122, v127, v128, v45);
  sub_100051880((uint64_t)log, v160, v163, v141);
  swift_release(v129);
  (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v144, v143);
  sub_10000B164(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  swift_task_dealloc(v145);
  swift_task_dealloc(v146);
  swift_task_dealloc(v147);
  swift_task_dealloc(v144);
  swift_task_dealloc(v148);
  swift_task_dealloc(v153);
  return (*(uint64_t (**)(id))(v1 + 8))(v131);
}

uint64_t sub_1000C41C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C4330()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 304));
  sub_100051880(v4, v3, v1, v2);
  sub_100051880(v4, v3, v1, v2);
  sub_10000B164(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  v5 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 104))(v11, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 152));
  swift_errorRetain(v5);
  v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v13 = type metadata accessor for DIPError(0);
  v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v14, 0, 0);
  v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v11, 0, v12, 0xD000000000000069, 0x8000000100134F40, 0xD000000000000021, 0x8000000100134FB0, 97);
  swift_willThrow(v15);
  swift_errorRelease(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C44E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C450C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = sub_1000093E8(*(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  if (!v1)

}

void sub_1000C4548(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = sub_1000093E8(a2, a3);
  if (v5)
    return;
  v10 = v9;
  v11 = type metadata accessor for StoredCryptoKey(0);
  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11)), "initWithContext:", *(_QWORD *)(a1 + 16));
  sub_1000C98C8(a4);
  objc_msgSend(v10, "addCryptoKeysObject:", v12);
  sub_1000091F8();
  v13 = (uint64_t)sub_1000C5240();
  v14 = v13;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v26 = v13;
    else
      v26 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v14);
    if (v27)
      goto LABEL_6;
LABEL_18:

    swift_bridgeObjectRelease(v14);
LABEL_19:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_6:
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_9:
    v16 = v15;
    swift_bridgeObjectRelease(v14);
    v17 = objc_msgSend(v16, "identifier");
    if (v17)
    {
      v18 = v17;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v21 = v20;

      v22 = objc_msgSend(v16, "publicKeyIdentifier");
      if (v22)
      {
        v23 = v22;
        v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v28 = v25;

        *(_QWORD *)a5 = v19;
        *(_QWORD *)(a5 + 8) = v21;
        *(_QWORD *)(a5 + 16) = v24;
        *(_QWORD *)(a5 + 24) = v28;
        return;
      }
      swift_bridgeObjectRelease(v21);

    }
    else
    {

    }
    goto LABEL_19;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v14 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

unint64_t sub_1000C4774()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000002ALL;
}

unint64_t sub_1000C4800(uint64_t a1)
{
  unint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >> 60 == 15)
  {
    object = (void *)0xE500000000000000;
    countAndFlagsBits = 0x3E6C696E3CLL;
  }
  else
  {
    v5 = *(_QWORD *)a1;
    sub_100005A38(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v6 = Data.base16EncodedString()();
    countAndFlagsBits = v6._countAndFlagsBits;
    object = v6._object;
    sub_10000B164(v5, v2);
  }
  v7._countAndFlagsBits = countAndFlagsBits;
  v7._object = object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000025;
}

id sub_1000C48D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14)
{
  Class isa;
  Class v22;
  NSArray v23;
  Class v24;
  Class v25;
  void *v26;
  void *v27;
  NSArray v28;
  id v29;
  void *v31;
  NSString v32;
  unint64_t v33;
  Class v34;
  uint64_t v35;
  unint64_t v36;
  NSData v37;

  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v35 = a3;
  v36 = a4;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v33 = a6;
  v37.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v22 = Data._bridgeToObjectiveC()().super.isa;
  v23.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a11);
  v34 = v22;
  v24 = isa;
  if (a13 >> 60 != 15)
  {
    v25 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a12, a13);
    v27 = v31;
    v26 = v32;
    if (a14)
      goto LABEL_3;
LABEL_5:
    v28.super.isa = 0;
    goto LABEL_6;
  }
  v25 = 0;
  v27 = v31;
  v26 = v32;
  if (!a14)
    goto LABEL_5;
LABEL_3:
  v28.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a14);
LABEL_6:
  v29 = objc_msgSend(v27, "initWithIdentifier:publicKey:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:keyAuthorization:kskAttestation:", v26, v24, v37.super.isa, v34, a9, a10, v23.super.isa, v25, v28.super.isa);
  sub_100005AB0(a7, a8);
  sub_100005AB0(a5, v33);
  sub_100005AB0(v35, v36);

  return v29;
}

uint64_t sub_1000C4AA0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000C4AD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000C4548(a1, *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1000C4AF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000C4B14()
{
  return sub_1000C4774();
}

unint64_t sub_1000C4B1C()
{
  uint64_t v0;

  return sub_1000C4800(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C4B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v15;
  int v16;
  int v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_100008E84((uint64_t *)&unk_100177B40);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  DIPError.Code.init(rawValue:)(a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000D63C((uint64_t)v6);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v15 == enum case for DIPError.Code.missingEntitlement(_:))
    goto LABEL_8;
  v16 = v15;
  if (v15 == enum case for DIPError.Code.invalidStoredData(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5004;
  }
  if (v15 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5002;
  }
  else if (v15 == enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5005;
  }
  else if (v15 == enum case for DIPError.Code.unableToGenerateNonceOnWatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5007;
  }
  else if (v15 == enum case for DIPError.Code.unableToGenerateAuthorizationTokenOnPhone(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5006;
  }
  else
  {
    v17 = enum case for DIPError.Code.unableToGeneratePrearmTrustKeyOnPhone(_:);
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v13, v7);
    if (v16 != v17)
    {
      v18(v11, v7);
      return -5000;
    }
    return -5008;
  }
}

void *sub_1000C4E40()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;
  unint64_t v18;

  v1 = type metadata accessor for NSFastEnumerationIterator(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, "payloads");
  result = &_swiftEmptyArrayStorage;
  if (v5)
  {
    v18 = (unint64_t)&_swiftEmptyArrayStorage;
    v7 = NSSet.makeIterator()();
    NSFastEnumerationIterator.next()(&v16, v7);
    while (v17)
    {
      sub_100041220(&v16, v15);
      v10 = type metadata accessor for StoredPayload(0);
      v9 = swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v10, 6);
      if ((v9 & 1) != 0)
      {
        v11 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v8);

      }
      NSFastEnumerationIterator.next()(&v16, v9);
    }
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

    return (void *)v18;
  }
  return result;
}

void *sub_1000C4FBC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD v36[2];
  id v37;
  uint64_t v38;
  id v39;

  v2 = type metadata accessor for CredentialKeyUsage(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v36 - v7;
  v9 = objc_msgSend(v0, "credentialIdentifier");
  if (!v9)
    return &_swiftEmptyArrayStorage;
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  v14 = objc_msgSend(v0, "managedObjectContext");
  if (!v14)
  {
    swift_bridgeObjectRelease(v13);
    return &_swiftEmptyArrayStorage;
  }
  v39 = v14;
  v38 = type metadata accessor for StoredCryptoKey(0);
  v37 = (id)static StoredCryptoKey.fetchRequest()();
  v36[1] = sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v15 = sub_100008E84(&qword_100174878);
  v16 = v11;
  v17 = swift_allocObject(v15, 152, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10012AB20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v18 = sub_10000EA3C();
  v36[0] = v1;
  v19 = v18;
  *(_QWORD *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 32) = v16;
  *(_QWORD *)(v17 + 40) = v13;
  v20 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v21 = v20(v8, enum case for CredentialKeyUsage.deviceEncryption(_:), v2);
  v22 = CredentialKeyUsage.rawValue.getter(v21);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v8, v2);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v19;
  *(_QWORD *)(v17 + 72) = v22;
  *(_QWORD *)(v17 + 80) = v24;
  v26 = v20(v6, enum case for CredentialKeyUsage.deviceEncryptionAuthRequired(_:), v2);
  v27 = CredentialKeyUsage.rawValue.getter(v26);
  v29 = v28;
  v25(v6, v2);
  *(_QWORD *)(v17 + 136) = &type metadata for String;
  *(_QWORD *)(v17 + 144) = v19;
  *(_QWORD *)(v17 + 112) = v27;
  *(_QWORD *)(v17 + 120) = v29;
  v30 = (void *)NSPredicate.init(format:_:)(0xD000000000000046, 0x8000000100135160, v17);
  v31 = v37;
  objc_msgSend(v37, "setPredicate:", v30);

  v32 = v31;
  v33 = v39;
  v34 = NSManagedObjectContext.fetch<A>(_:)(v31, v38);

  return (void *)v34;
}

void *sub_1000C5240()
{
  return sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.keySigning(_:));
}

uint64_t sub_1000C525C()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  unint64_t v28;
  id v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  id v35;
  void *v36;
  void (*v37)(char *, char *, uint64_t);
  id v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  Class isa;
  Class v44;
  Class v45;
  objc_class *v46;
  Class v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  objc_class *v74;
  Class v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void (*v80)(char *, uint64_t);
  id v81;
  NSDictionary v82;
  id v83;
  id v84;
  id v85;
  void (*v86)(char *, uint64_t);
  uint64_t result;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  void (*v90)(char *, char *, uint64_t);
  char *v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;

  v1 = v0;
  v2 = (_QWORD *)type metadata accessor for DIPError.Code(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  v102 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001755B0);
  v6 = __chkstk_darwin(v5);
  v96 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v95 = (char *)&v88 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v88 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v88 - v13;
  v15 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v98 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v100 = (char *)&v88 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v88 - v20;
  v22 = (unint64_t)objc_msgSend(v0, "format");
  if ((v22 & 0x8000000000000000) != 0)
    goto LABEL_34;
  v23 = v22;
  v24 = objc_msgSend(v0, "docType");
  if (!v24)
  {
    v55 = v102;
    (*(void (**)(char *, _QWORD, _QWORD *))(v3 + 104))(v102, enum case for DIPError.Code.invalidStoredData(_:), v2);
    v56 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_10000745C();
    swift_allocError(v57, v58, 0, 0);
    v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x80000001001351B0, 0, v55, 0, v56, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000017, 0x8000000100135250, 443);
LABEL_14:
    swift_willThrow(v59);
    return (uint64_t)v2;
  }
  v25 = v24;
  v99 = v15;
  v26 = objc_msgSend(v1, "payloadData");
  if (!v26)
  {

    v60 = v102;
    (*(void (**)(char *, _QWORD, _QWORD *))(v3 + 104))(v102, enum case for DIPError.Code.invalidStoredData(_:), v2);
    v61 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v62 = type metadata accessor for DIPError(0);
    v63 = sub_10000745C();
    swift_allocError(v62, v63, 0, 0);
    v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100135230, 0, v60, 0, v61, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000017, 0x8000000100135250, 446);
    goto LABEL_14;
  }
  v27 = v26;
  v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v94 = v28;

  v92 = v1;
  v29 = objc_msgSend(v1, "createdAt");
  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v14, 1, 1, v99);
    goto LABEL_16;
  }
  v30 = v29;
  v91 = v21;
  v31 = v100;
  ((void (*)(void))static Date._unconditionallyBridgeFromObjectiveC(_:))();

  v32 = v101;
  v33 = v99;
  v90 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v90(v14, v31, v99);
  v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v89(v14, 0, 1, v33);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v34(v14, 1, v33) == 1)
  {
LABEL_16:

    sub_1000CAA7C((uint64_t)v14);
    v64 = v102;
    (*(void (**)(char *, _QWORD, _QWORD *))(v3 + 104))(v102, enum case for DIPError.Code.invalidStoredData(_:), v2);
    v65 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v66 = type metadata accessor for DIPError(0);
    v67 = sub_10000745C();
    swift_allocError(v66, v67, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100135270, 0, v64, 0, v65, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000017, 0x8000000100135250, 449);
    swift_willThrow(v68);
    sub_100005AB0(v93, v94);
    return (uint64_t)v2;
  }
  v90(v91, v14, v33);
  v35 = objc_msgSend(v92, "updatedAt");
  if (!v35)
  {
    v89(v12, 1, 1, v33);
    goto LABEL_18;
  }
  v36 = v35;
  ((void (*)(void))static Date._unconditionallyBridgeFromObjectiveC(_:))();

  v37 = v90;
  v90(v12, v31, v33);
  v89(v12, 0, 1, v33);
  if (v34(v12, 1, v33) == 1)
  {
LABEL_18:

    sub_1000CAA7C((uint64_t)v12);
    v69 = v102;
    (*(void (**)(char *, _QWORD, _QWORD *))(v3 + 104))(v102, enum case for DIPError.Code.invalidStoredData(_:), v2);
    v70 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v71 = type metadata accessor for DIPError(0);
    v72 = sub_10000745C();
    swift_allocError(v71, v72, 0, 0);
    v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100135290, 0, v69, 0, v70, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000017, 0x8000000100135250, 452);
    swift_willThrow(v73);
    sub_100005AB0(v93, v94);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v91, v33);
    return (uint64_t)v2;
  }
  v37(v98, v12, v33);
  v38 = v92;
  v39 = (unint64_t)objc_msgSend(v92, "protectionType");
  if ((v39 & 0x8000000000000000) == 0)
  {
    v40 = (char *)v39;
    v2 = objc_msgSend(objc_allocWithZone((Class)DCCredentialPayload), "init");
    objc_msgSend(v2, "setFormat:", v23);
    objc_msgSend(v2, "setDocType:", v25);

    v41 = v93;
    v42 = v94;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v2, "setPayloadData:", isa);

    v44 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v2, "setCreatedAt:", v44);

    v45 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v2, "setUpdatedAt:", v45);

    v46 = (objc_class *)objc_msgSend(v38, "validFrom");
    v47 = v46;
    if (v46)
    {
      v102 = v40;
      v48 = v41;
      v49 = v42;
      v50 = v100;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v51 = v95;
      v52 = v99;
      v90(v95, v50, v99);
      v89(v51, 0, 1, v52);
      v53 = v34(v51, 1, v52);
      v54 = v96;
      if (v53 == 1)
      {
        v47 = 0;
      }
      else
      {
        v47 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v101 + 8))(v51, v52);
      }
      v42 = v49;
      v41 = v48;
      v40 = v102;
    }
    else
    {
      v89(v95, 1, 1, v99);
      v54 = v96;
    }
    objc_msgSend(v2, "setValidFrom:", v47);

    v74 = (objc_class *)objc_msgSend(v92, "validUntil");
    v75 = v74;
    if (v74)
    {
      v76 = v100;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

      v77 = v99;
      v90(v54, v76, v99);
      v89(v54, 0, 1, v77);
      if (v34(v54, 1, v77) == 1)
      {
        v75 = 0;
      }
      else
      {
        v75 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v101 + 8))(v54, v77);
      }
    }
    else
    {
      v77 = v99;
      v89(v54, 1, 1, v99);
    }
    objc_msgSend(v2, "setValidUntil:", v75);

    objc_msgSend(v2, "setProtectionType:", v40);
    v78 = v97;
    v79 = sub_1000C963C();
    if (v78)
    {
      sub_100005AB0(v41, v42);

      v80 = *(void (**)(char *, uint64_t))(v101 + 8);
      v80(v98, v77);
      v80(v91, v77);
    }
    else
    {
      v81 = v79;
      if (v79)
      {
        sub_100008E84(&qword_100177CB0);
        v82.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v81);
      }
      else
      {
        v82.super.isa = 0;
      }
      objc_msgSend(v2, "setElementIdentifiersByNamespace:", v82.super.isa);

      v83 = v92;
      v84 = objc_msgSend(v92, "region");
      objc_msgSend(v2, "setRegion:", v84);

      v85 = objc_msgSend(v83, "issuingJurisdiction");
      objc_msgSend(v2, "setIssuingJurisdiction:", v85);
      sub_100005AB0(v41, v42);

      v86 = *(void (**)(char *, uint64_t))(v101 + 8);
      v86(v98, v77);
      v86(v91, v77);
    }
    return (uint64_t)v2;
  }
LABEL_34:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void *sub_1000C5D54()
{
  return sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
}

void *sub_1000C5D70(unsigned int *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v3 = type metadata accessor for CredentialKeyUsage(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "credentialIdentifier");
  if (!v7)
    return &_swiftEmptyArrayStorage;
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = objc_msgSend(v1, "managedObjectContext");
  if (!v12)
  {
    swift_bridgeObjectRelease(v11);
    return &_swiftEmptyArrayStorage;
  }
  v13 = v12;
  v30 = type metadata accessor for StoredCryptoKey(0);
  v29 = (id)static StoredCryptoKey.fetchRequest()();
  v28 = sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v14 = sub_100008E84(&qword_100174878);
  v15 = v9;
  v16 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v17 = sub_10000EA3C();
  v18 = a1;
  v19 = v17;
  *(_QWORD *)(v16 + 64) = v17;
  *(_QWORD *)(v16 + 32) = v15;
  *(_QWORD *)(v16 + 40) = v11;
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *v18, v3);
  v21 = CredentialKeyUsage.rawValue.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v19;
  *(_QWORD *)(v16 + 72) = v21;
  *(_QWORD *)(v16 + 80) = v23;
  v24 = (void *)NSPredicate.init(format:_:)(0xD000000000000035, 0x800000010012FDF0, v16);
  v25 = v29;
  objc_msgSend(v29, "setPredicate:", v24);

  v26 = NSManagedObjectContext.fetch<A>(_:)(v25, v30);
  return (void *)v26;
}

_QWORD *sub_1000C5F8C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v1 = objc_msgSend(v0, "credentialIdentifier");
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  v6 = objc_msgSend(v0, "managedObjectContext");
  if (!v6)
  {
    swift_bridgeObjectRelease(v5);
    return _swiftEmptyArrayStorage;
  }
  v7 = v6;
  v8 = type metadata accessor for StoredCryptoKey(0);
  v9 = (void *)static StoredCryptoKey.fetchRequest()();
  sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v10 = sub_100008E84(&qword_100174878);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10000EA3C();
  *(_QWORD *)(v11 + 32) = v3;
  *(_QWORD *)(v11 + 40) = v5;
  v12 = (void *)NSPredicate.init(format:_:)(0xD000000000000025, 0x8000000100135130, v11);
  objc_msgSend(v9, "setPredicate:", v12);

  v13 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  return (_QWORD *)v13;
}

uint64_t sub_1000C6100(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    v10 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = JSONEncoder.init()();
    v24 = a1;
    v12 = sub_100008E84(&qword_100177060);
    v13 = sub_1000CABCC();
    v14 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v24, v12, v13);
    if (v2)
    {
      swift_release(v11);
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DIPError.Code.jsonEncodingFailed(_:), v5);
      swift_errorRetain(v2);
      v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v17 = type metadata accessor for DIPError(0);
      v18 = sub_10000745C();
      swift_allocError(v17, v18, 0, 0);
      v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100135400, v2, v9, 0, v16, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000024, 0x8000000100135430, 508);
      swift_willThrow(v19);
      return swift_errorRelease(v2);
    }
    else
    {
      v20 = v14;
      v21 = v15;
      swift_release(v11);
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, "setElementIdentifiersByNamespace:", isa);

      return sub_100005AB0(v20, v21);
    }
  }
  return result;
}

void sub_1000C6314()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  Class isa;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  Class v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  Class v28;
  uint64_t v29;

  v1 = v0;
  v2 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setIdentifier:", v12);

  CredentialKeyType.rawValue.getter();
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v1, "setKeyType:", v15);

  CredentialKeyUsage.rawValue.getter(v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v1, "setUsage:", v19);

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setPublicKeyIdentifier:", isa);

  v21 = objc_msgSend(v1, "createdAt");
  if (!v21)
  {
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  v22 = v21;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v23(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)v24 == 1)
  {
LABEL_5:
    Date.init()(v24);
    sub_1000CAA7C((uint64_t)v4);
    goto LABEL_6;
  }
  v23(v11, v4, v5);
LABEL_6:
  v25 = Date._bridgeToObjectiveC()().super.isa;
  v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v11, v5);
  objc_msgSend(v1, "setCreatedAt:", v25);

  Date.init()(v27);
  v28 = Date._bridgeToObjectiveC()().super.isa;
  v26(v9, v5);
  objc_msgSend(v1, "setUpdatedAt:", v28);

}

uint64_t sub_1000C65D8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  void *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for CredentialKeyUsage(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v2, "credentialIdentifier");
  if (!v10)
    return 0;
  v11 = v10;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = objc_msgSend(v2, "managedObjectContext");
  if (!v14)
  {
    swift_bridgeObjectRelease(v13);
    return 0;
  }
  v15 = v14;
  v37 = type metadata accessor for StoredCryptoKey(0);
  v16 = (void *)static StoredCryptoKey.fetchRequest()();
  v34[2] = a1;
  v17 = v16;
  objc_msgSend(v16, "setFetchLimit:", 1);
  v36 = sub_10000DA34(0, (unint64_t *)&qword_100178A10, NSPredicate_ptr);
  v18 = sub_100008E84(&qword_100174878);
  v19 = swift_allocObject(v18, 152, 7);
  v34[1] = a2;
  v20 = (_QWORD *)v19;
  *(_OWORD *)(v19 + 16) = xmmword_10012AB20;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  v21 = sub_10000EA3C();
  v35 = v3;
  v22 = v21;
  v20[8] = v21;
  v20[4] = v38;
  v20[5] = v13;
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CredentialKeyUsage.presentment(_:), v6);
  v24 = CredentialKeyUsage.rawValue.getter(v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20[12] = &type metadata for String;
  v20[13] = v22;
  v20[9] = v24;
  v20[10] = v26;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v20[17] = sub_10000DA34(0, &qword_100174880, NSData_ptr);
  v20[18] = sub_10000DA6C();
  v20[14] = isa;
  v28 = (void *)NSPredicate.init(format:_:)(0xD000000000000053, 0x8000000100135460, v20);
  objc_msgSend(v17, "setPredicate:", v28);

  v29 = v35;
  result = NSManagedObjectContext.fetch<A>(_:)(v17, v37);
  if (v29)
  {

    return v26;
  }
  v31 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v33 = result;
    else
      v33 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v26 = _CocoaArrayWrapper.endIndex.getter(v33);
    result = swift_bridgeObjectRelease(v31);
    if (!v26)
      goto LABEL_13;
  }
  else
  {
    v26 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v26)
    {
LABEL_13:
      swift_bridgeObjectRelease(v31);

      return v26;
    }
  }
  if ((v31 & 0xC000000000000001) != 0)
  {
    v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v31 + 32);
LABEL_12:
    v26 = (uint64_t)v32;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_1000C68DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  id v32;
  void *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  BOOL v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;

  v1 = sub_100008E84(&qword_1001755B0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v43 - v5;
  v7 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v43 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v43 - v14;
  v16 = (uint64_t)sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  if (!v0)
  {
    v17 = v16;
    v45 = 0;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v42 = v16;
      else
        v42 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v18 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (v18)
      {
LABEL_4:
        v50 = v17 & 0xC000000000000001;
        if ((v17 & 0xC000000000000001) != 0)
        {
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
        }
        else
        {
          if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_41;
          }
          v19 = *(id *)(v17 + 32);
        }
        v49 = v18 - 1;
        if (v18 == 1)
        {
LABEL_8:
          swift_bridgeObjectRelease_n(v17, 2);
          return;
        }
        if (v18 >= 2)
        {
          v44 = v10;
          v47 = v4;
          if (v50 || (v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10), v20 >= 2) && v49 < v20)
          {
            v21 = 0;
            v51 = v13;
            v22 = v19;
            v46 = v6;
            v48 = v17;
            while (1)
            {
              v24 = v50
                  ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 + 1, v17)
                  : *(id *)(v17 + 8 * v21 + 40);
              v25 = v24;
              v53 = v22;
              v26 = objc_msgSend(v22, "createdAt");
              if (!v26)
                break;
              v27 = v26;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              v28 = v52;
              v29 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
              v29(v6, v13, v7);
              v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
              v30(v6, 0, 1, v7);
              v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
              if (v31(v6, 1, v7) == 1)
                goto LABEL_15;
              v29(v15, v6, v7);
              v32 = objc_msgSend(v25, "createdAt");
              if (v32)
              {
                v33 = v32;
                v34 = v51;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                v35 = (uint64_t)v47;
                v36 = v34;
                v6 = v46;
                v29(v47, v36, v7);
                v30((char *)v35, 0, 1, v7);
                if (v31((char *)v35, 1, v7) != 1)
                {
                  v37 = v44;
                  v29(v44, (char *)v35, v7);
                  v38 = static Date.< infix(_:_:)(v15, v37);
                  v39 = *(void (**)(char *, uint64_t))(v52 + 8);
                  v39(v37, v7);
                  v39(v15, v7);
                  v40 = (v38 & 1) == 0;
                  v22 = v53;
                  if (v40)
                    v41 = v25;
                  else
                    v41 = v53;
                  if (!v40)
                    v22 = v25;
                  v25 = v41;
                  v17 = v48;
                  goto LABEL_17;
                }
              }
              else
              {
                v35 = (uint64_t)v47;
                v30(v47, 1, 1, v7);
              }
              (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v7);
              v23 = v35;
LABEL_16:
              sub_1000CAA7C(v23);
              v17 = v48;
              v22 = v53;
LABEL_17:

              ++v21;
              v13 = v51;
              if (v49 == v21)
                goto LABEL_8;
            }
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v6, 1, 1, v7);
LABEL_15:
            v23 = (uint64_t)v6;
            goto LABEL_16;
          }
          goto LABEL_42;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
    }
    else
    {
      v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v16);
      if (v18)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease_n(v17, 2);
  }
}

void sub_1000C6D08(unint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v2 = v1;
  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unint64_t)objc_msgSend(v2, "format");
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_15;
  v9 = v8;
  v10 = objc_msgSend(v2, "docType");
  if (!v10)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.invalidStoredData(_:), v4);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    swift_allocError(v27, v28, 0, 0);
    v41 = 480;
    strcpy((char *)v40, "getContents()");
    HIWORD(v40[1]) = -4864;
    v29 = "missing stored doctype";
LABEL_9:
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, (unint64_t)(v29 - 32) | 0x8000000000000000, 0, v7, 0, v26, 0xD000000000000051, 0x80000001001351D0, v40[0], v40[1], v41);
    swift_willThrow(v32);
    return;
  }
  v11 = v10;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = objc_msgSend(v2, "payloadData");
  if (!v14)
  {
    swift_bridgeObjectRelease(v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DIPError.Code.invalidStoredData(_:), v4);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    swift_allocError(v30, v31, 0, 0);
    v41 = 483;
    strcpy((char *)v40, "getContents()");
    HIWORD(v40[1]) = -4864;
    v29 = "missing stored package";
    goto LABEL_9;
  }
  v15 = v14;
  v45 = v13;
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  v19 = (unint64_t)objc_msgSend(v2, "protectionType");
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_15:
    LOBYTE(v40[0]) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v40[0], 3451, 0);
    __break(1u);
    return;
  }
  v20 = v19;
  v44 = v16;
  v21 = objc_msgSend(v2, "region");
  v43 = v18;
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v33 = objc_msgSend(v2, "issuingJurisdiction");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v38 = v46;
  *a1 = v9;
  a1[1] = v38;
  v39 = v44;
  a1[2] = v45;
  a1[3] = v39;
  a1[4] = v43;
  a1[5] = v20;
  a1[6] = v23;
  a1[7] = v25;
  a1[8] = v35;
  a1[9] = v37;
}

void *sub_1000C70A0()
{
  return sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.payloadProtection(_:));
}

uint64_t sub_1000C70BC()
{
  void *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(uint64_t, uint64_t, uint64_t, char *);
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(char *, char *);
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t result;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  unint64_t v89;
  id v90;
  const char *v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (*v129)(char *, char *);
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  id v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t v157;
  char v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  os_log_type_t v162;
  uint8_t *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  unint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void (*v176)(char *, char *);
  int64_t v177;
  char *v178;
  uint64_t v179;
  id v180;
  unint64_t v181;
  id v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  void *v188;
  uint64_t v189;
  int64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  uint64_t v198;
  char v199;
  unint64_t v200;
  char v201;
  unint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  os_log_type_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  void *v221;
  id v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  NSObject *v231;
  os_log_type_t v232;
  uint8_t *v233;
  id v234;
  char *v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  void *v240;
  uint64_t v241;
  id v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  id v248;
  void *v249;
  id v250;
  void *v251;
  unint64_t v252;
  id v253;
  id v254;
  Class isa;
  Class v256;
  unint64_t v257;
  Class v258;
  unint64_t v259;
  Class v260;
  char *v261;
  Class v262;
  Class v263;
  uint64_t v264;
  uint64_t v265;
  Class v266;
  uint64_t v267;
  char v268;
  unsigned int v269;
  void *v270;
  Class v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  Class v275;
  void *v276;
  char v277;
  NSString v278;
  id v279;
  NSString v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  uint64_t v284;
  uint64_t v285;
  NSString v286;
  id v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void (*v291)(char *, char *);
  char *v292;
  uint64_t v293;
  unint64_t v294;
  id v295;
  void (*v296)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int (*v301)(uint64_t, uint64_t, uint64_t);
  char *v302;
  id v303;
  id v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  void *v321;
  id v322;
  unint64_t v323;
  id v324;
  _QWORD *v325;

  v1 = (_QWORD *)type metadata accessor for DIPError.Code(0);
  v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  v4 = (uint64_t)&v294 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v320 = *(_QWORD *)(v5 - 8);
  v321 = (void *)v5;
  v6 = __chkstk_darwin(v5);
  v307 = (char *)&v294 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v313 = (char *)&v294 - v9;
  v10 = __chkstk_darwin(v8);
  v314 = (char *)&v294 - v11;
  v12 = __chkstk_darwin(v10);
  v316 = (unint64_t)&v294 - v13;
  __chkstk_darwin(v12);
  v318 = (char *)&v294 - v14;
  v15 = sub_100008E84(&qword_1001755B0);
  v16 = __chkstk_darwin(v15);
  v309 = (char *)&v294 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v308 = (uint64_t)&v294 - v19;
  v20 = __chkstk_darwin(v18);
  v306 = (char *)&v294 - v21;
  v22 = __chkstk_darwin(v20);
  v312 = (uint64_t)&v294 - v23;
  v24 = __chkstk_darwin(v22);
  v310 = (char *)&v294 - v25;
  v26 = __chkstk_darwin(v24);
  v311 = (uint64_t)&v294 - v27;
  v28 = __chkstk_darwin(v26);
  v319 = (char *)&v294 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v294 - v30;
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v317 = (char *)&v294 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v294 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v294 - v39;
  v41 = objc_msgSend(v0, "credentialIdentifier");
  if (!v41)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(v2 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v1);
    v65 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v66 = type metadata accessor for DIPError(0);
    v67 = sub_10000745C();
    swift_allocError(v66, v67, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x80000001001352E0, 0, v4, 0, v65, 0xD000000000000051, 0x80000001001351D0, 0xD00000000000001ALL, 0x8000000100135310, 266);
LABEL_15:
    swift_willThrow(v68);
    return v4;
  }
  v323 = v2;
  v324 = v1;
  v322 = v41;
  v42 = objc_msgSend(v0, "partition");
  if (!v42)
  {

    (*(void (**)(uint64_t, _QWORD, id))(v323 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v324);
    v69 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_10000745C();
    swift_allocError(v70, v71, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100135330, 0, v4, 0, v69, 0xD000000000000051, 0x80000001001351D0, 0xD00000000000001ALL, 0x8000000100135310, 269);
    goto LABEL_15;
  }
  v304 = v42;
  v305 = v33;
  v303 = v0;
  v43 = objc_msgSend(v0, "createdAt");
  if (!v43)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v305 + 56))(v31, 1, 1, v32);
    goto LABEL_14;
  }
  v44 = v43;
  v302 = v40;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v45 = v305;
  v46 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
  v46(v31, v38, v32);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v45 + 56);
  v47((uint64_t)v31, 0, 1, (char *)v32);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v48(v31, 1, v32) == 1)
  {
LABEL_14:

    sub_1000CAA7C((uint64_t)v31);
    (*(void (**)(uint64_t, _QWORD, id))(v323 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v324);
    v72 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v73 = type metadata accessor for DIPError(0);
    v74 = sub_10000745C();
    swift_allocError(v73, v74, 0, 0);
    v68 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100135270, 0, v4, 0, v72, 0xD000000000000051, 0x80000001001351D0, 0xD00000000000001ALL, 0x8000000100135310, 272);
    goto LABEL_15;
  }
  v301 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v48;
  v46(v302, v31, v32);
  v49 = objc_msgSend(v303, "updatedAt");
  if (!v49)
  {
    v51 = (uint64_t)v319;
    v47((uint64_t)v319, 1, 1, (char *)v32);
    goto LABEL_18;
  }
  v50 = v49;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v51 = (uint64_t)v319;
  v46(v319, v38, v32);
  v47(v51, 0, 1, (char *)v32);
  if (v301(v51, 1, v32) == 1)
  {
LABEL_18:

    sub_1000CAA7C(v51);
    (*(void (**)(uint64_t, _QWORD, id))(v323 + 104))(v4, enum case for DIPError.Code.invalidStoredData(_:), v324);
    v76 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v77 = type metadata accessor for DIPError(0);
    v78 = sub_10000745C();
    swift_allocError(v77, v78, 0, 0);
    v79 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100135290, 0, v4, 0, v76, 0xD000000000000051, 0x80000001001351D0, 0xD00000000000001ALL, 0x8000000100135310, 275);
    swift_willThrow(v79);
    (*(void (**)(char *, uint64_t))(v305 + 8))(v302, v32);
    return v4;
  }
  v296 = v47;
  v319 = (char *)v32;
  v46(v317, (char *)v51, v32);
  v52 = v303;
  v53 = (unint64_t)objc_msgSend(v303, "state");
  if ((v53 & 0x8000000000000000) != 0)
    goto LABEL_198;
  v54 = v53;
  v55 = objc_msgSend(v52, "options");
  v56 = v302;
  v57 = v4;
  v4 = v323;
  v58 = v324;
  if (!v55)
  {

    (*(void (**)(uint64_t, _QWORD, id))(v4 + 104))(v57, enum case for DIPError.Code.invalidStoredData(_:), v58);
    v80 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v81 = type metadata accessor for DIPError(0);
    v82 = sub_10000745C();
    swift_allocError(v81, v82, 0, 0);
    v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100135350, 0, v57, 0, v80, 0xD000000000000051, 0x80000001001351D0, 0xD00000000000001ALL, 0x8000000100135310, 282);
    swift_willThrow(v83);
    v64 = *(void (**)(char *, char *))(v305 + 8);
    v63 = v319;
    v64(v317, v319);
    goto LABEL_20;
  }
  v59 = (unint64_t)v55;
  v60 = sub_10003E78C((uint64_t)&_swiftEmptyArrayStorage);
  v61 = v315;
  v62 = (unint64_t)sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.keySigning(_:));
  v63 = v319;
  if (v61)
  {
    swift_bridgeObjectRelease(v60);

    v64 = *(void (**)(char *, char *))(v305 + 8);
    v64(v317, v63);
LABEL_20:
    v64(v56, v63);
    return v4;
  }
  isUniquelyReferenced_nonNull_native = v62;
  v315 = v60;
  v294 = v54;
  v297 = 0;
  if (v62 >> 62)
    goto LABEL_81;
  v85 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_23:
  v4 = (uint64_t)v318;
  v295 = (id)v59;
  if (v85)
  {
    v86 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    v87 = 4;
    v88 = &selRef_generateDeviceEncryptionKeyForCredential_completion_;
    v299 = v85;
    v298 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
    while (1)
    {
      v59 = v87 - 4;
      if (v86)
        v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87 - 4, isUniquelyReferenced_nonNull_native);
      else
        v90 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v87);
      v323 = v87 - 3;
      if (__OFADD__(v59, 1))
      {
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        if (isUniquelyReferenced_nonNull_native < 0)
          v171 = isUniquelyReferenced_nonNull_native;
        else
          v171 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
        v85 = _CocoaArrayWrapper.endIndex.getter(v171);
        swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
        goto LABEL_23;
      }
      v91 = v88[38];
      v324 = v90;
      v92 = objc_msgSend(v90, v91);
      if (!v92)
        goto LABEL_38;
      v93 = v92;
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v96 = v95;

      v97 = objc_msgSend(v324, "publicKeyIdentifier");
      if (!v97)
        break;
      v98 = v97;
      v99 = isUniquelyReferenced_nonNull_native;
      v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v97);
      v102 = v101;

      v300 = v100;
      sub_100005A38(v100, v102);
      v103 = (_QWORD *)v315;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v315);
      v325 = v103;
      v104 = v96;
      v59 = v94;
      v105 = v104;
      v107 = sub_1000FBC04(v94, v104);
      v108 = v103[2];
      v109 = (v106 & 1) == 0;
      v110 = v108 + v109;
      if (__OFADD__(v108, v109))
        goto LABEL_76;
      v111 = v106;
      if (v103[3] >= v110)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10007E834();
      }
      else
      {
        sub_10007CEF0(v110, isUniquelyReferenced_nonNull_native);
        v112 = sub_1000FBC04(v59, v105);
        if ((v111 & 1) != (v113 & 1))
          goto LABEL_197;
        v107 = v112;
      }
      isUniquelyReferenced_nonNull_native = v99;
      v118 = v325;
      v315 = (unint64_t)v325;
      if ((v111 & 1) != 0)
      {
        v119 = v325[7] + 16 * v107;
        sub_100005AB0(*(_QWORD *)v119, *(_QWORD *)(v119 + 8));
        v59 = v300;
        *(_QWORD *)v119 = v300;
        *(_QWORD *)(v119 + 8) = v102;
        v4 = (uint64_t)v318;
        v89 = v323;
        v120 = v105;
      }
      else
      {
        v325[(v107 >> 6) + 8] |= 1 << v107;
        v121 = (unint64_t *)(v118[6] + 16 * v107);
        *v121 = v59;
        v121[1] = v105;
        v122 = (uint64_t *)(v118[7] + 16 * v107);
        v59 = v300;
        *v122 = v300;
        v122[1] = v102;
        v123 = v118[2];
        v124 = __OFADD__(v123, 1);
        v125 = v123 + 1;
        if (v124)
          goto LABEL_78;
        v118[2] = v125;
        v120 = swift_bridgeObjectRetain(v105);
        v4 = (uint64_t)v318;
        v89 = v323;
      }
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100005AB0(v59, v102);

      v85 = v299;
      v86 = v298;
      v88 = &selRef_generateDeviceEncryptionKeyForCredential_completion_;
LABEL_26:
      ++v87;
      if (v89 == v85)
        goto LABEL_47;
    }
    v92 = (id)swift_bridgeObjectRelease(v96);
LABEL_38:
    v114 = defaultLogger()(v92);
    v115 = Logger.logObject.getter(v114);
    v116 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v115, v116))
    {
      v117 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Credential key signing key does not have required field; skipping",
        v117,
        2u);
      swift_slowDealloc(v117, -1, -1);
    }

    (*(void (**)(uint64_t, void *))(v320 + 8))(v4, v321);
    v89 = v323;
    goto LABEL_26;
  }
LABEL_47:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  v59 = sub_10003E78C((uint64_t)&_swiftEmptyArrayStorage);
  v126 = v297;
  v127 = (uint64_t)sub_1000C4FBC();
  v297 = v126;
  if (v126)
  {
    swift_bridgeObjectRelease(v315);
    v128 = (char *)v59;
LABEL_49:
    swift_bridgeObjectRelease(v128);

    v129 = *(void (**)(char *, char *))(v305 + 8);
    v130 = v319;
    v129(v317, v319);
    v129(v302, v130);
    return v4;
  }
  isUniquelyReferenced_nonNull_native = v127;
  v323 = v59;
  v131 = v319;
  v132 = v302;
  if ((unint64_t)v127 >> 62)
  {
    if (v127 < 0)
      v172 = v127;
    else
      v172 = v127 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v127);
    v133 = _CocoaArrayWrapper.endIndex.getter(v172);
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    v134 = v316;
    if (v133)
      goto LABEL_52;
  }
  else
  {
    v133 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10);
    v134 = v316;
    if (v133)
    {
LABEL_52:
      v324 = (id)(isUniquelyReferenced_nonNull_native & 0xC000000000000001);
      v4 = 4;
      v298 = isUniquelyReferenced_nonNull_native;
      v299 = v133;
      while (1)
      {
        v59 = v4 - 4;
        if (v324)
          v135 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, isUniquelyReferenced_nonNull_native);
        else
          v135 = (char *)*(id *)(isUniquelyReferenced_nonNull_native + 8 * v4);
        v136 = v135;
        v137 = v4 - 3;
        if (__OFADD__(v59, 1))
          goto LABEL_77;
        v138 = objc_msgSend(v135, "identifier");
        if (!v138)
          goto LABEL_66;
        v139 = v138;
        v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
        v142 = v141;

        v143 = objc_msgSend(v136, "publicKeyIdentifier");
        if (!v143)
          break;
        v144 = v143;
        v300 = v4 - 3;
        v318 = v136;
        v145 = v140;
        v146 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v143);
        v148 = v147;

        v149 = v146;
        v59 = v148;
        sub_100005A38(v146, v148);
        v150 = (_QWORD *)v323;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v323);
        v325 = v150;
        v151 = v145;
        v152 = v142;
        v154 = sub_1000FBC04(v145, v142);
        v155 = v150[2];
        v156 = (v153 & 1) == 0;
        v157 = v155 + v156;
        if (__OFADD__(v155, v156))
          goto LABEL_79;
        v158 = v153;
        if (v150[3] >= v157)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_10007E834();
        }
        else
        {
          sub_10007CEF0(v157, isUniquelyReferenced_nonNull_native);
          v159 = sub_1000FBC04(v151, v152);
          if ((v158 & 1) != (v160 & 1))
            goto LABEL_197;
          v154 = v159;
        }
        isUniquelyReferenced_nonNull_native = v59;
        v164 = v325;
        v59 = v149;
        v323 = (unint64_t)v325;
        if ((v158 & 1) != 0)
        {
          v165 = v325[7] + 16 * v154;
          sub_100005AB0(*(_QWORD *)v165, *(_QWORD *)(v165 + 8));
          *(_QWORD *)v165 = v149;
          *(_QWORD *)(v165 + 8) = isUniquelyReferenced_nonNull_native;
          v134 = v316;
          v166 = v152;
          v137 = v300;
          v133 = v299;
        }
        else
        {
          v325[(v154 >> 6) + 8] |= 1 << v154;
          v167 = (uint64_t *)(v164[6] + 16 * v154);
          *v167 = v151;
          v167[1] = v152;
          v168 = (unint64_t *)(v164[7] + 16 * v154);
          *v168 = v149;
          v168[1] = isUniquelyReferenced_nonNull_native;
          v169 = v164[2];
          v124 = __OFADD__(v169, 1);
          v170 = v169 + 1;
          v133 = v299;
          if (v124)
            goto LABEL_80;
          v164[2] = v170;
          v166 = swift_bridgeObjectRetain(v152);
          v134 = v316;
          v137 = v300;
        }
        swift_bridgeObjectRelease(v166);
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_100005AB0(v59, isUniquelyReferenced_nonNull_native);

        isUniquelyReferenced_nonNull_native = v298;
LABEL_54:
        ++v4;
        v131 = v319;
        v132 = v302;
        if (v137 == v133)
          goto LABEL_89;
      }
      v138 = (id)swift_bridgeObjectRelease(v142);
LABEL_66:
      v161 = defaultLogger()(v138);
      v59 = Logger.logObject.getter(v161);
      v162 = static os_log_type_t.error.getter();
      if (os_log_type_enabled((os_log_t)v59, v162))
      {
        v163 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v163 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v59, v162, "Credential device encryption key does not have required field; skipping",
          v163,
          2u);
        swift_slowDealloc(v163, -1, -1);
      }

      (*(void (**)(unint64_t, void *))(v320 + 8))(v134, v321);
      goto LABEL_54;
    }
  }
LABEL_89:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  v173 = sub_10003E78C((uint64_t)&_swiftEmptyArrayStorage);
  v174 = v297;
  v175 = (unint64_t)sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  v297 = v174;
  if (v174)
  {
    swift_bridgeObjectRelease(v315);
    swift_bridgeObjectRelease(v323);
    swift_bridgeObjectRelease(v173);

    v176 = *(void (**)(char *, char *))(v305 + 8);
    v176(v317, v131);
    v176(v132, v131);
    return v4;
  }
  v177 = v175;
  if (v175 >> 62)
    goto LABEL_120;
  v4 = *(_QWORD *)((v175 & 0xFFFFFFFFFFFFF8) + 0x10);
  v178 = v314;
  if (v4)
  {
LABEL_93:
    v318 = (char *)(v177 & 0xC000000000000001);
    v179 = 4;
    v300 = v177;
    v299 = v4;
    do
    {
      v59 = v179 - 4;
      if (v318)
        v180 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v179 - 4, v177);
      else
        v180 = *(id *)(v177 + 8 * v179);
      v181 = v179 - 3;
      if (__OFADD__(v59, 1))
      {
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        if (v177 < 0)
          v211 = v177;
        else
          v211 = v177 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v177);
        v4 = _CocoaArrayWrapper.endIndex.getter(v211);
        swift_bridgeObjectRelease(v177);
        v178 = v314;
        if (!v4)
          break;
        goto LABEL_93;
      }
      v324 = v180;
      v182 = objc_msgSend(v180, "identifier");
      if (!v182)
        goto LABEL_109;
      v183 = v182;
      v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
      v186 = v185;

      v187 = objc_msgSend(v324, "publicKeyIdentifier");
      if (!v187)
      {
        v182 = (id)swift_bridgeObjectRelease(v186);
LABEL_109:
        v207 = defaultLogger()(v182);
        v59 = Logger.logObject.getter(v207);
        v208 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v59, v208))
        {
          v209 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v209 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v59, v208, "Credential presentment key does not have required field; skipping",
            v209,
            2u);
          swift_slowDealloc(v209, -1, -1);
        }

        (*(void (**)(char *, void *))(v320 + 8))(v178, v321);
        goto LABEL_95;
      }
      v188 = v187;
      v316 = v179 - 3;
      v189 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v187);
      v177 = v190;

      sub_100005A38(v189, v177);
      v191 = v173;
      v173 = swift_isUniquelyReferenced_nonNull_native(v173);
      v325 = (_QWORD *)v191;
      v192 = v186;
      v59 = v184;
      v193 = v192;
      v195 = sub_1000FBC04(v184, v192);
      v196 = *(_QWORD *)(v191 + 16);
      v197 = (v194 & 1) == 0;
      v198 = v196 + v197;
      if (__OFADD__(v196, v197))
        goto LABEL_118;
      v199 = v194;
      if (*(_QWORD *)(v191 + 24) >= v198)
      {
        if ((v173 & 1) != 0)
        {
          v173 = (unint64_t)v325;
          if ((v194 & 1) == 0)
            goto LABEL_106;
        }
        else
        {
          sub_10007E834();
          v173 = (unint64_t)v325;
          if ((v199 & 1) == 0)
            goto LABEL_106;
        }
      }
      else
      {
        sub_10007CEF0(v198, v173);
        v200 = sub_1000FBC04(v59, v193);
        if ((v199 & 1) != (v201 & 1))
          goto LABEL_197;
        v195 = v200;
        v173 = (unint64_t)v325;
        if ((v199 & 1) == 0)
        {
LABEL_106:
          *(_QWORD *)(v173 + 8 * (v195 >> 6) + 64) |= 1 << v195;
          v202 = (unint64_t *)(*(_QWORD *)(v173 + 48) + 16 * v195);
          *v202 = v59;
          v202[1] = v193;
          v203 = (uint64_t *)(*(_QWORD *)(v173 + 56) + 16 * v195);
          *v203 = v189;
          v203[1] = v177;
          v204 = *(_QWORD *)(v173 + 16);
          v124 = __OFADD__(v204, 1);
          v205 = v204 + 1;
          if (v124)
            goto LABEL_119;
          *(_QWORD *)(v173 + 16) = v205;
          v206 = swift_bridgeObjectRetain(v193);
          v4 = v299;
          goto LABEL_114;
        }
      }
      v210 = *(_QWORD *)(v173 + 56) + 16 * v195;
      sub_100005AB0(*(_QWORD *)v210, *(_QWORD *)(v210 + 8));
      *(_QWORD *)v210 = v189;
      *(_QWORD *)(v210 + 8) = v177;
      v4 = v299;
      v206 = v193;
LABEL_114:
      v181 = v316;
      swift_bridgeObjectRelease(v206);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100005AB0(v189, v177);

      v178 = v314;
      v177 = v300;
LABEL_95:
      ++v179;
    }
    while (v181 != v4);
  }
  v318 = (char *)v173;
  swift_bridgeObjectRelease(v177);
  v212 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v303;
  v213 = v297;
  v214 = (uint64_t)sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.payloadProtection(_:));
  v297 = v213;
  if (v213)
  {
    swift_bridgeObjectRelease(v315);
    swift_bridgeObjectRelease(v323);
    v128 = v318;
    goto LABEL_49;
  }
  v215 = v214;
  v216 = v319;
  if ((unint64_t)v214 >> 62)
  {
    if (v214 < 0)
      v293 = v214;
    else
      v293 = v214 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v214);
    v217 = _CocoaArrayWrapper.endIndex.getter(v293);
    swift_bridgeObjectRelease(v215);
  }
  else
  {
    v217 = *(_QWORD *)((v214 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v218 = v297;
  if (v217)
  {
    if (v217 < 1)
    {
      __break(1u);
LABEL_195:
      v239 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v59);
LABEL_154:
      v240 = v239;
      v241 = (uint64_t)v306;
      swift_bridgeObjectRelease(v59);
      if (v240)
      {
        v242 = objc_msgSend(v240, "validFrom");
        if (v242)
        {
          v243 = v242;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v244 = 0;
        }
        else
        {
          v244 = 1;
        }
        v247 = 1;
        v212(v215, v244, 1, v216);
        sub_1000CAB84(v215, v311);
        v248 = objc_msgSend(v240, "validUntil");
        if (v248)
        {
          v249 = v248;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v247 = 0;
        }
        v246 = v294;
        v296(v241, v247, 1, v216);
        sub_1000CAB84(v241, v312);
        v250 = objc_msgSend(v240, "ingestionHash");
        v321 = v240;
        if (v250)
        {
          v251 = v250;
          v320 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v250);
          v316 = v252;

          LODWORD(v314) = 0;
        }
        else
        {
          LODWORD(v314) = 0;
          v320 = 0;
          v316 = 0xF000000000000000;
        }
        v216 = v319;
        v245 = v311;
        goto LABEL_166;
      }
LABEL_158:
      LODWORD(v314) = 1;
      v245 = v311;
      v212(v311, 1, 1, v216);
      v212(v312, 1, 1, v216);
      v320 = 0;
      v321 = 0;
      v316 = 0xF000000000000000;
      v246 = v294;
LABEL_166:
      v4 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)DCCredentialProperties), "init");
      v253 = v322;
      objc_msgSend((id)v4, "setCredentialIdentifier:", v322);

      v254 = v304;
      objc_msgSend((id)v4, "setPartition:", v304);

      objc_msgSend((id)v4, "setCredentialState:", v246);
      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend((id)v4, "setCreatedAt:", isa);

      v256 = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend((id)v4, "setUpdatedAt:", v256);

      v257 = v315;
      v258 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v257);
      objc_msgSend((id)v4, "setKeySigningKeys:", v258);

      v259 = v323;
      v260 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v259);
      objc_msgSend((id)v4, "setDeviceEncryptionKeys:", v260);

      v261 = v318;
      v262 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v261);
      objc_msgSend((id)v4, "setPresentmentKeys:", v262);

      v263 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v178);
      objc_msgSend((id)v4, "setPayloadProtectionKeys:", v263);

      v264 = v308;
      sub_1000CAB3C(v245, v308);
      v265 = v245;
      if (v301(v264, 1, (uint64_t)v216) == 1)
      {
        v266 = 0;
      }
      else
      {
        v266 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, char *))(v305 + 8))(v264, v216);
      }
      v267 = (uint64_t)v309;
      v268 = (char)v324;
      objc_msgSend((id)v4, "setPayloadValidFrom:", v266, v294);

      sub_1000CAB3C(v312, v267);
      v269 = v301(v267, 1, (uint64_t)v216);
      v270 = v321;
      if (v269 == 1)
      {
        v271 = 0;
      }
      else
      {
        v271 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, char *))(v305 + 8))(v267, v216);
      }
      v272 = v302;
      v273 = v320;
      objc_msgSend((id)v4, "setPayloadValidUntil:", v271);

      v274 = v316;
      if (v316 >> 60 == 15)
      {
        v275 = 0;
      }
      else
      {
        sub_100005A38(v273, v316);
        v275 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000B164(v273, v274);
      }
      objc_msgSend((id)v4, "setPayloadIngestionHash:", v275);

      v276 = (void *)sub_1000CA3F8();
      objc_msgSend((id)v4, "setOptions:", v276);

      objc_msgSend((id)v4, "setNeedsPresentmentKeyRefresh:", v268 & 1);
      v277 = (char)v314;
      if ((v314 & 1) != 0)
      {
        objc_msgSend((id)v4, "setDocType:", 0);
        v278 = 0;
      }
      else
      {
        v279 = objc_msgSend(v270, "docType");
        v280 = v279;
        if (v279)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
          v282 = v281;

          v280 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v282);
        }
        objc_msgSend((id)v4, "setDocType:", v280);

        v283 = objc_msgSend(v270, "region");
        v278 = v283;
        if (v283)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v283);
          v285 = v284;

          v278 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v285);
        }
        v265 = v311;
      }
      objc_msgSend((id)v4, "setRegion:", v278);

      if ((v277 & 1) != 0)
      {
        v286 = 0;
      }
      else
      {
        v287 = objc_msgSend(v270, "issuingJurisdiction");
        v286 = v287;
        if (v287)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
          v289 = v288;

          v286 = String._bridgeToObjectiveC()();
          v290 = v289;
          v265 = v311;
          swift_bridgeObjectRelease(v290);
        }
      }
      objc_msgSend((id)v4, "setIssuingJurisdiction:", v286);

      sub_10000B164(v273, v274);
      sub_1000CAA7C(v312);
      sub_1000CAA7C(v265);
      v291 = *(void (**)(char *, char *))(v305 + 8);
      v292 = v319;
      v291(v317, v319);
      v291(v272, v292);
      return v4;
    }
    v219 = 0;
    v178 = (char *)&_swiftEmptyArrayStorage;
    v324 = (id)(v215 & 0xC000000000000001);
    do
    {
      if (v324)
        v220 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v219, v215);
      else
        v220 = *(id *)(v215 + 8 * v219 + 32);
      v221 = v220;
      v222 = objc_msgSend(v220, "identifier", v294, v295);
      if (v222)
      {
        v223 = v222;
        v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
        v226 = v225;

        if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) == 0)
          v178 = sub_1000A73AC(0, *((_QWORD *)v178 + 2) + 1, 1, v178);
        v228 = *((_QWORD *)v178 + 2);
        v227 = *((_QWORD *)v178 + 3);
        if (v228 >= v227 >> 1)
          v178 = sub_1000A73AC((char *)(v227 > 1), v228 + 1, 1, v178);
        *((_QWORD *)v178 + 2) = v228 + 1;
        v229 = &v178[16 * v228];
        *((_QWORD *)v229 + 4) = v224;
        *((_QWORD *)v229 + 5) = v226;

        v216 = v319;
      }
      else
      {
        v230 = defaultLogger()(0);
        v231 = Logger.logObject.getter(v230);
        v232 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v231, v232))
        {
          v233 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v233 = 0;
          _os_log_impl((void *)&_mh_execute_header, v231, v232, "Credential payload protection key does not have required field; skipping",
            v233,
            2u);
          swift_slowDealloc(v233, -1, -1);
        }

        (*(void (**)(char *, void *))(v320 + 8))(v313, v321);
      }
      ++v219;
      v218 = v297;
    }
    while (v217 != v219);
  }
  else
  {
    v178 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v215);
  v234 = sub_1000C9E84();
  if (v218)
  {
    v235 = v307;
    defaultLogger()(v234);
    DIPRecordError(_:message:log:)(v218, 0xD00000000000003ELL, 0x8000000100135370, v235);
    swift_errorRelease(v218);
    (*(void (**)(char *, void *))(v320 + 8))(v235, v321);
    v236 = 0;
  }
  else
  {
    v236 = (int)v234;
  }
  v215 = (uint64_t)v310;
  v237 = (uint64_t)sub_1000C4E40();
  v59 = v237;
  if ((unint64_t)v237 >> 62)
  {
    if (v237 >= 0)
      v237 &= 0xFFFFFFFFFFFFFF8uLL;
    v238 = _CocoaArrayWrapper.endIndex.getter(v237);
  }
  else
  {
    v238 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v212 = v296;
  v297 = 0;
  LODWORD(v324) = v236;
  if (!v238)
  {
    swift_bridgeObjectRelease(v59);
    goto LABEL_158;
  }
  if ((v59 & 0xC000000000000001) != 0)
    goto LABEL_195;
  if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v239 = *(id *)(v59 + 32);
    goto LABEL_154;
  }
  __break(1u);
LABEL_197:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_198:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_1000C8EB8(uint64_t a1)
{
  sub_1000C9100(a1, (uint64_t)&OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, (uint64_t)&OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey, (uint64_t)&OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
}

uint64_t sub_1000C8ED4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = JSONEncoder.init()();
  v24 = a1;
  v11 = sub_100008E84(&qword_100177CB0);
  v12 = sub_1000CAC4C(&qword_100177730, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v24, v11, v12);
  if (v2)
  {
    swift_release(v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DIPError.Code.jsonEncodingFailed(_:), v5);
    swift_errorRetain(v2);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_10000745C();
    swift_allocError(v16, v17, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v15, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000016, 0x80000001001354C0, 726);
    swift_willThrow(v18);
    return swift_errorRelease(v2);
  }
  else
  {
    v20 = v13;
    v21 = v14;
    swift_release(v10);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "setCredentialUUIDs:", isa);

    return sub_100005AB0(v20, v21);
  }
}

void sub_1000C90E4(uint64_t a1)
{
  sub_1000C9100(a1, (uint64_t)&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, (uint64_t)&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey, (uint64_t)&OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
}

void sub_1000C9100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  Class isa;
  Class v25;
  Class v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  Class v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a3;
  v36 = a4;
  v5 = v4;
  v6 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setIdentifier:", v16, v35, v36);

  CredentialKeyType.rawValue.getter();
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v5, "setKeyType:", v19);

  CredentialKeyUsage.rawValue.getter(v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v5, "setUsage:", v23);

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setKeyBlob:", isa);

  v25 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPublicKey:", v25);

  v26 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPublicKeyIdentifier:", v26);

  v27 = objc_msgSend(v5, "createdAt");
  if (!v27)
  {
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_5;
  }
  v28 = v27;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v29(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)v30 == 1)
  {
LABEL_5:
    Date.init()(v30);
    sub_1000CAA7C((uint64_t)v8);
    goto LABEL_6;
  }
  v29(v15, v8, v9);
LABEL_6:
  v31 = Date._bridgeToObjectiveC()().super.isa;
  v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v32(v15, v9);
  objc_msgSend(v5, "setCreatedAt:", v31);

  Date.init()(v33);
  v34 = Date._bridgeToObjectiveC()().super.isa;
  v32(v13, v9);
  objc_msgSend(v5, "setUpdatedAt:", v34);

}

id sub_1000C9428()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id result;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, "credentialUUIDs");
  if (result)
  {
    v7 = result;
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v10 = v9;

    v11 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = JSONDecoder.init()();
    v13 = sub_100008E84(&qword_100177CB0);
    v14 = sub_1000CAC4C(&qword_100177720, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v13, v8, v10, v13, v14);
    sub_100005AB0(v8, v10);
    swift_release(v12);
    if (v1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.jsonDecodingFailed(_:), v2);
      swift_errorRetain(v1);
      v15 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
      v16 = type metadata accessor for DIPError(0);
      v17 = sub_10000745C();
      swift_allocError(v16, v17, 0, 0);
      v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v15, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000017, 0x80000001001353E0, 737);
      swift_willThrow(v18);
      return (id)swift_errorRelease(v1);
    }
    else
    {
      return (id)v19[1];
    }
  }
  return result;
}

id sub_1000C963C()
{
  void *v0;
  uint64_t v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for DIPError.Code(0);
  __chkstk_darwin(v1);
  result = objc_msgSend(v0, "elementIdentifiersByNamespace");
  if (result)
  {
    v3 = result;
    static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    __asm { BR              X10 }
  }
  return result;
}

void sub_1000C98C8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Class isa;
  Class v41;
  id v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  Class v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  Class v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v3 = v1;
  v62 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v8);
  v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v57 = (char *)&v54 - v14;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setIdentifier:", v15);

  CredentialKeyType.rawValue.getter(v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v3, "setKeyType:", v19);

  CredentialKeyUsage.rawValue.getter(v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v3, "setUsage:", v23);

  v24 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock) + 16);
  os_unfair_lock_lock(v24);
  sub_100104334(v25, (uint64_t (*)(void))sub_100056AC8);
  if (!v2)
  {
    os_unfair_lock_unlock(v24);
    v26 = v61;
    if (v61 >> 60 == 15)
    {
LABEL_5:
      v31 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
      v32 = v62;
      v31(v7, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v62);
      v59 = (char *)sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v33 = type metadata accessor for DIPError(0);
      v34 = sub_10000745C();
      v35 = swift_allocError(v33, v34, 0, 0);
      v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x80000001001313D0, 0, v7, 0, v59, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000034, 0x80000001001354E0, 537);
      swift_willThrow(v36);
      v31(v7, enum case for DIPError.Code.internalError(_:), v32);
      swift_errorRetain(v35);
      v37 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      swift_allocError(v33, v34, 0, 0);
      v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v35, v7, 0, v37, 0xD000000000000051, 0x80000001001351D0, 0xD000000000000034, 0x80000001001354E0, 544);
      swift_willThrow(v38);
      swift_errorRelease(v35);
      return;
    }
    v55 = v10;
    v27 = v7;
    v56 = v60;
    os_unfair_lock_lock(v24);
    sub_100104334(v28, (uint64_t (*)(void))sub_100056AE0);
    os_unfair_lock_unlock(v24);
    v29 = v61;
    v30 = (uint64_t)v59;
    if (v61 >> 60 == 15)
    {
      sub_10000B164(v56, v26);
      v7 = v27;
      goto LABEL_5;
    }
    v39 = v60;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "setPublicKey:", isa);

    v54 = v39;
    v62 = v29;
    v41 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "setPublicKeyIdentifier:", v41);

    v42 = objc_msgSend(v3, "createdAt");
    if (v42)
    {
      v43 = v42;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v44 = v58;
      v45 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
      v46 = v55;
      v45(v30, v13, v55);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v30, 0, 1, v46);
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v30, 1, v46);
      if ((_DWORD)v47 != 1)
      {
        v48 = v57;
        v45((uint64_t)v57, (char *)v30, v46);
LABEL_11:
        v49 = v48;
        v50 = Date._bridgeToObjectiveC()().super.isa;
        v51 = *(void (**)(char *, uint64_t))(v44 + 8);
        v51(v49, v46);
        objc_msgSend(v3, "setCreatedAt:", v50);

        Date.init()(v52);
        v53 = Date._bridgeToObjectiveC()().super.isa;
        v51(v13, v46);
        objc_msgSend(v3, "setUpdatedAt:", v53);

        sub_10000B164(v54, v62);
        sub_10000B164(v56, v26);
        return;
      }
    }
    else
    {
      v44 = v58;
      v46 = v55;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v30, 1, 1, v55);
    }
    v48 = v57;
    Date.init()(v47);
    sub_1000CAA7C(v30);
    goto LABEL_11;
  }
  os_unfair_lock_unlock(v24);
  __break(1u);
}

id sub_1000C9E84()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  Swift::String v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  id result;
  uint64_t v25;
  int64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;

  v2 = v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v61 = (char *)&v58 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13._object = (void *)0x80000001001353B0;
  v13._countAndFlagsBits = 0xD000000000000029;
  v14 = NSUserDefaults.internalBool(forKey:)(v13);

  if (v14)
  {
    v16 = v4;
    v17 = defaultLogger()(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Forcing needsPresentmentKeyRefresh to true due to internal defaults setting", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v3);
    v21 = 1;
    return (id)(v21 & 1);
  }
  v22 = v2;
  v23 = (uint64_t)sub_1000C5D70((unsigned int *)&enum case for CredentialKeyUsage.presentment(_:));
  if (v1)
    return (id)(v21 & 1);
  v25 = v23;
  v62 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v33 = v23;
    else
      v33 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v26 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v25);
    v59 = v4;
    v60 = v3;
    if (v26)
    {
LABEL_9:
      v58 = 0;
      if (v26 < 1)
      {
        __break(1u);
        goto LABEL_55;
      }
      for (i = 0; i != v26; ++i)
      {
        if ((v25 & 0xC000000000000001) != 0)
          v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v25);
        else
          v30 = *(id *)(v25 + 8 * i + 32);
        v31 = v30;
        v32 = objc_msgSend(v30, "payload", v58);

        if (v32)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v28 = *(_QWORD *)(v62 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
          v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v31);
          specialized ContiguousArray._endMutation()(v29);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease(v25);
      v22 = v62;
      v4 = v59;
      v3 = v60;
      if ((v62 & 0x8000000000000000) != 0)
        goto LABEL_50;
      goto LABEL_25;
    }
  }
  else
  {
    v26 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    v59 = v4;
    v60 = v3;
    if (v26)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease(v25);
  v22 = (unint64_t)&_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_50;
LABEL_25:
  if ((v22 & 0x4000000000000000) != 0)
  {
LABEL_50:
    v50 = swift_retain(v22);
    result = (id)_CocoaArrayWrapper.endIndex.getter(v50);
    v25 = (uint64_t)result;
    if (!result)
      goto LABEL_51;
    goto LABEL_27;
  }
  v25 = *(_QWORD *)(v22 + 16);
  result = (id)swift_retain(v22);
  if (!v25)
  {
LABEL_51:
    v51 = v4;
    v52 = v3;
    v53 = swift_release_n(v22, 2);
    v54 = defaultLogger()(v53);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Credential does not have any keys, skipping key refresh", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v52);
    v21 = 0;
    return (id)(v21 & 1);
  }
LABEL_27:
  v26 = v22 & 0xC000000000000001;
  if ((v22 & 0xC000000000000001) != 0)
  {
LABEL_55:
    result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
    goto LABEL_30;
  }
  if (!*(_QWORD *)(v22 + 16))
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  result = *(id *)(v22 + 32);
LABEL_30:
  v34 = result;
  v35 = v25 - 1;
  if (v25 == 1)
  {
LABEL_31:
    swift_release_n(v22, 2);
    v36 = (uint64_t)objc_msgSend(v34, "timesUsed");
    if (v36 < 1)
    {

      v21 = 0;
    }
    else
    {
      v37 = v36;
      v38 = v61;
      v39 = defaultLogger()(v36);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v42 = 134217984;
        v62 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v42 + 4);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Minimum number of times a presentment key is used is %lld, needs key refresh", v42, 0xCu);
        swift_slowDealloc(v42, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v60);
      v21 = 1;
    }
    return (id)(v21 & 1);
  }
  if (v25 < 2)
    goto LABEL_57;
  if (v26 || (v43 = *(_QWORD *)(v22 + 16), v43 >= 2) && v35 < v43)
  {
    v44 = 0;
    do
    {
      if (v26)
        v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44 + 1, v22);
      else
        v45 = *(id *)(v22 + 8 * v44 + 40);
      v46 = v45;
      v47 = objc_msgSend(v45, "timesUsed", v58);
      v48 = objc_msgSend(v34, "timesUsed");
      if ((uint64_t)v47 >= (uint64_t)v48)
        v49 = v46;
      else
        v49 = v34;
      if ((uint64_t)v47 < (uint64_t)v48)
        v34 = v46;

      ++v44;
    }
    while (v35 != v44);
    goto LABEL_31;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1000CA3F8()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char v6;

  v1 = objc_msgSend(objc_allocWithZone((Class)DCCredentialOptions), "init");
  objc_msgSend(v1, "setDeleteInactiveKeysAfterDays:", objc_msgSend(v0, "deleteInactiveKeysAfterDays"));
  objc_msgSend(v1, "setDeleteIncompleteCredentialAfterDays:", objc_msgSend(v0, "deleteIncompleteCredentialAfterDays"));
  v2 = (unint64_t)objc_msgSend(v0, "readerAuthenticationPolicy");
  if ((v2 & 0x8000000000000000) != 0
    || (objc_msgSend(v1, "setReaderAuthenticationPolicy:", v2),
        v3 = (unint64_t)objc_msgSend(v0, "presentmentAuthPolicy"),
        (v3 & 0x8000000000000000) != 0)
    || (objc_msgSend(v1, "setPresentmentAuthPolicy:", v3),
        v4 = (unint64_t)objc_msgSend(v0, "payloadProtectionPolicy"),
        (v4 & 0x8000000000000000) != 0))
  {
    v6 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v6, 3451, 0);
    __break(1u);
  }
  else
  {
    objc_msgSend(v1, "setPayloadProtectionPolicy:", v4);
    return (uint64_t)v1;
  }
  return result;
}

void sub_1000CA540(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;

  v2 = v1;
  v4 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for Date(0);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setIdentifier:", v7);

  CredentialKeyType.rawValue.getter(v8);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v2, "setKeyType:", v11);

  CredentialKeyUsage.rawValue.getter(v12);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v2, "setUsage:", v15);

  __asm { BR              X10 }
}

Swift::Int sub_1000CA8A4()
{
  unsigned __int8 *v0;
  __int16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1000CA8E8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1000CA914(uint64_t a1)
{
  unsigned __int8 *v1;
  __int16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000CA954@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2;
  char v3;

  v2 = *result;
  if (v2 >= 4)
    v3 = 3;
  else
    v3 = 0x2010003u >> (8 * v2);
  *a2 = v3;
  return result;
}

void sub_1000CA97C(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

BOOL sub_1000CA98C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000CA9A4()
{
  unsigned __int8 *v0;
  Swift::UInt16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000CA9E8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000CAA10(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_WORD *sub_1000CAA50@<X0>(_WORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1000CAA70(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1000CAA7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_1001755B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000CAABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100177718;
  if (!qword_100177718)
  {
    v1 = sub_100016404(&qword_100177060);
    sub_1000CAC4C(&qword_100177720, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100177718);
  }
  return result;
}

uint64_t sub_1000CAB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001755B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CAB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001755B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CABCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100177728;
  if (!qword_100177728)
  {
    v1 = sub_100016404(&qword_100177060);
    sub_1000CAC4C(&qword_100177730, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100177728);
  }
  return result;
}

uint64_t sub_1000CAC4C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100016404(&qword_100177CB0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7VersionOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7VersionOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CAD88 + 4 * byte_10012B6C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CADBC + 4 * asc_10012B6C0[v4]))();
}

uint64_t sub_1000CADBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CADC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CADCCLL);
  return result;
}

uint64_t sub_1000CADD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CADE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CADE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CADEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7VersionOMa()
{
  return &_s7VersionON;
}

unint64_t sub_1000CAE0C()
{
  unint64_t result;

  result = qword_100177738;
  if (!qword_100177738)
  {
    result = swift_getWitnessTable(&unk_10012B77C, &_s7VersionON);
    atomic_store(result, (unint64_t *)&qword_100177738);
  }
  return result;
}

uint64_t _s17DesignationStatusOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s17DesignationStatusOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CAF2C + 4 * byte_10012B6CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CAF60 + 4 * byte_10012B6CA[v4]))();
}

uint64_t sub_1000CAF60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CAF68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CAF70);
  return result;
}

uint64_t sub_1000CAF7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CAF84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CAF88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CAF90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000CAF9C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *_s17DesignationStatusOMa()
{
  return &_s17DesignationStatusON;
}

uint64_t destroy for PayloadContents(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  sub_100005AB0(a1[3], a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for PayloadContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  sub_100005A38(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for PayloadContents(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a2[4];
  sub_100005A38(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  a1[3] = v6;
  a1[4] = v7;
  sub_100005AB0(v8, v9);
  a1[5] = a2[5];
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for PayloadContents(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for PayloadContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100005AB0(v5, v6);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PayloadContents(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PayloadContents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PayloadContents()
{
  return &type metadata for PayloadContents;
}

unint64_t sub_1000CB260()
{
  unint64_t result;

  result = qword_100177740;
  if (!qword_100177740)
  {
    result = swift_getWitnessTable(&unk_10012B82C, &_s17DesignationStatusON);
    atomic_store(result, &qword_100177740);
  }
  return result;
}

uint64_t sub_1000CB2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v8[11] = v15;
  v8[12] = v16;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a3;
  v8[6] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v9 = type metadata accessor for DIPError.Code(0);
  v8[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[14] = v10;
  v8[15] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v8[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[18] = swift_task_alloc(v13);
  v8[19] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000CB350, 0, 0);
}

uint64_t sub_1000CB350()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  Swift::String v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = dispatch thunk of SESKeystore.getACLConstraints(of:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  *(_QWORD *)(v0 + 160) = v1;
  *(_QWORD *)(v0 + 168) = v2;
  v3 = v1;
  v4 = v2;
  type metadata accessor for SecAccessControl(0);
  v5 = static SecAccessControlRef.fromConstraintsData(_:)(v3, v4);
  *(_QWORD *)(v0 + 176) = v5;
  v6 = (void *)v5;
  v7 = SecAccessControlRef.osgnParentKey.getter();
  *(_QWORD *)(v0 + 184) = v7;
  *(_QWORD *)(v0 + 192) = v8;
  if (v8 >> 60 == 15)
  {
    v9 = defaultLogger()(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not a child key; signing digest directly", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 80);
    v41 = *(_QWORD *)(v0 + 64);
    v42 = *(_QWORD *)(v0 + 72);
    v39 = *(_QWORD *)(v0 + 144);
    v40 = *(_QWORD *)(v0 + 56);
    v38 = *(_QWORD *)(v0 + 48);
    v15 = v10;
    v17 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 40);
    v18 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v14);
    v19 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)(v18, v17, v16, v38, v40, v41, v42, v43);
    v21 = v20;

    sub_100005AB0(v3, v4);
    v22 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v19, v21);
  }
  else
  {
    v25 = v7;
    v26 = v8;
    defaultLogger()(v7);
    sub_100005A38(v25, v26);
    v27 = sub_100005A38(v25, v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 128);
    v33 = *(_QWORD *)(v0 + 136);
    if (v30)
    {
      v44 = *(_QWORD *)(v0 + 152);
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v45 = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = Data.base16EncodedString()();
      *(_QWORD *)(v0 + 16) = sub_10003FA80(v36._countAndFlagsBits, (unint64_t)v36._object, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v34 + 4);
      swift_bridgeObjectRelease(v36._object);
      sub_10000B164(v25, v26);
      sub_10000B164(v25, v26);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Child key of %s, using key chaining", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v44, v32);
    }
    else
    {
      sub_10000B164(v25, v26);
      sub_10000B164(v25, v26);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    }
    v37 = (_QWORD *)swift_task_alloc(dword_1001772D4);
    *(_QWORD *)(v0 + 200) = v37;
    *v37 = v0;
    v37[1] = sub_1000CB83C;
    return sub_1000A45A0(0);
  }
}

uint64_t sub_1000CB83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 216) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000CC004;
  else
    v5 = sub_1000CB8A8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000CB8A8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  if (v1)
  {
    v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
    sub_100005A38(v5, v6);
    sub_1001044DC(v3, v2);
    v8 = v7;
    sub_100005AB0(v5, v6);
    if ((v8 & 1) != 0)
    {
      v9 = (_QWORD *)swift_task_alloc(dword_100177754);
      *(_QWORD *)(v0 + 224) = v9;
      *v9 = v0;
      v9[1] = sub_1000CBD80;
      return sub_1000CD14C(v1, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    }
    v37 = *(_QWORD *)(v0 + 184);
    v38 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 168);
    v40 = *(void **)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 104);
    _StringGuts.grow(_:)(76);
    v19._object = (void *)0x80000001001355B0;
    v19._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v19);
    v20 = Data.base16EncodedString()();
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._object = (void *)0x80000001001355E0;
    v22._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v22);
    v23 = *v4;
    v24 = v4[1];
    sub_100005A38(*v4, v24);
    v25._countAndFlagsBits = Data.description.getter(v23, v24);
    v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    sub_100005AB0(v23, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for DIPError.Code.idcsProgenitorKeyACLMismatch(_:), v36);
    v27 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v15 = swift_allocError(v13, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v17, 0, v27, 0xD00000000000005FLL, 0x8000000100135520, 0xD00000000000004ALL, 0x800000010012E450, 43);
    swift_willThrow(v29);
    swift_release(v1);
    sub_10000B164(v37, v38);

    sub_100005AB0(v42, v44);
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 168);
    v39 = *(void **)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v11, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), *(_QWORD *)(v0 + 104));
    v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v15 = swift_allocError(v13, v14, 0, 0);
    v16 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100135580, 0, v11, 0, v12, 0xD00000000000005FLL, 0x8000000100135520, 0xD00000000000004ALL, 0x800000010012E450, 40);
    swift_willThrow(v16);
    sub_10000B164(v3, v2);

    sub_100005AB0(v41, v43);
  }
  v30 = *(_QWORD *)(v0 + 144);
  v31 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v32, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v15);
  v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for DIPError(0);
  v34 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v13, v34, 0, 0);
  v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v15, v32, 0, v33, 0xD00000000000005FLL, 0x8000000100135520, 0xD00000000000004ALL, 0x800000010012E450, 63);
  swift_willThrow(v35);
  swift_errorRelease(v15);
  swift_task_dealloc(v31);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CBD80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 224);
  *(_QWORD *)(*v3 + 232) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000CBE8C;
  }
  else
  {
    *(_QWORD *)(v6 + 240) = a2;
    *(_QWORD *)(v6 + 248) = a1;
    v8 = sub_1000CBDF8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000CBDF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 208));
  sub_10000B164(v1, v2);

  sub_100005AB0(v5, v3);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v6);
}

uint64_t sub_1000CBE8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 208));
  sub_10000B164(v1, v2);

  sub_100005AB0(v5, v3);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v9, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v6);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v9, 0, v10, 0xD00000000000005FLL, 0x8000000100135520, 0xD00000000000004ALL, 0x800000010012E450, 63);
  swift_willThrow(v13);
  swift_errorRelease(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC004()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(void **)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  sub_10000B164(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));

  sub_100005AB0(v3, v1);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v4);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v7, 0, v8, 0xD00000000000005FLL, 0x8000000100135520, 0xD00000000000004ALL, 0x800000010012E450, 63);
  swift_willThrow(v11);
  swift_errorRelease(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC16C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100008E84(&qword_100174890);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000CC1EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100008E84(&qword_100174890);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    if (a2)
      v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    else
      v10 = 0;
    v11 = v10;
    sub_1000CD7AC((uint64_t)&v11, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000CC2B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[22] = a1;
  v2[23] = a2;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[24] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[25] = v4;
  v2[26] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CC318, 0, 0);
}

uint64_t sub_1000CC318()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v3 = (void *)v0[22];
  v2 = v0[23];
  v4 = sub_10003ED40((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = isa;
  swift_bridgeObjectRelease(v4);
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = sub_1000CC408;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_1000CC1EC;
  v7[3] = &unk_10016AB48;
  v7[4] = v6;
  objc_msgSend(v3, "evaluateAccessControl:operation:options:reply:", v2, 3, isa, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_1000CC408()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 224) = v1;
  if (v1)
    v2 = sub_1000CC898;
  else
    v2 = sub_1000CC468;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CC468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);

  swift_bridgeObjectRelease(v4);
  v5 = enum case for DIPError.Code.localAuthenticationInvalidContext(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for DIPError.Code.localAuthenticationInvalidContext(_:), v2);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v9 = swift_allocError(v7, v8, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000004ALL, 0x8000000100135810, 0, v1, 0, v6, 0xD00000000000005FLL, 0x8000000100135520, 0xD000000000000019, 0x80000001001357C0, 109);
  swift_willThrow(v10);
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  v12 = objc_msgSend(v11, "domain");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorDomain);
  v18 = v16;
  if (v13 == v17 && v15 == v16)
  {
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v16, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v15);
    if ((v19 & 1) == 0)
    {
LABEL_9:
      v38 = v11;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), v5, *(_QWORD *)(v0 + 192));
      swift_errorRetain(v9);
      v27 = 0xD000000000000031;
      v28 = 0x8000000100135780;
      v29 = 116;
      v30 = v9;
      goto LABEL_16;
    }
  }
  if (objc_msgSend(v11, "code") != (id)-1026)
    goto LABEL_9;
  v20 = objc_msgSend(v11, "userInfo");
  v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorNonceKey);
  v24 = v23;
  if (*(_QWORD *)(v21 + 16) && (v25 = sub_1000FBC04(v22, v23), (v26 & 1) != 0))
  {
    sub_1000412B0(*(_QWORD *)(v21 + 56) + 32 * v25, v0 + 120);
  }
  else
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
  }
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v24);
  if (*(_QWORD *)(v0 + 144))
  {
    if ((swift_dynamicCast(v0 + 152, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v31 = *(_QWORD *)(v0 + 208);

      swift_errorRelease(v9);
      v32 = *(_QWORD *)(v0 + 152);
      v33 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(v31);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v32, v33);
    }
  }
  else
  {
    sub_1000CD76C(v0 + 120);
  }
  v38 = v11;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), enum case for DIPError.Code.localAuthenticationMissingNonce(_:), *(_QWORD *)(v0 + 192));
  v30 = 0;
  v27 = 0xD000000000000029;
  v28 = 0x80000001001357E0;
  v29 = 122;
LABEL_16:
  v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v7, v8, 0, 0);
  v36 = *(_QWORD *)(v0 + 208);
  v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v27, v28, v30, v36, 0, v35, 0xD00000000000005FLL, 0x8000000100135520, 0xD000000000000019, 0x80000001001357C0, v29);
  swift_willThrow(v37);

  swift_errorRelease(v9);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC898(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v2 = *(void **)(v1 + 216);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 224);
  v4 = (void *)_convertErrorToNSError(_:)(v3);
  v5 = objc_msgSend(v4, "domain");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorDomain);
  if (v6 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n(v8, 2);
  }
  else
  {
    v12 = v10;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v8);
    if ((v13 & 1) == 0)
      goto LABEL_12;
  }
  if (objc_msgSend(v4, "code") != (id)-1026)
  {
LABEL_12:
    v34 = v4;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 200) + 104))(*(_QWORD *)(v1 + 208), enum case for DIPError.Code.localAuthenticationInvalidContext(_:), *(_QWORD *)(v1 + 192));
    swift_errorRetain(v3);
    v21 = 0xD000000000000031;
    v22 = 0x8000000100135780;
    v23 = 116;
    v24 = v3;
    goto LABEL_19;
  }
  v14 = objc_msgSend(v4, "userInfo");
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorNonceKey);
  v18 = v17;
  if (*(_QWORD *)(v15 + 16) && (v19 = sub_1000FBC04(v16, v17), (v20 & 1) != 0))
  {
    sub_1000412B0(*(_QWORD *)(v15 + 56) + 32 * v19, v1 + 120);
  }
  else
  {
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
  }
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v18);
  if (*(_QWORD *)(v1 + 144))
  {
    if ((swift_dynamicCast(v1 + 152, v1 + 120, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v25 = *(_QWORD *)(v1 + 208);

      swift_errorRelease(v3);
      v26 = *(_QWORD *)(v1 + 152);
      v27 = *(_QWORD *)(v1 + 160);
      swift_task_dealloc(v25);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v26, v27);
    }
  }
  else
  {
    sub_1000CD76C(v1 + 120);
  }
  v34 = v4;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 200) + 104))(*(_QWORD *)(v1 + 208), enum case for DIPError.Code.localAuthenticationMissingNonce(_:), *(_QWORD *)(v1 + 192));
  v24 = 0;
  v21 = 0xD000000000000029;
  v22 = 0x80000001001357E0;
  v23 = 122;
LABEL_19:
  v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v30 = type metadata accessor for DIPError(0);
  v31 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v30, v31, 0, 0);
  v32 = *(_QWORD *)(v1 + 208);
  v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v21, v22, v24, v32, 0, v29, 0xD00000000000005FLL, 0x8000000100135520, 0xD000000000000019, 0x80000001001357C0, v23);
  swift_willThrow(v33);

  swift_errorRelease(v3);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000CCC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v14[15] = a8;
  v14[13] = a4;
  v14[14] = a7;
  v14[11] = a3;
  v14[12] = a6;
  v14[10] = a5;
  v9 = type metadata accessor for DIPError.Code(0);
  v14[3] = *(_QWORD *)(v9 - 8);
  v14[4] = v9;
  __chkstk_darwin(v9);
  v10 = type metadata accessor for SESKeystore.SignatureOutputFormat(0);
  v14[8] = *(_QWORD *)(v10 - 8);
  v14[9] = v10;
  __chkstk_darwin(v10);
  v14[7] = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA256(0);
  v14[5] = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for SHA256Digest(0);
  v14[6] = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v12);
  __asm { BR              X10 }
}

uint64_t sub_1000CCD98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v8 - 104) = v6;
  *(_WORD *)(v8 - 96) = v2;
  *(_BYTE *)(v8 - 94) = BYTE2(v2);
  *(_BYTE *)(v8 - 93) = BYTE3(v2);
  *(_BYTE *)(v8 - 92) = BYTE4(v2);
  *(_BYTE *)(v8 - 91) = BYTE5(v2);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 104, v8 - 104 + BYTE6(v2), v1, v3);
  sub_100005AB0(v6, v2);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 8))(v4, v1);
  v9 = sub_1000058C8(&qword_100174858, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v10 = ((uint64_t (*)(uint64_t, uint64_t))Digest.data.getter)(v7, v9);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 192) + 8))(v0, v7);
  v14 = *(_QWORD *)(v8 - 184);
  v13 = *(_QWORD *)(v8 - 176);
  v15 = *(_QWORD *)(v8 - 168);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v14, enum case for SESKeystore.SignatureOutputFormat.der(_:), v15);
  v16 = *(_QWORD *)(v8 - 112);
  v17 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)(v10, v12, *(_QWORD *)(v8 - 160), *(_QWORD *)(v8 - 144), *(_QWORD *)(v8 - 152), *(_QWORD *)(v8 - 136), v14, *(_QWORD *)(v8 - 128));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  sub_100005AB0(v10, v12);
  if (v16)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v8 - 216) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v8 - 208));
    swift_errorRetain(v16);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v16, v5, 0, v18, 0xD00000000000005FLL, 0x8000000100135520, 0xD000000000000059, 0x80000001001356F0, 144);
    swift_willThrow(v21);
    swift_errorRelease(v16);
  }
  return v17;
}

uint64_t sub_1000CD14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 200) = v13;
  *(_OWORD *)(v8 + 184) = v12;
  *(_QWORD *)(v8 + 168) = a7;
  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 152) = a5;
  *(_QWORD *)(v8 + 160) = a6;
  *(_QWORD *)(v8 + 136) = a3;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 120) = a1;
  *(_QWORD *)(v8 + 128) = a2;
  v9 = type metadata accessor for DIPError.Code(0);
  *(_QWORD *)(v8 + 208) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 216) = v10;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CD1C8, 0, 0);
}

uint64_t sub_1000CD1C8()
{
  uint64_t *v0;
  id v1;
  uint64_t **v2;

  v1 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  v0[29] = (uint64_t)v1;
  v2 = (uint64_t **)swift_task_alloc(dword_10017775C);
  v0[30] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1000CD234;
  return sub_1000CC2B8((uint64_t)v1, v0[16]);
}

uint64_t sub_1000CD234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 240);
  v4[31] = a1;
  v4[32] = a2;
  v4[33] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000CD3CC;
  else
    v6 = sub_1000CD2A4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CD2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  void *v7;
  Class isa;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 264);
  sub_1000CCC10(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 288) = v3;
  if (v1)
  {
    v4 = *(void **)(v0 + 232);
    sub_100005AB0(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));

    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = v0 + 16;
    v7 = *(void **)(v0 + 232);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 296) = isa;
    *(_QWORD *)(v0 + 56) = v0 + 312;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000CD408;
    v9 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v10 = (_QWORD *)(v0 + 80);
    v10[1] = 0x40000000;
    v10[2] = sub_1000CC16C;
    v10[3] = &unk_10016AB30;
    v10[4] = v9;
    objc_msgSend(v7, "setCredential:type:reply:", isa, -11, v10);
    return swift_continuation_await(v6);
  }
}

uint64_t sub_1000CD3CC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CD408()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 304) = v1;
  if (v1)
    v2 = sub_1000CD6EC;
  else
    v2 = sub_1000CD468;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000CD468()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 232);

  v2 = objc_msgSend(v1, "externalizedContext");
  if (!v2)
  {
    v22 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD *)(v0 + 288);
    v24 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 224);
    v20 = *(void **)(v0 + 232);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 104))(v25, enum case for DIPError.Code.localAuthenticationCannotExternalizeContext(_:), *(_QWORD *)(v0 + 208));
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v27, v28, 0, 0);
    v29 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100135630, 0, v25, 0, v26, 0xD00000000000005FLL, 0x8000000100135520, 0xD000000000000084, 0x8000000100135660, 92);
    swift_willThrow(v29);
    sub_100005AB0(v22, v21);
    sub_100005AB0(v24, v23);
    goto LABEL_5;
  }
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v12 = v11;

  v13 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)(v8, v9, v7, v6, v10, v12, v5, v4);
  v16 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 256);
  v19 = *(void **)(v0 + 232);
  if (v33)
  {
    sub_100005AB0(v10, v12);
    sub_100005AB0(v16, v15);
    sub_100005AB0(v18, v17);
    v20 = v19;
LABEL_5:

    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v31 = v14;
  v32 = *(_QWORD *)(v0 + 224);
  v34 = v13;
  sub_100005AB0(v10, v12);
  sub_100005AB0(v16, v15);
  sub_100005AB0(v18, v17);

  swift_task_dealloc(v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v34, v31);
}

uint64_t sub_1000CD6EC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)(v1 + 296);
  v3 = *(_QWORD *)(v1 + 280);
  v4 = *(_QWORD *)(v1 + 288);
  v6 = *(_QWORD *)(v1 + 248);
  v5 = *(_QWORD *)(v1 + 256);
  v7 = *(void **)(v1 + 232);
  swift_willThrow(a1);
  sub_100005AB0(v3, v4);
  sub_100005AB0(v6, v5);

  swift_task_dealloc(*(_QWORD *)(v1 + 224));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000CD76C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_1001755C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CD7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100177760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000CD7F4()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  _QWORD v3[2];

  v0 = type metadata accessor for SymmetricKey(0);
  v1 = sub_1000CE0F8(&qword_100177768, (uint64_t)&protocol conformance descriptor for SymmetricKey);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(v3, sub_1000CE040, 0, &type metadata for Data, v0, v1, v2);
  __asm { BR              X10 }
}

unint64_t sub_1000CD878()
{
  unint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x2E736574796220;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  sub_100005AB0(v1, v0);
  return 0xD00000000000001CLL;
}

void GenericPasswordConvertibleProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  __asm { BR              X10 }
}

unint64_t sub_1000CDBAC()
{
  unint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x2E736574796220;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  sub_100005AB0(v1, v0);
  return 0xD00000000000001CLL;
}

uint64_t SymmetricKey.init<A>(rawRepresentation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  SymmetricKey.init<A>(data:)(v8, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v4;

  v0 = type metadata accessor for SymmetricKey(0);
  v1 = sub_1000CE0F8(&qword_100177768, (uint64_t)&protocol conformance descriptor for SymmetricKey);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v4, sub_1000CE040, 0, &type metadata for Data, v0, v1, v2);
  return v4;
}

uint64_t sub_1000CDFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SymmetricKey.init<A>(rawRepresentation:)(a1, a2, a3);
}

uint64_t sub_1000CDFD0(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v5;

  v2 = sub_1000CE0F8(&qword_100177768, (uint64_t)&protocol conformance descriptor for SymmetricKey);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v5, sub_1000CE040, 0, &type metadata for Data, a1, v2, v3);
  return v5;
}

void sub_1000CE040(UInt8 *bytes@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  CFIndex v4;
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (bytes)
    v4 = a2 - (_QWORD)bytes;
  else
    v4 = 0;
  v5 = CFDataCreateWithBytesNoCopy(0, bytes, v4, kCFAllocatorNull);
  if (v5)
  {
    v6 = v5;
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0xC000000000000000;
  }
  *a3 = v7;
  a3[1] = v9;
}

uint64_t sub_1000CE0C4(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CE0F8(&qword_100177770, (uint64_t)&protocol conformance descriptor for SymmetricKey);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CE0F8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SymmetricKey(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000CE138(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000CE184(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t bytes, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  CFDataRef v22;
  CFDataRef v23;
  uint64_t v24;
  uint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v26 = v20;
  v27 = v21;
  v28 = BYTE2(v21);
  v29 = BYTE3(v21);
  v30 = BYTE4(v21);
  v31 = BYTE5(v21);
  v22 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)&v26, BYTE6(v21), kCFAllocatorNull);
  if (!v22)
    return 0;
  v23 = v22;
  v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);

  return v24;
}

uint64_t SyncableKeyStoreProvider.__allocating_init(keychainWrapper:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v11;

  v3 = swift_allocObject(v1, 56, 7);
  v11 = *(_OWORD *)(a1 + 24);
  v4 = v11;
  v5 = sub_10002E040(a1, v11);
  v6 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  *(_OWORD *)(v3 + 40) = v11;
  v9 = sub_1000258FC((_QWORD *)(v3 + 16));
  (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 32))(v9, v8, v4);
  sub_10000CE40((_QWORD *)a1);
  return v3;
}

_QWORD *SyncableKeyStoreProvider.init(keychainWrapper:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10002E040((uint64_t)a1, v3);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = sub_1000CFF5C((uint64_t)v7, v1, v3, v4);
  sub_10000CE40(a1);
  return v9;
}

uint64_t SyncableKeyStoreProvider.storeSyncableKey(key:label:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  OSStatus v43;
  uint64_t v44;
  CFStringRef v45;
  __CFString *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  uint8_t *v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v88 = a3;
  v85 = a1;
  v86 = a2;
  v6 = type metadata accessor for DIPError.Code(0);
  v80 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v82 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v79 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v78 - v13;
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v81 = v6;
  v83 = v9;
  v84 = v8;
  if (v18)
  {
    v19 = swift_slowAlloc(12, -1);
    v78 = v4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v89 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a4);
    v92 = sub_10003FA80(v88, a4, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v20 + 4);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Storing Account Key Signing Key in iCloud keychain key with label %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v83 + 8))(v14, v84);
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  v22 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v22, &v91);
  *(_OWORD *)(inited + 16) = xmmword_10012B8F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v24;
  type metadata accessor for CFString(0);
  v26 = v25;
  *(_QWORD *)(inited + 72) = v25;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(_QWORD *)(inited + 88) = v27;
  *(_QWORD *)(inited + 120) = v26;
  *(_QWORD *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 136) = v28;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v88;
  *(_QWORD *)(inited + 152) = a4;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 184) = v29;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(inited + 232) = v30;
  swift_bridgeObjectRetain(a4);
  v31 = (id)kSecClassGenericPassword;
  v32 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v34 = v85;
  v33 = v86;
  sub_100005A38(v85, v86);
  sub_1000CE138(v34, v33);
  v36 = v35;
  v38 = v37;
  sub_100005AB0(v34, v33);
  *(_QWORD *)(inited + 264) = &type metadata for Data;
  *(_QWORD *)(inited + 240) = v36;
  *(_QWORD *)(inited + 248) = v38;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrSynchronizable);
  *(_QWORD *)(inited + 280) = v39;
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = 1;
  v40 = sub_10003E548(inited);
  v41 = v87[5];
  v42 = v87[6];
  sub_1000151A4(v87 + 2, v41);
  v43 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v42 + 8))(v40, 0, v41, v42);
  v44 = swift_bridgeObjectRelease(v40);
  if (v43)
  {
    v89 = 0;
    v90 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v90);
    v89 = 0xD000000000000029;
    v90 = 0x8000000100135880;
    v45 = SecCopyErrorMessageString(v43, 0);
    if (v45)
    {
      v46 = (__CFString *)v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v49 = v48;

    }
    else
    {
      LODWORD(v92) = v43;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v49 = v56;
    }
    v58 = v80;
    v57 = v81;
    v59._countAndFlagsBits = v47;
    v59._object = v49;
    String.append(_:)(v59);
    swift_bridgeObjectRelease(v49);
    v60 = v89;
    v61 = v90;
    v62 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v82, enum case for DIPError.Code.accountKeyAlreadyExists(_:), v57);
    v63 = sub_100008E84((uint64_t *)&unk_100178A30);
    v64 = sub_100008E84(&qword_100174898);
    v65 = *(_QWORD *)(v64 - 8);
    v66 = *(_QWORD *)(v65 + 72);
    v67 = *(unsigned __int8 *)(v65 + 80);
    v68 = (v67 + 32) & ~v67;
    v69 = swift_allocObject(v63, v68 + v66, v67 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_10012A6D0;
    v70 = v69 + v68;
    v71 = v70 + *(int *)(v64 + 48);
    v72 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v73 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 104))(v70, v72, v73);
    *(_QWORD *)(v71 + 24) = &type metadata for Int32;
    *(_DWORD *)v71 = v43;
    v74 = sub_10003E0A8(v69);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v75, v76, 0, 0);
    v77 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v60, v61, 0, v62, 0, v74, 0xD000000000000053, 0x80000001001358B0, 0xD00000000000001CLL, 0x8000000100135910, 41);
    return swift_willThrow(v77);
  }
  else
  {
    v50 = v79;
    v51 = defaultLogger()(v44);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, (os_log_type_t)v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v54 = 67109120;
      LODWORD(v89) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, (char *)&v89 + 4, v54 + 4);
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "Account Key Signing Key Storage result -> %d", v54, 8u);
      swift_slowDealloc(v54, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v50, v84);
  }
}

unint64_t SyncableKeyStoreProvider.readSyncableKey(label:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFString *v33;
  const __CFString *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  OSStatus v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  CFStringRef v57;
  __CFString *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  Swift::String v65;
  unint64_t v66;
  void (*v67)(char *, _QWORD, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  _BYTE v101[16];
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  uint64_t v107;

  v94 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v95 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v92 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v93 = (char *)&v90 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v90 - v13;
  defaultLogger()(v12);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v97 = v7;
  v98 = v6;
  if (v18)
  {
    v19 = swift_slowAlloc(12, -1);
    v91 = v4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v104 = v21;
    *(_DWORD *)v20 = 136315138;
    v90 = v20 + 4;
    swift_bridgeObjectRetain(a2);
    v100 = sub_10003FA80((uint64_t)a1, a2, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v90);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching Account Key Signing Key from iCloud Keychain with label %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v20;
    v4 = v91;
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v14, v98);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  v23 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v23, &v107);
  *(_OWORD *)(inited + 16) = xmmword_10012B8F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v25;
  type metadata accessor for CFString(0);
  v27 = v26;
  *(_QWORD *)(inited + 72) = v26;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(_QWORD *)(inited + 88) = v28;
  *(_QWORD *)(inited + 120) = v27;
  *(_QWORD *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 136) = v29;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = a1;
  *(_QWORD *)(inited + 152) = a2;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 184) = v30;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecReturnData);
  *(_QWORD *)(inited + 232) = v31;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrSynchronizable);
  *(_QWORD *)(inited + 280) = v32;
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = 1;
  swift_bridgeObjectRetain(a2);
  v33 = (id)kSecClassGenericPassword;
  v34 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v35 = sub_10003E548(inited);
  v106 = 0;
  v36 = v96[5];
  v37 = v96[6];
  sub_1000151A4(v96 + 2, v36);
  v38 = (*(uint64_t (**)(unint64_t, id *, uint64_t, uint64_t))(v37 + 16))(v35, &v106, v36, v37);
  v39 = swift_bridgeObjectRelease(v35);
  if (v38 != -25300)
  {
    if (v38)
    {
      v104 = 0;
      v105 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(v105);
      v104 = 0xD000000000000029;
      v105 = 0x8000000100135930;
      v57 = SecCopyErrorMessageString(v38, 0);
      if (v57)
      {
        v58 = (__CFString *)v57;
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v61 = v60;

      }
      else
      {
        LODWORD(v100) = v38;
        v59 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v61 = v64;
      }
      v65._countAndFlagsBits = v59;
      v65._object = v61;
      String.append(_:)(v65);
      swift_bridgeObjectRelease(v61);
      v63 = v104;
      v66 = v105;
      v67 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
      v68 = v95;
      v67(v95, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v94);
      v69 = sub_100008E84((uint64_t *)&unk_100178A30);
      v70 = sub_100008E84(&qword_100174898);
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(_QWORD *)(v71 + 72);
      v73 = *(unsigned __int8 *)(v71 + 80);
      v74 = (v73 + 32) & ~v73;
      v75 = swift_allocObject(v69, v74 + v72, v73 | 7);
      *(_OWORD *)(v75 + 16) = xmmword_10012A6D0;
      v76 = v75 + v74;
      v77 = v76 + *(int *)(v70 + 48);
      v78 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v79 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 104))(v76, v78, v79);
      *(_QWORD *)(v77 + 24) = &type metadata for Int32;
      *(_DWORD *)v77 = v38;
      v80 = sub_10003E0A8(v75);
      v81 = type metadata accessor for DIPError(0);
      v82 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v81, v82, 0, 0);
      v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v63, v66, 0, v68, 0, v80, 0xD000000000000053, 0x80000001001358B0, 0xD000000000000017, 0x8000000100135960, 71);
    }
    else
    {
      v40 = v93;
      v41 = defaultLogger()(v39);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, (os_log_type_t)v43))
      {
        v44 = v4;
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        v104 = v46;
        *(_DWORD *)v45 = 136315138;
        swift_beginAccess(&v106, &v100, 0, 0);
        if (v106)
        {
          v47 = objc_msgSend(v106, "base64EncodedStringWithOptions:", 0);
          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v50 = v49;

        }
        else
        {
          v48 = 0;
          v50 = 0xE000000000000000;
        }
        v102 = sub_10003FA80(v48, v50, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v45 + 4);
        swift_bridgeObjectRelease(v50);
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "Account Key Signing Key exists %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        (*(void (**)(char *, uint64_t))(v97 + 8))(v93, v98);
        v4 = v44;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v97 + 8))(v40, v98);
      }
      swift_beginAccess(&v106, &v104, 0, 0);
      if (v106)
      {
        v99 = v106;
        swift_unknownObjectRetain(v106);
        if ((swift_dynamicCast(&v102, &v99, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v63 = v102;
          swift_unknownObjectRelease(v106, v84);
          return v63;
        }
      }
      v85 = v95;
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v95, enum case for DIPError.Code.invalidAccountKeySigningKey(_:), v94);
      v63 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v86 = type metadata accessor for DIPError(0);
      v87 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v86, v87, 0, 0);
      v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100135980, 0, v85, 0, v63, 0xD000000000000053, 0x80000001001358B0, 0xD000000000000017, 0x8000000100135960, 65);
    }
    swift_willThrow(v83);
    swift_unknownObjectRelease(v106, v88);
    return v63;
  }
  v96 = a1;
  v51 = v92;
  defaultLogger()(v39);
  v52 = swift_bridgeObjectRetain_n(a2, 2);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v104 = v56;
    *(_DWORD *)v55 = 136315138;
    swift_bridgeObjectRetain(a2);
    v100 = sub_10003FA80((uint64_t)v96, a2, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v55 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Account Key Signing Key with label %s doesn't exist in the iCloud keychain", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v97 + 8))(v51, v98);
  swift_unknownObjectRelease(v106, v62);
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SyncableKeyStoreProvider.deleteKey(label:)(Swift::String label)
{
  uint64_t v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  const __CFString *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  OSStatus v33;
  CFStringRef v34;
  __CFString *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t countAndFlagsBits;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  countAndFlagsBits = label._countAndFlagsBits;
  object = label._object;
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v64 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v66 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v7);
  v10 = swift_bridgeObjectRetain_n(object, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  v13 = os_log_type_enabled(v11, v12);
  v65 = v1;
  if (v13)
  {
    v63 = v3;
    v14 = swift_slowAlloc(12, -1);
    v61 = v6;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v62 = v4;
    v17 = v16;
    v69 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(object);
    v72 = sub_10003FA80(countAndFlagsBits, (unint64_t)object, &v69);
    v3 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v15 + 4);
    swift_bridgeObjectRelease_n(object, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Deleting keychain key with label %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v18 = v17;
    v4 = v62;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v61);
  }
  else
  {

    swift_bridgeObjectRelease_n(object, 2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v6);
  }
  v19 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v19, &v71);
  *(_OWORD *)(inited + 16) = xmmword_10012B900;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v21;
  type metadata accessor for CFString(0);
  v23 = v22;
  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessible);
  *(_QWORD *)(inited + 88) = v24;
  *(_QWORD *)(inited + 120) = v23;
  *(_QWORD *)(inited + 96) = kSecAttrAccessibleAfterFirstUnlock;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 136) = v25;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 184) = v26;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 192) = countAndFlagsBits;
  *(_QWORD *)(inited + 200) = object;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrSynchronizable);
  *(_QWORD *)(inited + 232) = v27;
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = 1;
  swift_bridgeObjectRetain(object);
  v28 = (id)kSecClassGenericPassword;
  v29 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v30 = sub_10003E548(inited);
  v31 = v67[5];
  v32 = v67[6];
  sub_1000151A4(v67 + 2, v31);
  v33 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 24))(v30, v31, v32);
  swift_bridgeObjectRelease(v30);
  if (v33 != -25300 && v33)
  {
    v69 = 0;
    v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v70);
    v69 = 0xD000000000000029;
    v70 = 0x80000001001303A0;
    v34 = SecCopyErrorMessageString(v33, 0);
    if (v34)
    {
      v35 = (__CFString *)v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

    }
    else
    {
      LODWORD(v72) = v33;
      v36 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v38 = v39;
    }
    v40._countAndFlagsBits = v36;
    v40._object = v38;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v38);
    v41 = v69;
    v42 = v70;
    v43 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
    v44 = v64;
    v43(v64, enum case for DIPError.Code.failedToDeletePayloadProtectionKey(_:), v3);
    v45 = sub_100008E84((uint64_t *)&unk_100178A30);
    v46 = sub_100008E84(&qword_100174898);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(_QWORD *)(v47 + 72);
    v49 = *(unsigned __int8 *)(v47 + 80);
    v50 = (v49 + 32) & ~v49;
    v51 = swift_allocObject(v45, v50 + v48, v49 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_10012A6D0;
    v52 = v51 + v50;
    v53 = v52 + *(int *)(v46 + 48);
    v54 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v55 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v52, v54, v55);
    *(_QWORD *)(v53 + 24) = &type metadata for Int32;
    *(_DWORD *)v53 = v33;
    v56 = sub_10003E0A8(v51);
    v57 = type metadata accessor for DIPError(0);
    v58 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v57, v58, 0, 0);
    v59 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v41, v42, 0, v44, 0, v56, 0xD000000000000053, 0x80000001001358B0, 0xD000000000000011, 0x80000001001303D0, 87);
    swift_willThrow(v59);
  }
}

uint64_t SyncableKeyStoreProvider.deinit()
{
  uint64_t v0;

  sub_10000CE40((_QWORD *)(v0 + 16));
  return v0;
}

uint64_t SyncableKeyStoreProvider.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000CE40((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

unint64_t sub_1000CFC1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100008E84(&qword_100174898);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100008E84((uint64_t *)&unk_1001757E0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000CFFCC(v13, (uint64_t)v5);
    result = sub_1000CFDB0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_100041220(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000CFDB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for DIPError.PropertyKey(0);
  v6 = sub_1000058C8(&qword_100177818, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000CFE1C(a1, v7);
}

unint64_t sub_1000CFE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for DIPError.PropertyKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1000058C8(&qword_100177820, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

_QWORD *sub_1000CFF5C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  a2[5] = a3;
  a2[6] = a4;
  v7 = sub_1000258FC(a2 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a1, a3);
  return a2;
}

uint64_t type metadata accessor for SyncableKeyStoreProvider()
{
  return objc_opt_self(_TtC7idcredd24SyncableKeyStoreProvider);
}

uint64_t sub_1000CFFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100174898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D0014(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = type metadata accessor for DIPError.Code(0);
  v2[2] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[3] = v6;
  v2[4] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_10017783C);
  v2[5] = v7;
  *v7 = v2;
  v7[1] = sub_1000D009C;
  return sub_1000D04E4(a1, a2, 1);
}

uint64_t sub_1000D009C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000D03BC;
  else
    v5 = sub_1000D0108;
  return swift_task_switch(v5, 0, 0);
}

void sub_1000D0108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 48);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v5 = *(_QWORD *)(v0 + 48);
    else
      v5 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
    v6 = _CocoaArrayWrapper.endIndex.getter(v5);
    swift_bridgeObjectRelease(v1);
    if (v6)
      goto LABEL_3;
LABEL_11:
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104);
    v10(v8, enum case for DIPError.Code.idcsMissingPresentmentKey(_:), v9);
    v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v12 = type metadata accessor for DIPError(0);
    v13 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v14 = swift_allocError(v12, v13, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100135DF0, 0, v8, 0, v11, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000001CLL, 0x8000000100135DD0, 54);
    swift_willThrow(v15);
    v16 = *(_QWORD *)(v0 + 32);
    v10(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 16));
    swift_errorRetain(v14);
    v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v12, v13, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v14, v16, 0, v17, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000001CLL, 0x8000000100135DD0, 59);
    swift_willThrow(v18);
    swift_errorRelease(v14);
    swift_task_dealloc(v16);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 48));
    v2 = *(_QWORD *)(v0 + 48);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(id *)(v2 + 32);
LABEL_6:
    v4 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(v2);
    swift_task_dealloc(v4);
    (*(void (**)(id))(v0 + 8))(v3);
    return;
  }
  __break(1u);
}

uint64_t sub_1000D03BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 24) + 104))(v2, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v3 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for DIPError(0);
  v5 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v4, v5, 0, 0);
  v6 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v3, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000001CLL, 0x8000000100135DD0, 59);
  swift_willThrow(v6);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D04E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[38] = a3;
  v4[39] = v3;
  v4[36] = a1;
  v4[37] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[40] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[41] = v6;
  v4[42] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[43] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[44] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v9);
  v4[46] = swift_task_alloc(v9);
  v4[47] = swift_task_alloc(v9);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  v4[48] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  v4[49] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[50] = v12;
  v4[51] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D05D4, 0, 0);
}

uint64_t sub_1000D05D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 304);
  static IDCSSignposts.storageGeneratePresentmentKeys.getter();
  DIPSignpost.init(_:)(v1);
  if (v2 < 1)
  {
    v5 = *(_QWORD *)(v0 + 336);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 104))(v5, enum case for DIPError.Code.idcsInvalidArgument(_:), *(_QWORD *)(v0 + 320));
    v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v7 = type metadata accessor for DIPError(0);
    v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v7, v8, 0, 0);
    v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x8000000100135B60, 0, v5, 0, v6, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 71);
    swift_willThrow(v9);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    v10 = *(_QWORD *)(v0 + 408);
    v11 = *(_QWORD *)(v0 + 384);
    v13 = *(_QWORD *)(v0 + 368);
    v12 = *(_QWORD *)(v0 + 376);
    v14 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 336);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(v10, *(_QWORD *)(v0 + 392));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 416) = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 24);
    v3 = (_QWORD *)swift_task_alloc(dword_1001772AC);
    *(_QWORD *)(v0 + 424) = v3;
    *v3 = v0;
    v3[1] = sub_1000D07D4;
    return sub_1000A1678();
  }
}

uint64_t sub_1000D07D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000D21C4;
  else
    v3 = sub_1000D0838;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D0838(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Refreshing progenitor key designations before generating new presentment keys", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[47];
  v7 = v1[43];
  v8 = v1[44];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[55] = v9;
  v9(v6, v7);
  v10 = (_QWORD *)swift_task_alloc(dword_100177294);
  v1[56] = v10;
  *v10 = v1;
  v10[1] = sub_1000D0928;
  return sub_10009C118(0, 0xF000000000000000, 1);
}

uint64_t sub_1000D0928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000D2304;
  else
    v3 = sub_1000D098C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D098C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = v0[38];
  v1 = v0[39];
  v4 = v0[36];
  v3 = v0[37];
  v0[58] = *(_QWORD *)(v1 + 160);
  v5 = (_QWORD *)swift_allocObject(&unk_10016AC60, 48, 7);
  v0[59] = v5;
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v3;
  v5[5] = v2;
  v6 = swift_allocObject(&unk_10016AC88, 32, 7);
  v0[60] = v6;
  *(_QWORD *)(v6 + 16) = &unk_100177848;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[61] = v8;
  v9 = sub_100008E84(&qword_100177860);
  *v8 = v0;
  v8[1] = sub_1000D0A90;
  return AsyncCoreDataContainer.write<A>(_:)(v0 + 28, &unk_100177858, v6, v9);
}

uint64_t sub_1000D0A90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 488);
  *(_QWORD *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000D0C94;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 472);
    swift_release(*(_QWORD *)(v2 + 480));
    swift_release(v5);
    v4 = sub_1000D0B04;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D0B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 504) = *(_QWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 528) = *(_QWORD *)(v0 + 248);
  v4 = (_QWORD *)swift_allocObject(&unk_10016ACB0, 40, 7);
  *(_QWORD *)(v0 + 536) = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = swift_allocObject(&unk_10016ACD8, 32, 7);
  *(_QWORD *)(v0 + 544) = v5;
  *(_QWORD *)(v5 + 16) = sub_1000D827C;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 552) = v7;
  v8 = sub_100008E84(&qword_100177868);
  *v7 = v0;
  v7[1] = sub_1000D0C1C;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 256, sub_100039AB4, v5, v8);
}

uint64_t sub_1000D0C1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000D16F0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 536);
    swift_release(*(_QWORD *)(v2 + 544));
    swift_release(v5);
    v4 = sub_1000D0E30;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D0C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 472);
  swift_release(*(_QWORD *)(v0 + 480));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 320));
  swift_errorRetain(v2);
  v4 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v3, 0, v4, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 189);
  swift_willThrow(v7);
  swift_errorRelease(v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(v8, *(_QWORD *)(v0 + 392));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D0E30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSData v44;
  NSData v45;
  NSData v46;
  Class isa;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  NSData v92;
  NSData v93;
  NSString v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;

  v3 = v1[32];
  v2 = v1[33];
  v1[71] = v3;
  v1[72] = v2;
  v4 = v1[34];
  v5 = v1[35];
  v1[73] = v4;
  v1[74] = v5;
  if (v2)
  {
    sub_1000517CC(v3, v2, v4, v5);
    sub_100005A38(v4, v5);
    v6 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    v1[75] = v6;
    *v6 = v1;
    v6[1] = sub_1000D1664;
    return sub_1000FE76C(v3, v2, v4, v5);
  }
  v87 = v1 + 13;
  v8 = v1[70];
  v9 = defaultLogger()(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "Skipping creation of progenitor key authorization because no key signing key exists", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v13 = (void (*)(uint64_t, uint64_t))v1[55];
  v14 = v1[46];
  v15 = v1[43];

  v13(v14, v15);
  v1[17] = 0;
  *v87 = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  v16 = v1[63];
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v88 = v8;
    v18 = v1 + 2;
    v19 = (uint64_t)(v1 + 18);
    v20 = (uint64_t)(v1 + 23);
    v21 = v16 + 32;
    v85 = (uint64_t)(v1 + 23);
    v86 = (uint64_t)(v1 + 18);
    v83 = v1;
    v84 = v1 + 2;
    while (1)
    {
      v22 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v21;
      *((_OWORD *)v18 + 1) = v22;
      v23 = *(_OWORD *)(v21 + 32);
      v24 = *(_OWORD *)(v21 + 48);
      v25 = *(_OWORD *)(v21 + 64);
      v18[10] = *(_QWORD *)(v21 + 80);
      *((_OWORD *)v18 + 3) = v24;
      *((_OWORD *)v18 + 4) = v25;
      *((_OWORD *)v18 + 2) = v23;
      sub_1000D8298((uint64_t)v87, v20);
      v96 = v21;
      v97 = v17;
      if (v1[26])
      {
        v26 = *(_OWORD *)(v20 + 16);
        *(_OWORD *)v19 = *(_OWORD *)v20;
        *(_OWORD *)(v19 + 16) = v26;
        *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
        sub_1000D82E0(v18);
        v27 = sub_1001112BC();
        if (v88)
        {
          v65 = v1[74];
          v66 = v1[73];
          v67 = v1[72];
          v68 = v1[71];
          v69 = (void *)v1[66];
          v70 = v18;
          v71 = v1[63];
          sub_100005AB0(v1[64], v1[65]);

          sub_1000D83D0(v70);
          sub_100051880(v68, v67, v66, v65);
          swift_bridgeObjectRelease(0);
          sub_100019A68(v19);
          swift_bridgeObjectRelease(v71);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          sub_1000D8374((uint64_t)v87);
          v72 = v1[42];
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[41] + 104))(v72, enum case for DIPError.Code.internalError(_:), v1[40]);
          swift_errorRetain(v88);
          v73 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v74 = type metadata accessor for DIPError(0);
          v75 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v74, v75, 0, 0);
          v76 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v88, v72, 0, v73, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 189);
          swift_willThrow(v76);
          swift_errorRelease(v88);
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          v77 = v1[51];
          v78 = v1[48];
          v80 = v1[46];
          v79 = v1[47];
          v81 = v1[45];
          v82 = v1[42];
          (*(void (**)(uint64_t, _QWORD))(v1[50] + 8))(v77, v1[49]);
          swift_task_dealloc(v77);
          swift_task_dealloc(v78);
          swift_task_dealloc(v79);
          swift_task_dealloc(v80);
          swift_task_dealloc(v81);
          swift_task_dealloc(v82);
          return ((uint64_t (*)(void))v1[1])();
        }
        v29 = v27;
        v30 = v28;
        v31 = sub_100019A68(v19);
        v88 = 0;
        v103 = (uint64_t)v29;
        v104 = v30;
      }
      else
      {
        sub_1000D82E0(v18);
        v31 = sub_1000D8374(v20);
        v103 = 0;
        v104 = 0xF000000000000000;
      }
      v89 = v1[64];
      v90 = v1[65];
      v32 = (uint64_t (*)(uint64_t, uint64_t))v1[55];
      v33 = v1[45];
      v34 = v1[43];
      v98 = v1[11];
      v99 = v1[10];
      v35 = v1[7];
      v100 = v1[9];
      v101 = v1[8];
      v36 = v1[6];
      v102 = v1[4];
      v37 = v1[5];
      v38 = v1[3];
      defaultLogger()(v31);
      v39 = swift_task_alloc(32);
      *(_QWORD *)(v39 + 16) = v18;
      Logger.sensitive(_:)(sub_1000D83B4, v39);
      swift_task_dealloc(v39);
      v40 = v32(v33, v34);
      defaultLogger()(v40);
      v41 = swift_task_alloc(32);
      *(_QWORD *)(v41 + 16) = v18;
      Logger.sensitive(_:)(sub_1000D83BC, v41);
      swift_task_dealloc(v41);
      v42 = v32(v33, v34);
      defaultLogger()(v42);
      v43 = (_QWORD *)swift_task_alloc(48);
      v43[2] = v18;
      v43[3] = v103;
      v43[4] = v104;
      Logger.sensitive(_:)(sub_1000D83C4, v43);
      swift_task_dealloc(v43);
      v32(v33, v34);
      swift_bridgeObjectRetain(v38);
      sub_100005A38(v102, v37);
      sub_100005A38(v36, v35);
      sub_100005A38(v101, v100);
      sub_100005A38(v89, v90);
      sub_100005A38(v99, v98);
      sub_10000B178(v103, v104);
      v94 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38);
      v95 = v37;
      v93.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v92.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v44.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v45.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v46.super.isa = Data._bridgeToObjectiveC()().super.isa;
      if (v104 >> 60 == 15)
      {
        isa = 0;
      }
      else
      {
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000B164(v103, v104);
      }
      v1 = v83;
      v48 = v83[65];
      v49 = v83[64];
      v91 = objc_msgSend(objc_allocWithZone((Class)DCCredentialCryptoKey), "initWithIdentifier:publicKey:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:progenitorKeyAttestation:casdAttestation:keyAuthorization:kskAttestation:", v94, v93.super.isa, v92.super.isa, v44.super.isa, 2, 3, v45.super.isa, v46.super.isa, isa, 0);
      sub_100005AB0(v99, v98);
      sub_100005AB0(v49, v48);
      sub_100005AB0(v101, v100);
      sub_100005AB0(v36, v35);
      sub_100005AB0(v102, v95);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      v52 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v51 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v52 >= v51 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v91);
      specialized Array._endMutation()(v53);
      sub_10000B164(v103, v104);
      v18 = v84;
      sub_1000D83D0(v84);
      v21 = v96 + 88;
      v17 = v97 - 1;
      v20 = v85;
      v19 = v86;
      if (v97 == 1)
      {
        v54 = (void *)v83[66];
        sub_100005AB0(v83[64], v83[65]);

        swift_bridgeObjectRelease(0);
        goto LABEL_19;
      }
    }
  }
  v55 = (void *)v1[66];
  sub_100005AB0(v1[64], v1[65]);
  swift_bridgeObjectRelease(0);

LABEL_19:
  v56 = v1[63];
  v57 = v1[50];
  v58 = v1[51];
  v60 = v1[48];
  v59 = v1[49];
  v62 = v1[46];
  v61 = v1[47];
  v63 = v1[45];
  v64 = v1[42];
  sub_100051880(v1[71], v1[72], v1[73], v1[74]);
  swift_bridgeObjectRelease(v56);
  sub_1000D8374((uint64_t)v87);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return ((uint64_t (*)(_QWORD *))v1[1])(_swiftEmptyArrayStorage);
}

uint64_t sub_1000D1664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 600);
  v3[76] = a1;
  v3[77] = v1;
  swift_task_dealloc(v4);
  v5 = v3[74];
  v6 = v3[73];
  if (v1)
  {
    v7 = v3[63];
    sub_100005AB0(v6, v5);
    swift_bridgeObjectRelease(v7);
    v8 = sub_1000D2458;
  }
  else
  {
    sub_100005AB0(v6, v5);
    v8 = sub_1000D18B4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000D16F0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(void **)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  swift_release(*(_QWORD *)(v0 + 544));
  swift_release(v1);
  swift_bridgeObjectRelease(v5);
  sub_100005AB0(v4, v3);

  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 320));
  swift_errorRetain(v6);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v7, 0, v8, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 189);
  swift_willThrow(v11);
  swift_errorRelease(v6);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v12 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 360);
  v17 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(v12, *(_QWORD *)(v0 + 392));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D18B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  NSData v51;
  NSData v52;
  Class isa;
  NSArray v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  id v97;
  NSData v98;
  NSData v99;
  uint64_t v100;
  NSData v101;
  NSString v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117[3];

  v93 = (_OWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 608);
  if (v1)
  {
    v2 = (_QWORD *)v0;
    v3 = *(_QWORD *)(v0 + 616);
    *(_QWORD *)(v0 + 128) = &type metadata for KeySigningKeySignatureProvider;
    *(_QWORD *)(v0 + 136) = &off_10016CA58;
    *(_QWORD *)(v0 + 104) = v1;
    v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v5 + 16) = sub_100056AF8;
    *(_QWORD *)(v5 + 24) = v1;
    v6 = v4 + 4;
    swift_retain_n(v1, 3);
    os_unfair_lock_lock(v4 + 4);
    (*(void (**)(unint64_t *__return_ptr))(v5 + 16))(v117);
    if (v3)
    {
      os_unfair_lock_unlock(v6);
      return swift_task_dealloc(v5);
    }
    v18 = *(_QWORD *)(v0 + 592);
    v19 = *(_QWORD *)(v0 + 584);
    v20 = *(_QWORD *)(v0 + 576);
    v21 = v2[71];
    v17 = v117[0];
    os_unfair_lock_unlock(v6);
    swift_release_n(v1, 2);
    sub_100051880(v21, v20, v19, v18);
    swift_release(v1);
    swift_task_dealloc(v5);
    v9 = 0;
  }
  else
  {
    v8 = sub_100051880(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592));
    v9 = *(_QWORD *)(v0 + 616);
    v10 = defaultLogger()(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "Skipping creation of progenitor key authorization because no key signing key exists", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    v15 = *(_QWORD *)(v0 + 368);
    v2 = (_QWORD *)v0;
    v16 = *(_QWORD *)(v0 + 344);

    v14(v15, v16);
    v17 = 0;
    *(_QWORD *)(v0 + 136) = 0;
    *v93 = 0u;
    *(_OWORD *)(v0 + 120) = 0u;
  }
  v22 = v2[63];
  v117[0] = (unint64_t)_swiftEmptyArrayStorage;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = v2;
  if (v23)
  {
    v94 = v9;
    v25 = v2 + 2;
    v26 = (uint64_t)(v2 + 18);
    v27 = (uint64_t)(v2 + 23);
    v28 = v22 + 32;
    v106 = v17;
    v91 = (uint64_t)(v24 + 23);
    v92 = (uint64_t)(v24 + 18);
    v114 = v24;
    v90 = v24 + 2;
    while (1)
    {
      v29 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v28;
      *((_OWORD *)v25 + 1) = v29;
      v30 = *(_OWORD *)(v28 + 32);
      v31 = *(_OWORD *)(v28 + 48);
      v32 = *(_OWORD *)(v28 + 64);
      v25[10] = *(_QWORD *)(v28 + 80);
      *((_OWORD *)v25 + 3) = v31;
      *((_OWORD *)v25 + 4) = v32;
      *((_OWORD *)v25 + 2) = v30;
      sub_1000D8298((uint64_t)v93, v27);
      v104 = v28;
      v105 = v23;
      if (v24[26])
      {
        v33 = *(_OWORD *)(v27 + 16);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *(_OWORD *)(v26 + 16) = v33;
        *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
        sub_1000D82E0(v25);
        v34 = sub_1001112BC();
        if (v94)
        {
          v73 = v24[74];
          v74 = v24[73];
          v75 = v24[72];
          v76 = v24[71];
          v77 = (void *)v24[66];
          v78 = v24[63];
          sub_100005AB0(v24[64], v24[65]);

          sub_1000D83D0(v25);
          sub_100051880(v76, v75, v74, v73);
          swift_bridgeObjectRelease(v17);
          sub_100019A68(v26);
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v117[0]);
          sub_1000D8374((uint64_t)v93);
          v79 = v24[42];
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v24[41] + 104))(v79, enum case for DIPError.Code.internalError(_:), v24[40]);
          swift_errorRetain(v94);
          v80 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v81 = type metadata accessor for DIPError(0);
          v82 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v81, v82, 0, 0);
          v83 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v94, v79, 0, v80, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 189);
          swift_willThrow(v83);
          swift_errorRelease(v94);
          DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
          v84 = v24[51];
          v85 = v24[48];
          v87 = v24[46];
          v86 = v24[47];
          v88 = v24[45];
          v89 = v24[42];
          (*(void (**)(uint64_t, _QWORD))(v24[50] + 8))(v84, v24[49]);
          swift_task_dealloc(v84);
          swift_task_dealloc(v85);
          swift_task_dealloc(v86);
          swift_task_dealloc(v87);
          swift_task_dealloc(v88);
          swift_task_dealloc(v89);
          return ((uint64_t (*)(void))v24[1])();
        }
        v36 = v34;
        v37 = v35;
        v38 = sub_100019A68(v26);
        v94 = 0;
        v115 = (uint64_t)v36;
        v39 = v37;
      }
      else
      {
        sub_1000D82E0(v25);
        v38 = sub_1000D8374(v27);
        v115 = 0;
        v39 = 0xF000000000000000;
      }
      v95 = v114[64];
      v96 = v114[65];
      v40 = (uint64_t (*)(uint64_t, uint64_t))v114[55];
      v41 = v114[45];
      v42 = v114[43];
      v107 = v114[11];
      v108 = v114[10];
      v43 = v114[7];
      v109 = v114[8];
      v110 = v114[9];
      v44 = v114[5];
      v111 = v43;
      v112 = v114[6];
      v45 = v114[4];
      v113 = v44;
      v100 = v114[3];
      defaultLogger()(v38);
      v46 = swift_task_alloc(32);
      *(_QWORD *)(v46 + 16) = v25;
      Logger.sensitive(_:)(sub_1000D83B4, v46);
      swift_task_dealloc(v46);
      v47 = v40(v41, v42);
      defaultLogger()(v47);
      v48 = swift_task_alloc(32);
      *(_QWORD *)(v48 + 16) = v25;
      Logger.sensitive(_:)(sub_1000D83BC, v48);
      swift_task_dealloc(v48);
      v49 = v40(v41, v42);
      defaultLogger()(v49);
      v50 = (_QWORD *)swift_task_alloc(48);
      v50[2] = v25;
      v50[3] = v115;
      v50[4] = v39;
      Logger.sensitive(_:)(sub_1000D83C4, v50);
      swift_task_dealloc(v50);
      v40(v41, v42);
      swift_bridgeObjectRetain(v100);
      sub_100005A38(v45, v44);
      sub_100005A38(v112, v43);
      sub_100005A38(v109, v110);
      sub_100005A38(v95, v96);
      sub_100005A38(v108, v107);
      sub_10000B178(v115, v39);
      swift_bridgeObjectRetain(v106);
      v102 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v100);
      v101.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v99.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v98.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v51.super.isa = Data._bridgeToObjectiveC()().super.isa;
      v52.super.isa = Data._bridgeToObjectiveC()().super.isa;
      if (v39 >> 60 == 15)
      {
        isa = 0;
      }
      else
      {
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000B164(v115, v39);
      }
      v103 = v39;
      v25 = v90;
      if (v106)
      {
        v54.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v106);
      }
      else
      {
        v54.super.isa = 0;
      }
      v55 = v114[65];
      v56 = v114[64];
      v97 = objc_msgSend(objc_allocWithZone((Class)DCCredentialCryptoKey), "initWithIdentifier:publicKey:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:progenitorKeyAttestation:casdAttestation:keyAuthorization:kskAttestation:", v102, v101.super.isa, v99.super.isa, v98.super.isa, 2, 3, v51.super.isa, v52.super.isa, isa, v54.super.isa);
      sub_100005AB0(v108, v107);
      sub_100005AB0(v56, v55);
      sub_100005AB0(v109, v110);
      sub_100005AB0(v112, v111);
      sub_100005AB0(v45, v113);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      v59 = *(_QWORD *)((v117[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v58 = *(_QWORD *)((v117[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v59 >= v58 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
      v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v97);
      specialized Array._endMutation()(v60);
      sub_10000B164(v115, v103);
      sub_1000D83D0(v90);
      v28 = v104 + 88;
      v23 = v105 - 1;
      v17 = v106;
      v27 = v91;
      v26 = v92;
      v24 = v114;
      if (v105 == 1)
      {
        v61 = (void *)v114[66];
        sub_100005AB0(v114[64], v114[65]);

        swift_bridgeObjectRelease(v106);
        v62 = (_QWORD *)v117[0];
        goto LABEL_25;
      }
    }
  }
  v63 = (void *)v2[66];
  sub_100005AB0(v2[64], v2[65]);

  swift_bridgeObjectRelease(v17);
  v62 = _swiftEmptyArrayStorage;
LABEL_25:
  v116 = v62;
  v64 = v24[63];
  v65 = v24[50];
  v66 = v24[51];
  v68 = v24[48];
  v67 = v24[49];
  v70 = v24[46];
  v69 = v24[47];
  v71 = v24[45];
  v72 = v24[42];
  sub_100051880(v24[71], v24[72], v24[73], v24[74]);
  swift_bridgeObjectRelease(v64);
  sub_1000D8374((uint64_t)v93);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  return ((uint64_t (*)(_QWORD *))v24[1])(v116);
}

uint64_t sub_1000D21C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  _QWORD *v15;

  v2 = v1[54];
  v4 = v1[44];
  v3 = v1[45];
  v5 = v1[43];
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0xD000000000000030, 0x8000000100135BB0, v3);
  swift_errorRelease(v2);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = defaultLogger()(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Refreshing progenitor key designations before generating new presentment keys", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1[47];
  v12 = v1[43];
  v13 = v1[44];

  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v1[55] = v14;
  v14(v11, v12);
  v15 = (_QWORD *)swift_task_alloc(dword_100177294);
  v1[56] = v15;
  *v15 = v1;
  v15[1] = sub_1000D0928;
  return sub_10009C118(0, 0xF000000000000000, 1);
}

uint64_t sub_1000D2304(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v1[57];
  v3 = (void (*)(uint64_t, uint64_t))v1[55];
  v4 = v1[45];
  v5 = v1[43];
  defaultLogger()(a1);
  DIPRecordError(_:message:log:)(v2, 0xD000000000000030, 0x8000000100135BF0, v4);
  swift_errorRelease(v2);
  v3(v4, v5);
  v7 = v1[38];
  v6 = v1[39];
  v9 = v1[36];
  v8 = v1[37];
  v1[58] = *(_QWORD *)(v6 + 160);
  v10 = (_QWORD *)swift_allocObject(&unk_10016AC60, 48, 7);
  v1[59] = v10;
  v10[2] = v6;
  v10[3] = v9;
  v10[4] = v8;
  v10[5] = v7;
  v11 = swift_allocObject(&unk_10016AC88, 32, 7);
  v1[60] = v11;
  *(_QWORD *)(v11 + 16) = &unk_100177848;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  swift_retain(v10);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v1[61] = v13;
  v14 = sub_100008E84(&qword_100177860);
  *v13 = v1;
  v13[1] = sub_1000D0A90;
  return AsyncCoreDataContainer.write<A>(_:)(v1 + 28, &unk_100177858, v11, v14);
}

uint64_t sub_1000D2458()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(void **)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 512);
  sub_100051880(v4, v3, v2, v1);
  sub_100005AB0(v7, v6);

  sub_100051880(v4, v3, v2, v1);
  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 104))(v9, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 320));
  swift_errorRetain(v8);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v9, 0, v10, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000025, 0x8000000100135B80, 189);
  swift_willThrow(v13);
  swift_errorRelease(v8);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  v14 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 336);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(v14, *(_QWORD *)(v0 + 392));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v6[10] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[11] = v11;
  v6[12] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v6[13] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[14] = v13;
  v6[15] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_task_alloc(dword_10017787C);
  v6[16] = v14;
  *v14 = v6;
  v14[1] = sub_1000D26FC;
  return sub_1000D2BA8(a4, a5, a2);
}

uint64_t sub_1000D26FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(*v4 + 128);
  v6 = *v4;
  *(_QWORD *)(v6 + 136) = a1;
  *(_QWORD *)(v6 + 144) = a2;
  *(_QWORD *)(v6 + 152) = a3;
  swift_task_dealloc(v5);
  if (!v3)
    return swift_task_switch(sub_1000D2788, 0, 0);
  v7 = *(_QWORD *)(v6 + 96);
  swift_task_dealloc(*(_QWORD *)(v6 + 120));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000D2788(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1[8];
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1[14];
    v33 = v1[13];
    v35 = v1[15];
    v8 = v1[7];
    v7 = v1[8];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v36 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v1[3] = sub_10003FA80(v8, v7, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "calling generateSESPresentmentKey for %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v35, v33);
  }
  else
  {
    v12 = v1[14];
    v11 = v1[15];
    v13 = v1[13];
    swift_bridgeObjectRelease_n(v1[8], 2);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  v14 = v1[18];
  v15 = (void *)v1[19];
  v16 = v1[17];
  v34 = v1[12];
  v17 = v1[9];
  v31 = v1[11];
  v32 = v1[10];
  v18 = v1[7];
  v19 = v1[8];
  v21 = v1[5];
  v20 = v1[6];
  v22 = (_QWORD *)swift_allocObject(&unk_10016AD00, 80, 7);
  v1[20] = v22;
  v22[2] = v20;
  v22[3] = v18;
  v22[4] = v19;
  v22[5] = v21;
  v22[6] = v17;
  v22[7] = v16;
  v22[8] = v14;
  v22[9] = v15;
  swift_bridgeObjectRetain(v19);
  swift_retain(v20);
  swift_retain(v21);
  sub_100005A38(v16, v14);
  v23 = swift_allocObject(&unk_10016AD28, 32, 7);
  v1[21] = v23;
  *(_QWORD *)(v23 + 16) = sub_1000D84A8;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 104);
  v26 = v15;
  v25(v34, v24, v32);
  v27 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v22);
  v28 = (_QWORD *)swift_task_alloc(v27);
  v1[22] = v28;
  v29 = sub_100008E84(&qword_100177880);
  *v28 = v1;
  v28[1] = sub_1000D2A48;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 2, v1[12], sub_100051D14, v23, v29);
}

uint64_t sub_1000D2A48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    swift_release(v2[21]);
    v7 = sub_1000D2B50;
  }
  else
  {
    v8 = v2[20];
    swift_release(v2[21]);
    swift_release(v8);
    v2[24] = v2[2];
    v7 = sub_1000D2AF4;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000D2AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 136);
  *(_QWORD *)v4 = *(_QWORD *)(v0 + 192);
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 24) = v1;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2B50()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  sub_100005AB0(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  v5 = type metadata accessor for CoreIDVFeatureFlag(0);
  v4[31] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[32] = v6;
  v4[33] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v4[34] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[35] = v8;
  v4[36] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v4[37] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[38] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v11);
  v4[40] = swift_task_alloc(v11);
  v4[41] = swift_task_alloc(v11);
  v4[42] = swift_task_alloc(v11);
  v4[43] = swift_task_alloc(v11);
  v4[44] = swift_task_alloc(v11);
  v12 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[45] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[46] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[47] = swift_task_alloc(v14);
  v4[48] = swift_task_alloc(v14);
  v4[49] = swift_task_alloc(v14);
  v4[50] = swift_task_alloc(v14);
  v15 = type metadata accessor for DIPSignpost.Config(0);
  v4[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost(0);
  v4[52] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[53] = v17;
  v4[54] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D2D34, 0, 0);
}

uint64_t sub_1000D2D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 224);
  static IDCSSignposts.storagePrepareProgenitorKeyMetadata.getter();
  DIPSignpost.init(_:)(v1);
  v8 = (_QWORD *)swift_allocObject(&unk_10016AD50, 48, 7);
  *(_QWORD *)(v0 + 440) = v8;
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v7;
  v8[5] = v4;
  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v4 + 16);
  v9 = swift_allocObject(&unk_10016AD78, 32, 7);
  *(_QWORD *)(v0 + 456) = v9;
  *(_QWORD *)(v9 + 16) = sub_1000D8500;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 640) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  *(_QWORD *)(v0 + 464) = v11;
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  swift_retain(v4);
  v11(v16, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 472) = v13;
  type metadata accessor for DCCredentialPresentmentAuthPolicy(0);
  *v13 = v0;
  v13[1] = sub_1000D2E90;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 192, *(_QWORD *)(v0 + 400), sub_100051D14, v9, v14);
}

uint64_t sub_1000D2E90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[57];
    (*(void (**)(_QWORD, _QWORD))(v2[46] + 8))(v2[50], v2[45]);
    swift_release(v4);
    v5 = sub_1000D2F4C;
  }
  else
  {
    v6 = v2[57];
    v7 = v2[55];
    v8 = v2[50];
    v9 = v2[45];
    v10 = *(void (**)(uint64_t, uint64_t))(v2[46] + 8);
    v2[61] = v10;
    v10(v8, v9);
    swift_release(v6);
    swift_release(v7);
    v2[62] = v2[24];
    v5 = sub_1000D3158;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D2F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 440));
  v1 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v7);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  SecAccessControlCreateFlags v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v1 + 496);
    v86 = *(_QWORD *)(v1 + 304);
    v89 = *(_QWORD *)(v1 + 296);
    v92 = *(_QWORD *)(v1 + 352);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v95 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = (id)DCCredentialPresentmentAuthPolicyToString(v5);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    *(_QWORD *)(v1 + 208) = sub_10003FA80(v9, v11, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v6 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Creating presentment key for auth policy %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v12 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
    v12(v92, v89);
  }
  else
  {
    v13 = *(_QWORD *)(v1 + 352);
    v14 = *(_QWORD *)(v1 + 296);
    v15 = *(_QWORD *)(v1 + 304);

    v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(_QWORD *)(v1 + 504) = v12;
  v16 = *(_QWORD *)(v1 + 480);
  v17 = sub_1000D7F4C(*(_QWORD *)(v1 + 496));
  v18 = v16;
  if (v16)
    goto LABEL_5;
  if ((v17 & 1) != 0)
  {
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 464);
    v31 = *(unsigned int *)(v1 + 640);
    v32 = *(_QWORD *)(v1 + 392);
    v33 = *(_QWORD *)(v1 + 360);
    v34 = *(_QWORD *)(v1 + 232);
    v35 = swift_allocObject(&unk_10016ADA0, 32, 7);
    *(_QWORD *)(v1 + 512) = v35;
    *(_QWORD *)(v35 + 16) = sub_1000D851C;
    *(_QWORD *)(v35 + 24) = v34;
    swift_retain(v34);
    v30(v32, v31, v33);
    v36 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v34);
    v37 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v1 + 520) = v37;
    *v37 = v1;
    v37[1] = sub_1000D3A2C;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v1 + 644, *(_QWORD *)(v1 + 392), sub_100070ACC, v35, &_s7VersionON);
  }
  else
  {
    v38 = *(_QWORD *)(v1 + 496);
    if (v38 != 1)
    {
      v48 = *(_QWORD *)(v1 + 280);
      v47 = *(_QWORD *)(v1 + 288);
      v49 = *(_QWORD *)(v1 + 272);
      v95 = 0;
      v96 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v50._countAndFlagsBits = 0xD00000000000004DLL;
      v50._object = (void *)0x8000000100135CF0;
      String.append(_:)(v50);
      v51 = (id)DCCredentialPresentmentAuthPolicyToString(v38);
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v55._countAndFlagsBits = v52;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease(v54);
      v56 = v95;
      v57 = v96;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104))(v47, enum case for DIPError.Code.idcsInvalidActionForPresentmentAuthPolicy(_:), v49);
      v58 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v59 = type metadata accessor for DIPError(0);
      v60 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v18 = swift_allocError(v59, v60, 0, 0);
      v61 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, v57, 0, v47, 0, v58, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 286);
      swift_willThrow(v61);
LABEL_5:
      v20 = *(_QWORD *)(v1 + 424);
      v19 = *(_QWORD *)(v1 + 432);
      v22 = *(_QWORD *)(v1 + 408);
      v21 = *(_QWORD *)(v1 + 416);
      v23 = *(_QWORD *)(v1 + 400);
      v74 = *(_QWORD *)(v1 + 392);
      v75 = *(_QWORD *)(v1 + 384);
      v76 = *(_QWORD *)(v1 + 376);
      v78 = *(_QWORD *)(v1 + 352);
      v80 = *(_QWORD *)(v1 + 344);
      v82 = *(_QWORD *)(v1 + 336);
      v84 = *(_QWORD *)(v1 + 328);
      v87 = *(_QWORD *)(v1 + 320);
      v24 = *(_QWORD *)(v1 + 288);
      v90 = *(_QWORD *)(v1 + 312);
      v93 = *(_QWORD *)(v1 + 264);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 104))(v24, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 272));
      swift_errorRetain(v18);
      v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v26 = type metadata accessor for DIPError(0);
      v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v26, v27, 0, 0);
      v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v18, v24, 0, v25, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
      swift_willThrow(v28);
      swift_errorRelease(v18);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      swift_task_dealloc(v19);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      swift_task_dealloc(v84);
      swift_task_dealloc(v87);
      swift_task_dealloc(v90);
      swift_task_dealloc(v24);
      swift_task_dealloc(v93);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    v39 = *(_QWORD *)(*(_QWORD *)(v1 + 240) + 24);
    *(_QWORD *)(v1 + 32) = v39;
    type metadata accessor for AppleIDVManager(0);
    swift_retain(v39);
    v40 = sub_100112A6C((uint64_t *)(v1 + 40));
    v41 = defaultLogger()(v40);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Credential uses anyBiometricOrPasscode policy", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }
    v45 = *(_QWORD *)(v1 + 312);
    v46 = *(_QWORD *)(v1 + 296);

    v12(v45, v46);
    v62 = sub_100088978(0x40000001uLL, 1);
    v64 = v63;
    swift_release(*(_QWORD *)(v1 + 32));
    sub_10000CE40((_QWORD *)(v1 + 40));
    type metadata accessor for SecAccessControl(0);
    v65 = static SecAccessControlRef.fromData(_:)(v62, v64);
    sub_100005AB0(v62, v64);
    v67 = *(_QWORD *)(v1 + 424);
    v66 = *(_QWORD *)(v1 + 432);
    v69 = *(_QWORD *)(v1 + 408);
    v68 = *(_QWORD *)(v1 + 416);
    v70 = *(_QWORD *)(v1 + 392);
    v71 = *(_QWORD *)(v1 + 400);
    v73 = *(_QWORD *)(v1 + 376);
    v72 = *(_QWORD *)(v1 + 384);
    v77 = *(_QWORD *)(v1 + 352);
    v79 = *(_QWORD *)(v1 + 344);
    v81 = *(_QWORD *)(v1 + 336);
    v83 = *(_QWORD *)(v1 + 328);
    v85 = *(_QWORD *)(v1 + 320);
    v88 = *(_QWORD *)(v1 + 312);
    v91 = *(_QWORD *)(v1 + 288);
    v94 = *(_QWORD *)(v1 + 264);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    swift_task_dealloc(v66);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v88);
    swift_task_dealloc(v91);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v1 + 8))(0, 0xC000000000000000, v65);
  }
}

uint64_t sub_1000D3A2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 512);
    (*(void (**)(_QWORD, _QWORD))(v2 + 488))(*(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 360));
    swift_release(v4);
    v5 = sub_1000D4064;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 512);
    v7 = *(_QWORD *)(v2 + 232);
    (*(void (**)(_QWORD, _QWORD))(v2 + 488))(*(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 360));
    swift_release(v6);
    swift_release(v7);
    *(_BYTE *)(v2 + 645) = *(_BYTE *)(v2 + 644);
    v5 = sub_1000D3AE4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D3AE4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (!*(_BYTE *)(v1 + 645))
  {
    v15 = defaultLogger()(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "legacy key found, migrating to v2", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v19 = *(void (**)(uint64_t, uint64_t))(v1 + 504);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 464);
    v21 = *(unsigned int *)(v1 + 640);
    v22 = *(_QWORD *)(v1 + 384);
    v23 = *(_QWORD *)(v1 + 360);
    v24 = *(_QWORD *)(v1 + 344);
    v25 = *(_QWORD *)(v1 + 296);
    v26 = *(_QWORD *)(v1 + 232);

    v19(v24, v25);
    v27 = swift_allocObject(&unk_10016ADF0, 32, 7);
    *(_QWORD *)(v1 + 536) = v27;
    *(_QWORD *)(v27 + 16) = sub_1000D854C;
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain(v26);
    v20(v22, v21, v23);
    v28 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v26);
    v29 = (_QWORD *)swift_task_alloc(v28);
    *(_QWORD *)(v1 + 544) = v29;
    v10 = sub_1000D8564();
    *v29 = v1;
    v29[1] = sub_1000D4270;
    v11 = *(_QWORD *)(v1 + 384);
    v12 = sub_100051D14;
    v13 = v1 + 200;
    v14 = v27;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v13, v11, v12, v14, v10);
  }
  if (*(_BYTE *)(v1 + 645) == 1)
  {
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 464);
    v3 = *(unsigned int *)(v1 + 640);
    v4 = *(_QWORD *)(v1 + 376);
    v5 = *(_QWORD *)(v1 + 360);
    v6 = *(_QWORD *)(v1 + 232);
    v7 = swift_allocObject(&unk_10016ADC8, 32, 7);
    *(_QWORD *)(v1 + 616) = v7;
    *(_QWORD *)(v7 + 16) = sub_1000D8534;
    *(_QWORD *)(v7 + 24) = v6;
    swift_retain(v6);
    v2(v4, v3, v5);
    v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v6);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v1 + 624) = v9;
    v10 = sub_100008E84(&qword_100177888);
    *v9 = v1;
    v9[1] = sub_1000D4D20;
    v11 = *(_QWORD *)(v1 + 376);
    v12 = sub_10003DE8C;
    v13 = v1 + 144;
    v14 = v7;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v13, v11, v12, v14, v10);
  }
  v31 = defaultLogger()(a1);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invalid key type", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }
  v35 = *(void (**)(uint64_t, uint64_t))(v1 + 504);
  v36 = *(_QWORD *)(v1 + 320);
  v37 = *(_QWORD *)(v1 + 288);
  v38 = *(_QWORD *)(v1 + 296);
  v39 = *(_QWORD *)(v1 + 272);
  v40 = *(_QWORD *)(v1 + 280);

  v35(v36, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 104))(v37, enum case for DIPError.Code.idcsInvalidKeyVersion(_:), v39);
  v41 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v50 = type metadata accessor for DIPError(0);
  v42 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v43 = swift_allocError(v50, v42, 0, 0);
  v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000010, 0x8000000100135D40, 0, v37, 0, v41, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 282);
  swift_willThrow(v44);
  v45 = *(_QWORD *)(v1 + 424);
  v46 = *(_QWORD *)(v1 + 432);
  v51 = *(_QWORD *)(v1 + 416);
  v52 = *(_QWORD *)(v1 + 408);
  v53 = *(_QWORD *)(v1 + 400);
  v54 = *(_QWORD *)(v1 + 392);
  v55 = *(_QWORD *)(v1 + 384);
  v56 = *(_QWORD *)(v1 + 376);
  v57 = *(_QWORD *)(v1 + 352);
  v58 = *(_QWORD *)(v1 + 344);
  v59 = *(_QWORD *)(v1 + 336);
  v60 = *(_QWORD *)(v1 + 328);
  v61 = *(_QWORD *)(v1 + 320);
  v62 = *(_QWORD *)(v1 + 312);
  v47 = *(_QWORD *)(v1 + 288);
  v63 = *(_QWORD *)(v1 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 104))(v47, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 272));
  swift_errorRetain(v43);
  v48 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v50, v42, 0, 0);
  v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v43, v47, 0, v48, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v49);
  swift_errorRelease(v43);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v51);
  swift_task_dealloc(v46);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v47);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000D4064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v7);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4270()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 544);
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 536);
    (*(void (**)(_QWORD, _QWORD))(v2 + 488))(*(_QWORD *)(v2 + 384), *(_QWORD *)(v2 + 360));
    swift_release(v4);
    v5 = sub_1000D461C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 536);
    v7 = *(_QWORD *)(v2 + 232);
    (*(void (**)(_QWORD, _QWORD))(v2 + 488))(*(_QWORD *)(v2 + 384), *(_QWORD *)(v2 + 360));
    swift_release(v6);
    swift_release(v7);
    *(_QWORD *)(v2 + 560) = *(_QWORD *)(v2 + 200);
    v5 = sub_1000D4328;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D4328()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = objc_msgSend(v1, "aclData");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = sub_10009ED48(v4, v6, (uint64_t)objc_msgSend(v1, "aclType"));
  v9 = v8;
  v10 = v2;
  *(_QWORD *)(v0 + 568) = v7;
  *(_QWORD *)(v0 + 576) = v8;
  v11 = *(void **)(v0 + 560);
  sub_100005AB0(v4, v6);
  if (v10)
  {

    v13 = *(_QWORD *)(v0 + 424);
    v12 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 408);
    v14 = *(_QWORD *)(v0 + 416);
    v24 = *(_QWORD *)(v0 + 400);
    v25 = *(_QWORD *)(v0 + 392);
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 376);
    v28 = *(_QWORD *)(v0 + 352);
    v29 = *(_QWORD *)(v0 + 344);
    v30 = *(_QWORD *)(v0 + 336);
    v31 = *(_QWORD *)(v0 + 328);
    v32 = *(_QWORD *)(v0 + 320);
    v33 = *(_QWORD *)(v0 + 312);
    v16 = *(_QWORD *)(v0 + 288);
    v34 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v16, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
    swift_errorRetain(v10);
    v17 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v18 = type metadata accessor for DIPError(0);
    v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v18, v19, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v10, v16, 0, v17, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
    swift_willThrow(v20);
    swift_errorRelease(v10);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc(v12);
    swift_task_dealloc(v15);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v16);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v22 = objc_msgSend(v11, "aclType");
    v23 = (_QWORD *)swift_task_alloc(dword_10017726C);
    *(_QWORD *)(v0 + 584) = v23;
    *v23 = v0;
    v23[1] = sub_1000D4828;
    return sub_10009C8A8(v7, v9, (uint64_t)v22, *(_QWORD *)(v0 + 232), 0);
  }
}

uint64_t sub_1000D461C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v7);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 584);
  v4[74] = a1;
  v4[75] = a2;
  v4[76] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000D575C;
  else
    v6 = sub_1000D489C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D489C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (*(_QWORD *)(v0 + 600) >> 60 == 15)
  {
    v1 = *(_QWORD *)(v0 + 576);
    v2 = *(_QWORD *)(v0 + 568);
    v3 = *(void **)(v0 + 560);
    v4 = *(_QWORD *)(v0 + 288);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v4, enum case for DIPError.Code.progenitorKeyAttestationUnavailable(_:), *(_QWORD *)(v0 + 272));
    v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v8 = swift_allocError(v6, v7, 0, 0);
    v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x8000000100135D60, 0, v4, 0, v5, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 242);
    swift_willThrow(v9);
    v10 = v2;
LABEL_5:
    sub_100005AB0(v10, v1);

    v17 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 432);
    v34 = *(_QWORD *)(v0 + 416);
    v35 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 400);
    v37 = *(_QWORD *)(v0 + 392);
    v39 = *(_QWORD *)(v0 + 384);
    v41 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 344);
    v47 = *(_QWORD *)(v0 + 336);
    v49 = *(_QWORD *)(v0 + 328);
    v51 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 288);
    v53 = *(_QWORD *)(v0 + 312);
    v55 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v18, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
    swift_errorRetain(v8);
    v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v18, 0, v19, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
    swift_willThrow(v22);
    swift_errorRelease(v8);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v34);
    swift_task_dealloc(v16);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v18);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = *(_QWORD *)(v0 + 608);
  v12 = *(_QWORD *)(v0 + 576);
  v13 = *(_QWORD *)(v0 + 568);
  type metadata accessor for SecAccessControl(0);
  v14 = static SecAccessControlRef.fromData(_:)(v13, v12);
  if (v11)
  {
    v8 = v11;
    v1 = *(_QWORD *)(v0 + 576);
    v15 = *(_QWORD *)(v0 + 568);
    v3 = *(void **)(v0 + 560);
    sub_10000B164(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 600));
    v10 = v15;
    goto LABEL_5;
  }
  v56 = v14;
  v24 = *(void **)(v0 + 560);
  sub_100005AB0(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));

  v54 = *(_QWORD *)(v0 + 600);
  v52 = *(_QWORD *)(v0 + 592);
  v26 = *(_QWORD *)(v0 + 424);
  v25 = *(_QWORD *)(v0 + 432);
  v27 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 392);
  v29 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 376);
  v31 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 352);
  v38 = *(_QWORD *)(v0 + 344);
  v40 = *(_QWORD *)(v0 + 336);
  v42 = *(_QWORD *)(v0 + 328);
  v44 = *(_QWORD *)(v0 + 320);
  v46 = *(_QWORD *)(v0 + 312);
  v48 = *(_QWORD *)(v0 + 288);
  v50 = *(_QWORD *)(v0 + 264);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v28);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v52, v54, v56);
}

uint64_t sub_1000D4D20()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 624);
  *(_QWORD *)(*(_QWORD *)v1 + 632) = v0;
  swift_task_dealloc(v3);
  v4 = v2[77];
  v5 = (void (*)(uint64_t, uint64_t))v2[61];
  v6 = v2[47];
  v7 = v2[45];
  if (v0)
  {
    v5(v6, v7);
    swift_release(v4);
    v8 = sub_1000D5550;
  }
  else
  {
    v9 = v2[29];
    v5(v6, v7);
    swift_release(v4);
    swift_release(v9);
    v8 = sub_1000D4DC0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000D4DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = sub_100100EB4(*(_QWORD *)(v0 + 144), v2, v4, v3, v6, v5);
  v8 = v1;
  if (v1)
  {
    sub_10000B164(v6, v5);
    sub_100005AB0(v4, v3);
    swift_bridgeObjectRelease(v2);
    v11 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 432);
    v12 = *(_QWORD *)(v0 + 408);
    v13 = *(_QWORD *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 400);
    v55 = *(_QWORD *)(v0 + 392);
    v57 = *(_QWORD *)(v0 + 384);
    v59 = *(_QWORD *)(v0 + 376);
    v61 = *(_QWORD *)(v0 + 352);
    v63 = *(_QWORD *)(v0 + 344);
    v66 = *(_QWORD *)(v0 + 336);
    v69 = *(_QWORD *)(v0 + 328);
    v71 = *(_QWORD *)(v0 + 320);
    v73 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 288);
    v76 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v15, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
    swift_errorRetain(v1);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v15, 0, v16, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
    swift_willThrow(v19);
    swift_errorRelease(v8);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v13);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v66);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v15);
    swift_task_dealloc(v76);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v7;
    swift_bridgeObjectRelease(v2);
    v77 = v9;
    v64 = v3;
    v67 = v4;
    v70 = sub_100100E8C(v9);
    v72 = v21;
    v23 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD **)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 248);
    v26 = v24[18];
    v74 = v24[19];
    sub_1000151A4(v24 + 15, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, enum case for CoreIDVFeatureFlag.bbkc(_:), v25);
    LOBYTE(v9) = dispatch thunk of FeatureFlagProviding.isEnabled(_:)(v22, v26, v74);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v25);
    if ((v9 & 1) != 0)
    {
      v28 = defaultLogger()(v27);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "BBKC is enabled; using key chaining for presentment key ACL",
          v31,
          2u);
        swift_slowDealloc(v31, -1, -1);
      }
      v32 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
      v33 = *(_QWORD *)(v0 + 336);
      v34 = *(_QWORD *)(v0 + 296);
      v35 = *(_QWORD *)(v0 + 240);

      v32(v33, v34);
      v36 = *(_QWORD *)(v35 + 24);
      *(_QWORD *)(v0 + 96) = v36;
      type metadata accessor for AppleIDVManager(0);
      swift_retain(v36);
      sub_100112A6C((uint64_t *)(v0 + 104));
      v37 = *(_QWORD *)(v77 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
      v38 = *(_QWORD *)(v77 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey + 8);
      sub_100005A38(v37, v38);
      v56 = (uint64_t)sub_100088C94(v37, v38);
      swift_release(v36);
      sub_10000CE40((_QWORD *)(v0 + 104));
      sub_10000B164(v6, v5);
      sub_100005AB0(v67, v64);
      swift_release(v77);
      sub_100005AB0(v37, v38);
    }
    else
    {
      v39 = defaultLogger()(v27);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "BBKC is not enabled; presentment key ACL matches progenitor key ACL",
          v42,
          2u);
        swift_slowDealloc(v42, -1, -1);
      }
      v43 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
      v44 = *(_QWORD *)(v0 + 328);
      v45 = *(_QWORD *)(v0 + 296);

      v43(v44, v45);
      v56 = sub_1001033D8(*(_QWORD *)(v77 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(_QWORD *)(v77 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8));
      sub_10000B164(v6, v5);
      sub_100005AB0(v67, v64);
      swift_release(v77);
    }
    v47 = *(_QWORD *)(v0 + 424);
    v46 = *(_QWORD *)(v0 + 432);
    v49 = *(_QWORD *)(v0 + 408);
    v48 = *(_QWORD *)(v0 + 416);
    v51 = *(_QWORD *)(v0 + 392);
    v50 = *(_QWORD *)(v0 + 400);
    v53 = *(_QWORD *)(v0 + 376);
    v52 = *(_QWORD *)(v0 + 384);
    v54 = *(_QWORD *)(v0 + 352);
    v58 = *(_QWORD *)(v0 + 344);
    v60 = *(_QWORD *)(v0 + 336);
    v62 = *(_QWORD *)(v0 + 328);
    v65 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 312);
    v75 = *(_QWORD *)(v0 + 288);
    v78 = *(_QWORD *)(v0 + 264);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    swift_task_dealloc(v46);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v70, v72, v56);
  }
}

uint64_t sub_1000D5550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v7, 0, v8, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v7);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D575C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 560);
  sub_100005AB0(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));

  v2 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 328);
  v21 = *(_QWORD *)(v0 + 320);
  v22 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 288);
  v23 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v2);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v8, 0, v9, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 301);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v8);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D5974(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  id v49;
  Swift::String v50;
  Swift::Bool v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint8_t *v58;
  BOOL v59;
  _QWORD *v60;
  char *v61;
  __int128 v62;
  _OWORD *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _OWORD v78[5];
  uint64_t v79;
  uint64_t v80;

  v71 = a8;
  v72 = a7;
  v76 = a3;
  v60 = a9;
  v75 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v75 - 8);
  v16 = __chkstk_darwin(v75);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v60 - v19;
  v73 = a4;
  v21 = sub_1000093E8(a2, v76);
  if (!v9)
  {
    v66 = v18;
    v64 = v21;
    v65 = v15;
    if (a5 < 1)
    {
LABEL_21:
      __break(1u);
    }
    else
    {
      v63 = v78;
      v76 = _swiftEmptyArrayStorage;
      v23 = 1;
      *(_QWORD *)&v22 = 134218242;
      v62 = v22;
      v61 = (char *)&type metadata for Any + 8;
      v68 = (void *)0x8000000100135C90;
      v69 = a1;
      v24 = v65;
      v25 = v64;
      v74 = v20;
      v67 = a6;
      v70 = a5;
      while (1)
      {
        v26 = sub_1000D5E88(v25, v71, v73, (uint64_t *)v78);
        defaultLogger()(v26);
        v27 = sub_1000D82E0(v78);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = swift_slowAlloc(22, -1);
          v31 = swift_slowAlloc(32, -1);
          v80 = v31;
          *(_DWORD *)v30 = v62;
          v77 = v23;
          v32 = v23;
          v33 = v63;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v63, v30 + 4);
          *(_WORD *)(v30 + 12) = 2080;
          v35 = *((_QWORD *)&v78[0] + 1);
          v34 = *(_QWORD *)&v78[0];
          swift_bridgeObjectRetain(*((_QWORD *)&v78[0] + 1));
          v77 = sub_10003FA80(v34, v35, &v80);
          v36 = v33;
          v23 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v36, v30 + 14);
          v37 = v35;
          v24 = v65;
          v25 = v64;
          swift_bridgeObjectRelease(v37);
          sub_1000D83D0(v78);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%ld] created a new presentment key with identifier %s", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy(v31, 1, v61);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v30, -1, -1);

          v38 = *(void (**)(char *, uint64_t))(v24 + 8);
          v38(v74, v75);
        }
        else
        {
          sub_1000D83D0(v78);

          v38 = *(void (**)(char *, uint64_t))(v24 + 8);
          v38(v20, v75);
        }
        sub_1000D82E0(v78);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
        v40 = v70;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v76 = sub_1000A7820(0, v76[2] + 1, 1, v76);
        v42 = v76[2];
        v41 = v76[3];
        if (v42 >= v41 >> 1)
          v76 = sub_1000A7820((_QWORD *)(v41 > 1), v42 + 1, 1, v76);
        v43 = v76;
        v76[2] = v42 + 1;
        v44 = &v43[11 * v42];
        v45 = v78[1];
        *((_OWORD *)v44 + 2) = v78[0];
        *((_OWORD *)v44 + 3) = v45;
        v46 = v78[2];
        v47 = v78[3];
        v48 = v78[4];
        v44[14] = v79;
        *((_OWORD *)v44 + 5) = v47;
        *((_OWORD *)v44 + 6) = v48;
        *((_OWORD *)v44 + 4) = v46;
        v49 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v50._countAndFlagsBits = 0xD00000000000002CLL;
        v50._object = v68;
        v51 = NSUserDefaults.internalBool(forKey:)(v50);

        if (v51)
        {
          v53 = v66;
          v54 = defaultLogger()(v52);
          v55 = Logger.logObject.getter(v54);
          v56 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v55, v56))
          {
            v57 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v57 = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "Sleeping after generating presentment key due to user defaults setting", v57, 2u);
            v58 = v57;
            v53 = v66;
            swift_slowDealloc(v58, -1, -1);
          }

          v38(v53, v75);
          objc_msgSend((id)objc_opt_self(NSThread), "sleepForTimeInterval:", 5.0);
        }
        sub_1000D83D0(v78);
        if (v40 == v23)
          break;
        v59 = __OFADD__(v23++, 1);
        v20 = v74;
        if (v59)
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      sub_1000091F8();

      *v60 = v76;
    }
  }
}

uint64_t sub_1000D5E88@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v54 = a1;
  v55 = a3;
  v7 = type metadata accessor for COSEKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DIPSignpost(0);
  v56 = *(_QWORD *)(v57 - 8);
  v14 = __chkstk_darwin(v57);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.storageGenerateSESPresentmentKey.getter(v14);
  DIPSignpost.init(_:)(v13);
  v17 = sub_100102308(a2);
  if (v4)
  {
    v36 = v57;
    v37 = v56;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v16, v36);
  }
  else
  {
    v18 = v17;
    v52 = v8;
    v53 = v10;
    v19 = v54;
    v20 = v55;
    v50 = a4;
    v51 = v7;
    v21 = sub_1001025E8(v17);
    v23 = v22;
    v24 = type metadata accessor for StoredCryptoKey(0);
    v25 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v24)), "initWithContext:", *(_QWORD *)(v20 + 16));
    sub_1000C90E4(v18);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "setAttestation:", isa);

    objc_msgSend(v19, "addCryptoKeysObject:", v25);
    v27 = type metadata accessor for CBOREncoder(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v29 = v21;
    v30 = CBOREncoder.init()(v28);
    v31 = (uint64_t)v53;
    sub_1000577B4((uint64_t)v53);
    v54 = v23;
    v55 = v29;
    v32 = sub_1000058C8((unint64_t *)&unk_100174BD0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
    v33 = v30;
    v34 = v51;
    v35 = dispatch thunk of CBOREncoder.encode<A>(_:)(v31, v51, v32);
    v38 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v52 = v35;
    v53 = (char *)v39;
    v38(v31, v34);

    swift_release(v33);
    v40 = *(_QWORD *)(v18 + 24);
    v51 = *(_QWORD *)(v18 + 16);
    v41 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
    v42 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey + 8);
    v44 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
    v43 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier + 8);
    swift_bridgeObjectRetain(v40);
    sub_100005A38(v41, v42);
    sub_100005A38(v44, v43);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v16, v57);
    v46 = v50;
    *v50 = v51;
    v46[1] = v40;
    v46[2] = v41;
    v46[3] = v42;
    v46[4] = v44;
    v46[5] = v43;
    v47 = (uint64_t)v53;
    v46[6] = v52;
    v46[7] = v47;
    v48 = (uint64_t)v54;
    v46[8] = v55;
    v46[9] = v48;
    v46[10] = v18;
  }
  return result;
}

void sub_1000D6220(uint64_t a1@<X2>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = sub_1000093E8(a1, a2);
  if (!v3)
  {
    v6 = v5;
    v7 = (uint64_t)sub_1000C5240();
    v8 = v7;
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v21 = v7;
      else
        v21 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v8);
      if (v22)
        goto LABEL_4;
    }
    else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v8 & 0xC000000000000001) != 0)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
      }
      else
      {
        if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v9 = *(id *)(v8 + 32);
      }
      v10 = v9;
      swift_bridgeObjectRelease(v8);
      v11 = objc_msgSend(v10, "identifier");
      if (v11)
      {
        v12 = v11;
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v15 = v14;

        v16 = objc_msgSend(v10, "publicKeyIdentifier");
        if (v16)
        {
          v17 = v16;
          v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v20 = v19;

          *a3 = v13;
          a3[1] = v15;
          a3[2] = v18;
          a3[3] = v20;
          return;
        }
        swift_bridgeObjectRelease(v15);

      }
      else
      {

      }
      goto LABEL_17;
    }

    swift_bridgeObjectRelease(v8);
LABEL_17:
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
}

unint64_t sub_1000D63C4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *object;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *a1;
  v3 = (void *)a1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x2063696C62757020;
  v5._object = (void *)0xED0000203A79656BLL;
  String.append(_:)(v5);
  v6 = Data.base16EncodedString()();
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000010;
}

unint64_t sub_1000D6494(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *object;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *a1;
  v3 = (void *)a1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x8000000100135C70;
  String.append(_:)(v5);
  v6 = Data.base16EncodedString()();
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000010;
}

unint64_t sub_1000D6564(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v11;
  void *v12;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0xE000000000000000);
  v6 = *a1;
  v5 = (void *)a1[1];
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  v8._object = (void *)0x8000000100135C50;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  if (a3 >> 60 == 15)
  {
    object = (void *)0xE500000000000000;
    countAndFlagsBits = 0x3E6C696E3CLL;
  }
  else
  {
    v11 = Data.base16EncodedString()();
    countAndFlagsBits = v11._countAndFlagsBits;
    object = v11._object;
  }
  v12 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000010;
}

void sub_1000D6664(uint64_t a1@<X1>, void *a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;

  v5 = sub_1000093E8(a1, a2);
  if (!v3)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "options");
    if (v7)
    {
      v8 = v7;
      v9 = (unint64_t)objc_msgSend(v7, "presentmentAuthPolicy");
      if ((v9 & 0x8000000000000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        __break(1u);
        return;
      }
      v10 = v9;

      v6 = v8;
    }
    else
    {
      v10 = 0;
    }

    *a3 = v10;
  }
}

void sub_1000D674C(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v1)
  {
    v8 = v7;
    if (v7)
    {
      v9 = objc_msgSend(v7, "version");

      if (v9 == 2)
        v10 = 1;
      else
        v10 = 2;
      if (v9 == 1)
        v10 = 0;
      *a1 = v10;
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      v11 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v12 = type metadata accessor for DIPError(0);
      v13 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v12, v13, 0, 0);
      v14 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100135D90, 0, v6, 0, v11, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 214);
      swift_willThrow(v14);
    }
  }
}

void sub_1000D6918(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Class isa;
  id v30;
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;
  id v35;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v1)
  {
    v8 = v7;
    if (v7)
    {
      v9 = objc_msgSend(v7, "encryptedACL");
      if (v9)
      {
        v10 = v9;
        v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

        v14 = (unint64_t)objc_msgSend(v8, "aclType");
        if ((v14 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
        }
        else
        {
          v15 = v14;
          type metadata accessor for AppleIDVManager(0);
          sub_100112A6C(v32);
          v16 = v33;
          v17 = v34;
          sub_1000151A4(v32, v33);
          v26 = dispatch thunk of AppleIDVManaging.recoverPersistedACLBlob(from:)(v11, v13, v16, v17);
          v28 = v27;
          v35 = objc_allocWithZone((Class)DCCredentialAuthACL);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v30 = objc_msgSend(v35, "initWithData:type:", isa, v15);
          sub_100005AB0(v26, v28);

          sub_10000CE40(v32);
          sub_100005AB0(v11, v13);
          *a1 = v30;
        }
      }
      else
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
        v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v23 = type metadata accessor for DIPError(0);
        v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v23, v24, 0, 0);
        v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100133D30, 0, v6, 0, v22, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 231);
        swift_willThrow(v25);

      }
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
      v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v19 = type metadata accessor for DIPError(0);
      v20 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v19, v20, 0, 0);
      v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100135D90, 0, v6, 0, v18, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 226);
      swift_willThrow(v21);
    }
  }
}

void sub_1000D6D18(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (v1)
    return;
  v8 = v7;
  if (!v7)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingGlobalAuthACL(_:), v3);
    v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000012, 0x8000000100135D90, 0, v6, 0, v25, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 250);
    swift_willThrow(v28);
    return;
  }
  v9 = objc_msgSend(v7, "progenitorKey");
  if (!v9)
  {
LABEL_11:
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.idcsMissingProgenitorKeyFromACL(_:), v3);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v30, v31, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100133C30, 0, v6, 0, v29, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000002ALL, 0x8000000100135CC0, 253);
    swift_willThrow(v32);

    return;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "identifier");
  if (!v11)
  {

    goto LABEL_11;
  }
  v12 = v11;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v35 = v13;

  v14 = objc_msgSend(v10, "keyBlob");
  if (!v14)
  {

    swift_bridgeObjectRelease(v35);
    goto LABEL_11;
  }
  v15 = v14;
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  v19 = v35;
  *a1 = v34;
  a1[1] = v19;
  a1[2] = v16;
  a1[3] = v18;
  sub_100005A38(v16, v18);
  v20 = objc_msgSend(v10, "publicKeyIdentifier");
  if (v20)
  {
    v21 = v20;
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    sub_100005AB0(v16, v18);
  }
  else
  {

    sub_100005AB0(v16, v18);
    v22 = 0;
    v24 = 0xF000000000000000;
  }

  a1[4] = v22;
  a1[5] = v24;
}

uint64_t sub_1000D70B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D7120, 0, 0);
}

uint64_t sub_1000D7120()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[2];
  v6 = (_QWORD *)swift_allocObject(&unk_10016AC10, 56, 7);
  v0[10] = v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = v5;
  v6[6] = v4;
  sub_100005A38(v3, v1);
  v7 = swift_allocObject(&unk_10016AC38, 32, 7);
  v0[11] = v7;
  *(_QWORD *)(v7 + 16) = sub_1000D7F08;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v2);
  swift_bridgeObjectRetain(v4);
  swift_retain(v6);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[12] = v9;
  *v9 = v0;
  v9[1] = sub_1000D7224;
  return AsyncCoreDataContainer.performWrite<A>(_:)();
}

uint64_t sub_1000D7224()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000D7298;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 88));
    swift_release(v5);
    v4 = sub_100097CBC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D7298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000003ALL, 0x8000000100135AA0, 362);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D73D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  void (*v39)(char *, _QWORD, uint64_t);
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;

  v12 = type metadata accessor for DIPError.Code(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v49 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000D67C();
  if (!v6)
  {
    v46 = a1;
    v16 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRelease(v15);
    if (v16)
    {
      v47 = 0;
      v48 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v48);
      v47 = 0xD000000000000016;
      v48 = 0x8000000100135AE0;
      v17 = Data.base16EncodedString()();
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._countAndFlagsBits = 0x79646165726C6120;
      v19._object = (void *)0xEF73747369786520;
      String.append(_:)(v19);
      v20 = v47;
      v21 = v48;
      v22 = *(void (**)(char *, _QWORD, uint64_t))(v13 + 104);
      v23 = v49;
      v22(v49, enum case for DIPError.Code.idcsPublicKeyIdentifierAlreadyExists(_:), v12);
      v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v25 = type metadata accessor for DIPError(0);
      v26 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v25, v26, 0, 0);
      v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v20, v21, 0, v23, 0, v24, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000003ALL, 0x8000000100135AA0, 340);
      swift_willThrow(v27);
      return;
    }
    v28 = sub_1000093E8(a5, a6);
    v29 = (uint64_t)sub_1000C4E40();
    v30 = v29;
    if ((unint64_t)v29 >> 62)
    {
      if (v29 >= 0)
        v29 &= 0xFFFFFFFFFFFFFF8uLL;
      v31 = _CocoaArrayWrapper.endIndex.getter(v29);
    }
    else
    {
      v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v30);
    if (v31 > 1)
    {
      v39 = *(void (**)(char *, _QWORD, uint64_t))(v13 + 104);
      v40 = v49;
      v39(v49, enum case for DIPError.Code.featureNotSupported(_:), v12);
      v41 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v42 = type metadata accessor for DIPError(0);
      v43 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v42, v43, 0, 0);
      v44 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000059, 0x8000000100135B00, 0, v40, 0, v41, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000003ALL, 0x8000000100135AA0, 350);
      swift_willThrow(v44);

      return;
    }
    v32 = sub_100105910(a2, a3);
    v33 = type metadata accessor for StoredCryptoKey(0);
    v34 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v33)), "initWithContext:", *(_QWORD *)(v46 + 16));
    sub_1000CA540(v32);
    v35 = (uint64_t)sub_1000C4E40();
    v36 = v35;
    if ((unint64_t)v35 >> 62)
    {
      if (v35 >= 0)
        v35 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v35))
        goto LABEL_9;
    }
    else if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      if ((v36 & 0xC000000000000001) != 0)
      {
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
      }
      else
      {
        if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v37 = *(id *)(v36 + 32);
      }
      v38 = v37;
      goto LABEL_21;
    }
    v38 = 0;
LABEL_21:
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v34, "setPayload:", v38);

    objc_msgSend(v28, "addCryptoKeysObject:", v34);
    sub_1000091F8();

    swift_release(v32);
  }
}

uint64_t sub_1000D7850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D78B4, 0, 0);
}

uint64_t sub_1000D78B4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[4];
  v4 = (_QWORD *)swift_allocObject(&unk_10016ABC0, 40, 7);
  v0[10] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  sub_100005A38(v3, v2);
  v5 = swift_allocObject(&unk_10016ABE8, 32, 7);
  v0[11] = v5;
  *(_QWORD *)(v5 + 16) = sub_1000D7E7C;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v1);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[12] = v7;
  v8 = sub_100008E84(&qword_100174860);
  *v7 = v0;
  v7[1] = sub_1000D79B0;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_100039B5C, v5, v8);
}

uint64_t sub_1000D79B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000D7A54, 0, 0);
  v5 = *(_QWORD *)(v3 + 80);
  v6 = *(_QWORD *)(v3 + 72);
  swift_release(*(_QWORD *)(v3 + 88));
  swift_release(v5);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v7, v8);
}

uint64_t sub_1000D7A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000064, 0x80000001001359F0, 0xD000000000000030, 0x8000000100135A60, 383);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D7B90(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  Swift::String v28;
  os_log_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint8_t *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)sub_10000D67C();
  if (!v4)
  {
    v13 = v12;
    v35 = a1;
    v36 = v9;
    v37 = a4;
    if (v12[2])
    {
      v15 = v12[4];
      v14 = (void *)v12[5];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v13);

      v30 = v37;
      *v37 = v15;
      v30[1] = (uint64_t)v14;
    }
    else
    {
      v16 = swift_bridgeObjectRelease(v12);
      defaultLogger()(v16);
      v17 = a2;
      v18 = v35;
      sub_100005A38(v35, v17);
      v19 = sub_100005A38(v18, v17);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter();
      v22 = os_log_type_enabled(v20, v21);
      v23 = v8;
      v24 = v36;
      if (v22)
      {
        v34 = v20;
        v25 = swift_slowAlloc(12, -1);
        v38 = v23;
        v26 = (uint8_t *)v25;
        v41 = swift_slowAlloc(32, -1);
        v27 = v41;
        *(_DWORD *)v26 = 136315138;
        v33 = v26 + 4;
        v28 = Data.base16EncodedString()();
        v39 = sub_10003FA80(v28._countAndFlagsBits, (unint64_t)v28._object, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v33);
        swift_bridgeObjectRelease(v28._object);
        sub_100005AB0(v18, v17);
        sub_100005AB0(v18, v17);
        v29 = v34;
        _os_log_impl((void *)&_mh_execute_header, v34, v21, "No credentials found with public key identifier %s", v26, 0xCu);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v38);
      }
      else
      {
        sub_100005AB0(v18, v17);
        sub_100005AB0(v18, v17);

        (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v23);
      }
      v31 = v37;
      *v37 = 0;
      v31[1] = 0;
    }
  }
}

uint64_t sub_1000D7E50()
{
  _QWORD *v0;

  sub_100005AB0(v0[2], v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000D7E7C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000D7B90(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

_QWORD *sub_1000D7E98@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1000D7ED4()
{
  _QWORD *v0;

  sub_100005AB0(v0[2], v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000D7F08(uint64_t a1)
{
  uint64_t v1;

  sub_1000D73D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_1000D7F28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  Swift::String v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 1)
  {
    v6 = 0;
  }
  else if (a1 == 2)
  {
    v6 = 1;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v7._countAndFlagsBits = 0xD00000000000004DLL;
    v7._object = (void *)0x8000000100135CF0;
    String.append(_:)(v7);
    v8 = (id)DCCredentialPresentmentAuthPolicyToString(a1);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    v13 = v20;
    v14 = v21;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsInvalidActionForPresentmentAuthPolicy(_:), v2);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v16, v17, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v13, v14, 0, v5, 0, v15, 0xD000000000000064, 0x80000001001359F0, 0xD00000000000001CLL, 0x8000000100135DB0, 43);
    swift_willThrow(v18);
  }
  return v6 & 1;
}

uint64_t sub_1000D8134()
{
  return sub_1000D8244(48);
}

uint64_t sub_1000D813C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_100177844);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_10000935C;
  return sub_1000D2638(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1000D81BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100177854);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100177850 + dword_100177850))(a1, a2, v6);
}

uint64_t sub_1000D823C()
{
  return sub_1000D8244(40);
}

uint64_t sub_1000D8244(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

void sub_1000D827C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000D6220(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_1000D8298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100177870);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000D82E0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  swift_bridgeObjectRetain(a1[1]);
  sub_100005A38(v2, v3);
  sub_100005A38(v4, v5);
  sub_100005A38(v6, v7);
  sub_100005A38(v8, v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000D8374(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_100177870);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D83B4()
{
  uint64_t v0;

  return sub_1000D63C4(*(uint64_t **)(v0 + 16));
}

unint64_t sub_1000D83BC()
{
  uint64_t v0;

  return sub_1000D6494(*(uint64_t **)(v0 + 16));
}

unint64_t sub_1000D83C4()
{
  uint64_t v0;

  return sub_1000D6564(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

_QWORD *sub_1000D83D0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  swift_bridgeObjectRelease(a1[1]);
  sub_100005AB0(v2, v3);
  sub_100005AB0(v4, v5);
  sub_100005AB0(v6, v7);
  sub_100005AB0(v8, v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_1000D8464()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100005AB0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 80, 7);
}

void sub_1000D84A8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1000D5974(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), a1);
}

uint64_t sub_1000D84CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000D8500(unint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000D6664(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_1000D851C(char *a1@<X8>)
{
  sub_1000D674C(a1);
}

void sub_1000D8534(uint64_t *a1@<X8>)
{
  sub_1000D6D18(a1);
}

void sub_1000D854C(_QWORD *a1@<X8>)
{
  sub_1000D6918(a1);
}

unint64_t sub_1000D8564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100177890;
  if (!qword_100177890)
  {
    v1 = objc_opt_self(DCCredentialAuthACL);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100177890);
  }
  return result;
}

uint64_t destroy for KeyLookupInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  return sub_100005AB0(a1[2], a1[3]);
}

_QWORD *initializeWithCopy for KeyLookupInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain(v3);
  sub_100005A38(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

_QWORD *assignWithCopy for KeyLookupInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  sub_100005A38(v7, v6);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  sub_100005AB0(v8, v9);
  return a1;
}

_QWORD *assignWithTake for KeyLookupInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100005AB0(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyLookupInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyLookupInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s7KSKInfoVMa()
{
  return &_s7KSKInfoVN;
}

void destroy for ProgenitorKeyMetadata(uint64_t a1)
{
  sub_100005AB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));

}

uint64_t *_s7idcredd21ProgenitorKeyMetadataVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = (void *)a2[2];
  a1[2] = (uint64_t)v6;
  v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for ProgenitorKeyMetadata(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *a2;
  v5 = a2[1];
  sub_100005A38(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100005AB0(v6, v7);
  v8 = (void *)a2[2];
  v9 = (void *)a1[2];
  a1[2] = (uint64_t)v8;
  v10 = v8;

  return a1;
}

uint64_t *assignWithTake for ProgenitorKeyMetadata(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100005AB0(v4, v5);
  v6 = (void *)a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for ProgenitorKeyMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProgenitorKeyMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgenitorKeyMetadata()
{
  return &type metadata for ProgenitorKeyMetadata;
}

uint64_t destroy for PresentmentKeyMetadata(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  sub_100005AB0(a1[2], a1[3]);
  sub_100005AB0(a1[4], a1[5]);
  sub_100005AB0(a1[6], a1[7]);
  sub_100005AB0(a1[8], a1[9]);
  return swift_release(a1[10]);
}

_QWORD *initializeWithCopy for PresentmentKeyMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain(v4);
  sub_100005A38(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  sub_100005A38(v7, v8);
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  v10 = a2[7];
  sub_100005A38(v9, v10);
  a1[6] = v9;
  a1[7] = v10;
  v11 = a2[8];
  v12 = a2[9];
  sub_100005A38(v11, v12);
  a1[8] = v11;
  a1[9] = v12;
  v13 = a2[10];
  a1[10] = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *assignWithCopy for PresentmentKeyMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a2[3];
  sub_100005A38(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_100005AB0(v8, v9);
  v10 = a2[4];
  v11 = a2[5];
  sub_100005A38(v10, v11);
  v12 = a1[4];
  v13 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  sub_100005AB0(v12, v13);
  v14 = a2[6];
  v15 = a2[7];
  sub_100005A38(v14, v15);
  v16 = a1[6];
  v17 = a1[7];
  a1[6] = v14;
  a1[7] = v15;
  sub_100005AB0(v16, v17);
  v18 = a2[8];
  v19 = a2[9];
  sub_100005A38(v18, v19);
  v20 = a1[8];
  v21 = a1[9];
  a1[8] = v18;
  a1[9] = v19;
  sub_100005AB0(v20, v21);
  v22 = a2[10];
  v23 = a1[10];
  a1[10] = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

__n128 initializeWithTake for PresentmentKeyMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

_QWORD *assignWithTake for PresentmentKeyMetadata(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100005AB0(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100005AB0(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100005AB0(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_100005AB0(v12, v13);
  v14 = a1[10];
  a1[10] = *(_QWORD *)(a2 + 80);
  swift_release(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentmentKeyMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentmentKeyMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentKeyMetadata()
{
  return &type metadata for PresentmentKeyMetadata;
}

uint64_t sub_1000D8C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_1001754B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075E88(v0, qword_1001778A0);
  v7 = sub_100075EC8(v0, (uint64_t)qword_1001778A0);
  v8 = type metadata accessor for AsyncCoreDataStore(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "URLForResource:withExtension:", v11, v12);

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v14 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v14(v6, v3, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0);
    if ((_DWORD)result != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(v7, v6, v0);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D8E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v1 = type metadata accessor for AsyncCoreDataStore.StoreType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v25 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v25 - v14;
  static URL.libraryDirectory.getter(v13);
  URL.appendingPathComponent(_:isDirectory:)(0x64646572636469, 0xE700000000000000, 1);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  URL.appendingPathComponent(_:)(0x6C71732E73636469, 0xEB00000000657469);
  v26 = v16;
  v16(v12, v5);
  if (qword_100174410 != -1)
    swift_once(&qword_100174410, sub_1000D8C30);
  v17 = sub_100075EC8(v5, (uint64_t)qword_1001778A0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18(v12, v17, v5);
  v18(v9, (uint64_t)v15, v5);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v20 = v2;
  v21 = v27;
  v19(v4, v27, v1);
  v22 = type metadata accessor for AsyncCoreDataStore(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = AsyncCoreDataStore.init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)(1935893609, 0xE400000000000000, v12, v9, v4, NSURLFileProtectionCompleteUntilFirstUserAuthentication);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v1);
  v26(v15, v5);
  result = v28;
  *(_QWORD *)(v28 + 16) = v23;
  return result;
}

uint64_t type metadata accessor for IDCSCoreDataStore()
{
  return objc_opt_self(_TtC7idcredd17IDCSCoreDataStore);
}

uint64_t destroy for JapanNationalIDRequestValidator(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *initializeWithCopy for JapanNationalIDRequestValidator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for JapanNationalIDRequestValidator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for JapanNationalIDRequestValidator(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for JapanNationalIDRequestValidator()
{
  return &type metadata for JapanNationalIDRequestValidator;
}

void sub_1000D91B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = type metadata accessor for Logger(0);
  v9 = *(void (**)(char *, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v50 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  defaultLogger()(v12);
  swift_bridgeObjectRetain_n(a2, 2);
  v15 = swift_bridgeObjectRetain_n(a3, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v51 = v8;
  if (v18)
  {
    v48 = a1;
    v19 = swift_slowAlloc(12, -1);
    v49 = v9;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v53 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v52 = sub_10003FA80(v48, a2, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v20 + 4);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Validating doctype %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v22 = (void (*)(char *, uint64_t))*((_QWORD *)v49 + 1);
    v23 = v14;
    v24 = v51;
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    v22 = (void (*)(char *, uint64_t))*((_QWORD *)v9 + 1);
    v23 = v14;
    v24 = v8;
  }
  v49 = v22;
  v22(v23, v24);
  v25 = a3 + 64;
  v26 = 1 << *(_BYTE *)(a3 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(a3 + 64);
  v29 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v30 = 0;
  if (!v28)
    goto LABEL_8;
LABEL_7:
  v31 = __clz(__rbit64(v28));
  v28 &= v28 - 1;
  for (i = v31 | (v30 << 6); ; i = __clz(__rbit64(v34)) + (v30 << 6))
  {
    v36 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * i);
    v38 = *v36;
    v37 = v36[1];
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v39);
    v40 = sub_1000D993C(v38, v37, v39, a4);
    v41 = swift_bridgeObjectRelease(v39);
    if ((v40 & 1) == 0)
      break;
    swift_bridgeObjectRelease(v37);
    if (v28)
      goto LABEL_7;
LABEL_8:
    v33 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return;
    }
    if (v33 >= v29)
      goto LABEL_27;
    v34 = *(_QWORD *)(v25 + 8 * v33);
    ++v30;
    if (!v34)
    {
      v30 = v33 + 1;
      if (v33 + 1 >= v29)
        goto LABEL_27;
      v34 = *(_QWORD *)(v25 + 8 * v30);
      if (!v34)
      {
        v30 = v33 + 2;
        if (v33 + 2 >= v29)
          goto LABEL_27;
        v34 = *(_QWORD *)(v25 + 8 * v30);
        if (!v34)
        {
          v35 = v33 + 3;
          if (v35 >= v29)
          {
LABEL_27:
            swift_release(a3);
            return;
          }
          v34 = *(_QWORD *)(v25 + 8 * v35);
          if (!v34)
          {
            while (1)
            {
              v30 = v35 + 1;
              if (__OFADD__(v35, 1))
                goto LABEL_31;
              if (v30 >= v29)
                goto LABEL_27;
              v34 = *(_QWORD *)(v25 + 8 * v30);
              ++v35;
              if (v34)
                goto LABEL_21;
            }
          }
          v30 = v35;
        }
      }
    }
LABEL_21:
    v28 = (v34 - 1) & v34;
  }
  v42 = v50;
  defaultLogger()(v41);
  swift_bridgeObjectRetain(v37);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v53 = v47;
    *(_DWORD *)v46 = 136315138;
    swift_bridgeObjectRetain(v37);
    v52 = sub_10003FA80(v38, v37, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v46 + 4);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Validation for namespace %s has failed", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }

  v49(v42, v51);
  swift_release(a3);
}

void sub_1000D9664()
{
  uint64_t v0;

  sub_1000D91B0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D9670(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for ISO18013KnownNamespaces(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for ISO23220_1_Japan_ElementIdentifier.individualNumber(_:), v9);
  swift_bridgeObjectRetain(a1);
  v14 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v16);
    return 1;
  }
  sub_1000FBC04(v14, v16);
  v18 = v17;
  swift_bridgeObjectRelease(a1);
  v19 = swift_bridgeObjectRelease(v16);
  if ((v18 & 1) == 0)
    return 1;
  v20 = defaultLogger()(v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v32 = v24;
    *(_DWORD *)v23 = 136315138;
    v36 = v24;
    v31 = v23 + 4;
    v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ISO18013KnownNamespaces.iso23220_1_jp(_:), v2);
    v26 = ISO18013KnownNamespaces.rawValue.getter(v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v35 = sub_10003FA80(v26, v28, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unauthorized reader requested restricted element in %s", v23, 0xCu);
    v29 = v32;
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
  return 0;
}

uint64_t sub_1000D993C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v27 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ISO18013KnownNamespaces(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for ISO18013KnownNamespaces.iso23220_1_jp(_:), v10);
  v15 = ISO18013KnownNamespaces.rawValue.getter(v14);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v15 == a1 && v17 == a2)
  {
    v20 = swift_bridgeObjectRelease(a2);
    if (a4)
    {
      LOBYTE(v20) = 1;
      return v20 & 1;
    }
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a1, a2, 0);
    swift_bridgeObjectRelease(v17);
    v20 = 1;
    if ((v19 & 1) == 0 || a4)
      return v20 & 1;
  }
  defaultLogger()(v20);
  v21 = swift_bridgeObjectRetain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v30 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a2);
    v29 = sub_10003FA80(a1, a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Validating %s for physical presentments", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
  LOBYTE(v20) = sub_1000D9670(v28);
  return v20 & 1;
}

uint64_t sub_1000D9BD0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D9C34(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

char *sub_1000D9CF8(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  NSString v9;
  id v10;
  objc_class *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_super v20;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone((Class)NSXPCListener);
  v8 = v1;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v7, "initWithMachServiceName:", v9);

  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener] = v10;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_dataContainer] = a1;
  swift_retain(a1);

  v11 = (objc_class *)type metadata accessor for CredentialStoreListener();
  v20.receiver = v8;
  v20.super_class = v11;
  v12 = (char *)objc_msgSendSuper2(&v20, "init");
  v13 = *(void **)&v12[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener];
  v14 = v12;
  objc_msgSend(v13, "setDelegate:", v14);
  v15 = defaultLogger()(objc_msgSend(v13, "resume"));
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Credential store listener is started", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }
  swift_release(a1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

id sub_1000D9EC8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Credential store listener is tearing down", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7idcredd23CredentialStoreListener_xpcListener], "invalidate");
  v11 = (objc_class *)type metadata accessor for CredentialStoreListener();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_1000DA04C()
{
  return sub_10001A008("credential store connection invalidated");
}

uint64_t sub_1000DA058()
{
  return sub_10001A008("credential store connection interrupted");
}

uint64_t type metadata accessor for CredentialStoreListener()
{
  return objc_opt_self(_TtC7idcredd23CredentialStoreListener);
}

id sub_1000DA10C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  objc_class *v11;
  objc_super v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = defaultLogger()(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Destroying CredentialStoreSessionProxy", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v11 = (objc_class *)type metadata accessor for CredentialStoreSessionProxy();
  v13.receiver = v1;
  v13.super_class = v11;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_1000DA328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v9);
  v4[14] = swift_task_alloc(v9);
  v4[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000DA3D0, 0, 0);
}

uint64_t sub_1000DA3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CredentialStoreSessionProxy createCredential", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 120);
  v7 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(void **)(v1 + 48);

  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v1 + 128) = v11;
  v12 = v11(v6, v7);
  defaultLogger()(v12);
  v13 = v10;
  swift_bridgeObjectRetain_n(v9, 2);
  v14 = v13;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = *(_QWORD *)(v1 + 32);
    v49 = v11;
    v51 = *(_QWORD *)(v1 + 48);
    v18 = *(_QWORD *)(v1 + 40);
    v19 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v54[0] = v53;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain(v18);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v17, v18, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v19 + 4);
    swift_bridgeObjectRelease_n(v18, 3);
    *(_WORD *)(v19 + 12) = 2080;
    if (v51)
    {
      v20 = objc_msgSend(v14, "description");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

    }
    else
    {
      v23 = 0xE500000000000000;
      v21 = 0x3E6C696E3CLL;
    }
    v11 = v49;
    v50 = *(_QWORD *)(v1 + 88);
    v52 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 24) = sub_10003FA80(v21, v23, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v19 + 14);
    swift_bridgeObjectRelease(v23);

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "create credential options: partition = %s, options = (%s)", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v27 = v50;
    v26 = v52;
  }
  else
  {
    v24 = *(_QWORD *)(v1 + 112);
    v25 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 40), 2);

    v26 = v24;
    v27 = v25;
  }
  v11(v26, v27);
  sub_1000E8D80();
  v38 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 136) = v38;
  if (v38)
  {
    v39 = dword_1001770CC;
    swift_retain(v38);
    v40 = (_QWORD *)swift_task_alloc(v39);
    *(_QWORD *)(v1 + 144) = v40;
    *v40 = v1;
    v40[1] = sub_1000DA8CC;
    return sub_10008C798(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  }
  else
  {
    v42 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v42, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v44 = type metadata accessor for DIPError(0);
    v45 = sub_10000745C();
    v46 = swift_allocError(v44, v45, 0, 0);
    v47 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v42, 0, v43, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000026, 0x8000000100136C10, 112);
    v48 = swift_willThrow(v47);
    v29 = *(_QWORD *)(v1 + 120);
    v28 = *(void (**)(uint64_t, uint64_t))(v1 + 128);
    v30 = *(_QWORD *)(v1 + 104);
    v31 = *(_QWORD *)(v1 + 112);
    v33 = *(_QWORD *)(v1 + 80);
    v32 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v48);
    DIPRecordError(_:message:log:)(v46, 0, 0xE000000000000000, v30);
    v28(v30, v32);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v36 = v35;
    static NSError.mapFromError(_:domain:mapper:)(v46, v34, v35, sub_100120718, 0);
    v37 = swift_bridgeObjectRelease(v36);
    swift_willThrow(v37);
    swift_errorRelease(v46);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DA8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 144);
  *(_QWORD *)(*v3 + 152) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000DA9B0;
  }
  else
  {
    *(_QWORD *)(v6 + 160) = a2;
    *(_QWORD *)(v6 + 168) = a1;
    v8 = sub_1000DA944;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000DA944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160));
}

uint64_t sub_1000DA9B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v8);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v11 = v10;
  static NSError.mapFromError(_:domain:mapper:)(v2, v9, v10, sub_100120718, 0);
  v12 = swift_bridgeObjectRelease(v11);
  swift_willThrow(v12);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DABF4(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[5] = v9;
  v11 = dword_100177A4C;
  v12 = a2;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v11);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_1000DAC94;
  return sub_1000DA328(v8, v10, (uint64_t)a2);
}

uint64_t sub_1000DAC94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v6 = *v3;
  v8 = *(_QWORD *)(*v3 + 40);
  v7 = *(_QWORD *)(*v3 + 48);
  v10 = *(void **)(*v3 + 16);
  v9 = *(void **)(*v3 + 24);
  v11 = *v3;
  swift_task_dealloc(v7);

  swift_bridgeObjectRelease(v8);
  if (v4)
  {
    v12 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    v13 = 0;
    v14 = (void *)v12;
  }
  else
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v12 = 0;
    v14 = v13;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 32);
  ((void (**)(_QWORD, NSString, uint64_t))v15)[2](v15, v13, v12);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_1000DAD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DAE14, 0, 0);
}

uint64_t sub_1000DAE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy generateKeySigningKey for credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v23;
  if (v23)
  {
    v24 = dword_10017893C;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 120) = v25;
    *v25 = v1;
    v25[1] = sub_1000DB1D4;
    return sub_1001150EC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000025, 0x8000000100136BE0, 130);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 96);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DB1D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000DB2A8;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_1000DB248;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DB248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

uint64_t sub_1000DB2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DB4DC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A54;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000DB568;
  return sub_1000DAD78(v6, v8);
}

uint64_t sub_1000DB568(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v6 = *(_QWORD *)(*v2 + 32);
  v5 = *(_QWORD *)(*v2 + 40);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 24);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](*(_QWORD *)(v8 + 24), a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000DB634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DB6D0, 0, 0);
}

uint64_t sub_1000DB6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  char v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v38 = *(_QWORD *)(v1 + 80);
    v39 = *(_QWORD *)(v1 + 72);
    v40 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v41 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy isAccountKeySigningKeyAvailable for accountKeyIdentifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v10(v40, v39);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  sub_1000E8D80();
  v22 = *(_QWORD *)(v1 + 40);
  v23 = *(_QWORD *)(v22 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  if (v23)
  {
    v25 = *(_QWORD *)(v1 + 88);
    v24 = *(_QWORD *)(v1 + 96);
    v26 = *(_QWORD *)(v1 + 64);
    v27 = *(_QWORD **)(v1 + 24);
    v28 = *(void **)(v1 + 32);
    swift_retain(*(_QWORD *)(v22 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage));
    v29 = sub_1000FD89C(v27, v28);
    swift_release(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(v29 & 1);
  }
  else
  {
    v31 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v31, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_10000745C();
    v35 = swift_allocError(v33, v34, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v31, 0, v32, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000039, 0x8000000100136BA0, 148);
    v37 = swift_willThrow(v36);
    v14 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 64);
    v16 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v37);
    DIPRecordError(_:message:log:)(v35, 0, 0xE000000000000000, v14);
    v10(v14, v16);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v20 = v19;
    static NSError.mapFromError(_:domain:mapper:)(v35, v18, v19, sub_100120718, 0);
    v21 = swift_bridgeObjectRelease(v20);
    swift_willThrow(v21);
    swift_errorRelease(v35);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_1000DBBC4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A5C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000DBC50;
  return sub_1000DB634(v6, v8);
}

uint64_t sub_1000DBC50(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v5 = *(_QWORD *)(*v2 + 32);
  v4 = *(_QWORD *)(*v2 + 40);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v4);

  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(v7 + 24);
  if (v1)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v9);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(v7 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v7 + 24));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000DBD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DBDA8, 0, 0);
}

uint64_t sub_1000DBDA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v41 = *(_QWORD *)(v1 + 80);
    v42 = *(_QWORD *)(v1 + 72);
    v43 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v44 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy createAccountKeySigningKey for accountKeyIdentifier: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v10(v43, v42);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  sub_1000E8D80();
  v14 = *(_QWORD *)(v1 + 40);
  v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  if (v15)
  {
    v16 = *(_QWORD *)(v1 + 24);
    v17 = *(_QWORD *)(v1 + 32);
    swift_retain(*(_QWORD *)(v14 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage));
    v18 = sub_1000FDC88(v16, v17);
    v20 = v19;
    v36 = sub_100016BBC(v18, v19);
    v38 = *(_QWORD *)(v1 + 88);
    v37 = *(_QWORD *)(v1 + 96);
    v39 = *(_QWORD *)(v1 + 64);
    sub_100005AB0(v18, v20);
    swift_release(v15);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v36);
  }
  else
  {
    v21 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v21, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v21, 0, v22, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000034, 0x8000000100136B60, 163);
    v27 = swift_willThrow(v26);
    v28 = *(_QWORD *)(v1 + 88);
    v29 = *(_QWORD *)(v1 + 96);
    v31 = *(_QWORD *)(v1 + 64);
    v30 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v27);
    DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v28);
    v10(v28, v30);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v34 = v33;
    static NSError.mapFromError(_:domain:mapper:)(v25, v32, v33, sub_100120718, 0);
    v35 = swift_bridgeObjectRelease(v34);
    swift_willThrow(v35);
    swift_errorRelease(v25);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DC2FC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A64;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFE0;
  return sub_1000DBD0C(v6, v8);
}

uint64_t sub_1000DC388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DC424, 0, 0);
}

uint64_t sub_1000DC424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v47 = *(_QWORD *)(v1 + 80);
    v48 = *(_QWORD *)(v1 + 72);
    v49 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v50 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "retrieveAccountKeySigningKey for label: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v10(v49, v48);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  sub_1000E8D80();
  v14 = *(_QWORD *)(v1 + 40);
  v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  if (v15)
  {
    v16 = *(_QWORD **)(v1 + 24);
    v17 = *(_QWORD *)(v1 + 32);
    swift_retain(*(_QWORD *)(v14 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage));
    v18 = sub_1000FDFE8(v16, v17);
    v20 = v19;
    if (v19 >> 60 != 15)
    {
      v32 = v18;
      v42 = sub_100016BBC(v18, v19);
      v44 = *(_QWORD *)(v1 + 88);
      v43 = *(_QWORD *)(v1 + 96);
      v45 = *(_QWORD *)(v1 + 64);
      sub_10000B164(v32, v20);
      swift_release(v15);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v42);
    }
    v21 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v21, enum case for DIPError.Code.accountKeySigningKeyDoesntExist(_:), *(_QWORD *)(v1 + 48));
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x8000000100136B30, 0, v21, 0, v22, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000036, 0x8000000100136AF0, 181);
    swift_willThrow(v26);
    v33 = swift_release(v15);
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v25 = swift_allocError(v29, v30, 0, 0);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000036, 0x8000000100136AF0, 178);
    v33 = swift_willThrow(v31);
  }
  v34 = *(_QWORD *)(v1 + 88);
  v35 = *(_QWORD *)(v1 + 96);
  v37 = *(_QWORD *)(v1 + 64);
  v36 = *(_QWORD *)(v1 + 72);
  defaultLogger()(v33);
  DIPRecordError(_:message:log:)(v25, 0, 0xE000000000000000, v34);
  v10(v34, v36);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v40 = v39;
  static NSError.mapFromError(_:domain:mapper:)(v25, v38, v39, sub_100120718, 0);
  v41 = swift_bridgeObjectRelease(v40);
  swift_willThrow(v41);
  swift_errorRelease(v25);
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000DCA4C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A6C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFE0;
  return sub_1000DC388(v6, v8);
}

uint64_t sub_1000DCAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v10);
  v5[14] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000DCB78, 0, 0);
}

uint64_t sub_1000DCB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 96);
    v35 = *(_QWORD *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 112);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy generateAccountKeyAuthorization for credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(_QWORD *)(v1 + 88);
    v13 = *(_QWORD *)(v1 + 96);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 120) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 128) = v23;
  if (v23)
  {
    v24 = dword_100174B94;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 136) = v25;
    *v25 = v1;
    v25[1] = sub_1000DCF44;
    return sub_10001718C(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000044, 0x8000000100136AA0, 197);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 112);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v16 = *(_QWORD *)(v1 + 104);
    v18 = *(_QWORD *)(v1 + 80);
    v17 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DCF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)();

  v10 = *(_QWORD **)v5;
  v11 = *(_QWORD *)(*(_QWORD *)v5 + 136);
  *(_QWORD *)(*(_QWORD *)v5 + 144) = v4;
  swift_task_dealloc(v11);
  if (v4)
  {
    v12 = sub_1000DD034;
  }
  else
  {
    v10[19] = a4;
    v10[20] = a3;
    v10[21] = a2;
    v10[22] = a1;
    v12 = sub_1000DCFD0;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_1000DCFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000DD034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 128));
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DD270(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_100177A74;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000DD324;
  return sub_1000DCAD8(v8, v10, v11, v13);
}

uint64_t sub_1000DD324(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (**v16)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v17;
  Class isa;
  Class v19;

  v6 = v4;
  v12 = *(_QWORD *)(*v5 + 40);
  v11 = *(_QWORD *)(*v5 + 48);
  v13 = *(_QWORD *)(*v5 + 32);
  v14 = *(void **)(*v5 + 16);
  v15 = *v5;
  swift_task_dealloc(v11);

  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  v16 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(v15 + 24);
  if (v6)
  {
    v17 = (void *)_convertErrorToNSError(_:)(v6);
    swift_errorRelease(v6);
    ((void (**)(_QWORD, _QWORD, _QWORD, void *))v16)[2](v16, 0, 0, v17);

    _Block_release(v16);
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    v19 = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class, Class, _QWORD))v16)[2](v16, isa, v19, 0);

    _Block_release(v16);
    sub_100005AB0(a1, a2);
    sub_100005AB0(a3, a4);
  }
  return (*(uint64_t (**)(void))(v15 + 8))();
}

uint64_t sub_1000DD45C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DD4F8, 0, 0);
}

uint64_t sub_1000DD4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy generateDeviceEncryptionKey for credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v23;
  if (v23)
  {
    v24 = dword_10017770C;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 120) = v25;
    *v25 = v1;
    v25[1] = sub_1000DD8C0;
    return sub_1000C1E90(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000002BLL, 0x8000000100136A70, 213);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 96);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DD8C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000EAFD4;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_1000EAFEC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DDA64(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A7C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFE0;
  return sub_1000DD45C(v6, v8);
}

uint64_t sub_1000DDAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000DDB8C, 0, 0);
}

uint64_t sub_1000DDB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy generatePresentmentKey for credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v23;
  if (v23)
  {
    v24 = dword_10017789C;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 120) = v25;
    *v25 = v1;
    v25[1] = sub_1000DD8C0;
    return sub_1000D0014(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000026, 0x8000000100136A40, 231);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 96);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DE07C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177A84;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFE0;
  return sub_1000DDAF0(v6, v8);
}

uint64_t sub_1000DE108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v9);
  v4[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000DE1A4, 0, 0);
}

uint64_t sub_1000DE1A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v3 = v1[5];
  defaultLogger()(a1);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v37 = v1[11];
    v38 = v1[14];
    v8 = v1[5];
    v7 = v1[6];
    v35 = v1[4];
    v36 = v1[12];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v1[2] = v7;
    v39 = v10;
    *(_DWORD *)v9 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v9 + 4);
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain(v8);
    v1[3] = sub_10003FA80(v35, v8, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v9 + 14);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CredentialStoreSessionProxy generatePresentmentKeys numKeys=%ld for credential identifier %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v11(v38, v37);
  }
  else
  {
    v12 = v1[14];
    v13 = v2[11];
    v14 = v2[12];
    swift_bridgeObjectRelease_n(v2[5], 2);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  v2[15] = v11;
  sub_1000E8D80();
  v24 = *(_QWORD *)(v2[7] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  v2[16] = v24;
  if (v24)
  {
    v25 = dword_10017783C;
    swift_retain(v24);
    v26 = (_QWORD *)swift_task_alloc(v25);
    v2[17] = v26;
    *v26 = v2;
    v26[1] = sub_1000DE598;
    return sub_1000D04E4(v2[4], v2[5], v2[6]);
  }
  else
  {
    v28 = v2[10];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v2[9] + 104))(v28, enum case for DIPError.Code.badLogic(_:), v2[8]);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    v32 = swift_allocError(v30, v31, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v28, 0, v29, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000002FLL, 0x8000000100136A10, 248);
    v34 = swift_willThrow(v33);
    v16 = v2[14];
    v15 = (void (*)(uint64_t, uint64_t))v2[15];
    v17 = v2[13];
    v19 = v2[10];
    v18 = v2[11];
    defaultLogger()(v34);
    DIPRecordError(_:message:log:)(v32, 0, 0xE000000000000000, v17);
    v15(v17, v18);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v22 = v21;
    static NSError.mapFromError(_:domain:mapper:)(v32, v20, v21, sub_100120718, 0);
    v23 = swift_bridgeObjectRelease(v22);
    swift_willThrow(v23);
    swift_errorRelease(v32);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    return ((uint64_t (*)(void))v2[1])();
  }
}

uint64_t sub_1000DE598(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000DD034;
  }
  else
  {
    *(_QWORD *)(v4 + 152) = a1;
    v6 = sub_1000DE60C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000DE60C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1000DE7A0(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = dword_100177A8C;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[5] = v12;
  *v12 = v4;
  v12[1] = sub_1000DE83C;
  return sub_1000DE108(v8, v10, a2);
}

uint64_t sub_1000DE83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_10000DA34(0, &qword_100177E78, DCCredentialCryptoKey_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000DE928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v10);
  v5[14] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000DE9C8, 0, 0);
}

uint64_t sub_1000DE9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 96);
    v35 = *(_QWORD *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 112);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy authorizeDeviceKeySigningKey with credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(_QWORD *)(v1 + 88);
    v13 = *(_QWORD *)(v1 + 96);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 120) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 128) = v23;
  if (v23)
  {
    v24 = dword_100174B64;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 136) = v25;
    *v25 = v1;
    v25[1] = sub_1000DED94;
    return sub_100018A4C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000040, 0x80000001001369C0, 265);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 112);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v16 = *(_QWORD *)(v1 + 104);
    v18 = *(_QWORD *)(v1 + 80);
    v17 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DED94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 136);
  *(_QWORD *)(*v3 + 144) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000DD034;
  }
  else
  {
    *(_QWORD *)(v6 + 152) = a2;
    *(_QWORD *)(v6 + 160) = a1;
    v8 = sub_1000DEE0C;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000DEE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000DEFA4(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_100177A94;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000DF058;
  return sub_1000DE928(v8, v10, v11, v13);
}

uint64_t sub_1000DF058(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v9 = *(_QWORD *)(*v3 + 40);
  v8 = *(_QWORD *)(*v3 + 48);
  v10 = *(_QWORD *)(*v3 + 32);
  v11 = *(void **)(*v3 + 16);
  v12 = *v3;
  swift_task_dealloc(v8);

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  if (v4)
  {
    v13 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v15 = (void *)v13;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100005AB0(a1, a2);
    v13 = 0;
    v15 = isa;
  }
  v16 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v16)[2](v16, isa, v13);

  _Block_release(v16);
  return (*(uint64_t (**)(void))(v12 + 8))();
}

uint64_t sub_1000DF148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v10);
  v5[14] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000DF1E8, 0, 0);
}

uint64_t sub_1000DF1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 96);
    v35 = *(_QWORD *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 112);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy authorizeRemoteKeySigningKey with credential identifier %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(_QWORD *)(v1 + 88);
    v13 = *(_QWORD *)(v1 + 96);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 120) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 128) = v23;
  if (v23)
  {
    v24 = dword_100178914;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 136) = v25;
    *v25 = v1;
    v25[1] = sub_1000DF5B4;
    return sub_100116468(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 64));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000037, 0x8000000100136980, 284);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 112);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v16 = *(_QWORD *)(v1 + 104);
    v18 = *(_QWORD *)(v1 + 80);
    v17 = *(_QWORD *)(v1 + 88);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DF5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 136);
  *(_QWORD *)(*v3 + 144) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000EAFDC;
  }
  else
  {
    *(_QWORD *)(v6 + 152) = a2;
    *(_QWORD *)(v6 + 160) = a1;
    v8 = sub_1000EAFE4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000DF764(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = a2;
  a4;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v14 = v13;

  v4[5] = v12;
  v4[6] = v14;
  v15 = (_QWORD *)swift_task_alloc(dword_100177A9C);
  v4[7] = v15;
  *v15 = v4;
  v15[1] = sub_1000DF820;
  return sub_1000DF148(v8, v10, v12, v14);
}

uint64_t sub_1000DF820(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *(void **)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc(v7);

  v10 = *(_QWORD *)(v9 + 32);
  sub_100005AB0(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48));
  swift_bridgeObjectRelease(v10);
  if (v4)
  {
    v11 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v13 = (void *)v11;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100005AB0(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000DF908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v10);
  v5[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000DF9A8, 0, 0);
}

uint64_t sub_1000DF9A8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v3 = *(_QWORD *)(v1 + 48);
  v2 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  swift_bridgeObjectRetain(v4);
  sub_100005A38(v3, v2);
  swift_bridgeObjectRetain(v4);
  v5 = sub_100005A38(v3, v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v41 = *(_QWORD *)(v1 + 104);
    v42 = *(_QWORD *)(v1 + 96);
    v43 = *(_QWORD *)(v1 + 120);
    v9 = *(_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 56);
    v10 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 32);
    v12 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v44[0] = v40;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v11, v10, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v12 + 4);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    v13 = Data.base16EncodedString()();
    *(_QWORD *)(v1 + 24) = sub_10003FA80(v13._countAndFlagsBits, (unint64_t)v13._object, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v12 + 14);
    swift_bridgeObjectRelease(v13._object);
    sub_100005AB0(v9, v8);
    sub_100005AB0(v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CredentialStoreSessionProxy associateExternalPresentmentKey with credential identifier %s public key identifier %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v14 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v14(v43, v42);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 120);
    v16 = *(_QWORD *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 104);
    v19 = *(_QWORD *)(v1 + 48);
    v18 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 40), 2);
    sub_100005AB0(v19, v18);
    sub_100005AB0(v19, v18);

    v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  *(_QWORD *)(v1 + 128) = v14;
  sub_1000E8D80();
  v29 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 136) = v29;
  if (v29)
  {
    v30 = dword_100177834;
    swift_retain(v29);
    v31 = (_QWORD *)swift_task_alloc(v30);
    *(_QWORD *)(v1 + 144) = v31;
    *v31 = v1;
    v31[1] = sub_1000DFE1C;
    return sub_1000D70B8(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  }
  else
  {
    v33 = *(_QWORD *)(v1 + 88);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 80) + 104))(v33, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 72));
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_10000745C();
    v37 = swift_allocError(v35, v36, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v33, 0, v34, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000044, 0x8000000100136930, 302);
    v39 = swift_willThrow(v38);
    v21 = *(_QWORD *)(v1 + 120);
    v20 = *(void (**)(uint64_t, uint64_t))(v1 + 128);
    v22 = *(_QWORD *)(v1 + 112);
    v24 = *(_QWORD *)(v1 + 88);
    v23 = *(_QWORD *)(v1 + 96);
    defaultLogger()(v39);
    DIPRecordError(_:message:log:)(v37, 0, 0xE000000000000000, v22);
    v20(v22, v23);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v27 = v26;
    static NSError.mapFromError(_:domain:mapper:)(v37, v25, v26, sub_100120718, 0);
    v28 = swift_bridgeObjectRelease(v27);
    swift_willThrow(v28);
    swift_errorRelease(v37);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000DFE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000DFEDC;
  else
    v3 = sub_1000DFE80;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000DFE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DFEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E0118(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = a2;
  a4;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v14 = v13;

  v4[5] = v12;
  v4[6] = v14;
  v15 = (_QWORD *)swift_task_alloc(dword_100177AA4);
  v4[7] = v15;
  *v15 = v4;
  v15[1] = sub_1000EAFFC;
  return sub_1000DF908(v8, v10, v12, v14);
}

uint64_t sub_1000E01D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000E0270, 0, 0);
}

uint64_t sub_1000E0270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  Swift::String v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  sub_100005A38(v2, v3);
  v4 = sub_100005A38(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v38 = *(_QWORD *)(v1 + 80);
    v39 = *(_QWORD *)(v1 + 72);
    v40 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 24);
    v7 = *(_QWORD *)(v1 + 32);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v41 = v37;
    *(_DWORD *)v9 = 136315138;
    v10 = Data.base16EncodedString()();
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v10._countAndFlagsBits, (unint64_t)v10._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease(v10._object);
    sub_100005AB0(v8, v7);
    sub_100005AB0(v8, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CredentialStoreSessionProxy credentialIdentifierForPublicKeyIdentifier with public key identifier %s", v9, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v11 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v11(v40, v39);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 96);
    v13 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 80);
    v16 = *(_QWORD *)(v1 + 24);
    v15 = *(_QWORD *)(v1 + 32);
    sub_100005AB0(v16, v15);
    sub_100005AB0(v16, v15);

    v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v11(v12, v13);
  }
  *(_QWORD *)(v1 + 104) = v11;
  sub_1000E8D80();
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v26;
  if (v26)
  {
    v27 = dword_10017782C;
    swift_retain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v1 + 120) = v28;
    *v28 = v1;
    v28[1] = sub_1000E0670;
    return sub_1000D7850(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000002DLL, 0x8000000100136900, 319);
    v36 = swift_willThrow(v35);
    v18 = *(_QWORD *)(v1 + 96);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v19 = *(_QWORD *)(v1 + 88);
    v21 = *(_QWORD *)(v1 + 64);
    v20 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v19);
    v17(v19, v20);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v24 = v23;
    static NSError.mapFromError(_:domain:mapper:)(v34, v22, v23, sub_100120718, 0);
    v25 = swift_bridgeObjectRelease(v24);
    swift_willThrow(v25);
    swift_errorRelease(v34);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E0670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 120);
  *(_QWORD *)(*v3 + 128) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000DB2A8;
  }
  else
  {
    *(_QWORD *)(v6 + 136) = a2;
    *(_QWORD *)(v6 + 144) = a1;
    v8 = sub_10001E9BC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000E0818(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v9 = v8;

  v3[4] = v7;
  v3[5] = v9;
  v10 = (_QWORD *)swift_task_alloc(dword_100177AAC);
  v3[6] = v10;
  *v10 = v3;
  v10[1] = sub_1000E08AC;
  return sub_1000E01D4(v7, v9);
}

uint64_t sub_1000E08AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v6 = *v3;
  v8 = *(_QWORD *)(*v3 + 40);
  v7 = *(_QWORD *)(*v3 + 48);
  v9 = *(_QWORD *)(*v3 + 32);
  v10 = *(void **)(*v3 + 16);
  v11 = *v3;
  swift_task_dealloc(v7);

  sub_100005AB0(v9, v8);
  if (v4)
  {
    a2 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    v12 = 0;
    v13 = (void *)a2;
  }
  else if (a2)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    a2 = 0;
    v13 = v12;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  ((void (**)(_QWORD, NSString, uint64_t))v14)[2](v14, v12, a2);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_1000E09A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[14] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[15] = swift_task_alloc(v11);
  v6[16] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000E0A44, 0, 0);
}

uint64_t sub_1000E0A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v2 = *(_QWORD *)(v1 + 40);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v39 = *(_QWORD *)(v1 + 112);
    v40 = *(_QWORD *)(v1 + 104);
    v41 = *(_QWORD *)(v1 + 128);
    v6 = *(_QWORD *)(v1 + 64);
    v7 = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 32);
    v9 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v42[0] = v38;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v8, v7, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2080;
    v10 = (id)DCCredentialPayloadFormatToString(v6);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    *(_QWORD *)(v1 + 24) = sub_10003FA80(v11, v13, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v9 + 14);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy replacePayload for credential identifier %s (format = %s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v14 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v14(v41, v40);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 128);
    v16 = *(_QWORD *)(v1 + 104);
    v17 = *(_QWORD *)(v1 + 112);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 40), 2);

    v14 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v14(v15, v16);
  }
  *(_QWORD *)(v1 + 136) = v14;
  sub_1000E8D80();
  v27 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 144) = v27;
  if (v27)
  {
    v28 = dword_100175A8C;
    swift_retain(v27);
    v29 = (_QWORD *)swift_task_alloc(v28);
    *(_QWORD *)(v1 + 152) = v29;
    *v29 = v1;
    v29[1] = sub_1000E0E78;
    return sub_100047920(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  }
  else
  {
    v31 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 104))(v31, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 80));
    v32 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v33 = type metadata accessor for DIPError(0);
    v34 = sub_10000745C();
    v35 = swift_allocError(v33, v34, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v31, 0, v32, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000030, 0x80000001001368C0, 337);
    v37 = swift_willThrow(v36);
    v19 = *(_QWORD *)(v1 + 128);
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 136);
    v20 = *(_QWORD *)(v1 + 120);
    v22 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 104);
    defaultLogger()(v37);
    DIPRecordError(_:message:log:)(v35, 0, 0xE000000000000000, v20);
    v18(v20, v21);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v25 = v24;
    static NSError.mapFromError(_:domain:mapper:)(v35, v23, v24, sub_100120718, 0);
    v26 = swift_bridgeObjectRelease(v25);
    swift_willThrow(v26);
    swift_errorRelease(v35);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E0E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000E0F38;
  else
    v3 = sub_1000E0EDC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E0EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E0F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 144));
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1184(uint64_t a1, void *a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v5[4] = v11;
  v13 = a2;
  a5;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v16 = v15;

  v5[5] = v14;
  v5[6] = v16;
  v17 = (_QWORD *)swift_task_alloc(dword_100177AB4);
  v5[7] = v17;
  *v17 = v5;
  v17[1] = sub_1000E1250;
  return sub_1000E09A4(v10, v12, v14, v16, a3);
}

uint64_t sub_1000E1250()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD *)(*v1 + 48);
  v2 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(void **)(*v1 + 16);
  v7 = *v1;
  swift_task_dealloc(v2);

  sub_100005AB0(v4, v3);
  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(v7 + 24);
  if (v0)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(v7 + 24), 0);
  }
  _Block_release(*(const void **)(v7 + 24));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000E1310(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000E13A8, 0, 0);
}

uint64_t sub_1000E13A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 24);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 72);
    v38 = *(_QWORD *)(v1 + 64);
    v39 = *(_QWORD *)(v1 + 88);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v10, v12, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy credentialIdentifiers, partitions = %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v13(v39, v38);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 64);
    v16 = *(_QWORD *)(v1 + 72);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 24), 2);

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 96) = v13;
  sub_1000E8D80();
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 104) = v26;
  if (v26)
  {
    v27 = dword_1001770C4;
    swift_retain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v1 + 112) = v28;
    *v28 = v1;
    v28[1] = sub_1000E1790;
    return sub_10008D1D8(*(_QWORD *)(v1 + 24));
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 56);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 48) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 40));
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000024, 0x8000000100136890, 353);
    v36 = swift_willThrow(v35);
    v18 = *(_QWORD *)(v1 + 88);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 96);
    v19 = *(_QWORD *)(v1 + 80);
    v21 = *(_QWORD *)(v1 + 56);
    v20 = *(_QWORD *)(v1 + 64);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v19);
    v17(v19, v20);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v24 = v23;
    static NSError.mapFromError(_:domain:mapper:)(v34, v22, v23, sub_100120718, 0);
    v25 = swift_bridgeObjectRelease(v24);
    swift_willThrow(v25);
    swift_errorRelease(v34);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E1790(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E1864;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_1000E1804;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E1804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_1000E1864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1A98(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v3[4] = v6;
  v7 = dword_100177ABC;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1000E1B24;
  return sub_1000E1310(v6);
}

uint64_t sub_1000E1B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_100008E84(&qword_100177CB0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000E1C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v9);
  v4[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000E1CB0, 0, 0);
}

uint64_t sub_1000E1CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 24);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 88);
    v38 = *(_QWORD *)(v1 + 80);
    v39 = *(_QWORD *)(v1 + 104);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v10, v12, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy credentialIdentifiersDocType, partitions = %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v13(v39, v38);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 104);
    v15 = *(_QWORD *)(v1 + 80);
    v16 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 24), 2);

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 112) = v13;
  sub_1000E8D80();
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 120) = v26;
  if (v26)
  {
    v27 = dword_10017705C;
    swift_retain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v1 + 128) = v28;
    *v28 = v1;
    v28[1] = sub_1000E20A4;
    return sub_10008BD4C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 56));
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000002CLL, 0x8000000100136860, 370);
    v36 = swift_willThrow(v35);
    v18 = *(_QWORD *)(v1 + 104);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
    v19 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 72);
    v20 = *(_QWORD *)(v1 + 80);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v19);
    v17(v19, v20);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v24 = v23;
    static NSError.mapFromError(_:domain:mapper:)(v34, v22, v23, sub_100120718, 0);
    v25 = swift_bridgeObjectRelease(v24);
    swift_willThrow(v25);
    swift_errorRelease(v34);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E20A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000EAFD8;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_1000EAFF0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E2250(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v4[4] = v8;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v11 = v10;
  v4[5] = v10;
  v12 = dword_100177AC4;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_1000E2304;
  return sub_1000E1C14(v8, v9, v11);
}

uint64_t sub_1000E2304(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v6 = *(_QWORD *)(*v2 + 48);
  v8 = *(_QWORD *)(*v2 + 32);
  v9 = *(void **)(*v2 + 16);
  v10 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  if (v3)
  {
    v11 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v13 = (void *)v11;
  }
  else
  {
    sub_100008E84(&qword_100177CB0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1000E2400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = type metadata accessor for DIPError.Code(0);
  v6[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v6[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[13] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v11);
  v6[15] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000E24A0, 0, 0);
}

uint64_t sub_1000E24A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 24);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 104);
    v38 = *(_QWORD *)(v1 + 96);
    v39 = *(_QWORD *)(v1 + 120);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v10, v12, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy credentialIdentifiersDocTypeRegion, partitions = %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v13(v39, v38);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 120);
    v15 = *(_QWORD *)(v1 + 96);
    v16 = *(_QWORD *)(v1 + 104);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 24), 2);

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 128) = v13;
  sub_1000E8D80();
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 136) = v26;
  if (v26)
  {
    v27 = dword_1001770BC;
    swift_retain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v1 + 144) = v28;
    *v28 = v1;
    v28[1] = sub_1000E2898;
    return sub_10008D884(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 88);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 80) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 72));
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000033, 0x8000000100136820, 391);
    v36 = swift_willThrow(v35);
    v18 = *(_QWORD *)(v1 + 120);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 128);
    v19 = *(_QWORD *)(v1 + 112);
    v21 = *(_QWORD *)(v1 + 88);
    v20 = *(_QWORD *)(v1 + 96);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v19);
    v17(v19, v20);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v24 = v23;
    static NSError.mapFromError(_:domain:mapper:)(v34, v22, v23, sub_100120718, 0);
    v25 = swift_bridgeObjectRelease(v24);
    swift_willThrow(v25);
    swift_errorRelease(v34);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E2898(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000DFEDC;
  }
  else
  {
    *(_QWORD *)(v4 + 160) = a1;
    v6 = sub_1000E290C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E290C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_1000E2AB8(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v5[4] = v10;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v5[5] = v12;
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v5[6] = v15;
  v16 = dword_100177ACC;
  a5;
  v17 = (_QWORD *)swift_task_alloc(v16);
  v5[7] = v17;
  *v17 = v5;
  v17[1] = sub_1000E2BA0;
  return sub_1000E2400(v10, v11, v13, a3, v15);
}

uint64_t sub_1000E2BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 56);
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 48));
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_100008E84(&qword_100177CB0);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000E2CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v9);
  v4[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000E2D40, 0, 0);
}

uint64_t sub_1000E2D40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 24);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 88);
    v38 = *(_QWORD *)(v1 + 80);
    v39 = *(_QWORD *)(v1 + 104);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v10, v12, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy activeRegionsInPartitions, partitions = %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v13(v39, v38);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 104);
    v15 = *(_QWORD *)(v1 + 80);
    v16 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 24), 2);

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  *(_QWORD *)(v1 + 112) = v13;
  sub_1000E8D80();
  v26 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 120) = v26;
  if (v26)
  {
    v27 = dword_1001770AC;
    swift_retain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v1 + 128) = v28;
    *v28 = v1;
    v28[1] = sub_1000E312C;
    return sub_10008DF90(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  }
  else
  {
    v30 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v30, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 56));
    v31 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    v34 = swift_allocError(v32, v33, 0, 0);
    v35 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v30, 0, v31, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000024, 0x80000001001367F0, 410);
    v36 = swift_willThrow(v35);
    v18 = *(_QWORD *)(v1 + 104);
    v17 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
    v19 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 72);
    v20 = *(_QWORD *)(v1 + 80);
    defaultLogger()(v36);
    DIPRecordError(_:message:log:)(v34, 0, 0xE000000000000000, v19);
    v17(v19, v20);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v24 = v23;
    static NSError.mapFromError(_:domain:mapper:)(v34, v22, v23, sub_100120718, 0);
    v25 = swift_bridgeObjectRelease(v24);
    swift_willThrow(v25);
    swift_errorRelease(v34);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E312C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E3200;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_1000E31A0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E31A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000E3200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = swift_release(*(_QWORD *)(v0 + 120));
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v5);
  v3(v5, v7);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v10 = v9;
  static NSError.mapFromError(_:domain:mapper:)(v2, v8, v9, sub_100120718, 0);
  v11 = swift_bridgeObjectRelease(v10);
  swift_willThrow(v11);
  swift_errorRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E343C(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v4[4] = v8;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v11 = v10;
  v4[5] = v10;
  v12 = dword_100177AD4;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_1000E34F0;
  return sub_1000E2CA4(v8, v9, v11);
}

uint64_t sub_1000E34F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v6 = *(_QWORD *)(*v2 + 48);
  v8 = *(_QWORD *)(*v2 + 32);
  v9 = *(void **)(*v2 + 16);
  v10 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  if (v3)
  {
    v11 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v13 = (void *)v11;
  }
  else
  {
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1000E35DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000E3678, 0, 0);
}

uint64_t sub_1000E3678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy deleteCredential, credential identifier = %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v23;
  if (v23)
  {
    v24 = dword_10017706C;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 120) = v25;
    *v25 = v1;
    v25[1] = sub_1000E3A3C;
    return sub_10008E67C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000014, 0x8000000100133590, 427);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 96);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E3A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000DB2A8;
  else
    v3 = sub_1000E3AA0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E3AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E3C2C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177ADC;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFD0;
  return sub_1000E35DC(v6, v8);
}

uint64_t sub_1000E3CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84((uint64_t *)&unk_100177B40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[10] = swift_task_alloc(v4);
  v3[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for DIPError.Code(0);
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v3[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v9);
  v3[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000E3D88, 0, 0);
}

uint64_t sub_1000E3D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)(v1 + 64);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v43 = *(_QWORD *)(v1 + 128);
    v44 = *(_QWORD *)(v1 + 120);
    v45 = *(_QWORD *)(v1 + 144);
    v6 = *(_QWORD *)(v1 + 64);
    v7 = *(_QWORD *)(v1 + 56);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v46 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 48) = sub_10003FA80(v7, v6, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy properties, credential identifier = %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v10(v45, v44);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 144);
    v12 = *(_QWORD *)(v1 + 120);
    v13 = *(_QWORD *)(v1 + 128);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 64), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 152) = v10;
  sub_1000E8D80();
  v34 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 160) = v34;
  if (!v34)
  {
    v37 = *(_QWORD *)(v1 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 104) + 104))(v37, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 96));
    v38 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v39 = type metadata accessor for DIPError(0);
    v40 = sub_10000745C();
    v41 = swift_allocError(v39, v40, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v37, 0, v38, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000019, 0x80000001001367D0, 444);
    swift_willThrow(v42);
    v14 = *(_QWORD *)(v1 + 96);
    v15 = *(_QWORD *)(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    swift_getErrorValue(v41, v1 + 40, v1 + 16);
    Error.dipErrorCode.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
    if ((_DWORD)v17 != 1)
    {
      v18 = *(_QWORD *)(v1 + 96);
      v19 = *(_QWORD *)(v1 + 104);
      v20 = *(_QWORD *)(v1 + 80);
      sub_1000E96C4(*(_QWORD *)(v1 + 88), v20);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v19 + 88))(v20, v18) == enum case for DIPError.Code.idcsUnknownCredential(_:))
      {
LABEL_9:
        v25 = *(_QWORD *)(v1 + 136);
        v24 = *(_QWORD *)(v1 + 144);
        v26 = *(_QWORD *)(v1 + 112);
        v27 = *(_QWORD *)(v1 + 80);
        v28 = *(_QWORD *)(v1 + 88);
        sub_1000150E8(v28, (uint64_t *)&unk_100177B40);
        sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
        v31 = v30;
        static NSError.mapFromError(_:domain:mapper:)(v41, v29, v30, sub_100120718, 0);
        v32 = swift_bridgeObjectRelease(v31);
        swift_willThrow(v32);
        swift_errorRelease(v41);
        swift_task_dealloc(v24);
        swift_task_dealloc(v25);
        swift_task_dealloc(v26);
        swift_task_dealloc(v28);
        swift_task_dealloc(v27);
        return (*(uint64_t (**)(void))(v1 + 8))();
      }
      v17 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 104) + 8))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 96));
    }
    v21 = *(void (**)(uint64_t, uint64_t))(v1 + 152);
    v22 = *(_QWORD *)(v1 + 136);
    v23 = *(_QWORD *)(v1 + 120);
    defaultLogger()(v17);
    DIPRecordError(_:message:log:)(v41, 0, 0xE000000000000000, v22);
    v21(v22, v23);
    goto LABEL_9;
  }
  v35 = dword_10017704C;
  swift_retain(v34);
  v36 = (_QWORD *)swift_task_alloc(v35);
  *(_QWORD *)(v1 + 168) = v36;
  *v36 = v1;
  v36[1] = sub_1000E4200;
  return sub_10008C39C(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1000E4200(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(*v2 + 176) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E42F0;
  }
  else
  {
    *(_QWORD *)(v4 + 184) = a1;
    v6 = sub_1000E4274;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E4274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 184));
}

uint64_t sub_1000E42F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_release(*(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  swift_getErrorValue(v1, v0 + 40, v0 + 16);
  Error.dipErrorCode.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if ((_DWORD)v5 == 1)
    goto LABEL_4;
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  sub_1000E96C4(*(_QWORD *)(v0 + 88), v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v8, v6) != enum case for DIPError.Code.idcsUnknownCredential(_:))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 96));
LABEL_4:
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 120);
    defaultLogger()(v5);
    DIPRecordError(_:message:log:)(v1, 0, 0xE000000000000000, v10);
    v9(v10, v11);
  }
  v13 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 88);
  sub_1000150E8(v16, (uint64_t *)&unk_100177B40);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v19 = v18;
  static NSError.mapFromError(_:domain:mapper:)(v1, v17, v18, sub_100120718, 0);
  v20 = swift_bridgeObjectRelease(v19);
  swift_willThrow(v20);
  swift_errorRelease(v1);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E45E8(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177AE4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFE0;
  return sub_1000E3CB8(v6, v8);
}

uint64_t sub_1000E4674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v9);
  v4[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000E4710, 0, 0);
}

uint64_t sub_1000E4710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 88);
    v35 = *(_QWORD *)(v1 + 80);
    v36 = *(_QWORD *)(v1 + 104);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy setState, credential identifier = %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 104);
    v12 = *(_QWORD *)(v1 + 80);
    v13 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 112) = v10;
  sub_1000E8D80();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 120) = v23;
  if (v23)
  {
    v24 = dword_10017701C;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 128) = v25;
    *v25 = v1;
    v25[1] = sub_1000E4AD4;
    return sub_10009186C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 56));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000001BLL, 0x80000001001367B0, 470);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 104);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 112);
    v16 = *(_QWORD *)(v1 + 96);
    v18 = *(_QWORD *)(v1 + 72);
    v17 = *(_QWORD *)(v1 + 80);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E4AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000E3200;
  else
    v3 = sub_10001B2E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E4C6C(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = dword_100177AEC;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[5] = v12;
  *v12 = v4;
  v12[1] = sub_1000E4D08;
  return sub_1000E4674(v8, v10, a2);
}

uint64_t sub_1000E4D08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(*v1 + 32);
  v2 = *(_QWORD *)(*v1 + 40);
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  v6 = *(_QWORD *)(v5 + 24);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 24), 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000E4DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E4E3C, 0, 0);
}

uint64_t sub_1000E4E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E8D80();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 88) = v9;
  if (v9)
  {
    v10 = dword_100176FE4;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_1000E506C;
    return sub_100092334(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 64));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000001ELL, 0x8000000100136790, 485);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E506C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 96);
  *(_QWORD *)(*v3 + 104) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000E5130;
  }
  else
  {
    *(_QWORD *)(v6 + 112) = a2;
    *(_QWORD *)(v6 + 120) = a1;
    v8 = sub_1000E50E4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000E50E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));
}

uint64_t sub_1000E5130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = swift_release(*(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v9 = v8;
  static NSError.mapFromError(_:domain:mapper:)(v2, v7, v8, sub_100120718, 0);
  v10 = swift_bridgeObjectRelease(v9);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E5358(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177AF4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000E53E4;
  return sub_1000E4DB0(v6, v8);
}

uint64_t sub_1000E53E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v9 = *(_QWORD *)(*v3 + 32);
  v8 = *(_QWORD *)(*v3 + 40);
  v10 = *(void **)(*v3 + 16);
  v11 = *v3;
  swift_task_dealloc(v8);

  swift_bridgeObjectRelease(v9);
  if (v4)
  {
    v12 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v14 = (void *)v12;
  }
  else if (a2 >> 60 == 15)
  {
    v12 = 0;
    isa = 0;
    v14 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a1, a2);
    v12 = 0;
    v14 = isa;
  }
  v15 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v15)[2](v15, isa, v12);

  _Block_release(v15);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

uint64_t sub_1000E54DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = type metadata accessor for Logger(0);
  v6[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPError.Code(0);
  v6[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[12] = v10;
  v6[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E556C, 0, 0);
}

uint64_t sub_1000E556C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000E8D80();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 112) = v9;
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 32);
    v11 = dword_100176FB4;
    swift_retain(v9);
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 120) = v12;
    *v12 = v0;
    v12[1] = sub_1000E57B0;
    return sub_100093294(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v10, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(v14, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 88));
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_10000745C();
    v18 = swift_allocError(v16, v17, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v14, 0, v15, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000033, 0x8000000100136750, 500);
    v20 = swift_willThrow(v19);
    v1 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 64);
    defaultLogger()(v20);
    DIPRecordError(_:message:log:)(v18, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v18, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v18);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E57B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E5870;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_1000E5824;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E5824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

uint64_t sub_1000E5870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v9 = v8;
  static NSError.mapFromError(_:domain:mapper:)(v2, v7, v8, sub_100120718, 0);
  v10 = swift_bridgeObjectRelease(v9);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E5AB4(uint64_t a1, uint64_t a2, void *a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v5[4] = v11;
  v13 = sub_100008E84(&qword_100177CB0);
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v13, &protocol witness table for String);
  v5[5] = v14;
  if (a3)
  {
    v15 = a3;
    v16 = a5;
    a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v18 = v17;

  }
  else
  {
    v19 = a5;
    v18 = 0xF000000000000000;
  }
  v5[6] = a3;
  v5[7] = v18;
  v20 = (_QWORD *)swift_task_alloc(dword_100177AFC);
  v5[8] = v20;
  *v20 = v5;
  v20[1] = sub_1000E5BBC;
  return sub_1000E54DC(v10, v12, v14, (uint64_t)a3, v18);
}

uint64_t sub_1000E5BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 64);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v5);

  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  sub_10000B164(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_100008E84(&qword_100177C20);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000E5CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E5D4C, 0, 0);
}

uint64_t sub_1000E5D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E8D80();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 88) = v9;
  if (v9)
  {
    v10 = dword_1001769EC;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_1000E5F80;
    return sub_10006D800(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 64));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000020, 0x8000000100136720, 515);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E5F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E5130;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_1000E5FF4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E5FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000E6170(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177B04;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000E61FC;
  return sub_1000E5CC0(v6, v8);
}

uint64_t sub_1000E61FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v5 = *(_QWORD *)(*v2 + 32);
  v4 = *(_QWORD *)(*v2 + 40);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v4);

  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)(v7 + 24);
  if (v1)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v8 + 16))(v8);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v8 + 16))(*(_QWORD *)(v7 + 24), a1, 0);
  }
  _Block_release(*(const void **)(v7 + 24));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000E62B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000E6350, 0, 0);
}

uint64_t sub_1000E6350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v34 = *(_QWORD *)(v1 + 80);
    v35 = *(_QWORD *)(v1 + 72);
    v36 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v37 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy payloads (debug), credential identifier = %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v10(v36, v35);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  *(_QWORD *)(v1 + 104) = v10;
  sub_1000E8D80();
  sub_1000E91A8();
  v23 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v1 + 112) = v23;
  if (v23)
  {
    v24 = dword_1001755E4;
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v1 + 120) = v25;
    *v25 = v1;
    v25[1] = sub_1000DB1D4;
    return sub_100034A4C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000017, 0x8000000100136700, 538);
    v33 = swift_willThrow(v32);
    v15 = *(_QWORD *)(v1 + 96);
    v14 = *(void (**)(uint64_t, uint64_t))(v1 + 104);
    v16 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 64);
    v17 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v16);
    v14(v16, v17);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v21 = v20;
    static NSError.mapFromError(_:domain:mapper:)(v31, v19, v20, sub_100120718, 0);
    v22 = swift_bridgeObjectRelease(v21);
    swift_willThrow(v22);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E6854(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177B0C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000E68E0;
  return sub_1000E62B4(v6, v8);
}

uint64_t sub_1000E68E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_10000DA34(0, &qword_100177C68, DCCredentialPayload_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1000E69CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000E6A68, 0, 0);
}

uint64_t sub_1000E6A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 32);
  defaultLogger()(a1);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v37 = *(_QWORD *)(v1 + 80);
    v38 = *(_QWORD *)(v1 + 72);
    v39 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 24);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v40 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v7, v6, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v8 + 4);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CredentialStoreSessionProxy deleteAccountKeySigningKey for accountKeyIdentifier: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v10 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v10(v39, v38);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 32), 2);

    v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  sub_1000E91A8();
  v23 = *(_QWORD *)(v1 + 40);
  v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  if (v24)
  {
    v25 = *(_QWORD *)(v1 + 24);
    v26 = *(void **)(v1 + 32);
    swift_retain(*(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage));
    sub_1000FE2FC(v25, v26);
    v34 = *(_QWORD *)(v1 + 88);
    v35 = *(_QWORD *)(v1 + 96);
    v36 = *(_QWORD *)(v1 + 64);
    swift_release(v24);
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 56) + 104))(v27, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v1 + 48));
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_10000745C();
    v31 = swift_allocError(v29, v30, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v27, 0, v28, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000034, 0x80000001001366C0, 554);
    v33 = swift_willThrow(v32);
    v14 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 96);
    v17 = *(_QWORD *)(v1 + 64);
    v16 = *(_QWORD *)(v1 + 72);
    defaultLogger()(v33);
    DIPRecordError(_:message:log:)(v31, 0, 0xE000000000000000, v14);
    v10(v14, v16);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v20 = v19;
    static NSError.mapFromError(_:domain:mapper:)(v31, v18, v19, sub_100120718, 0);
    v21 = swift_bridgeObjectRelease(v20);
    swift_willThrow(v21);
    swift_errorRelease(v31);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v17);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000E6F68(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177B14;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFD0;
  return sub_1000E69CC(v6, v8);
}

uint64_t sub_1000E6FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPError.Code(0);
  v5[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E7084, 0, 0);
}

uint64_t sub_1000E7084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E8D80();
  sub_1000E91A8();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 104) = v9;
  if (v9)
  {
    v10 = dword_100176FB4;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 112) = v11;
    *v11 = v0;
    v11[1] = sub_1000E72D0;
    return sub_100093294(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 80));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000023, 0x8000000100136690, 570);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 56);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E72D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E7390;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_1000E7344;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E7344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_1000E7390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = swift_release(*(_QWORD *)(v0 + 104));
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v9 = v8;
  static NSError.mapFromError(_:domain:mapper:)(v2, v7, v8, sub_100120718, 0);
  v10 = swift_bridgeObjectRelease(v9);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E75C0(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  if (a2)
  {
    v11 = a2;
    v12 = a4;
    a2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v14 = v13;

  }
  else
  {
    v15 = a4;
    v14 = 0xF000000000000000;
  }
  v4[5] = a2;
  v4[6] = v14;
  v16 = (_QWORD *)swift_task_alloc(dword_100177B1C);
  v4[7] = v16;
  *v16 = v4;
  v16[1] = sub_1000E7688;
  return sub_1000E6FF4(v8, v10, (uint64_t)a2, v14);
}

uint64_t sub_1000E7688(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v5);

  v8 = *(_QWORD *)(v7 + 32);
  sub_10000B164(*(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48));
  swift_bridgeObjectRelease(v8);
  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    sub_100008E84(&qword_100177C20);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000E7784()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError.Code(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E780C, 0, 0);
}

uint64_t sub_1000E780C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E91A8();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 72) = v9;
  if (v9)
  {
    v10 = dword_1001755D4;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 80) = v11;
    *v11 = v0;
    v11[1] = sub_1000E7A34;
    return sub_10003513C();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 48));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD00000000000001ALL, 0x8000000100136670, 586);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 24);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E7A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000E7AF4;
  }
  else
  {
    *(_QWORD *)(v4 + 96) = a1;
    v6 = sub_1000E7AA8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E7AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1000E7AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = swift_release(*(_QWORD *)(v0 + 72));
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  defaultLogger()(v1);
  DIPRecordError(_:message:log:)(v2, 0, 0xE000000000000000, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
  v9 = v8;
  static NSError.mapFromError(_:domain:mapper:)(v2, v7, v8, sub_100120718, 0);
  v10 = swift_bridgeObjectRelease(v9);
  swift_willThrow(v10);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E7D08(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100177B24;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000E7D68;
  return sub_1000E7784();
}

uint64_t sub_1000E7D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 32);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    sub_10000DA34(0, &qword_100177BF8, DCLegacySESlotInfo_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000E7E44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPError.Code(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E7ECC, 0, 0);
}

uint64_t sub_1000E7ECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1000E91A8();
  if (*(_QWORD *)(v0[3] + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage))
  {
    sub_10003967C(v0[2]);
    v11 = v0[6];
    swift_task_dealloc(v0[9]);
    swift_task_dealloc(v11);
    v9 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v12 = v0[9];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[8] + 104))(v12, enum case for DIPError.Code.badLogic(_:), v0[7]);
    v13 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v14 = type metadata accessor for DIPError(0);
    v15 = sub_10000745C();
    v16 = swift_allocError(v14, v15, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v12, 0, v13, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000018, 0x8000000100136650, 602);
    v18 = swift_willThrow(v17);
    v1 = v0[9];
    v2 = v0[5];
    v3 = v0[6];
    v4 = v0[4];
    defaultLogger()(v18);
    DIPRecordError(_:message:log:)(v16, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v16, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v16);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

uint64_t sub_1000E8210(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_100177B2C;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_100024418;
  return sub_1000E7E44(a1);
}

uint64_t sub_1000E8284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E8310, 0, 0);
}

uint64_t sub_1000E8310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E91A8();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 88) = v9;
  if (v9)
  {
    v10 = dword_1001755C4;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_1000E8540;
    return sub_1000363D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 64));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000028, 0x8000000100136620, 617);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E8540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000E5130;
  else
    v3 = sub_1000E85A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000E85A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E871C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177B34;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000EAFD0;
  return sub_1000E8284(v6, v8);
}

uint64_t sub_1000E87A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError.Code(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000E8834, 0, 0);
}

uint64_t sub_1000E8834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000E91A8();
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(v0 + 88) = v9;
  if (v9)
  {
    v10 = dword_1001755A4;
    swift_retain(v9);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 96) = v11;
    *v11 = v0;
    v11[1] = sub_1000E8A64;
    return sub_100036DFC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v13, enum case for DIPError.Code.badLogic(_:), *(_QWORD *)(v0 + 64));
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_10000745C();
    v17 = swift_allocError(v15, v16, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x800000010012EEB0, 0, v13, 0, v14, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000017, 0x8000000100136600, 632);
    v19 = swift_willThrow(v18);
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 40);
    defaultLogger()(v19);
    DIPRecordError(_:message:log:)(v17, 0, 0xE000000000000000, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    sub_10000DA34(0, (unint64_t *)&qword_100175900, NSError_ptr);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(DCCredentialStoreErrorDomain);
    v7 = v6;
    static NSError.mapFromError(_:domain:mapper:)(v17, v5, v6, sub_100120718, 0);
    v8 = swift_bridgeObjectRelease(v7);
    swift_willThrow(v8);
    swift_errorRelease(v17);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E8A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000EAFF8;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_1000E5FF4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000E8C08(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100177B3C;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1000E8C94;
  return sub_1000E87A8(v6, v8);
}

uint64_t sub_1000E8C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    sub_10000DA34(0, &qword_100177B90, DCCredentialCryptoKeyInfo_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

void sub_1000E8D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::OpaquePointer v7;
  uint64_t Strong;
  void *v9;
  Swift::String v10;
  Swift::Bool v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions;
  v7._rawValue = *(void **)(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions);
  if (!*((_QWORD *)v7._rawValue + 2))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_10000745C();
    swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000011, 0x80000001001306D0, 0, v5, 0, v22, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000013, 0x8000000100130630, 652);
LABEL_11:
    swift_willThrow(v25);
    return;
  }
  if ((sub_1000D9C34(42, 0xE100000000000000, *(_QWORD **)(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions)) & 1) != 0&& (byte_100178C90 & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    swift_allocError(v30, v31, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ALL, 0x80000001001306A0, 0, v5, 0, v29, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000013, 0x8000000100130630, 657);
    goto LABEL_11;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_connection);
  if (!Strong)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v27 = type metadata accessor for DIPError(0);
    v28 = sub_10000745C();
    swift_allocError(v27, v28, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x800000010012ED80, 0, v5, 0, v26, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000013, 0x8000000100130630, 662);
    goto LABEL_11;
  }
  v9 = (void *)Strong;
  swift_bridgeObjectRetain(v7._rawValue);
  v10._countAndFlagsBits = 0xD00000000000001FLL;
  v10._object = (void *)0x80000001001365E0;
  v11 = NSXPCConnection.hasArrayEntitlement(name:values:)(v10, v7);
  swift_bridgeObjectRelease(v7._rawValue);
  if (!v11)
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v33);
    v32 = 0xD00000000000001FLL;
    v33 = 0x8000000100130680;
    v12 = *(_QWORD *)(v1 + v6);
    swift_bridgeObjectRetain(v12);
    v14._countAndFlagsBits = Array.description.getter(v13, &type metadata for String);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(object);
    v16 = v32;
    v17 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.missingEntitlement(_:), v2);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_10000745C();
    swift_allocError(v19, v20, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v16, v17, 0, v5, 0, v18, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000013, 0x8000000100130630, 666);
    swift_willThrow(v21);
  }

}

void sub_1000E91A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Strong;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((byte_100178C90 & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    v12 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v13 = type metadata accessor for DIPError(0);
    v14 = sub_10000745C();
    swift_allocError(v13, v14, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001BLL, 0x80000001001364F0, 0, v4, 0, v12, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000017, 0x8000000100136570, 674);
LABEL_8:
    swift_willThrow(v15);
    return;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_connection);
  if (!Strong)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_10000745C();
    swift_allocError(v17, v18, 0, 0);
    v15 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000003DLL, 0x800000010012ED80, 0, v4, 0, v16, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000017, 0x8000000100136570, 677);
    goto LABEL_8;
  }
  v6 = (void *)Strong;
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  v7._object = (void *)0x8000000100136590;
  if (!NSXPCConnection.isEntitled(_:)(v7))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.missingEntitlement(_:), v1);
    v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v9 = type metadata accessor for DIPError(0);
    v10 = sub_10000745C();
    swift_allocError(v9, v10, 0, 0);
    v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x80000001001365B0, 0, v4, 0, v8, 0xD00000000000005DLL, 0x8000000100136510, 0xD000000000000017, 0x8000000100136570, 681);
    swift_willThrow(v11);
  }

}

uint64_t type metadata accessor for CredentialStoreSessionProxy()
{
  return objc_opt_self(_TtC7idcredd27CredentialStoreSessionProxy);
}

uint64_t sub_1000E94D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100016474;
  return v6();
}

uint64_t sub_1000E9524(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100016474;
  return v7();
}

uint64_t sub_1000E9578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_1000150E8(a1, &qword_100174E30);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9, v13);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10016B0C8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100177B88, v16);
}

uint64_t sub_1000E96C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84((uint64_t *)&unk_100177B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9710()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177B54);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177B50 + dword_100177B50))(v2, v3, v4);
}

uint64_t sub_1000E9784()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E97A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100177B84);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000935C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100177B80 + dword_100177B80))(a1, v4);
}

uint64_t sub_1000E981C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177B9C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177B98 + dword_100177B98))(v2, v3, v4);
}

uint64_t sub_1000E9890()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E98BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177BBC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177BB8 + dword_100177BB8))(v2, v3, v4);
}

uint64_t sub_1000E9930()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E995C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100177BDC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016474;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100177BD8 + dword_100177BD8))(v2, v3);
}

uint64_t sub_1000E99CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177C04);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *, void *))((char *)&dword_100177C00 + dword_100177C00))(v2, v3, v5, v4);
}

uint64_t sub_1000E9A50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177C2C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177C28 + dword_100177C28))(v2, v3, v4);
}

uint64_t sub_1000E9AC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177C4C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177C48 + dword_100177C48))(v2, v3, v4);
}

uint64_t sub_1000E9B40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177C74);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177C70 + dword_100177C70))(v2, v3, v4);
}

uint64_t sub_1000E9BB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100177C94);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *, void *))((char *)&dword_100177C90 + dword_100177C90))(v2, v3, v4, v5, v6);
}

uint64_t sub_1000E9C44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177CBC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177CB8 + dword_100177CB8))(v2, v3, v4);
}

uint64_t sub_1000E9CBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177CDC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10000935C;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177CD8 + dword_100177CD8))(v2, v3, v5, v4);
}

uint64_t sub_1000E9D40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177CFC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177CF8 + dword_100177CF8))(v2, v3, v4);
}

uint64_t sub_1000E9DB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177D1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177D18 + dword_100177D18))(v2, v3, v4);
}

uint64_t sub_1000E9E30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177D3C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177D38 + dword_100177D38))(v2, v3, v5, v4);
}

uint64_t sub_1000E9EB4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E9EF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100177D5C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *))((char *)&dword_100177D58 + dword_100177D58))(v2, v3, v4, v5, v6);
}

uint64_t sub_1000E9F84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177D7C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177D78 + dword_100177D78))(v2, v3, v5, v4);
}

uint64_t sub_1000EA008()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177D9C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177D98 + dword_100177D98))(v2, v3, v4);
}

uint64_t sub_1000EA07C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000EA0B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_100177DBC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, uint64_t, void *, void *))((char *)&dword_100177DB8 + dword_100177DB8))(v2, v3, v4, v5, v6);
}

uint64_t sub_1000EA144()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177DDC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100177DD8 + dword_100177DD8))(v2, v3, v4);
}

uint64_t sub_1000EA1BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177DFC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *, void *))((char *)&dword_100177DF8 + dword_100177DF8))(v2, v3, v5, v4);
}

uint64_t sub_1000EA240()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177E1C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *, void *))((char *)&dword_100177E18 + dword_100177E18))(v2, v3, v5, v4);
}

uint64_t sub_1000EA2C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177E3C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177E38 + dword_100177E38))(v2, v3, v5, v4);
}

uint64_t sub_1000EA348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177E5C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177E58 + dword_100177E58))(v2, v3, v5, v4);
}

uint64_t sub_1000EA3CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177E84);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177E80 + dword_100177E80))(v2, v3, v4);
}

uint64_t sub_1000EA444()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177EA4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177EA0 + dword_100177EA0))(v2, v3, v4);
}

uint64_t sub_1000EA4BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177EC4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100177EC0 + dword_100177EC0))(v2, v3, v5, v4);
}

uint64_t sub_1000EA540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177EE4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177EE0 + dword_100177EE0))(v2, v3, v4);
}

uint64_t sub_1000EA5B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177F04);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177F00 + dword_100177F00))(v2, v3, v4);
}

uint64_t sub_1000EA630()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177F24);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177F20 + dword_100177F20))(v2, v3, v4);
}

uint64_t sub_1000EA6A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100177F44);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100177F40 + dword_100177F40))(v2, v3, v4);
}

uint64_t sub_1000EA720()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100177F64);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, void *, void *, void *))((char *)&dword_100177F60 + dword_100177F60))(v2, v3, v5, v4);
}

id sub_1000EA7A0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint8_t *v16;
  uint8_t *v17;
  id result;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;

  v3 = v2;
  v22 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v3[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_connection];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_connection], 0);
  v10 = OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage] = 0;
  v11 = v3;
  v12 = defaultLogger()(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    v21 = a2;
    v16 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Creating CredentialStoreSessionProxy", v15, 2u);
    v17 = v16;
    a2 = v21;
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = (id)os_transaction_create("CredentialStoreSessionProxy");
  if (result)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_jetsamTransaction] = result;
    swift_unknownObjectWeakAssign(v9, v22);
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_dataContainer] = a2;
    *(_QWORD *)&v11[OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions] = _swiftEmptyArrayStorage;
    v19 = *(_QWORD *)&v3[v10];
    *(_QWORD *)&v3[v10] = 0;
    swift_retain(a2);

    swift_release(v19);
    v20 = (objc_class *)type metadata accessor for CredentialStoreSessionProxy();
    v23.receiver = v11;
    v23.super_class = v20;
    return objc_msgSendSuper2(&v23, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EA95C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *Strong;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;
  _BYTE v28[8];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_unknownObjectWeakInit(v28, a1);
  defaultLogger()(v8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 67109120;
    LODWORD(aBlock) = -[NSObject processIdentifier](v9, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v12 + 4);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "credential store listener connection received from %d", v12, 8u);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___DCCredentialStoreXPCProtocol);
  -[NSObject setExportedInterface:](v9, "setExportedInterface:", v13);

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v28);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7idcredd23CredentialStoreListener_dataContainer);
  v16 = objc_allocWithZone((Class)type metadata accessor for CredentialStoreSessionProxy());
  swift_retain(v15);
  v17 = sub_1000EA7A0((uint64_t)Strong, v15);

  swift_release(v15);
  -[NSObject setExportedObject:](v9, "setExportedObject:", v17);

  v26 = sub_1000DA04C;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_10016BEF0;
  v18 = _Block_copy(&aBlock);
  -[NSObject setInvalidationHandler:](v9, "setInvalidationHandler:", v18);
  _Block_release(v18);
  v26 = sub_1000DA058;
  v27 = 0;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_1000EB000;
  v25 = &unk_10016BF18;
  v19 = _Block_copy(&aBlock);
  -[NSObject setInterruptionHandler:](v9, "setInterruptionHandler:", v19);
  _Block_release(v19);
  -[NSObject resume](v9, "resume");
  swift_unknownObjectWeakDestroy(v28);
  return 1;
}

uint64_t sub_1000EAC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint8_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[5];

  v6 = type metadata accessor for FeatureFlagProvider(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v46 = (char *)&v39 - v11;
  v12 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v13);
  v16 = swift_bridgeObjectRetain_n(a1, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v43 = v6;
    v19 = swift_slowAlloc(12, -1);
    v44 = a3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v40 = v12;
    v22 = v21;
    v49[0] = v21;
    v41 = v10;
    *(_DWORD *)v20 = 136315138;
    v39 = v20 + 4;
    swift_bridgeObjectRetain(a1);
    v24 = Array.description.getter(v23, &type metadata for String);
    v42 = v7;
    v26 = v25;
    swift_bridgeObjectRelease(a1);
    v27 = v24;
    v6 = v43;
    v47 = sub_10003FA80(v27, v26, v49);
    v10 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39);
    swift_bridgeObjectRelease_n(a1, 2);
    v28 = v26;
    v7 = v42;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CredentialStoreSessionProxy configure with partitions %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v29 = v20;
    a3 = v44;
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v40);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v12);
  }
  v30 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_partitions) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_dataContainer);
  v49[3] = (uint64_t)&type metadata for CredentialDecryptionKeyIdentifierProvider;
  v49[4] = (uint64_t)&off_100167928;
  v32 = type metadata accessor for PayloadProcessorBuilder();
  v33 = swift_allocObject(v32, 16, 7);
  swift_bridgeObjectRetain(a1);
  swift_retain(v31);
  v34 = sub_100079C04();
  v35 = v46;
  FeatureFlagProvider.init()();
  sub_100079DA8((uint64_t)v49, (uint64_t)&v47);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v35, v6);
  swift_retain(v33);
  v36 = sub_100079DE4(a1, v31, 0, (uint64_t)&v47, v33, (uint64_t)v34, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v35, v6);
  swift_release(v33);
  sub_10006CA58((uint64_t)v49);
  v37 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC7idcredd27CredentialStoreSessionProxy_storage) = v36;
  swift_release(v37);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
}

uint64_t sub_1000EAFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EAFC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EB000(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

_QWORD *sub_1000EB02C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39[7];

  v1 = v0;
  v2 = sub_100008E84(&qword_100174E30);
  __chkstk_darwin(v2);
  v38 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000DA34(0, &qword_1001780F0, OS_dispatch_queue_ptr);
  v37 = v14;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
  static DispatchQoS.unspecified.getter(v14);
  v39[0] = (uint64_t)&_swiftEmptyArrayStorage;
  v15 = sub_1000058C8(&qword_1001780F8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100008E84(&qword_100178100);
  v17 = sub_1000EB9A8(&qword_100178108, &qword_100178100);
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  v1[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x8000000100136D50, v13, v10, v7, 0);
  v1[6] = 0;
  v18 = os_transaction_create("DaemonInit");
  if (qword_1001743C0 != -1)
    swift_once(&qword_1001743C0, sub_10001647C);
  v19 = *(os_unfair_lock_s **)(qword_100178CB0 + 16);
  v20 = (uint64_t *)&v19[4];
  v21 = v19 + 18;
  os_unfair_lock_lock(v19 + 18);
  sub_1000164DC(v20, v39);
  os_unfair_lock_unlock(v21);
  v22 = v39[0];
  v23 = v39[3];
  v24 = v39[4];
  v25 = v39[5];
  v26 = v39[6];
  sub_100008FC0(v39[1], v39[2]);
  sub_100008FC0(v23, v24);
  sub_100008FC0(v25, v26);
  v27 = type metadata accessor for IDCSAsyncDataContainer();
  v28 = swift_allocObject(v27, 32, 7);
  *(_QWORD *)(v28 + 24) = v22;
  v29 = sub_100008E84(&qword_100178110);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  swift_retain_n(v22, 2);
  *(_QWORD *)(v28 + 16) = AsyncCoreDataContainer.init(contextBuilder:)(sub_1000EB9E8, v22);
  sub_1000EB480(v28);
  type metadata accessor for DIPBackgroundActivityManager(0);
  v30 = static DIPBackgroundActivityManager.sharedInstance.getter();
  swift_retain(v28);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000014, 0x8000000100136D80, &unk_100178118, v28);
  swift_release(v28);
  swift_retain(v28);
  DIPBackgroundActivityManager.registerActivity(identifier:activity:)(0xD000000000000019, 0x8000000100136DA0, &unk_100178120, v28);
  swift_release(v30);
  swift_release(v28);
  v31 = type metadata accessor for TaskPriority(0);
  v32 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v38, 1, 1, v31);
  v33 = (_QWORD *)swift_allocObject(&unk_10016BF78, 64, 7);
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v28;
  v33[5] = 0xD000000000000015;
  v33[6] = 0x8000000100136DC0;
  v33[7] = &off_100166E90;
  swift_retain_n(v28, 2);
  v34 = sub_10008BC00(v32, (uint64_t)&unk_100178128, (uint64_t)v33);
  swift_unknownObjectRelease(v18, v35);
  swift_release(v22);
  swift_release_n(v28, 2);
  swift_release(v34);
  return v1;
}

void (__cdecl *sub_1000EB480(uint64_t a1))(int)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (__cdecl *v42)(int);
  void (__cdecl *result)(int);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = defaultLogger()(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setting up listeners", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v19 = objc_allocWithZone((Class)type metadata accessor for CredentialStoreListener());
  v20 = swift_retain(a1);
  v21 = sub_1000D9CF8(v20);
  v22 = (void *)v2[2];
  v2[2] = v21;

  v23 = objc_allocWithZone((Class)type metadata accessor for PresentmentListener());
  v24 = swift_retain(a1);
  v25 = sub_100041300(v24);
  v26 = (void *)v2[3];
  v2[3] = v25;

  v27 = objc_allocWithZone((Class)type metadata accessor for BiometricStoreListener());
  v28 = swift_retain(a1);
  v29 = sub_100019C9C(v28);
  v30 = (void *)v2[4];
  v2[4] = v29;

  sub_10000DA34(0, &qword_1001780C8, OS_dispatch_source_ptr);
  v31 = (void *)v2[5];
  v32 = v31;
  v33 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15, v31);

  v34 = v2[6];
  v2[6] = v33;
  v36 = swift_unknownObjectRelease(v34, v35);
  v37 = v2[6];
  if (v37)
  {
    ObjectType = swift_getObjectType(v2[6]);
    aBlock[4] = sub_1000EB7A8;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000EB000;
    aBlock[3] = &unk_10016BF40;
    v39 = _Block_copy(aBlock);
    v40 = swift_unknownObjectRetain(v37);
    static DispatchQoS.unspecified.getter(v40);
    sub_1000EB880();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v9, v6, v39, ObjectType);
    _Block_release(v39);
    swift_unknownObjectRelease(v37, v41);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v49);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  }
  v42 = (void (__cdecl *)(int))SIG_IGN.getter(v36);
  result = signal(15, v42);
  v44 = v2[6];
  if (v44)
  {
    swift_getObjectType(v2[6]);
    swift_unknownObjectRetain(v44);
    OS_dispatch_source.resume()();
    return (void (__cdecl *)(int))swift_unknownObjectRelease(v44, v45);
  }
  return result;
}

void sub_1000EB7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = defaultLogger()(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SIGTERM received; shutting down", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  exit(0);
}

uint64_t sub_1000EB880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_1000058C8(&qword_1001780D0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100008E84(&qword_1001780D8);
  v3 = sub_1000EB9A8((unint64_t *)&unk_1001780E0, &qword_1001780D8);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1000EB92C()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48), v1);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for DaemonInitializer()
{
  return objc_opt_self(_TtC7idcredd17DaemonInitializer);
}

uint64_t sub_1000EB990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EB9A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EB9A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100016404(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EB9E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10003486C(a1);
}

uint64_t sub_1000EBA00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10017885C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100016474;
  return sub_1001107E8(a1, a2, v2);
}

uint64_t sub_1000EBA60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100178854);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100016474;
  return sub_100110918(a1, a2, v2);
}

uint64_t sub_1000EBAC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2], a2);
  swift_release(v2[4]);
  swift_bridgeObjectRelease(v2[6]);
  swift_bridgeObjectRelease(v2[7]);
  return swift_deallocObject(v2, 64, 7);
}

uint64_t sub_1000EBAFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_100176D94);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000935C;
  return sub_100089160(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000EBB88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001782E0);
  v2[10] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_1001782D8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v7);
  v2[16] = swift_task_alloc(v7);
  v8 = type metadata accessor for PresentmentRequestInterpretation(0);
  v2[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[18] = v9;
  v2[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v2[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[21] = v11;
  v2[22] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EBCBC, 0, 0);
}

uint64_t sub_1000EBCBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentFlow interpretRequest", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[21];
  v6 = v1[22];
  v8 = v1[20];
  v9 = v1[6];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = *(_QWORD *)(v9 + 112);
  v1[23] = v10;
  v11 = dword_10017746C;
  swift_retain(v10);
  v12 = (uint64_t **)swift_task_alloc(v11);
  v1[24] = (uint64_t)v12;
  *v12 = v1;
  v12[1] = (uint64_t *)sub_1000EBDC4;
  return sub_1000AFA44(v1[19], v1[5]);
}

uint64_t sub_1000EBDC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000EC28C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 184));
    v4 = sub_1000EBE30;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EBE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 48);
  sub_10006BC40(v1, v4, type metadata accessor for PresentmentRequestInterpretation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  sub_10002E94C(v4, v5, &qword_1001782D8);
  v7 = v6 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  swift_beginAccess(v6 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation, v0 + 16, 33, 0);
  sub_1000ED038(v5, v7);
  swift_endAccess(v0 + 16);
  v8._object = (void *)0x8000000100136F70;
  v9._countAndFlagsBits = 0x6639646364353638;
  v9._object = (void *)0xE800000000000000;
  v8._countAndFlagsBits = 0xD00000000000004FLL;
  logMilestone(tag:description:)(v9, v8);
  v10 = *(_QWORD *)v1;
  v11 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v11)
  {
    v58 = *(_QWORD *)(v0 + 104);
    v59 = *(_QWORD *)(v0 + 112);
    v56 = *(_QWORD *)(v0 + 88);
    v57 = *(_QWORD *)(v0 + 96);
    v55 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain(v10);
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    result = sub_1000ED084(v10);
    v14 = result;
    v15 = 0;
    v16 = v10 + 64;
    v17 = *(_BYTE *)(v10 + 32);
    v50 = v10 + 80;
    v51 = v11;
    v52 = v0;
    v53 = v13;
    v54 = v10 + 64;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v17)
    {
      v19 = (unint64_t)v14 >> 6;
      if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v10 + 36) != v13)
        goto LABEL_23;
      v60 = v15;
      v21 = *(_QWORD **)(v0 + 104);
      v20 = *(_QWORD **)(v0 + 112);
      v22 = (uint64_t)v20 + *(int *)(v55 + 48);
      v61 = *(_QWORD **)(v0 + 96);
      v62 = *(_QWORD **)(v0 + 88);
      v23 = *(_QWORD *)(v10 + 56);
      v24 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v14);
      v25 = v10;
      v26 = *v24;
      v27 = v24[1];
      v28 = type metadata accessor for PresentmentProposal(0);
      sub_10006BC40(v23 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v14, v22, type metadata accessor for PresentmentProposal);
      *v20 = v26;
      *(_QWORD *)(v59 + 8) = v27;
      *v21 = v26;
      v10 = v25;
      *(_QWORD *)(v58 + 8) = v27;
      sub_10006BC40(v22, (uint64_t)v21 + *(int *)(v55 + 48), type metadata accessor for PresentmentProposal);
      sub_10002E94C((uint64_t)v21, (uint64_t)v61, &qword_1001782E0);
      swift_bridgeObjectRetain_n(v27, 2);
      sub_1000150E8((uint64_t)v20, &qword_1001782E0);
      v29 = *(int *)(v55 + 48);
      v30 = (id *)((char *)v62 + v29);
      v31 = *(_QWORD *)(v57 + 8);
      *v62 = *v61;
      *(_QWORD *)(v56 + 8) = v31;
      sub_10006BC40((uint64_t)v61 + v29, (uint64_t)v62 + v29, type metadata accessor for PresentmentProposal);
      v32 = *v30;
      sub_10006CA8C((uint64_t)v30, type metadata accessor for PresentmentProposal);
      v33 = sub_1000150E8((uint64_t)v61, &qword_1001782E0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v34 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
      v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
      result = specialized ContiguousArray._endMutation()(v35);
      v17 = *(_BYTE *)(v25 + 32);
      v18 = 1 << v17;
      if (v14 >= 1 << v17)
        goto LABEL_24;
      v16 = v54;
      v36 = *(_QWORD *)(v54 + 8 * v19);
      if ((v36 & (1 << v14)) == 0)
        goto LABEL_25;
      v13 = v53;
      if (*(_DWORD *)(v25 + 36) != v53)
        goto LABEL_26;
      v37 = v36 & (-2 << (v14 & 0x3F));
      if (v37)
      {
        v18 = __clz(__rbit64(v37)) | v14 & 0xFFFFFFFFFFFFFFC0;
        v0 = v52;
      }
      else
      {
        v38 = v19 + 1;
        v39 = (v18 + 63) >> 6;
        v0 = v52;
        if (v19 + 1 < v39)
        {
          v40 = *(_QWORD *)(v54 + 8 * v38);
          if (v40)
          {
LABEL_18:
            v18 = __clz(__rbit64(v40)) + (v38 << 6);
          }
          else
          {
            while (v39 - 2 != v19)
            {
              v40 = *(_QWORD *)(v50 + 8 * v19++);
              if (v40)
              {
                v38 = v19 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v15 = v60 + 1;
      v14 = v18;
      if (v60 + 1 == v51)
      {
        swift_bridgeObjectRelease(v10);
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
LABEL_20:
    v41 = *(_QWORD *)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 152);
    v44 = *(_QWORD *)(v0 + 120);
    v43 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 104);
    v45 = *(_QWORD *)(v0 + 112);
    v48 = *(_QWORD *)(v0 + 88);
    v47 = *(_QWORD *)(v0 + 96);
    v49 = *(_QWORD *)(v0 + 72);
    sub_10006CA8C(v42, type metadata accessor for PresentmentRequestInterpretation);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_1000EC28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 184));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for DIPError.Code.internalError(_:), v9);
  swift_errorRetain(v1);
  v10 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for DIPError(0);
  v12 = sub_10000745C();
  swift_allocError(v11, v12, 0, 0);
  v13 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v8, 0, v10, 0xD000000000000057, 0x8000000100136E80, 0xD00000000000001ALL, 0x8000000100134ED0, 129);
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC410(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001782D8);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PresentmentRequestInterpretation(0);
  v2[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[12] = v7;
  v2[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EC4E4, 0, 0);
}

uint64_t sub_1000EC4E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentFlow buildCredentialResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v8 = *(_QWORD *)(v1 + 112);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 48);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v13 = v12 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  swift_beginAccess(v12 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation, v1 + 16, 0, 0);
  sub_1000ECFAC(v13, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    v14 = *(_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 56);
    v15 = *(_QWORD *)(v1 + 64);
    sub_1000150E8(*(_QWORD *)(v1 + 80), &qword_1001782D8);
    v17 = *(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104);
    v17(v14, enum case for DIPError.Code.idcsPreconditionNotMet(_:), v16);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_10000745C();
    v21 = swift_allocError(v19, v20, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000005ALL, 0x8000000100136EE0, 0, v14, 0, v18, 0xD000000000000057, 0x8000000100136E80, 0xD000000000000023, 0x8000000100136F40, 139);
    swift_willThrow(v22);
    v31 = *(_QWORD *)(v1 + 128);
    v32 = *(_QWORD *)(v1 + 104);
    v23 = *(_QWORD *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 80);
    v17(v23, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 56));
    swift_errorRetain(v21);
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v19, v20, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v21, v23, 0, v24, 0xD000000000000057, 0x8000000100136E80, 0xD000000000000023, 0x8000000100136F40, 144);
    swift_willThrow(v25);
    swift_errorRelease(v21);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v27 = *(_QWORD *)(v1 + 48);
    sub_1000ECFF4(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 104));
    v28 = *(_QWORD *)(v27 + 120);
    *(_QWORD *)(v1 + 136) = v28;
    v29 = dword_10017662C;
    swift_retain(v28);
    v30 = (_QWORD *)swift_task_alloc(v29);
    *(_QWORD *)(v1 + 144) = v30;
    *v30 = v1;
    v30[1] = sub_1000EC83C;
    return sub_100058D44(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 104));
  }
}

uint64_t sub_1000EC83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  swift_release(*(_QWORD *)(v4 + 136));
  if (v1)
  {
    v6 = sub_1000EC92C;
  }
  else
  {
    *(_QWORD *)(v4 + 160) = a1;
    v6 = sub_1000EC8B8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000EC8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  sub_10006CA8C(v2, type metadata accessor for PresentmentRequestInterpretation);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_1000EC92C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 64);
  sub_10006CA8C(*(_QWORD *)(v0 + 104), type metadata accessor for PresentmentRequestInterpretation);
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 104);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v2(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 56));
  swift_errorRetain(v3);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_10000745C();
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v3, v7, 0, v8, 0xD000000000000057, 0x8000000100136E80, 0xD000000000000023, 0x8000000100136F40, 144);
  swift_willThrow(v11);
  swift_errorRelease(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ECA78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000ECB00, 0, 0);
}

uint64_t sub_1000ECB00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentFlow buildErrorResponse", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[8];
  v6 = v1[9];
  v8 = v1[7];
  v9 = v1[3];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = *(_QWORD *)(v9 + 120);
  v1[10] = v10;
  v11 = dword_100176634;
  swift_retain(v10);
  v12 = (uint64_t **)swift_task_alloc(v11);
  v1[11] = (uint64_t)v12;
  *v12 = v1;
  v12[1] = (uint64_t *)sub_1000ECC04;
  return sub_10005CCE0(v1[2]);
}

uint64_t sub_1000ECC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*v3 + 88);
  v7 = *v3;
  *(_QWORD *)(v7 + 96) = v2;
  swift_task_dealloc(v6);
  if (v2)
    return swift_task_switch(sub_1000ECCAC, 0, 0);
  v9 = *(_QWORD *)(v7 + 72);
  v10 = *(_QWORD *)(v7 + 48);
  swift_release(*(_QWORD *)(v7 + 80));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t sub_1000ECCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000057, 0x8000000100136E80, 0xD00000000000001BLL, 0x8000000100132290, 155);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000ECDD0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  sub_1000150E8((uint64_t)v0 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation, &qword_1001782D8);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_credentialKeyManager));
  return v0;
}

uint64_t sub_1000ECE44()
{
  uint64_t v0;

  sub_1000ECDD0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000ECE68()
{
  return type metadata accessor for PresentmentFlow(0);
}

uint64_t type metadata accessor for PresentmentFlow(uint64_t a1)
{
  uint64_t result;

  result = qword_100178160;
  if (!qword_100178160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PresentmentFlow);
  return result;
}

void sub_1000ECEAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = ")";
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000ECF58(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(v2 - 8) + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

void sub_1000ECF58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100178188)
  {
    v2 = type metadata accessor for PresentmentRequestInterpretation(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100178188);
  }
}

uint64_t sub_1000ECFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001782D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ECFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PresentmentRequestInterpretation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ED038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_1001782D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ED084(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_1000ED10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;

  v19 = (_QWORD *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_payloadProcessorBuilder);
  v19[3] = type metadata accessor for PayloadProcessorBuilder();
  v19[4] = &off_10016C988;
  *v19 = a7;
  v20 = (char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_identityReaderAuthenticator;
  v21 = type metadata accessor for IdentityReaderAuthenticator(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  a12[3] = a5;
  a12[4] = a2;
  a12[2] = a1;
  a12[11] = a4;
  sub_10002E94C(a3, (uint64_t)(a12 + 5), &qword_1001782F0);
  a12[12] = a6;
  *(_QWORD *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_credentialKeyManager) = a8;
  *(_QWORD *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_presentmentKeySelectionProvider) = a9;
  v22 = (_QWORD *)((char *)a12 + OBJC_IVAR____TtC7idcredd29PresentmentRequestInterpreter_readerMetadataProvider);
  *v22 = a10;
  v22[1] = a11;
  return a12;
}

uint64_t sub_1000ED234(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  NSObject *v39;
  void (*v40)(char *, _QWORD);
  uint64_t v41;
  uint64_t *v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  uint8_t *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  void (*v119)(_QWORD, _QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128[2];
  __int128 v129;
  uint64_t v130;
  _UNKNOWN **v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  _UNKNOWN **v135;

  v8 = v7;
  v123 = a3;
  *(_QWORD *)&v125 = type metadata accessor for Logger(0);
  v121 = *(_QWORD *)(v125 - 8);
  v15 = __chkstk_darwin(v125);
  v124 = (uint64_t)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v117 - v17;
  v19 = v8 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_requestInterpretation;
  v20 = type metadata accessor for PresentmentRequestInterpretation(0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  defaultLogger()(v21);
  v22 = swift_bridgeObjectRetain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  *(_QWORD *)&v126 = a2;
  v127 = a7;
  v122 = a6;
  if (v25)
  {
    v26 = swift_slowAlloc(22, -1);
    v118 = swift_slowAlloc(64, -1);
    v132 = v118;
    *(_DWORD *)v26 = 136315394;
    swift_bridgeObjectRetain(a1);
    v28 = Array.description.getter(v27, &type metadata for String);
    v119 = a5;
    v29 = v28;
    v120 = a4;
    v31 = v30;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v129 = sub_10003FA80(v29, v31, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 8, v26 + 4);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v26 + 12) = 2080;
    v117 = v26 + 14;
    v32 = (id)DCPresentmentTypeToString(a2);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v34 = a1;
    v36 = v35;

    a4 = v120;
    v37 = v33;
    a2 = v126;
    *(_QWORD *)&v129 = sub_10003FA80(v37, v36, (uint64_t *)&v132);
    a5 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 8, v117);
    v38 = v36;
    a1 = v34;
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "PresentmentFlow init with partitions = %s, type = %s", (uint8_t *)v26, 0x16u);
    v39 = v118;
    swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v40 = *(void (**)(char *, _QWORD))(v121 + 8);
  v41 = v125;
  v40(v18, v125);
  if (v123)
  {
    v119 = (void (*)(_QWORD, _QWORD))v40;
    v121 = a1;
    v42 = v123;
    defaultLogger()(v42);
    v43 = v42;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v118 = swift_slowAlloc(8, -1);
      *(_DWORD *)v46 = 138412290;
      v132 = v43;
      v47 = v43;
      v120 = a4;
      v48 = v47;
      a2 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v46 + 4);
      v49 = v118;
      v118->isa = (Class)v123;

      a4 = v120;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Presentment session options: %@", v46, 0xCu);
      v50 = sub_100008E84(&qword_100175350);
      swift_arrayDestroy(v49, 1, v50);
      swift_slowDealloc(v49, -1, -1);
      v51 = v46;
      v41 = v125;
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {

      v44 = v43;
    }

    v119(v124, v41);
    v52 = -[NSObject sessionEncryptionMode](v43, "sessionEncryptionMode");
    v53 = -[NSObject responseEncryptionMode](v43, "responseEncryptionMode");
    v54 = -[NSObject readerAuthenticationPolicy](v43, "readerAuthenticationPolicy");
    v55 = -[NSObject elementFallbackModes](v43, "elementFallbackModes");
    v56 = -[NSObject messageEncodingFormat](v43, "messageEncodingFormat");

    *(_QWORD *)(v8 + 56) = v52;
    *(_QWORD *)(v8 + 64) = v53;
    *(_QWORD *)(v8 + 72) = v54;
    *(_QWORD *)(v8 + 80) = v55;
    *(_QWORD *)(v8 + 88) = v56;
    *(_BYTE *)(v8 + 96) = 0;
    a1 = v121;
  }
  else
  {
    *(_QWORD *)(v8 + 88) = 0;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_BYTE *)(v8 + 96) = 1;
  }
  v57 = sub_10007A230(a1);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v8 + 16) = v57;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a4;
  if (a5)
  {
    swift_retain(a4);
    v58 = a5;
  }
  else
  {
    swift_retain_n(a4, 2);
    v59 = sub_100079C04();
    v134 = type metadata accessor for FeatureFlagProvider(0);
    v135 = (_UNKNOWN **)&protocol witness table for FeatureFlagProvider;
    sub_1000258FC(&v132);
    FeatureFlagProvider.init()();
    v60 = type metadata accessor for BiometricsHelper(0);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    v61 = BiometricsHelper.init()();
    v130 = type metadata accessor for DeviceInformationProvider(0);
    v131 = (_UNKNOWN **)&protocol witness table for DeviceInformationProvider;
    sub_1000258FC(&v129);
    DeviceInformationProvider.init()();
    v62 = type metadata accessor for BiometricStorage();
    v58 = (_QWORD *)swift_allocObject(v62, 160, 7);
    v58[2] = a4;
    sub_100025938((uint64_t)&v132, (uint64_t)(v58 + 8));
    v58[13] = v59;
    type metadata accessor for AppleIDVManager(0);
    sub_100112A6C((uint64_t *)v128);
    sub_10000CE40(&v132);
    sub_10002597C(v128, (uint64_t)(v58 + 3));
    v58[14] = v61;
    sub_10002597C(&v129, (uint64_t)(v58 + 15));
  }
  *(_QWORD *)(v8 + 40) = v58;
  v63 = type metadata accessor for ACLFetcher();
  v64 = swift_allocObject(v63, 64, 7);
  *(_QWORD *)(v64 + 16) = v58;
  type metadata accessor for AppleIDVManager(0);
  swift_retain(a5);
  swift_retain(v58);
  sub_100112A6C((uint64_t *)(v64 + 24));
  *(_QWORD *)(v8 + 48) = v64;
  v65 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)&v125 = v8 + 56;
  v66 = *(_QWORD *)(v8 + 24);
  v67 = *(_QWORD *)(v8 + 64);
  v68 = *(_QWORD *)(v8 + 72);
  v69 = *(_QWORD *)(v8 + 80);
  v70 = *(_QWORD *)(v8 + 88);
  v71 = *(_BYTE *)(v8 + 96);
  v72 = type metadata accessor for PresentmentSessionCryptor();
  v73 = swift_allocObject(v72, 176, 15);
  swift_defaultActor_initialize(v73);
  *(_QWORD *)(v73 + 168) = 0;
  *(_QWORD *)(v73 + 112) = v66;
  *(_QWORD *)(v73 + 120) = v65;
  *(_QWORD *)(v73 + 128) = v67;
  *(_QWORD *)(v73 + 136) = v68;
  *(_QWORD *)(v73 + 144) = v69;
  *(_QWORD *)(v73 + 152) = v70;
  *(_BYTE *)(v73 + 160) = v71;
  *(_QWORD *)(v8 + 104) = v73;
  v74 = type metadata accessor for SEPairingManager(0);
  swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v75 = v127;
  v76 = swift_retain(v127);
  v77 = SEPairingManager.init()(v76);
  v78 = type metadata accessor for GenericPasswordKeychainWrapper();
  v79 = swift_allocObject(v78, 16, 7);
  v80 = type metadata accessor for SyncableKeyStoreProvider();
  v81 = swift_allocObject(v80, 56, 7);
  v81[5].isa = (Class)v78;
  v81[6].isa = (Class)&protocol witness table for GenericPasswordKeychainWrapper;
  v81[2].isa = (Class)v79;
  v134 = v80;
  v135 = &off_10016AB90;
  v132 = v81;
  v82 = type metadata accessor for CredentialKeyManager();
  v83 = (_QWORD *)swift_allocObject(v82, 128, 7);
  v84 = sub_10002E040((uint64_t)&v132, v80);
  __chkstk_darwin(v84);
  v86 = (uint64_t *)((char *)&v117 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v87 + 16))(v86);
  v88 = *v86;
  swift_retain(v81);
  v89 = sub_10011A080(v75, v77, v88, v83);
  sub_10000CE40(&v132);
  swift_release(v81);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC7idcredd15PresentmentFlow_credentialKeyManager) = v89;
  v90 = *(_QWORD *)(v8 + 16);
  sub_10002E94C(v8 + 56, (uint64_t)&v132, &qword_1001782F0);
  v91 = *(_QWORD *)(v8 + 32);
  v92 = *(_QWORD *)(v8 + 104);
  v124 = *(_QWORD *)(v8 + 48);
  v93 = type metadata accessor for PresentmentKeySelectionProvider();
  v121 = swift_allocObject(v93, 16, 7);
  v94 = type metadata accessor for ReaderMetadataProvider(0);
  v95 = type metadata accessor for PayloadProcessorBuilder();
  v130 = v95;
  v131 = &off_10016C988;
  v96 = v122;
  *(_QWORD *)&v129 = v122;
  v97 = type metadata accessor for PresentmentRequestInterpreter(0);
  v98 = (_QWORD *)swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
  v99 = sub_10002E040((uint64_t)&v129, v95);
  v123 = &v117;
  __chkstk_darwin(v99);
  v101 = (uint64_t *)((char *)&v117 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v102 + 16))(v101);
  v116 = v94;
  v103 = v124;
  v104 = sub_1000ED10C(v90, v126, (uint64_t)&v132, v91, v92, v124, *v101, (uint64_t)v89, v121, v116, (uint64_t)&off_1001696D0, v98);
  swift_bridgeObjectRetain(v90);
  swift_retain(v91);
  swift_retain(v92);
  swift_retain(v103);
  swift_retain(v96);
  swift_retain(v89);
  sub_10000CE40(&v129);
  *(_QWORD *)(v8 + 112) = v104;
  v105 = *(_OWORD *)v125;
  v125 = *(_OWORD *)(v8 + 72);
  v126 = v105;
  v106 = *(_QWORD *)(v8 + 88);
  LOBYTE(v91) = *(_BYTE *)(v8 + 96);
  v108 = *(_QWORD *)(v8 + 24);
  v107 = *(_QWORD *)(v8 + 32);
  v109 = *(_QWORD *)(v8 + 104);
  v111 = *(_QWORD *)(v8 + 40);
  v110 = *(_QWORD *)(v8 + 48);
  v112 = type metadata accessor for PresentmentResponseBuilder();
  v113 = swift_allocObject(v112, 152, 7);
  *(_QWORD *)(v113 + 16) = v108;
  *(_OWORD *)(v113 + 24) = v126;
  *(_OWORD *)(v113 + 40) = v125;
  *(_QWORD *)(v113 + 56) = v106;
  *(_BYTE *)(v113 + 64) = v91;
  *(_QWORD *)(v113 + 72) = v107;
  *(_QWORD *)(v113 + 80) = v109;
  *(_QWORD *)(v113 + 120) = v95;
  *(_QWORD *)(v113 + 88) = v110;
  *(_QWORD *)(v113 + 96) = v96;
  *(_QWORD *)(v113 + 144) = v111;
  v114 = v127;
  *(_QWORD *)(v113 + 128) = &off_10016C988;
  *(_QWORD *)(v113 + 136) = v114;
  *(_QWORD *)(v8 + 120) = v113;
  swift_retain(v107);
  swift_retain(v109);
  swift_retain(v110);
  swift_retain(v111);
  return v8;
}

uint64_t sub_1000EDC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EDCF8, 0, 0);
}

uint64_t sub_1000EDCF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PresentmentFlow generateTransportKey", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[9];
  v6 = v1[10];
  v8 = v1[8];
  v9 = v1[4];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = *(_QWORD *)(v9 + 104);
  v1[11] = v10;
  swift_retain(v10);
  return swift_task_switch(sub_1000EDDE0, v10, 0);
}

uint64_t sub_1000EDDE0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100046E2C(v0[2], v0[3]);
  v0[12] = 0;
  v2 = v1;
  v4 = v3;
  swift_release(v0[11]);
  v0[13] = v4;
  v0[14] = v2;
  return swift_task_switch(sub_1000EDE54, 0, 0);
}

uint64_t sub_1000EDE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3._object = (void *)0x8000000100136FC0;
  v4._countAndFlagsBits = 0x6165306264333232;
  v4._object = (void *)0xE800000000000000;
  v3._countAndFlagsBits = 0xD00000000000004BLL;
  logMilestone(tag:description:)(v4, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
}

uint64_t sub_1000EDECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_10000745C();
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000057, 0x8000000100136E80, 0xD000000000000033, 0x8000000100130C10, 115);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EDFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t result;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a4;
  v35 = a3;
  v8 = type metadata accessor for ISO18013KnownDocTypes(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  v15 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v16 = v15((char *)&v34 - v13, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v8);
  v17 = ISO18013KnownDocTypes.rawValue.getter(v16);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v14, v8);
  if (v17 == a1 && v19 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_13;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, a1, a2, 0);
  swift_bridgeObjectRelease(v19);
  if ((v22 & 1) != 0)
  {
LABEL_13:
    *(_QWORD *)(a5 + 24) = &type metadata for MDLRequestValidator;
    *(_QWORD *)(a5 + 32) = &off_10016C2B0;
    v30 = &unk_10016BFD0;
    goto LABEL_14;
  }
  v23 = v15(v12, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v8);
  v24 = ISO18013KnownDocTypes.rawValue.getter(v23);
  v26 = v25;
  v20(v12, v8);
  if (v24 == a1 && v26 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, a1, a2, 0);
    result = swift_bridgeObjectRelease(v26);
    if ((v28 & 1) == 0)
    {
      *(_QWORD *)(a5 + 32) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      return result;
    }
  }
  *(_QWORD *)(a5 + 24) = &type metadata for JapanNationalIDRequestValidator;
  *(_QWORD *)(a5 + 32) = &off_10016B028;
  v30 = &unk_10016BFA8;
LABEL_14:
  v31 = (_QWORD *)swift_allocObject(v30, 48, 7);
  *(_QWORD *)a5 = v31;
  v31[2] = a1;
  v31[3] = a2;
  v32 = v34;
  v33 = v35;
  v31[4] = v35;
  v31[5] = v32;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRetain(v33);
}

uint64_t sub_1000EE1FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

ValueMetadata *type metadata accessor for PayloadProcessorAnalyticsRecorder()
{
  return &type metadata for PayloadProcessorAnalyticsRecorder;
}

char *sub_1000EE238(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for COSE_Sign1(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100008E84(&qword_100176828);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (uint64_t *)&v4[v11];
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *v13;
    v15 = v13[1];
    sub_100005A38(*v13, v15);
    *v12 = v14;
    v12[1] = v15;
    v16 = a3[6];
    v17 = &v4[v16];
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for ISO18013SessionTranscript(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[7];
    v21 = a3[8];
    v22 = &v4[v20];
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *(_QWORD *)v22 = *v23;
    *((_QWORD *)v22 + 1) = v24;
    v10 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)&v4[v21] = v10;
    v4[a3[9]] = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v24);
  }
  swift_retain(v10);
  return v4;
}

uint64_t sub_1000EE390(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for COSE_Sign1(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_100005AB0(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  v6 = a1 + a2[6];
  v7 = type metadata accessor for ISO18013SessionTranscript(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[8]));
}

char *sub_1000EE43C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = (uint64_t *)&a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v12 = *v11;
  v13 = v11[1];
  sub_100005A38(*v11, v13);
  *v10 = v12;
  v10[1] = v13;
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for ISO18013SessionTranscript(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = *(_QWORD *)&a2[v19];
  *(_QWORD *)&a1[v19] = v23;
  a1[a3[9]] = a2[a3[9]];
  swift_bridgeObjectRetain(v22);
  swift_retain(v23);
  return a1;
}

char *sub_1000EE56C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = (uint64_t *)&a1[v12];
  v14 = (uint64_t *)&a2[v12];
  v15 = *v14;
  v16 = v14[1];
  sub_100005A38(*v14, v16);
  v17 = *v13;
  v18 = v13[1];
  *v13 = v15;
  v13[1] = v16;
  sub_100005AB0(v17, v18);
  v19 = a3[6];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for ISO18013SessionTranscript(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[7];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  v27 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a3[8];
  v29 = *(_QWORD *)&a1[v28];
  v30 = *(_QWORD *)&a2[v28];
  *(_QWORD *)&a1[v28] = v30;
  swift_retain(v30);
  swift_release(v29);
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1000EE710(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ISO18013SessionTranscript(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1000EE814(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for COSE_Sign1(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100008E84(&qword_100176828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a1[v12 + 8];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  sub_100005AB0(v13, v14);
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for ISO18013SessionTranscript(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v24 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = *(_QWORD *)&a1[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  swift_release(v26);
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t sub_1000EE990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE99C);
}

uint64_t sub_1000EE99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100008E84(&qword_100176828);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for ISO18013SessionTranscript(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000EEA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EEA58);
}

uint64_t sub_1000EEA58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100008E84(&qword_100176828);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for ISO18013SessionTranscript(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for IdentityReaderAuthenticator(uint64_t a1)
{
  uint64_t result;

  result = qword_100178350;
  if (!qword_100178350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityReaderAuthenticator);
  return result;
}

void sub_1000EEB40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_10006D79C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10012BBE0;
    v4 = type metadata accessor for ISO18013SessionTranscript(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_10012BBF8;
      v6[4] = &unk_10012BC10;
      v6[5] = &unk_10012BC28;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000EEBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EEBF8(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_1000EEBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  _QWORD v20[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_1000150E8(a1, &qword_100174E30);
    v10 = 7168;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
    {
LABEL_6:
      v17 = 0;
      return swift_task_create(v10, v17, a4, a2, a3);
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v10 = v18 | 0x1C00;
    v11 = *(_QWORD *)(a3 + 16);
    if (!v11)
      goto LABEL_6;
  }
  v12 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v11);
  swift_unknownObjectRetain(v11);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  v16 = v15;
  swift_unknownObjectRelease(v11, v15);
  if (!(v16 | v14))
    goto LABEL_6;
  v20[0] = 0;
  v20[1] = 0;
  v17 = v20;
  v20[2] = v14;
  v20[3] = v16;
  return swift_task_create(v10, v17, a4, a2, a3);
}

uint64_t sub_1000EED28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2[31] = a1;
  v2[32] = v1;
  v3 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason(0);
  v2[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[34] = v4;
  v2[35] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84((uint64_t *)&unk_100177B40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v5);
  v2[37] = swift_task_alloc(v5);
  v6 = type metadata accessor for DIPError.Code(0);
  v2[38] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[39] = v7;
  v2[40] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001783A0);
  v2[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IDCSAnalytics.ReaderAuthOutcome(0);
  v2[42] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[43] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[44] = swift_task_alloc(v11);
  v2[45] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v2[46] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[47] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[48] = swift_task_alloc(v14);
  v2[49] = swift_task_alloc(v14);
  v2[50] = swift_task_alloc(v14);
  v2[51] = swift_task_alloc(v14);
  v2[52] = swift_task_alloc(v14);
  v2[53] = swift_task_alloc(v14);
  v2[54] = swift_task_alloc(v14);
  v2[55] = swift_task_alloc(v14);
  v2[56] = swift_task_alloc(v14);
  v2[57] = swift_task_alloc(v14);
  v2[58] = swift_task_alloc(v14);
  v15 = sub_100008E84(&qword_100176828);
  v2[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for COSE_Sign1(0);
  v2[60] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[61] = v17;
  v2[62] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EEF30, 0, 0);
}

void sub_1000EEF30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  NSString v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  void (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[2];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 472);
  sub_10002E908(*(_QWORD *)(v0 + 256), v3, &qword_100176828);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_1000150E8(*(_QWORD *)(v0 + 472), &qword_100176828);
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "no reader auth structure provided, skipping reader authentication", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 328);
    v149 = *(_QWORD *)(v0 + 344);
    v150 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 272);
    v16 = *(_QWORD *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    type metadata accessor for IDCSAnalytics(0);
    v17 = (uint64_t *)(v16 + *(int *)(type metadata accessor for IdentityReaderAuthenticator(0) + 28));
    v18 = *v17;
    v19 = v17[1];
    v20 = v150;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v149 + 104))(v12, enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:), v150);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v13, enum case for IDCSAnalytics.ReaderAuthFailureReason.noAuthProvided(_:), v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v15);
    static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(v18, v19, v12, v13);
    sub_1000150E8(v13, &qword_1001783A0);
    v21 = *(void (**)(uint64_t, uint64_t))(v149 + 8);
    v22 = v12;
LABEL_5:
    v23 = v20;
LABEL_18:
    v21(v22, v23);
    v54 = *(_QWORD *)(v0 + 464);
    v53 = *(_QWORD *)(v0 + 472);
    v55 = *(_QWORD *)(v0 + 448);
    v56 = *(_QWORD *)(v0 + 456);
    v58 = *(_QWORD *)(v0 + 432);
    v57 = *(_QWORD *)(v0 + 440);
    v60 = *(_QWORD *)(v0 + 416);
    v59 = *(_QWORD *)(v0 + 424);
    v140 = *(_QWORD *)(v0 + 408);
    v141 = *(_QWORD *)(v0 + 400);
    v142 = *(_QWORD *)(v0 + 392);
    v143 = *(_QWORD *)(v0 + 384);
    v144 = *(_QWORD *)(v0 + 360);
    v145 = *(_QWORD *)(v0 + 352);
    v146 = *(_QWORD *)(v0 + 328);
    v147 = *(_QWORD *)(v0 + 320);
    v148 = *(_QWORD *)(v0 + 296);
    v149 = *(_QWORD *)(v0 + 288);
    v150 = *(_QWORD *)(v0 + 280);
    v61 = *(_OWORD **)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 496));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v140);
    swift_task_dealloc(v141);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    *(_OWORD *)((char *)v61 + 89) = 0u;
    v61[4] = 0u;
    v61[5] = 0u;
    v61[2] = 0u;
    v61[3] = 0u;
    *v61 = 0u;
    v61[1] = 0u;
    v62 = *(void (**)(void))(v0 + 8);
LABEL_19:
    v62();
    return;
  }
  v24 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 488) + 32))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
  v25 = COSE_Sign1.x509Chain.getter(v24);
  if (!v25)
    goto LABEL_15;
  v26 = v25;
  if (!*(_QWORD *)(v25 + 16))
  {
    swift_bridgeObjectRelease(v25);
LABEL_15:
    v33 = *(_QWORD *)(v0 + 320);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 104))(v33, enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:), *(_QWORD *)(v0 + 304));
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v35, v36, 0, 0);
    v38 = 0xD000000000000014;
    v131 = 76;
    strcpy((char *)v130, "authenticate()");
    HIBYTE(v130[1]) = -18;
    v39 = 0x8000000100137010;
    v40 = v33;
    v41 = v34;
    goto LABEL_16;
  }
  v27 = decodeCertificateChain(fromDER:)(v25);
  *(_QWORD *)(v0 + 504) = v27;
  swift_bridgeObjectRelease(v26);
  if (!((unint64_t)v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v27);
    if (v28)
      goto LABEL_10;
    goto LABEL_42;
  }
  if (v27 < 0)
    v123 = v27;
  else
    v123 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v27);
  if (!_CocoaArrayWrapper.endIndex.getter(v123))
  {
LABEL_42:
    v125 = *(_QWORD *)(v0 + 312);
    v124 = *(_QWORD *)(v0 + 320);
    v126 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRelease_n(v27, 2);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v125 + 104))(v124, enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:), v126);
    v127 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v128 = type metadata accessor for DIPError(0);
    v129 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v37 = swift_allocError(v128, v129, 0, 0);
    v38 = 0xD000000000000018;
    v131 = 83;
    strcpy((char *)v130, "authenticate()");
    HIBYTE(v130[1]) = -18;
    v39 = 0x80000001001371C0;
    v40 = v124;
    v41 = v127;
LABEL_16:
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v38, v39, 0, v40, 0, v41, 0xD000000000000056, 0x8000000100137030, v130[0], v130[1], v131);
    swift_willThrow(v42);
    v43 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v43, "BOOLForKey:", v44);

    if (v45)
    {
      v47 = *(_QWORD *)(v0 + 488);
      v48 = *(_QWORD *)(v0 + 496);
      v49 = *(_QWORD *)(v0 + 480);
      v50 = *(_QWORD *)(v0 + 448);
      v51 = *(_QWORD *)(v0 + 368);
      v52 = *(_QWORD *)(v0 + 376);
      defaultLogger()(v46);
      DIPLogError(_:message:log:)(v37, 0xD000000000000039, 0x80000001001370F0, v50);
      swift_errorRelease(v37);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      v21 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v22 = v48;
      v23 = v49;
      goto LABEL_18;
    }
    v64 = *(_QWORD *)(v0 + 304);
    v63 = *(_QWORD *)(v0 + 312);
    v65 = *(_QWORD *)(v0 + 296);
    swift_getErrorValue(v37, v0 + 232, v0 + 112);
    Error.dipErrorCode.getter(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v65, 1, v64);
    if ((_DWORD)v66 != 1)
    {
      v68 = *(_QWORD *)(v0 + 304);
      v67 = *(_QWORD *)(v0 + 312);
      v69 = *(_QWORD *)(v0 + 288);
      sub_10002E908(*(_QWORD *)(v0 + 296), v69, (uint64_t *)&unk_100177B40);
      v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 88))(v69, v68);
      if ((_DWORD)v70 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
        || (_DWORD)v70 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
      {
        v79 = sub_1000150E8(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_100177B40);
        v80 = defaultLogger()(v79);
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Encountered invalid signature during reader auth", v83, 2u);
          swift_slowDealloc(v83, -1, -1);
        }
        v84 = *(_QWORD *)(v0 + 392);
        v86 = *(_QWORD *)(v0 + 368);
        v85 = *(_QWORD *)(v0 + 376);

        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
        goto LABEL_30;
      }
      if ((_DWORD)v70 == enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
      {
        v71 = defaultLogger()(v70);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Encountered revoked reader auth certiifcate", v74, 2u);
          swift_slowDealloc(v74, -1, -1);
        }
        v75 = *(_QWORD *)(v0 + 376);
        v76 = *(_QWORD *)(v0 + 384);
        v77 = *(_QWORD *)(v0 + 368);
        v78 = *(_QWORD *)(v0 + 296);

        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
        sub_1000150E8(v78, (uint64_t *)&unk_100177B40);
LABEL_30:
        LODWORD(v150) = 1;
LABEL_33:
        v92 = *(_QWORD *)(v0 + 344);
        v91 = *(_QWORD *)(v0 + 352);
        v94 = *(_QWORD *)(v0 + 328);
        v93 = *(_QWORD *)(v0 + 336);
        v96 = *(_QWORD *)(v0 + 272);
        v95 = *(_QWORD *)(v0 + 280);
        v98 = *(_QWORD *)(v0 + 256);
        v97 = *(_QWORD *)(v0 + 264);
        sub_1000F3534(v37, v95);
        v99 = (uint64_t *)(v98 + *(int *)(type metadata accessor for IdentityReaderAuthenticator(0) + 28));
        v100 = *v99;
        v148 = v37;
        v149 = v99[1];
        v101 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
        if (!(_DWORD)v150)
          v101 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v92 + 104))(v91, *v101, v93);
        type metadata accessor for IDCSAnalytics(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v94, v95, v97);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v94, 0, 1, v97);
        static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(v100, v149, v91, v94);
        sub_1000150E8(v94, &qword_1001783A0);
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
        v102 = *(_QWORD *)(v0 + 488);
        v103 = *(_QWORD *)(v0 + 496);
        v20 = *(_QWORD *)(v0 + 480);
        if ((_DWORD)v150)
        {
          v133 = *(_QWORD *)(v0 + 472);
          v134 = *(_QWORD *)(v0 + 464);
          v135 = *(_QWORD *)(v0 + 456);
          v136 = *(_QWORD *)(v0 + 448);
          v137 = *(_QWORD *)(v0 + 440);
          v138 = *(_QWORD *)(v0 + 432);
          v139 = *(_QWORD *)(v0 + 424);
          v140 = *(_QWORD *)(v0 + 416);
          v141 = *(_QWORD *)(v0 + 408);
          v142 = *(_QWORD *)(v0 + 400);
          v143 = *(_QWORD *)(v0 + 392);
          v144 = *(_QWORD *)(v0 + 384);
          v145 = *(_QWORD *)(v0 + 360);
          v104 = *(_QWORD *)(v0 + 320);
          v146 = *(_QWORD *)(v0 + 352);
          v147 = *(_QWORD *)(v0 + 328);
          v105 = *(_QWORD *)(v0 + 304);
          v149 = *(_QWORD *)(v0 + 296);
          v150 = *(_QWORD *)(v0 + 288);
          v106 = *(_QWORD *)(v0 + 272);
          v132 = *(_QWORD *)(v0 + 280);
          v107 = *(_QWORD *)(v0 + 264);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 312) + 104))(*(_QWORD *)(v0 + 320), enum case for DIPError.Code.internalError(_:), v105);
          swift_errorRetain(v148);
          v108 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v109 = type metadata accessor for DIPError(0);
          v110 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v109, v110, 0, 0);
          v111 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v148, v104, 0, v108, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 195);
          swift_willThrow(v111);
          swift_errorRelease(v148);
          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v132, v107);
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v20);
          swift_task_dealloc(v103);
          swift_task_dealloc(v133);
          swift_task_dealloc(v134);
          swift_task_dealloc(v135);
          swift_task_dealloc(v136);
          swift_task_dealloc(v137);
          swift_task_dealloc(v138);
          swift_task_dealloc(v139);
          swift_task_dealloc(v140);
          swift_task_dealloc(v141);
          swift_task_dealloc(v142);
          swift_task_dealloc(v143);
          swift_task_dealloc(v144);
          swift_task_dealloc(v145);
          swift_task_dealloc(v146);
          swift_task_dealloc(v147);
          swift_task_dealloc(v104);
          swift_task_dealloc(v149);
          swift_task_dealloc(v150);
          swift_task_dealloc(v132);
          v62 = *(void (**)(void))(v0 + 8);
          goto LABEL_19;
        }
        v112 = *(_QWORD *)(v0 + 272);
        v113 = *(_QWORD *)(v0 + 280);
        v114 = *(_QWORD *)(v0 + 264);
        swift_errorRelease(v148);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v113, v114);
        v21 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        v22 = v103;
        goto LABEL_5;
      }
      v66 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304));
    }
    v87 = *(_QWORD *)(v0 + 448);
    v89 = *(_QWORD *)(v0 + 368);
    v88 = *(_QWORD *)(v0 + 376);
    v90 = *(_QWORD *)(v0 + 296);
    defaultLogger()(v66);
    DIPLogError(_:message:log:)(v37, 0xD000000000000055, 0x8000000100137090, v87);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
    sub_1000150E8(v90, (uint64_t *)&unk_100177B40);
    LODWORD(v150) = 0;
    goto LABEL_33;
  }
LABEL_10:
  if ((v27 & 0xC000000000000001) != 0)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(v27 + 32);
LABEL_13:
    *(_QWORD *)(v0 + 512) = v29;
    swift_bridgeObjectRelease(v27);
    v30 = sub_100030018();
    *(_QWORD *)(v0 + 520) = v30;
    v31 = v30;
    v32 = sub_100031244();
    *(_QWORD *)(v0 + 528) = v32;
    v115 = (uint64_t)v32;
    v116 = *(_QWORD *)(v0 + 256);
    v117 = type metadata accessor for IdentityReaderAuthenticator(0);
    *(_QWORD *)(v0 + 536) = v117;
    v118 = *(int *)(v117 + 28);
    *(_DWORD *)(v0 + 568) = v118;
    v119 = (uint64_t *)(v116 + v118);
    v120 = *v119;
    v121 = v119[1];
    v122 = (_QWORD *)swift_task_alloc(dword_1001783AC);
    *(_QWORD *)(v0 + 544) = v122;
    *v122 = v0;
    v122[1] = sub_1000EFBFC;
    sub_1000F18FC(v120, v121, v27, v31, v115);
    return;
  }
  __break(1u);
}

uint64_t sub_1000EFBFC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 544);
  v6 = *(_QWORD *)(*v3 + 528);
  v7 = *(_QWORD *)(*v3 + 520);
  *(_BYTE *)(v4 + 572) = a1;
  *(_QWORD *)(v4 + 552) = a2;
  *(_QWORD *)(v4 + 560) = v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 504));
    v8 = sub_1000F1034;
  }
  else
  {
    v8 = sub_1000EFC98;
  }
  return swift_task_switch(v8, 0, 0);
}

unint64_t sub_1000EFC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  NSString v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(void);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t result;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = swift_retain(v1);
  v3 = defaultLogger()(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Verified reader certificate chain", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 560);
  v8 = *(_QWORD *)(v0 + 512);
  v9 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 376);

  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  sub_1000F24B4(v8);
  v13 = v7;
  if (v7)
  {
    v14 = *(void **)(v0 + 512);
    v16 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 320);
    v17 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 504));
    swift_release(v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for DIPError.Code.internalError(_:), v17);
    swift_errorRetain(v13);
    v18 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v19 = type metadata accessor for DIPError(0);
    v20 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v21 = swift_allocError(v19, v20, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v13, v15, 0, v18, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 109);
    swift_willThrow(v22);
    swift_release(v1);

    swift_errorRelease(v13);
    goto LABEL_15;
  }
  v23 = (_OWORD *)(v0 + 16);
  v24._countAndFlagsBits = 0xD000000000000028;
  v24._object = (void *)0x8000000100137160;
  v25._countAndFlagsBits = 0x3138303730663863;
  v25._object = (void *)0xE800000000000000;
  logMilestone(tag:description:)(v25, v24);
  v27 = defaultLogger()(v26);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Verified reader auth signature with reader leaf certificate", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }
  v31 = *(void **)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 456);
  v33 = *(_QWORD *)(v0 + 368);

  v12(v32, v33);
  v34 = v31;
  sub_10007A334((uint64_t *)(v0 + 16));
  v210 = v12;
  v35 = *(_QWORD *)(v0 + 16);
  v223 = *(_QWORD *)(v0 + 24);
  v226 = *(_QWORD *)(v0 + 32);
  v218 = *(_QWORD *)(v0 + 48);
  v221 = *(_QWORD *)(v0 + 40);
  v216 = *(_QWORD *)(v0 + 56);

  sub_10002E94C(v0 + 32, v0 + 200, &qword_100174860);
  sub_10002E94C(v0 + 200, v0 + 168, &qword_100174860);
  if (!*(_QWORD *)(v0 + 176)
    || (*(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 168),
        v36 = sub_10002E870(),
        Collection.nilIfEmpty.getter((_QWORD *)(v0 + 216), &type metadata for String, v36),
        v37 = *(_QWORD *)(v0 + 224),
        v38 = swift_bridgeObjectRelease(v37),
        !v37))
  {
    v227 = *(void **)(v0 + 512);
    v67 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 320);
    v68 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 504));
    *(_OWORD *)(v0 + 152) = *v23;
    sub_1000C12B0(v0 + 152);
    sub_1000C12B0(v0 + 200);
    sub_10002E94C(v0 + 48, v0 + 136, &qword_100174860);
    sub_1000C12B0(v0 + 136);
    swift_release(v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 104))(v66, enum case for DIPError.Code.idcsMissingReaderOrganization(_:), v68);
    v69 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v70 = type metadata accessor for DIPError(0);
    v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v21 = swift_allocError(v70, v71, 0, 0);
    v72 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x8000000100137190, 0, v66, 0, v69, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 114);
    swift_willThrow(v72);
    swift_release(v1);

LABEL_15:
    v73 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v74 = String._bridgeToObjectiveC()();
    v75 = objc_msgSend(v73, "BOOLForKey:", v74);

    if (v75)
    {
      v78 = *(_QWORD *)(v0 + 488);
      v77 = *(_QWORD *)(v0 + 496);
      v79 = *(_QWORD *)(v0 + 480);
      v80 = *(_QWORD *)(v0 + 448);
      v81 = *(_QWORD *)(v0 + 368);
      v82 = *(_QWORD *)(v0 + 376);
      defaultLogger()(v76);
      DIPLogError(_:message:log:)(v21, 0xD000000000000039, 0x80000001001370F0, v80);
      swift_errorRelease(v21);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v80, v81);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
LABEL_34:
      v185 = 0;
      v214 = 0;
      v216 = 0;
      v223 = 0;
      v226 = 0;
      v218 = 0;
      v221 = 0;
      v180 = 0;
      v181 = 0;
      v178 = 0;
      v179 = 0;
      v176 = 0;
      v177 = 0;
      v183 = 0;
LABEL_35:
      v136 = *(_QWORD *)(v0 + 464);
      v135 = *(_QWORD *)(v0 + 472);
      v137 = *(_QWORD *)(v0 + 448);
      v138 = *(_QWORD *)(v0 + 456);
      v140 = *(_QWORD *)(v0 + 432);
      v139 = *(_QWORD *)(v0 + 440);
      v142 = *(_QWORD *)(v0 + 416);
      v141 = *(_QWORD *)(v0 + 424);
      v187 = *(_QWORD *)(v0 + 408);
      v189 = *(_QWORD *)(v0 + 400);
      v191 = *(_QWORD *)(v0 + 392);
      v193 = *(_QWORD *)(v0 + 384);
      v195 = *(_QWORD *)(v0 + 360);
      v197 = *(_QWORD *)(v0 + 352);
      v200 = *(_QWORD *)(v0 + 328);
      v203 = *(_QWORD *)(v0 + 320);
      v206 = *(_QWORD *)(v0 + 296);
      v208 = *(_QWORD *)(v0 + 288);
      v212 = *(_QWORD *)(v0 + 280);
      v143 = *(_QWORD *)(v0 + 248);
      swift_task_dealloc(*(_QWORD *)(v0 + 496));
      swift_task_dealloc(v135);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v187);
      swift_task_dealloc(v189);
      swift_task_dealloc(v191);
      swift_task_dealloc(v193);
      swift_task_dealloc(v195);
      swift_task_dealloc(v197);
      swift_task_dealloc(v200);
      swift_task_dealloc(v203);
      swift_task_dealloc(v206);
      swift_task_dealloc(v208);
      swift_task_dealloc(v212);
      *(_QWORD *)v143 = v185;
      *(_QWORD *)(v143 + 8) = v214;
      *(_QWORD *)(v143 + 16) = v223;
      *(_QWORD *)(v143 + 24) = v226;
      *(_QWORD *)(v143 + 32) = v221;
      *(_QWORD *)(v143 + 40) = v218;
      *(_QWORD *)(v143 + 48) = v216;
      *(_QWORD *)(v143 + 56) = v181;
      *(_QWORD *)(v143 + 64) = v180;
      *(_QWORD *)(v143 + 72) = v179;
      *(_QWORD *)(v143 + 80) = v178;
      *(_QWORD *)(v143 + 88) = v177;
      *(_QWORD *)(v143 + 96) = v176;
      *(_BYTE *)(v143 + 104) = v183;
      v131 = *(uint64_t (**)(void))(v0 + 8);
      return v131();
    }
    v83 = *(_QWORD *)(v0 + 304);
    v84 = *(_QWORD *)(v0 + 312);
    v85 = *(_QWORD *)(v0 + 296);
    swift_getErrorValue(v21, v0 + 232, v0 + 112);
    Error.dipErrorCode.getter(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v83);
    if ((_DWORD)v86 == 1)
      goto LABEL_18;
    v91 = *(_QWORD *)(v0 + 304);
    v92 = *(_QWORD *)(v0 + 312);
    v93 = *(_QWORD *)(v0 + 288);
    sub_10002E908(*(_QWORD *)(v0 + 296), v93, (uint64_t *)&unk_100177B40);
    v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 88))(v93, v91);
    if ((_DWORD)v94 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
      || (_DWORD)v94 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
    {
      v103 = sub_1000150E8(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_100177B40);
      v104 = defaultLogger()(v103);
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v105, v106))
      {
        v107 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "Encountered invalid signature during reader auth", v107, 2u);
        swift_slowDealloc(v107, -1, -1);
      }
      v108 = *(_QWORD *)(v0 + 392);
      v109 = *(_QWORD *)(v0 + 368);
      v110 = *(_QWORD *)(v0 + 376);

      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v109);
    }
    else
    {
      if ((_DWORD)v94 != enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
      {
        v86 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304));
LABEL_18:
        v87 = *(_QWORD *)(v0 + 448);
        v88 = *(_QWORD *)(v0 + 368);
        v89 = *(_QWORD *)(v0 + 376);
        v90 = *(_QWORD *)(v0 + 296);
        defaultLogger()(v86);
        DIPLogError(_:message:log:)(v21, 0xD000000000000055, 0x8000000100137090, v87);
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
        sub_1000150E8(v90, (uint64_t *)&unk_100177B40);
        v219 = 0;
LABEL_29:
        v111 = *(_QWORD *)(v0 + 344);
        v112 = *(_QWORD *)(v0 + 352);
        v113 = *(_QWORD *)(v0 + 328);
        v114 = *(_QWORD *)(v0 + 336);
        v116 = *(_QWORD *)(v0 + 272);
        v115 = *(_QWORD *)(v0 + 280);
        v118 = *(_QWORD *)(v0 + 256);
        v117 = *(_QWORD *)(v0 + 264);
        sub_1000F3534(v21, v115);
        v119 = (uint64_t *)(v118 + *(int *)(type metadata accessor for IdentityReaderAuthenticator(0) + 28));
        v224 = v119[1];
        v228 = *v119;
        v120 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
        if (!v219)
          v120 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v111 + 104))(v112, *v120, v114);
        type metadata accessor for IDCSAnalytics(0);
        v222 = v21;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v113, v115, v117);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v117);
        static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(v228, v224, v112, v113);
        sub_1000150E8(v113, &qword_1001783A0);
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v114);
        v121 = *(_QWORD *)(v0 + 488);
        v122 = *(_QWORD *)(v0 + 496);
        v123 = *(_QWORD *)(v0 + 480);
        if (v219)
        {
          v184 = *(_QWORD *)(v0 + 472);
          v186 = *(_QWORD *)(v0 + 464);
          v188 = *(_QWORD *)(v0 + 456);
          v190 = *(_QWORD *)(v0 + 448);
          v192 = *(_QWORD *)(v0 + 440);
          v194 = *(_QWORD *)(v0 + 432);
          v196 = *(_QWORD *)(v0 + 424);
          v199 = *(_QWORD *)(v0 + 416);
          v202 = *(_QWORD *)(v0 + 408);
          v205 = *(_QWORD *)(v0 + 400);
          v207 = *(_QWORD *)(v0 + 392);
          v211 = *(_QWORD *)(v0 + 384);
          v215 = *(_QWORD *)(v0 + 360);
          v217 = *(_QWORD *)(v0 + 352);
          v124 = *(_QWORD *)(v0 + 320);
          v220 = *(_QWORD *)(v0 + 328);
          v225 = *(_QWORD *)(v0 + 296);
          v229 = *(_QWORD *)(v0 + 288);
          v125 = *(_QWORD *)(v0 + 272);
          v182 = *(_QWORD *)(v0 + 280);
          v126 = *(_QWORD *)(v0 + 264);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 104))(v124, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 304));
          swift_errorRetain(v222);
          v127 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
          v128 = type metadata accessor for DIPError(0);
          v129 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          swift_allocError(v128, v129, 0, 0);
          v130 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v222, v124, 0, v127, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 195);
          swift_willThrow(v130);
          swift_errorRelease(v222);
          (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v182, v126);
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v123);
          swift_task_dealloc(v122);
          swift_task_dealloc(v184);
          swift_task_dealloc(v186);
          swift_task_dealloc(v188);
          swift_task_dealloc(v190);
          swift_task_dealloc(v192);
          swift_task_dealloc(v194);
          swift_task_dealloc(v196);
          swift_task_dealloc(v199);
          swift_task_dealloc(v202);
          swift_task_dealloc(v205);
          swift_task_dealloc(v207);
          swift_task_dealloc(v211);
          swift_task_dealloc(v215);
          swift_task_dealloc(v217);
          swift_task_dealloc(v220);
          swift_task_dealloc(v124);
          swift_task_dealloc(v225);
          swift_task_dealloc(v229);
          swift_task_dealloc(v182);
          v131 = *(uint64_t (**)(void))(v0 + 8);
          return v131();
        }
        v133 = *(_QWORD *)(v0 + 272);
        v132 = *(_QWORD *)(v0 + 280);
        v134 = *(_QWORD *)(v0 + 264);
        swift_errorRelease(v222);
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v132, v134);
        (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v123);
        goto LABEL_34;
      }
      v95 = defaultLogger()(v94);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v98 = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Encountered revoked reader auth certiifcate", v98, 2u);
        swift_slowDealloc(v98, -1, -1);
      }
      v100 = *(_QWORD *)(v0 + 376);
      v99 = *(_QWORD *)(v0 + 384);
      v101 = *(_QWORD *)(v0 + 368);
      v102 = *(_QWORD *)(v0 + 296);

      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
      sub_1000150E8(v102, (uint64_t *)&unk_100177B40);
    }
    v219 = 1;
    goto LABEL_29;
  }
  v214 = v35;
  v39 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 360);
  v41 = *(_QWORD *)(v0 + 368);
  v42 = *(_QWORD *)(v0 + 344);
  v43 = *(_QWORD *)(v0 + 328);
  v201 = *(_QWORD *)(v0 + 336);
  v204 = *(_QWORD *)(v0 + 264);
  v44 = (uint64_t *)(*(_QWORD *)(v0 + 256) + *(int *)(v0 + 568));
  v198 = *(_QWORD *)(v0 + 272);
  defaultLogger()(v38);
  v45 = swift_task_alloc(32);
  *(_QWORD *)(v45 + 16) = v23;
  Logger.sensitive(_:)(sub_1000F52CC, v45);
  swift_task_dealloc(v45);
  v210(v39, v41);
  type metadata accessor for IDCSAnalytics(0);
  v46 = *v44;
  v47 = v44[1];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v40, enum case for IDCSAnalytics.ReaderAuthOutcome.authenticated(_:), v201);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 56))(v43, 1, 1, v204);
  static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(v46, v47, v40, v43);
  sub_1000150E8(v43, &qword_1001783A0);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v40, v201);
  v49 = defaultLogger()(v48);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Reader authenticated offline successfully", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }
  v53 = *(_QWORD *)(v0 + 552);
  v54 = *(_QWORD *)(v0 + 536);
  v55 = *(_QWORD *)(v0 + 440);
  v56 = *(_QWORD *)(v0 + 368);
  v57 = *(_QWORD *)(v0 + 256);

  v210(v55, v56);
  v58 = *(int *)(v54 + 32);
  v59 = swift_release(*(_QWORD *)(v57 + v58));
  *(_QWORD *)(v57 + v58) = v53;
  if (v53)
  {
    v60 = (uint64_t *)(v0 + 424);
    v61 = defaultLogger()(v59);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      v65 = "Ongoing OCSP check in the background";
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v62, v63, v65, v64, 2u);
      v146 = *v60;
      swift_slowDealloc(v64, -1, -1);
      goto LABEL_42;
    }
  }
  else
  {
    v60 = (uint64_t *)(v0 + 432);
    v145 = defaultLogger()(v59);
    v62 = Logger.logObject.getter(v145);
    v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      v65 = "No OCSP check in the background";
      goto LABEL_40;
    }
  }
  v146 = *v60;
LABEL_42:
  v147 = *(_BYTE *)(v0 + 572);
  v148 = *(_QWORD *)(v0 + 368);

  v210(v146, v148);
  if ((v147 & 1) != 0)
  {
    v149 = 0;
  }
  else
  {
    v150 = *(_QWORD *)(v0 + 16);
    v151 = *(_QWORD *)(v0 + 24);
    v149 = 1;
    if (v150 != 0x2E6173742E6C646DLL || v151 != 0xEF766F672E736864)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v150, v151, 0x2E6173742E6C646DLL, 0xEF766F672E736864, 0) & 1) != 0)
        v149 = 1;
      else
        v149 = 2;
    }
  }
  v152 = *(_QWORD *)(v0 + 504);
  *(_BYTE *)(*(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 536) + 36)) = v149;
  v153 = *(_QWORD *)(v0 + 504);
  if (v152 >> 62)
  {
    if (v153 < 0)
      v155 = *(_QWORD *)(v0 + 504);
    else
      v155 = v153 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 504));
    v154 = _CocoaArrayWrapper.endIndex.getter(v155);
    swift_bridgeObjectRelease(v153);
  }
  else
  {
    v154 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v156 = *(_QWORD *)(v0 + 504);
  if (v154 < 2)
  {
    v158 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 504));
    v159 = defaultLogger()(v158);
    v160 = Logger.logObject.getter(v159);
    v161 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v161))
    {
      v162 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v160, v161, "Reader certificate is a root CA", v162, 2u);
      swift_slowDealloc(v162, -1, -1);
    }
    v164 = *(_QWORD *)(v0 + 488);
    v163 = *(_QWORD *)(v0 + 496);
    v165 = *(_QWORD *)(v0 + 480);
    v166 = *(_QWORD *)(v0 + 408);
    v167 = *(_QWORD *)(v0 + 368);
    swift_release(v1);

    v210(v166, v167);
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v163, v165);
    v170 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v175 = 0;
    goto LABEL_64;
  }
  result = v154 - 1;
  if ((v156 & 0xC000000000000001) != 0)
  {
    v157 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, *(_QWORD *)(v0 + 504));
    v156 = *(_QWORD *)(v0 + 504);
LABEL_63:
    swift_bridgeObjectRelease(v156);
    v168 = v157;
    sub_10007A334((uint64_t *)(v0 + 64));
    v169 = *(_QWORD *)(v0 + 488);
    v209 = *(_QWORD *)(v0 + 480);
    v213 = *(_QWORD *)(v0 + 496);
    v170 = *(_QWORD *)(v0 + 64);
    v171 = *(_QWORD *)(v0 + 72);
    v172 = *(_QWORD *)(v0 + 80);
    v173 = *(_QWORD *)(v0 + 88);
    v174 = *(_QWORD *)(v0 + 96);
    v175 = *(_QWORD *)(v0 + 104);

    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v213, v209);
LABEL_64:
    v176 = v175;
    v177 = v174;
    v178 = v173;
    v179 = v172;
    v180 = v171;
    v181 = v170;
    v185 = *(_QWORD *)(v0 + 512);
    v183 = *(_BYTE *)(*(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 536) + 36));
    goto LABEL_35;
  }
  if (result < *(_QWORD *)((v156 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v157 = *(id *)(v156 + 8 * result + 32);
    goto LABEL_63;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F1034()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;

  v1 = v0[70];
  v2 = (void *)v0[64];
  v3 = v0[40];
  v4 = enum case for DIPError.Code.internalError(_:);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[39] + 104))(v3, enum case for DIPError.Code.internalError(_:), v0[38]);
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v108 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v110 = v6;
  v7 = swift_allocError(v6, v108, 0, 0);
  v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100137130, v1, v3, 0, v5, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 100);
  swift_willThrow(v8);

  swift_errorRelease(v1);
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  LOBYTE(v5) = objc_msgSend(v9, "BOOLForKey:", v10);

  if ((v5 & 1) != 0)
  {
    v12 = v0[61];
    v13 = v0[62];
    v14 = v0[60];
    v15 = v0[56];
    v16 = v0[46];
    v17 = v0[47];
    defaultLogger()(v11);
    DIPLogError(_:message:log:)(v7, 0xD000000000000039, 0x80000001001370F0, v15);
    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
LABEL_20:
    v70 = v0[58];
    v69 = v0[59];
    v71 = v0[56];
    v72 = v0[57];
    v74 = v0[54];
    v73 = v0[55];
    v76 = v0[52];
    v75 = v0[53];
    v93 = v0[51];
    v95 = v0[50];
    v97 = v0[49];
    v99 = v0[48];
    v100 = v0[45];
    v102 = v0[44];
    v105 = v0[41];
    v107 = v0[40];
    v109 = v0[37];
    v111 = v0[36];
    v114 = v0[35];
    v77 = (_OWORD *)v0[31];
    swift_task_dealloc(v0[62]);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v114);
    *(_OWORD *)((char *)v77 + 89) = 0u;
    v77[4] = 0u;
    v77[5] = 0u;
    v77[2] = 0u;
    v77[3] = 0u;
    *v77 = 0u;
    v77[1] = 0u;
    v65 = (uint64_t (*)(void))v0[1];
    return v65();
  }
  v19 = v0[38];
  v18 = v0[39];
  v20 = v0[37];
  swift_getErrorValue(v7, v0 + 29, v0 + 14);
  Error.dipErrorCode.getter(v0[15], v0[16]);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1, v19);
  v101 = v4;
  if ((_DWORD)v21 == 1)
    goto LABEL_4;
  v28 = v0[38];
  v27 = v0[39];
  v29 = v0[36];
  sub_10002E908(v0[37], v29, (uint64_t *)&unk_100177B40);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 88))(v29, v28);
  if ((_DWORD)v30 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:)
    || (_DWORD)v30 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    v26 = v7;
    v39 = sub_1000150E8(v0[37], (uint64_t *)&unk_100177B40);
    v40 = defaultLogger()(v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Encountered invalid signature during reader auth", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }
    v44 = v0[49];
    v46 = v0[46];
    v45 = v0[47];

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  }
  else
  {
    if ((_DWORD)v30 != enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
    {
      v21 = (*(uint64_t (**)(_QWORD, _QWORD))(v0[39] + 8))(v0[36], v0[38]);
LABEL_4:
      v22 = v0[56];
      v24 = v0[46];
      v23 = v0[47];
      v25 = v0[37];
      defaultLogger()(v21);
      DIPLogError(_:message:log:)(v7, 0xD000000000000055, 0x8000000100137090, v22);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      sub_1000150E8(v25, (uint64_t *)&unk_100177B40);
      v112 = 0;
      v26 = v7;
      goto LABEL_15;
    }
    v26 = v7;
    v31 = defaultLogger()(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Encountered revoked reader auth certiifcate", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    v35 = v0[47];
    v36 = v0[48];
    v37 = v0[46];
    v38 = v0[37];

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    sub_1000150E8(v38, (uint64_t *)&unk_100177B40);
  }
  v112 = 1;
LABEL_15:
  v48 = v0[43];
  v47 = v0[44];
  v50 = v0[41];
  v49 = v0[42];
  v52 = v0[34];
  v51 = v0[35];
  v53 = v0[32];
  v54 = v0[33];
  sub_1000F3534(v26, v51);
  v55 = (uint64_t *)(v53 + *(int *)(type metadata accessor for IdentityReaderAuthenticator(0) + 28));
  v56 = v55[1];
  v103 = *v55;
  v106 = v26;
  v57 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.rejected(_:);
  if (!v112)
    v57 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOutcome.unauthenticated(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v48 + 104))(v47, *v57, v49);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v51, v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v50, 0, 1, v54);
  static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(v103, v56, v47, v50);
  sub_1000150E8(v50, &qword_1001783A0);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  v58 = v0[61];
  v59 = v0[62];
  v60 = v0[60];
  if (!v112)
  {
    v66 = v0[34];
    v67 = v0[35];
    v68 = v0[33];
    swift_errorRelease(v106);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
    goto LABEL_20;
  }
  v81 = v0[59];
  v82 = v0[58];
  v83 = v0[57];
  v84 = v0[56];
  v85 = v0[55];
  v86 = v0[54];
  v87 = v0[53];
  v88 = v0[52];
  v89 = v0[51];
  v90 = v0[50];
  v91 = v0[49];
  v92 = v0[48];
  v94 = v0[45];
  v96 = v0[44];
  v61 = v0[40];
  v98 = v0[41];
  v104 = v0[37];
  v113 = v0[36];
  v62 = v0[34];
  v79 = v0[33];
  v80 = v0[35];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[39] + 104))(v61, v101, v0[38]);
  swift_errorRetain(v106);
  v63 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v110, v108, 0, 0);
  v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v106, v61, 0, v63, 0xD000000000000056, 0x8000000100137030, 0x69746E6568747561, 0xEE00292865746163, 195);
  swift_willThrow(v64);
  swift_errorRelease(v106);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v80, v79);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
  swift_task_dealloc(v59);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  swift_task_dealloc(v61);
  swift_task_dealloc(v104);
  swift_task_dealloc(v113);
  swift_task_dealloc(v80);
  v65 = (uint64_t (*)(void))v0[1];
  return v65();
}

uint64_t sub_1000F18FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v8);
  v5[12] = swift_task_alloc(v8);
  v9 = sub_100008E84(&qword_1001783B8);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPError(0);
  v5[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[15] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v12);
  v5[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for Logger(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v15);
  v5[21] = swift_task_alloc(v15);
  v5[22] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000F1A14, 0, 0);
}

uint64_t sub_1000F1A14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t **v10;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Verifying trust with Apple issued roots", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[22];
  v7 = v1[18];
  v8 = v1[19];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[23] = (uint64_t)v9;
  v9(v6, v7);
  v10 = (uint64_t **)swift_task_alloc(dword_1001783C4);
  v1[24] = (uint64_t)v10;
  *v10 = v1;
  v10[1] = (uint64_t *)sub_1000F1B04;
  return sub_1000F38E8(v1[4], v1[5], v1[8], v1[6]);
}

uint64_t sub_1000F1B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 192);
  v5 = *v2;
  *(_QWORD *)(v5 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000F1D0C, 0, 0);
  v7 = *(_QWORD *)(v5 + 168);
  v8 = *(_QWORD *)(v5 + 160);
  v10 = *(_QWORD *)(v5 + 128);
  v9 = *(_QWORD *)(v5 + 136);
  v12 = *(_QWORD *)(v5 + 96);
  v11 = *(_QWORD *)(v5 + 104);
  v13 = *(_QWORD *)(v5 + 88);
  swift_task_dealloc(*(_QWORD *)(v5 + 176));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(BOOL, uint64_t))(v5 + 8))(*(_QWORD *)(v5 + 200) == 0, a1);
}

uint64_t sub_1000F1C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *v2;
  *(_QWORD *)(v5 + 216) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1000F23F4, 0, 0);
  v7 = *(_QWORD *)(v5 + 168);
  v8 = *(_QWORD *)(v5 + 160);
  v10 = *(_QWORD *)(v5 + 128);
  v9 = *(_QWORD *)(v5 + 136);
  v12 = *(_QWORD *)(v5 + 96);
  v11 = *(_QWORD *)(v5 + 104);
  v13 = *(_QWORD *)(v5 + 88);
  swift_task_dealloc(*(_QWORD *)(v5 + 176));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(BOOL, uint64_t))(v5 + 8))(*(_QWORD *)(v5 + 200) == 0, a1);
}

uint64_t sub_1000F1D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 16) = sub_1000F496C(*(_QWORD *)(v0 + 200));
  v4 = sub_100008E84(&qword_100174890);
  v5 = swift_dynamicCast(v3, v0 + 16, v4, v1, 6);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 104);
    v6(v11, 0, 1, v9);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v7, v11, v9);
    defaultLogger()(v12);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v14 = v13(v8, v7, v9);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
    v19 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 112);
    v91 = v13;
    if (v17)
    {
      v93 = *(_QWORD *)(v0 + 160);
      v89 = *(_QWORD *)(v0 + 144);
      v87 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v94 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      v26 = Error.localizedDescription.getter(v22, v25);
      v28 = v27;
      *(_QWORD *)(v0 + 24) = sub_10003FA80(v26, v27, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v23 + 4);
      swift_bridgeObjectRelease(v28);
      v92 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v92(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to verify trust with Apple issued roots: %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v87(v93, v89);
    }
    else
    {
      v41 = *(_QWORD *)(v0 + 144);
      v92 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v92(*(_QWORD *)(v0 + 128), v22);

      v18(v19, v41);
    }
    v43 = *(_QWORD *)(v0 + 88);
    v42 = *(_QWORD *)(v0 + 96);
    v44 = *(_QWORD *)(v0 + 72);
    v45 = *(_QWORD *)(v0 + 80);
    v46 = sub_100008E84(&qword_1001783C8);
    v47 = *(_QWORD *)(v45 + 72);
    v48 = *(unsigned __int8 *)(v45 + 80);
    v49 = (v48 + 32) & ~v48;
    v50 = swift_allocObject(v46, v49 + 4 * v47, v48 | 7);
    *(_OWORD *)(v50 + 16) = xmmword_10012AB30;
    v51 = v50 + v49;
    v52 = *(void (**)(void))(v45 + 104);
    ((void (*)(uint64_t, _QWORD, uint64_t))v52)(v51, enum case for DIPError.Code.idcsUnknownDocumentType(_:), v44);
    v90 = v51 + v47;
    v52();
    v88 = v51 + 2 * v47;
    v52();
    v86 = v51 + 3 * v47;
    v53 = ((uint64_t (*)(void))v52)();
    DIPError.code.getter(v53);
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
    v54(v43, v51, v44);
    v55 = sub_1000058C8(&qword_1001783D0, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.Code, (uint64_t)&protocol conformance descriptor for DIPError.Code);
    LOBYTE(v42) = dispatch thunk of static Equatable.== infix(_:_:)(v43, v42, v44, v55);
    v56 = *(void (**)(uint64_t, uint64_t, __n128))(v45 + 8);
    v57 = swift_bridgeObjectRetain(v50);
    v56(v43, v44, v57);
    if ((v42 & 1) != 0)
      goto LABEL_12;
    v59 = *(_QWORD *)(v0 + 88);
    v58 = *(_QWORD *)(v0 + 96);
    v60 = *(_QWORD *)(v0 + 72);
    v54(v59, v90, v60);
    LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)(v59, v58, v60, v55);
    ((void (*)(uint64_t, uint64_t))v56)(v59, v60);
    if ((v58 & 1) != 0
      || (v61 = v54,
          v63 = *(_QWORD *)(v0 + 88),
          v62 = *(_QWORD *)(v0 + 96),
          v64 = *(_QWORD *)(v0 + 72),
          v61(v63, v88, v64),
          LOBYTE(v62) = dispatch thunk of static Equatable.== infix(_:_:)(v63, v62, v64, v55),
          ((void (*)(uint64_t, uint64_t))v56)(v63, v64),
          (v62 & 1) != 0))
    {
LABEL_12:
      v65 = *(_QWORD *)(v0 + 96);
      v66 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease(v50);
      ((void (*)(uint64_t, uint64_t))v56)(v65, v66);
      swift_setDeallocating(v50);
      swift_arrayDestroy(v51, *(_QWORD *)(v50 + 16), v66);
      swift_deallocClassInstance(v50, 32, 7);
      v67 = v92;
LABEL_13:
      v68 = *(_QWORD *)(v0 + 200);
      v69 = *(_QWORD *)(v0 + 136);
      v70 = *(_QWORD *)(v0 + 112);
      v71 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v70, v71, 0, 0);
      v73 = v91(v72, v69, v70);
      swift_willThrow(v73);
      swift_errorRelease(v68);
      v67(v69, v70);
      v74 = *(_QWORD *)(v0 + 168);
      v75 = *(_QWORD *)(v0 + 160);
      v77 = *(_QWORD *)(v0 + 128);
      v76 = *(_QWORD *)(v0 + 136);
      v79 = *(_QWORD *)(v0 + 96);
      v78 = *(_QWORD *)(v0 + 104);
      v80 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 176));
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
    v82 = *(_QWORD *)(v0 + 88);
    v81 = *(_QWORD *)(v0 + 96);
    v83 = *(_QWORD *)(v0 + 72);
    v61(v82, v86, v83);
    v84 = dispatch thunk of static Equatable.== infix(_:_:)(v82, v81, v83, v55);
    ((void (*)(uint64_t, uint64_t))v56)(v82, v83);
    swift_bridgeObjectRelease(v50);
    ((void (*)(uint64_t, uint64_t))v56)(v81, v83);
    swift_setDeallocating(v50);
    swift_arrayDestroy(v51, *(_QWORD *)(v50 + 16), v83);
    swift_deallocClassInstance(v50, 32, 7);
    v67 = v92;
    if ((v84 & 1) != 0)
      goto LABEL_13;
    v85 = *(_QWORD *)(v0 + 200);
    v92(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
    v31 = swift_errorRelease(v85);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 104);
    v6(v30, 1, 1, *(_QWORD *)(v0 + 112));
    swift_errorRelease(v29);
    v31 = sub_1000150E8(v30, &qword_1001783B8);
  }
  v32 = defaultLogger()(v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Verifying trust with non Apple issued roots", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
  v36 = *(void (**)(uint64_t, uint64_t))(v0 + 184);
  v37 = *(_QWORD *)(v0 + 168);
  v38 = *(_QWORD *)(v0 + 144);

  v36(v37, v38);
  v39 = (_QWORD *)swift_task_alloc(dword_1001783C4);
  *(_QWORD *)(v0 + 208) = v39;
  *v39 = v0;
  v39[1] = sub_1000F1C08;
  return sub_1000F38E8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000F23F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = sub_1000F496C(v1);
  swift_willThrow(v2);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000F24B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD v122[2];
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[2];
  char *v157;

  v2 = v1;
  v153 = a1;
  v155 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v155 - 8);
  v4 = __chkstk_darwin(v155);
  v137 = (char *)v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v136 = (char *)v122 - v7;
  v8 = __chkstk_darwin(v6);
  v135 = (char *)v122 - v9;
  __chkstk_darwin(v8);
  v157 = (char *)v122 - v10;
  v132 = type metadata accessor for COSESignatureValidator(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v138 = (char *)v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100008E84(&qword_1001767F0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v139 = (char *)v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_100175A80);
  __chkstk_darwin(v13);
  v144 = (uint64_t)v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ISO18013SessionTranscript(0);
  v141 = *(_QWORD *)(v15 - 8);
  v142 = v15;
  __chkstk_darwin(v15);
  v143 = (char *)v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for ISO18013ReaderAuthentication(0);
  v140 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v148 = (char *)v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008E84(&qword_100175318);
  __chkstk_darwin(v18);
  v149 = (char *)v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PublicKeyAlgorithm(0);
  v151 = *(_QWORD *)(v20 - 8);
  v152 = v20;
  __chkstk_darwin(v20);
  v150 = (char *)v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for Logger(0);
  v22 = *(_QWORD *)(v154 - 8);
  v23 = __chkstk_darwin(v154);
  v130 = (char *)v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v129 = (char *)v122 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)v122 - v27;
  v29 = sub_100008E84(&qword_100176828);
  __chkstk_darwin(v29);
  v31 = (char *)v122 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for COSE_Sign1(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = v2;
  sub_10002E908(v2, (uint64_t)v31, &qword_100176828);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    sub_1000150E8((uint64_t)v31, &qword_100176828);
    v36 = v157;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v157, enum case for DIPError.Code.idcsMissingReaderAuth(_:), v155);
    v37 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100137220, 0, v36, 0, v37, 0xD000000000000056, 0x8000000100137030, 0xD00000000000001CLL, 0x8000000100137250, 293);
    return swift_willThrow(v40);
  }
  else
  {
    v128 = v3;
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v35, v31, v32);
    v43 = defaultLogger()(v42);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    v46 = os_log_type_enabled(v44, v45);
    v47 = v157;
    if (v46)
    {
      v48 = v157;
      v49 = v33;
      v50 = v35;
      v51 = v32;
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Verifying reader signature", v52, 2u);
      v53 = v52;
      v32 = v51;
      v35 = v50;
      v33 = v49;
      v47 = v48;
      swift_slowDealloc(v53, -1, -1);
    }

    v54 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
    v55 = v54(v28, v154);
    v56 = COSE_Sign1.signature.getter(v55);
    v58 = v57;
    v59 = SecCertificateRef.rawECPublicKeyData()(v56);
    if (v60 >> 60 == 15)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v47, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v155);
      v61 = v35;
      v62 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v63 = type metadata accessor for DIPError(0);
      v64 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v63, v64, 0, 0);
      v65 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100137270, 0, v47, 0, v62, 0xD000000000000056, 0x8000000100137030, 0xD00000000000001CLL, 0x8000000100137250, 299);
      swift_willThrow(v65);
      sub_100005AB0(v56, v58);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v61, v32);
    }
    else
    {
      v66 = v60;
      v122[1] = v54;
      v126 = v59;
      v125 = v33;
      v127 = v35;
      v67 = (uint64_t)v149;
      SecCertificateRef.publicKeyAlgorithm()();
      v69 = v151;
      v68 = v152;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v67, 1, v152) == 1)
      {
        sub_1000150E8(v67, &qword_100175318);
        (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v47, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v155);
        v70 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v71 = type metadata accessor for DIPError(0);
        v72 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v71, v72, 0, 0);
        v73 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000025, 0x80000001001372A0, 0, v47, 0, v70, 0xD000000000000056, 0x8000000100137030, 0xD00000000000001CLL, 0x8000000100137250, 302);
        swift_willThrow(v73);
        sub_10000B164(v126, v66);
        sub_100005AB0(v56, v58);
        return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v32);
      }
      else
      {
        v153 = v32;
        v123 = v56;
        v124 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v150, v67, v68);
        v74 = type metadata accessor for IdentityReaderAuthenticator(0);
        v75 = v145;
        v76 = v143;
        (*(void (**)(char *, unint64_t, uint64_t))(v141 + 16))(v143, v145 + *(int *)(v74 + 24), v142);
        v77 = (uint64_t *)(v75 + *(int *)(v74 + 20));
        v78 = *v77;
        v79 = v77[1];
        sub_100005A38(*v77, v79);
        v80 = v148;
        ISO18013ReaderAuthentication.init(sessionTranscript:itemsRequestBytes:)(v76, v78, v79);
        v81 = type metadata accessor for CBOREncoder(0);
        swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
        v82 = ((uint64_t (*)(void))CBOREncoder.init())();
        v83 = enum case for ISO18013PresentmentType.physical(_:);
        v84 = type metadata accessor for ISO18013PresentmentType(0);
        v85 = *(_QWORD *)(v84 - 8);
        v86 = v144;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 104))(v144, v83, v84);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v84);
        CBOREncoder.presentmentType.setter(v86);
        swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
        v87 = ((uint64_t (*)(void))CBOREncoder.init())();
        v88 = sub_1000058C8(&qword_1001783B0, (uint64_t (*)(uint64_t))&type metadata accessor for ISO18013ReaderAuthentication, (uint64_t)&protocol conformance descriptor for ISO18013ReaderAuthentication);
        v89 = v146;
        v90 = v147;
        v91 = dispatch thunk of CBOREncoder.encode<A>(_:)(v80, v147, v88);
        if (v89)
        {
          swift_release(v82);
          swift_release(v87);
          sub_10000B164(v126, v66);
          sub_100005AB0(v123, v124);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v80, v90);
          (*(void (**)(char *, uint64_t))(v151 + 8))(v150, v152);
          return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v153);
        }
        else
        {
          v149 = (char *)v82;
          v93 = v91;
          v94 = v92;
          swift_release(v87);
          v156[0] = v93;
          v156[1] = v94;
          swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
          v95 = sub_100005A38(v93, v94);
          v96 = CBOREncoder.init()(v95);
          v97 = sub_10006A238();
          v98 = sub_10006A27C();
          v99 = v139;
          CBOREncodedCBOR.init(value:tag:encoder:)(v156, 1, v96, &type metadata for Data, v97, v98);
          v144 = v93;
          v145 = v94;
          v100 = v134;
          v101 = CBOREncodedCBOR.dataValue.getter(v134);
          v146 = v102;
          (*(void (**)(char *, uint64_t))(v133 + 8))(v99, v100);
          v103 = v47;
          v104 = *(char **)(v128 + 104);
          v105 = v155;
          ((void (*)(char *, _QWORD, uint64_t))v104)(v47, enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:), v155);
          v106 = v135;
          ((void (*)(char *, _QWORD, uint64_t))v104)(v135, enum case for DIPError.Code.idcsMisformattedReaderAuthCerts(_:), v105);
          v107 = v136;
          ((void (*)(char *, _QWORD, uint64_t))v104)(v136, enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:), v105);
          v108 = v137;
          v143 = v104;
          ((void (*)(char *, _QWORD, uint64_t))v104)(v137, enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:), v105);
          v109 = COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(v103, v106, v107, v108);
          v110 = COSE_Sign1.algorithmIdentifier.getter(v109);
          v111 = v123;
          v112 = v124;
          v113 = v126;
          v114 = v146;
          COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(v123, v124, v126, v66, v150, v110, v101, v146);
          v115 = v153;
          sub_100005AB0(v101, v114);
          swift_release(v149);
          sub_10000B164(v113, v66);
          sub_100005AB0(v111, v112);
          sub_100005AB0(v144, v145);
          v116 = v127;
          v118 = v151;
          v117 = v152;
          v119 = v140;
          v121 = v147;
          v120 = v148;
          (*(void (**)(char *, uint64_t))(v131 + 8))(v138, v132);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
          (*(void (**)(char *, uint64_t))(v118 + 8))(v150, v117);
          return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v116, v115);
        }
      }
    }
  }
}

uint64_t sub_1000F349C(_OWORD *a1)
{
  Swift::String v2;
  __int128 v3;
  _OWORD v5[3];
  __int128 v6;

  *(_QWORD *)&v5[0] = 0;
  *((_QWORD *)&v5[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v6 = v5[0];
  v2._object = (void *)0x80000001001371E0;
  v2._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v2);
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  _print_unlocked<A, B>(_:_:)(v5, &v6, &type metadata for CertificateSubjectDistinguishedNames, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v6;
}

uint64_t sub_1000F3534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for DIPError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001783B8);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  swift_errorRetain(a1);
  v15 = sub_100008E84(&qword_100174890);
  v16 = swift_dynamicCast(v10, &v30, v15, v11, 6);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v16)
  {
    v17(v10, 1, 1, v11);
    sub_1000150E8((uint64_t)v10, &qword_1001783B8);
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.other(_:);
    goto LABEL_5;
  }
  v17(v10, 0, 1, v11);
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  DIPError.code.getter(v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v19 == enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.misformattedCertificate(_:);
LABEL_5:
    v21 = *v20;
    v22 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason(0);
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
    v24 = a2;
    v25 = v21;
    return v23(v24, v25, v22);
  }
  if (v19 == enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unsupportedIssuerAuthAlgorithm(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsMissingReaderAuth(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.noAuthProvided(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsMissingReaderAuthCerts(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.missingCertificate(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.untrustedCertificate(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsMissingReaderOrganization(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.missingOrganization(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsUnknownReaderAuthAlgorithm(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unsupportedReaderAuthAlgorithm(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsMisformattedReaderAuthSignature(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.misformattedSignature(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsInvalidReaderAuthSignature(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.invalidSignature(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.revokedCertificate(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsExpiredReaderAuthCertificate(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.expiredCertificate(_:);
    goto LABEL_5;
  }
  if (v19 == enum case for DIPError.Code.idcsUnknownDocumentType(_:))
  {
    v20 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthFailureReason.unknownDocumentType(_:);
    goto LABEL_5;
  }
  v27 = enum case for DIPError.Code.idcsNotYetValidReaderAuthCertificate(_:);
  v28 = v19;
  v22 = type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason(0);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
  if (v28 != v27)
  {
    v23(a2, enum case for IDCSAnalytics.ReaderAuthFailureReason.other(_:), v22);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v25 = enum case for IDCSAnalytics.ReaderAuthFailureReason.notYetValidCertificate(_:);
  v24 = a2;
  return v23(v24, v25, v22);
}

uint64_t sub_1000F38E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPCertUsage(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100174E30);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001783D8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPOIDVerifier(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[15] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v13);
  v4[17] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000F39D8, 0, 0);
}

uint64_t sub_1000F39D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::OpaquePointer v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[11];
  v1 = v0[12];
  v4 = (void *)v0[3];
  v3._rawValue = (void *)v0[4];
  v5 = v0[2];
  DIPOIDVerifier.init()();
  DIPOIDVerifier.setTrustedRoots(_:)(v3);
  v6 = v1 + *(int *)(v2 + 48);
  sub_1000F3E80(v1, v6, v5, v4);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to DIPOIDVerifier.verifyChain(_:forUsage:)[1]);
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_1000F3B08;
  return DIPOIDVerifier.verifyChain(_:forUsage:)(v0[5], v6);
}

uint64_t sub_1000F3B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000F3DD4;
  else
    v5 = sub_1000F3B74;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F3B74()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  if ((sub_1000F41CC() & 1) != 0
    || (v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v2._object = (void *)0x8000000100137360,
        v2._countAndFlagsBits = 0xD000000000000026,
        v3 = NSUserDefaults.internalBool(forKey:)(v2),
        v1,
        v3))
  {
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v38 = v9;
    v39 = *(void **)(v0 + 152);
    v32 = v10;
    v33 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 48);
    v31 = v12;
    v34 = *(_QWORD *)(v0 + 64);
    v35 = *(_QWORD *)(v0 + 40);
    v36 = *(_QWORD *)(v0 + 16);
    v37 = *(_QWORD *)(v0 + 24);
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v5, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v8, v12);
    v14 = *(unsigned __int8 *)(v6 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = (v33 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(unsigned __int8 *)(v11 + 80);
    v18 = (v17 + v16 + 8) & ~v17;
    v19 = (v34 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = swift_allocObject(&unk_10016C030, v19 + 16, v14 | v17 | 7);
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v20 + v15, v4, v7);
    *(_QWORD *)(v20 + v16) = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v20 + v18, v32, v31);
    v21 = (_QWORD *)(v20 + v19);
    *v21 = v36;
    v21[1] = v37;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v37);
    v22 = sub_1000EEBF8(v38, (uint64_t)&unk_1001783E8, v20, (uint64_t)&type metadata for ServerRevocationResponse);

  }
  else
  {

    v22 = 0;
  }
  v24 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 72);
  v28 = *(_QWORD *)(v0 + 80);
  sub_1000150E8(v27, &qword_1001783D8);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v25);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
}

uint64_t sub_1000F3DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000150E8(*(_QWORD *)(v0 + 96), &qword_1001783D8);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  swift_willThrow(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F3E80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  unsigned int *v22;
  uint64_t v23;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v32 = a1;
  v33 = a2;
  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_1001752B0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  swift_bridgeObjectRetain(a4);
  ISO18013KnownDocTypes.init(rawValue:)(a3, a4);
  v16 = type metadata accessor for ISO18013KnownDocTypes(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    sub_10002E908((uint64_t)v15, (uint64_t)v13, &qword_1001752B0);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v13, v16);
    if (v18 == enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:))
    {
      v19 = enum case for DIPCertUsage.iso18013ReaderAuth(_:);
      v20 = type metadata accessor for DIPCertUsage(0);
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104);
      v21(v32, v19, v20);
      v22 = (unsigned int *)&enum case for DIPCertUsage.iso18013ReaderAuthNoNetwork(_:);
LABEL_6:
      v21(v33, *v22, v20);
      return sub_1000150E8((uint64_t)v15, &qword_1001752B0);
    }
    if (v18 == enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:))
    {
      v23 = enum case for DIPCertUsage.japanNationalIDCardReaderAuth(_:);
      v20 = type metadata accessor for DIPCertUsage(0);
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104);
      v21(v32, v23, v20);
      v22 = (unsigned int *)&enum case for DIPCertUsage.japanNationalIDCardReaderAuthNoNetwork(_:);
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
  }
  sub_1000150E8((uint64_t)v15, &qword_1001752B0);
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v35);
  v34 = 0xD00000000000001BLL;
  v35 = 0x8000000100137410;
  v25._countAndFlagsBits = a3;
  v25._object = a4;
  String.append(_:)(v25);
  v26 = v34;
  v27 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.idcsUnknownDocumentType(_:), v6);
  v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v29 = type metadata accessor for DIPError(0);
  v30 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v29, v30, 0, 0);
  v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v26, v27, 0, v9, 0, v28, 0xD000000000000056, 0x8000000100137030, 0xD000000000000010, 0x8000000100137430, 420);
  return swift_willThrow(v31);
}

uint64_t sub_1000F41CC()
{
  __SecTrust *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  id v3;
  id v4;
  uint64_t v5;
  char v6;
  char v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v1 = SecTrustCopyResult(v0);
  if (!v1)
    goto LABEL_9;
  v2 = v1;
  v3 = -[__CFDictionary objectForKey:](v1, "objectForKey:", kSecTrustRevocationChecked);
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v9);

    swift_unknownObjectRelease(v4, v5);
  }
  else
  {

    memset(v9, 0, sizeof(v9));
  }
  sub_10002E94C((uint64_t)v9, (uint64_t)v10, &qword_1001755C8);
  if (!v11)
  {
    sub_1000150E8((uint64_t)v10, &qword_1001755C8);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_9:
    v6 = 1;
    return v6 & 1;
  }
  v6 = v8 ^ 1;
  return v6 & 1;
}

uint64_t sub_1000F42B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  v9 = type metadata accessor for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v8[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPError.Code(0);
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v8[14] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[15] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[16] = swift_task_alloc(v15);
  v8[17] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000F4378, 0, 0);
}

uint64_t sub_1000F4378()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::Bool v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2._object = (void *)0x8000000100137360;
  v2._countAndFlagsBits = 0xD000000000000026;
  v3 = NSUserDefaults.internalBool(forKey:)(v2);

  if (v3)
  {
    v5 = defaultLogger()(v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Simulating OCSP failure due to internal defaults setting", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for DIPError.Code.internalError(_:), v14);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v18 = swift_allocError(v16, v17, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000038, 0x8000000100137390, 0, v12, 0, v15, 0xD000000000000056, 0x8000000100137030, 0xD00000000000003ELL, 0x80000001001373D0, 270);
    swift_willThrow(v19);
    v20 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 128);
    v30 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 48);
    sub_1000F496C(v18);
    type metadata accessor for IDCSAnalytics(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.revoked(_:), v23);
    static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)(v25, v24, v21);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_willThrow(v26);
    swift_errorRelease(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v28 = (_QWORD *)swift_task_alloc(async function pointer to DIPOIDVerifier.verifyChain(_:forUsage:)[1]);
    *(_QWORD *)(v0 + 144) = v28;
    *v28 = v0;
    v28[1] = sub_1000F4674;
    return DIPOIDVerifier.verifyChain(_:forUsage:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_1000F4674(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000F4880;
  else
    v5 = sub_1000F46E0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F46E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = sub_1000F41CC();
  if ((v1 & 1) != 0)
  {
    v2 = defaultLogger()(v1);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reader certificate might have revoked certificate when making request", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 112);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v18 = 1;
    v9 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.inconclusive(_:);
  }
  else
  {
    v18 = 0;
    v9 = (unsigned int *)&enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.notRevoked(_:);
  }
  v10 = *(void **)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 48);
  v16 = *(char **)(v0 + 16);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v12, *v9, v14);
  static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)(v15, v13, v12);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v14);
  *v16 = v18;
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F4880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  sub_1000F496C(v1);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.revoked(_:), v5);
  static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)(v7, v6, v3);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_willThrow(v8);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F496C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  char *v41;
  uint8_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  unsigned int *v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  _QWORD v96[3];
  char v97[8];
  _QWORD v98[3];
  char v99[16];

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v94 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v88 = (char *)&v81 - v6;
  v7 = type metadata accessor for Logger(0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v87 = (char *)&v81 - v12;
  v13 = __chkstk_darwin(v11);
  v86 = (char *)&v81 - v14;
  v15 = __chkstk_darwin(v13);
  v85 = (char *)&v81 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v81 - v17;
  v19 = sub_100008E84((uint64_t *)&unk_100177B40);
  v20 = __chkstk_darwin(v19);
  v91 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v81 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v81 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v81 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v81 - v31;
  v33 = static DIPOIDVerifier.getSpecificCertificateError(_:)(a1);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v93 = v32;
  v34(v32, 1, 1, v2);
  v92 = v33;
  swift_getErrorValue(v33, v99, v98);
  Error.dipErrorCode.getter(v98[1], v98[2]);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v36 = v35(v30, 1, v2);
  v95 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v35;
  if ((_DWORD)v36 == 1)
    goto LABEL_2;
  v49 = v86;
  v81 = v24;
  v50 = v87;
  v84 = v34;
  v82 = v30;
  sub_10002E908((uint64_t)v30, (uint64_t)v27, (uint64_t *)&unk_100177B40);
  v83 = v3;
  v51 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v27, v2);
  v48 = v2;
  if ((_DWORD)v51 == enum case for DIPError.Code.revokedCertificate(_:))
  {
    v52 = defaultLogger()(v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Encountered revoked reader auth certificate", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v89 + 8))(v49, v90);
    v44 = (uint64_t)v93;
    sub_1000150E8((uint64_t)v93, (uint64_t *)&unk_100177B40);
    v56 = (unsigned int *)&enum case for DIPError.Code.idcsRevokedReaderAuthCertificate(_:);
LABEL_13:
    v37 = v83;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v83 + 104))(v44, *v56, v2);
    v84((char *)v44, 0, 1, v2);
LABEL_14:
    v43 = v94;
    v46 = v92;
LABEL_15:
    v45 = (uint64_t)v91;
    v47 = (uint64_t)v82;
    goto LABEL_16;
  }
  if ((_DWORD)v51 == enum case for DIPError.Code.expiredCertificate(_:))
  {
    v57 = v85;
    v58 = defaultLogger()(v51);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Encountered expired reader auth certificate", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v90);
    v44 = (uint64_t)v93;
    sub_1000150E8((uint64_t)v93, (uint64_t *)&unk_100177B40);
    v56 = (unsigned int *)&enum case for DIPError.Code.idcsExpiredReaderAuthCertificate(_:);
    goto LABEL_13;
  }
  v71 = v84;
  if ((_DWORD)v51 == enum case for DIPError.Code.notYetValidCertificate(_:))
  {
    v72 = defaultLogger()(v51);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Encountered not yet valid reader auth certificate", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v89 + 8))(v50, v90);
    v44 = (uint64_t)v93;
    sub_1000150E8((uint64_t)v93, (uint64_t *)&unk_100177B40);
    v37 = v83;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v83 + 104))(v44, enum case for DIPError.Code.idcsNotYetValidReaderAuthCertificate(_:), v48);
    v71((char *)v44, 0, 1, v48);
    goto LABEL_14;
  }
  if ((_DWORD)v51 == enum case for DIPError.Code.idcsUnknownDocumentType(_:))
  {
    v76 = defaultLogger()(v51);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Encountered unknown document type", v79, 2u);
      swift_slowDealloc(v79, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v89 + 8))(v18, v90);
    v46 = v92;
    swift_getErrorValue(v92, v97, v96);
    v80 = (uint64_t)v81;
    Error.dipErrorCode.getter(v96[1], v96[2]);
    v44 = (uint64_t)v93;
    sub_1000150E8((uint64_t)v93, (uint64_t *)&unk_100177B40);
    sub_10002E94C(v80, v44, (uint64_t *)&unk_100177B40);
    v43 = v94;
    v37 = v83;
    goto LABEL_15;
  }
  v3 = v83;
  v36 = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v27, v48);
  v2 = v48;
  v30 = v82;
LABEL_2:
  v37 = v3;
  v38 = defaultLogger()(v36);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter();
  v41 = v10;
  if (os_log_type_enabled(v39, v40))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Encountered generic reader auth certificate failure", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v90);
  v44 = (uint64_t)v93;
  v43 = v94;
  v45 = (uint64_t)v91;
  v46 = v92;
  v47 = (uint64_t)v30;
  v48 = v2;
LABEL_16:
  sub_1000150E8(v47, (uint64_t *)&unk_100177B40);
  sub_10002E908(v44, v45, (uint64_t *)&unk_100177B40);
  if (v95(v45, 1, v48) == 1)
  {
    sub_1000150E8(v45, (uint64_t *)&unk_100177B40);
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v43, enum case for DIPError.Code.idcsUntrustedReaderAuthCertificate(_:), v48);
    swift_errorRetain(v46);
    v62 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v63 = type metadata accessor for DIPError(0);
    v64 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v65 = swift_allocError(v63, v64, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v46, v43, 1, v62, 0xD000000000000056, 0x8000000100137030, 0xD000000000000024, 0x8000000100137330, 362);
    swift_errorRelease(v46);
  }
  else
  {
    v66 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v88, v45, v48);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v43, v66, v48);
    swift_errorRetain(v46);
    v67 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v68 = type metadata accessor for DIPError(0);
    v69 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v65 = swift_allocError(v68, v69, 0, 0);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v46, v43, 1, v67, 0xD000000000000056, 0x8000000100137030, 0xD000000000000024, 0x8000000100137330, 366);
    swift_errorRelease(v46);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v66, v48);
  }
  sub_1000150E8(v44, (uint64_t *)&unk_100177B40);
  return v65;
}

uint64_t sub_1000F52CC()
{
  uint64_t v0;

  return sub_1000F349C(*(_OWORD **)(v0 + 16));
}

uint64_t sub_1000F52D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for DIPOIDVerifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for DIPCertUsage(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v13 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16), v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v13);
}

uint64_t sub_1000F53C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(type metadata accessor for DIPOIDVerifier(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for DIPCertUsage(0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = *(_QWORD *)(v1 + v6);
  v13 = v1 + v8;
  v14 = (uint64_t *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v15 = *v14;
  v16 = v14[1];
  v17 = (_QWORD *)swift_task_alloc(dword_1001783E4);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_10000935C;
  return sub_1000F42B0(a1, v9, v10, v11, v12, v13, v15, v16);
}

uint64_t destroy for IdentityReaderAuthenticator.Result(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  }
  return result;
}

uint64_t initializeWithCopy for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  v12 = v4;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v11;
    v13 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v13;
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = (_OWORD *)(a1 + 56);
  v14 = (_OWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a2 + 64);
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v17 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v15);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v18 = *(_QWORD *)(a2 + 80);
      v19 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v20 = *(_QWORD *)(a2 + 96);
      v21 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      sub_1000F5784((_QWORD *)(a1 + 56));
      v26 = *(_OWORD *)(a2 + 72);
      v25 = *(_OWORD *)(a2 + 88);
      *v13 = *v14;
      *(_OWORD *)(a1 + 72) = v26;
      *(_OWORD *)(a1 + 88) = v25;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v22 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v23 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v23;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v24 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v27 = *v14;
    v28 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v28;
    *v13 = v27;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

_QWORD *sub_1000F5784(_QWORD *a1)
{
  destroy for CertificateSubjectDistinguishedNames(a1);
  return a1;
}

__n128 initializeWithTake for IdentityReaderAuthenticator.Result(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for IdentityReaderAuthenticator.Result(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 64);
  if (!v11)
    goto LABEL_5;
  v12 = *(_QWORD *)(a2 + 64);
  if (!v12)
  {
    sub_1000F5784((_QWORD *)(a1 + 56));
LABEL_5:
    v17 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v17;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v11);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
LABEL_6:
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityReaderAuthenticator.Result(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityReaderAuthenticator.Result(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityReaderAuthenticator.Result()
{
  return &type metadata for IdentityReaderAuthenticator.Result;
}

ValueMetadata *type metadata accessor for CertificateKnownIssuer()
{
  return &type metadata for CertificateKnownIssuer;
}

uint64_t _s7idcredd24ServerRevocationResponseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F59D0 + 4 * byte_10012BBB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F5A04 + 4 * byte_10012BBB0[v4]))();
}

uint64_t sub_1000F5A04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F5A0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F5A14);
  return result;
}

uint64_t sub_1000F5A20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F5A28);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F5A2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F5A34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerRevocationResponse()
{
  return &type metadata for ServerRevocationResponse;
}

unint64_t sub_1000F5A54()
{
  unint64_t result;

  result = qword_1001783F0;
  if (!qword_1001783F0)
  {
    result = swift_getWitnessTable(&unk_10012BCCC, &type metadata for ServerRevocationResponse);
    atomic_store(result, (unint64_t *)&qword_1001783F0);
  }
  return result;
}

unint64_t sub_1000F5A9C()
{
  unint64_t result;

  result = qword_1001783F8;
  if (!qword_1001783F8)
  {
    result = swift_getWitnessTable(&unk_10012BD34, &type metadata for CertificateKnownIssuer);
    atomic_store(result, (unint64_t *)&qword_1001783F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MDLRequestValidator()
{
  return &type metadata for MDLRequestValidator;
}

void sub_1000F5B00(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint8_t *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v60 = a1;
  v5 = type metadata accessor for ISO18013KnownNamespaces(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v56 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v54 - v14;
  defaultLogger()(v13);
  swift_bridgeObjectRetain_n(a2, 2);
  v16 = swift_bridgeObjectRetain_n(a3, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v61 = a3;
  v57 = v9;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v59 = v10;
    v21 = v63;
    *(_DWORD *)v20 = 136315138;
    v58 = v20 + 4;
    swift_bridgeObjectRetain(a2);
    v62 = sub_10003FA80(v60, a2, &v63);
    a3 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v58);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Validating doctype %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v22 = *(void (**)(char *, uint64_t))(v59 + 8);
    v23 = v15;
    v24 = v57;
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23 = v15;
    v24 = v9;
  }
  v55 = v22;
  v22(v23, v24);
  v25 = *(_QWORD *)(a3 + 64);
  v58 = (uint8_t *)(a3 + 64);
  v26 = 1 << *(_BYTE *)(a3 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v25;
  v59 = (unint64_t)(v26 + 63) >> 6;
  LODWORD(v60) = enum case for ISO18013KnownNamespaces.iso18013_5_1(_:);
  v29 = swift_bridgeObjectRetain(a3);
  v30 = 0;
  while (1)
  {
    if (v28)
    {
      v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v32 = v31 | (v30 << 6);
    }
    else
    {
      v33 = v30 + 1;
      if (__OFADD__(v30, 1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      if (v33 >= v59)
        goto LABEL_36;
      v34 = *(_QWORD *)&v58[8 * v33];
      ++v30;
      if (!v34)
      {
        v30 = v33 + 1;
        if (v33 + 1 >= v59)
          goto LABEL_36;
        v34 = *(_QWORD *)&v58[8 * v30];
        if (!v34)
        {
          v30 = v33 + 2;
          if (v33 + 2 >= v59)
            goto LABEL_36;
          v34 = *(_QWORD *)&v58[8 * v30];
          if (!v34)
          {
            v35 = v33 + 3;
            if (v35 >= v59)
            {
LABEL_36:
              swift_release(a3);
              return;
            }
            v34 = *(_QWORD *)&v58[8 * v35];
            if (!v34)
            {
              while (1)
              {
                v30 = v35 + 1;
                if (__OFADD__(v35, 1))
                  goto LABEL_41;
                if (v30 >= v59)
                  goto LABEL_36;
                v34 = *(_QWORD *)&v58[8 * v30];
                ++v35;
                if (v34)
                  goto LABEL_24;
              }
            }
            v30 = v35;
          }
        }
      }
LABEL_24:
      v28 = (v34 - 1) & v34;
      v32 = __clz(__rbit64(v34)) + (v30 << 6);
    }
    v36 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v32);
    v38 = *v36;
    v37 = v36[1];
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v32);
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))(v8, v60, v5, v29);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v39);
    v41 = ISO18013KnownNamespaces.rawValue.getter(v40);
    v43 = v42;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v41 == v38 && v43 == v37)
    {
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v38, v37, 0);
      swift_bridgeObjectRelease(v43);
      if ((v45 & 1) == 0)
      {
        swift_bridgeObjectRelease(v37);
        goto LABEL_8;
      }
    }
    v46 = sub_1000F60B4(v39);
    v47 = swift_bridgeObjectRelease(v39);
    if ((v46 & 1) == 0)
      break;
    v39 = v37;
LABEL_8:
    swift_bridgeObjectRelease(v39);
    a3 = v61;
  }
  v48 = v56;
  defaultLogger()(v47);
  swift_bridgeObjectRetain(v37);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v63 = v53;
    *(_DWORD *)v52 = 136315138;
    swift_bridgeObjectRetain(v37);
    v62 = sub_10003FA80(v38, v37, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v52 + 4);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Validation for namespace %s has failed", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }

  v55(v48, v57);
  swift_release(v61);
}

void sub_1000F60A8()
{
  uint64_t v0;

  sub_1000F5B00(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1000F60B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = 0;
  do
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
    }
    else
    {
      v18 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      if (v18 >= v9)
        goto LABEL_24;
      v19 = *(_QWORD *)(v5 + 8 * v18);
      ++v12;
      if (!v19)
      {
        v12 = v18 + 1;
        if (v18 + 1 >= v9)
          goto LABEL_24;
        v19 = *(_QWORD *)(v5 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 2;
          if (v18 + 2 >= v9)
            goto LABEL_24;
          v19 = *(_QWORD *)(v5 + 8 * v12);
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= v9)
              goto LABEL_24;
            v19 = *(_QWORD *)(v5 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v12 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_30;
                if (v12 >= v9)
                  goto LABEL_24;
                v19 = *(_QWORD *)(v5 + 8 * v12);
                ++v20;
                if (v19)
                  goto LABEL_20;
              }
            }
            v12 = v20;
          }
        }
      }
LABEL_20:
      v8 = (v19 - 1) & v19;
      v14 = __clz(__rbit64(v19)) + (v12 << 6);
    }
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain(v17);
    LOBYTE(v16) = static ISO18013_5_1_ElementIdentifier.isAgeOverElement(_:)(v16, v17);
    result = swift_bridgeObjectRelease(v17);
  }
  while ((v16 & 1) == 0 || !__OFADD__(v11++, 1));
  __break(1u);
LABEL_24:
  v22 = swift_release(a1);
  if (v11 >= 3)
  {
    v23 = defaultLogger()(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v26 = 134217984;
      v28 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v26 + 4);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Rejecting request because it contains %ld age over elements", v26, 0xCu);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v27);
  }
  return v11 < 3;
}

_QWORD *sub_1000F6328(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = &_swiftEmptyArrayStorage;
    if (!v7)
      break;
    v18 = &_swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    v9 = 0;
    while (v7 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a3);
      else
        v10 = *(id *)(a3 + 8 * v9 + 32);
      v11 = v10;
      v16 = v10;
      a1(&v17, &v16);

      if (v4)
        return (_QWORD *)swift_release(v18);
      ++v9;
      v12 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v13 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v7 == v9)
        return v18;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000F6490(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  char v18;
  char v19;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v12++, 1))
      break;
    if (v12 >= v10)
      goto LABEL_27;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_27;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (!v16)
      {
        v17 = v12 + 2;
        if (v12 + 2 >= v10)
          goto LABEL_27;
        v16 = *(_QWORD *)(v6 + 8 * v17);
        if (!v16)
        {
          v17 = v12 + 3;
          if (v12 + 3 >= v10)
            goto LABEL_27;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            v17 = v12 + 4;
            if (v12 + 4 >= v10)
            {
LABEL_27:
              swift_release(a3);
              v18 = 0;
              return v18 & 1;
            }
            v16 = *(_QWORD *)(v6 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_30;
                if (v12 >= v10)
                  goto LABEL_27;
                v16 = *(_QWORD *)(v6 + 8 * v12);
                ++v17;
                if (v16)
                  goto LABEL_18;
              }
            }
          }
        }
      }
      v12 = v17;
    }
LABEL_18:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    v19 = *(_BYTE *)(*(_QWORD *)(a3 + 56) + v14);
    result = a1(&v19);
    if (v3)
    {
      swift_release(a3);
      return v18 & 1;
    }
    if ((result & 1) != 0)
    {
      swift_release(a3);
      v18 = 1;
      return v18 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000F6630(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  id v17;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3)
         : *(id *)(a3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v17 = v8;
      v11 = a1(&v17);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v13 & 1;
      }
      v12 = v11;

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        v13 = 1;
        return v13 & 1;
      }
      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  v13 = 0;
  return v13 & 1;
}

uint64_t sub_1000F6760(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, __n128);
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, __n128);
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;

  v4 = a3;
  v19 = *(_QWORD *)(a3 + 16);
  if (v19)
  {
    v5 = (uint64_t (*)(_QWORD *, __n128))result;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = _swiftEmptyArrayStorage;
    v17 = (uint64_t (*)(_QWORD *, __n128))result;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v20[0] = v10;
      v20[1] = v9;
      v11 = swift_bridgeObjectRetain(v9);
      v12 = v5(v20, v11);
      if (v3)
      {
        swift_release(v8);
        swift_bridgeObjectRelease(v4);
        v16 = v9;
        goto LABEL_16;
      }
      if ((v12 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v8);
        v21 = v8;
        if ((result & 1) == 0)
        {
          result = sub_1000557E4(0, v8[2] + 1, 1);
          v8 = v21;
        }
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
        {
          result = sub_1000557E4(v13 > 1, v14 + 1, 1);
          v8 = v21;
        }
        v8[2] = v14 + 1;
        v15 = &v8[2 * v14];
        v15[4] = v10;
        v15[5] = v9;
        v4 = a3;
        v5 = v17;
      }
      else
      {
        result = swift_bridgeObjectRelease(v9);
      }
      ++v6;
      v7 += 2;
      if (v19 == v6)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
LABEL_14:
    v16 = v4;
LABEL_16:
    swift_bridgeObjectRelease(v16);
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1000F68D0(id *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v10;

  v3 = objc_msgSend(*a1, "elementIdentifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ElementFallback(0) + 28));
  v8 = v7[1];
  if (v4 == *v7 && v6 == v8)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, *v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  return v10 & 1;
}

void sub_1000F6978(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for Logger(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = objc_msgSend(v9, "elementIdentifier");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ElementFallback(0) + 28));
  v15 = v14[1];
  if (v11 == *v14 && v13 == v15)
  {
    v18 = swift_bridgeObjectRelease(v13);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, *v14, v15, 0);
    v18 = swift_bridgeObjectRelease(v13);
    if ((v17 & 1) == 0)
    {
      *a3 = v9;
      v19 = v9;
      return;
    }
  }
  defaultLogger()(v18);
  v20 = v9;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  v23 = os_log_type_enabled(v21, v22);
  v42 = a3;
  if (v23)
  {
    v41 = v6;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v46 = v40;
    *(_DWORD *)v24 = 136315138;
    v38 = v24 + 4;
    v39 = v24;
    v25 = objc_msgSend(v20, "elementIdentifier");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v44 = sub_10003FA80(v26, v28, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v38);

    swift_bridgeObjectRelease(v28);
    v29 = v39;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating intent to retain for %s to true because it is the destination of a fallback", v39, 0xCu);
    v30 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v41);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v6);
  }
  v31 = objc_msgSend(v20, "elementIdentifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v33 = v32;

  v34 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  v36 = objc_msgSend(v34, "initWithElementIdentifier:intentToRetain:", v35, 1);

  *v42 = v36;
}

uint64_t type metadata accessor for ElementFallbackProcessor()
{
  return objc_opt_self(_TtC7idcredd24ElementFallbackProcessor);
}

_QWORD *sub_1000F6CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD *v23;

  v23 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v8 = v7;
        v9 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_15;
        v22[1] = a2;
        v10 = sub_100008E84(&qword_1001752D8);
        v11 = swift_allocObject(v10, 48, 7);
        *(_OWORD *)(v11 + 16) = xmmword_10012A6D0;
        v12 = objc_msgSend(v8, "elementIdentifier");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        *(_QWORD *)(v11 + 32) = v13;
        *(_QWORD *)(v11 + 40) = v15;
        v22[0] = v11;
        v16 = sub_100008E84(&qword_100177CB0);
        v17 = sub_1000F83B8();
        LOBYTE(v12) = Collection<>.contains<A>(_:)(v22, v16, v16, v17, v17, &protocol witness table for String);
        v18 = swift_bridgeObjectRelease(v11);
        if ((v12 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          v5 = v23[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
          v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
          specialized ContiguousArray._endMutation()(v6);
        }
        ++v4;
        if (v9 == v3)
          return v23;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v20 = a1;
      else
        v20 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v7 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F6E9C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, _QWORD *);
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  int64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD **v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD **v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  uint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  int v176;
  _QWORD *v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  unsigned __int8 v188;
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  NSString v193;
  id v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  char v198;
  unint64_t v199;
  uint64_t v200;
  _BOOL8 v201;
  uint64_t v202;
  char v203;
  _QWORD *v204;
  unint64_t v205;
  char v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  os_log_type_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _QWORD **v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  _QWORD **v229;
  _QWORD *v230;
  void (*v231)(_QWORD *@<X8>);
  void (*v232)(_QWORD *@<X8>);
  uint64_t result;
  uint64_t v234;
  char *v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(_QWORD *@<X8>);
  void (*v246)(_QWORD *@<X8>);
  uint64_t v247;
  uint64_t v248;
  __n128 v249;
  _QWORD **v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  int64_t v255;
  char *v256;
  uint64_t *v257;
  char *v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  int64_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t *v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;

  v6 = v5;
  v240 = a5;
  v248 = a2;
  v10 = type metadata accessor for Logger(0);
  v252 = *(_QWORD *)(v10 - 8);
  v253 = v10;
  v11 = __chkstk_darwin(v10);
  v239 = (char *)&v234 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v256 = (char *)&v234 - v13;
  v14 = type metadata accessor for CredentialElement(0);
  v251 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v244 = (uint64_t)&v234 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v266 = (uint64_t *)((char *)&v234 - v17);
  v18 = a1;
  v261 = type metadata accessor for ElementFallback(0);
  v19 = __chkstk_darwin(v261);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v234 - v22;
  __chkstk_darwin(v21);
  v28 = (uint64_t *)((char *)&v234 - v27);
  v270 = a3;
  v269 = a4;
  v243 = *(_QWORD *)(v18 + 16);
  if (!v243)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    v231 = 0;
    v232 = 0;
    goto LABEL_134;
  }
  v237 = v26;
  v238 = v25;
  v242 = v18 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v241 = *(_QWORD *)(v24 + 72);
  v250 = &v268;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  v234 = v18;
  v29 = swift_bridgeObjectRetain(v18);
  v246 = 0;
  v245 = 0;
  v30 = 0;
  v258 = v23;
  v31 = type metadata accessor for ElementFallback;
  v29.n128_u64[0] = 136315394;
  v236 = v29;
  v235 = (char *)&type metadata for Any + 8;
  v29.n128_u64[0] = 136315650;
  v249 = v29;
  v257 = v28;
  while (1)
  {
    v247 = v30 + 1;
    sub_10006BC40(v242 + v241 * v30, (uint64_t)v28, v31);
    v32 = v270[8];
    v254 = v270 + 8;
    v33 = 1 << *((_BYTE *)v270 + 32);
    if (v33 < 64)
      v34 = ~(-1 << v33);
    else
      v34 = -1;
    v35 = v34 & v32;
    v255 = (unint64_t)(v33 + 63) >> 6;
    v259 = v270;
    swift_bridgeObjectRetain(v270);
    v36 = 0;
    if (v35)
    {
      do
      {
        while (1)
        {
          v264 = (_QWORD *)((v35 - 1) & v35);
          v37 = __clz(__rbit64(v35)) | (v36 << 6);
LABEL_21:
          v41 = (uint64_t *)(v259[6] + 16 * v37);
          v42 = *v41;
          v43 = (_QWORD *)v41[1];
          v44 = *(_QWORD *)(v259[7] + 8 * v37);
          v45 = (char *)v28 + *(int *)(v261 + 32);
          v47 = *(uint64_t (**)(uint64_t, _QWORD *))v45;
          v46 = *((_QWORD *)v45 + 1);
          swift_bridgeObjectRetain(v43);
          swift_bridgeObjectRetain(v44);
          swift_retain(v46);
          v263 = v42;
          LOBYTE(v42) = v47(v42, v43);
          swift_release(v46);
          if ((v42 & 1) != 0)
            break;
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v44);
          v35 = (unint64_t)v264;
          if (!v264)
            goto LABEL_10;
        }
        v265 = v43;
        v48 = *(_QWORD *)(v44 + 16);
        v262 = v36;
        if (v48)
        {
          v260 = v6;
          v268 = _swiftEmptyArrayStorage;
          sub_1000557E4(0, v48, 0);
          v49 = v44 + ((*(unsigned __int8 *)(v251 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v251 + 80));
          v50 = *(_QWORD *)(v251 + 72);
          v51 = v268;
          do
          {
            v52 = v266;
            sub_10006BC40(v49, (uint64_t)v266, type metadata accessor for CredentialElement);
            v53 = *v52;
            v54 = v52[1];
            swift_bridgeObjectRetain(v54);
            sub_10006CA8C((uint64_t)v52, type metadata accessor for CredentialElement);
            if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            {
              sub_1000557E4(0, v51[2] + 1, 1);
              v51 = v268;
            }
            v56 = v51[2];
            v55 = v51[3];
            if (v56 >= v55 >> 1)
            {
              sub_1000557E4(v55 > 1, v56 + 1, 1);
              v51 = v268;
            }
            v51[2] = v56 + 1;
            v57 = &v51[2 * v56];
            v57[4] = v53;
            v57[5] = v54;
            v49 += v50;
            --v48;
          }
          while (v48);
          v58 = swift_bridgeObjectRelease(v44);
          v6 = v260;
          v59 = (uint64_t)v257;
          v60 = type metadata accessor for ElementFallback;
          v36 = v262;
        }
        else
        {
          v59 = (uint64_t)v28;
          v60 = v31;
          v58 = swift_bridgeObjectRelease(v44);
          v51 = _swiftEmptyArrayStorage;
        }
        __chkstk_darwin(v58);
        v61 = v59;
        v62 = v263;
        *(&v234 - 4) = v59;
        *(&v234 - 3) = v62;
        v63 = (uint64_t)v265;
        *(&v234 - 2) = (uint64_t)v265;
        v64 = sub_1000F6760((uint64_t)sub_1000F8368, (uint64_t)(&v234 - 6), (uint64_t)v51);
        v65 = v63;
        v66 = v62;
        v67 = v270;
        if (v270[2])
        {
          swift_bridgeObjectRetain(v65);
          v68 = sub_1000FBC04(v62, v65);
          if ((v69 & 1) != 0)
          {
            v70 = *(_QWORD *)(v67[7] + 8 * v68);
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRelease(v265);
            swift_bridgeObjectRetain(v64);
            v71 = sub_1000F85EC(v70, v64);
            v72 = v70;
            v73 = (uint64_t)v265;
            swift_bridgeObjectRelease(v72);
            swift_bridgeObjectRelease(v64);
            swift_bridgeObjectRetain(v73);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
            v268 = v67;
            v75 = (uint64_t)v71;
            v36 = v262;
            sub_10011FB68(v75, v62, v73, isUniquelyReferenced_nonNull_native);
            v270 = v268;
            swift_bridgeObjectRelease(v73);
            v76 = 0x8000000000000000;
            goto LABEL_36;
          }
          swift_bridgeObjectRelease(v65);
        }
        swift_bridgeObjectRetain(v65);
        v77 = sub_100125704(v62, v65);
        swift_bridgeObjectRelease(v265);
        v76 = v77;
        v73 = (uint64_t)v265;
LABEL_36:
        swift_bridgeObjectRelease(v76);
        v78 = v269;
        v31 = v60;
        v79 = v256;
        if (!v269[2])
          goto LABEL_40;
        swift_bridgeObjectRetain(v73);
        v80 = sub_1000FBC04(v66, v73);
        if ((v81 & 1) == 0)
        {
          swift_bridgeObjectRelease(v73);
LABEL_40:
          swift_bridgeObjectRetain(v73);
          v89 = sub_10012581C(v66, v73);
          swift_bridgeObjectRelease(v265);
          v88 = v89;
          v85 = (int64_t)v265;
          goto LABEL_41;
        }
        v82 = *(_QWORD *)(v78[7] + 8 * v80);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRelease(v265);
        swift_bridgeObjectRetain(v64);
        v83 = sub_1000F6CB0(v82, v64);
        v84 = v82;
        v85 = (int64_t)v265;
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v64);
        swift_bridgeObjectRetain(v85);
        v86 = swift_isUniquelyReferenced_nonNull_native(v78);
        v268 = v78;
        v87 = (uint64_t)v83;
        v36 = v262;
        sub_10011FCC0(v87, v66, v85, v86);
        v269 = v268;
        swift_bridgeObjectRelease(v85);
        v88 = 0x8000000000000000;
LABEL_41:
        v90 = swift_bridgeObjectRelease(v88);
        defaultLogger()(v90);
        v91 = (uint64_t)v258;
        sub_10006BC40(v61, (uint64_t)v258, v31);
        swift_bridgeObjectRetain(v85);
        swift_bridgeObjectRetain(v64);
        v93 = Logger.logObject.getter(v92);
        v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          v95 = v85;
          v96 = swift_slowAlloc(32, -1);
          v97 = (_QWORD *)swift_slowAlloc(96, -1);
          v268 = v97;
          *(_DWORD *)v96 = v249.n128_u32[0];
          swift_bridgeObjectRetain(v95);
          v267 = sub_10003FA80(v263, v95, (uint64_t *)&v268);
          v98 = v250;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, v250, v96 + 4);
          swift_bridgeObjectRelease_n(v95, 3);
          v260 = v6;
          *(_WORD *)(v96 + 12) = 2080;
          v99 = (uint64_t *)&v258[*(int *)(v261 + 28)];
          v100 = *v99;
          v101 = v99[1];
          swift_bridgeObjectRetain(v101);
          v267 = sub_10003FA80(v100, v101, (uint64_t *)&v268);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, v98, v96 + 14);
          swift_bridgeObjectRelease(v101);
          sub_10006CA8C((uint64_t)v258, type metadata accessor for ElementFallback);
          *(_WORD *)(v96 + 22) = 2080;
          swift_bridgeObjectRetain(v64);
          v103 = Array.description.getter(v102, &type metadata for String);
          v105 = v104;
          swift_bridgeObjectRelease(v64);
          v267 = sub_10003FA80(v103, v105, (uint64_t *)&v268);
          v106 = v98;
          v31 = type metadata accessor for ElementFallback;
          v79 = v256;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, v106, v96 + 24);
          swift_bridgeObjectRelease_n(v64, 2);
          v107 = v105;
          v6 = v260;
          swift_bridgeObjectRelease(v107);
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Removing elements from namespace %s due to fallback %s: %s", (uint8_t *)v96, 0x20u);
          swift_arrayDestroy(v97, 3, (char *)&type metadata for Any + 8);
          v108 = v97;
          v36 = v262;
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v96, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n(v85, 2);
          sub_10006CA8C(v91, v31);

          swift_bridgeObjectRelease_n(v64, 2);
        }
        (*(void (**)(char *, uint64_t))(v252 + 8))(v79, v253);
        v28 = v257;
        v35 = (unint64_t)v264;
      }
      while (v264);
    }
LABEL_10:
    if (__OFADD__(v36++, 1))
    {
      __break(1u);
      goto LABEL_136;
    }
    if (v36 < v255)
    {
      v39 = v254[v36];
      if (v39)
        goto LABEL_20;
      v40 = v36 + 1;
      if (v36 + 1 < v255)
      {
        v39 = v254[v40];
        if (v39)
          goto LABEL_19;
        v40 = v36 + 2;
        if (v36 + 2 < v255)
        {
          v39 = v254[v40];
          if (v39)
            goto LABEL_19;
          v40 = v36 + 3;
          if (v36 + 3 < v255)
            break;
        }
      }
    }
LABEL_50:
    v260 = v6;
    v109 = swift_release(v259);
    v111 = v28[4];
    v110 = v28[5];
    v112 = v270;
    if (!v270[2])
      goto LABEL_62;
    swift_bridgeObjectRetain(v28[5]);
    v113 = sub_1000FBC04(v111, v110);
    if ((v114 & 1) == 0)
    {
      v109 = swift_bridgeObjectRelease(v110);
LABEL_62:
      v125 = 0;
      goto LABEL_67;
    }
    v115 = *(_QWORD *)(v112[7] + 8 * v113);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRelease(v110);
    v116 = *(_QWORD *)(v115 + 16);
    if (v116)
    {
      v117 = (uint64_t *)((char *)v28 + *(int *)(v261 + 28));
      v118 = *v117;
      v119 = v117[1];
      v120 = *(_QWORD *)(v251 + 72);
      v121 = (uint64_t *)(v115
                       + ((*(unsigned __int8 *)(v251 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v251 + 80))
                       + 8);
      while (1)
      {
        v122 = *(v121 - 1);
        v123 = *v121;
        v124 = v122 == v118 && v123 == v119;
        if (v124 || (_stringCompareWithSmolCheck(_:_:expecting:)(v122, v123, v118, v119, 0) & 1) != 0)
          break;
        v121 = (uint64_t *)((char *)v121 + v120);
        if (!--v116)
        {
          v109 = swift_bridgeObjectRelease(v115);
          v125 = 0;
          goto LABEL_64;
        }
      }
      v109 = swift_bridgeObjectRelease(v115);
      v125 = 1;
LABEL_64:
      v28 = v257;
    }
    else
    {
      v109 = swift_bridgeObjectRelease(v115);
      v125 = 0;
    }
    v31 = type metadata accessor for ElementFallback;
LABEL_67:
    v126 = v269;
    v127 = v269[2];
    v265 = v269;
    if (v127)
    {
      swift_bridgeObjectRetain(v110);
      v128 = sub_1000FBC04(v111, v110);
      if ((v129 & 1) != 0)
      {
        v130 = *(_QWORD *)(v126[7] + 8 * v128);
        swift_bridgeObjectRetain(v130);
        v131 = swift_bridgeObjectRelease(v110);
        __chkstk_darwin(v131);
        *(&v234 - 2) = (uint64_t)v28;
        v132 = v260;
        LODWORD(v133) = sub_1000F6630(sub_1000F839C, (uint64_t)(&v234 - 4), v130);
        v260 = v132;
        v109 = swift_bridgeObjectRelease(v130);
        if ((v125 & 1) != 0)
          goto LABEL_72;
      }
      else
      {
        v109 = swift_bridgeObjectRelease(v110);
        LODWORD(v133) = 0;
        if ((v125 & 1) != 0)
        {
LABEL_72:
          v134 = v260;
          goto LABEL_87;
        }
      }
    }
    else
    {
      LODWORD(v133) = 0;
      if ((v125 & 1) != 0)
        goto LABEL_72;
    }
    v135 = v28;
    v136 = v28[4];
    v137 = v135[5];
    sub_10006BC40((uint64_t)v135 + *(int *)(v261 + 28), v244, type metadata accessor for CredentialElement);
    swift_bridgeObjectRetain(v137);
    sub_100008FC0((uint64_t)v246, 0);
    v138 = swift_isUniquelyReferenced_nonNull_native(v112);
    v268 = v112;
    v140 = sub_1000FBC04(v136, v137);
    v141 = v112[2];
    v142 = (v139 & 1) == 0;
    v143 = v141 + v142;
    if (__OFADD__(v141, v142))
      goto LABEL_137;
    v144 = v139;
    v145 = v112[3];
    LODWORD(v264) = v133;
    if (v145 >= v143)
    {
      if ((v138 & 1) == 0)
      {
        sub_10007DB18();
        v112 = v268;
      }
    }
    else
    {
      sub_10007BB34(v143, v138);
      v112 = v268;
      v146 = sub_1000FBC04(v136, v137);
      if ((v144 & 1) != (v147 & 1))
        goto LABEL_139;
      v140 = v146;
    }
    v133 = v260;
    v270 = v112;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRetain(v112);
    if ((v144 & 1) == 0)
    {
      sub_10011F2B4(v140, v136, v137, (uint64_t)_swiftEmptyArrayStorage, v112);
      swift_bridgeObjectRetain(v137);
    }
    v148 = v112[7];
    swift_bridgeObjectRelease(v112);
    v149 = *(_QWORD *)(v148 + 8 * v140);
    v150 = swift_isUniquelyReferenced_nonNull_native(v149);
    *(_QWORD *)(v148 + 8 * v140) = v149;
    if ((v150 & 1) == 0)
    {
      v149 = sub_1000A75D8(0, *(_QWORD *)(v149 + 16) + 1, 1, v149);
      *(_QWORD *)(v148 + 8 * v140) = v149;
    }
    v28 = v257;
    v152 = *(_QWORD *)(v149 + 16);
    v151 = *(_QWORD *)(v149 + 24);
    if (v152 >= v151 >> 1)
    {
      v149 = sub_1000A75D8(v151 > 1, v152 + 1, 1, v149);
      *(_QWORD *)(v148 + 8 * v140) = v149;
    }
    v134 = v133;
    v31 = type metadata accessor for ElementFallback;
    *(_QWORD *)(v149 + 16) = v152 + 1;
    sub_100075F28(v244, v149+ ((*(unsigned __int8 *)(v251 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v251 + 80))+ *(_QWORD *)(v251 + 72) * v152);
    v109 = swift_bridgeObjectRelease(v137);
    v246 = sub_1000BD384;
    LOBYTE(v133) = (_BYTE)v264;
LABEL_87:
    v153 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v109);
    v154 = *(_QWORD *)(v153 + 16);
    v260 = v134;
    if (!v154)
    {
      v163 = 0;
      goto LABEL_98;
    }
    v156 = *v28;
    v155 = v28[1];
    swift_bridgeObjectRetain(v155);
    v157 = sub_1000FBC04(v156, v155);
    if ((v158 & 1) != 0)
    {
      v159 = *(_QWORD *)(*(_QWORD *)(v153 + 56) + 8 * v157);
      swift_bridgeObjectRetain(v159);
      swift_bridgeObjectRelease(v155);
      swift_bridgeObjectRelease(v153);
      if (!*(_QWORD *)(v159 + 16))
      {
        v163 = 0;
        v153 = v159;
        goto LABEL_98;
      }
      v160 = v28[2];
      v155 = v28[3];
      swift_bridgeObjectRetain(v155);
      v161 = sub_1000FBC04(v160, v155);
      if ((v162 & 1) != 0)
        v163 = *(unsigned __int8 *)(*(_QWORD *)(v159 + 56) + v161);
      else
        v163 = 0;
      v153 = v159;
    }
    else
    {
      v163 = 0;
    }
    swift_bridgeObjectRelease(v155);
LABEL_98:
    v164 = swift_bridgeObjectRelease(v153);
    v165 = ISO18013ReaderRequest.ItemsRequest.namespaces.getter(v164);
    v167 = v28[4];
    v166 = v28[5];
    if (*(_QWORD *)(v165 + 16))
    {
      swift_bridgeObjectRetain(v28[5]);
      v168 = sub_1000FBC04(v167, v166);
      if ((v169 & 1) == 0)
      {
        v173 = v166;
LABEL_108:
        swift_bridgeObjectRelease(v173);
        goto LABEL_109;
      }
      v170 = *(_QWORD *)(*(_QWORD *)(v165 + 56) + 8 * v168);
      swift_bridgeObjectRetain(v170);
      swift_bridgeObjectRelease(v166);
      swift_bridgeObjectRelease(v165);
      if (*(_QWORD *)(v170 + 16))
      {
        v171 = (uint64_t *)((char *)v28 + *(int *)(v261 + 28));
        v172 = *v171;
        v173 = v171[1];
        swift_bridgeObjectRetain(v173);
        v174 = sub_1000FBC04(v172, v173);
        if ((v175 & 1) != 0)
        {
          v176 = *(unsigned __int8 *)(*(_QWORD *)(v170 + 56) + v174);
          swift_bridgeObjectRelease(v173);
          swift_bridgeObjectRelease(v170);
          if ((v133 & 1) == 0)
            goto LABEL_115;
          if (v163 == v176)
            goto LABEL_129;
          goto LABEL_111;
        }
        v165 = v170;
        goto LABEL_108;
      }
      v165 = v170;
    }
LABEL_109:
    swift_bridgeObjectRelease(v165);
    if ((v133 & 1) == 0)
    {
      LOBYTE(v176) = 0;
LABEL_115:
      v187 = *(uint64_t *)((char *)v28 + *(int *)(v261 + 28) + 8);
      v188 = v163 | v176;
      v189 = swift_bridgeObjectRetain(v187);
      v190 = ISO18013ReaderRequest.ItemsRequest.requestInfo.getter(v189);
      v191 = sub_100096D3C(v188, v190, v240);
      swift_bridgeObjectRelease(v190);
      v192 = objc_allocWithZone((Class)DCPresentmentRequestedElement);
      v193 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v187);
      v194 = objc_msgSend(v192, "initWithElementIdentifier:intentToRetain:", v193, v191);

      swift_bridgeObjectRetain(v166);
      v195 = v194;
      sub_100008FC0((uint64_t)v245, 0);
      v196 = v265;
      v197 = swift_isUniquelyReferenced_nonNull_native(v265);
      v268 = v196;
      v199 = sub_1000FBC04(v167, v166);
      v200 = v196[2];
      v201 = (v198 & 1) == 0;
      v202 = v200 + v201;
      if (__OFADD__(v200, v201))
        goto LABEL_138;
      v203 = v198;
      if (v196[3] >= v202)
      {
        if ((v197 & 1) == 0)
        {
          sub_10007E170();
          v196 = v268;
        }
      }
      else
      {
        sub_10007C4D8(v202, v197);
        v204 = v268;
        v205 = sub_1000FBC04(v167, v166);
        if ((v203 & 1) != (v206 & 1))
          goto LABEL_139;
        v199 = v205;
        v196 = v204;
      }
      v269 = v196;
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRetain(v196);
      if ((v203 & 1) == 0)
      {
        sub_10011F2B4(v199, v167, v166, (uint64_t)_swiftEmptyArrayStorage, v196);
        swift_bridgeObjectRetain(v166);
      }
      v207 = v196;
      v208 = v196[7];
      v209 = swift_bridgeObjectRelease(v207);
      v210 = (_QWORD *)(v208 + 8 * v199);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v209);
      v212 = *(_QWORD *)((*v210 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v211 = *(_QWORD *)((*v210 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v212 >= v211 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v211 > 1, v212 + 1, 1);
      v213 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v212, v195);
      specialized Array._endMutation()(v213);
      v214 = swift_bridgeObjectRelease(v166);
      v215 = v239;
      defaultLogger()(v214);
      v216 = (uint64_t)v257;
      v217 = v237;
      sub_10006BC40((uint64_t)v257, v237, v31);
      v218 = v238;
      v219 = sub_10006BC40(v216, v238, v31);
      v220 = Logger.logObject.getter(v219);
      v221 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v220, v221))
      {
        v222 = swift_slowAlloc(22, -1);
        v264 = (_QWORD *)swift_slowAlloc(64, -1);
        v268 = v264;
        *(_DWORD *)v222 = v236.n128_u32[0];
        v265 = v195;
        v223 = *(_QWORD *)(v217 + 16);
        v224 = *(_QWORD *)(v217 + 24);
        swift_bridgeObjectRetain(v224);
        v267 = sub_10003FA80(v223, v224, (uint64_t *)&v268);
        v225 = v250;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, v250, v222 + 4);
        swift_bridgeObjectRelease(v224);
        sub_10006CA8C(v217, type metadata accessor for ElementFallback);
        *(_WORD *)(v222 + 12) = 2080;
        v226 = (uint64_t *)(v218 + *(int *)(v261 + 28));
        v227 = *v226;
        v228 = v226[1];
        swift_bridgeObjectRetain(v228);
        v267 = sub_10003FA80(v227, v228, (uint64_t *)&v268);
        v229 = v225;
        v31 = type metadata accessor for ElementFallback;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, v229, v222 + 14);
        swift_bridgeObjectRelease(v228);
        sub_10006CA8C(v218, type metadata accessor for ElementFallback);
        _os_log_impl((void *)&_mh_execute_header, v220, v221, "Adding element due to %s fallback: %s", (uint8_t *)v222, 0x16u);
        v230 = v264;
        swift_arrayDestroy(v264, 2, v235);
        swift_slowDealloc(v230, -1, -1);
        swift_slowDealloc(v222, -1, -1);

      }
      else
      {

        sub_10006CA8C(v217, v31);
        sub_10006CA8C(v218, v31);
      }

      (*(void (**)(char *, uint64_t))(v252 + 8))(v215, v253);
      v245 = sub_1000BD384;
      v28 = v257;
LABEL_129:
      v6 = v260;
      goto LABEL_130;
    }
    if ((v163 & 1) == 0)
      goto LABEL_129;
LABEL_111:
    v177 = v265;
    if (!v265[2])
      goto LABEL_129;
    swift_bridgeObjectRetain(v166);
    v178 = sub_1000FBC04(v167, v166);
    if ((v179 & 1) == 0)
    {
      swift_bridgeObjectRelease(v166);
      goto LABEL_129;
    }
    v180 = *(_QWORD *)(v177[7] + 8 * v178);
    swift_bridgeObjectRetain(v180);
    v181 = swift_bridgeObjectRelease(v166);
    __chkstk_darwin(v181);
    *(&v234 - 2) = (uint64_t)v28;
    v182 = v260;
    v183 = sub_1000F6328((void (*)(uint64_t *__return_ptr, id *))sub_1000F8380, (uint64_t)(&v234 - 4), v180);
    v6 = v182;
    swift_bridgeObjectRelease(v180);
    v184 = v28[4];
    v185 = v28[5];
    swift_bridgeObjectRetain(v185);
    v186 = swift_isUniquelyReferenced_nonNull_native(v177);
    v268 = v177;
    sub_10011FCC0((uint64_t)v183, v184, v185, v186);
    v269 = v268;
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_130:
    sub_10006CA8C((uint64_t)v28, v31);
    v30 = v247;
    if (v247 == v243)
    {
      swift_bridgeObjectRelease(v234);
      a3 = v270;
      v231 = v246;
      v232 = v245;
LABEL_134:
      sub_100008FC0((uint64_t)v231, 0);
      sub_100008FC0((uint64_t)v232, 0);
      return (uint64_t)a3;
    }
  }
  v39 = v254[v40];
  if (v39)
  {
LABEL_19:
    v36 = v40;
LABEL_20:
    v264 = (_QWORD *)((v39 - 1) & v39);
    v37 = __clz(__rbit64(v39)) + (v36 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v36 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v36 >= v255)
      goto LABEL_50;
    v39 = v254[v36];
    ++v40;
    if (v39)
      goto LABEL_20;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000F8368(uint64_t *a1)
{
  return sub_1000F9904(a1) & 1;
}

void sub_1000F8380(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1000F6978(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1000F839C(id *a1)
{
  uint64_t v1;

  return sub_1000F68D0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1000F83B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100178498[0];
  if (!qword_100178498[0])
  {
    v1 = sub_100016404(&qword_100177CB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_100178498);
  }
  return result;
}

uint64_t sub_1000F8404(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD *v22;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = 0;
  v4 = result + 40;
  v19 = -(uint64_t)v2;
  v5 = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(result + 16);
  do
  {
    if (v3 <= v2)
      v6 = v2;
    else
      v6 = v3;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v4 + 16 * v3++); ; i += 2)
    {
      if (v7 + v3 == 1)
      {
        __break(1u);
        return result;
      }
      v9 = *(i - 1);
      v10 = *i;
      v21[1] = a2;
      v11 = sub_100008E84(&qword_1001752D8);
      v12 = swift_allocObject(v11, 48, 7);
      *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v12 + 32) = v9;
      *(_QWORD *)(v12 + 40) = v10;
      v21[0] = v12;
      swift_bridgeObjectRetain_n(v10, 2);
      v13 = sub_100008E84(&qword_100177CB0);
      v14 = sub_1000F83B8();
      LOBYTE(v13) = Collection<>.contains<A>(_:)(v21, v13, v13, v14, v14, &protocol witness table for String);
      swift_bridgeObjectRelease(v12);
      if ((v13 & 1) == 0)
        break;
      result = swift_bridgeObjectRelease(v10);
      ++v3;
      if (v19 + v3 == 1)
        return (uint64_t)v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v5);
    v22 = v5;
    if ((result & 1) == 0)
    {
      result = sub_1000557E4(0, v5[2] + 1, 1);
      v5 = v22;
    }
    v2 = v18;
    v16 = v5[2];
    v15 = v5[3];
    if (v16 >= v15 >> 1)
    {
      result = sub_1000557E4(v15 > 1, v16 + 1, 1);
      v5 = v22;
    }
    v5[2] = v16 + 1;
    v17 = &v5[2 * v16];
    v17[4] = v9;
    v17[5] = v10;
  }
  while (v19 + v3);
  return (uint64_t)v5;
}

_QWORD *sub_1000F85EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD *v29;

  v27 = a2;
  v4 = type metadata accessor for CredentialElement(0);
  v5 = __chkstk_darwin(v4);
  v26 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v23 - v8);
  result = _swiftEmptyArrayStorage;
  v29 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v7 + 80);
    v13 = *(_QWORD *)(v7 + 72);
    v23 = v2;
    v24 = (v12 + 32) & ~v12;
    v14 = a1 + v24;
    v15 = _swiftEmptyArrayStorage;
    v25 = xmmword_10012A6D0;
    do
    {
      sub_10006BC40(v14, (uint64_t)v9, type metadata accessor for CredentialElement);
      v28[1] = v27;
      v16 = sub_100008E84(&qword_1001752D8);
      v17 = swift_allocObject(v16, 48, 7);
      *(_OWORD *)(v17 + 16) = v25;
      v18 = v9[1];
      *(_QWORD *)(v17 + 32) = *v9;
      *(_QWORD *)(v17 + 40) = v18;
      v28[0] = v17;
      swift_bridgeObjectRetain(v18);
      v19 = sub_100008E84(&qword_100177CB0);
      v20 = sub_1000F83B8();
      LOBYTE(v19) = Collection<>.contains<A>(_:)(v28, v19, v19, v20, v20, &protocol witness table for String);
      swift_bridgeObjectRelease(v17);
      if ((v19 & 1) != 0)
      {
        sub_10006CA8C((uint64_t)v9, type metadata accessor for CredentialElement);
      }
      else
      {
        sub_100075F28((uint64_t)v9, v26);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_1000557B8(0, v15[2] + 1, 1);
        v15 = v29;
        v22 = v29[2];
        v21 = v29[3];
        if (v22 >= v21 >> 1)
        {
          sub_1000557B8(v21 > 1, v22 + 1, 1);
          v15 = v29;
        }
        v15[2] = v22 + 1;
        sub_100075F28(v26, (uint64_t)v15 + v24 + v22 * v13);
      }
      v14 += v13;
      --v11;
    }
    while (v11);
    return v29;
  }
  return result;
}

uint64_t sub_1000F880C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, unint64_t);
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  uint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  char *v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  void (*v169)(_QWORD *@<X8>);
  void (*v170)(_QWORD *@<X8>);
  uint64_t result;
  uint64_t v172;
  char *v173;
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(_QWORD *@<X8>);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(_QWORD *@<X8>);
  char *v184;
  uint64_t v185;
  char *v186;
  __n128 v187;
  uint64_t *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int64_t v194;
  char *v195;
  int64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;

  v6 = type metadata accessor for CredentialElement(0);
  v178 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v182 = (uint64_t)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v191 = *(_QWORD *)(v8 - 8);
  v192 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v189 = (char *)&v172 - v12;
  v199 = type metadata accessor for ElementFallback(0);
  v13 = __chkstk_darwin(v199);
  v176 = (uint64_t)&v172 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v175 = (uint64_t)&v172 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v172 - v18;
  __chkstk_darwin(v17);
  v22 = (char *)&v172 - v21;
  v204 = a2;
  v203 = a3;
  v181 = *(_QWORD *)(a1 + 16);
  if (!v181)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a2);
    v170 = 0;
    v169 = 0;
    goto LABEL_123;
  }
  v180 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v179 = *(_QWORD *)(v20 + 72);
  v188 = (uint64_t *)&v202;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v172 = a1;
  v23 = swift_bridgeObjectRetain(a1);
  v183 = 0;
  v177 = 0;
  v24 = 0;
  v23.n128_u64[0] = 136315394;
  v174 = v23;
  v173 = (char *)&type metadata for Any + 8;
  v23.n128_u64[0] = 136315650;
  v187 = v23;
  v184 = v11;
  v25 = v189;
  v186 = v19;
  v195 = v22;
  while (1)
  {
    sub_10006BC40(v180 + v179 * v24, (uint64_t)v22, type metadata accessor for ElementFallback);
    v26 = v203;
    if (v203)
    {
      v27 = v203;
    }
    else
    {
      v27 = sub_10003E3FC((uint64_t)_swiftEmptyArrayStorage);
      v26 = 0;
    }
    v185 = v24 + 1;
    v28 = *(_QWORD *)(v27 + 64);
    v193 = v27 + 64;
    v29 = 1 << *(_BYTE *)(v27 + 32);
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v31 = v30 & v28;
    v194 = (unint64_t)(v29 + 63) >> 6;
    swift_bridgeObjectRetain(v26);
    v32 = 0;
    v197 = v27;
    if (v31)
    {
      while (1)
      {
        while (1)
        {
          v200 = (v31 - 1) & v31;
          v33 = __clz(__rbit64(v31)) | (v32 << 6);
LABEL_26:
          v37 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * v33);
          v38 = *v37;
          v39 = v37[1];
          v40 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v33);
          v41 = &v22[*(int *)(v199 + 32)];
          v43 = *(uint64_t (**)(uint64_t, unint64_t))v41;
          v42 = *((_QWORD *)v41 + 1);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(v40);
          swift_retain(v42);
          v44 = v22;
          v45 = v43(v38, v39);
          v46 = swift_release(v42);
          if ((v45 & 1) != 0)
            break;
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v40);
          v22 = v44;
          v27 = v197;
          v31 = v200;
          if (!v200)
            goto LABEL_15;
        }
        __chkstk_darwin(v46);
        *(&v172 - 4) = (uint64_t)v44;
        *(&v172 - 3) = v38;
        *(&v172 - 2) = v39;
        v47 = v198;
        v48 = sub_1000F6760((uint64_t)sub_1000F8368, (uint64_t)(&v172 - 6), v40);
        v198 = v47;
        v49 = v203;
        if (!v203)
        {
          v22 = v44;
          swift_bridgeObjectRelease(0);
          goto LABEL_40;
        }
        if (!*(_QWORD *)(v203 + 16))
          goto LABEL_38;
        swift_bridgeObjectRetain(v39);
        v50 = sub_1000FBC04(v38, v39);
        if ((v51 & 1) == 0)
          break;
        v52 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
        swift_bridgeObjectRetain(v52);
        swift_bridgeObjectRelease(v39);
        if (!v52)
          goto LABEL_38;
        swift_bridgeObjectRetain(v48);
        v53 = v198;
        v54 = sub_1000F8404(v52, v48);
        v198 = v53;
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRetain(v39);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
        v202 = (_QWORD *)v49;
        v56 = v54;
        v19 = v186;
        sub_10011FB7C(v56, v38, v39, isUniquelyReferenced_nonNull_native);
        v203 = (uint64_t)v202;
        swift_bridgeObjectRelease(v39);
        v57 = 0x8000000000000000;
LABEL_39:
        swift_bridgeObjectRelease(v57);
        v22 = v195;
LABEL_40:
        v59 = v204;
        v196 = v32;
        if (v204)
        {
          if (*(_QWORD *)(v204 + 16))
          {
            swift_bridgeObjectRetain(v39);
            v60 = sub_1000FBC04(v38, v39);
            if ((v61 & 1) != 0)
            {
              v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
              swift_bridgeObjectRetain(v62);
              swift_bridgeObjectRelease(v39);
              if (v62)
              {
                swift_bridgeObjectRetain(v48);
                v63 = v198;
                v64 = sub_1000F85EC(v62, v48);
                v198 = v63;
                swift_bridgeObjectRelease(v62);
                swift_bridgeObjectRelease(v48);
                swift_bridgeObjectRetain(v39);
                v65 = swift_isUniquelyReferenced_nonNull_native(v59);
                v202 = (_QWORD *)v59;
                v66 = (uint64_t)v64;
                v19 = v186;
                sub_10011FB68(v66, v38, v39, v65);
                v204 = (uint64_t)v202;
                swift_bridgeObjectRelease(v39);
                v67 = 0x8000000000000000;
LABEL_48:
                v68 = swift_bridgeObjectRelease(v67);
                v22 = v195;
                goto LABEL_49;
              }
            }
            else
            {
              swift_bridgeObjectRelease(v39);
            }
          }
          swift_bridgeObjectRetain(v39);
          v69 = sub_100125704(v38, v39);
          swift_bridgeObjectRelease(v39);
          v67 = v69;
          goto LABEL_48;
        }
        v68 = swift_bridgeObjectRelease(0);
LABEL_49:
        defaultLogger()(v68);
        sub_10006BC40((uint64_t)v22, (uint64_t)v19, type metadata accessor for ElementFallback);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v48);
        v71 = Logger.logObject.getter(v70);
        v72 = (uint64_t)v19;
        v73 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v71, v73))
        {
          v74 = swift_slowAlloc(32, -1);
          v190 = swift_slowAlloc(96, -1);
          v202 = (_QWORD *)v190;
          *(_DWORD *)v74 = v187.n128_u32[0];
          swift_bridgeObjectRetain(v39);
          v201 = sub_10003FA80(v38, v39, (uint64_t *)&v202);
          v75 = v188;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v188, v74 + 4);
          swift_bridgeObjectRelease_n(v39, 3);
          *(_WORD *)(v74 + 12) = 2080;
          v76 = (uint64_t *)(v72 + *(int *)(v199 + 28));
          v77 = *v76;
          v78 = v76[1];
          swift_bridgeObjectRetain(v78);
          v201 = sub_10003FA80(v77, v78, (uint64_t *)&v202);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v75, v74 + 14);
          swift_bridgeObjectRelease(v78);
          sub_10006CA8C(v72, type metadata accessor for ElementFallback);
          *(_WORD *)(v74 + 22) = 2080;
          swift_bridgeObjectRetain(v48);
          v80 = Array.description.getter(v79, &type metadata for String);
          v82 = v81;
          swift_bridgeObjectRelease(v48);
          v83 = v80;
          v25 = v189;
          v201 = sub_10003FA80(v83, v82, (uint64_t *)&v202);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v75, v74 + 24);
          swift_bridgeObjectRelease_n(v48, 2);
          swift_bridgeObjectRelease(v82);
          _os_log_impl((void *)&_mh_execute_header, v71, v73, "Removing elements from namespace %s due to fallback %s: %s", (uint8_t *)v74, 0x20u);
          v84 = v190;
          swift_arrayDestroy(v190, 3, (char *)&type metadata for Any + 8);
          v22 = v195;
          swift_slowDealloc(v84, -1, -1);
          swift_slowDealloc(v74, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n(v39, 2);
          sub_10006CA8C(v72, type metadata accessor for ElementFallback);

          swift_bridgeObjectRelease_n(v48, 2);
        }
        (*(void (**)(char *, uint64_t))(v191 + 8))(v25, v192);
        v19 = (char *)v72;
        v32 = v196;
        v27 = v197;
        v31 = v200;
        if (!v200)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease(v39);
LABEL_38:
      swift_bridgeObjectRetain(v39);
      v58 = sub_100125718(v38, v39);
      swift_bridgeObjectRelease(v39);
      v57 = v58;
      goto LABEL_39;
    }
LABEL_15:
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_125;
    }
    if (v32 < v194)
    {
      v35 = *(_QWORD *)(v193 + 8 * v32);
      if (v35)
        goto LABEL_25;
      v36 = v32 + 1;
      if (v32 + 1 < v194)
      {
        v35 = *(_QWORD *)(v193 + 8 * v36);
        if (v35)
          goto LABEL_24;
        v36 = v32 + 2;
        if (v32 + 2 < v194)
        {
          v35 = *(_QWORD *)(v193 + 8 * v36);
          if (v35)
            goto LABEL_24;
          v36 = v32 + 3;
          if (v32 + 3 < v194)
            break;
        }
      }
    }
LABEL_54:
    v85 = swift_release(v27);
    v86 = (_QWORD *)v204;
    if (!v204 || !*(_QWORD *)(v204 + 16))
      goto LABEL_67;
    v87 = *((_QWORD *)v22 + 4);
    v88 = *((_QWORD *)v22 + 5);
    swift_bridgeObjectRetain(v88);
    v89 = sub_1000FBC04(v87, v88);
    if ((v90 & 1) == 0)
    {
      v85 = swift_bridgeObjectRelease(v88);
LABEL_67:
      v101 = 2;
      goto LABEL_68;
    }
    v91 = *(_QWORD *)(v86[7] + 8 * v89);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRelease(v88);
    v92 = *(_QWORD *)(v91 + 16);
    if (v92)
    {
      v93 = &v22[*(int *)(v199 + 28)];
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = *(_QWORD *)(v178 + 72);
      v97 = (uint64_t *)(v91
                      + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80))
                      + 8);
      while (1)
      {
        v98 = *(v97 - 1);
        v99 = *v97;
        v100 = v98 == v94 && v99 == v95;
        if (v100 || (_stringCompareWithSmolCheck(_:_:expecting:)(v98, v99, v94, v95, 0) & 1) != 0)
          break;
        v97 = (uint64_t *)((char *)v97 + v96);
        if (!--v92)
        {
          v85 = swift_bridgeObjectRelease(v91);
          v101 = 0;
          v22 = v195;
          goto LABEL_68;
        }
      }
      v85 = swift_bridgeObjectRelease(v91);
      v101 = 1;
      v22 = v195;
    }
    else
    {
      v85 = swift_bridgeObjectRelease(v91);
      v101 = 0;
    }
LABEL_68:
    v102 = (_QWORD *)v203;
    if (v203 && *(_QWORD *)(v203 + 16))
    {
      v103 = *((_QWORD *)v22 + 4);
      v104 = *((_QWORD *)v22 + 5);
      swift_bridgeObjectRetain(v104);
      v105 = sub_1000FBC04(v103, v104);
      if ((v106 & 1) != 0)
      {
        v107 = *(_QWORD *)(v102[7] + 8 * v105);
        swift_bridgeObjectRetain(v107);
        swift_bridgeObjectRelease(v104);
        v108 = *(_QWORD *)(v107 + 16);
        if (v108)
        {
          v109 = &v22[*(int *)(v199 + 28)];
          v110 = *(_QWORD *)v109;
          v111 = *((_QWORD *)v109 + 1);
          v112 = (uint64_t *)(v107 + 40);
          while (1)
          {
            v113 = *(v112 - 1);
            v114 = *v112;
            v115 = v113 == v110 && v114 == v111;
            if (v115 || (_stringCompareWithSmolCheck(_:_:expecting:)(v113, v114, v110, v111, 0) & 1) != 0)
              break;
            v112 += 2;
            if (!--v108)
            {
              v85 = swift_bridgeObjectRelease(v107);
              v22 = v195;
              goto LABEL_82;
            }
          }
          v85 = swift_bridgeObjectRelease(v107);
          LODWORD(v108) = 1;
          v22 = v195;
        }
        else
        {
          v85 = swift_bridgeObjectRelease(v107);
        }
        goto LABEL_82;
      }
      v85 = swift_bridgeObjectRelease(v104);
    }
    LODWORD(v108) = 2;
LABEL_82:
    if (v86 && v101 != 2 && (v101 & 1) == 0)
    {
      v117 = *((_QWORD *)v22 + 4);
      v116 = *((_QWORD *)v22 + 5);
      sub_10006BC40((uint64_t)&v22[*(int *)(v199 + 28)], v182, type metadata accessor for CredentialElement);
      swift_bridgeObjectRetain(v116);
      sub_100008FC0((uint64_t)v183, 0);
      v118 = swift_isUniquelyReferenced_nonNull_native(v86);
      v202 = v86;
      v120 = sub_1000FBC04(v117, v116);
      v121 = v86[2];
      v122 = (v119 & 1) == 0;
      v123 = v121 + v122;
      if (__OFADD__(v121, v122))
        goto LABEL_126;
      v124 = v119;
      if (v86[3] >= v123)
      {
        if ((v118 & 1) == 0)
        {
          sub_10007DB18();
          v86 = v202;
        }
      }
      else
      {
        sub_10007BB34(v123, v118);
        v86 = v202;
        v125 = sub_1000FBC04(v117, v116);
        if ((v124 & 1) != (v126 & 1))
          goto LABEL_128;
        v120 = v125;
      }
      v19 = v186;
      v204 = (uint64_t)v86;
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_bridgeObjectRetain(v86);
      if ((v124 & 1) == 0)
      {
        sub_10011F2B4(v120, v117, v116, (uint64_t)_swiftEmptyArrayStorage, v86);
        swift_bridgeObjectRetain(v116);
      }
      v127 = v86[7];
      swift_bridgeObjectRelease(v86);
      v128 = *(_QWORD *)(v127 + 8 * v120);
      v129 = swift_isUniquelyReferenced_nonNull_native(v128);
      *(_QWORD *)(v127 + 8 * v120) = v128;
      if ((v129 & 1) == 0)
      {
        v128 = sub_1000A75D8(0, *(_QWORD *)(v128 + 16) + 1, 1, v128);
        *(_QWORD *)(v127 + 8 * v120) = v128;
      }
      v131 = *(_QWORD *)(v128 + 16);
      v130 = *(_QWORD *)(v128 + 24);
      if (v131 >= v130 >> 1)
      {
        v128 = sub_1000A75D8(v130 > 1, v131 + 1, 1, v128);
        *(_QWORD *)(v127 + 8 * v120) = v128;
      }
      *(_QWORD *)(v128 + 16) = v131 + 1;
      sub_100075F28(v182, v128+ ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80))+ *(_QWORD *)(v178 + 72) * v131);
      v85 = swift_bridgeObjectRelease(v116);
      v183 = sub_1000BD384;
      v22 = v195;
    }
    v132 = v184;
    if ((_DWORD)v108)
    {
      v25 = v189;
    }
    else
    {
      if (v102)
      {
        v134 = *((_QWORD *)v22 + 4);
        v133 = *((_QWORD *)v22 + 5);
        v135 = &v22[*(int *)(v199 + 28)];
        v137 = *(_QWORD *)v135;
        v136 = *((_QWORD *)v135 + 1);
        swift_bridgeObjectRetain(v133);
        swift_bridgeObjectRetain(v136);
        sub_100008FC0((uint64_t)v177, 0);
        v138 = swift_isUniquelyReferenced_nonNull_native(v102);
        v202 = v102;
        v140 = sub_1000FBC04(v134, v133);
        v141 = v102[2];
        v142 = (v139 & 1) == 0;
        v143 = v141 + v142;
        if (__OFADD__(v141, v142))
          goto LABEL_127;
        v144 = v139;
        if (v102[3] >= v143)
        {
          if ((v138 & 1) == 0)
          {
            sub_10007DF80();
            v102 = v202;
          }
        }
        else
        {
          sub_10007C1D0(v143, v138);
          v102 = v202;
          v145 = sub_1000FBC04(v134, v133);
          if ((v144 & 1) != (v146 & 1))
            goto LABEL_128;
          v140 = v145;
        }
        v203 = (uint64_t)v102;
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRetain(v102);
        if ((v144 & 1) == 0)
        {
          sub_10011F2B4(v140, v134, v133, (uint64_t)_swiftEmptyArrayStorage, v102);
          swift_bridgeObjectRetain(v133);
        }
        v147 = v102[7];
        swift_bridgeObjectRelease(v102);
        v148 = *(char **)(v147 + 8 * v140);
        v149 = swift_isUniquelyReferenced_nonNull_native(v148);
        *(_QWORD *)(v147 + 8 * v140) = v148;
        if ((v149 & 1) == 0)
        {
          v148 = sub_1000A73AC(0, *((_QWORD *)v148 + 2) + 1, 1, v148);
          *(_QWORD *)(v147 + 8 * v140) = v148;
        }
        v151 = *((_QWORD *)v148 + 2);
        v150 = *((_QWORD *)v148 + 3);
        if (v151 >= v150 >> 1)
        {
          v148 = sub_1000A73AC((char *)(v150 > 1), v151 + 1, 1, v148);
          *(_QWORD *)(v147 + 8 * v140) = v148;
        }
        v132 = v184;
        v22 = v195;
        *((_QWORD *)v148 + 2) = v151 + 1;
        v152 = &v148[16 * v151];
        *((_QWORD *)v152 + 4) = v137;
        *((_QWORD *)v152 + 5) = v136;
        v85 = swift_bridgeObjectRelease(v133);
        v177 = sub_1000BD384;
        v19 = v186;
      }
      defaultLogger()(v85);
      v153 = v175;
      sub_10006BC40((uint64_t)v22, v175, type metadata accessor for ElementFallback);
      v154 = (uint64_t)v22;
      v155 = v176;
      v156 = sub_10006BC40(v154, v176, type metadata accessor for ElementFallback);
      v157 = Logger.logObject.getter(v156);
      v158 = static os_log_type_t.debug.getter();
      v159 = v158;
      if (os_log_type_enabled(v157, v158))
      {
        v160 = swift_slowAlloc(22, -1);
        LODWORD(v200) = v159;
        v161 = v160;
        v162 = swift_slowAlloc(64, -1);
        v202 = (_QWORD *)v162;
        *(_DWORD *)v161 = v174.n128_u32[0];
        v163 = *(_QWORD *)(v153 + 16);
        v164 = *(_QWORD *)(v153 + 24);
        swift_bridgeObjectRetain(v164);
        v201 = sub_10003FA80(v163, v164, (uint64_t *)&v202);
        v165 = v188;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v188, v161 + 4);
        swift_bridgeObjectRelease(v164);
        v19 = v186;
        sub_10006CA8C(v153, type metadata accessor for ElementFallback);
        *(_WORD *)(v161 + 12) = 2080;
        v166 = (uint64_t *)(v155 + *(int *)(v199 + 28));
        v167 = *v166;
        v168 = v166[1];
        swift_bridgeObjectRetain(v168);
        v201 = sub_10003FA80(v167, v168, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v165, v161 + 14);
        swift_bridgeObjectRelease(v168);
        sub_10006CA8C(v155, type metadata accessor for ElementFallback);
        _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v200, "Adding element due to %s fallback: %s", (uint8_t *)v161, 0x16u);
        swift_arrayDestroy(v162, 2, v173);
        swift_slowDealloc(v162, -1, -1);
        swift_slowDealloc(v161, -1, -1);

        (*(void (**)(char *, uint64_t))(v191 + 8))(v184, v192);
      }
      else
      {
        sub_10006CA8C(v153, type metadata accessor for ElementFallback);
        sub_10006CA8C(v155, type metadata accessor for ElementFallback);

        (*(void (**)(char *, uint64_t))(v191 + 8))(v132, v192);
      }
      v25 = v189;
      v22 = v195;
    }
    sub_10006CA8C((uint64_t)v22, type metadata accessor for ElementFallback);
    v24 = v185;
    if (v185 == v181)
    {
      swift_bridgeObjectRelease(v172);
      a2 = v204;
      v169 = v177;
      v170 = v183;
LABEL_123:
      sub_100008FC0((uint64_t)v170, 0);
      sub_100008FC0((uint64_t)v169, 0);
      return a2;
    }
  }
  v35 = *(_QWORD *)(v193 + 8 * v36);
  if (v35)
  {
LABEL_24:
    v32 = v36;
LABEL_25:
    v200 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v32 << 6);
    goto LABEL_26;
  }
  while (1)
  {
    v32 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v32 >= v194)
      goto LABEL_54;
    v35 = *(_QWORD *)(v193 + 8 * v32);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000F9904(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[2];
  v2 = v1[3];
  v4 = v1[4];
  v5 = *a1;
  v6 = a1[1];
  v7 = type metadata accessor for ElementFallback(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + *(int *)(v7 + 36)))(v2, v4, v5, v6) & 1;
}

uint64_t sub_1000F9974(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_10012BE00;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_10012BE18;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000F9A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE v21[24];
  char v22[24];
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v19 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - v11;
  v13 = (uint64_t)v1 + *(_QWORD *)(v3 + 128);
  swift_beginAccess(v13, v22, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v13, v5);
  v14 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v12, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v15 = v23;
  result = sub_1000FA17C();
  if (!v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 88) + 16))(result);
    v17 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a1, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v4);
    v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v17, v5);
    swift_beginAccess(v13, v21, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v18, v5);
    return swift_endAccess(v21);
  }
  return result;
}

uint64_t sub_1000F9BFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = *v2;
  *(_QWORD *)(v3 + 32) = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9C64, v2, 0);
}

uint64_t sub_1000F9C64()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000F9A10(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 88) + 8);
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 80), *(_QWORD *)(v0 + 40), v1);
}

uint64_t sub_1000F9D1C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9D80, v1, 0);
}

uint64_t sub_1000F9D80()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000F9A10(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 16);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_100015758;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_1000F9E34(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9E98, v1, 0);
}

uint64_t sub_1000F9E98()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000F9A10(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 32);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_1000F9F4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = *v2;
  v3[5] = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9FB4, v2, 0);
}

uint64_t sub_1000F9FB4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000F9A10(v0[8]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[5] + 88) + 8);
  v2 = *(int **)(v1 + 24);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_100015A38;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[2], v0[3], v0[6], v1);
}

uint64_t sub_1000FA068()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = *v0;
  v1[3] = *v0;
  v3 = *(_QWORD *)(v2 + 80);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FA0CC, v0, 0);
}

uint64_t sub_1000FA0CC()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000F9A10(v0[6]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[3] + 88) + 8);
  v2 = *(int **)(v1 + 40);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_100015FA0;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[4], v1);
}

uint64_t sub_1000FA17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::String v41;
  uint64_t v42;
  Swift::String v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v2 = v0;
  v61 = type metadata accessor for DIPError.Code(0);
  v56 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v55 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v58 = v5;
  v6 = __chkstk_darwin(v4);
  v54 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - v8;
  v10 = type metadata accessor for HPKEEncryptedMessageAlgorithm(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for JSONDecoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = JSONDecoder.init()(v15);
  v18 = *(_QWORD *)(v2 + 112);
  v17 = *(_QWORD *)(v2 + 120);
  v19 = sub_1000058C8(&qword_1001785E0, (uint64_t (*)(uint64_t))&type metadata accessor for HPKEEncryptedMessageAlgorithm, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageAlgorithm);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, v18, v17, v10, v19);
  v20 = swift_release(v16);
  if (!v1)
  {
    v21 = v61;
    v52 = v11;
    v53 = v10;
    v23 = v55;
    v22 = v56;
    HPKEEncryptedMessageAlgorithm.algorithm.getter(v20);
    v24 = (*(uint64_t (**)(char *, uint64_t))(v58 + 88))(v9, v57);
    if (v24 == enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_v1(_:))
    {
      v25 = sub_1000FB408();
    }
    else
    {
      if (v24 != enum case for HPKEEncryptionParamsAlgorithmIdentifier.HPKE_KW_v1(_:))
      {
        v26 = v23;
        (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v23, enum case for DIPError.Code.internalError(_:), v21);
        v27 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v28 = v9;
        v29 = v13;
        v30 = type metadata accessor for DIPError(0);
        v31 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v32 = v30;
        v33 = v29;
        v34 = v22;
        v35 = swift_allocError(v32, v31, 0, 0);
        v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001CLL, 0x80000001001375D0, 0, v23, 0, v27, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000010, 0x800000010012E6C0, 72);
        v37 = v35;
        swift_willThrow(v36);
        v38 = v57;
        v39 = v58;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v57);
        v40 = v54;
        v59 = 0;
        v60 = 0xE000000000000000;
        _StringGuts.grow(_:)(51);
        v41._countAndFlagsBits = 0xD00000000000002ALL;
        v41._object = (void *)0x80000001001375F0;
        String.append(_:)(v41);
        HPKEEncryptedMessageAlgorithm.algorithm.getter(v42);
        _print_unlocked<A, B>(_:_:)(v40, &v59, v38, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
        v43._countAndFlagsBits = 0x74616D726F6620;
        v43._object = (void *)0xE700000000000000;
        String.append(_:)(v43);
        v16 = v59;
        v44 = v60;
        (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v26, enum case for DIPError.Code.idcsPayloadDecryptionFailureHPKE(_:), v61);
        swift_errorRetain(v37);
        v45 = v33;
        v46 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v47 = type metadata accessor for DIPError(0);
        v48 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v47, v48, 0, 0);
        v49 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v16, v44, v37, v26, 0, v46, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000010, 0x800000010012E6C0, 75);
        swift_willThrow(v49);
        swift_errorRelease(v37);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v53);
        return v16;
      }
      v25 = sub_1000FA654();
    }
    v16 = v25;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v53);
  }
  return v16;
}

uint64_t sub_1000FA654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::String v91;
  void *object;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint8_t *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;

  v1 = v0;
  v128 = type metadata accessor for Logger(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v122 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for HPKEParams(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_100178588);
  __chkstk_darwin(v4);
  v133 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for AEADKey(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HPKEPrivateKey(0);
  v139 = *(_QWORD *)(v7 - 8);
  v140 = v7;
  __chkstk_darwin(v7);
  v138 = (uint64_t *)((char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for HPKESuiteKwV1(0);
  v136 = *(_QWORD *)(v9 - 8);
  v137 = v9;
  __chkstk_darwin(v9);
  v141 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008E84(&qword_100178590);
  __chkstk_darwin(v11);
  v148 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008E84(&qword_100178598);
  v143 = *(_QWORD *)(v13 - 8);
  v144 = v13;
  __chkstk_darwin(v13);
  v142 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPError.Code(0);
  v145 = *(_QWORD *)(v15 - 8);
  v146 = v15;
  __chkstk_darwin(v15);
  v147 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008E84(&qword_1001785A0);
  v18 = *(_QWORD *)(v17 - 8);
  v149 = v17;
  v150 = v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008E84(&qword_1001785A8);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for JSONDecoder(0);
  v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v27 = JSONDecoder.init()(v26);
  v28 = v1;
  v30 = *(_QWORD *)(v1 + 112);
  v29 = *(_QWORD *)(v1 + 120);
  v31 = sub_1000850F4(&qword_1001785B0, &qword_1001785A8, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessageWithKeyWrap<A>);
  v32 = v151;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v21, v30, v29, v21, v31);
  if (!v32)
  {
    v33 = (uint64_t)v148;
    v125 = 0;
    v34 = v28;
    v151 = v22;
    swift_release(v27);
    HPKEEncryptedMessageWithKeyWrap.getMessages()(v21);
    if (shouldIncludeUnencryptedData()())
    {
      v35 = v24;
      v36 = v149;
      SealedMessage.unencryptedData.getter(&v152, v149);
      v37 = v153;
      v38 = v147;
      if (!v153)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v147, enum case for DIPError.Code.idcsPayloadDecryptionDigitalIDMissing(_:), v146);
        v71 = v38;
        v72 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v27 = type metadata accessor for DIPError(0);
        v73 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v27, v73, 0, 0);
        v74 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002CLL, 0x8000000100137570, 0, v71, 0, v72, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000024, 0x8000000100137510, 84);
        swift_willThrow(v74);
        (*(void (**)(char *, uint64_t))(v150 + 8))(v20, v36);
        goto LABEL_12;
      }
      v39 = v20;
      v27 = Data.init(base64Encoded:options:)(v152, v153, 1);
      v41 = v40;
      swift_bridgeObjectRelease(v37);
      if (v41 >> 60 == 15)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v38, enum case for DIPError.Code.idcsPayloadDecryptionFailureB64Decode(_:), v146);
        v42 = v38;
        v43 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v27 = type metadata accessor for DIPError(0);
        v44 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        swift_allocError(v27, v44, 0, 0);
        v45 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002DLL, 0x80000001001375A0, 0, v42, 0, v43, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000024, 0x8000000100137510, 87);
        swift_willThrow(v45);
        (*(void (**)(char *, uint64_t))(v150 + 8))(v39, v36);
LABEL_12:
        v53 = *(void (**)(char *, uint64_t))(v151 + 8);
        v54 = v35;
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v150 + 8))(v39, v36);
      v76 = (void (**)(char *, uint64_t))(v151 + 8);
      v77 = v35;
      v78 = v21;
LABEL_15:
      (*v76)(v77, v78);
      return v27;
    }
    HPKEEncryptedMessageWithKeyWrap.getKeys()(v21);
    v47 = v143;
    v46 = v144;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v33, 1, v144) == 1)
    {
      v48 = v150;
      sub_1000150E8(v33, &qword_100178590);
      v49 = v147;
      (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v147, enum case for DIPError.Code.idcsPayloadDecryptionFailureMissingKeys(_:), v146);
      v50 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v27 = type metadata accessor for DIPError(0);
      v51 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v27, v51, 0, 0);
      v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0x652079656B206F6ELL, 0xEF65706F6C65766ELL, 0, v49, 0, v50, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000024, 0x8000000100137510, 92);
      swift_willThrow(v52);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v149);
      v53 = *(void (**)(char *, uint64_t))(v151 + 8);
      v54 = v24;
LABEL_13:
      v75 = v21;
LABEL_23:
      v53(v54, v75);
      return v27;
    }
    v124 = v21;
    v123 = v24;
    v55 = v142;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v142, v33, v46);
    v56 = v46;
    v57 = *(void **)(v34 + 128);
    v58 = v138;
    *v138 = v57;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v139 + 104))(v58, enum case for HPKEPrivateKey.sep(_:), v140);
    v59 = v57;
    v60 = v141;
    HPKESuiteKwV1.init(skR:info:)(v58, 0, 0xC000000000000000);
    v61 = *(_QWORD *)(v34 + 136);
    v62 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v63 = v47;
    v64 = JSONDecoder.init()(v62);
    v154 = v25;
    v155 = &protocol witness table for JSONDecoder;
    v65 = v55;
    v152 = v64;
    v66 = sub_100008E84(&qword_1001785B8);
    v67 = sub_1000FB91C();
    v68 = sub_1000FB9A0();
    v69 = v66;
    v27 = (uint64_t)v60;
    v70 = v125;
    HPKESuiteKwV1.openMessageHPKE<A>(envelope:authenticationContext:decoder:)(&v156, v65, v61, &v152, v69, v67, v68);
    if (v70)
    {
      sub_10000CE40(&v152);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v60, v137);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v56);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v20, v149);
    }
    else
    {
      sub_10000CE40(&v152);
      v79 = v156;
      v80 = SealedMessage.keyID.getter(v149);
      v82 = v81;
      if (*(_QWORD *)(v79 + 16) && (v83 = sub_1000FBC04(v80, v81), (v84 & 1) != 0))
      {
        v85 = v20;
        v86 = v134;
        v87 = v135;
        (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(v133, *(_QWORD *)(v79 + 56) + *(_QWORD *)(v134 + 72) * v83, v135);
        v88 = 0;
      }
      else
      {
        v85 = v20;
        v88 = 1;
        v87 = v135;
        v86 = v134;
      }
      v89 = (uint64_t)v133;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v133, v88, 1, v87);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v79);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v89, 1, v87) != 1)
      {
        v100 = v132;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v132, v89, v87);
        v101 = v129;
        v102 = HPKEEnvelope.params.getter(v144);
        v103 = HPKEParams.pkISm.getter(v102);
        v105 = v104;
        v106 = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v101, v131);
        v107 = v151;
        if (v105 >> 60 == 15)
        {
          v103 = 0;
          v108 = 0xC000000000000000;
          v109 = v149;
        }
        else
        {
          v110 = v105;
          v111 = v126;
          v112 = defaultLogger()(v106);
          v113 = Logger.logObject.getter(v112);
          v114 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v113, v114))
          {
            v115 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v115 = 0;
            _os_log_impl((void *)&_mh_execute_header, v113, v114, "pkISm is set; using it for aad", v115, 2u);
            v116 = v115;
            v107 = v151;
            swift_slowDealloc(v116, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v127 + 8))(v111, v128);
          v109 = v149;
          v108 = v110;
        }
        v117 = SealedMessage.data.getter(v109);
        v119 = v118;
        v151 = v108;
        v120 = v100;
        v121 = v141;
        v76 = (void (**)(char *, uint64_t))(v107 + 8);
        v27 = HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)();
        v148 = v85;
        sub_100005AB0(v117, v119);
        sub_100005AB0(v103, v151);
        (*(void (**)(char *, uint64_t))(v134 + 8))(v120, v135);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v121, v137);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v142, v144);
        (*(void (**)(char *, uint64_t))(v150 + 8))(v148, v149);
        v78 = v124;
        v77 = v123;
        goto LABEL_15;
      }
      sub_1000150E8(v89, &qword_100178588);
      v152 = 0;
      v153 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease(v153);
      v152 = 0xD000000000000021;
      v153 = 0x8000000100137540;
      v90 = v149;
      v91._countAndFlagsBits = SealedMessage.keyID.getter(v149);
      object = v91._object;
      String.append(_:)(v91);
      swift_bridgeObjectRelease(object);
      v93 = v152;
      v27 = v153;
      v94 = v147;
      (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v147, enum case for DIPError.Code.idcsPayloadDecryptionFailureMissingKeys(_:), v146);
      v95 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v96 = type metadata accessor for DIPError(0);
      v97 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v96, v97, 0, 0);
      v98 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v93, v27, 0, v94, 0, v95, 0xD000000000000069, 0x80000001001374A0, 0xD000000000000024, 0x8000000100137510, 98);
      swift_willThrow(v98);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v141, v137);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v142, v144);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v85, v90);
    }
    v53 = *(void (**)(char *, uint64_t))(v151 + 8);
    v54 = v123;
    v75 = v124;
    goto LABEL_23;
  }
  swift_release(v27);
  return v27;
}

uint64_t sub_1000FB408()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  id v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[4];

  v1 = v0;
  v2 = type metadata accessor for HPKEPrivateKey(0);
  v25 = *(_QWORD *)(v2 - 8);
  v26 = v2;
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for HPKESuiteKwV1(0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  __chkstk_darwin(v5);
  v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008E84(&qword_100178578);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONDecoder(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = JSONDecoder.init()(v12);
  v15 = v1[14];
  v14 = v1[15];
  v16 = sub_1000850F4(&qword_100178580, &qword_100178578, (uint64_t)&protocol conformance descriptor for HPKEEncryptedMessagePlain<A>);
  v17 = v31[3];
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v15, v14, v7, v16);
  result = swift_release(v13);
  if (!v17)
  {
    v19 = (void *)v1[16];
    *v4 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v4, enum case for HPKEPrivateKey.sep(_:), v26);
    v20 = v19;
    v21 = v27;
    HPKESuiteKwV1.init(skR:info:)(v4, 0, 0xC000000000000000);
    v22 = v29;
    v30[3] = v29;
    v30[4] = &protocol witness table for HPKESuiteKwV1;
    v23 = sub_1000258FC(v30);
    v24 = v28;
    (*(void (**)(_QWORD *, char *, uint64_t))(v28 + 16))(v23, v21, v22);
    HPKEEncryptedMessagePlain.open(with:authenticationContext:)(v31, v30, v1[17], v7);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v22);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_10000CE40(v30);
    return v31[0];
  }
  return result;
}

uint64_t *sub_1000FB65C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  sub_100005AB0(v0[14], v0[15]);

  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000FB6D0()
{
  uint64_t v0;

  sub_1000FB65C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for HPKEPayloadProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100016448(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEPayloadProcessor);
}

uint64_t sub_1000FB6F4(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100178524);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000935C;
  return sub_1000F9BFC(a1, a2);
}

uint64_t sub_1000FB758(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10017852C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000161F0;
  return sub_1000F9D1C(a1);
}

uint64_t sub_1000FB7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10017853C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016478;
  return sub_1000F9F4C(a1, a2);
}

uint64_t sub_1000FB808(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100178534);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100016474;
  return sub_1000F9E34(a1);
}

uint64_t sub_1000FB85C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100178544);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100016478;
  return sub_1000FA068();
}

uint64_t sub_1000FB8A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_1000FB8BC, v2, 0);
}

uint64_t sub_1000FB8BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000FA17C();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

unint64_t sub_1000FB91C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001785C0;
  if (!qword_1001785C0)
  {
    v1 = sub_100016404(&qword_1001785B8);
    sub_1000058C8(&qword_1001785C8, (uint64_t (*)(uint64_t))&type metadata accessor for AEADKey, (uint64_t)&protocol conformance descriptor for AEADKey);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001785C0);
  }
  return result;
}

unint64_t sub_1000FB9A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001785D0;
  if (!qword_1001785D0)
  {
    v1 = sub_100016404(&qword_1001785B8);
    sub_1000058C8(&qword_1001785D8, (uint64_t (*)(uint64_t))&type metadata accessor for AEADKey, (uint64_t)&protocol conformance descriptor for AEADKey);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001785D0);
  }
  return result;
}

unint64_t sub_1000FBA24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for DIPError.PropertyKey(0);
  v6 = sub_1000058C8(&qword_100177818, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000FBE04(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError.PropertyKey, &qword_100177820, (uint64_t)&protocol conformance descriptor for DIPError.PropertyKey);
}

unint64_t sub_1000FBABC(Swift::UInt a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_1000FBCC8(a1, v3);
}

unint64_t sub_1000FBB14(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_1000FBD64(a1, v3);
}

unint64_t sub_1000FBB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100178A70, (uint64_t (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000FBE04(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, qword_1001785E8, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
}

unint64_t sub_1000FBC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000FBF34(a1, a2, v5);
}

unint64_t sub_1000FBC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000FBCC8(a1, v3);
}

unint64_t sub_1000FBC98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000FC014(a1, v4);
}

unint64_t sub_1000FBCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000FBD64(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000FBE04(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_1000058C8(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_1000FBF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000FC014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100056B18(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10003BBA0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000FC0D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = &unk_10012BEE0;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 5, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000FC16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v30 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001786D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AES.GCM.SealedBox(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = a1;
  v31[1] = a2;
  v16 = a3 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key;
  v17 = type metadata accessor for AES.GCM.Nonce(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  v18 = sub_1000FD818();
  v19 = v31[3];
  static AES.GCM.seal<A>(_:using:nonce:)(v31, v16, v11, &type metadata for Data, v18);
  v20 = sub_1000FD85C((uint64_t)v11);
  if (!v19)
  {
    v21 = v6;
    v22 = v30;
    v6 = AES.GCM.SealedBox.combined.getter(v20);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v24 >> 60 == 15)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v8, enum case for DIPError.Code.failedToEncryptPayload(_:), v22);
      v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v25 = type metadata accessor for DIPError(0);
      v26 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v25, v26, 0, 0);
      v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x80000001001376F0, 0, v8, 0, v6, 0xD00000000000006BLL, 0x8000000100137640, 0xD000000000000015, 0x8000000100137710, 82);
      swift_willThrow(v27);
    }
  }
  return v6;
}

uint64_t sub_1000FC3F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE v21[24];
  char v22[24];
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v20 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v19 = (char *)&v19 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - v11;
  v13 = (uint64_t)v1 + *(_QWORD *)(v3 + 128);
  swift_beginAccess(v13, v22, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v13, v5);
  v14 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v12, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v15 = v23;
  result = sub_1000FC934();
  if (!v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 88) + 16))(result);
    v17 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, a1, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v4);
    v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v17, v5);
    swift_beginAccess(v13, v21, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v18, v5);
    return swift_endAccess(v21);
  }
  return result;
}

uint64_t sub_1000FC5E4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = *v2;
  *(_QWORD *)(v3 + 32) = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FC64C, v2, 0);
}

uint64_t sub_1000FC64C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000FC3F8(*(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 88) + 8);
  v2 = *(int **)(v1 + 8);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 80), *(_QWORD *)(v0 + 40), v1);
}

uint64_t sub_1000FC704(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FC768, v1, 0);
}

uint64_t sub_1000FC768()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000FC3F8(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 16);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_100015758;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_1000FC81C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FC880, v1, 0);
}

uint64_t sub_1000FC880()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000FC3F8(v0[7]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[4] + 88) + 8);
  v2 = *(int **)(v1 + 32);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_10001556C;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v5)(v0[2], v0[5], v1);
}

uint64_t sub_1000FC934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 112);
  v10 = v0 + 120;
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v10 + 8);
  swift_retain(v9);
  v11 = v7;
  v12 = v2;
  v13 = sub_1000FCADC(v11, v8, v9);
  swift_release(v9);
  if (v12)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v12);
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v12, v6, 0, v14, 0xD00000000000006BLL, 0x8000000100137640, 0xD000000000000010, 0x800000010012E6C0, 58);
    swift_willThrow(v17);
    swift_errorRelease(v12);
  }
  return v13;
}

uint64_t sub_1000FCADC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;

  v4 = v3;
  v8 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v22 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AES.GCM.SealedBox(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005A38(a1, a2);
  sub_1000FD204(a1, a2);
  if (v3)
  {
    v15 = v22;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v22, enum case for DIPError.Code.failedToDecryptPayload(_:), v8);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000019, 0x80000001001376B0, 0, v15, 0, v16, 0xD00000000000006BLL, 0x8000000100137640, 0xD000000000000015, 0x80000001001376D0, 94);
    swift_willThrow(v19);
    swift_errorRelease(v3);
  }
  else
  {
    v4 = static AES.GCM.open(_:using:)(v14, a3 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v4;
}

uint64_t sub_1000FCD14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = *v2;
  v3[5] = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FCD7C, v2, 0);
}

uint64_t sub_1000FCD7C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000FC3F8(v0[8]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[5] + 88) + 8);
  v2 = *(int **)(v1 + 24);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_100015A38;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[2], v0[3], v0[6], v1);
}

uint64_t sub_1000FCE30()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = *v0;
  v1[3] = *v0;
  v3 = *(_QWORD *)(v2 + 80);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FCE94, v0, 0);
}

uint64_t sub_1000FCE94()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  sub_1000FC3F8(v0[6]);
  v1 = *(_QWORD *)(*(_QWORD *)(v0[3] + 88) + 8);
  v2 = *(int **)(v1 + 40);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_100015FA0;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[4], v1);
}

_QWORD *sub_1000FCF44()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = *v0;
  sub_100005AB0(v0[14], v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  v2 = (char *)v0 + *(_QWORD *)(*v0 + 128);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000FCFB8()
{
  uint64_t v0;

  sub_1000FCF44();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AESGCMPayloadProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100016448(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AESGCMPayloadProcessor);
}

uint64_t sub_1000FCFDC(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100178674);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000935C;
  return sub_1000FC5E4(a1, a2);
}

uint64_t sub_1000FD040(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10017867C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000161F0;
  return sub_1000FC704(a1);
}

uint64_t sub_1000FD090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10017868C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100016478;
  return sub_1000FCD14(a1, a2);
}

uint64_t sub_1000FD0F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100178684);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100016474;
  return sub_1000FC81C(a1);
}

uint64_t sub_1000FD144()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100178694);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100016478;
  return sub_1000FCE30();
}

uint64_t sub_1000FD18C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_1000FD1A4, v2, 0);
}

uint64_t sub_1000FD1A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000FC934();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

void sub_1000FD204(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000FD240()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (BYTE6(v0) > 0x1BuLL)
  {
    sub_100005A38(v1, v0);
    sub_1000FD344(v1, v0);
    ((void (*)(void))AES.GCM.SealedBox.init(combined:))();
  }
  else
  {
    v2 = ((uint64_t (*)(_QWORD))type metadata accessor for CryptoKitError)(0);
    v3 = sub_1000058C8(&qword_1001786C8, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoKitError, (uint64_t)&protocol conformance descriptor for CryptoKitError);
    swift_allocError(v2, v3, 0, 0);
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for CryptoKitError.incorrectParameterSize(_:), v2);
    swift_willThrow(v5);
  }
  return sub_100005AB0(v1, v0);
}

void sub_1000FD344(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000FD3A8 + dword_1000FD5DC[sub_1000151A4(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1000FD3B8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_100005A38(v1, v0);
  sub_1000FD5EC(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100005AB0(v1, v0);
  v4 = v12;
  sub_10000CE40(&v13);
  return v4;
}

_BYTE *sub_1000FD5EC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1000FD660(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1000FD720((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1000FD798((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000FD660(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1000FD720(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1000FD798(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

unint64_t sub_1000FD818()
{
  unint64_t result;

  result = qword_1001786D8;
  if (!qword_1001786D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001786D8);
  }
  return result;
}

uint64_t sub_1000FD85C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008E84(&qword_1001786D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FD89C(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  Swift::String v16;
  Swift::Bool v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48[2];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v46 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - v13;
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16._object = (void *)0x8000000100137E20;
  v16._countAndFlagsBits = 0xD00000000000002ALL;
  v17 = NSUserDefaults.internalBool(forKey:)(v16);

  if (!v17)
    goto LABEL_6;
  defaultLogger()(v18);
  v19 = swift_bridgeObjectRetain_n(a2, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v45 = a1;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v43 = v7;
    v25 = v24;
    v48[0] = v24;
    v44 = v6;
    *(_DWORD *)v23 = 136315138;
    v42 = v23 + 4;
    swift_bridgeObjectRetain(a2);
    v47 = sub_10003FA80((uint64_t)v45, (unint64_t)a2, v48);
    v6 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v42);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "forceDeleteAccountKeySigningKey internal setting is enabled. This is will delete the key with label %s if it exists.", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v26 = v25;
    v7 = v43;
    swift_slowDealloc(v26, -1, -1);
    v27 = v23;
    a1 = v45;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  sub_1000151A4((_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 72));
  v28._countAndFlagsBits = (uint64_t)a1;
  v28._object = a2;
  SyncableKeyStoreProvider.deleteKey(label:)(v28);
  if (v30)
  {
    defaultLogger()(v29);
    DIPRecordError(_:message:log:)(v30, 0, 0xE000000000000000, v10);
    swift_errorRelease(v30);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
LABEL_6:
    sub_1000151A4((_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 72));
    v31 = SyncableKeyStoreProvider.readSyncableKey(label:)(a1, (unint64_t)a2);
    v34 = v31;
    v35 = v32;
    defaultLogger()(v31);
    v36 = sub_10000B178(v34, v35);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v38))
    {
      v39 = v7;
      v40 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 67109120;
      LODWORD(v48[0]) = v35 >> 60 != 15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, (char *)v48 + 4, v40 + 4);
      sub_10000B164(v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "isAccountKeySigningKeyAvailable -> %{BOOL}d", v40, 8u);
      v41 = v40;
      v7 = v39;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_10000B164(v34, v35);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v46, v6);
    if (v35 >> 60 != 15)
    {
      sub_10000B164(v34, v35);
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1000FDC88(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char *v17;
  unint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  unint64_t v21;
  SecAccessControlRef v22;
  __SecAccessControl *v23;
  Class isa;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v35 = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v36 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v34 = v5;
    v17 = v7;
    v18 = a2;
    v19 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createAccountKeySigningKey called", v16, 2u);
    v20 = v19;
    a2 = v18;
    v7 = v17;
    v3 = v2;
    v5 = v34;
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v21 = sub_10003E67C((uint64_t)&off_100166F48);
  v22 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenUnlocked, 0x40000000uLL, 0);
  if (v22)
  {
    v23 = v22;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    SecAccessControlSetConstraints(v23, isa);

    v25 = v37;
    v3 = dispatch thunk of SESKeystore.createKey(acl:)(v23);
    v27 = v26;
    sub_1000151A4((_QWORD *)(v25 + 48), *(_QWORD *)(v25 + 72));
    SyncableKeyStoreProvider.storeSyncableKey(key:label:)(v3, v27, v35, a2);

  }
  else
  {
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v7, enum case for DIPError.Code.secAccessControlCannotCreateACL(_:), v5);
    v28 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v29 = type metadata accessor for DIPError(0);
    v30 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v29, v30, 0, 0);
    v31 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000014, 0x8000000100137DC0, 0, v7, 0, v28, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000031, 0x8000000100137DE0, 616);
    swift_willThrow(v31);
  }
  return v3;
}

unint64_t sub_1000FDFE8(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v38;
  char *v39;
  char *v40;

  v4 = v3;
  v5 = v2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v40 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v39 = (char *)&v38 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v38 - v15;
  v17 = defaultLogger()(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v38 = v5;
    v21 = v8;
    v22 = v20;
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "retrieveAccountKeySigningKey called", v20, 2u);
    v23 = v22;
    v8 = v21;
    v4 = v3;
    v5 = v38;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v16, v8);
  sub_1000151A4((_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 72));
  v25 = SyncableKeyStoreProvider.readSyncableKey(label:)(a1, a2);
  if (!v4)
  {
    a2 = v25;
    if (v26 >> 60 != 15)
    {
      v27 = dispatch thunk of SESKeystore.getPublicKey(of:)(v25, v26);
      v29 = sub_100005AB0(v27, v28);
      v30 = v39;
      v31 = defaultLogger()(v29);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = v8;
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "valid AccountKAK, verification successful", v35, 2u);
        v36 = v35;
        v8 = v34;
        swift_slowDealloc(v36, -1, -1);
      }

      v24(v30, v8);
    }
  }
  return a2;
}

void sub_1000FE2FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint8_t *v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD v34[3];
  unint64_t v35;
  unint64_t v36;
  char v37[8];

  v3 = v2;
  v6 = type metadata accessor for DIPError.Code(0);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  __chkstk_darwin(v6);
  v33 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = defaultLogger()(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v30 = a1;
    v17 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "deleteAccountKeySigningKey called", v16, 2u);
    a1 = v30;
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_1000151A4((_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 72));
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  SyncableKeyStoreProvider.deleteKey(label:)(v18);
  if (v19)
  {
    v35 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v36);
    v35 = 0xD000000000000029;
    v36 = 0x80000001001379E0;
    swift_getErrorValue(v19, v37, v34);
    v20._countAndFlagsBits = Error.localizedDescription.getter(v34[1], v34[2]);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22 = v35;
    v23 = v36;
    v24 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v33, enum case for DIPError.Code.unableToDeleteAccountKeySigningKey(_:), v32);
    v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v26 = type metadata accessor for DIPError(0);
    v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v26, v27, 0, 0);
    v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v22, v23, 0, v24, 0, v25, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000031, 0x8000000100137A10, 656);
    swift_willThrow(v28);
    swift_errorRelease(v19);
  }
}

uint64_t sub_1000FE5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v25 = a1;
  v26 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(v2 + 16);
  v8 = UUID.init()(v5);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v12 = sub_100008E84(&qword_1001787C8);
  v13 = type metadata accessor for SESKeystore.AttestationOIDs(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + 3 * v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_10012AB20;
  v19 = v18 + v17;
  v20 = enum case for SESKeystore.AttestationOIDs.seid(_:);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  v21(v19, enum case for SESKeystore.AttestationOIDs.seid(_:), v13);
  v21(v19 + v15, enum case for SESKeystore.AttestationOIDs.acl(_:), v13);
  v21(v19 + 2 * v15, v20, v13);
  v22 = dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)(v25, v26, v9, v11, v18);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v18);
  return v22;
}

uint64_t sub_1000FE76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001787B0);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceIdentityKey(0);
  v5[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[13] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[14] = swift_task_alloc(v11);
  v5[15] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v5[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[17] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[18] = swift_task_alloc(v14);
  v5[19] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000FE868, 0, 0);
}

uint64_t sub_1000FE868()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v1 = *(Swift::String *)(v0 + 24);
  v19[0] = 778793835;
  v19[1] = 0xE400000000000000;
  String.append(_:)(v1);
  *(_QWORD *)(v0 + 160) = 0xE400000000000000;
  defaultLogger()(v2);
  v3 = swift_bridgeObjectRetain_n(0xE400000000000000, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v16 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 152);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(0xE400000000000000);
    *(_QWORD *)(v0 + 16) = sub_10003FA80(778793835, 0xE400000000000000, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    swift_bridgeObjectRelease_n(0xE400000000000000, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching key signing key with label %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v8 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v8(v18, v17);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);

    v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  *(_QWORD *)(v0 + 168) = v8;
  v12 = *(_QWORD *)(v0 + 88);
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)(525600, 0, 0, 0, 0xF000000000000000);
  v13 = type metadata accessor for DeviceIdentityOptions(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)[1]);
  *(_QWORD *)(v0 + 176) = v14;
  *v14 = v0;
  v14[1] = sub_1000FEAC8;
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(*(_QWORD *)(v0 + 120), 778793835, 0xE400000000000000, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1000FEAC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 160);
  sub_1000150E8(*(_QWORD *)(v2 + 88), &qword_1001787B0);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000FF068;
  else
    v5 = sub_1000FEB50;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000FEB50()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t, _QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(v1, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  v5 = type metadata accessor for KeySigningKey(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = sub_1000570C4(v4, v3, v1);
  v7 = v6;
  if (v2 >> 60 == 15)
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 104) + 8);
    v11 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
    v10(v8, v9, v11);
LABEL_3:
    v12 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  v18 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 32);
  v22 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock);
  v23 = swift_task_alloc(32);
  *(_QWORD *)(v23 + 16) = sub_100056AE0;
  *(_QWORD *)(v23 + 24) = v7;
  v22 += 4;
  swift_bridgeObjectRetain(v21);
  sub_10000B178(v20, v19);
  swift_retain(v7);
  os_unfair_lock_lock(v22);
  (*(void (**)(uint64_t *__return_ptr))(v23 + 16))(&v61);
  os_unfair_lock_unlock(v22);
  if (v18)
    return swift_task_dealloc(v23);
  swift_release(v7);
  swift_task_dealloc(v23);
  v24 = v62;
  if (v62 >> 60 != 15)
  {
    v35 = v61;
    sub_1001044DC(v61, v62);
    if ((v36 & 1) != 0)
    {
      v38 = *(_QWORD *)(v0 + 40);
      v37 = *(_QWORD *)(v0 + 48);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
      sub_10000B164(v35, v24);
      sub_10000B164(v38, v37);
    }
    else
    {
      v39 = defaultLogger()(v36);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Fetched key signing key does not have the expected public key identifier", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }
      v43 = *(_QWORD *)(v0 + 144);
      v44 = *(_QWORD *)(v0 + 128);
      v58 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
      v60 = *(_QWORD *)(v0 + 120);
      v45 = *(_QWORD *)(v0 + 104);
      v55 = *(_QWORD *)(v0 + 96);
      v46 = *(_QWORD *)(v0 + 40);
      v47 = *(_QWORD *)(v0 + 48);
      sub_10000B164(v35, v24);
      sub_10000B164(v46, v47);

      swift_release(v7);
      v58(v43, v44);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v60, v55);
      v7 = 0;
    }
    goto LABEL_3;
  }
  v53 = *(_QWORD *)(v0 + 96);
  v56 = *(_QWORD *)(v0 + 120);
  v25 = *(_QWORD *)(v0 + 80);
  v49 = *(_QWORD *)(v0 + 48);
  v51 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 40);
  v59 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104);
  v59(v25, enum case for DIPError.Code.idcsInvalidPublicKey(_:), *(_QWORD *)(v0 + 64));
  v26 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v27 = type metadata accessor for DIPError(0);
  v28 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v29 = swift_allocError(v27, v28, 0, 0);
  v30 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100137950, 0, v25, 0, v26, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000035, 0x8000000100137A70, 98);
  swift_willThrow(v30);
  sub_10000B164(v48, v49);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v56, v53);
  v31 = *(_QWORD *)(v0 + 152);
  v50 = *(_QWORD *)(v0 + 144);
  v52 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 80);
  v54 = *(_QWORD *)(v0 + 112);
  v57 = *(_QWORD *)(v0 + 88);
  v59(v32, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v29);
  v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v27, v28, 0, 0);
  v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100137A50, v29, v32, 0, v33, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000035, 0x8000000100137A70, 107);
  swift_willThrow(v34);
  swift_errorRelease(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v57);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ELL, 0x8000000100137A50, v1, v7, 0, v8, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000035, 0x8000000100137A70, 107);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000FF1E8(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  void *object;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v61 = a1;
  v62 = a6;
  v11 = type metadata accessor for DIPError.Code(0);
  v63 = *(_QWORD *)(v11 - 8);
  v64 = v11;
  __chkstk_darwin(v11);
  v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DIPSignpost(0);
  v66 = *(_QWORD *)(v69 - 8);
  v16 = __chkstk_darwin(v69);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmFetchSESPresentmentKey.getter(v16);
  DIPSignpost.init(_:)(v15);
  v19 = dispatch thunk of SESKeystore.getPublicKey(of:)(a3, a4);
  if (!v6)
  {
    v27 = v19;
    v28 = v20;
    v29 = type metadata accessor for SESPresentmentKey(0);
    v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_bridgeObjectRetain(a2);
    sub_100005A38(a3, a4);
    sub_100005A38(v27, v28);
    sub_1000580D4(v61, a2, a3, a4, v27, v28, v30);
    v23 = v31;
    swift_release(v30);
    sub_100005AB0(v27, v28);
    sub_100005AB0(a3, a4);
    v32 = v62;
    if (v62 >> 60 == 15)
    {
      sub_100005AB0(v27, v28);
    }
    else
    {
      v61 = v28;
      v33 = v23 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier;
      v34 = v23;
      v35 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKeyIdentifier);
      v36 = *(_QWORD *)(v33 + 8);
      sub_10000B178(a5, v62);
      sub_100005A38(v35, v36);
      sub_1001044DC(v35, v36);
      v38 = v37;
      v39 = v35;
      v23 = v34;
      sub_100005AB0(v39, v36);
      v40 = v27;
      if ((v38 & 1) == 0)
      {
        v67 = 0;
        v68 = 0xE000000000000000;
        _StringGuts.grow(_:)(51);
        v42._countAndFlagsBits = 0xD000000000000024;
        v42._object = (void *)0x8000000100137880;
        String.append(_:)(v42);
        v43 = (uint64_t *)(v23 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
        v60 = v23;
        v44 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
        v45 = v43[1];
        sub_100005A38(*v43, v45);
        v46 = Data.base16EncodedString()();
        sub_100005AB0(v44, v45);
        String.append(_:)(v46);
        swift_bridgeObjectRelease(v46._object);
        v47._countAndFlagsBits = 0x746365707865202CLL;
        v47._object = (void *)0xEB00000000206465;
        String.append(_:)(v47);
        v48 = Data.base16EncodedString()();
        object = v48._object;
        String.append(_:)(v48);
        swift_bridgeObjectRelease(object);
        v50 = v67;
        v51 = v68;
        v52 = v65;
        (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v64);
        v53 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v54 = type metadata accessor for DIPError(0);
        v55 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v56 = swift_allocError(v54, v55, 0, 0);
        v57 = v32;
        v21 = v56;
        v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v51, 0, v52, 0, v53, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000041, 0x8000000100137830, 377);
        swift_willThrow(v58);
        sub_10000B164(a5, v57);
        swift_release(v60);
        sub_100005AB0(v40, v61);
        goto LABEL_3;
      }
      sub_100005AB0(v27, v61);
      sub_10000B164(a5, v32);
    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v69);
    return v23;
  }
  v21 = v6;
LABEL_3:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v69);
  v22 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for DIPError.Code.internalError(_:), v64);
  swift_errorRetain(v21);
  v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v24 = type metadata accessor for DIPError(0);
  v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v24, v25, 0, 0);
  v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000022, 0x8000000100137800, v21, v22, 0, v23, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000041, 0x8000000100137830, 383);
  swift_willThrow(v26);
  swift_errorRelease(v21);
  return v23;
}

uint64_t sub_1000FF774@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  unint64_t v22;
  const __CFDictionary *isa;
  OSStatus v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef v30;
  __CFString *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  CFTypeRef v36;
  void *v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFTypeRef v68;
  uint64_t v69;
  unint64_t v70;
  CFTypeRef result;
  uint64_t v72;

  v66 = a4;
  v8 = type metadata accessor for DIPError.Code(0);
  v63 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v64 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v67 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v11);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v61 = v8;
    v17 = swift_slowAlloc(12, -1);
    v65 = a1;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v62 = v4;
    v20 = v19;
    v69 = v19;
    v60 = v10;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain(a2);
    result = (CFTypeRef)sub_10003FA80(v65, a2, &v69);
    v8 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&result, &v72, v18 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching keychain key with label %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v21 = v18;
    a1 = v65;
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v60);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v10);
  }
  v22 = _s7idcredd20GenericPasswordStoreC14createKeyQuery5label9laContextSDySSypGSS_So9LAContextCSgtF_0(a1, a2, a3);
  result = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  v24 = SecItemCopyMatching(isa, &result);

  v25 = result;
  if (v24 == -25300)
  {
    v29 = type metadata accessor for SymmetricKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v66, 1, 1, v29);
LABEL_14:
    v36 = v25;
    return swift_unknownObjectRelease(v36, v28);
  }
  if (!v24)
  {
    if (result
      && (v68 = result,
          swift_unknownObjectRetain(result),
          swift_dynamicCast(&v69, &v68, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6)))
    {
      v26 = v66;
      SymmetricKey.init<A>(data:)(&v69, &type metadata for Data, &protocol witness table for Data);
      v27 = type metadata accessor for SymmetricKey(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
    }
    else
    {
      v35 = type metadata accessor for SymmetricKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v66, 1, 1, v35);
    }
    v25 = result;
    goto LABEL_14;
  }
  v69 = 0;
  v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v70);
  v69 = 0xD000000000000028;
  v70 = 0x80000001001300A0;
  v30 = SecCopyErrorMessageString(v24, 0);
  if (v30)
  {
    v31 = (__CFString *)v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v34 = v33;

  }
  else
  {
    LODWORD(v68) = v24;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    v34 = v37;
  }
  v38 = v63;
  v39._countAndFlagsBits = v32;
  v39._object = v34;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v34);
  v40 = v69;
  v41 = v70;
  v42 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v64, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v8);
  v43 = sub_100008E84((uint64_t *)&unk_100178A30);
  v44 = sub_100008E84(&qword_100174898);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(_QWORD *)(v45 + 72);
  v47 = *(unsigned __int8 *)(v45 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v43, v48 + v46, v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_10012A6D0;
  v50 = v49 + v48;
  v51 = v50 + *(int *)(v44 + 48);
  v52 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v53 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v50, v52, v53);
  *(_QWORD *)(v51 + 24) = &type metadata for Int32;
  *(_DWORD *)v51 = v24;
  v54 = sub_10003E0A8(v49);
  v55 = type metadata accessor for DIPError(0);
  v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v55, v56, 0, 0);
  v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v40, v41, 0, v42, 0, v54, 0xD000000000000057, 0x8000000100130010, 0xD000000000000019, 0x80000001001300D0, 60);
  swift_willThrow(v57);
  v36 = result;
  return swift_unknownObjectRelease(v36, v28);
}

uint64_t sub_1000FFD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CredentialKeyType(0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v5[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CredentialKeyUsage(0);
  v5[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[15] = v11;
  v5[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008E84(&qword_1001787B0);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DeviceIdentityKey(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v15);
  v5[21] = swift_task_alloc(v15);
  v16 = type metadata accessor for Logger(0);
  v5[22] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[23] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[24] = swift_task_alloc(v18);
  v5[25] = swift_task_alloc(v18);
  return swift_task_switch(sub_1000FFE88, 0, 0);
}

uint64_t sub_1000FFE88()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v1 = *(Swift::String *)(v0 + 24);
  v19[0] = 778790244;
  v19[1] = 0xE400000000000000;
  String.append(_:)(v1);
  *(_QWORD *)(v0 + 208) = 0xE400000000000000;
  defaultLogger()(v2);
  v3 = swift_bridgeObjectRetain_n(0xE400000000000000, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 176);
    v18 = *(_QWORD *)(v0 + 200);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v19[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(0xE400000000000000);
    *(_QWORD *)(v0 + 16) = sub_10003FA80(778790244, 0xE400000000000000, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4);
    swift_bridgeObjectRelease_n(0xE400000000000000, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching device encryption key with label %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v8 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v8(v18, v17);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);

    v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v9, v10);
  }
  *(_QWORD *)(v0 + 216) = v8;
  v12 = *(_QWORD *)(v0 + 136);
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)(525600, 0, 1, 0, 0xF000000000000000);
  v13 = type metadata accessor for DeviceIdentityOptions(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)[1]);
  *(_QWORD *)(v0 + 224) = v14;
  *v14 = v0;
  v14[1] = sub_1001000E8;
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(*(_QWORD *)(v0 + 168), 778790244, 0xE400000000000000, *(_QWORD *)(v0 + 136));
}

uint64_t sub_1001000E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 208);
  sub_1000150E8(*(_QWORD *)(v2 + 136), &qword_1001787B0);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1001007A4;
  else
    v5 = sub_100100170;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100100170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(uint64_t, _QWORD, _QWORD);
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  v59 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v70 = *(_QWORD *)(v0 + 32);
  v74 = *(_QWORD *)(v0 + 48);
  v66 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 168), v3);
  v9 = type metadata accessor for DeviceEncryptionKey(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for CredentialKeyUsage.deviceEncryption(_:), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v59, enum case for CredentialKeyType.sep(_:), v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey, v1, v3);
  v11 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v12 = sub_100008E84(&qword_1001765F0);
  v13 = swift_allocObject(v12, 20, 7);
  *(_QWORD *)(v10 + v11) = v13;
  *(_DWORD *)(v13 + 16) = 0;
  v14 = (os_unfair_lock_s *)(v13 + 16);
  *(_QWORD *)(v10 + 16) = v66;
  *(_QWORD *)(v10 + 24) = v70;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v59, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v4, v6);
  if (v74 >> 60 == 15)
  {
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = v10;
    v18 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 152) + 8);
    v19 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
    v18(v15, v16, v19);
    v10 = v17;
LABEL_3:
    v20 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
  }
  v28 = *(_QWORD *)(v0 + 232);
  v30 = *(_QWORD *)(v0 + 40);
  v29 = *(_QWORD *)(v0 + 48);
  v31 = *(_QWORD *)(v0 + 32);
  v32 = swift_task_alloc(32);
  *(_QWORD *)(v32 + 16) = sub_100056AE0;
  *(_QWORD *)(v32 + 24) = v10;
  swift_bridgeObjectRetain(v31);
  sub_10000B178(v30, v29);
  swift_retain(v10);
  os_unfair_lock_lock(v14);
  (*(void (**)(uint64_t *__return_ptr))(v32 + 16))(&v77);
  os_unfair_lock_unlock(v14);
  if (v28)
    return swift_task_dealloc(v32);
  swift_release(v10);
  swift_task_dealloc(v32);
  v33 = v78;
  if (v78 >> 60 != 15)
  {
    v44 = v77;
    sub_1001044DC(v77, v78);
    if ((v45 & 1) != 0)
    {
      v47 = *(_QWORD *)(v0 + 40);
      v46 = *(_QWORD *)(v0 + 48);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
      sub_10000B164(v44, v33);
      sub_10000B164(v47, v46);
    }
    else
    {
      v76 = v10;
      v48 = defaultLogger()(v45);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Fetched key signing key does not have the expected public key identifier", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }
      v52 = *(_QWORD *)(v0 + 192);
      v53 = *(_QWORD *)(v0 + 176);
      v69 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
      v73 = *(_QWORD *)(v0 + 168);
      v55 = *(_QWORD *)(v0 + 144);
      v54 = *(_QWORD *)(v0 + 152);
      v56 = *(_QWORD *)(v0 + 40);
      v57 = *(_QWORD *)(v0 + 48);
      sub_10000B164(v44, v33);
      sub_10000B164(v56, v57);

      swift_release(v76);
      v69(v52, v53);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v73, v55);
      v10 = 0;
    }
    goto LABEL_3;
  }
  v67 = *(_QWORD *)(v0 + 144);
  v71 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 80);
  v62 = *(_QWORD *)(v0 + 48);
  v64 = *(_QWORD *)(v0 + 152);
  v60 = *(_QWORD *)(v0 + 40);
  v75 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104);
  v75(v34, enum case for DIPError.Code.idcsInvalidPublicKey(_:), *(_QWORD *)(v0 + 64));
  v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v36 = type metadata accessor for DIPError(0);
  v37 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v38 = swift_allocError(v36, v37, 0, 0);
  v39 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x8000000100137950, 0, v34, 0, v35, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000003BLL, 0x8000000100137910, 182);
  swift_willThrow(v39);
  sub_10000B164(v60, v62);
  swift_release(v10);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v71, v67);
  v40 = *(_QWORD *)(v0 + 200);
  v58 = *(_QWORD *)(v0 + 192);
  v61 = *(_QWORD *)(v0 + 168);
  v63 = *(_QWORD *)(v0 + 160);
  v65 = *(_QWORD *)(v0 + 136);
  v68 = *(_QWORD *)(v0 + 128);
  v72 = *(_QWORD *)(v0 + 104);
  v41 = *(_QWORD *)(v0 + 80);
  v75(v41, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v38);
  v42 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  swift_allocError(v36, v37, 0, 0);
  v43 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001001378E0, v38, v41, 0, v42, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000003BLL, 0x8000000100137910, 191);
  swift_willThrow(v43);
  swift_errorRelease(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v68);
  swift_task_dealloc(v72);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001007A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x80000001001378E0, v1, v7, 0, v8, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000003BLL, 0x8000000100137910, 191);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100100940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id result;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v19 = a4;
  v17 = a2;
  v5 = type metadata accessor for SESKeystore.SignatureOutputFormat(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  result = objc_msgSend(v9, "externalizedContext");
  if (result)
  {
    v11 = result;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v14 = v13;

    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for SESKeystore.SignatureOutputFormat.raw(_:), v5);
    v15 = dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)(a1, v17, v18, v19, v12, v14, v8, 0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100005AB0(v12, v14);

    return (id)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100100A90(uint64_t a1, uint64_t a2)
{
  return sub_1001018E0(a1, a2, 0xD000000000000021, 0x8000000100133690, 397);
}

uint64_t sub_100100AC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost(0);
  v2[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[9] = v7;
  v2[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100100B68, 0, 0);
}

uint64_t sub_100100B68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  static IDCSSignposts.ckmGenerateSESProgenitorKey.getter();
  DIPSignpost.init(_:)(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1001787DC);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_100100BCC;
  return sub_100103964();
}

uint64_t sub_100100BCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_100100C20, 0, 0);
}

uint64_t sub_100100C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[7];

  sub_100103194(*(_QWORD *)(v0 + 16), v17);
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v17[2];
  v13 = v17[1];
  v14 = v17[0];
  v16 = *(_QWORD *)(v0 + 56);
  v6 = v17[3];
  v7 = v17[4];
  v8 = v17[5];
  v9 = type metadata accessor for ProgenitorKey(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  sub_100058284(v14, v13, v5, v6, v7, v8, v10);
  v15 = v11;
  swift_release(v10);
  sub_100005AB0(v7, v8);
  sub_100005AB0(v5, v6);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v16);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t sub_100100E8C(uint64_t a1)
{
  return sub_100102610(a1, (void (*)(uint64_t))&static IDCSSignposts.ckmGenerateSESProgenitorKeyAttestation.getter, &OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob, 504);
}

unint64_t sub_100100EB4(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  void *object;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v61 = a1;
  v62 = a6;
  v11 = type metadata accessor for DIPError.Code(0);
  v63 = *(_QWORD *)(v11 - 8);
  v64 = v11;
  __chkstk_darwin(v11);
  v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DIPSignpost(0);
  v66 = *(_QWORD *)(v69 - 8);
  v16 = __chkstk_darwin(v69);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmFetchSESProgenitorKey.getter(v16);
  DIPSignpost.init(_:)(v15);
  v19 = dispatch thunk of SESKeystore.getPublicKey(of:)(a3, a4);
  if (!v6)
  {
    v27 = v19;
    v28 = v20;
    v29 = type metadata accessor for ProgenitorKey(0);
    v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_bridgeObjectRetain(a2);
    sub_100005A38(a3, a4);
    sub_100005A38(v27, v28);
    sub_100058284(v61, a2, a3, a4, v27, v28, v30);
    v23 = v31;
    swift_release(v30);
    sub_100005AB0(v27, v28);
    sub_100005AB0(a3, a4);
    v32 = v62;
    if (v62 >> 60 == 15)
    {
      sub_100005AB0(v27, v28);
    }
    else
    {
      v61 = v28;
      v33 = v23 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier;
      v34 = v23;
      v35 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKeyIdentifier);
      v36 = *(_QWORD *)(v33 + 8);
      sub_10000B178(a5, v62);
      sub_100005A38(v35, v36);
      sub_1001044DC(v35, v36);
      v38 = v37;
      v39 = v35;
      v23 = v34;
      sub_100005AB0(v39, v36);
      v40 = v27;
      if ((v38 & 1) == 0)
      {
        v67 = 0;
        v68 = 0xE000000000000000;
        _StringGuts.grow(_:)(51);
        v42._countAndFlagsBits = 0xD000000000000024;
        v42._object = (void *)0x8000000100137880;
        String.append(_:)(v42);
        v43 = (uint64_t *)(v23 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
        v60 = v23;
        v44 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
        v45 = v43[1];
        sub_100005A38(*v43, v45);
        v46 = Data.base16EncodedString()();
        sub_100005AB0(v44, v45);
        String.append(_:)(v46);
        swift_bridgeObjectRelease(v46._object);
        v47._countAndFlagsBits = 0x746365707865202CLL;
        v47._object = (void *)0xEB00000000206465;
        String.append(_:)(v47);
        v48 = Data.base16EncodedString()();
        object = v48._object;
        String.append(_:)(v48);
        swift_bridgeObjectRelease(object);
        v50 = v67;
        v51 = v68;
        v52 = v65;
        (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v64);
        v53 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
        v54 = type metadata accessor for DIPError(0);
        v55 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
        v56 = swift_allocError(v54, v55, 0, 0);
        v57 = v32;
        v21 = v56;
        v58 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v51, 0, v52, 0, v53, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000003DLL, 0x8000000100137AE0, 470);
        swift_willThrow(v58);
        sub_10000B164(a5, v57);
        swift_release(v60);
        sub_100005AB0(v40, v61);
        goto LABEL_3;
      }
      sub_100005AB0(v27, v61);
      sub_10000B164(a5, v32);
    }
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v69);
    return v23;
  }
  v21 = v6;
LABEL_3:
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v18, v69);
  v22 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, enum case for DIPError.Code.internalError(_:), v64);
  swift_errorRetain(v21);
  v23 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
  v24 = type metadata accessor for DIPError(0);
  v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v24, v25, 0, 0);
  v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100137AB0, v21, v22, 0, v23, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000003DLL, 0x8000000100137AE0, 476);
  swift_willThrow(v26);
  swift_errorRelease(v21);
  return v23;
}

uint64_t sub_100101438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1001035AC(*(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob), *(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_keyBlob + 8), a2, a3, a4);
  if (v4)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain(v4);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v16, v17, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v12, 0, v15, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000026, 0x800000010012E370, 527);
    swift_willThrow(v18);
    return swift_errorRelease(v4);
  }
  else
  {
    v20 = v13;
    v21 = v14;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey;
    v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd13ProgenitorKey_publicKey);
    v26 = *(_QWORD *)(v24 + 8);
    v27 = type metadata accessor for ProgenitorKey(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    swift_bridgeObjectRetain(v23);
    sub_100005A38(v25, v26);
    sub_100058284(v22, v23, v20, v21, v25, v26, v28);
    v30 = v29;
    swift_release(v28);
    sub_100005AB0(v25, v26);
    sub_100005AB0(v20, v21);
    return v30;
  }
}

uint64_t sub_100101674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1001035AC(*(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob), *(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob + 8), a2, a3, a4);
  if (v4)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain(v4);
    v15 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v16 = type metadata accessor for DIPError(0);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v16, v17, 0, 0);
    v18 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v12, 0, v15, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000026, 0x800000010012E370, 432);
    swift_willThrow(v18);
    return swift_errorRelease(v4);
  }
  else
  {
    v20 = v13;
    v21 = v14;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    v24 = a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey;
    v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7idcredd17SESPresentmentKey_publicKey);
    v26 = *(_QWORD *)(v24 + 8);
    v27 = type metadata accessor for SESPresentmentKey(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    swift_bridgeObjectRetain(v23);
    sub_100005A38(v25, v26);
    sub_1000580D4(v22, v23, v20, v21, v25, v26, v28);
    v30 = v29;
    swift_release(v28);
    sub_100005AB0(v25, v26);
    sub_100005AB0(v20, v21);
    return v30;
  }
}

uint64_t sub_1001018B0(uint64_t a1, uint64_t a2)
{
  return sub_1001018E0(a1, a2, 0xD00000000000001DLL, 0x8000000100137C70, 490);
}

uint64_t sub_1001018E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a5;
  v10 = type metadata accessor for DIPError.Code(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of SESKeystore.deleteKey(_:)(a1, a2);
  if (v5)
  {
    v27 = a3;
    v15 = enum case for DIPError.Code.internalError(_:);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
    v16(v13, enum case for DIPError.Code.internalError(_:), v10);
    swift_errorRetain(v5);
    v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v26 = a4;
    v18 = v17;
    v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v20 = swift_allocError(v18, v19, 0, 0);
    v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v13, 0, v25, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000016, 0x8000000100133670, 287);
    swift_willThrow(v21);
    swift_errorRelease(v5);
    v16(v13, v15, v10);
    swift_errorRetain(v20);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v18, v19, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v20, v13, 0, v22, 0xD000000000000057, 0x800000010012FD00, v27, v26, v28);
    swift_willThrow(v23);
    return swift_errorRelease(v20);
  }
  return result;
}

uint64_t sub_100101B2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CredentialKeyType(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v1[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CredentialKeyUsage(0);
  v1[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[11] = v7;
  v1[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001787B0);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceIdentityKey(0);
  v1[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[15] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v11);
  v1[17] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v1[18] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[19] = v13;
  v1[20] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v1[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[22] = v15;
  v1[23] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100101C88, 0, 0);
}

uint64_t sub_100101C88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v3 = v1[22];
  v2 = v1[23];
  v4 = v1[21];
  v5 = UUID.init()(a1);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v1[24] = v6;
  v1[25] = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v26[0] = 778790244;
  v26[1] = 0xE400000000000000;
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  v1[26] = 0xE400000000000000;
  defaultLogger()(v10);
  v11 = swift_bridgeObjectRetain_n(0xE400000000000000, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = v1[19];
    v24 = v1[18];
    v25 = v1[20];
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v26[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(0xE400000000000000);
    v1[2] = sub_10003FA80(778790244, 0xE400000000000000, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v15 + 4);
    swift_bridgeObjectRelease_n(0xE400000000000000, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Generating device encryption key with label %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v25, v24);
  }
  else
  {
    v18 = v1[19];
    v17 = v1[20];
    v19 = v1[18];
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v20 = v1[13];
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)(525600, 0, 1, 0, 0xF000000000000000);
  v21 = type metadata accessor for DeviceIdentityOptions(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)[1]);
  v1[27] = v22;
  *v22 = v1;
  v22[1] = sub_100101F00;
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v1[17], 778790244, 0xE400000000000000, v1[13]);
}

uint64_t sub_100101F00()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[27];
  (*v1)[28] = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  if (v0)
  {
    v5 = v2[25];
    sub_1000150E8(v2[13], &qword_1001787B0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    v6 = sub_100102174;
  }
  else
  {
    sub_1000150E8(v2[13], &qword_1001787B0);
    swift_bridgeObjectRelease(v4);
    v6 = sub_100101FAC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100101FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 48);
  v8 = *(void (**)(void))(*(_QWORD *)(v0 + 120) + 32);
  v8();
  v9 = type metadata accessor for DeviceEncryptionKey(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for CredentialKeyUsage.deviceEncryption(_:), v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for CredentialKeyType.sep(_:), v7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v10 + OBJC_IVAR____TtC7idcredd36DeviceIdentityKeyBackedCredentialKey_deviceIdentityKey, v15, v1);
  v11 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v12 = sub_100008E84(&qword_1001765F0);
  v13 = swift_allocObject(v12, 20, 7);
  *(_DWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v10 + v11) = v13;
  *(_QWORD *)(v10 + 16) = v16;
  *(_QWORD *)(v10 + 24) = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + OBJC_IVAR____TtC7idcredd13CredentialKey_type, v5, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage, v2, v4);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v18);
  swift_task_dealloc(v15);
  swift_task_dealloc(v21);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_100102174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000026, 0x8000000100137D70, v1, v7, 0, v8, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000001DLL, 0x8000000100137DA0, 143);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v35 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.ckmGenerateSESPresentmentKey.getter(v11);
  DIPSignpost.init(_:)(v8);
  sub_100103194(a1, v30);
  if (v1)
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104);
    v15 = v35;
    v14(v35, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v1);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v17, v18, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x8000000100137B70, v1, v15, 0, v16, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000001FLL, 0x8000000100137BA0, 359);
    swift_willThrow(v19);
    swift_errorRelease(v1);
  }
  else
  {
    v35 = v30[0];
    v20 = v31;
    v28 = v31;
    v29 = v30[1];
    v21 = v32;
    v22 = v33;
    v23 = v34;
    v24 = type metadata accessor for SESPresentmentKey(0);
    v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    sub_1000580D4(v35, v29, v20, v21, v22, v23, v25);
    v15 = v26;
    swift_release(v25);
    sub_100005AB0(v22, v23);
    sub_100005AB0(v28, v21);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return v15;
}

uint64_t sub_1001025E8(uint64_t a1)
{
  return sub_100102610(a1, (void (*)(uint64_t))&static IDCSSignposts.ckmGenerateSESPresentmentKeyAttestation.getter, &OBJC_IVAR____TtC7idcredd17SESPresentmentKey_keyBlob, 409);
}

uint64_t sub_100102610(uint64_t a1, void (*a2)(uint64_t), _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[4];
  uint64_t v67;

  v59 = a4;
  v7 = type metadata accessor for DIPError.Code(0);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7);
  v58 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DIPSignpost(0);
  v64 = *(_QWORD *)(v67 - 8);
  v16 = __chkstk_darwin(v67);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v16);
  v19 = DIPSignpost.init(_:)(v15);
  v20 = (uint64_t *)(a1 + *a3);
  v21 = *v20;
  v60 = (void (*)(char *))v20[1];
  v61 = v21;
  v22 = UUID.init()(v19);
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v66[2] = v23;
  v66[3] = v25;
  v66[0] = 45;
  v66[1] = 0xE100000000000000;
  v65[0] = 0;
  v65[1] = 0xE000000000000000;
  v26 = sub_1000533A0();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v66, v65, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v26, v26, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  v30 = sub_100008E84(&qword_1001787C8);
  v31 = type metadata accessor for SESKeystore.AttestationOIDs(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = *(unsigned __int8 *)(v32 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v30, v35 + 3 * v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10012AB20;
  v37 = v36 + v35;
  v38 = *(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104);
  v38(v37, enum case for SESKeystore.AttestationOIDs.seid(_:), v31);
  v38(v37 + v33, enum case for SESKeystore.AttestationOIDs.acl(_:), v31);
  v38(v37 + 2 * v33, enum case for SESKeystore.AttestationOIDs.osInfo(_:), v31);
  v39 = v63;
  v40 = dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)(v61, v60, v27, v29, v36);
  v42 = v41;
  if (v39)
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v36);
    LODWORD(v61) = enum case for DIPError.Code.internalError(_:);
    v43 = v57;
    v60 = *(void (**)(char *))(v56 + 104);
    v62 = v42;
    v44 = v58;
    v60(v58);
    swift_errorRetain(v39);
    v45 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v46 = type metadata accessor for DIPError(0);
    v47 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v48 = swift_allocError(v46, v47, 0, 0);
    v63 = v40;
    v49 = v48;
    v50 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v39, v44, 0, v45, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000028, 0x8000000100137B20, 302);
    swift_willThrow(v50);
    swift_errorRelease(v39);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v67);
    ((void (*)(char *, _QWORD, uint64_t))v60)(v44, v61, v43);
    swift_errorRetain(v49);
    v51 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    swift_allocError(v46, v47, 0, 0);
    v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v49, v44, 0, v51, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000001FLL, 0x8000000100137B50, v59);
    swift_willThrow(v52);
    v53 = v49;
    v40 = v63;
    swift_errorRelease(v53);
  }
  else
  {
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v29);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v67);
  }
  return v40;
}

uint64_t sub_100102B18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[3] = v0;
  v2 = type metadata accessor for DIPError.Code(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_1001787B0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DeviceIdentityKey(0);
  v1[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v7);
  v1[11] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v1[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[13] = v9;
  v1[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v1[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[16] = v11;
  v1[17] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100102C24, 0, 0);
}

uint64_t sub_100102C24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v3 = v1[16];
  v2 = v1[17];
  v4 = v1[15];
  v5 = UUID.init()(a1);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v1[18] = v6;
  v1[19] = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v26[0] = 778793835;
  v26[1] = 0xE400000000000000;
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  v1[20] = 0xE400000000000000;
  defaultLogger()(v10);
  v11 = swift_bridgeObjectRetain_n(0xE400000000000000, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = v1[13];
    v24 = v1[12];
    v25 = v1[14];
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v26[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(0xE400000000000000);
    v1[2] = sub_10003FA80(778793835, 0xE400000000000000, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v15 + 4);
    swift_bridgeObjectRelease_n(0xE400000000000000, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Generating key signing key with label %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v25, v24);
  }
  else
  {
    v18 = v1[13];
    v17 = v1[14];
    v19 = v1[12];
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v20 = v1[7];
  DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)(525600, 0, 0, 0, 0xF000000000000000);
  v21 = type metadata accessor for DeviceIdentityOptions(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)[1]);
  v1[21] = v22;
  *v22 = v1;
  v22[1] = sub_100102E9C;
  return DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(v1[11], 778793835, 0xE400000000000000, v1[7]);
}

uint64_t sub_100102E9C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[21];
  (*v1)[22] = v0;
  swift_task_dealloc(v3);
  v4 = v2[20];
  if (v0)
  {
    v5 = v2[19];
    sub_1000150E8(v2[7], &qword_1001787B0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);
    v6 = sub_100103018;
  }
  else
  {
    sub_1000150E8(v2[7], &qword_1001787B0);
    swift_bridgeObjectRelease(v4);
    v6 = sub_100102F48;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100102F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(v6, v5, *(_QWORD *)(v0 + 64));
  v9 = type metadata accessor for KeySigningKey(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = sub_1000570C4(v1, v2, v6);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_100103018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 104))(v7, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 32));
  swift_errorRetain(v1);
  v8 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v9 = type metadata accessor for DIPError(0);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v9, v10, 0, 0);
  v11 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000020, 0x8000000100137E50, v1, v7, 0, v8, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000017, 0x8000000100137E80, 71);
  swift_willThrow(v11);
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103194@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;

  v27 = a2;
  v28 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v29 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = UUID.init()(v8);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = dispatch thunk of SESKeystore.createKey(acl:)(a1);
  if (v2)
  {
    swift_bridgeObjectRelease(v14);
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v29, enum case for DIPError.Code.internalError(_:), v28);
    swift_errorRetain(v2);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v23, v24, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x8000000100137BC0, v2, v21, 0, v22, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000014, 0x8000000100137BE0, 279);
    swift_willThrow(v25);
    return swift_errorRelease(v2);
  }
  else
  {
    v17 = v15;
    v18 = v16;
    v19 = v27;
    result = dispatch thunk of SESKeystore.getPublicKey(of:)(v15, v16);
    *v19 = v12;
    v19[1] = v14;
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = result;
    v19[5] = v26;
  }
  return result;
}

uint64_t sub_1001033D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = dispatch thunk of SESKeystore.getACLConstraints(of:)(a1, a2);
  if (v2)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DIPError.Code.internalError(_:), v6);
    swift_errorRetain(v2);
    v14 = sub_1000CFC1C((uint64_t)&_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v9, 0, v14, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000016, 0x8000000100134230, 312);
    swift_willThrow(v17);
    swift_errorRelease(v2);
  }
  else
  {
    v12 = v10;
    v13 = v11;
    type metadata accessor for SecAccessControl(0);
    v3 = static SecAccessControlRef.fromConstraintsData(_:)(v12, v13);
    sub_100005AB0(v12, v13);
  }
  return v3;
}

uint64_t sub_1001035AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v34 = a4;
  v35 = a5;
  v32 = type metadata accessor for DIPError.Code(0);
  v9 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  defaultLogger()(v13);
  v37 = v5;
  v38 = a1;
  v39 = a2;
  Logger.cryptoParam(_:)(sub_100105AA8, v36);
  v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v15, v11);
  v17 = v40;
  v18 = dispatch thunk of SESKeystore.changeACL(of:to:authorizingLAContext:)(a1, a2, a3, v34, v35);
  v19 = v18;
  v21 = v20;
  if (v17)
  {
    v22 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v33, enum case for DIPError.Code.internalError(_:), v32);
    swift_errorRetain(v17);
    v23 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v24 = type metadata accessor for DIPError(0);
    v25 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v24, v25, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v17, v22, 0, v23, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000031, 0x8000000100137C90, 344);
    swift_willThrow(v26);
    swift_errorRelease(v17);
  }
  else
  {
    v27 = defaultLogger()(v18);
    __chkstk_darwin(v27);
    v29 = v5;
    v30 = v19;
    v31 = v21;
    Logger.cryptoParam(_:)(sub_100105AE4, &v32 - 6);
    v16(v15, v11);
  }
  return v19;
}

unint64_t sub_100103820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  void *object;

  v3 = dispatch thunk of SESKeystore.getACLConstraints(of:)(a2, a3);
  v5 = v4;
  type metadata accessor for SecAccessControl(0);
  v7 = (void *)static SecAccessControlRef.fromConstraintsData(_:)(v3, v5);
  _StringGuts.grow(_:)(27);
  v8 = swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = SecAccessControlRef.constraintsDescription.getter(v8);
  object = v9._object;
  String.append(_:)(v9);

  swift_bridgeObjectRelease(object);
  sub_100005AB0(v3, v5);
  return 0xD000000000000019;
}

uint64_t sub_100103964()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DIPError.Code(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPError(0);
  v1[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[10] = v7;
  v1[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100103A14, 0, 0);
}

uint64_t sub_100103A14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[14];
  v3 = v1[15];
  sub_1000151A4(v1 + 11, v2);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()[1]);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_100103A84;
  return dispatch thunk of SEPairingManaging.pairSecureElementIfNecessary()(v2, v3);
}

uint64_t sub_100103A84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 96);
  v3 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100103B10, 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v3 + 40);
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100103B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 48));
  swift_errorRetain(v1);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v9, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000001ELL, 0x8000000100137C50, 597);
  v10 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v11 = swift_allocError(v4, v10, 0, 0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v2, v4);
  defaultLogger()(v13);
  DIPRecordError(_:message:log:)(v11, 0, 0xE000000000000000, v6);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_errorRelease(v11);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100103CA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  Swift::String v19;
  void *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;

  v47 = a3;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  v45 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008E84(&qword_1001787B8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for SymmetricKey(0);
  v12 = *(_QWORD *)(v46 - 8);
  v13 = __chkstk_darwin(v46);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v48 = 778793072;
  v49 = 0xE400000000000000;
  v18 = (_QWORD *)a1;
  v19._countAndFlagsBits = a1;
  v20 = a2;
  v19._object = a2;
  String.append(_:)(v19);
  v21 = v49;
  v22 = v50;
  sub_1000FF774(v48, v49, v47, (uint64_t)v11);
  swift_bridgeObjectRelease(v21);
  if (!v22)
  {
    v23 = v45;
    v47 = v18;
    v50 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v46) == 1)
    {
      sub_1000150E8((uint64_t)v11, &qword_1001787B8);
      v24 = v8;
      (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v8, enum case for DIPError.Code.failedToFetchPayloadProtectionKey(_:), v44);
      v25 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v26 = type metadata accessor for DIPError(0);
      v27 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v26, v27, 0, 0);
      v28 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002ELL, 0x8000000100137980, 0, v24, 0, v25, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000002ALL, 0x80000001001379B0, 570);
      swift_willThrow(v28);
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v30 = v46;
      v29(v17, v11, v46);
      v29(v15, v17, v30);
      v31 = type metadata accessor for PayloadProtectionKey(0);
      v18 = (_QWORD *)swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      *(_OWORD *)((char *)v18 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier) = xmmword_10012A6F0;
      v29((char *)v18 + OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key, v15, v30);
      v32 = (char *)v18 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
      v33 = enum case for CredentialKeyType.keychain(_:);
      v34 = type metadata accessor for CredentialKeyType(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v32, v33, v34);
      v35 = (char *)v18 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
      v36 = enum case for CredentialKeyUsage.payloadProtection(_:);
      v37 = type metadata accessor for CredentialKeyUsage(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
      v38 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
      v39 = sub_100008E84(&qword_1001765F0);
      v40 = swift_allocObject(v39, 20, 7);
      *(_DWORD *)(v40 + 16) = 0;
      *(_QWORD *)((char *)v18 + v38) = v40;
      v41 = v50;
      v18[2] = v47;
      v18[3] = v41;
      swift_bridgeObjectRetain(v41);
    }
  }
  return v18;
}

uint64_t sub_100104060()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  sub_10000CE40(v0 + 6);
  sub_10000CE40(v0 + 11);
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for CredentialKeyManager()
{
  return objc_opt_self(_TtC7idcredd20CredentialKeyManager);
}

void sub_1001040CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10010412C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100104310);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100104334(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100104354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1001040CC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100104428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1001040CC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1001044DC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100104528()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10010455C + dword_100104734[v0 >> 62]))();
}

uint64_t sub_10010456C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void sub_100104754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a1;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v44 - v7;
  v9 = type metadata accessor for DIPError.Code(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008854(0);
  if (v1)
  {
    v14 = enum case for DIPError.Code.internalError(_:);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v15(v12, enum case for DIPError.Code.internalError(_:), v9);
    swift_errorRetain(v1);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v17 = type metadata accessor for DIPError(0);
    v18 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v19 = swift_allocError(v17, v18, 0, 0);
    v20 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v12, 0, v16, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000002ALL, 0x800000010012FDA0, 249);
    swift_willThrow(v20);
    swift_errorRelease(v1);
    v15(v12, v14, v9);
    swift_errorRetain(v19);
    v21 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v22, v23, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v19, v12, 0, v21, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000021, 0x80000001001378B0, 264);
    swift_willThrow(v24);
    swift_errorRelease(v19);
  }
  else
  {
    v25 = v13;
    v44[1] = v10;
    v45 = v6;
    v44[0] = v12;
    v46 = v3;
    v47 = v2;
    v26 = v48;
    v27 = sub_1000098F8(v48, v13);
    v28 = swift_bridgeObjectRelease(v25);
    if (v27)
    {
      v29 = defaultLogger()(v28);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.debug.getter();
      v32 = os_log_type_enabled(v30, v31);
      v33 = v46;
      if (v32)
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v34 = 134349056;
        v49 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v34 + 4);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Deleting presentment key in slot %{public}ld from SE", v34, 0xCu);
        swift_slowDealloc(v34, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v47);
      sub_100007030(v26);
    }
    else
    {
      v35 = v26;
      v36 = v45;
      v37 = defaultLogger()(v28);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.debug.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = v46;
      v42 = v47;
      if (v40)
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v43 = 134349056;
        v36 = v45;
        v49 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43 + 4);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not trying to delete key in slot %{public}ld because slot is not occupied", v43, 0xCu);
        swift_slowDealloc(v43, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v42);
    }
  }
}

unint64_t sub_100104BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  __n128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _OWORD v50[2];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v49 = a5;
  v47 = a4;
  v46 = type metadata accessor for DIPError.Code(0);
  v7 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008E84(&qword_1001757D0);
  inited = swift_initStackObject(v10, &v53);
  *(_OWORD *)(inited + 16) = xmmword_10012AB30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecClass);
  *(_QWORD *)(inited + 40) = v12;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 48) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccount);
  *(_QWORD *)(inited + 88) = v14;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 104) = a3;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecUseDataProtectionKeychain);
  *(_QWORD *)(inited + 136) = v15;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecValueData);
  *(_QWORD *)(inited + 184) = v16;
  v17 = type metadata accessor for SymmetricKey(0);
  v18 = sub_1000058C8(&qword_100177768, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey, (uint64_t)&protocol conformance descriptor for SymmetricKey);
  v19 = (id)kSecClassGenericPassword;
  v20 = swift_bridgeObjectRetain(a3);
  v21 = v48;
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v51, sub_1000CE040, 0, &type metadata for Data, v17, v18, v20);
  v22 = v51;
  *(_QWORD *)(inited + 216) = &type metadata for Data;
  *(_OWORD *)(inited + 192) = v22;
  v23 = inited;
  v24 = v49;
  v25 = sub_10003E548(v23);
  if (v24 >> 60 != 11)
  {
    v26 = v9;
    v28 = v46;
    v27 = v47;
    if (v24 >> 60 == 15)
    {
      v29 = v47;
LABEL_7:
      sub_1000412EC(v29, v24);
      return v25;
    }
    type metadata accessor for SecAccessControl(0);
    v31 = v30;
    sub_10000B178(v27, v24);
    sub_10000B178(v27, v24);
    v32 = static SecAccessControlRef.fromData(_:)(v27, v24);
    if (!v21)
    {
      v38 = (void *)v32;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrAccessControl);
      v41 = v40;
      v52 = v31;
      *(_QWORD *)&v51 = v38;
      sub_100041220(&v51, v50);
      v42 = v38;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      v54 = v25;
      sub_10011FB90(v50, v39, v41, isUniquelyReferenced_nonNull_native);
      v25 = v54;
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(0x8000000000000000);
      v44 = v47;
      sub_1000412EC(v47, v24);

      v29 = v44;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v26, enum case for DIPError.Code.internalError(_:), v28);
    swift_errorRetain(v21);
    v33 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v34 = type metadata accessor for DIPError(0);
    v35 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v34, v35, 0, 0);
    v36 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000029, 0x8000000100130340, v21, v26, 0, v33, 0xD000000000000057, 0x8000000100130010, 0xD00000000000002FLL, 0x8000000100130370, 90);
    swift_willThrow(v36);
    swift_errorRelease(v21);
    v37 = v47;
    sub_1000412EC(v47, v24);
    sub_1000412EC(v37, v24);
  }
  return v25;
}

void sub_100104FE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const __CFDictionary *isa;
  OSStatus v27;
  CFStringRef v28;
  __CFString *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = a5;
  v10 = type metadata accessor for DIPError.Code(0);
  v59 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v62 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100040514(a2, a3);
  if (!v5)
  {
    v55 = v13;
    v56 = v12;
    v57 = a4;
    v58 = v10;
    defaultLogger()(v15);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v63 = v20;
      *(_DWORD *)v19 = 136315138;
      v54 = v19 + 4;
      swift_bridgeObjectRetain(a3);
      v65 = sub_10003FA80(a2, a3, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Storing keychain key with label %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v56);
      v21 = a2;
      v22 = v57;
      v23 = v58;
      v24 = v61;
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v56);
      v22 = v57;
      v23 = v58;
      v24 = v61;
      v21 = a2;
    }
    v25 = sub_100104BF8(a1, v21, a3, v22, v24);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v25);
    v27 = SecItemAdd(isa, 0);

    if (v27)
    {
      v63 = 0;
      v64 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease(v64);
      v63 = 0xD00000000000002BLL;
      v64 = 0x800000010012FFE0;
      v28 = SecCopyErrorMessageString(v27, 0);
      if (v28)
      {
        v29 = (__CFString *)v28;
        v30 = v60;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v33 = v32;

      }
      else
      {
        v30 = v60;
        LODWORD(v65) = v27;
        v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v33 = v34;
      }
      v35._countAndFlagsBits = v31;
      v35._object = v33;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v33);
      v36 = v63;
      v37 = v64;
      (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v30, enum case for DIPError.Code.failedToGeneratePayloadProtectionKey(_:), v23);
      v38 = sub_100008E84((uint64_t *)&unk_100178A30);
      v39 = sub_100008E84(&qword_100174898);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(_QWORD *)(v40 + 72);
      v42 = *(unsigned __int8 *)(v40 + 80);
      v43 = (v42 + 32) & ~v42;
      v44 = swift_allocObject(v38, v43 + v41, v42 | 7);
      *(_OWORD *)(v44 + 16) = xmmword_10012A6D0;
      v45 = v44 + v43;
      v46 = v45 + *(int *)(v39 + 48);
      v47 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
      v48 = type metadata accessor for DIPError.PropertyKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v45, v47, v48);
      *(_QWORD *)(v46 + 24) = &type metadata for Int32;
      *(_DWORD *)v46 = v27;
      v49 = sub_10003E0A8(v44);
      v50 = type metadata accessor for DIPError(0);
      v51 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v50, v51, 0, 0);
      v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v36, v37, 0, v30, 0, v49, 0xD000000000000057, 0x8000000100130010, 0xD000000000000027, 0x8000000100130070, 40);
      swift_willThrow(v52);
    }
  }
}

char *sub_1001054BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for SymmetricKeySize(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymmetricKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v36 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSUUID), "init");
  v14 = objc_msgSend(v13, "UUIDString");

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v38 = 778793072;
  v39 = 0xE400000000000000;
  v37 = v15;
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  v19 = v38;
  v20 = v39;
  v21 = sub_10000B178(a1, a2);
  static SymmetricKeySize.bits256.getter(v21);
  SymmetricKey.init(size:)(v6);
  sub_10000B178(a1, a2);
  v22 = v40;
  sub_100104FE0((uint64_t)v12, v19, v20, a1, a2);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    sub_10000B164(a1, a2);
    sub_10000B164(a1, a2);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    sub_10000B164(a1, a2);
    swift_bridgeObjectRelease(v20);
    sub_10000B164(a1, a2);
    v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v24 = v36;
    v23(v36, v12, v7);
    v25 = type metadata accessor for PayloadProtectionKey(0);
    v6 = (char *)swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    *(_OWORD *)&v6[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_publicKeyIdentifier] = xmmword_10012A6F0;
    v23(&v6[OBJC_IVAR____TtC7idcredd20PayloadProtectionKey_key], v24, v7);
    v26 = &v6[OBJC_IVAR____TtC7idcredd13CredentialKey_type];
    v27 = enum case for CredentialKeyType.keychain(_:);
    v28 = type metadata accessor for CredentialKeyType(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
    v29 = &v6[OBJC_IVAR____TtC7idcredd13CredentialKey_usage];
    v30 = enum case for CredentialKeyUsage.payloadProtection(_:);
    v31 = type metadata accessor for CredentialKeyUsage(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v29, v30, v31);
    v32 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
    v33 = sub_100008E84(&qword_1001765F0);
    v34 = swift_allocObject(v33, 20, 7);
    *(_DWORD *)(v34 + 16) = 0;
    *(_QWORD *)&v6[v32] = v34;
    *((_QWORD *)v6 + 2) = v37;
    *((_QWORD *)v6 + 3) = v17;
  }
  return v6;
}

uint64_t sub_1001057CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for ExternalSEPresentmentKey(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_OWORD *)(v9 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey) = xmmword_10012A6F0;
  v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  *v10 = a3;
  v10[1] = a4;
  v11 = v9 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v12 = enum case for CredentialKeyType.externalSE(_:);
  v13 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v11, v12, v13);
  v14 = v9 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v15 = enum case for CredentialKeyUsage.presentment(_:);
  v16 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  v17 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v18 = sub_100008E84(&qword_1001765F0);
  v19 = swift_allocObject(v18, 20, 7);
  *(_DWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v9 + v17) = v19;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  sub_100005A38(a3, a4);
  return v9;
}

uint64_t sub_100105910(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = UUID.init()(v6);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v13 = type metadata accessor for ExternalSEPresentmentKey(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_OWORD *)(v14 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKey) = xmmword_10012A6F0;
  v15 = (uint64_t *)(v14 + OBJC_IVAR____TtC7idcredd24ExternalSEPresentmentKey_publicKeyIdentifier);
  *v15 = a1;
  v15[1] = a2;
  v16 = v14 + OBJC_IVAR____TtC7idcredd13CredentialKey_type;
  v17 = enum case for CredentialKeyType.externalSE(_:);
  v18 = type metadata accessor for CredentialKeyType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v19 = v14 + OBJC_IVAR____TtC7idcredd13CredentialKey_usage;
  v20 = enum case for CredentialKeyUsage.presentment(_:);
  v21 = type metadata accessor for CredentialKeyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  v22 = OBJC_IVAR____TtC7idcredd13CredentialKey_lock;
  v23 = sub_100008E84(&qword_1001765F0);
  v24 = swift_allocObject(v23, 20, 7);
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v14 + v22) = v24;
  *(_QWORD *)(v14 + 16) = v10;
  *(_QWORD *)(v14 + 24) = v12;
  sub_100005A38(a1, a2);
  return v14;
}

unint64_t sub_100105AA8()
{
  uint64_t *v0;

  return sub_100103820(v0[2], v0[3], v0[4]);
}

unint64_t sub_100105AE4()
{
  uint64_t *v0;

  return sub_100103820(v0[2], v0[3], v0[4]);
}

uint64_t sub_100105B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[21] = v5;
  v3[22] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DIPBackgroundDeferralStatus(0);
  v3[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[24] = v7;
  v3[25] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_1001787F8);
  v3[26] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v9);
  v3[28] = swift_task_alloc(v9);
  v3[29] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100008E84(&qword_100178800) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v10);
  v3[31] = swift_task_alloc(v10);
  v3[32] = swift_task_alloc(v10);
  v3[33] = swift_task_alloc(v10);
  v3[34] = swift_task_alloc(v10);
  v3[35] = swift_task_alloc(v10);
  v3[36] = swift_task_alloc(v10);
  v3[37] = swift_task_alloc(v10);
  v3[38] = swift_task_alloc(v10);
  v11 = type metadata accessor for FeatureFlagProvider(0);
  v3[39] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[40] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[41] = swift_task_alloc(v13);
  v3[42] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v3[43] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[44] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v16);
  v3[46] = swift_task_alloc(v16);
  v3[47] = swift_task_alloc(v16);
  return swift_task_switch(sub_100105CF4, 0, 0);
}

uint64_t sub_100105CF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  _QWORD *v37;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting garbage collection", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[47];
  v8 = v1[43];
  v7 = v1[44];
  v10 = v1[41];
  v9 = v1[42];
  v11 = v1[40];
  v36 = v1[39];
  v12 = (uint64_t *)v1[19];

  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v1[48] = v13;
  v13(v6, v8);
  v14 = *v12;
  v1[5] = &type metadata for CredentialDecryptionKeyIdentifierProvider;
  v1[6] = &off_100167928;
  v15 = type metadata accessor for PayloadProcessorBuilder();
  v16 = swift_allocObject(v15, 16, 7);
  swift_retain(v14);
  v17 = sub_100079C04();
  FeatureFlagProvider.init()();
  sub_100079DA8((uint64_t)(v1 + 2), (uint64_t)(v1 + 7));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v36);
  swift_retain(v16);
  v37 = sub_100079DE4((uint64_t)&off_100167178, v14, 0, (uint64_t)(v1 + 7), v16, (uint64_t)v17, v10);
  v1[49] = v37;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v36);
  swift_release(v16);
  sub_10006CA58((uint64_t)(v1 + 2));
  v18 = type metadata accessor for SESKeystore(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v20 = SESKeystore.init()(v19);
  v21 = type metadata accessor for SEPairingManager(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v23 = SEPairingManager.init()(v22);
  v24 = type metadata accessor for GenericPasswordKeychainWrapper();
  v25 = swift_allocObject(v24, 16, 7);
  v26 = type metadata accessor for SyncableKeyStoreProvider();
  v27 = (_QWORD *)swift_allocObject(v26, 56, 7);
  v27[5] = v24;
  v27[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v27[2] = v25;
  v1[15] = v26;
  v1[16] = &off_10016AB90;
  v1[12] = v27;
  v28 = type metadata accessor for CredentialKeyManager();
  v29 = (_QWORD *)swift_allocObject(v28, 128, 7);
  v30 = sub_10002E040((uint64_t)(v1 + 12), v26);
  v31 = *(_QWORD *)(v26 - 8);
  v32 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 16))(v32, v30, v26);
  v33 = *v32;
  swift_retain(v27);
  v1[50] = sub_10011A080(v20, v23, v33, v29);
  sub_10000CE40(v1 + 12);
  swift_release(v27);
  swift_task_dealloc(v32);
  v34 = (_QWORD *)swift_task_alloc(dword_10017880C);
  v1[51] = v34;
  *v34 = v1;
  v34[1] = sub_100105FF8;
  return sub_100108850((uint64_t)v37);
}

uint64_t sub_100105FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100106F80;
  else
    v3 = sub_10010605C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010605C()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(void (**)(void))(v0 + 136);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  if (v1)
  {
    v1();
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0, 1, v3);
  }
  else
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(*(_QWORD *)(v0 + 304), 1, 1, v3);
  }
  *(_QWORD *)(v0 + 424) = v5;
  v7 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 528) = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  v12 = *(void (**)(uint64_t))(v11 + 104);
  *(_QWORD *)(v0 + 432) = v12;
  v12(v7);
  v5(v7, 0, 1, v10);
  v13 = v8 + *(int *)(v9 + 48);
  sub_10010F1FC(v6, v8);
  sub_10010F1FC(v7, v13);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  *(_QWORD *)(v0 + 440) = v14;
  if (v14(v8, 1, v10) == 1)
  {
    v15 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 296), &qword_100178800);
    sub_1000150E8(v15, &qword_100178800);
    if (v14(v13, 1, v16) == 1)
    {
      v17 = *(_QWORD *)(v0 + 392);
      v18 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 232), &qword_100178800);
LABEL_12:
      swift_release(v18);
      swift_release(v17);
      v33 = *(_QWORD *)(v0 + 368);
      v34 = *(_QWORD *)(v0 + 360);
      v35 = *(_QWORD *)(v0 + 328);
      v36 = *(_QWORD *)(v0 + 336);
      v38 = *(_QWORD *)(v0 + 296);
      v37 = *(_QWORD *)(v0 + 304);
      v40 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 288);
      v41 = *(_QWORD *)(v0 + 272);
      v44 = *(_QWORD *)(v0 + 264);
      v45 = *(_QWORD *)(v0 + 256);
      v46 = *(_QWORD *)(v0 + 248);
      v47 = *(_QWORD *)(v0 + 240);
      v48 = *(_QWORD *)(v0 + 232);
      v49 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 216);
      v51 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 288));
  v20 = v14(v13, 1, v19);
  v22 = *(_QWORD *)(v0 + 296);
  v21 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 288);
  if (v20 == 1)
  {
    v24 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 296), &qword_100178800);
    sub_1000150E8(v21, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 232), &qword_1001787F8);
    goto LABEL_13;
  }
  v26 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 200);
  v29 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v13, v29);
  v30 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v27, v29, v30);
  v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v32(v27, v29);
  sub_1000150E8(v22, &qword_100178800);
  sub_1000150E8(v21, &qword_100178800);
  v32(v23, v29);
  sub_1000150E8(v26, &qword_100178800);
  if ((v31 & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v43 = (_QWORD *)swift_task_alloc(dword_100178814);
  *(_QWORD *)(v0 + 448) = v43;
  *v43 = v0;
  v43[1] = sub_100106424;
  return sub_1001093F8(*(_QWORD *)(v0 + 400));
}

uint64_t sub_100106424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100107528;
  else
    v3 = sub_100106488;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100106488()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(void (**)(void))(v0 + 136);
  if (v1)
  {
    v1();
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v5 = *(unsigned int *)(v0 + 528);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 424);
  v8 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 184);
  v6(v7, v2, 1, v11);
  v4(v8, v5, v11);
  v6(v8, 0, 1, v11);
  v12 = v9 + *(int *)(v10 + 48);
  sub_10010F1FC(v7, v9);
  sub_10010F1FC(v8, v12);
  v13 = v3(v9, 1, v11);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 272), &qword_100178800);
    sub_1000150E8(v15, &qword_100178800);
    if (v14(v12, 1, v16) == 1)
    {
      v17 = *(_QWORD *)(v0 + 392);
      v18 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 224), &qword_100178800);
LABEL_12:
      swift_release(v18);
      swift_release(v17);
      v33 = *(_QWORD *)(v0 + 368);
      v34 = *(_QWORD *)(v0 + 360);
      v35 = *(_QWORD *)(v0 + 328);
      v36 = *(_QWORD *)(v0 + 336);
      v38 = *(_QWORD *)(v0 + 296);
      v37 = *(_QWORD *)(v0 + 304);
      v40 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 288);
      v41 = *(_QWORD *)(v0 + 272);
      v44 = *(_QWORD *)(v0 + 264);
      v45 = *(_QWORD *)(v0 + 256);
      v46 = *(_QWORD *)(v0 + 248);
      v47 = *(_QWORD *)(v0 + 240);
      v48 = *(_QWORD *)(v0 + 232);
      v49 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 216);
      v51 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 264));
  v20 = v14(v12, 1, v19);
  v22 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 264);
  if (v20 == 1)
  {
    v24 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 272), &qword_100178800);
    sub_1000150E8(v21, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 224), &qword_1001787F8);
    goto LABEL_13;
  }
  v26 = *(_QWORD *)(v0 + 224);
  v28 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 200);
  v29 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v12, v29);
  v30 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v27, v29, v30);
  v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v32(v27, v29);
  sub_1000150E8(v22, &qword_100178800);
  sub_1000150E8(v21, &qword_100178800);
  v32(v23, v29);
  sub_1000150E8(v26, &qword_100178800);
  if ((v31 & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v43 = (_QWORD *)swift_task_alloc(dword_10017881C);
  *(_QWORD *)(v0 + 464) = v43;
  *v43 = v0;
  v43[1] = sub_10010682C;
  return sub_100109660(*(_QWORD *)(v0 + 400));
}

uint64_t sub_10010682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100107AA8;
  else
    v3 = sub_100106890;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100106890()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(void (**)(void))(v0 + 136);
  if (v1)
  {
    v1();
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v5 = *(unsigned int *)(v0 + 528);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 424);
  v8 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 184);
  v6(v7, v2, 1, v11);
  v4(v8, v5, v11);
  v6(v8, 0, 1, v11);
  v12 = v9 + *(int *)(v10 + 48);
  sub_10010F1FC(v7, v9);
  sub_10010F1FC(v8, v12);
  v13 = v3(v9, 1, v11);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 248), &qword_100178800);
    sub_1000150E8(v15, &qword_100178800);
    if (v14(v12, 1, v16) == 1)
    {
      v17 = *(_QWORD *)(v0 + 392);
      v18 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 216), &qword_100178800);
LABEL_12:
      swift_release(v18);
      swift_release(v17);
      v33 = *(_QWORD *)(v0 + 368);
      v34 = *(_QWORD *)(v0 + 360);
      v35 = *(_QWORD *)(v0 + 328);
      v36 = *(_QWORD *)(v0 + 336);
      v38 = *(_QWORD *)(v0 + 296);
      v37 = *(_QWORD *)(v0 + 304);
      v40 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 288);
      v41 = *(_QWORD *)(v0 + 272);
      v44 = *(_QWORD *)(v0 + 264);
      v45 = *(_QWORD *)(v0 + 256);
      v46 = *(_QWORD *)(v0 + 248);
      v47 = *(_QWORD *)(v0 + 240);
      v48 = *(_QWORD *)(v0 + 232);
      v49 = *(_QWORD *)(v0 + 224);
      v50 = *(_QWORD *)(v0 + 216);
      v51 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v19 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
  v20 = v14(v12, 1, v19);
  v22 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 240);
  if (v20 == 1)
  {
    v24 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 248), &qword_100178800);
    sub_1000150E8(v21, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 216), &qword_1001787F8);
    goto LABEL_13;
  }
  v26 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 192);
  v27 = *(_QWORD *)(v0 + 200);
  v29 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v12, v29);
  v30 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v27, v29, v30);
  v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v32(v27, v29);
  sub_1000150E8(v22, &qword_100178800);
  sub_1000150E8(v21, &qword_100178800);
  v32(v23, v29);
  sub_1000150E8(v26, &qword_100178800);
  if ((v31 & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v43 = (_QWORD *)swift_task_alloc(dword_100178824);
  *(_QWORD *)(v0 + 480) = v43;
  *v43 = v0;
  v43[1] = sub_100106C30;
  return sub_100109944(*(_QWORD *)(v0 + 400));
}

uint64_t sub_100106C30()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[60];
  v3 = *v1;
  v3[61] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100108024, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_10017882C);
  v3[62] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_100106CC4;
  return sub_100109B38(v3[50]);
}

uint64_t sub_100106CC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 496);
  v3 = *v1;
  *(_QWORD *)(v3 + 504) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100108268, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_100178834);
  *(_QWORD *)(v3 + 512) = v5;
  *v5 = v3;
  v5[1] = sub_100106D50;
  return sub_100109DC0();
}

uint64_t sub_100106D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 512);
  *(_QWORD *)(*(_QWORD *)v1 + 520) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001084A4;
  else
    v3 = sub_100106DB4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100106DB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished garbage collection", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 392);
  v6 = *(_QWORD *)(v1 + 400);
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 384);
  v9 = *(_QWORD *)(v1 + 368);
  v10 = *(_QWORD *)(v1 + 344);

  swift_release(v6);
  swift_release(v7);
  v8(v9, v10);
  v11 = *(_QWORD *)(v1 + 368);
  v12 = *(_QWORD *)(v1 + 360);
  v13 = *(_QWORD *)(v1 + 328);
  v14 = *(_QWORD *)(v1 + 336);
  v16 = *(_QWORD *)(v1 + 296);
  v15 = *(_QWORD *)(v1 + 304);
  v18 = *(_QWORD *)(v1 + 280);
  v17 = *(_QWORD *)(v1 + 288);
  v19 = *(_QWORD *)(v1 + 272);
  v21 = *(_QWORD *)(v1 + 264);
  v22 = *(_QWORD *)(v1 + 256);
  v23 = *(_QWORD *)(v1 + 248);
  v24 = *(_QWORD *)(v1 + 240);
  v25 = *(_QWORD *)(v1 + 232);
  v26 = *(_QWORD *)(v1 + 224);
  v27 = *(_QWORD *)(v1 + 216);
  v28 = *(_QWORD *)(v1 + 200);
  v29 = *(_QWORD *)(v1 + 176);
  swift_task_dealloc(*(_QWORD *)(v1 + 376));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100106F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 416);
  v75 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v73 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD000000000000039, 0x8000000100137F20, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v22 = v75(v2, v73);
  v23 = *(void (**)(uint64_t))(v0 + 136);
  v24 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 192);
  if (v23)
  {
    v23(v22);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v27(v24, 0, 1, v25);
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v27(*(_QWORD *)(v0 + 304), 1, 1, v25);
  }
  *(_QWORD *)(v0 + 424) = v27;
  v29 = *(_QWORD *)(v0 + 296);
  v28 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 208);
  v32 = *(_QWORD *)(v0 + 184);
  v33 = *(_QWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 528) = enum case for DIPBackgroundDeferralStatus.shouldDefer(_:);
  v34 = *(void (**)(uint64_t))(v33 + 104);
  *(_QWORD *)(v0 + 432) = v34;
  v34(v29);
  v27(v29, 0, 1, v32);
  v35 = v30 + *(int *)(v31 + 48);
  sub_10010F1FC(v28, v30);
  sub_10010F1FC(v29, v35);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  *(_QWORD *)(v0 + 440) = v36;
  if (v36(v30, 1, v32) == 1)
  {
    v37 = *(_QWORD *)(v0 + 304);
    v38 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 296), &qword_100178800);
    sub_1000150E8(v37, &qword_100178800);
    if (v36(v35, 1, v38) == 1)
    {
      v39 = *(_QWORD *)(v0 + 392);
      v40 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 232), &qword_100178800);
LABEL_12:
      swift_release(v39);
      swift_release(v40);
      v55 = *(_QWORD *)(v0 + 368);
      v56 = *(_QWORD *)(v0 + 360);
      v57 = *(_QWORD *)(v0 + 328);
      v58 = *(_QWORD *)(v0 + 336);
      v60 = *(_QWORD *)(v0 + 296);
      v59 = *(_QWORD *)(v0 + 304);
      v62 = *(_QWORD *)(v0 + 280);
      v61 = *(_QWORD *)(v0 + 288);
      v63 = *(_QWORD *)(v0 + 272);
      v66 = *(_QWORD *)(v0 + 264);
      v67 = *(_QWORD *)(v0 + 256);
      v68 = *(_QWORD *)(v0 + 248);
      v69 = *(_QWORD *)(v0 + 240);
      v70 = *(_QWORD *)(v0 + 232);
      v71 = *(_QWORD *)(v0 + 224);
      v72 = *(_QWORD *)(v0 + 216);
      v74 = *(_QWORD *)(v0 + 200);
      v76 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v58);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v41 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 288));
  v42 = v36(v35, 1, v41);
  v44 = *(_QWORD *)(v0 + 296);
  v43 = *(_QWORD *)(v0 + 304);
  v45 = *(_QWORD *)(v0 + 288);
  if (v42 == 1)
  {
    v46 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 296), &qword_100178800);
    sub_1000150E8(v43, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 232), &qword_1001787F8);
    goto LABEL_13;
  }
  v48 = *(_QWORD *)(v0 + 232);
  v50 = *(_QWORD *)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 200);
  v51 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v35, v51);
  v52 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v49, v51, v52);
  v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v54(v49, v51);
  sub_1000150E8(v44, &qword_100178800);
  sub_1000150E8(v43, &qword_100178800);
  v54(v45, v51);
  sub_1000150E8(v48, &qword_100178800);
  if ((v53 & 1) != 0)
  {
    v39 = *(_QWORD *)(v0 + 392);
    v40 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v65 = (_QWORD *)swift_task_alloc(dword_100178814);
  *(_QWORD *)(v0 + 448) = v65;
  *v65 = v0;
  v65[1] = sub_100106424;
  return sub_1001093F8(*(_QWORD *)(v0 + 400));
}

uint64_t sub_100107528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 456);
  v75 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v73 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD000000000000030, 0x8000000100137F60, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v22 = v75(v2, v73);
  v23 = *(void (**)(uint64_t))(v0 + 136);
  if (v23)
  {
    v23(v22);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v27 = *(unsigned int *)(v0 + 528);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 424);
  v30 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 224);
  v32 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 184);
  v28(v29, v24, 1, v33);
  v26(v30, v27, v33);
  v28(v30, 0, 1, v33);
  v34 = v31 + *(int *)(v32 + 48);
  sub_10010F1FC(v29, v31);
  sub_10010F1FC(v30, v34);
  v35 = v25(v31, 1, v33);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  if (v35 == 1)
  {
    v37 = *(_QWORD *)(v0 + 280);
    v38 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 272), &qword_100178800);
    sub_1000150E8(v37, &qword_100178800);
    if (v36(v34, 1, v38) == 1)
    {
      v39 = *(_QWORD *)(v0 + 392);
      v40 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 224), &qword_100178800);
LABEL_12:
      swift_release(v39);
      swift_release(v40);
      v55 = *(_QWORD *)(v0 + 368);
      v56 = *(_QWORD *)(v0 + 360);
      v57 = *(_QWORD *)(v0 + 328);
      v58 = *(_QWORD *)(v0 + 336);
      v60 = *(_QWORD *)(v0 + 296);
      v59 = *(_QWORD *)(v0 + 304);
      v62 = *(_QWORD *)(v0 + 280);
      v61 = *(_QWORD *)(v0 + 288);
      v63 = *(_QWORD *)(v0 + 272);
      v66 = *(_QWORD *)(v0 + 264);
      v67 = *(_QWORD *)(v0 + 256);
      v68 = *(_QWORD *)(v0 + 248);
      v69 = *(_QWORD *)(v0 + 240);
      v70 = *(_QWORD *)(v0 + 232);
      v71 = *(_QWORD *)(v0 + 224);
      v72 = *(_QWORD *)(v0 + 216);
      v74 = *(_QWORD *)(v0 + 200);
      v76 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v58);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v41 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 264));
  v42 = v36(v34, 1, v41);
  v44 = *(_QWORD *)(v0 + 272);
  v43 = *(_QWORD *)(v0 + 280);
  v45 = *(_QWORD *)(v0 + 264);
  if (v42 == 1)
  {
    v46 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 272), &qword_100178800);
    sub_1000150E8(v43, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 224), &qword_1001787F8);
    goto LABEL_13;
  }
  v48 = *(_QWORD *)(v0 + 224);
  v50 = *(_QWORD *)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 200);
  v51 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v34, v51);
  v52 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v49, v51, v52);
  v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v54(v49, v51);
  sub_1000150E8(v44, &qword_100178800);
  sub_1000150E8(v43, &qword_100178800);
  v54(v45, v51);
  sub_1000150E8(v48, &qword_100178800);
  if ((v53 & 1) != 0)
  {
    v39 = *(_QWORD *)(v0 + 392);
    v40 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v65 = (_QWORD *)swift_task_alloc(dword_10017881C);
  *(_QWORD *)(v0 + 464) = v65;
  *v65 = v0;
  v65[1] = sub_10010682C;
  return sub_100109660(*(_QWORD *)(v0 + 400));
}

uint64_t sub_100107AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 472);
  v75 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v73 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD00000000000002BLL, 0x8000000100137FA0, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v22 = v75(v2, v73);
  v23 = *(void (**)(uint64_t))(v0 + 136);
  if (v23)
  {
    v23(v22);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v27 = *(unsigned int *)(v0 + 528);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 424);
  v30 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 184);
  v28(v29, v24, 1, v33);
  v26(v30, v27, v33);
  v28(v30, 0, 1, v33);
  v34 = v31 + *(int *)(v32 + 48);
  sub_10010F1FC(v29, v31);
  sub_10010F1FC(v30, v34);
  v35 = v25(v31, 1, v33);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  if (v35 == 1)
  {
    v37 = *(_QWORD *)(v0 + 256);
    v38 = *(_QWORD *)(v0 + 184);
    sub_1000150E8(*(_QWORD *)(v0 + 248), &qword_100178800);
    sub_1000150E8(v37, &qword_100178800);
    if (v36(v34, 1, v38) == 1)
    {
      v39 = *(_QWORD *)(v0 + 392);
      v40 = *(_QWORD *)(v0 + 400);
      sub_1000150E8(*(_QWORD *)(v0 + 216), &qword_100178800);
LABEL_12:
      swift_release(v39);
      swift_release(v40);
      v55 = *(_QWORD *)(v0 + 368);
      v56 = *(_QWORD *)(v0 + 360);
      v57 = *(_QWORD *)(v0 + 328);
      v58 = *(_QWORD *)(v0 + 336);
      v60 = *(_QWORD *)(v0 + 296);
      v59 = *(_QWORD *)(v0 + 304);
      v62 = *(_QWORD *)(v0 + 280);
      v61 = *(_QWORD *)(v0 + 288);
      v63 = *(_QWORD *)(v0 + 272);
      v66 = *(_QWORD *)(v0 + 264);
      v67 = *(_QWORD *)(v0 + 256);
      v68 = *(_QWORD *)(v0 + 248);
      v69 = *(_QWORD *)(v0 + 240);
      v70 = *(_QWORD *)(v0 + 232);
      v71 = *(_QWORD *)(v0 + 224);
      v72 = *(_QWORD *)(v0 + 216);
      v74 = *(_QWORD *)(v0 + 200);
      v76 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 376));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v58);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_9;
  }
  v41 = *(_QWORD *)(v0 + 184);
  sub_10010F1FC(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
  v42 = v36(v34, 1, v41);
  v44 = *(_QWORD *)(v0 + 248);
  v43 = *(_QWORD *)(v0 + 256);
  v45 = *(_QWORD *)(v0 + 240);
  if (v42 == 1)
  {
    v46 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 192);
    sub_1000150E8(*(_QWORD *)(v0 + 248), &qword_100178800);
    sub_1000150E8(v43, &qword_100178800);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
LABEL_9:
    sub_1000150E8(*(_QWORD *)(v0 + 216), &qword_1001787F8);
    goto LABEL_13;
  }
  v48 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 200);
  v51 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v49, v34, v51);
  v52 = sub_1000058C8(&qword_100178838, (uint64_t (*)(uint64_t))&type metadata accessor for DIPBackgroundDeferralStatus, (uint64_t)&protocol conformance descriptor for DIPBackgroundDeferralStatus);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v49, v51, v52);
  v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v54(v49, v51);
  sub_1000150E8(v44, &qword_100178800);
  sub_1000150E8(v43, &qword_100178800);
  v54(v45, v51);
  sub_1000150E8(v48, &qword_100178800);
  if ((v53 & 1) != 0)
  {
    v39 = *(_QWORD *)(v0 + 392);
    v40 = *(_QWORD *)(v0 + 400);
    goto LABEL_12;
  }
LABEL_13:
  v65 = (_QWORD *)swift_task_alloc(dword_100178824);
  *(_QWORD *)(v0 + 480) = v65;
  *v65 = v0;
  v65[1] = sub_100106C30;
  return sub_100109944(*(_QWORD *)(v0 + 400));
}

uint64_t sub_100108024()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);

  v1 = v0[61];
  v2 = v0[45];
  v24 = v0[43];
  v25 = (void (*)(uint64_t, uint64_t))v0[48];
  v4 = v0[21];
  v3 = v0[22];
  v5 = v0[20];
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD000000000000040, 0x8000000100137FD0, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v25(v2, v24);
  v22 = (_QWORD *)swift_task_alloc(dword_10017882C);
  v0[62] = v22;
  *v22 = v0;
  v22[1] = sub_100106CC4;
  return sub_100109B38(v0[50]);
}

uint64_t sub_100108268()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);

  v1 = v0[63];
  v2 = v0[45];
  v24 = v0[43];
  v25 = (void (*)(uint64_t, uint64_t))v0[48];
  v4 = v0[21];
  v3 = v0[22];
  v5 = v0[20];
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD000000000000043, 0x8000000100138020, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v25(v2, v24);
  v22 = (_QWORD *)swift_task_alloc(dword_100178834);
  v0[64] = v22;
  *v22 = v0;
  v22[1] = sub_100106D50;
  return sub_100109DC0();
}

uint64_t sub_1001084A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 520);
  v51 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 384);
  v2 = *(_QWORD *)(v0 + 360);
  v49 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = sub_100008E84((uint64_t *)&unk_100178A30);
  v7 = sub_100008E84(&qword_100174898);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10012A6D0;
  v13 = v12 + v11;
  v14 = (_QWORD *)(v13 + *(int *)(v7 + 48));
  v15 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v14[3] = &type metadata for String;
  *v14 = 25447;
  v14[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v1);
  v21 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, 0xD00000000000003DLL, 0x8000000100138070, v2);
  swift_errorRelease(v20);
  swift_errorRelease(v1);
  v22 = v51(v2, v49);
  v23 = defaultLogger()(v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Finished garbage collection", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }
  v28 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 400);
  v29 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  v30 = *(_QWORD *)(v0 + 368);
  v31 = *(_QWORD *)(v0 + 344);

  swift_release(v27);
  swift_release(v28);
  v29(v30, v31);
  v32 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 360);
  v34 = *(_QWORD *)(v0 + 328);
  v35 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 296);
  v36 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 280);
  v38 = *(_QWORD *)(v0 + 288);
  v40 = *(_QWORD *)(v0 + 272);
  v42 = *(_QWORD *)(v0 + 264);
  v43 = *(_QWORD *)(v0 + 256);
  v44 = *(_QWORD *)(v0 + 248);
  v45 = *(_QWORD *)(v0 + 240);
  v46 = *(_QWORD *)(v0 + 232);
  v47 = *(_QWORD *)(v0 + 224);
  v48 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 200);
  v52 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100108850(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for DIPError.Code(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType(0);
  v2[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_100108910, 0, 0);
}

uint64_t sub_100108910(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Garbage collecting incomplete credentials", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v1[18];
  v7 = v1[15];
  v8 = v1[16];

  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[19] = v9;
  v9(v6, v7);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1]);
  v1[20] = v10;
  v11 = sub_100008E84(&qword_1001770B0);
  *v10 = v1;
  v10[1] = sub_100108A30;
  return AsyncCoreDataContainer.performRead<A>(_:)(v1 + 6, sub_10010F1C8, 0, v11);
}

uint64_t sub_100108A30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100108CDC;
  }
  else
  {
    *(_QWORD *)(v2 + 176) = *(_QWORD *)(v2 + 48);
    v4 = sub_100108A9C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100108A9C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 248) = v2;
  v3 = -1;
  v4 = -1 << v2;
  v5 = *(_QWORD *)(v1 + 56);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v6 = enum case for DIPError.Code.internalError(_:);
  *(_DWORD *)(v0 + 240) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  *(_DWORD *)(v0 + 244) = v6;
  *(_QWORD *)(v0 + 184) = 0;
  v7 = v3 & v5;
  if (v7)
  {
    v8 = 0;
    v9 = __clz(__rbit64(v7));
    v10 = (v7 - 1) & v7;
LABEL_5:
    *(_QWORD *)(v0 + 192) = v8;
    *(_QWORD *)(v0 + 200) = v10;
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v12 = *v11;
    *(_QWORD *)(v0 + 208) = *v11;
    v13 = v11[1];
    *(_QWORD *)(v0 + 216) = v13;
    v14 = dword_10017706C;
    swift_bridgeObjectRetain(v13);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 224) = v15;
    *v15 = v0;
    v15[1] = sub_100108D38;
    return sub_10008E67C(v12, v13);
  }
  v17 = 63 - v4;
  if (v17 > 0x7F)
  {
    v18 = *(_QWORD *)(v1 + 64);
    if (v18)
    {
      v8 = 1;
LABEL_9:
      v10 = (v18 - 1) & v18;
      v9 = __clz(__rbit64(v18)) + (v8 << 6);
      goto LABEL_5;
    }
    if (v17 >= 0xC0)
    {
      v18 = *(_QWORD *)(v1 + 72);
      if (v18)
      {
        v8 = 2;
        goto LABEL_9;
      }
      if (v17 >= 0x100)
      {
        v18 = *(_QWORD *)(v1 + 80);
        if (v18)
        {
          v8 = 3;
          goto LABEL_9;
        }
        if (v17 >= 0x140)
        {
          v18 = *(_QWORD *)(v1 + 88);
          if (v18)
          {
            v8 = 4;
            goto LABEL_9;
          }
          v19 = 0;
          v20 = v17 >> 6;
          if (v20 <= 5)
            v20 = 5;
          v21 = v20 - 5;
          while (v21 != v19)
          {
            v18 = *(_QWORD *)(v1 + 96 + 8 * v19++);
            if (v18)
            {
              v8 = v19 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  v23 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 96);
  swift_release(v1);
  type metadata accessor for IDCSAnalytics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v24, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v26);
  static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v24, 0);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100108CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100108D38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100108FBC;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 216));
    v4 = sub_100108DA4;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_100108DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 184) = v2;
  if (v4)
  {
    v5 = __clz(__rbit64(v4));
    v6 = (v4 - 1) & v4;
    v7 = v5 | (v3 << 6);
    v8 = *(_QWORD *)(v0 + 176);
LABEL_4:
    *(_QWORD *)(v0 + 192) = v3;
    *(_QWORD *)(v0 + 200) = v6;
    v9 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v7);
    v10 = *v9;
    *(_QWORD *)(v0 + 208) = *v9;
    v11 = v9[1];
    *(_QWORD *)(v0 + 216) = v11;
    v12 = dword_10017706C;
    swift_bridgeObjectRetain(v11);
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 224) = v13;
    *v13 = v0;
    v13[1] = sub_100108D38;
    sub_10008E67C(v10, v11);
    return;
  }
  v14 = v3 + 1;
  if (__OFADD__(v3, 1))
    goto LABEL_21;
  v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 248)) + 63) >> 6;
  v8 = *(_QWORD *)(v0 + 176);
  if (v14 >= v15)
    goto LABEL_19;
  v16 = v8 + 56;
  v17 = *(_QWORD *)(v8 + 56 + 8 * v14);
  ++v3;
  if (v17)
  {
LABEL_8:
    v6 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v3 << 6);
    goto LABEL_4;
  }
  v3 = v14 + 1;
  if (v14 + 1 >= v15)
    goto LABEL_19;
  v17 = *(_QWORD *)(v16 + 8 * v3);
  if (v17)
    goto LABEL_8;
  v3 = v14 + 2;
  if (v14 + 2 >= v15)
    goto LABEL_19;
  v17 = *(_QWORD *)(v16 + 8 * v3);
  if (v17)
    goto LABEL_8;
  v18 = v14 + 3;
  if (v18 >= v15)
  {
LABEL_19:
    v20 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 96);
    swift_release(v8);
    type metadata accessor for IDCSAnalytics(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v23);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v21, v2);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v24);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v17 = *(_QWORD *)(v16 + 8 * v18);
  if (v17)
  {
    v3 = v18;
    goto LABEL_8;
  }
  while (1)
  {
    v3 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v3 >= v15)
      goto LABEL_19;
    v17 = *(_QWORD *)(v16 + 8 * v3);
    ++v18;
    if (v17)
      goto LABEL_8;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_100108FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);

  v47 = *(_QWORD *)(v0 + 232);
  v48 = *(Swift::String *)(v0 + 208);
  v2 = *(unsigned int *)(v0 + 240);
  v1 = *(unsigned int *)(v0 + 244);
  v50 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v49 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = sub_100008E84((uint64_t *)&unk_100178A30);
  v8 = sub_100008E84(&qword_100174898);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10012A6D0;
  v14 = v13 + v12;
  v15 = (_QWORD *)(v14 + *(int *)(v8 + 48));
  v16 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v2, v16);
  v15[3] = &type metadata for String;
  *v15 = 25447;
  v15[1] = 0xE200000000000000;
  v17 = sub_10003E0A8(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v5, v1, v6);
  v18 = type metadata accessor for DIPError(0);
  v19 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v20 = swift_allocError(v18, v19, 0, 0);
  swift_errorRetain(v47);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v47, v5, 0, v17, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  *(_QWORD *)(v0 + 16) = 0xD000000000000020;
  *(_QWORD *)(v0 + 24) = 0x80000001001382D0;
  String.append(_:)(v48);
  v21 = swift_bridgeObjectRelease(v48._object);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 24);
  defaultLogger()(v21);
  DIPRecordError(_:message:log:)(v20, v22, v23, v3);
  swift_bridgeObjectRelease(v23);
  swift_errorRelease(v20);
  swift_errorRelease(v47);
  result = v50(v3, v49);
  v25 = *(_QWORD *)(v0 + 192);
  v26 = *(_QWORD *)(v0 + 200);
  if (v26)
  {
    v27 = __clz(__rbit64(v26));
    v28 = (v26 - 1) & v26;
    v29 = v27 | (v25 << 6);
    result = *(_QWORD *)(v0 + 176);
LABEL_3:
    *(_QWORD *)(v0 + 192) = v25;
    *(_QWORD *)(v0 + 200) = v28;
    v30 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v29);
    v31 = *v30;
    *(_QWORD *)(v0 + 208) = *v30;
    v32 = v30[1];
    *(_QWORD *)(v0 + 216) = v32;
    v33 = dword_10017706C;
    swift_bridgeObjectRetain(v32);
    v34 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v0 + 224) = v34;
    *v34 = v0;
    v34[1] = sub_100108D38;
    return sub_10008E67C(v31, v32);
  }
  v35 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    v36 = (unint64_t)((1 << *(_BYTE *)(v0 + 248)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 176);
    if (v35 >= v36)
      goto LABEL_18;
    v37 = result + 56;
    v38 = *(_QWORD *)(result + 56 + 8 * v35);
    ++v25;
    if (v38)
    {
LABEL_7:
      v28 = (v38 - 1) & v38;
      v29 = __clz(__rbit64(v38)) + (v25 << 6);
      goto LABEL_3;
    }
    v25 = v35 + 1;
    if (v35 + 1 >= v36)
      goto LABEL_18;
    v38 = *(_QWORD *)(v37 + 8 * v25);
    if (v38)
      goto LABEL_7;
    v25 = v35 + 2;
    if (v35 + 2 >= v36)
      goto LABEL_18;
    v38 = *(_QWORD *)(v37 + 8 * v25);
    if (v38)
      goto LABEL_7;
    v39 = v35 + 3;
    if (v39 >= v36)
    {
LABEL_18:
      v40 = *(_QWORD *)(v0 + 184);
      v42 = *(_QWORD *)(v0 + 136);
      v41 = *(_QWORD *)(v0 + 144);
      v44 = *(_QWORD *)(v0 + 104);
      v43 = *(_QWORD *)(v0 + 112);
      v46 = *(_QWORD *)(v0 + 88);
      v45 = *(_QWORD *)(v0 + 96);
      swift_release(result);
      type metadata accessor for IDCSAnalytics(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v43, enum case for IDCSAnalytics.GarbageCollectionEventType.incompleteCredential(_:), v45);
      static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v43, v40);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v46);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v38 = *(_QWORD *)(v37 + 8 * v39);
    if (v38)
    {
      v25 = v39;
      goto LABEL_7;
    }
    while (1)
    {
      v25 = v39 + 1;
      if (__OFADD__(v39, 1))
        break;
      if (v25 >= v36)
        goto LABEL_18;
      v38 = *(_QWORD *)(v37 + 8 * v25);
      ++v39;
      if (v38)
        goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001093F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100109458, 0, 0);
}

uint64_t sub_100109458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Garbage collecting inactive presentment keys", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 96);
  v9 = *(uint64_t **)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 64);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100110410(v9, v1 + 16);
  v11 = swift_allocObject(&unk_10016C660, 72, 7);
  *(_QWORD *)(v1 + 104) = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v1 + 48);
  v13 = swift_allocObject(&unk_10016C688, 32, 7);
  *(_QWORD *)(v1 + 112) = v13;
  *(_QWORD *)(v13 + 16) = sub_1001105D0;
  *(_QWORD *)(v13 + 24) = v11;
  v14 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v10);
  swift_retain(v11);
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v1 + 120) = v15;
  *v15 = v1;
  v15[1] = sub_1001095EC;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v15, sub_1000963B4, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_1001095EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001107E4;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 112));
    swift_release(v5);
    v4 = sub_1001107C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100109660(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001096C0, 0, 0);
}

uint64_t sub_1001096C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Garbage collecting orphan SE slots", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 96);
  v9 = *(uint64_t **)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 64);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100110410(v9, v1 + 16);
  v11 = swift_allocObject(&unk_10016C610, 72, 7);
  *(_QWORD *)(v1 + 104) = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v1 + 48);
  v13 = swift_allocObject(&unk_10016C638, 32, 7);
  *(_QWORD *)(v1 + 112) = v13;
  *(_QWORD *)(v13 + 16) = sub_10011057C;
  *(_QWORD *)(v13 + 24) = v11;
  v14 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v10);
  swift_retain(v11);
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v1 + 120) = v15;
  *v15 = v1;
  v15[1] = sub_100109854;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v15, sub_1000963B4, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_100109854()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001098FC;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release(*(_QWORD *)(v2 + 112));
    swift_release(v5);
    v4 = sub_1001098C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001098C8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001098FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109944(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001099A4, 0, 0);
}

uint64_t sub_1001099A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Garbage collecting unused device encryption keys", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 96);
  v9 = *(uint64_t **)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 64);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100110410(v9, v1 + 16);
  v11 = swift_allocObject(&unk_10016C548, 72, 7);
  *(_QWORD *)(v1 + 104) = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v1 + 48);
  v13 = swift_allocObject(&unk_10016C570, 32, 7);
  *(_QWORD *)(v1 + 112) = v13;
  *(_QWORD *)(v13 + 16) = &unk_100178848;
  *(_QWORD *)(v13 + 24) = v11;
  v14 = async function pointer to AsyncCoreDataContainer.write<A>(_:)[1];
  swift_retain(v10);
  swift_retain(v11);
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v1 + 120) = v15;
  *v15 = v1;
  v15[1] = sub_1001095EC;
  return AsyncCoreDataContainer.write<A>(_:)(v15, &unk_100175AA0, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_100109B38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100109B98, 0, 0);
}

uint64_t sub_100109B98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Garbage collecting oprhaned Payload Protection Keys", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v1[5];
  v6 = v1[6];
  v8 = v1[4];
  v9 = v1[2];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v10 = swift_allocObject(&unk_10016C4F8, 32, 7);
  v1[7] = v10;
  *(_QWORD *)(v10 + 16) = 7;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject(&unk_10016C520, 32, 7);
  v1[8] = v11;
  *(_QWORD *)(v11 + 16) = sub_10010F268;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v9);
  swift_retain(v10);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v1[9] = v13;
  *v13 = v1;
  v13[1] = sub_100109D04;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v13, sub_10006CC88, v11, (char *)&type metadata for () + 8);
}

uint64_t sub_100109D04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100109D78;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 56);
    swift_release(*(_QWORD *)(v2 + 64));
    swift_release(v5);
    v4 = sub_10003DAFC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100109D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109DC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100109E20, 0, 0);
}

uint64_t sub_100109E20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v6 = v1[5];
    v5 = v1[6];
    v7 = v1[4];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    v1[2] = sub_10003FA80(0xD000000000000024, 0x80000001001380B0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s start", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    v11 = v1[5];
    v10 = v1[6];
    v12 = v1[4];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1]);
  v1[7] = v13;
  *v13 = v1;
  v13[1] = sub_100109FDC;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v13, sub_10010F1B0, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_100109FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10010A040;
  else
    v3 = sub_10003DAFC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10010A040()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010A074@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  char *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73[3];
  void *v74;

  v65 = a1;
  v1 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v55 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v55 - v15;
  v74 = &_swiftEmptySetSingleton;
  v17 = v72;
  result = sub_10011ED50((uint64_t)&off_1001671A8);
  if (!v17)
  {
    v19 = result;
    v69 = v11;
    v70 = v7;
    v60 = 0;
    v61 = v3;
    v66 = v14;
    v72 = v8;
    result = Date.init()(result);
    v21 = v19;
    v64 = v16;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v54 = v19;
      else
        v54 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v22 = _CocoaArrayWrapper.endIndex.getter(v54);
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v22 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v23 = v72;
    v24 = (uint64_t)v6;
    if (v22)
    {
      if (v22 >= 1)
      {
        v25 = 0;
        v71 = v21 & 0xC000000000000001;
        *(_QWORD *)&v20 = 136315138;
        v59 = v20;
        v58 = (char *)&type metadata for Any + 8;
        v68 = v21;
        v26 = v70;
        while (1)
        {
          if (v71)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v21);
          else
            v27 = *(id *)(v21 + 8 * v25 + 32);
          v28 = v27;
          v29 = objc_msgSend(v27, "options");
          if (v29)
          {
            v30 = v29;
            v31 = objc_msgSend(v29, "deleteIncompleteCredentialAfterDays");

            if ((uint64_t)v31 > 0)
            {
              v32 = v22;
              v33 = v1;
              v34 = objc_msgSend(v28, "updatedAt");
              if (v34)
              {
                v35 = v34;
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

                v36 = v72;
                v37 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 32);
                v37(v24, v69, v26);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v24, 0, 1, v26);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v24, 1, v26) != 1)
                {
                  v38 = v66;
                  v37((uint64_t)v66, (char *)v24, v26);
                  v39 = objc_msgSend(v28, "credentialIdentifier");
                  if (v39)
                  {
                    v40 = v39;
                    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
                    v67 = v41;

                    v42 = Date.isAtLeast(days:after:)(v31, v38);
                    if ((v42 & 1) != 0)
                    {
                      v43 = v61;
                      defaultLogger()(v42);
                      v44 = swift_bridgeObjectRetain_n(v67, 2);
                      v45 = Logger.logObject.getter(v44);
                      v46 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v45, v46))
                      {
                        v47 = swift_slowAlloc(12, -1);
                        v48 = swift_slowAlloc(32, -1);
                        v56 = v45;
                        v57 = v48;
                        v73[0] = v48;
                        *(_DWORD *)v47 = v59;
                        v49 = v67;
                        swift_bridgeObjectRetain(v67);
                        *(_QWORD *)(v47 + 4) = sub_10003FA80(v62, v49, v73);
                        swift_bridgeObjectRelease_n(v49, 3);
                        v50 = v56;
                        _os_log_impl((void *)&_mh_execute_header, v56, v46, "Identified credential %s for garbage collection", (uint8_t *)v47, 0xCu);
                        v51 = v57;
                        swift_arrayDestroy(v57, 1, v58);
                        swift_slowDealloc(v51, -1, -1);
                        swift_slowDealloc(v47, -1, -1);

                        v1 = v33;
                        (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v33);
                        v52 = v62;
                        v22 = v32;
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n(v67, 2);
                        v53 = v43;
                        v1 = v33;
                        (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v33);
                        v22 = v32;
                        v52 = v62;
                      }
                      sub_100005E20(v73, v52, v67);

                      swift_bridgeObjectRelease(v73[1]);
                      v23 = v72;
                      (*(void (**)(char *, uint64_t))(v72 + 8))(v66, v26);
                      v21 = v68;
                      goto LABEL_8;
                    }
                    v23 = v72;
                    (*(void (**)(char *, uint64_t))(v72 + 8))(v38, v26);
                    swift_bridgeObjectRelease(v67);

                  }
                  else
                  {

                    v23 = v72;
                    (*(void (**)(char *, uint64_t))(v72 + 8))(v38, v26);
                  }
                  v1 = v33;
                  goto LABEL_26;
                }
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v24, 1, 1, v26);
              }

              sub_1000150E8(v24, &qword_1001755B0);
              v1 = v33;
              v23 = v72;
LABEL_26:
              v22 = v32;
              v21 = v68;
              goto LABEL_8;
            }

            v23 = v72;
          }
          else
          {

          }
LABEL_8:
          if (v22 == ++v25)
            goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_29:
      swift_bridgeObjectRelease(v21);
      result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v64, v70);
      *v65 = v74;
    }
  }
  return result;
}

uint64_t sub_10010A5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  void *v46;
  id v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  char *v54;
  void (*v55)(void *, char *, uint64_t);
  char *v56;
  char *v57;
  id v58;
  void *v59;
  void *v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  id v81;
  NSObject *v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;
  unint64_t v96;
  id v97;
  NSObject *v98;
  int v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  void *v109;
  unsigned int v110;
  id v111;
  id v112;
  unint64_t v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::String v135;
  void *v136;
  uint64_t v137;
  id v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  os_log_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  __int128 v157;
  unsigned int v158;
  unsigned int v159;
  __int128 v160;
  id *v161;
  uint64_t v162;
  char *v163;
  os_log_t v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  id v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  id v197;
  unint64_t v198;

  v178 = a2;
  v177 = type metadata accessor for DIPError.Code(0);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v5);
  v186 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType(0);
  v184 = *(_QWORD *)(v7 - 8);
  v185 = v7;
  __chkstk_darwin(v7);
  v183 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for Logger(0);
  v195 = *(_QWORD *)(v187 - 8);
  v9 = __chkstk_darwin(v187);
  v174 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v173 = (char *)&v149 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v149 - v14;
  __chkstk_darwin(v13);
  v193 = (char *)&v149 - v16;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v149 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v149 - v25;
  result = sub_10000DC0C();
  if (!v2)
  {
    v28 = result;
    v169 = a1;
    v189 = v21;
    v190 = v24;
    v170 = 0;
    v163 = v15;
    v180 = v17;
    v181 = v18;
    v29 = Date.init()(result);
    v30 = v193;
    defaultLogger()(v29);
    v31 = swift_bridgeObjectRetain_n(v28, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    v34 = os_log_type_enabled(v32, v33);
    v35 = v28 >> 62;
    v172 = v26;
    v194 = v28;
    if (v34)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v36 = 134349056;
      v37 = v180;
      v38 = v186;
      if (v35)
      {
        v28 = v194;
        if (v194 < 0)
          v148 = v194;
        else
          v148 = v194 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v194);
        v39 = (void *)_CocoaArrayWrapper.endIndex.getter(v148);
        swift_bridgeObjectRelease(v28);
      }
      else
      {
        v28 = v194;
        v39 = *(void **)((v194 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v28);
      v197 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, &v198, v36 + 4);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}ld presentment keys are potentially eligible for deletion", v36, 0xCu);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v28, 2);
      v37 = v180;
      v38 = v186;
    }
    v40 = v28;
    v166 = *(void (**)(char *, uint64_t))(v195 + 8);
    v166(v30, v187);
    v42 = v181;
    if (v35)
      goto LABEL_87;
    v43 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v43)
    {
      v168 = 0;
      v44 = 0;
      v195 = v40 & 0xC000000000000001;
      v191 = v40 + 32;
      v192 = v40 & 0xFFFFFFFFFFFFFF8;
      v161 = &v197;
      v159 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
      v158 = enum case for DIPError.Code.internalError(_:);
      *(_QWORD *)&v41 = 136315394;
      v160 = v41;
      v152 = (char *)&type metadata for Any + 8;
      v157 = xmmword_10012A6D0;
      v156 = 0xD000000000000057;
      v155 = 0x8000000100137F00;
      v154 = 0x8000000100137EA0;
      v153 = 0x80000001001382B0;
      v193 = (char *)v43;
      while (1)
      {
        if (v195)
        {
          v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v40);
        }
        else
        {
          if (v44 >= *(_QWORD *)(v192 + 16))
            goto LABEL_85;
          v45 = *(id *)(v191 + 8 * v44);
        }
        v46 = v45;
        if (__OFADD__(v44++, 1))
          break;
        v48 = objc_msgSend(v45, "credential");
        if (v48)
        {
          v49 = v48;
          v50 = objc_msgSend(v48, "options");
          if (v50)
          {
            v51 = v50;
            v52 = objc_msgSend(v46, "updatedAt");
            if (v52)
            {
              v53 = v52;
              v54 = v189;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

              v55 = *(void (**)(void *, char *, uint64_t))(v42 + 32);
              v56 = v54;
              v57 = v190;
              v55(v38, v56, v37);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v37);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v38, 1, v37) != 1)
              {
                v55(v57, (char *)v38, v37);
                v58 = objc_msgSend(v46, "identifier");
                if (v58)
                {
                  v59 = v58;
                  v182 = v51;
                  v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
                  v179 = v60;

                  v61 = objc_msgSend(v46, "keyBlob");
                  v164 = v61;
                  if (!v61)
                  {
                    v70 = objc_msgSend(v46, "keySlot");
                    v40 = v194;
                    if ((uint64_t)v70 > 0)
                    {
                      v162 = (uint64_t)v70;
                      v67 = 0;
                      v171 = 0xF000000000000000;
                      v71 = v182;
                      goto LABEL_33;
                    }
                    swift_bridgeObjectRelease(v179);

                    (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v37);
                    goto LABEL_53;
                  }
                  v62 = v61;
                  v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
                  v65 = v64;

                  sub_100005AB0(v63, v65);
                  v66 = objc_msgSend(v46, "keyBlob");
                  v67 = v66;
                  if (v66)
                  {
                    v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
                    v171 = v69;

                    v67 = (void *)v68;
                    v162 = 0;
                  }
                  else
                  {
                    v162 = 0;
                    v171 = 0xF000000000000000;
                  }
                  v42 = v181;
                  v71 = v182;
                  v37 = v180;
LABEL_33:
                  v72 = (uint64_t)objc_msgSend(v71, "deleteInactiveKeysAfterDays");
                  if (v72 < 1)
                  {
                    swift_bridgeObjectRelease(v179);

                    v92 = (uint64_t)v67;
                  }
                  else
                  {
                    v165 = (uint64_t)v67;
                    if ((Date.isAtLeast(days:after:)(v72, v57) & 1) != 0)
                    {
                      v73 = (uint64_t)sub_1000C4E40();
                      v40 = v73;
                      if ((unint64_t)v73 >> 62)
                      {
                        if (v73 >= 0)
                          v73 &= 0xFFFFFFFFFFFFFF8uLL;
                        v37 = _CocoaArrayWrapper.endIndex.getter(v73);
                        if (!v37)
                        {
LABEL_45:
                          v78 = swift_bridgeObjectRelease(v40);
                          v79 = v163;
                          defaultLogger()(v78);
                          v80 = (unint64_t)v179;
                          swift_bridgeObjectRetain_n(v179, 2);
                          v81 = v49;
                          v82 = Logger.logObject.getter(v81);
                          v83 = static os_log_type_t.debug.getter();
                          v84 = os_log_type_enabled(v82, (os_log_type_t)v83);
                          v188 = v81;
                          if (v84)
                          {
                            LODWORD(v151) = v83;
                            v85 = swift_slowAlloc(22, -1);
                            v150 = (void *)swift_slowAlloc(64, -1);
                            v197 = v150;
                            *(_DWORD *)v85 = v160;
                            swift_bridgeObjectRetain(v80);
                            v196 = sub_10003FA80(v167, v80, (uint64_t *)&v197);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v161, v85 + 4);
                            swift_bridgeObjectRelease_n(v80, 3);
                            *(_WORD *)(v85 + 12) = 2080;
                            v86 = objc_msgSend(v81, "credentialIdentifier");
                            v87 = v169;
                            if (v86)
                            {
                              v88 = v86;
                              v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
                              v91 = v90;

                            }
                            else
                            {
                              v89 = 0x3E6C696E3CLL;
                              v91 = 0xE500000000000000;
                            }
                            v196 = sub_10003FA80(v89, v91, (uint64_t *)&v197);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v161, v85 + 14);
                            v107 = v188;

                            swift_bridgeObjectRelease(v91);
                            _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v151, "Identified presentment key %s in credential %s for deletion", (uint8_t *)v85, 0x16u);
                            v108 = v150;
                            swift_arrayDestroy(v150, 2, v152);
                            swift_slowDealloc(v108, -1, -1);
                            swift_slowDealloc(v85, -1, -1);

                            v166(v163, v187);
                          }
                          else
                          {

                            swift_bridgeObjectRelease_n(v80, 2);
                            v166(v79, v187);
                            v87 = v169;
                          }
                          v109 = *(void **)(v87 + 16);
                          objc_msgSend(v109, "deleteObject:", v46);
                          v197 = 0;
                          v110 = objc_msgSend(v109, "save:", &v197);
                          v111 = v197;
                          v112 = v182;
                          if (v110)
                          {
                            v113 = v171;
                            if (__OFADD__(v168, 1))
                              __break(1u);
                            ++v168;
                            v114 = v197;
                            if (v113 >> 60 == 15)
                            {
                              v38 = v186;
                              v42 = v181;
                              v40 = v194;
                              if (v164)
                              {
                                swift_bridgeObjectRelease(v80);

                                v43 = (uint64_t)v193;
LABEL_79:
                                v37 = v180;
                                (*(void (**)(char *, uint64_t))(v42 + 8))(v190, v180);
                                goto LABEL_12;
                              }
                              v141 = v170;
                              sub_100104754(v162);
                              v43 = (uint64_t)v193;
                              if (!v141)
                              {
                                v170 = 0;
                                swift_bridgeObjectRelease(v80);

                                goto LABEL_79;
                              }
                              v116 = v141;
                              v170 = 0;
                              goto LABEL_71;
                            }
                            v118 = v165;
                            sub_10000B178(v165, v113);
                            v119 = v170;
                            sub_100100A90(v118, v113);
                            v116 = v119;
                            if (!v119)
                            {
                              v170 = 0;

                              sub_10000B164(v118, v113);
                              swift_bridgeObjectRelease(v179);

                              sub_10000B164(v118, v113);
                              v38 = v186;
                              v42 = v181;
                              v43 = (uint64_t)v193;
                              v40 = v194;
                              goto LABEL_79;
                            }
                            sub_10000B164(v118, v113);
                          }
                          else
                          {
                            v115 = v197;
                            v116 = _convertNSErrorToError(_:)(v111);

                            swift_willThrow(v117);
                          }
                          v170 = 0;
                          v43 = (uint64_t)v193;
LABEL_71:
                          v120 = sub_100008E84((uint64_t *)&unk_100178A30);
                          v121 = sub_100008E84(&qword_100174898);
                          v122 = *(_QWORD *)(v121 - 8);
                          v123 = *(_QWORD *)(v122 + 72);
                          v124 = *(unsigned __int8 *)(v122 + 80);
                          v125 = (v124 + 32) & ~v124;
                          v126 = swift_allocObject(v120, v125 + v123, v124 | 7);
                          *(_OWORD *)(v126 + 16) = v157;
                          v127 = v126 + v125;
                          v128 = (_QWORD *)(v127 + *(int *)(v121 + 48));
                          v129 = type metadata accessor for DIPError.PropertyKey(0);
                          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v129 - 8) + 104))(v127, v159, v129);
                          v128[3] = &type metadata for String;
                          *v128 = 25447;
                          v128[1] = 0xE200000000000000;
                          v130 = sub_10003E0A8(v126);
                          v131 = v175;
                          (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v175, v158, v177);
                          v132 = type metadata accessor for DIPError(0);
                          v133 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                          v134 = swift_allocError(v132, v133, 0, 0);
                          swift_errorRetain(v116);
                          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v116, v131, 0, v130, v156, v154, 0xD000000000000011, v155, 445);
                          v197 = 0;
                          v198 = 0xE000000000000000;
                          _StringGuts.grow(_:)(27);
                          swift_bridgeObjectRelease(v198);
                          v197 = (id)0xD000000000000019;
                          v198 = v153;
                          v135._countAndFlagsBits = v167;
                          v136 = v179;
                          v135._object = v179;
                          String.append(_:)(v135);
                          v137 = swift_bridgeObjectRelease(v136);
                          v138 = v197;
                          v139 = v198;
                          v140 = v174;
                          defaultLogger()(v137);
                          DIPRecordError(_:message:log:)(v134, v138, v139, v140);
                          swift_bridgeObjectRelease(v139);

                          swift_errorRelease(v134);
                          swift_errorRelease(v116);

                          sub_10000B164(v165, v171);
                          v166(v140, v187);
                          v37 = v180;
                          v42 = v181;
                          (*(void (**)(char *, uint64_t))(v181 + 8))(v190, v180);
                          v38 = v186;
                          v40 = v194;
                          goto LABEL_12;
                        }
                      }
                      else
                      {
                        v37 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
                        if (!v37)
                          goto LABEL_45;
                      }
                      v188 = (id)(v40 & 0xC000000000000001);
                      v74 = 4;
                      while (1)
                      {
                        v75 = v74 - 4;
                        if (v188)
                        {
                          v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74 - 4, v40);
                          v42 = v74 - 3;
                          if (__OFADD__(v75, 1))
                            goto LABEL_86;
                        }
                        else
                        {
                          v76 = *(id *)(v40 + 8 * v74);
                          v42 = v74 - 3;
                          if (__OFADD__(v75, 1))
                            goto LABEL_86;
                        }
                        v38 = v76;
                        v77 = objc_msgSend(v76, "presentmentKey");

                        if (!v77)
                          break;

                        ++v74;
                        if (v42 == v37)
                          goto LABEL_45;
                      }
                      v188 = v38;
                      v93 = swift_bridgeObjectRelease(v40);
                      v94 = v173;
                      defaultLogger()(v93);
                      v95 = v49;
                      v96 = (unint64_t)v179;
                      swift_bridgeObjectRetain(v179);
                      v97 = v95;
                      v98 = Logger.logObject.getter(v97);
                      v99 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v98, (os_log_type_t)v99))
                      {
                        LODWORD(v162) = v99;
                        v164 = v98;
                        v100 = swift_slowAlloc(22, -1);
                        v151 = (void *)swift_slowAlloc(64, -1);
                        v197 = v151;
                        *(_DWORD *)v100 = v160;
                        swift_bridgeObjectRetain(v96);
                        v196 = sub_10003FA80(v167, v96, (uint64_t *)&v197);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v161, v100 + 4);
                        swift_bridgeObjectRelease_n(v96, 3);
                        *(_WORD *)(v100 + 12) = 2080;
                        v101 = objc_msgSend(v97, "credentialIdentifier");
                        v37 = v180;
                        v42 = v181;
                        if (v101)
                        {
                          v102 = v101;
                          v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
                          v105 = v104;

                          v106 = v103;
                        }
                        else
                        {
                          v106 = 0x3E6C696E3CLL;
                          v105 = 0xE500000000000000;
                        }
                        v196 = sub_10003FA80(v106, v105, (uint64_t *)&v197);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, v161, v100 + 14);

                        swift_bridgeObjectRelease(v105);
                        v142 = v164;
                        _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v162, "Skipping deletion of presentment key %s in credential %s because credential has a payload without an assigned presentment key", (uint8_t *)v100, 0x16u);
                        v143 = v151;
                        swift_arrayDestroy(v151, 2, (char *)&type metadata for Any + 8);
                        swift_slowDealloc(v143, -1, -1);
                        swift_slowDealloc(v100, -1, -1);

                        sub_10000B164(v165, v171);
                        v166(v173, v187);
                      }
                      else
                      {
                        swift_bridgeObjectRelease_n(v96, 2);

                        sub_10000B164(v165, v171);
                        v166(v94, v187);
                        v37 = v180;
                        v42 = v181;
                      }
                      (*(void (**)(char *, uint64_t))(v42 + 8))(v190, v37);
                      v38 = v186;
LABEL_52:
                      v40 = v194;
LABEL_53:
                      v43 = (uint64_t)v193;
                      goto LABEL_12;
                    }
                    swift_bridgeObjectRelease(v179);

                    v92 = v165;
                  }
                  sub_10000B164(v92, v171);
                }
                else
                {

                }
                (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v37);
                goto LABEL_52;
              }
            }
            else
            {
              (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v38, 1, 1, v37);
            }

            sub_1000150E8((uint64_t)v38, &qword_1001755B0);
            goto LABEL_52;
          }

        }
LABEL_12:
        if (v44 == v43)
          goto LABEL_92;
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      if (v40 < 0)
        v144 = v40;
      else
        v144 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v40);
      v43 = _CocoaArrayWrapper.endIndex.getter(v144);
      swift_bridgeObjectRelease(v40);
    }
    v168 = 0;
LABEL_92:
    swift_bridgeObjectRelease(v40);
    type metadata accessor for IDCSAnalytics(0);
    v146 = v183;
    v145 = v184;
    v147 = v185;
    (*(void (**)(char *, _QWORD, uint64_t))(v184 + 104))(v183, enum case for IDCSAnalytics.GarbageCollectionEventType.inactivePresentmentKey(_:), v185);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v146, v168);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v147);
    sub_1000091F8();
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v172, v37);
  }
  return result;
}

uint64_t sub_10010B888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[16] = a3;
  v4[17] = a4;
  v4[15] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[19] = v6;
  v4[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[22] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v9);
  v4[24] = swift_task_alloc(v9);
  v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[26] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v12);
  v4[28] = swift_task_alloc(v12);
  return swift_task_switch(sub_10010B95C, 0, 0);
}

uint64_t sub_10010B95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v4 + 16);
  v5 = swift_allocObject(&unk_10016C598, 32, 7);
  *(_QWORD *)(v0 + 240) = v5;
  *(_QWORD *)(v5 + 16) = sub_1001104F0;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(_DWORD *)(v0 + 400) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 248) = v7;
  swift_retain(v4);
  v7(v1, v6, v2);
  v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v4);
  v9 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 256) = v9;
  v10 = sub_100008E84(&qword_100177CB0);
  *v9 = v0;
  v9[1] = sub_10010BA60;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 112, *(_QWORD *)(v0 + 224), sub_100110508, v5, v10);
}

uint64_t sub_10010BA60()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[30];
    (*(void (**)(_QWORD, _QWORD))(v2[26] + 8))(v2[28], v2[25]);
    swift_release(v4);
    v5 = sub_10010BE50;
  }
  else
  {
    v6 = v2[30];
    v7 = v2[28];
    v8 = v2[25];
    v9 = v2[15];
    v10 = *(void (**)(uint64_t, uint64_t))(v2[26] + 8);
    v2[34] = v10;
    v10(v7, v8);
    swift_release(v6);
    swift_release(v9);
    v2[35] = v2[14];
    v5 = sub_10010BB1C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010BB1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void (*v27)(uint64_t, uint64_t);
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v1 = *(_QWORD **)(v0 + 280);
  v2 = v1[2];
  *(_QWORD *)(v0 + 288) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 296) = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 32);
    *(_DWORD *)(v0 + 404) = enum case for DIPError.Code.internalError(_:);
    *(_DWORD *)(v0 + 408) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
    *(_QWORD *)(v0 + 336) = 0;
    *(_QWORD *)(v0 + 344) = _swiftEmptyArrayStorage;
    v3 = v1[4];
    *(_QWORD *)(v0 + 352) = v3;
    v4 = (void *)v1[5];
    *(_QWORD *)(v0 + 360) = v4;
    swift_bridgeObjectRetain(v4);
    defaultLogger()(v5);
    v6 = swift_bridgeObjectRetain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 176);
    if (v9)
    {
      v13 = swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v32 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(v4);
      *(_QWORD *)(v13 + 4) = sub_10003FA80(v3, (unint64_t)v4, &v32);
      swift_bridgeObjectRelease_n(v4, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "deleting encryption key %s", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v4, 2);
    }

    v27 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v27(v10, v11);
    *(_QWORD *)(v0 + 368) = v27;
    *(_QWORD *)(v0 + 64) = 778790244;
    *(_QWORD *)(v0 + 72) = 0xE400000000000000;
    v28._countAndFlagsBits = v3;
    v28._object = v4;
    String.append(_:)(v28);
    v29 = *(_QWORD *)(v0 + 64);
    v30 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 376) = v30;
    v31 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 384) = v31;
    *v31 = v0;
    v31[1] = sub_10010C050;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v29, v30);
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    v16 = *(unsigned int *)(v0 + 400);
    v17 = *(_QWORD *)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 200);
    v19 = *(uint64_t **)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(v1);
    sub_100110410(v19, v0 + 16);
    v21 = swift_allocObject(&unk_10016C5C0, 80, 7);
    *(_QWORD *)(v0 + 304) = v21;
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = _swiftEmptyArrayStorage;
    v22 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v21 + 48) = v22;
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v0 + 48);
    v23 = swift_allocObject(&unk_10016C5E8, 32, 7);
    *(_QWORD *)(v0 + 312) = v23;
    *(_QWORD *)(v23 + 16) = sub_10011055C;
    *(_QWORD *)(v23 + 24) = v21;
    swift_retain(v20);
    v15(v17, v16, v18);
    v24 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v21);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v0 + 320) = v25;
    *v25 = v0;
    v25[1] = sub_10010BEC8;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v25, *(_QWORD *)(v0 + 216), sub_10003DE8C, v23, (char *)&type metadata for () + 8);
  }
}

uint64_t sub_10010BE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BEC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 312);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 272))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 200));
    swift_release(v4);
    v5 = sub_10010BFD8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 304);
    (*(void (**)(_QWORD, _QWORD))(v2 + 272))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 200));
    swift_release(v4);
    swift_release(v6);
    v5 = sub_10010BF74;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010BF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010BFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010C050()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 376));
  if (v0)
    v4 = sub_10010C438;
  else
    v4 = sub_10010C0BC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10010C0BC()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 344));
  v2 = *(char **)(v0 + 344);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_1000A73AC(0, *((_QWORD *)v2 + 2) + 1, 1, *(char **)(v0 + 344));
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1000A73AC((char *)(v3 > 1), v4 + 1, 1, v2);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v7 = &v2[16 * v4];
  *((_QWORD *)v7 + 4) = v6;
  *((_QWORD *)v7 + 5) = v5;
  v8 = *(_QWORD *)(v0 + 336) + 1;
  if (v8 == *(_QWORD *)(v0 + 288))
  {
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    v10 = *(unsigned int *)(v0 + 400);
    v11 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(uint64_t **)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    sub_100110410(v13, v0 + 16);
    v15 = swift_allocObject(&unk_10016C5C0, 80, 7);
    *(_QWORD *)(v0 + 304) = v15;
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = v2;
    v16 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v15 + 48) = v16;
    *(_OWORD *)(v15 + 64) = *(_OWORD *)(v0 + 48);
    v17 = swift_allocObject(&unk_10016C5E8, 32, 7);
    *(_QWORD *)(v0 + 312) = v17;
    *(_QWORD *)(v17 + 16) = sub_10011055C;
    *(_QWORD *)(v17 + 24) = v15;
    swift_retain(v14);
    v9(v11, v10, v12);
    v18 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v15);
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v0 + 320) = v19;
    *v19 = v0;
    v19[1] = sub_10010BEC8;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v19, *(_QWORD *)(v0 + 216), sub_10003DE8C, v17, (char *)&type metadata for () + 8);
  }
  else
  {
    *(_QWORD *)(v0 + 336) = v8;
    *(_QWORD *)(v0 + 344) = v2;
    v21 = *(_QWORD *)(v0 + 280) + 16 * v8;
    v22 = *(_QWORD *)(v21 + 32);
    *(_QWORD *)(v0 + 352) = v22;
    v23 = *(void **)(v21 + 40);
    *(_QWORD *)(v0 + 360) = v23;
    swift_bridgeObjectRetain(v23);
    defaultLogger()(v24);
    v25 = swift_bridgeObjectRetain_n(v23, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 176);
    if (v28)
    {
      v32 = swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v39 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(v23);
      *(_QWORD *)(v32 + 4) = sub_10003FA80(v22, (unint64_t)v23, &v39);
      swift_bridgeObjectRelease_n(v23, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "deleting encryption key %s", (uint8_t *)v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v23, 2);
    }
    v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v34(v29, v30);
    *(_QWORD *)(v0 + 368) = v34;
    *(_QWORD *)(v0 + 64) = 778790244;
    *(_QWORD *)(v0 + 72) = 0xE400000000000000;
    v35._countAndFlagsBits = v22;
    v35._object = v23;
    String.append(_:)(v35);
    v36 = *(_QWORD *)(v0 + 64);
    v37 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 376) = v37;
    v38 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 384) = v38;
    *v38 = v0;
    v38[1] = sub_10010C050;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v36, v37);
  }
}

uint64_t sub_10010C438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  unsigned int v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 392);
  v59 = *(Swift::String *)(v0 + 352);
  v57 = *(_DWORD *)(v0 + 408);
  v58 = *(_DWORD *)(v0 + 404);
  v60 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v61 = *(_QWORD *)(v0 + 168);
  v62 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 152) + 104);
  v4(v2);
  swift_errorRetain(v1);
  v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for DIPError(0);
  v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  v8 = swift_allocError(v6, v7, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v2, 0, v5, 0xD000000000000057, 0x800000010012FD00, 0xD000000000000020, 0x8000000100130E90, 201);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  v10 = sub_100008E84((uint64_t *)&unk_100178A30);
  v11 = sub_100008E84(&qword_100174898);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_10012A6D0;
  v17 = v16 + v15;
  v18 = (_QWORD *)(v17 + *(int *)(v11 + 48));
  v19 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v57, v19);
  v18[3] = &type metadata for String;
  *v18 = 25447;
  v18[1] = 0xE200000000000000;
  v20 = sub_10003E0A8(v16);
  ((void (*)(uint64_t, _QWORD, uint64_t))v4)(v2, v58, v3);
  v21 = swift_allocError(v6, v7, 0, 0);
  swift_errorRetain(v8);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v2, 0, v20, 0xD000000000000057, 0x8000000100137EA0, 0xD000000000000011, 0x8000000100137F00, 445);
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  *(_QWORD *)(v0 + 80) = 0xD00000000000002BLL;
  *(_QWORD *)(v0 + 88) = 0x8000000100138220;
  String.append(_:)(v59);
  v22 = swift_bridgeObjectRelease(v59._object);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 88);
  defaultLogger()(v22);
  DIPRecordError(_:message:log:)(v21, v23, v24, v60);
  swift_bridgeObjectRelease(v24);
  swift_errorRelease(v21);
  swift_errorRelease(v8);
  v62(v60, v61);
  v25 = *(_QWORD *)(v0 + 336) + 1;
  if (v25 == *(_QWORD *)(v0 + 288))
  {
    v26 = *(_QWORD *)(v0 + 344);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    v28 = *(unsigned int *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(uint64_t **)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    sub_100110410(v31, v0 + 16);
    v33 = swift_allocObject(&unk_10016C5C0, 80, 7);
    *(_QWORD *)(v0 + 304) = v33;
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v26;
    v34 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v33 + 32) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v33 + 48) = v34;
    *(_OWORD *)(v33 + 64) = *(_OWORD *)(v0 + 48);
    v35 = swift_allocObject(&unk_10016C5E8, 32, 7);
    *(_QWORD *)(v0 + 312) = v35;
    *(_QWORD *)(v35 + 16) = sub_10011055C;
    *(_QWORD *)(v35 + 24) = v33;
    swift_retain(v32);
    v27(v29, v28, v30);
    v36 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    swift_retain(v33);
    v37 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v0 + 320) = v37;
    *v37 = v0;
    v37[1] = sub_10010BEC8;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v37, *(_QWORD *)(v0 + 216), sub_10003DE8C, v35, (char *)&type metadata for () + 8);
  }
  else
  {
    *(_QWORD *)(v0 + 336) = v25;
    v39 = *(_QWORD *)(v0 + 280) + 16 * v25;
    v40 = *(_QWORD *)(v39 + 32);
    *(_QWORD *)(v0 + 352) = v40;
    v41 = *(void **)(v39 + 40);
    *(_QWORD *)(v0 + 360) = v41;
    swift_bridgeObjectRetain(v41);
    defaultLogger()(v42);
    v43 = swift_bridgeObjectRetain_n(v41, 2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    v46 = os_log_type_enabled(v44, v45);
    v47 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 176);
    if (v46)
    {
      v50 = swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v63 = v51;
      *(_DWORD *)v50 = 136315138;
      swift_bridgeObjectRetain(v41);
      *(_QWORD *)(v50 + 4) = sub_10003FA80(v40, (unint64_t)v41, &v63);
      swift_bridgeObjectRelease_n(v41, 3);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "deleting encryption key %s", (uint8_t *)v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v41, 2);
    }
    v52 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v52(v47, v48);
    *(_QWORD *)(v0 + 368) = v52;
    *(_QWORD *)(v0 + 64) = 778790244;
    *(_QWORD *)(v0 + 72) = 0xE400000000000000;
    v53._countAndFlagsBits = v40;
    v53._object = v41;
    String.append(_:)(v53);
    v54 = *(_QWORD *)(v0 + 64);
    v55 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 376) = v55;
    v56 = (_QWORD *)swift_task_alloc(async function pointer to DeviceIdentityKeystore.deleteKeysAndCertificates(label:)[1]);
    *(_QWORD *)(v0 + 384) = v56;
    *v56 = v0;
    v56[1] = sub_10010C050;
    return DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(v54, v55);
  }
}

uint64_t sub_10010CA28@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  char *v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  char *v38;
  id v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  NSObject *v48;
  _BOOL4 v49;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  id v60;
  NSObject *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char *v74;
  __int128 v75;
  NSObject *v76;
  id v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v87 = a1;
  v2 = type metadata accessor for Logger(0);
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v69 - v16;
  result = sub_10000DF7C();
  if (!v1)
  {
    v19 = result;
    v88 = v15;
    v89 = v12;
    v78 = v4;
    v79 = 0;
    v91 = v9;
    result = Date.init()(result);
    v82 = v17;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v68 = v19;
      else
        v68 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v21 = _CocoaArrayWrapper.endIndex.getter(v68);
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v22 = v91;
    v23 = v8;
    v24 = v19;
    if (v21)
    {
      if (v21 >= 1)
      {
        v25 = (uint64_t)v7;
        v26 = 0;
        v92 = v19 & 0xC000000000000001;
        v86 = (char *)_swiftEmptyArrayStorage;
        *(_QWORD *)&v20 = 136315394;
        v75 = v20;
        v74 = (char *)&type metadata for Any + 8;
        v83 = v19;
        v90 = v21;
        while (1)
        {
          if (v92)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
          else
            v27 = *(id *)(v24 + 8 * v26 + 32);
          v28 = v27;
          v29 = objc_msgSend(v27, "credential");
          if (!v29)
            goto LABEL_8;
          v30 = v29;
          v31 = objc_msgSend(v29, "options");
          if (!v31)
            break;
          v32 = v31;
          v33 = objc_msgSend(v28, "updatedAt");
          if (!v33)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v25, 1, 1, v23);
LABEL_24:

            sub_1000150E8(v25, &qword_1001755B0);
            v21 = v90;
            goto LABEL_9;
          }
          v34 = v33;
          v35 = v89;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

          v36 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
          v37 = v35;
          v22 = v91;
          v36(v25, v37, v23);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v23);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v25, 1, v23) == 1)
            goto LABEL_24;
          v38 = v88;
          v36((uint64_t)v88, (char *)v25, v23);
          v39 = objc_msgSend(v28, "identifier");
          if (v39)
          {
            v40 = v39;
            v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v42 = v41;

            v43 = objc_msgSend(v32, "deleteInactiveKeysAfterDays");
            if ((uint64_t)v43 <= 0)
            {
              (*(void (**)(char *, uint64_t))(v22 + 8))(v88, v23);
              v57 = v42;
            }
            else
            {
              v81 = v42;
              v44 = v88;
              v45 = Date.isAtLeast(days:after:)(v43, v88);
              if ((v45 & 1) != 0)
              {
                defaultLogger()(v45);
                v46 = v81;
                swift_bridgeObjectRetain_n(v81, 2);
                v47 = v30;
                v48 = Logger.logObject.getter(v47);
                v73 = static os_log_type_t.debug.getter();
                v76 = v48;
                v49 = os_log_type_enabled(v48, (os_log_type_t)v73);
                v77 = v47;
                if (v49)
                {
                  v50 = v47;
                  v51 = swift_slowAlloc(22, -1);
                  v71 = swift_slowAlloc(64, -1);
                  v93 = v71;
                  *(_DWORD *)v51 = v75;
                  swift_bridgeObjectRetain(v46);
                  *(_QWORD *)(v51 + 4) = sub_10003FA80(v80, v46, &v93);
                  swift_bridgeObjectRelease_n(v46, 3);
                  v72 = v51;
                  *(_WORD *)(v51 + 12) = 2080;
                  v52 = objc_msgSend(v50, "credentialIdentifier");
                  v24 = v83;
                  if (v52)
                  {
                    v53 = v52;
                    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
                    v55 = v54;

                    v56 = v70;
                  }
                  else
                  {
                    v55 = 0xE500000000000000;
                    v56 = 0x3E6C696E3CLL;
                  }
                  v70 = v55;
                  v58 = sub_10003FA80(v56, v55, &v93);
                  v59 = (uint8_t *)v72;
                  *(_QWORD *)(v72 + 14) = v58;
                  v60 = v77;

                  swift_bridgeObjectRelease(v70);
                  v61 = v76;
                  _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v73, "Identified device encryption key %s in credential %s for deletion", v59, 0x16u);
                  v62 = v71;
                  swift_arrayDestroy(v71, 2, v74);
                  swift_slowDealloc(v62, -1, -1);
                  swift_slowDealloc(v72, -1, -1);

                  (*(void (**)(char *, uint64_t))(v84 + 8))(v78, v85);
                }
                else
                {

                  swift_bridgeObjectRelease_n(v46, 2);
                  (*(void (**)(char *, uint64_t))(v84 + 8))(v78, v85);
                  v24 = v83;
                }
                if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
                  v86 = sub_1000A73AC(0, *((_QWORD *)v86 + 2) + 1, 1, v86);
                v64 = *((_QWORD *)v86 + 2);
                v63 = *((_QWORD *)v86 + 3);
                if (v64 >= v63 >> 1)
                  v86 = sub_1000A73AC((char *)(v63 > 1), v64 + 1, 1, v86);
                v65 = v86;
                *((_QWORD *)v86 + 2) = v64 + 1;
                v66 = &v65[16 * v64];
                v67 = v81;
                *((_QWORD *)v66 + 4) = v80;
                *((_QWORD *)v66 + 5) = v67;

                (*(void (**)(char *, uint64_t))(v22 + 8))(v88, v23);
                v21 = v90;
                goto LABEL_9;
              }
              (*(void (**)(char *, uint64_t))(v22 + 8))(v44, v23);
              v57 = v81;
            }
            swift_bridgeObjectRelease(v57);

          }
          else
          {

            (*(void (**)(char *, uint64_t))(v22 + 8))(v38, v23);
          }
          v24 = v83;
          v21 = v90;
LABEL_9:
          if (v21 == ++v26)
            goto LABEL_39;
        }

LABEL_8:
        goto LABEL_9;
      }
      __break(1u);
    }
    else
    {
      v86 = (char *)_swiftEmptyArrayStorage;
LABEL_39:
      swift_bridgeObjectRelease(v24);
      result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v82, v23);
      *v87 = v86;
    }
  }
  return result;
}

unint64_t sub_10010D0EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t result;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id v26;
  void *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unsigned int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  id v104;
  unint64_t v105;

  v4 = type metadata accessor for DIPError.Code(0);
  v88 = *(_QWORD *)(v4 - 8);
  v89 = v4;
  __chkstk_darwin(v4);
  v87 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v13 = (_QWORD *)type metadata accessor for IDCSAnalytics.GarbageCollectionEventType(0);
  v14 = *(v13 - 1);
  __chkstk_darwin(v13);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a1;
  v17 = v103;
  result = sub_10000DF7C();
  v100 = (void (*)(char *, uint64_t))v17;
  if (!v17)
  {
    v20 = result;
    v77 = v14;
    v94 = v7;
    v95 = v12;
    v86 = v10;
    v101 = v6;
    if (result >> 62)
      goto LABEL_47;
    v21 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v21)
    {
      v76 = v13;
      v96 = 0;
      v22 = 0;
      v23 = v20 & 0xC000000000000001;
      v98 = v20 & 0xFFFFFFFFFFFFFF8;
      v97 = v20 + 32;
      v85 = enum case for DIPError.PropertyKey.daemonSessionState(_:);
      v84 = enum case for DIPError.Code.internalError(_:);
      v75 = a2 + 9;
      *(_QWORD *)&v19 = 136315138;
      v83 = v19;
      v82 = (char *)&type metadata for Any + 8;
      v81 = xmmword_10012A6D0;
      v80 = 0x8000000100137F00;
      v79 = 0x8000000100137EA0;
      v78 = (void *)0x8000000100138250;
      v91 = v21;
      v92 = v20;
      v93 = a2;
      v102 = v16;
      v90 = v20 & 0xC000000000000001;
      while (1)
      {
        if (v23)
        {
          v24 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
        }
        else
        {
          if (v22 >= *(_QWORD *)(v98 + 16))
            goto LABEL_44;
          v24 = *(id *)(v97 + 8 * v22);
        }
        v13 = v24;
        if (__OFADD__(v22++, 1))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v26 = objc_msgSend(v24, "identifier");
        if (!v26)
        {

          goto LABEL_6;
        }
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v16 = v29;

        v30 = (_QWORD *)a2[2];
        if (!v30)
          goto LABEL_28;
        v31 = a2[4];
        v32 = (char *)a2[5];
        v33 = v31 == v28 && v32 == v16;
        v103 = v28;
        if (!v33)
        {
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v28, v16, 0);
          if ((v31 & 1) == 0)
          {
            if (v30 == (_QWORD *)1)
              goto LABEL_28;
            v31 = a2[6];
            v68 = (char *)a2[7];
            if (v31 != v103 || v68 != v16)
            {
              v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v68, v103, v16, 0);
              if ((v31 & 1) == 0)
                break;
            }
          }
        }
LABEL_19:
        a2 = v95;
        defaultLogger()(v31);
        v34 = swift_bridgeObjectRetain_n(v16, 2);
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = swift_slowAlloc(12, -1);
          v38 = (void *)swift_slowAlloc(32, -1);
          v104 = v38;
          *(_DWORD *)v37 = v83;
          swift_bridgeObjectRetain(v16);
          *(_QWORD *)(v37 + 4) = sub_10003FA80(v103, (unint64_t)v16, (uint64_t *)&v104);
          swift_bridgeObjectRelease_n(v16, 3);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "deleting encryption key %s from coreData", (uint8_t *)v37, 0xCu);
          swift_arrayDestroy(v38, 1, v82);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v16, 2);
        }
        v20 = *(_QWORD *)(v94 + 8);
        ((void (*)(_QWORD *, uint64_t))v20)(a2, v101);
        v39 = *(void **)(v99 + 16);
        objc_msgSend(v39, "deleteObject:", v13);
        v104 = 0;
        v40 = objc_msgSend(v39, "save:", &v104);
        v41 = v104;
        if (v40)
        {
          v42 = v104;

          swift_bridgeObjectRelease(v16);
          if (__OFADD__(v96, 1))
            goto LABEL_45;
          ++v96;
        }
        else
        {
          v43 = v104;
          v100 = (void (*)(char *, uint64_t))v20;
          v44 = v43;
          v45 = _convertNSErrorToError(_:)(v41);

          swift_willThrow(v46);
          v47 = sub_100008E84((uint64_t *)&unk_100178A30);
          v48 = sub_100008E84(&qword_100174898);
          v49 = *(_QWORD *)(v48 - 8);
          v50 = *(_QWORD *)(v49 + 72);
          v51 = *(unsigned __int8 *)(v49 + 80);
          v52 = (v51 + 32) & ~v51;
          v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
          *(_OWORD *)(v53 + 16) = v81;
          v54 = v53 + v52;
          v55 = (_QWORD *)(v54 + *(int *)(v48 + 48));
          v56 = type metadata accessor for DIPError.PropertyKey(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v54, v85, v56);
          v55[3] = &type metadata for String;
          *v55 = 25447;
          v55[1] = 0xE200000000000000;
          v57 = sub_10003E0A8(v53);
          v58 = v87;
          (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, v84, v89);
          v59 = type metadata accessor for DIPError(0);
          v60 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
          v61 = swift_allocError(v59, v60, 0, 0);
          swift_errorRetain(v45);
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v45, v58, 0, v57, 0xD000000000000057, v79, 0xD000000000000011, v80, 445);
          v104 = 0;
          v105 = 0xE000000000000000;
          _StringGuts.grow(_:)(57);
          v62._countAndFlagsBits = 0xD000000000000037;
          v62._object = v78;
          String.append(_:)(v62);
          v63._countAndFlagsBits = v103;
          v63._object = v16;
          String.append(_:)(v63);
          v64 = swift_bridgeObjectRelease(v16);
          v65 = v104;
          v66 = v105;
          v67 = v86;
          defaultLogger()(v64);
          DIPRecordError(_:message:log:)(v61, v65, v66, v67);
          swift_bridgeObjectRelease(v66);
          swift_errorRelease(v61);
          swift_errorRelease(v45);

          v100(v67, v101);
          v100 = 0;
        }
        v20 = v92;
        a2 = v93;
        v16 = v102;
        v23 = v90;
        v21 = v91;
LABEL_6:
        if (v22 == v21)
        {
          swift_bridgeObjectRelease(v20);
          v13 = v76;
          v72 = v77;
          v73 = v96;
          goto LABEL_52;
        }
      }
      if (v30 == (_QWORD *)2)
      {
LABEL_28:
        swift_bridgeObjectRelease(v16);

        v16 = v102;
        goto LABEL_6;
      }
      v20 = (uint64_t)v75;
      v69 = 2;
      while (1)
      {
        a2 = (_QWORD *)(v69 + 1);
        if (__OFADD__(v69, 1))
          break;
        v31 = *(_QWORD *)(v20 - 8);
        v70 = *(char **)v20;
        if (v31 == v103 && v70 == v16)
          goto LABEL_19;
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v70, v103, v16, 0);
        if ((v31 & 1) != 0)
          goto LABEL_19;
        v20 += 16;
        ++v69;
        if (a2 == v30)
        {
          swift_bridgeObjectRelease(v16);

          v20 = v92;
          a2 = v93;
          v16 = v102;
          goto LABEL_6;
        }
      }
LABEL_46:
      __break(1u);
LABEL_47:
      if (v20 < 0)
        v74 = v20;
      else
        v74 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v21 = _CocoaArrayWrapper.endIndex.getter(v74);
      swift_bridgeObjectRelease(v20);
    }
    swift_bridgeObjectRelease(v20);
    v73 = 0;
    v72 = v77;
LABEL_52:
    type metadata accessor for IDCSAnalytics(0);
    (*(void (**)(char *, _QWORD, _QWORD *))(v72 + 104))(v16, enum case for IDCSAnalytics.GarbageCollectionEventType.inactiveDeviceEncryptionKey(_:), v13);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v16, v73);
    (*(void (**)(char *, _QWORD *))(v72 + 8))(v16, v13);
    return (unint64_t)sub_1000091F8();
  }
  return result;
}

void sub_10010D90C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(os_log_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  void (*v38)(os_log_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint8_t *v46;
  uint8_t *v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  os_log_t v53;
  uint8_t *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  BOOL v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  char *v87;
  int64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  char *v93;
  uint8_t *v94;
  void (*v95)(os_log_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  os_log_t v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;

  v85 = a1;
  v84 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v102 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(uint8_t **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v80 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v80 - v15;
  __chkstk_darwin(v14);
  v101 = (os_log_t)((char *)&v80 - v17);
  sub_100008854(0);
  if (v1)
  {
    v19 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v102, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v1);
    v20 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v19, 0, v20, 0xD000000000000057, 0x800000010012FD00, 0xD00000000000002ALL, 0x800000010012FDA0, 249);
    swift_willThrow(v23);
    swift_errorRelease(v1);
    return;
  }
  v24 = v18;
  v94 = v7;
  v95 = 0;
  v99 = v16;
  v100 = v6;
  v93 = v13;
  v96 = v10;
  v97 = v4;
  v98 = v3;
  defaultLogger()(v18);
  v25 = swift_bridgeObjectRetain_n(v24, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter();
  v28 = v24;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v103 = (_QWORD *)v30;
    *(_DWORD *)v29 = 136446210;
    v31 = swift_bridgeObjectRetain(v24);
    v32 = Set.description.getter(v31);
    v34 = v33;
    swift_bridgeObjectRelease(v28);
    v104 = sub_10003FA80(v32, v34, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v29 + 4);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Occupied SE slots: %{public}s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v24, 2);
  }
  v35 = (void (*)(os_log_t, uint64_t))*((_QWORD *)v94 + 1);
  v36 = v100;
  v35(v101, v100);
  v37 = v99;
  v38 = v95;
  v39 = sub_10000E244();
  if (v38)
  {
    swift_bridgeObjectRelease(v28);
    return;
  }
  v40 = v39;
  defaultLogger()(v39);
  v41 = swift_bridgeObjectRetain_n(v40, 2);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter();
  v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    v101 = v42;
    v45 = swift_slowAlloc(12, -1);
    LODWORD(v95) = v44;
    v46 = (uint8_t *)v45;
    v99 = (_QWORD *)swift_slowAlloc(32, -1);
    v103 = v99;
    v94 = v46;
    *(_DWORD *)v46 = 136315138;
    v47 = v46 + 4;
    v48 = swift_bridgeObjectRetain(v40);
    v49 = Set.description.getter(v48);
    v51 = v50;
    swift_bridgeObjectRelease(v40);
    v104 = sub_10003FA80(v49, v51, (uint64_t *)&v103);
    v52 = v47;
    v36 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52);
    swift_bridgeObjectRelease_n(v40, 2);
    swift_bridgeObjectRelease(v51);
    v53 = v101;
    v54 = v94;
    _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v95, "Credential SE slots: %s", v94, 0xCu);
    v55 = v99;
    swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v40, 2);
  }
  v35(v37, v36);
  v56 = *(_QWORD *)(v40 + 16);
  v57 = *(_QWORD *)(v28 + 16);
  v95 = v35;
  v58 = v93;
  if (v56 <= v57 >> 3)
  {
    v103 = (_QWORD *)v28;
    sub_1000387A4(v40);
    v59 = swift_bridgeObjectRelease(v40);
    v99 = v103;
  }
  else
  {
    v99 = sub_100038904(v40, v28);
    v59 = swift_bridgeObjectRelease(v40);
  }
  v81 = 0;
  v61 = 0;
  v62 = v99[7];
  v87 = (char *)(v99 + 7);
  v63 = 1 << *((_BYTE *)v99 + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  v65 = v64 & v62;
  v88 = (unint64_t)(v63 + 63) >> 6;
  LODWORD(v94) = enum case for DIPError.PropertyKey.daemonSessionState(_:);
  LODWORD(v93) = enum case for DIPError.Code.internalError(_:);
  *(_QWORD *)&v60 = 134349056;
  v86 = v60;
  v92 = xmmword_10012A6D0;
  v90 = 0x8000000100137EA0;
  v91 = 0x8000000100137F00;
  v89 = 0x8000000100138290;
  while (v65)
  {
    v101 = (os_log_t)((v65 - 1) & v65);
    v66 = __clz(__rbit64(v65)) | (v61 << 6);
    v67 = v58;
LABEL_31:
    v71 = *(_QWORD *)(v99[6] + 8 * v66);
    v72 = defaultLogger()(v59);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = swift_slowAlloc(12, -1);
      *(_DWORD *)v75 = v86;
      *(_QWORD *)(v75 + 4) = v71;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Identified SE key in slot %{public}ld for deletion", (uint8_t *)v75, 0xCu);
      v36 = v100;
      swift_slowDealloc(v75, -1, -1);
    }

    v58 = v67;
    v95((os_log_t)v67, v36);
    sub_100104754(v71);
    v68 = __OFADD__(v81++, 1);
    v65 = (unint64_t)v101;
    if (v68)
    {
      __break(1u);
LABEL_40:
      v76 = v83;
      v77 = v82;
      v78 = v81;
      swift_release(v99);
      type metadata accessor for IDCSAnalytics(0);
      v79 = v84;
      (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v77, enum case for IDCSAnalytics.GarbageCollectionEventType.orphanedSESlots(_:), v84);
      static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v77, v78);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v79);
      sub_1000091F8();
      return;
    }
  }
  v68 = __OFADD__(v61++, 1);
  if (v68)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v61 >= v88)
    goto LABEL_40;
  v67 = v58;
  v69 = *(_QWORD *)&v87[8 * v61];
  if (v69)
  {
LABEL_30:
    v101 = (os_log_t)((v69 - 1) & v69);
    v66 = __clz(__rbit64(v69)) + (v61 << 6);
    goto LABEL_31;
  }
  v70 = v61 + 1;
  if (v61 + 1 >= v88)
    goto LABEL_40;
  v69 = *(_QWORD *)&v87[8 * v70];
  if (v69)
    goto LABEL_29;
  v70 = v61 + 2;
  if (v61 + 2 >= v88)
    goto LABEL_40;
  v69 = *(_QWORD *)&v87[8 * v70];
  if (v69)
    goto LABEL_29;
  v70 = v61 + 3;
  if (v61 + 3 >= v88)
    goto LABEL_40;
  v69 = *(_QWORD *)&v87[8 * v70];
  if (v69)
  {
LABEL_29:
    v61 = v70;
    goto LABEL_30;
  }
  while (1)
  {
    v61 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v61 >= v88)
      goto LABEL_40;
    v69 = *(_QWORD *)&v87[8 * v61];
    ++v70;
    if (v69)
      goto LABEL_30;
  }
LABEL_42:
  __break(1u);
}

void sub_10010E414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t i;
  void *v22;
  uint64_t v23;

  v5 = type metadata accessor for IDCSAnalytics.GarbageCollectionEventType(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10011AA9C();
  if (!v2)
  {
    v10 = v9;
    v19 = v8;
    v23 = 0;
    if (v9 >> 62)
      goto LABEL_13;
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    v20 = v6;
    for (i = v5; v11; i = v5)
    {
      v5 = v10 & 0xC000000000000001;
      v6 = 4;
      while (1)
      {
        v12 = v5
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v10)
            : *(id *)(v10 + 8 * v6);
        v13 = v12;
        v14 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v22 = v12;
        sub_10010F280(&v22, a2, &v23, a1);

        ++v6;
        if (v14 == v11)
          goto LABEL_10;
      }
      __break(1u);
LABEL_13:
      if (v10 < 0)
        v18 = v10;
      else
        v18 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v18);
      v20 = v6;
    }
LABEL_10:
    swift_bridgeObjectRelease_n(v10, 2);
    type metadata accessor for IDCSAnalytics(0);
    v16 = v19;
    v15 = v20;
    v17 = i;
    (*(void (**)(char *, _QWORD, unint64_t))(v20 + 104))(v19, enum case for IDCSAnalytics.GarbageCollectionEventType.inactivePayloadProtectionKey(_:), i);
    static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(v16, v23);
    (*(void (**)(char *, unint64_t))(v15 + 8))(v16, v17);
    sub_1000091F8();
  }
}

uint64_t sub_10010E5F0(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(51);
  v4._object = (void *)0x80000001001381E0;
  v4._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return 0;
}

id sub_10010E670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void (*v26)(NSObject *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  id result;
  uint64_t (*v30)(os_log_t, uint64_t);
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t v51;
  void (*v52)(_BYTE *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[4];
  int v82;
  uint64_t v83;
  _BYTE *v84;
  os_log_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v0 = type metadata accessor for DIPError.Code(0);
  v86 = *(_QWORD *)(v0 - 8);
  v87 = v0;
  __chkstk_darwin(v0);
  v88 = &v81[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = type metadata accessor for DIPError(0);
  v90 = *(_QWORD *)(v2 - 8);
  v91 = v2;
  __chkstk_darwin(v2);
  v92 = &v81[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Logger(0);
  v96 = *(_QWORD *)(v4 - 8);
  v97 = v4;
  v5 = __chkstk_darwin(v4);
  v89 = &v81[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v95 = &v81[-v8];
  v9 = __chkstk_darwin(v7);
  v93 = &v81[-v10];
  v11 = __chkstk_darwin(v9);
  v94 = &v81[-v12];
  __chkstk_darwin(v11);
  v14 = &v81[-v13];
  v15 = type metadata accessor for CredentialKeyType(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = &v81[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v17);
  v22 = &v81[-v21];
  __chkstk_darwin(v20);
  v24 = &v81[-v23];
  v25 = enum case for CredentialKeyType.legacySE(_:);
  v26 = *(void (**)(NSObject *, uint64_t, uint64_t))(v16 + 104);
  v26(&v81[-v23], enum case for CredentialKeyType.legacySE(_:), v15);
  v27 = v98;
  v28 = sub_10000DAC4((uint64_t)v24, 0);
  if (v27)
    return (id)(*(uint64_t (**)(NSObject *, uint64_t))(v16 + 8))(v24, v15);
  v84 = v14;
  v85 = v19;
  v98 = v28;
  v30 = *(uint64_t (**)(os_log_t, uint64_t))(v16 + 8);
  v30(v24, v15);
  v26(v22, v25, v15);
  v31 = sub_10000DAC4((uint64_t)v22, 1);
  v30(v22, v15);
  v32 = v85;
  v26(v85, v25, v15);
  v33 = sub_10000DAC4((uint64_t)v32, 2);
  v83 = 0;
  v34 = v33;
  v35 = v30(v32, v15);
  v36 = v84;
  defaultLogger()(v35);
  v37 = v98;
  swift_bridgeObjectRetain_n(v98, 2);
  swift_bridgeObjectRetain_n(v31, 2);
  v38 = swift_bridgeObjectRetain_n(v34, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  v41 = v37 >> 62;
  v42 = v31;
  if (os_log_type_enabled(v39, (os_log_type_t)v40))
  {
    v82 = v40;
    v85 = v39;
    v43 = v34;
    v44 = swift_slowAlloc(32, -1);
    *(_DWORD *)v44 = 134218496;
    v45 = v83;
    v46 = v96;
    if (v41)
    {
      v47 = v98;
      if (v98 < 0)
        v76 = v98;
      else
        v76 = v98 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v98);
      v48 = _CocoaArrayWrapper.endIndex.getter(v76);
      swift_bridgeObjectRelease(v47);
    }
    else
    {
      v47 = v98;
      v48 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v47);
    v101 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v44 + 4);
    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v44 + 12) = 2048;
    if ((unint64_t)v42 >> 62)
    {
      if (v42 < 0)
        v77 = v42;
      else
        v77 = v42 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v42);
      v49 = _CocoaArrayWrapper.endIndex.getter(v77);
      swift_bridgeObjectRelease(v42);
    }
    else
    {
      v49 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v42);
    v101 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v44 + 14);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v44 + 22) = 2048;
    if ((unint64_t)v43 >> 62)
    {
      if (v43 < 0)
        v78 = v43;
      else
        v78 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v50 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease(v43);
    }
    else
    {
      v50 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v43);
    v101 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v44 + 24);
    swift_bridgeObjectRelease(v43);
    v51 = v85;
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v82, "count of keys : %ld + %ld + %ld", (uint8_t *)v44, 0x20u);
    swift_slowDealloc(v44, -1, -1);

    v36 = v84;
    v34 = v43;
  }
  else
  {

    swift_bridgeObjectRelease_n(v37, 2);
    swift_bridgeObjectRelease_n(v31, 2);
    swift_bridgeObjectRelease_n(v34, 2);
    v45 = v83;
    v46 = v96;
  }
  v52 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
  v52(v36, v97);
  if (v41)
  {
    v74 = v98;
    if (v98 < 0)
      v75 = v98;
    else
      v75 = v98 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v98);
    v54 = _CocoaArrayWrapper.endIndex.getter(v75);
    swift_bridgeObjectRelease(v74);
    v53 = v74;
  }
  else
  {
    v53 = v98;
    v54 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v53);
  v55 = v95;
  if (v54)
  {
    swift_bridgeObjectRelease(v34);
LABEL_20:
    v57 = swift_bridgeObjectRelease(v42);
LABEL_21:
    v58 = defaultLogger()(v57);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v101 = v62;
      *(_DWORD *)v61 = 136315138;
      v99 = sub_10003FA80(0xD000000000000024, 0x80000001001380B0, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v61 + 4);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s no action performed", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }

    v52(v55, v97);
    return sub_1000091F8();
  }
  if ((unint64_t)v42 >> 62)
  {
    if (v42 < 0)
      v79 = v42;
    else
      v79 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v42);
    v56 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v42);
  }
  else
  {
    v56 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v42);
  if (v56)
  {
    v42 = v34;
    goto LABEL_20;
  }
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0)
      v80 = v34;
    else
      v80 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v63 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    v63 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v57 = swift_bridgeObjectRelease(v34);
  if (v63)
    goto LABEL_21;
  result = (id)sub_100122C60(0xD000000000000012, (void *)0x800000010012D7B0);
  if (!v45)
  {
    v64 = result;
    if (result)
    {
      v65 = objc_msgSend(result, "encryptedACL");
      if (v65)
      {
        v66 = v65;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
        v68 = v67;

        __asm { BR              X10 }
      }

      return sub_1000091F8();
    }
    v69 = v94;
    v70 = defaultLogger()(0);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "missing global auth acl, skipping", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }

    return (id)((uint64_t (*)(_BYTE *, uint64_t))v52)(v69, v97);
  }
  return result;
}

id sub_10010F1B0()
{
  return sub_10010E670();
}

uint64_t sub_10010F1C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10010A074(&v4);
  if (!v1)
    *a1 = v4;
  return result;
}

uint64_t sub_10010F1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008E84(&qword_100178800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010F244()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10010F268(uint64_t a1)
{
  uint64_t v1;

  sub_10010E414(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10010F280(void **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  unint64_t result;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  id v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  id v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  id v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void (*v110)(char *, uint64_t);
  void *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  char *v116;
  uint64_t *v117;
  id v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  os_log_type_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  NSObject *v138;
  os_log_type_t v139;
  const char *v140;
  char *v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint8_t *v146;
  id v147;
  Swift::String v148;
  Swift::Bool v149;
  uint64_t v150;
  uint64_t v151;
  os_log_type_t v152;
  char *v153;
  void *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  Swift::String v158;
  void *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void *v165;
  id v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  Swift::String v173;
  Swift::String v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  _QWORD v181[4];
  uint64_t v182;
  void *v183;
  __int128 v184;
  uint64_t *v185;
  char *v186;
  void *v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  char *v191;
  void *v192;
  char *v193;
  char *v194;
  void (*v195)(char *, uint64_t);
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  void *v203;
  id v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  void (*v215)(char *, uint64_t);
  __int128 v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v196 = a4;
  v202 = a3;
  v205 = a2;
  v201 = type metadata accessor for DIPError.Code(0);
  v198 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v206 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for DIPError(0);
  v199 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v209 = (char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008E84(&qword_1001755B0);
  __chkstk_darwin(v7);
  v213 = (char *)&v182 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = type metadata accessor for Date(0);
  v225 = *(_QWORD *)(v223 - 8);
  v9 = __chkstk_darwin(v223);
  v224 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v212 = (char *)&v182 - v12;
  __chkstk_darwin(v11);
  v211 = (char *)&v182 - v13;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v220 = v14;
  v221 = v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v182 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v182 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v182 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v182 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v182 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v182 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v182 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v182 - v37;
  v39 = *a1;
  v40 = v227;
  result = (unint64_t)sub_1000C70A0();
  if (!v40)
  {
    v43 = result;
    v207 = 0;
    v192 = v39;
    v226 = v38;
    v222 = v36;
    v210 = v33;
    v197 = v30;
    v191 = v27;
    v186 = v24;
    v194 = v21;
    v193 = v18;
    v219 = result;
    if (result >> 62)
      goto LABEL_63;
    v44 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    v46 = v224;
    v45 = v225;
    v47 = v220;
    v48 = v222;
    v49 = v226;
    if (v44)
    {
      if (v44 >= 1)
      {
        v50 = 0;
        v218 = v43 & 0xC000000000000001;
        v185 = &v231;
        v190 = enum case for DIPError.Code.internalError(_:);
        *(_QWORD *)&v42 = 136315138;
        v216 = v42;
        v214 = (char *)&type metadata for Any + 8;
        *(_QWORD *)&v42 = 136315394;
        v184 = v42;
        v189 = 0x8000000100138150;
        v188 = 0x8000000100137EA0;
        v187 = (void *)0x8000000100138190;
        v183 = (void *)0x8000000100138120;
        v51 = v223;
        v217 = v44;
        while (1)
        {
          v227 = v50;
          if (v218)
            v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v43);
          else
            v52 = *(id *)(v43 + 8 * v50 + 32);
          v53 = v52;
          defaultLogger()(v52);
          v54 = v53;
          v55 = Logger.logObject.getter(v54);
          v56 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v55, v56))
          {
            v57 = swift_slowAlloc(12, -1);
            v58 = swift_slowAlloc(32, -1);
            v228 = v58;
            *(_DWORD *)v57 = v216;
            v59 = objc_msgSend(v54, "identifier");
            if (v59)
            {
              v60 = v59;
              v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
              v63 = v62;

            }
            else
            {
              v61 = 0;
              v63 = 0xE000000000000000;
            }
            *(_QWORD *)(v57 + 4) = sub_10003FA80(v61, v63, &v228);

            swift_bridgeObjectRelease(v63);
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "checking if payload protection key %s has a payload", (uint8_t *)v57, 0xCu);
            swift_arrayDestroy(v58, 1, v214);
            swift_slowDealloc(v58, -1, -1);
            swift_slowDealloc(v57, -1, -1);

            v47 = v220;
            v64 = *(void (**)(char *, uint64_t))(v221 + 8);
            v49 = v226;
            v64(v226, v220);
            v51 = v223;
            v46 = v224;
            v45 = v225;
            v48 = v222;
          }
          else
          {

            v64 = *(void (**)(char *, uint64_t))(v221 + 8);
            v64(v49, v47);
          }
          v65 = objc_msgSend(v54, "protectedPayload");

          if (v65)
          {
            defaultLogger()(v66);
            v67 = v54;
            v68 = Logger.logObject.getter(v67);
            v69 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v68, v69))
            {
              v70 = swift_slowAlloc(12, -1);
              v71 = swift_slowAlloc(32, -1);
              v228 = v71;
              *(_DWORD *)v70 = v216;
              v72 = objc_msgSend(v67, "identifier");
              if (v72)
              {
                v73 = v72;
                v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
                v76 = v75;

              }
              else
              {
                v74 = 0;
                v76 = 0xE000000000000000;
              }
              *(_QWORD *)(v70 + 4) = sub_10003FA80(v74, v76, &v228);

              swift_bridgeObjectRelease(v76);
              _os_log_impl((void *)&_mh_execute_header, v68, v69, "Skipping payload protection key deletion for %s as it is associated with a payload", (uint8_t *)v70, 0xCu);
              swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v71, -1, -1);
              swift_slowDealloc(v70, -1, -1);

              v48 = v222;
              v47 = v220;
              v64(v222, v220);
              v51 = v223;
              v46 = v224;
              v45 = v225;
            }
            else
            {

              v64(v48, v47);
            }
            goto LABEL_8;
          }
          v77 = objc_msgSend(v54, "identifier");
          if (!v77)
          {

            goto LABEL_9;
          }
          v78 = v77;
          v215 = v64;
          v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
          v81 = v80;

          v82 = objc_msgSend(v54, "createdAt");
          if (v82)
          {
            v83 = v82;
            v208 = v79;
            v84 = v212;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

            v85 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
            v86 = (uint64_t)v213;
            v85(v213, v84, v51);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v86, 0, 1, v51);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v86, 1, v51) != 1)
            {
              v203 = v81;
              v87 = v211;
              v88 = ((uint64_t (*)(char *, uint64_t, uint64_t))v85)(v211, v86, v51);
              v89 = v197;
              defaultLogger()(v88);
              (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v46, v87, v51);
              v90 = v54;
              v91 = Logger.logObject.getter(v90);
              v92 = static os_log_type_t.debug.getter();
              v93 = os_log_type_enabled(v91, v92);
              v204 = v90;
              if (v93)
              {
                v94 = v92;
                v95 = swift_slowAlloc(22, -1);
                v96 = swift_slowAlloc(64, -1);
                v228 = v96;
                *(_DWORD *)v95 = v184;
                v97 = objc_msgSend(v90, "identifier");
                if (v97)
                {
                  v98 = v97;
                  v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
                  v101 = v100;

                }
                else
                {
                  v99 = 0;
                  v101 = 0xE000000000000000;
                }
                v230 = sub_10003FA80(v99, v101, &v228);
                v117 = v185;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v185, v95 + 4);
                v118 = v204;

                swift_bridgeObjectRelease(v101);
                *(_WORD *)(v95 + 12) = 2080;
                v119 = sub_1000058C8(&qword_100175358, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v121 = v223;
                v120 = v224;
                v122 = dispatch thunk of CustomStringConvertible.description.getter(v223, v119);
                v124 = v123;
                v230 = sub_10003FA80(v122, v123, &v228);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v117, v95 + 14);
                swift_bridgeObjectRelease(v124);
                v115 = *(void (**)(char *, uint64_t))(v225 + 8);
                v115(v120, v121);
                v125 = v94;
                v51 = v121;
                _os_log_impl((void *)&_mh_execute_header, v91, v125, "The createdAt for the payload protection key %s is %s", (uint8_t *)v95, 0x16u);
                swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v96, -1, -1);
                swift_slowDealloc(v95, -1, -1);

                v116 = v197;
                v47 = v220;
              }
              else
              {

                v115 = *(void (**)(char *, uint64_t))(v45 + 8);
                v115(v46, v51);

                v116 = v89;
              }
              v126 = v215;
              v127 = ((uint64_t (*)(char *, uint64_t))v215)(v116, v47);
              v128 = v205;
              v129 = v212;
              Date.init()(v127);
              v130 = v211;
              LOBYTE(v128) = Date.isAtLeast(days:after:)(v128, v211);
              v195 = v115;
              v131 = ((uint64_t (*)(char *, uint64_t))v115)(v129, v51);
              v132 = v206;
              v133 = v194;
              if ((v128 & 1) != 0)
              {
                v134 = defaultLogger()(v131);
                v135 = Logger.logObject.getter(v134);
                v136 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v135, v136))
                {
                  v137 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v137 = 0;
                  v138 = v135;
                  v139 = v136;
                  v140 = "The time to delete payload protection keys has elapsed. Will attempt to delete";
                  goto LABEL_50;
                }
LABEL_51:
                v153 = v133;
              }
              else
              {
                v141 = v191;
                v142 = defaultLogger()(v131);
                v143 = Logger.logObject.getter(v142);
                v144 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v143, v144))
                {
                  v145 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v145 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v143, v144, "The time to delete payload protection keys has not elapsed", v145, 2u);
                  v146 = v145;
                  v130 = v211;
                  swift_slowDealloc(v146, -1, -1);
                }

                v126(v141, v47);
                v147 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
                v148._countAndFlagsBits = 0xD00000000000002BLL;
                v148._object = v183;
                v149 = NSUserDefaults.internalBool(forKey:)(v148);

                if (!v149)
                {
                  v51 = v223;
                  v195(v130, v223);
                  swift_bridgeObjectRelease(v203);

LABEL_59:
                  v46 = v224;
                  v45 = v225;
                  v48 = v222;
                  goto LABEL_8;
                }
                v133 = v186;
                v151 = defaultLogger()(v150);
                v135 = Logger.logObject.getter(v151);
                v152 = static os_log_type_t.debug.getter();
                if (!os_log_type_enabled(v135, v152))
                  goto LABEL_51;
                v137 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v137 = 0;
                v138 = v135;
                v139 = v152;
                v140 = "Forcing to delete payload protection keys as the internal settings is enabled";
LABEL_50:
                _os_log_impl((void *)&_mh_execute_header, v138, v139, v140, v137, 2u);
                v153 = v133;
                swift_slowDealloc(v137, -1, -1);
              }
              v154 = v192;
              v155 = v201;

              v215(v153, v47);
              v43 = (uint64_t)v202;
              if (__OFADD__(*v202, 1))
              {
                __break(1u);
LABEL_63:
                if (v43 < 0)
                  v180 = v43;
                else
                  v180 = v43 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v43);
                v44 = _CocoaArrayWrapper.endIndex.getter(v180);
                result = swift_bridgeObjectRelease(v219);
                v43 = v219;
                goto LABEL_4;
              }
              v156 = v132;
              ++*v202;
              v228 = 778793072;
              v229 = 0xE400000000000000;
              v157 = v208;
              v158._countAndFlagsBits = v208;
              v159 = v203;
              v158._object = v203;
              String.append(_:)(v158);
              v160 = v229;
              v161 = v207;
              sub_100040514(v228, v229);
              if (v161)
              {
                swift_bridgeObjectRelease(v160);
                v207 = 0;
                (*(void (**)(char *, _QWORD, uint64_t))(v198 + 104))(v156, v190, v155);
                swift_errorRetain(v161);
                v167 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
                DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v161, v156, 0, v167, 0xD000000000000057, v188, 0xD000000000000038, v189, 396);
                v168 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
                v169 = v200;
                v170 = swift_allocError(v200, v168, 0, 0);
                v171 = v199;
                (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v172, v209, v169);
                v228 = 0;
                v229 = 0xE000000000000000;
                _StringGuts.grow(_:)(77);
                v173._countAndFlagsBits = 0xD00000000000004BLL;
                v173._object = v187;
                String.append(_:)(v173);
                v174._countAndFlagsBits = v208;
                v175 = v203;
                v174._object = v203;
                String.append(_:)(v174);
                v176 = swift_bridgeObjectRelease(v175);
                v177 = v228;
                v178 = v229;
                v179 = v193;
                defaultLogger()(v176);
                DIPRecordError(_:message:log:)(v170, v177, v178, v179);
                swift_bridgeObjectRelease(v178);
                swift_errorRelease(v161);

                v215(v179, v47);
                (*(void (**)(char *, uint64_t))(v171 + 8))(v209, v169);
                v51 = v223;
                v195(v211, v223);
                swift_errorRelease(v170);
              }
              else
              {
                v162 = swift_bridgeObjectRelease(v160);
                v163 = v193;
                v164 = defaultLogger()(v162);
                __chkstk_darwin(v164);
                v181[2] = v157;
                v181[3] = v159;
                Logger.cryptoParam(_:)(sub_100110408, v181);
                v215(v163, v47);
                v165 = v154;
                v166 = v204;
                objc_msgSend(v165, "removeCryptoKeysObject:", v204);
                sub_1000091F8();
                v207 = 0;
                v51 = v223;
                v195(v211, v223);
                swift_bridgeObjectRelease(v159);

              }
              goto LABEL_59;
            }
          }
          else
          {
            v86 = (uint64_t)v213;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v213, 1, 1, v51);
          }
          swift_bridgeObjectRelease(v81);
          v102 = sub_1000150E8(v86, &qword_1001755B0);
          v103 = v210;
          defaultLogger()(v102);
          v104 = v54;
          v105 = Logger.logObject.getter(v104);
          v106 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v105, v106))
          {
            v107 = swift_slowAlloc(12, -1);
            v108 = swift_slowAlloc(32, -1);
            v228 = v108;
            *(_DWORD *)v107 = v216;
            v109 = objc_msgSend(v104, "identifier");
            v110 = v215;
            if (v109)
            {
              v111 = v109;
              v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
              v114 = v113;

            }
            else
            {
              v112 = 0;
              v114 = 0xE000000000000000;
            }
            *(_QWORD *)(v107 + 4) = sub_10003FA80(v112, v114, &v228);

            swift_bridgeObjectRelease(v114);
            _os_log_impl((void *)&_mh_execute_header, v105, v106, "CreatedAt doesn't exist for payloadProtectionKey %s", (uint8_t *)v107, 0xCu);
            swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v108, -1, -1);
            swift_slowDealloc(v107, -1, -1);

            v47 = v220;
            v110(v210, v220);
            v51 = v223;
            goto LABEL_59;
          }

          v215(v103, v47);
          v48 = v222;
LABEL_8:
          v49 = v226;
LABEL_9:
          v50 = v227 + 1;
          v43 = v219;
          if (v217 == v227 + 1)
            return swift_bridgeObjectRelease(v43);
        }
      }
      __break(1u);
    }
    else
    {
      return swift_bridgeObjectRelease(v43);
    }
  }
  return result;
}

uint64_t sub_100110408()
{
  uint64_t v0;

  return sub_10010E5F0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100110410(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t *, uint64_t);

  v3 = *a1;
  *(_QWORD *)a2 = *a1;
  v4 = a2 + 8;
  v5 = a1 + 1;
  v6 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 32) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v6 - 8);
  swift_retain(v3);
  v8(v4, v5, v7);
  return a2;
}

uint64_t sub_100110480(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_100178844);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000935C;
  return sub_10010B888(a1, a2, v6, v2 + 24);
}

uint64_t sub_1001104F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_10010CA28(a1);
}

_QWORD *sub_100110508@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000518FC(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100110520()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  sub_10000CE40(v0 + 5);
  return swift_deallocObject(v0, 80, 7);
}

unint64_t sub_10011055C()
{
  uint64_t v0;

  return sub_10010D0EC(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_10011057C(uint64_t a1)
{
  sub_10010D90C(a1);
}

uint64_t sub_10011059C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10000CE40(v0 + 4);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001105D0(uint64_t a1)
{
  uint64_t v1;

  return sub_10010A5F0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t destroy for GarbageCollector(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 1;
  swift_release(*a1);
  return sub_10000CE40(v1);
}

uint64_t initializeWithCopy for GarbageCollector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *, uint64_t);

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v5 - 8);
  swift_retain(v3);
  v7(a1 + 8, v4, v6);
  return a1;
}

uint64_t *assignWithCopy for GarbageCollector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = a2 + 1;
  v3 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v5);
  sub_10000CEBC(a1 + 1, v4);
  return a1;
}

uint64_t *assignWithTake for GarbageCollector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  sub_10000CE40(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for GarbageCollector(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GarbageCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GarbageCollector()
{
  return &type metadata for GarbageCollector;
}

uint64_t sub_1001107E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 64) = a3;
  return swift_task_switch(sub_100110800, 0, 0);
}

uint64_t sub_100110800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  v0[6] = type metadata accessor for FeatureFlagProvider(0);
  v0[7] = &protocol witness table for FeatureFlagProvider;
  sub_1000258FC(v0 + 3);
  v2 = swift_retain(v1);
  FeatureFlagProvider.init()(v2);
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1001787F4);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_100110894;
  return sub_100105B20(0, 0);
}

uint64_t sub_100110894()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1001108E8, 0, 0);
}

uint64_t sub_1001108E8()
{
  uint64_t v0;

  sub_100110A54((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100110918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 16) = a3;
  v4 = sub_100008E84(&qword_100174E30);
  *(_QWORD *)(v3 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100110974, 0, 0);
}

uint64_t sub_100110974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  swift_retain(v1);
  v4(v2, 1, 1, v3);
  v5 = (_QWORD *)swift_allocObject(&unk_10016C730, 40, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  swift_retain(v1);
  v6 = sub_10008BC00(v2, (uint64_t)&unk_100177040, (uint64_t)v5);
  swift_release(v6);
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100110A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

_QWORD *sub_100110A54(_QWORD *a1)
{
  destroy for GarbageCollector(a1);
  return a1;
}

char *sub_100110A88(uint64_t a1)
{
  return sub_10011262C(a1, &enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.accountKeySigningKey(_:), 0xD000000000000021, 0x80000001001385B0, 73);
}

char *sub_100110AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a1;
  v1 = type metadata accessor for DIPError.Code(0);
  v25 = *(_QWORD *)(v1 - 8);
  v26 = v1;
  __chkstk_darwin(v1);
  v27 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType(0);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for COSEKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload(0);
  v14 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v31, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.keySigningKey(_:), v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v5, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.accountKeySigningKey(_:), v30);
  KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)(v13, v9, v5);
  v17 = v32;
  v18 = sub_10011163C((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v28);
  if (v17)
  {
    v19 = v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DIPError.Code.internalError(_:), v26);
    swift_errorRetain(v17);
    v20 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v21 = type metadata accessor for DIPError(0);
    v22 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v21, v22, 0, 0);
    v23 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000028, 0x8000000100138460, v17, v19, 0, v20, 0xD00000000000005BLL, 0x8000000100138330, 0xD000000000000020, 0x8000000100138490, 83);
    swift_willThrow(v23);
    swift_errorRelease(v17);
  }
  return v18;
}

uint64_t sub_100110DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t);
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v45 = type metadata accessor for DIPError.Code(0);
  v0 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v46 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload(0);
  v39 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008E84(&qword_100174B68);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for COSEKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  sub_100056DE4((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000150E8((uint64_t)v10, &qword_100174B68);
    v18 = *(void (**)(char *, _QWORD, uint64_t))(v0 + 104);
    v19 = v46;
    v20 = v45;
    v18(v46, enum case for DIPError.Code.idcsInvalidPublicKey(_:), v45);
    v21 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v24 = swift_allocError(v22, v23, 0, 0);
    v25 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000033, 0x8000000100138510, 0, v19, 0, v21, 0xD00000000000005BLL, 0x8000000100138330, 0xD000000000000020, 0x8000000100138550, 26);
    swift_willThrow(v25);
    v26 = v20;
  }
  else
  {
    v36 = v0;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v5, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.deviceEncryptionKey(_:), v38);
    v27 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v42);
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)(v15, v5, v27);
    v28 = v44;
    v29 = sub_10011163C((uint64_t)v7);
    if (!v28)
    {
      v24 = (uint64_t)v29;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v43);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return v24;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v43);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v18 = *(void (**)(char *, _QWORD, uint64_t))(v36 + 104);
    v24 = v28;
    v19 = v46;
    v26 = v45;
  }
  v18(v19, enum case for DIPError.Code.internalError(_:), v26);
  swift_errorRetain(v24);
  v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v31 = type metadata accessor for DIPError(0);
  v32 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v31, v32, 0, 0);
  v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000027, 0x8000000100138580, v24, v19, 0, v30, 0xD00000000000005BLL, 0x8000000100138330, 0xD000000000000020, 0x8000000100138550, 31);
  swift_willThrow(v33);
  swift_errorRelease(v24);
  return v24;
}

char *sub_1001112BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v1 = type metadata accessor for DIPError.Code(0);
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  __chkstk_darwin(v1);
  v36 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType(0);
  v30 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose(0);
  v4 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for COSEKey(0);
  v29 = *(_QWORD *)(v31 - 8);
  v11 = __chkstk_darwin(v31);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v25 - v14;
  sub_1000577B4((uint64_t)&v25 - v14);
  if (v0)
  {
    v24 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for DIPError.Code.internalError(_:), v35);
    swift_errorRetain(v0);
    v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x80000001001384C0, v0, v24, 0, v19, 0xD00000000000005BLL, 0x8000000100138330, 0xD00000000000001BLL, 0x80000001001384F0, 53);
    swift_willThrow(v22);
    swift_errorRelease(v0);
  }
  else
  {
    v26 = v8;
    v27 = v7;
    v16 = v29;
    v17 = v31;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v13, v15, v31);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.presentmentKey(_:), v28);
    v18 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v33);
    KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)(v13, v6, v18);
    v24 = sub_10011163C((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v17);
  }
  return v24;
}

char *sub_10011163C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (**v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  uint64_t (**v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD v62[4];
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t (**v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  _QWORD v92[2];

  v89 = a1;
  v72 = type metadata accessor for DIPError.Code(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v74 = (char *)v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008E84(&qword_100176828);
  __chkstk_darwin(v73);
  v75 = (char *)v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for SHA256(0);
  v76 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (char *)v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for SHA256Digest(0);
  v80 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v77 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for COSE_Sign1.AlgorithmIdentifier(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v85 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RFC8152SigStructure(0);
  v82 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v62 - v13;
  v15 = sub_100008E84(&qword_1001767F0);
  v16 = *(uint64_t (***)(char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  v88 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CBOREncoder(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v20 = CBOREncoder.init()(v19);
  v21 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload(0);
  v22 = sub_1000058C8(&qword_100178860, (uint64_t (*)(uint64_t))&type metadata accessor for KeyAuthorizationCOSE_Sign1Payload, (uint64_t)&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload);
  v23 = v90;
  v24 = dispatch thunk of CBOREncoder.encode<A>(_:)(v89, v21, v22);
  if (v23)
  {
    v26 = v20;
  }
  else
  {
    v67 = v16;
    v68 = v15;
    v69 = v9;
    v70 = v14;
    v65 = v12;
    v89 = v8;
    v90 = v20;
    v92[0] = v24;
    v92[1] = v25;
    v27 = v25;
    v28 = v24;
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v29 = sub_100005A38(v28, v27);
    v30 = CBOREncoder.init()(v29);
    v31 = sub_10006A238();
    v32 = sub_10006A27C();
    v33 = v88;
    CBOREncodedCBOR.init(value:tag:encoder:)(v92, 1, v30, &type metadata for Data, v31, v32);
    v63 = v28;
    v64 = v27;
    v34 = v68;
    v66 = 0;
    v35 = CBOREncodedCBOR.dataValue.getter(v68);
    v37 = v36;
    v38 = v67[1](v33, v34);
    v39 = v70;
    v40 = defaultLogger()(v38);
    __chkstk_darwin(v40);
    v60 = v35;
    v61 = (char *)v37;
    Logger.cryptoParam(_:)(sub_100112944, &v59);
    v69 = *(_QWORD *)(v69 + 8);
    ((void (*)(char *, uint64_t))v69)(v39, v89);
    v41 = sub_100008E84(&qword_100176818);
    inited = swift_initStackObject(v41, v91);
    *(_OWORD *)(inited + 16) = xmmword_10012A6D0;
    *(_QWORD *)(inited + 32) = static RFC8152SigStructure.protectedHeaderAlg.getter();
    v43 = v83;
    v44 = *(uint64_t (***)(char *, uint64_t))(v83 + 104);
    v45 = v85;
    LODWORD(v68) = enum case for COSE_Sign1.AlgorithmIdentifier.ES256(_:);
    v46 = v84;
    v47 = ((uint64_t (*)(char *))v44)(v85);
    v48 = COSE_Sign1.AlgorithmIdentifier.rawValue.getter(v47);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v46);
    *(_QWORD *)(inited + 40) = v48;
    v49 = sub_10004031C(inited);
    swift_setDeallocating(inited);
    sub_100005A38(v35, v37);
    v14 = v86;
    RFC8152SigStructure.init(protected:payload:)(v49, v35, v37);
    v50 = sub_1000058C8(&qword_100176820, (uint64_t (*)(uint64_t))&type metadata accessor for RFC8152SigStructure, (uint64_t)&protocol conformance descriptor for RFC8152SigStructure);
    v51 = v87;
    v52 = v90;
    v53 = v66;
    v54 = dispatch thunk of CBOREncoder.encode<A>(_:)(v14, v87, v50);
    if (!v53)
    {
      v57 = v54;
      v67 = v44;
      v62[2] = v35;
      v62[3] = v37;
      v66 = 0;
      v88 = v55;
      v58 = defaultLogger()(v54);
      __chkstk_darwin(v58);
      v83 = v57;
      v60 = v57;
      v61 = v88;
      Logger.cryptoParam(_:)(sub_100112978, &v59);
      ((void (*)(char *, uint64_t))v69)(v39, v89);
      sub_1000058C8(&qword_100174850, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
      dispatch thunk of HashFunction.init()(v81);
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v82 + 8))(v14, v51);
    sub_100005AB0(v63, v64);
    sub_100005AB0(v35, v37);
    v26 = v52;
  }
  swift_release(v26);
  return v14;
}

char *sub_1001125F4(uint64_t a1)
{
  return sub_10011262C(a1, (unsigned int *)&enum case for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.keySigningKey(_:), 0xD00000000000001ALL, 0x8000000100138390, 63);
}

char *sub_10011262C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v32 = a5;
  v33 = a4;
  v34 = a3;
  v39 = a2;
  v38 = a1;
  v5 = type metadata accessor for DIPError.Code(0);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  __chkstk_darwin(v5);
  v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType(0);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for COSEKey(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload(0);
  v18 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v38, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *v39, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v9, enum case for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.keyAuthorizationKey(_:), v37);
  KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)(v17, v13, v9);
  v21 = v40;
  v22 = sub_10011163C((uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v35);
  if (v21)
  {
    v23 = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DIPError.Code.internalError(_:), v30);
    swift_errorRetain(v21);
    v24 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000021, 0x8000000100138300, v21, v23, 0, v24, 0xD00000000000005BLL, 0x8000000100138330, v34, v33, v32);
    swift_willThrow(v27);
    swift_errorRelease(v21);
  }
  return v22;
}

uint64_t sub_100112944()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 26, 0xD000000000000018);
}

uint64_t sub_100112978()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 33, 0xD00000000000001FLL);
}

uint64_t sub_1001129AC()
{
  uint64_t v0;

  return sub_1000695B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 27, 0xD000000000000019);
}

unint64_t sub_1001129E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100178868;
  if (!qword_100178868)
  {
    v1 = sub_100016404(&qword_100176828);
    sub_1000058C8(&qword_100178870, (uint64_t (*)(uint64_t))&type metadata accessor for COSE_Sign1, (uint64_t)&protocol conformance descriptor for COSE_Sign1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100178868);
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialKeyAuthorizer()
{
  return &type metadata for CredentialKeyAuthorizer;
}

uint64_t sub_100112A6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16[3];
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  if (qword_1001743C0 != -1)
    swift_once(&qword_1001743C0, sub_10001647C);
  v4 = *(os_unfair_lock_s **)(qword_100178CB0 + 16);
  v5 = (uint64_t *)&v4[4];
  v6 = v4 + 18;
  os_unfair_lock_lock(v4 + 18);
  sub_1000164DC(v5, v16);
  os_unfair_lock_unlock(v6);
  v7 = v16[0];
  v8 = v16[1];
  v10 = v16[2];
  v9 = v17;
  v11 = v18;
  v12 = v19;
  v13 = v20;
  sub_100016BAC((uint64_t)v17, v18);
  swift_release(v7);
  sub_100008FC0(v8, v10);
  sub_100008FC0((uint64_t)v9, v11);
  v14 = sub_100008FC0(v12, v13);
  if (v9)
  {
    v9(v14);
    return sub_100008FC0((uint64_t)v9, v11);
  }
  else
  {
    swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    result = AppleIDVManager.init()();
    a1[3] = v2;
    a1[4] = (uint64_t)&protocol witness table for AppleIDVManager;
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PresentmentKeySelectionProvider()
{
  return objc_opt_self(_TtC7idcredd31PresentmentKeySelectionProvider);
}

unint64_t sub_100112BD8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100112C60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  NSString v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;

  v46 = type metadata accessor for DIPError.Code(0);
  v43 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000E618(a4, a5);
  if (v7)
  {
    v17 = v7;
    v18 = v46;
    v19 = v42;
    v20 = v43;
LABEL_3:
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v19, enum case for DIPError.Code.internalError(_:), v18);
    swift_errorRetain(v17);
    v21 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v22 = type metadata accessor for DIPError(0);
    v23 = sub_10000745C();
    swift_allocError(v22, v23, 0, 0);
    v24 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v17, v19, 0, v21, 0xD000000000000067, 0x8000000100138610, 0xD000000000000063, 0x8000000100138680, 129);
    swift_willThrow(v24);
    swift_errorRelease(v17);
    return;
  }
  v25 = (void *)v16;
  if (!v16)
  {
    v44 = 0;
    v45 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v45);
    v44 = 0xD00000000000001FLL;
    v45 = (void *)0x80000001001386F0;
    v31._countAndFlagsBits = a4;
    v31._object = a5;
    String.append(_:)(v31);
    v32 = v44;
    v33 = v45;
    v19 = v42;
    v20 = v43;
    v18 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for DIPError.Code.invalidStoredData(_:), v46);
    v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_10000745C();
    v17 = swift_allocError(v35, v36, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v32, v33, 0, v19, 0, v34, 0xD000000000000067, 0x8000000100138610, 0xD000000000000063, 0x8000000100138680, 107);
    swift_willThrow(v37);
    goto LABEL_3;
  }
  if (a7)
  {
    v26 = (void *)v16;
    v44 = a2;
    v45 = a3;
    swift_bridgeObjectRetain(a3);
    v27._countAndFlagsBits = 11565;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = a6;
    v28._object = a7;
    String.append(_:)(v28);
    v29 = v45;
    v30 = sub_100039C4C(v44, v45);
    v38 = (id)v30;
    if (v30)
    {
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v39 = type metadata accessor for StoredRelyingParty(0);
      v38 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v39)), "initWithContext:", *(_QWORD *)(a1 + 16));
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      objc_msgSend(v38, "setRelyingPartyIdentifier:", v40);

    }
    objc_msgSend(v38, "addPresentmentKeysObject:", v26);

    v25 = v26;
  }
  v41 = (char *)objc_msgSend(v25, "timesUsed");
  if (__OFADD__(v41, 1))
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v25, "setTimesUsed:", v41 + 1);

  }
}

_QWORD *sub_100113034(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  unint64_t object;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, unint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t countAndFlagsBits;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::String v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  double v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  NSObject *v81;
  _QWORD *v82;
  uint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  char *v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  unint64_t v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  Swift::String v126;
  uint64_t v127;
  unint64_t v128;
  id v129;
  void *v130;
  unint64_t v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  id v136;
  id v137;
  id v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint64_t j;
  uint64_t v147;
  uint64_t v148;
  id v149;
  void *v150;
  id v151;
  void (*v152)(uint64_t, unint64_t);
  unint64_t v153;
  id v154;
  void *v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  id v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(char *, unint64_t);
  _OWORD __s2[2];
  __int128 __s1;
  __int128 v200;

  v191 = a4;
  v183 = a1;
  object = type metadata accessor for Logger(0);
  v11 = *(_QWORD **)(object - 8);
  v12 = __chkstk_darwin(object);
  v182 = (char *)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v186 = (char *)&v176 - v15;
  v16 = __chkstk_darwin(v14);
  v181 = (uint64_t)&v176 - v17;
  v18 = __chkstk_darwin(v16);
  v187 = (char *)&v176 - v19;
  v20 = __chkstk_darwin(v18);
  v184 = (unint64_t)&v176 - v21;
  v22 = __chkstk_darwin(v20);
  v179 = (char *)&v176 - v23;
  v24 = __chkstk_darwin(v22);
  v185 = (char *)&v176 - v25;
  v26 = __chkstk_darwin(v24);
  v180 = (char *)&v176 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v176 - v29;
  defaultLogger()(v28);
  swift_bridgeObjectRetain(a5);
  v31 = a6;
  sub_10000B178(a2, a3);
  v32 = v31;
  swift_bridgeObjectRetain(a5);
  v33 = sub_10000B178(a2, a3);
  v34 = Logger.logObject.getter(v33);
  LODWORD(v189) = static os_log_type_t.debug.getter();
  v35 = os_log_type_enabled(v34, (os_log_type_t)v189);
  v194 = v32;
  v195 = a3;
  v197 = (uint64_t (*)(char *, unint64_t))a2;
  v192 = object;
  v193 = a5;
  if (!v35)
  {
    swift_bridgeObjectRelease_n(a5, 2);

    sub_10000B164(a2, a3);
    sub_10000B164(a2, a3);

    v43 = (void (*)(char *, unint64_t))v11[1];
    v43(v30, object);
    v44 = v196;
    if (a3 >> 60 == 15)
      goto LABEL_18;
LABEL_5:
    v45 = v195;
    sub_100005A38(a2, v195);
    v46 = (uint64_t)sub_1000C5D54();
    if (v44)
    {
      sub_10000B164(a2, v45);
      return v11;
    }
    v77 = v46;
    v188 = v11;
    if ((unint64_t)v46 >> 62)
    {
      if (v46 < 0)
        v116 = v46;
      else
        v116 = v46 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v46);
      v78 = _CocoaArrayWrapper.endIndex.getter(v116);
      swift_bridgeObjectRelease(v77);
      v196 = 0;
      if (v78)
      {
LABEL_27:
        v191 = v45 >> 62;
        v194 = (id)(v77 & 0xC000000000000001);
        v182 = (char *)HIDWORD(a2);
        v79 = __OFSUB__(HIDWORD(a2), (_DWORD)a2);
        LODWORD(v186) = v79;
        v184 = HIDWORD(a2) - (int)a2;
        v190 = BYTE6(v45);
        v187 = (char *)(v45 & 0x3FFFFFFFFFFFFFFFLL);
        v183 = (int)a2;
        v181 = a2 >> 32;
        v179 = (char *)((a2 >> 32) - (int)a2);
        v80 = 4;
        v189 = v77;
        v193 = (void *)v78;
        while (1)
        {
          v81 = (v80 - 4);
          v82 = v194
              ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v80 - 4, v77)
              : *(id *)(v77 + 8 * v80);
          v11 = v82;
          v83 = v80 - 3;
          if (__OFADD__(v81, 1))
            break;
          v84 = objc_msgSend(v82, "publicKeyIdentifier");
          if (v84)
          {
            v85 = v84;
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v84);
            v87 = v86;

            __asm { BR              X8 }
          }
          sub_10000B178(a2, v45);
          sub_10000B164(0, 0xF000000000000000);
          sub_10000B164(a2, v45);

          ++v80;
          v78 = (uint64_t)v193;
          if ((void *)v83 == v193)
            goto LABEL_80;
        }
        __break(1u);
        goto LABEL_74;
      }
    }
    else
    {
      v78 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      v196 = 0;
      if (v78)
        goto LABEL_27;
    }
LABEL_80:
    v117 = swift_bridgeObjectRelease(v77);
    v118 = v185;
    defaultLogger()(v117);
    sub_10000B178(a2, v45);
    v119 = sub_10000B178(a2, v45);
    v120 = Logger.logObject.getter(v119);
    v121 = a2;
    v122 = v45;
    v123 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v120, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = swift_slowAlloc(32, -1);
      *(_QWORD *)&__s1 = v125;
      *(_DWORD *)v124 = 136315138;
      v126 = Data.base16EncodedString()();
      *(_QWORD *)&__s2[0] = sub_10003FA80(v126._countAndFlagsBits, (unint64_t)v126._object, (uint64_t *)&__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v124 + 4);
      swift_bridgeObjectRelease(v126._object);
      sub_10000B164(v121, v122);
      sub_10000B164(v121, v122);
      _os_log_impl((void *)&_mh_execute_header, v120, v123, "No key was found with matching public key identifier %s", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);

      sub_10000B164(v121, v122);
      ((void (*)(char *, unint64_t))v188[1])(v185, v192);
    }
    else
    {
      sub_10000B164(v121, v122);
      sub_10000B164(v121, v122);
      sub_10000B164(v121, v122);

      ((void (*)(char *, unint64_t))v188[1])(v118, v192);
    }
    return 0;
  }
  v178 = v30;
  v190 = a3 >> 60;
  v188 = v11;
  v36 = swift_slowAlloc(32, -1);
  v37 = swift_slowAlloc(96, -1);
  *(_QWORD *)&__s1 = v37;
  *(_DWORD *)v36 = 136315650;
  v38 = objc_msgSend(v32, "credentialIdentifier");
  v177 = v37;
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0xE000000000000000;
  }
  countAndFlagsBits = 0x3E6C696E3CLL;
  *(_QWORD *)&__s2[0] = sub_10003FA80(v40, v42, (uint64_t *)&__s1);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v36 + 4);

  swift_bridgeObjectRelease(v42);
  *(_WORD *)(v36 + 12) = 2080;
  v48 = v193;
  if (v193)
    v49 = v191;
  else
    v49 = 0x3E6C696E3CLL;
  object = 0xE500000000000000;
  if (v193)
    v50 = (unint64_t)v193;
  else
    v50 = 0xE500000000000000;
  swift_bridgeObjectRetain(v193);
  *(_QWORD *)&__s2[0] = sub_10003FA80(v49, v50, (uint64_t *)&__s1);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v36 + 14);
  swift_bridgeObjectRelease_n(v48, 2);
  swift_bridgeObjectRelease(v50);
  *(_WORD *)(v36 + 22) = 2080;
  if (v190 <= 0xE)
  {
    v52 = (uint64_t)v197;
    v51 = v195;
    v53 = Data.base16EncodedString()();
    countAndFlagsBits = v53._countAndFlagsBits;
    object = (unint64_t)v53._object;
  }
  else
  {
    v51 = v195;
    v52 = (uint64_t)v197;
  }
  v54 = v34;
  *(_QWORD *)&__s2[0] = sub_10003FA80(countAndFlagsBits, object, (uint64_t *)&__s1);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v36 + 24);
  swift_bridgeObjectRelease(object);
  sub_10000B164(v52, v51);
  sub_10000B164(v52, v51);
  _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v189, "PresentmentKeySelectionProvider selectPresentmentKey credential = %s, relyingPartyIdentifier = %s, requiredPublicKeyIdentifier = %s", (uint8_t *)v36, 0x20u);
  v55 = v177;
  swift_arrayDestroy(v177, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v55, -1, -1);
  swift_slowDealloc(v36, -1, -1);

  v11 = v188;
  v43 = (void (*)(char *, unint64_t))v188[1];
  v43(v178, v192);
  v44 = v196;
  a2 = v52;
  if (v190 <= 0xE)
    goto LABEL_5;
LABEL_18:
  v56 = v193;
  if (!v193)
    goto LABEL_42;
  *(_QWORD *)&v57 = swift_bridgeObjectRetain(v193).n128_u64[0];
  v58 = objc_msgSend(v194, "credentialIdentifier", v57);
  if (!v58)
  {
    swift_bridgeObjectRelease(v56);
    goto LABEL_42;
  }
  v59 = v58;
  v197 = (uint64_t (*)(char *, unint64_t))v43;
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v62 = v61;

  *(_QWORD *)&__s1 = v60;
  *((_QWORD *)&__s1 + 1) = v62;
  swift_bridgeObjectRetain(v62);
  v63._countAndFlagsBits = 11565;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  v64._countAndFlagsBits = v191;
  v64._object = v56;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v62);
  v65 = (Swift::String)__s1;
  v66 = sub_100039C4C(__s1, *((void **)&__s1 + 1));
  if (!v44)
  {
    v71 = (void *)v66;
    v196 = 0;
    v70 = swift_bridgeObjectRelease(v65._object);
    if (!v71)
      goto LABEL_22;
    v45 = v71;
    v98 = objc_msgSend((id)v45, "presentmentKeys");
    object = v184;
    if (v98)
    {
      v99 = v98;
      v100 = objc_msgSend(v98, "anyObject");

      if (v100)
      {
        _bridgeAnyObjectToAny(_:)(__s2);
        swift_unknownObjectRelease(v100, v101);
      }
      else
      {
        memset(__s2, 0, sizeof(__s2));
      }
      sub_100039AD8((uint64_t)__s2, (uint64_t)&__s1);
      if (*((_QWORD *)&v200 + 1))
      {
        v102 = type metadata accessor for StoredCryptoKey(0);
        a2 = (uint64_t)&type metadata for Any;
        if ((swift_dynamicCast(__s2, &__s1, (char *)&type metadata for Any + 8, v102, 6) & 1) == 0)
        {

          goto LABEL_23;
        }
        v103 = *(void **)&__s2[0];
        v104 = objc_msgSend(*(id *)&__s2[0], "payload");

        if (!v104)
        {

          goto LABEL_23;
        }
        v106 = v179;
        defaultLogger()(v105);
        v107 = v103;
        swift_bridgeObjectRetain(v56);
        v11 = v107;
        v81 = Logger.logObject.getter(v11);
        LOBYTE(v83) = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v81, (os_log_type_t)v83))
        {

          swift_bridgeObjectRelease_n(v56, 2);
          v113 = v106;
          goto LABEL_139;
        }
        v78 = swift_slowAlloc(22, -1);
        v195 = swift_slowAlloc(64, -1);
        *(_QWORD *)&__s1 = v195;
        *(_DWORD *)v78 = 136315394;
        v108 = objc_msgSend(v11, "identifier");
        if (v108)
        {
          v109 = v108;
          v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          v112 = v111;

LABEL_75:
          *(_QWORD *)&__s2[0] = sub_10003FA80(v110, v112, (uint64_t *)&__s1);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v78 + 4);

          swift_bridgeObjectRelease(v112);
          *(_WORD *)(v78 + 12) = 2080;
          v114 = (unint64_t)v193;
          swift_bridgeObjectRetain(v193);
          *(_QWORD *)&__s2[0] = sub_10003FA80(v191, v114, (uint64_t *)&__s1);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v78 + 14);
          swift_bridgeObjectRelease_n(v114, 3);
          _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v83, "Found key %s with relying party identifier %s", (uint8_t *)v78, 0x16u);
          v115 = v195;
          swift_arrayDestroy(v195, 2, a2 + 8);
          swift_slowDealloc(v115, -1, -1);
          swift_slowDealloc(v78, -1, -1);

          v113 = v179;
          goto LABEL_139;
        }
LABEL_74:
        v110 = 0x3E6C696E3CLL;
        v112 = 0xE500000000000000;
        goto LABEL_75;
      }
    }
    else
    {
      __s1 = 0u;
      v200 = 0u;
    }

    v70 = sub_1000CD76C((uint64_t)&__s1);
    goto LABEL_23;
  }
  *(_QWORD *)&__s1 = 0;
  *((_QWORD *)&__s1 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(*((_QWORD *)&__s1 + 1));
  *(_QWORD *)&__s1 = 0xD00000000000001DLL;
  *((_QWORD *)&__s1 + 1) = 0x800000010012FE70;
  String.append(_:)(v65);
  v67 = swift_bridgeObjectRelease(v65._object);
  v68 = __s1;
  v69 = v182;
  defaultLogger()(v67);
  DIPRecordError(_:message:log:)(v44, v68, *((_QWORD *)&v68 + 1), v69);
  swift_bridgeObjectRelease(*((_QWORD *)&v68 + 1));
  swift_errorRelease(v44);
  v70 = v197(v69, v192);
  v71 = 0;
  v196 = 0;
LABEL_22:
  object = v184;
LABEL_23:
  defaultLogger()(v70);
  swift_bridgeObjectRetain(v56);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(12, -1);
    a2 = object;
    object = swift_slowAlloc(32, -1);
    *(_QWORD *)&__s1 = object;
    *(_DWORD *)v75 = 136315138;
    v11 = v75 + 12;
    swift_bridgeObjectRetain(v56);
    *(_QWORD *)&__s2[0] = sub_10003FA80(v191, (unint64_t)v56, (uint64_t *)&__s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v75 + 4);
    swift_bridgeObjectRelease_n(v56, 3);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "No existing RP found for relying party identifier %s", v75, 0xCu);
    swift_arrayDestroy(object, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(object, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    v76 = a2;
  }
  else
  {

    swift_bridgeObjectRelease_n(v56, 2);
    v76 = object;
  }
  v43 = (void (*)(char *, unint64_t))v197;
  v197((char *)v76, v192);
  v44 = v196;
LABEL_42:
  v88 = (uint64_t)sub_1000C5D54();
  if (v44)
    return v11;
  v90 = v88;
  v197 = (uint64_t (*)(char *, unint64_t))v43;
  *(_QWORD *)&__s1 = _swiftEmptyArrayStorage;
  if ((unint64_t)v88 >> 62)
  {
    if (v88 < 0)
      v127 = v88;
    else
      v127 = v88 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v88);
    v91 = _CocoaArrayWrapper.endIndex.getter(v127);
    swift_bridgeObjectRelease(v90);
    v196 = 0;
    if (v91)
    {
LABEL_46:
      if (v91 < 1)
      {
        __break(1u);
        goto LABEL_148;
      }
      for (i = 0; i != v91; ++i)
      {
        if ((v90 & 0xC000000000000001) != 0)
          v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v90);
        else
          v95 = *(id *)(v90 + 8 * i + 32);
        object = (unint64_t)v95;
        v96 = objc_msgSend(v95, "payload");

        if (v96)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v97);
          v93 = *(_QWORD *)(__s1 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v93);
          v94 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, object);
          specialized ContiguousArray._endMutation()(v94);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease(v90);
      v90 = __s1;
      a2 = (uint64_t)&selRef_generateDeviceEncryptionKeyForCredential_completion_;
      if ((__s1 & 0x8000000000000000) != 0)
        goto LABEL_110;
      goto LABEL_89;
    }
  }
  else
  {
    v91 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10);
    v196 = 0;
    if (v91)
      goto LABEL_46;
  }
  swift_bridgeObjectRelease(v90);
  v90 = (uint64_t)_swiftEmptyArrayStorage;
  a2 = (uint64_t)&selRef_generateDeviceEncryptionKeyForCredential_completion_;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_110;
LABEL_89:
  if ((v90 & 0x4000000000000000) != 0)
  {
LABEL_110:
    v141 = swift_retain(v90);
    v128 = _CocoaArrayWrapper.endIndex.getter(v141);
    v91 = v128;
    if (!v128)
      goto LABEL_111;
    goto LABEL_91;
  }
  v91 = *(_QWORD *)(v90 + 16);
  v128 = swift_retain(v90);
  if (!v91)
  {
LABEL_111:
    v133 = swift_release(v90);
    v132 = 0;
    goto LABEL_112;
  }
LABEL_91:
  v11 = (_QWORD *)(v90 & 0xC000000000000001);
  if ((v90 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v90 + 16))
    {
      __break(1u);
      goto LABEL_150;
    }
    v129 = *(id *)(v90 + 32);
    goto LABEL_94;
  }
LABEL_148:
  v129 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v90);
LABEL_94:
  v130 = v129;
  v131 = v91 - 1;
  if (v91 != 1)
  {
    if (v91 < 2)
    {
      __break(1u);
      JUMPOUT(0x100115030);
    }
    if (!v11)
    {
      v134 = *(_QWORD *)(v90 + 16);
      if (v134 < 2 || v131 >= v134)
        __break(1u);
    }
    v135 = 0;
    do
    {
      if (v11)
        v136 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v135 + 1, v90);
      else
        v136 = *(id *)(v90 + 8 * v135 + 40);
      v137 = v136;
      v138 = objc_msgSend(v136, *(SEL *)(a2 + 640));
      v139 = objc_msgSend(v130, *(SEL *)(a2 + 640));
      if ((uint64_t)v138 >= (uint64_t)v139)
        v140 = v137;
      else
        v140 = v130;
      if ((uint64_t)v138 < (uint64_t)v139)
        v130 = v137;

      ++v135;
    }
    while (v131 != v135);
  }
  swift_release(v90);
  v132 = objc_msgSend(v130, *(SEL *)(a2 + 640));

LABEL_112:
  v142 = defaultLogger()(v133);
  v143 = Logger.logObject.getter(v142);
  v144 = static os_log_type_t.debug.getter();
  object = v144;
  if (os_log_type_enabled(v143, v144))
  {
    v145 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v145 = 134217984;
    *(_QWORD *)&__s1 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s1, (char *)&__s1 + 8, v145 + 4);
    _os_log_impl((void *)&_mh_execute_header, v143, (os_log_type_t)object, "Minimum key times used is %lld", v145, 0xCu);
    swift_slowDealloc(v145, -1, -1);
  }

  v128 = v197(v187, v192);
  *(_QWORD *)&__s1 = _swiftEmptyArrayStorage;
  if (v91)
  {
    if (v91 >= 1)
    {
      for (j = 0; j != v91; ++j)
      {
        if ((v90 & 0xC000000000000001) != 0)
          v149 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v90);
        else
          v149 = *(id *)(v90 + 8 * j + 32);
        v150 = v149;
        v151 = objc_msgSend(v149, *(SEL *)(a2 + 640));
        if (v151 == v132)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v151);
          v147 = *(_QWORD *)(__s1 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v147);
          v148 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v147, v150);
          specialized ContiguousArray._endMutation()(v148);
        }
        else
        {

        }
      }
      swift_release(v90);
      v90 = __s1;
      goto LABEL_126;
    }
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  swift_release(v90);
  v90 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_126:
  v152 = (void (*)(uint64_t, unint64_t))v197;
  object = (unint64_t)v186;
  if (v90 < 0 || (v90 & 0x4000000000000000) != 0)
  {
    v166 = swift_retain(v90);
    v167 = _CocoaArrayWrapper.endIndex.getter(v166);
    swift_release(v90);
    if (v167)
    {
      swift_bridgeObjectRetain(v90);
      v153 = _CocoaArrayWrapper.endIndex.getter(v168);
      swift_release(v90);
      if ((v153 & 0x8000000000000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x10011507CLL);
      }
      object = (unint64_t)v186;
      if (v153)
      {
LABEL_129:
        v128 = sub_100112BD8(v153);
        if ((v90 & 0xC000000000000001) == 0)
        {
          if ((v128 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v128 < *(_QWORD *)(v90 + 16))
          {
            v154 = *(id *)(v90 + 8 * v128 + 32);
LABEL_133:
            v155 = v154;
            v156 = swift_release(v90);
            defaultLogger()(v156);
            v11 = v155;
            v157 = Logger.logObject.getter(v11);
            v158 = static os_log_type_t.debug.getter();
            if (!os_log_type_enabled(v157, v158))
            {

              v197((char *)object, v192);
              return v11;
            }
            v159 = (uint8_t *)swift_slowAlloc(12, -1);
            v160 = swift_slowAlloc(32, -1);
            *(_QWORD *)&__s1 = v160;
            *(_DWORD *)v159 = 136315138;
            v161 = objc_msgSend(v11, "identifier");
            if (v161)
            {
              v162 = v161;
              v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
              v165 = v164;

            }
            else
            {
              v163 = 0x3E6C696E3CLL;
              v165 = 0xE500000000000000;
            }
            *(_QWORD *)&__s2[0] = sub_10003FA80(v163, v165, (uint64_t *)&__s1);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(__s2, (char *)__s2 + 8, v159 + 4);

            swift_bridgeObjectRelease(v165);
            _os_log_impl((void *)&_mh_execute_header, v157, v158, "Selected random key %s", v159, 0xCu);
            swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v160, -1, -1);
            swift_slowDealloc(v159, -1, -1);

            v113 = v186;
LABEL_139:
            v197(v113, v192);
            return v11;
          }
          __break(1u);
          JUMPOUT(0x100115024);
        }
LABEL_151:
        v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v128, v90);
        goto LABEL_133;
      }
      __break(1u);
    }
  }
  else
  {
    v153 = *(_QWORD *)(v90 + 16);
    if (v153)
      goto LABEL_129;
  }
  v169 = swift_release(v90);
  v170 = v181;
  v171 = defaultLogger()(v169);
  v172 = Logger.logObject.getter(v171);
  v173 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v172, v173))
  {
    v174 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v174 = 0;
    _os_log_impl((void *)&_mh_execute_header, v172, v173, "No keys have minimum times used; this should not happen",
      v174,
      2u);
    v175 = v174;
    v152 = (void (*)(uint64_t, unint64_t))v197;
    swift_slowDealloc(v175, -1, -1);
  }

  v152(v170, v192);
  return 0;
}

uint64_t sub_1001150EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v3[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v10);
  v3[14] = swift_task_alloc(v10);
  v3[15] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_100178944);
  v3[16] = v11;
  *v11 = v3;
  v11[1] = sub_1001151BC;
  return sub_100116C2C(a1, a2);
}

uint64_t sub_1001151BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100115F18;
  else
    v5 = sub_100115228;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100115228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];

  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 48);
  if (v2)
  {
    defaultLogger()(a1);
    v4 = swift_bridgeObjectRetain_n(v3, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v1 + 120);
    v9 = *(_QWORD *)(v1 + 88);
    v10 = *(_QWORD *)(v1 + 96);
    v11 = *(_QWORD *)(v1 + 48);
    if (v7)
    {
      v40 = *(_QWORD *)(v1 + 40);
      v43 = *(_QWORD *)(v1 + 88);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = v8;
      v13 = swift_slowAlloc(32, -1);
      v45[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)(v1 + 32) = sub_10003FA80(v40, v11, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v12 + 4);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Credential %s already has a ksk", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v41, v43);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 48), 2);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    v26 = *(_QWORD *)(v1 + 144);
    sub_10005622C(v2);
    v28 = v27;
    v29 = v26;
    swift_release(v2);
    v30 = *(_QWORD *)(v1 + 112);
    v31 = *(_QWORD *)(v1 + 120);
    v32 = *(_QWORD *)(v1 + 104);
    v33 = *(_QWORD *)(v1 + 80);
    if (v26)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(*(_QWORD *)(v1 + 80), enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 64));
      swift_errorRetain(v26);
      v34 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v35 = type metadata accessor for DIPError(0);
      v36 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v35, v36, 0, 0);
      v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v29, v33, 0, v34, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
      swift_willThrow(v37);
      swift_errorRelease(v29);
      swift_task_dealloc(v31);
      swift_task_dealloc(v30);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    else
    {
      swift_task_dealloc(*(_QWORD *)(v1 + 120));
      swift_task_dealloc(v30);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v28);
    }
  }
  else
  {
    defaultLogger()(a1);
    v14 = swift_bridgeObjectRetain_n(v3, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v1 + 112);
    v19 = *(_QWORD *)(v1 + 88);
    v20 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 48);
    if (v17)
    {
      v44 = *(_QWORD *)(v1 + 88);
      v22 = *(_QWORD *)(v1 + 40);
      v42 = *(_QWORD *)(v1 + 112);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v45[0] = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v1 + 24) = sub_10003FA80(v22, v21, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v23 + 4);
      swift_bridgeObjectRelease_n(v21, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Generating new ksk for credential %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v25(v42, v44);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 48), 2);

      v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v25(v18, v19);
    }
    *(_QWORD *)(v1 + 152) = v25;
    v39 = (_QWORD *)swift_task_alloc(dword_1001787EC);
    *(_QWORD *)(v1 + 160) = v39;
    *v39 = v1;
    v39[1] = sub_100115714;
    return sub_100102B18();
  }
}

uint64_t sub_100115714(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[20];
  v5 = *v2;
  v5[21] = a1;
  v5[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_100116068, 0, 0);
  v7 = (uint64_t **)swift_task_alloc(dword_10017894C);
  v5[23] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_1001157B8;
  return sub_100117520(a1, v5[5], v5[6]);
}

uint64_t sub_1001157B8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001161B8;
  }
  else
  {
    *(_BYTE *)(v4 + 224) = a1 & 1;
    v6 = sub_100115830;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100115830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  if (*(_BYTE *)(v0 + 224) == 1)
  {
    v1 = *(_QWORD *)(v0 + 192);
    sub_10005622C(*(_QWORD *)(v0 + 168));
    v3 = v2;
    v4 = v1;
    swift_release(*(_QWORD *)(v0 + 168));
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    if (v1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(*(_QWORD *)(v0 + 80), enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
      swift_errorRetain(v1);
      v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v10 = type metadata accessor for DIPError(0);
      v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
      swift_allocError(v10, v11, 0, 0);
      v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v4, v8, 0, v9, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
      swift_willThrow(v12);
      swift_errorRelease(v4);
      swift_task_dealloc(v6);
      swift_task_dealloc(v5);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      swift_task_dealloc(*(_QWORD *)(v0 + 120));
      swift_task_dealloc(v5);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
    }
  }
  else
  {
    v14 = (_QWORD *)swift_task_alloc(dword_100178944);
    *(_QWORD *)(v0 + 200) = v14;
    *v14 = v0;
    v14[1] = sub_100115A38;
    return sub_100116C2C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_100115A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 216) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100116310;
  else
    v5 = sub_100115AA4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100115AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45[3];

  v2 = *(_QWORD *)(v1 + 208);
  if (!v2)
  {
    v15 = *(_QWORD *)(v1 + 168);
    v17 = *(_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 80);
    v18 = *(_QWORD *)(v1 + 64);
    v20 = *(_QWORD *)(v1 + 40);
    v19 = *(void **)(v1 + 48);
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(0xE000000000000000);
    v45[0] = 0xD000000000000018;
    v45[1] = 0x80000001001387F0;
    v21._countAndFlagsBits = v20;
    v21._object = v19;
    String.append(_:)(v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v18);
    v22 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v23 = type metadata accessor for DIPError(0);
    v24 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v25 = swift_allocError(v23, v24, 0, 0);
    v26 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000018, 0x80000001001387F0, 0, v16, 0, v22, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 46);
    swift_willThrow(v26);
    swift_release(v15);
LABEL_7:
    v31 = *(_QWORD *)(v1 + 112);
    v32 = *(_QWORD *)(v1 + 120);
    v33 = *(_QWORD *)(v1 + 104);
    v34 = *(_QWORD *)(v1 + 80);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 72) + 104))(v34, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v1 + 64));
    swift_errorRetain(v25);
    v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v36 = type metadata accessor for DIPError(0);
    v37 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v36, v37, 0, 0);
    v38 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v25, v34, 0, v35, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
    swift_willThrow(v38);
    swift_errorRelease(v25);
    swift_task_dealloc(v32);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v3 = *(_QWORD *)(v1 + 48);
  defaultLogger()(a1);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 152);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 48);
  if (v7)
  {
    v12 = *(_QWORD *)(v1 + 40);
    v44 = *(_QWORD *)(v1 + 104);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = v8;
    v14 = swift_slowAlloc(32, -1);
    v45[0] = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 16) = sub_10003FA80(v12, v11, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v13 + 4);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "After trying new key, using existing ksk for %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v43(v44, v10);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 48), 2);

    v8(v9, v10);
  }
  v27 = *(_QWORD *)(v1 + 216);
  sub_10005622C(v2);
  v29 = v28;
  v25 = v27;
  v30 = *(_QWORD *)(v1 + 168);
  swift_release(v2);
  swift_release(v30);
  if (v25)
    goto LABEL_7;
  v40 = *(_QWORD *)(v1 + 112);
  v41 = *(_QWORD *)(v1 + 104);
  v42 = *(_QWORD *)(v1 + 80);
  swift_task_dealloc(*(_QWORD *)(v1 + 120));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v29);
}

uint64_t sub_100115F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v6, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v6, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001161B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v6, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(v5, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 64));
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v5, 0, v6, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001BLL, 0x80000001001387D0, 53);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[14] = v7;
  v5[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v5[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[17] = v9;
  v5[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for COSEKey(0);
  v5[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[20] = v11;
  v5[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100116520, 0, 0);
}

uint64_t sub_100116520()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = v0[19];
  v3 = v0[10];
  v2 = v0[11];
  v4 = type metadata accessor for CBORDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = CBORDecoder.init()(v5);
  v7 = sub_1000058C8(&qword_100174BB0, (uint64_t (*)(uint64_t))&type metadata accessor for COSEKey, (uint64_t)&protocol conformance descriptor for COSEKey);
  dispatch thunk of CBORDecoder.decode<A>(_:from:)(v1, v3, v2, v1, v7);
  v8 = v0[12];
  v9 = v0[8];
  v10 = v0[9];
  swift_release(v6);
  v11 = (_QWORD *)swift_allocObject(&unk_10016C7D8, 40, 7);
  v0[22] = v11;
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v10;
  v12 = swift_allocObject(&unk_10016C800, 32, 7);
  v0[23] = v12;
  *(_QWORD *)(v12 + 16) = &unk_100178920;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = async function pointer to AsyncCoreDataContainer.read<A>(_:)[1];
  swift_retain(v8);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[24] = v14;
  v15 = type metadata accessor for KeySigningKey(0);
  *v14 = v0;
  v14[1] = sub_1001167C4;
  return AsyncCoreDataContainer.read<A>(_:)(v0 + 7, &unk_100178930, v12, v15);
}

uint64_t sub_1001167C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100116ABC;
  }
  else
  {
    v5 = v2[22];
    swift_release(v2[23]);
    swift_release(v5);
    v2[26] = v2[7];
    v4 = sub_100116840;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100116840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 40) = &type metadata for KeySigningKeySignatureProvider;
  *(_QWORD *)(v0 + 48) = &off_10016CA58;
  swift_retain(v1);
  v4 = sub_1001125F4(v3);
  v6 = v2;
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 152);
  if (v6)
  {
    swift_release(*(_QWORD *)(v0 + 208));
    sub_100019A68(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v13, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
    swift_errorRetain(v6);
    v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v15 = type metadata accessor for DIPError(0);
    v16 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v15, v16, 0, 0);
    v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v6, v13, 0, v14, 0xD000000000000063, 0x8000000100138710, 0xD00000000000002DLL, 0x8000000100138780, 144);
    swift_willThrow(v17);
    swift_errorRelease(v6);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = v4;
    v20 = v5;
    v21 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 120);
    defaultLogger()(v4);
    v22 = swift_task_alloc(32);
    *(_QWORD *)(v22 + 16) = v19;
    *(_QWORD *)(v22 + 24) = v20;
    Logger.sensitive(_:)(sub_100118754, v22);
    swift_release(v7);
    swift_task_dealloc(v22);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v24);
    sub_100019A68(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc(v8);
    swift_task_dealloc(v21);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(char *, uint64_t))(v0 + 8))(v19, v20);
  }
}

uint64_t sub_100116ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 104))(v8, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 104));
  swift_errorRetain(v5);
  v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v10 = type metadata accessor for DIPError(0);
  v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v10, v11, 0, 0);
  v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v8, 0, v9, 0xD000000000000063, 0x8000000100138710, 0xD00000000000002DLL, 0x8000000100138780, 144);
  swift_willThrow(v12);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100116C90, 0, 0);
}

uint64_t sub_100116C90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v4 = (_QWORD *)swift_allocObject(&unk_10016C8C8, 40, 7);
  v0[12] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = swift_allocObject(&unk_10016C8F0, 32, 7);
  v0[13] = v5;
  *(_QWORD *)(v5 + 16) = sub_1001187E8;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = async function pointer to AsyncCoreDataContainer.performRead<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[14] = v7;
  v8 = sub_100008E84(&qword_100177710);
  *v7 = v0;
  v7[1] = sub_100116D90;
  return AsyncCoreDataContainer.performRead<A>(_:)(v0 + 2, sub_10006CC88, v5, v8);
}

uint64_t sub_100116D90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100116F44;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 96);
    swift_release(*(_QWORD *)(v2 + 104));
    swift_release(v5);
    v4 = sub_100116E04;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100116E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v1;
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = v4;
  if (v1)
  {
    sub_1000517CC(v2, v1, v3, v4);
    sub_100005A38(v3, v4);
    v5 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v0 + 160) = v5;
    *v5 = v0;
    v5[1] = sub_100116ED0;
    return sub_1000FE76C(v2, v1, v3, v4);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100116ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1001173B8;
  }
  else
  {
    sub_100005AB0(v3[18], v3[19]);
    v5 = sub_100117080;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100116F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v3, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 72));
  swift_errorRetain(v2);
  v4 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for DIPError(0);
  v6 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v5, v6, 0, 0);
  v7 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v2, v3, 0, v4, 0xD000000000000063, 0x8000000100138710, 0xD000000000000020, 0x8000000100138830, 87);
  swift_willThrow(v7);
  swift_errorRelease(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117080()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(void **)(v0 + 136);
  if (*(_QWORD *)(v0 + 168))
  {
    sub_100051880(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    sub_100051880(v4, (uint64_t)v3, v2, v1);
    v5 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    v23 = v7;
    v24 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 48);
    v9 = *(void **)(v0 + 56);
    _StringGuts.grow(_:)(79);
    v11._countAndFlagsBits = 0x69746E6564657263;
    v11._object = (void *)0xEB00000000206C61;
    String.append(_:)(v11);
    v12._countAndFlagsBits = v10;
    v12._object = v9;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0xD00000000000001DLL;
    v13._object = (void *)0x8000000100138860;
    String.append(_:)(v13);
    swift_bridgeObjectRetain(v3);
    v14._countAndFlagsBits = v4;
    v14._object = v3;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v3);
    v15._countAndFlagsBits = 0xD000000000000023;
    v15._object = (void *)0x8000000100138880;
    String.append(_:)(v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), v24);
    v16 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v17 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v18 = swift_allocError(v25, v17, 0, 0);
    v19 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, 0, v23, 0, v16, 0xD000000000000063, 0x8000000100138710, 0xD000000000000020, 0x8000000100138830, 82);
    swift_willThrow(v19);
    sub_100051880(v4, (uint64_t)v3, v2, v1);
    sub_100051880(v4, (uint64_t)v3, v2, v1);
    v20 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v20, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 72));
    swift_errorRetain(v18);
    v21 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    swift_allocError(v25, v17, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v18, v20, 0, v21, 0xD000000000000063, 0x8000000100138710, 0xD000000000000020, 0x8000000100138830, 87);
    swift_willThrow(v22);
    swift_errorRelease(v18);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001173B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  sub_100005AB0(v1, v2);
  sub_100051880(v4, v3, v1, v2);
  sub_100051880(v4, v3, v1, v2);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v6, enum case for DIPError.Code.internalError(_:), *(_QWORD *)(v0 + 72));
  swift_errorRetain(v5);
  v7 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v8 = type metadata accessor for DIPError(0);
  v9 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v8, v9, 0, 0);
  v10 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v5, v6, 0, v7, 0xD000000000000063, 0x8000000100138710, 0xD000000000000020, 0x8000000100138830, 87);
  swift_willThrow(v10);
  swift_errorRelease(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100117584, 0, 0);
}

uint64_t sub_100117584()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[4];
  v1 = v0[5];
  v4 = v0[2];
  v3 = v0[3];
  v5 = (_QWORD *)swift_allocObject(&unk_10016C878, 48, 7);
  v0[9] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v5[5] = v4;
  v6 = swift_allocObject(&unk_10016C8A0, 32, 7);
  v0[10] = v6;
  *(_QWORD *)(v6 + 16) = sub_100118788;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = async function pointer to AsyncCoreDataContainer.performWrite<A>(_:)[1];
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_retain(v5);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[11] = v8;
  *v8 = v0;
  v8[1] = sub_100117684;
  return AsyncCoreDataContainer.performWrite<A>(_:)(v0 + 13, sub_1001187A4, v6, &type metadata for Bool);
}

uint64_t sub_100117684()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100117724, 0, 0);
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v3 + 80));
  swift_release(v5);
  v7 = *(unsigned __int8 *)(v3 + 104);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v7);
}

uint64_t sub_100117724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DIPError.Code.internalError(_:), v5);
  swift_errorRetain(v1);
  v6 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for DIPError(0);
  v8 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v7, v8, 0, 0);
  v9 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v1, v3, 0, v6, 0xD000000000000063, 0x8000000100138710, 0xD00000000000001ALL, 0x8000000100138810, 113);
  swift_willThrow(v9);
  swift_errorRelease(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_100117864(uint64_t a1@<X2>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint8_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  os_log_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint8_t *v38;
  os_log_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000093E8(a1, a2);
  if (v3)
    return;
  v12 = v11;
  v42 = a3;
  v13 = (uint64_t)sub_1000C5240();
  v14 = v13;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v28 = v13;
    else
      v28 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v14);
    if (v29)
      goto LABEL_4;
  }
  else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v14 & 0xC000000000000001) != 0)
    {
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    }
    else
    {
      if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v15 = *(id *)(v14 + 32);
    }
    v16 = v15;
    swift_bridgeObjectRelease(v14);
    v17 = objc_msgSend(v16, "identifier");
    if (v17)
    {
      v18 = v17;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v41 = v19;

      v20 = objc_msgSend(v16, "publicKeyIdentifier");
      if (v20)
      {
        v21 = v20;
        v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v24 = v23;

        v25 = v42;
        v26 = v41;
        *v42 = v40;
        v25[1] = (uint64_t)v26;
        v25[2] = v22;
        v25[3] = v24;
        return;
      }
      swift_bridgeObjectRelease(v41);
    }

    goto LABEL_17;
  }
  v27 = swift_bridgeObjectRelease(v14);
LABEL_17:
  defaultLogger()(v27);
  v30 = swift_bridgeObjectRetain_n(a2, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v45 = v40;
    v39 = v31;
    v33 = v41;
    *(_DWORD *)v41 = 136315138;
    v38 = v33 + 4;
    swift_bridgeObjectRetain(a2);
    v43 = sub_10003FA80(a1, (unint64_t)a2, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v38);
    swift_bridgeObjectRelease_n(a2, 3);
    v34 = v39;
    v35 = v41;
    _os_log_impl((void *)&_mh_execute_header, v39, v32, "Credential %s does not have a key signing key", v41, 0xCu);
    v36 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v37 = v42;
  *(_OWORD *)v42 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
}

void sub_100117BAC(uint8_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint8_t *v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000093E8(a2, a3);
  if (!v5)
  {
    v35 = a1;
    v36 = v11;
    v37 = v13;
    v38 = a5;
    v15 = v39;
    v16 = v14;
    v17 = (uint64_t)sub_1000C5240();
    v18 = v17;
    v34 = v16;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v32 = v17;
      else
        v32 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v33 = _CocoaArrayWrapper.endIndex.getter(v32);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v33 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v19 = v15;
    v20 = (unint64_t)a3;
    v21 = a2;
    v22 = swift_bridgeObjectRelease(v18);
    if (v33)
    {
      v23 = v10;
      v24 = v37;
      defaultLogger()(v22);
      v25 = swift_bridgeObjectRetain_n(a3, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v39 = v23;
        v29 = v42;
        *(_DWORD *)v28 = 136315138;
        v35 = v28 + 4;
        swift_bridgeObjectRetain(v20);
        v40 = sub_10003FA80(v21, v20, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v35);
        swift_bridgeObjectRelease_n(v20, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Credential %s already has a ksk when trying to add a new one", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v39);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v23);
      }
      *v38 = 0;
    }
    else
    {
      v30 = type metadata accessor for StoredCryptoKey(0);
      v31 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v30)), "initWithContext:", *((_QWORD *)v35 + 2));
      sub_1000C98C8(v19);
      objc_msgSend(v34, "addCryptoKeysObject:", v31);
      sub_1000091F8();

      *v38 = 1;
    }
  }
}

uint64_t sub_100117F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for DIPError.Code(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v5[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[13] = v9;
  v5[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100117F90, 0, 0);
}

uint64_t sub_100117F90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  v4 = v0[7];
  v5 = v0[8];
  v7 = v0[5];
  v6 = v0[6];
  v8 = (_QWORD *)swift_allocObject(&unk_10016C828, 48, 7);
  v0[15] = v8;
  v8[2] = v6;
  v8[3] = v4;
  v8[4] = v5;
  v8[5] = v7;
  v9 = swift_allocObject(&unk_10016C850, 32, 7);
  v0[16] = v9;
  *(_QWORD *)(v9 + 16) = sub_100019AA0;
  *(_QWORD *)(v9 + 24) = v8;
  v10 = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  swift_retain(v6);
  swift_bridgeObjectRetain(v5);
  swift_retain(v7);
  v11(v1, v10, v3);
  v12 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_retain(v8);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[17] = v13;
  v14 = sub_100008E84(&qword_100174860);
  *v13 = v0;
  v13[1] = sub_1001180D0;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[14], sub_1000961B4, v9, v14);
}

uint64_t sub_1001180D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 104) + 8))(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 96));
    swift_release(v4);
    v5 = sub_100118390;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 120);
    v7 = *(_QWORD *)(v2 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 104) + 8))(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 96));
    swift_release(v7);
    swift_release(v6);
    *(_OWORD *)(v2 + 152) = *(_OWORD *)(v2 + 16);
    v5 = sub_100118184;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100118184()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 160);
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1001787C4);
    *(_QWORD *)(v0 + 168) = v2;
    *v2 = v0;
    v2[1] = sub_10011831C;
    return sub_1000FE76C(*(_QWORD *)(v0 + 152), v1, 0, 0xF000000000000000);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v4, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 72));
    v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v6, v7, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v4, 0, v5, 0xD000000000000063, 0x8000000100138710, 0xD00000000000002DLL, 0x8000000100138780, 131);
    swift_willThrow(v8);
    v9 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10011831C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100118544;
  }
  else
  {
    swift_bridgeObjectRelease(v3[20]);
    v5 = sub_1001183D8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100118390()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001183D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(v0 + 88);
    **(_QWORD **)(v0 + 32) = v1;
    swift_task_dealloc(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 104))(v4, enum case for DIPError.Code.idcsMissingKeySigningKey(_:), *(_QWORD *)(v0 + 72));
    v5 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v6 = type metadata accessor for DIPError(0);
    v7 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v6, v7, 0, 0);
    v8 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000024, 0x800000010012E710, 0, v4, 0, v5, 0xD000000000000063, 0x8000000100138710, 0xD00000000000002DLL, 0x8000000100138780, 131);
    swift_willThrow(v8);
    v3 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
  }
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118544()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10011858C()
{
  Swift::String v0;
  void *object;

  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = Data.base16EncodedString()();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001ALL;
}

uint64_t sub_10011861C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_10017891C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_10000935C;
  return sub_100117F00(a1, a2, v6, v7, v8);
}

double sub_100118698@<D0>(void (*a1)(__int128 *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;

  a1(&v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1001186D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10017892C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100016474;
  return ((uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&dword_100178928 + dword_100178928))(a1, a2, v6);
}

unint64_t sub_100118754()
{
  return sub_10011858C();
}

uint64_t sub_100118760()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100118788(uint8_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  sub_100117BAC(a1, *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

_QWORD *sub_1001187A4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(v2 + 16))(&v6, *a1);
  if (!v3)
    *a2 = v6;
  return result;
}

void sub_1001187E8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100117864(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for KeySigningKeyLookupInfo()
{
  return &type metadata for KeySigningKeyLookupInfo;
}

_QWORD *sub_100118820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v28[5];

  v4 = v3;
  swift_defaultActor_initialize(v3);
  v8 = type metadata accessor for SESKeystore(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = SESKeystore.init()(v9);
  v11 = type metadata accessor for SEPairingManager(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v13 = SEPairingManager.init()(v12);
  v14 = type metadata accessor for GenericPasswordKeychainWrapper();
  v15 = swift_allocObject(v14, 16, 7);
  v16 = type metadata accessor for SyncableKeyStoreProvider();
  v17 = (_QWORD *)swift_allocObject(v16, 56, 7);
  v17[5] = v14;
  v17[6] = &protocol witness table for GenericPasswordKeychainWrapper;
  v17[2] = v15;
  v28[3] = v16;
  v28[4] = &off_10016AB90;
  v28[0] = v17;
  v18 = type metadata accessor for CredentialKeyManager();
  v19 = (_QWORD *)swift_allocObject(v18, 128, 7);
  v20 = sub_10002E040((uint64_t)v28, v16);
  __chkstk_darwin(v20);
  v22 = (_QWORD *)((char *)&v28[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = *v22;
  swift_retain(v17);
  v25 = sub_10011A080(v10, v13, v24, v19);
  sub_10000CE40(v28);
  swift_release(v17);
  v4[17] = v25;
  v4[18] = 0;
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  return v4;
}

uint64_t sub_1001189B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8[85] = v17;
  v8[84] = v16;
  v8[83] = a8;
  v8[82] = a7;
  v8[81] = a6;
  v8[80] = a5;
  v8[79] = a4;
  v8[78] = a3;
  v8[77] = a2;
  v8[76] = a1;
  v9 = type metadata accessor for DIPError.Code(0);
  v8[86] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[87] = v10;
  v8[88] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013CodingKeyFormat(0);
  v8[89] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[90] = v12;
  v8[91] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v8[92] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[93] = v14;
  v8[94] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100118A90, 0, 0);
}

uint64_t sub_100118A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *inited;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t (*v59)(uint64_t);
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t result;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  void *v102;
  Swift::String v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  void *v111;
  Swift::String v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(void);
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  Class isa;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  id v169;
  uint64_t v170;
  unint64_t v171;

  v2 = defaultLogger()(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v156 = *(_QWORD *)(v1 + 744);
    v160 = *(_QWORD *)(v1 + 736);
    v165 = *(_QWORD *)(v1 + 752);
    v5 = *(_QWORD *)(v1 + 632);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v170 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = (id)DCCredentialPayloadFormatToString(v5);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    *(_QWORD *)(v1 + 600) = sub_10003FA80(v9, v11, &v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 600, v1 + 608, v6 + 4);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "makePayloadProcessor for payload format %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v165, v160);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 752);
    v13 = *(_QWORD *)(v1 + 744);
    v14 = *(_QWORD *)(v1 + 736);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v1 + 632);
  switch(v15)
  {
    case 0:
      v157 = *(_QWORD *)(v1 + 728);
      v16 = *(_QWORD *)(v1 + 720);
      v154 = *(_QWORD *)(v1 + 712);
      v17 = *(_QWORD *)(v1 + 624);
      v18 = *(_QWORD *)(v1 + 616);
      v166 = *(_QWORD *)(v1 + 608);
      (*(void (**)(void))(v16 + 104))();
      *(_QWORD *)(v1 + 544) = &type metadata for PayloadProcessorAnalyticsRecorder;
      *(_QWORD *)(v1 + 552) = &off_10016C008;
      v19 = type metadata accessor for ISO18013PackagePayloadProcessor(0);
      v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      v21 = sub_10002E040(v1 + 520, (uint64_t)&type metadata for PayloadProcessorAnalyticsRecorder);
      v22 = swift_task_alloc(((unint64_t)value witness table for ()[8] + 15) & 0xFFFFFFFFFFFFFFF0);
      value witness table for ()[2](v22, v21, &type metadata for PayloadProcessorAnalyticsRecorder);
      *(_QWORD *)(v1 + 584) = &type metadata for PayloadProcessorAnalyticsRecorder;
      *(_QWORD *)(v1 + 592) = &off_10016C008;
      sub_100005A38(v18, v17);
      swift_defaultActor_initialize(v20);
      v23 = v20 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_decodedPayload;
      v24 = type metadata accessor for ISO18013Package(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
      *(_QWORD *)(v20 + 112) = v18;
      *(_QWORD *)(v20 + 120) = v17;
      sub_10002597C((__int128 *)(v1 + 560), v20 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_analyticsRecorder);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20 + OBJC_IVAR____TtC7idcredd31ISO18013PackagePayloadProcessor_codingKeyFormat, v157, v154);
      sub_10000CE40((_QWORD *)(v1 + 520));
      swift_task_dealloc(v22);
      *(_QWORD *)(v166 + 24) = v19;
      *(_QWORD *)(v166 + 32) = &off_1001687F0;
      goto LABEL_22;
    case 1:
      v39 = *(_QWORD *)(v1 + 648);
      if (v39)
      {
        v40 = *(_QWORD *)(v1 + 664);
        v167 = v40;
        v41 = *(_QWORD *)(v1 + 656);
        v161 = v41;
        v42 = type metadata accessor for SESKeystore(0);
        swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
        swift_bridgeObjectRetain(v39);
        v43 = sub_100005A38(v41, v40);
        v155 = SESKeystore.init()(v43);
        v44 = type metadata accessor for SEPairingManager(0);
        v45 = swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
        v46 = SEPairingManager.init()(v45);
        v47 = type metadata accessor for GenericPasswordKeychainWrapper();
        v48 = swift_allocObject(v47, 16, 7);
        v49 = type metadata accessor for SyncableKeyStoreProvider();
        v50 = (_QWORD *)swift_allocObject(v49, 56, 7);
        v50[5] = v47;
        v50[6] = &protocol witness table for GenericPasswordKeychainWrapper;
        v50[2] = v48;
        *(_QWORD *)(v1 + 464) = v49;
        *(_QWORD *)(v1 + 472) = &off_10016AB90;
        *(_QWORD *)(v1 + 440) = v50;
        v51 = type metadata accessor for CredentialKeyManager();
        inited = (_QWORD *)swift_initStackObject(v51, v1 + 16);
        *(_QWORD *)(v1 + 760) = inited;
        v53 = *(_QWORD *)(v1 + 464);
        v54 = sub_10002E040(v1 + 440, v53);
        v55 = *(_QWORD *)(v53 - 8);
        v56 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v55 + 16))(v56, v54, v53);
        v57 = *v56;
        swift_retain(v50);
        *(_QWORD *)(v1 + 768) = sub_10011A080(v155, v46, v57, inited);
        sub_10000CE40((_QWORD *)(v1 + 440));
        swift_release(v50);
        swift_task_dealloc(v56);
        sub_100005A38(v161, v167);
        v58 = (_QWORD *)swift_task_alloc(dword_1001787AC);
        v59 = sub_10011989C;
        *(_QWORD *)(v1 + 776) = v58;
        goto LABEL_11;
      }
      v25 = *(_QWORD *)(v1 + 704);
      v88 = *(_QWORD *)(v1 + 696);
      v89 = *(_QWORD *)(v1 + 688);
      v170 = 0;
      v171 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(v171);
      v170 = 0xD000000000000014;
      v171 = 0x800000010012DCF0;
      v90 = (id)DCCredentialPayloadFormatToString(1);
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      v93 = v92;

      v94._countAndFlagsBits = v91;
      v94._object = v93;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v93);
      v33 = v170;
      v34 = v171;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v88 + 104))(v25, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v89);
      v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v95 = type metadata accessor for DIPError(0);
      v96 = sub_10000745C();
      swift_allocError(v95, v96, 0, 0);
      v38 = 67;
      goto LABEL_19;
    case 2:
      v39 = *(_QWORD *)(v1 + 648);
      if (!v39)
      {
        v25 = *(_QWORD *)(v1 + 704);
        v97 = *(_QWORD *)(v1 + 696);
        v98 = *(_QWORD *)(v1 + 688);
        v170 = 0;
        v171 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease(v171);
        v170 = 0xD000000000000014;
        v171 = 0x800000010012DCF0;
        v99 = (id)DCCredentialPayloadFormatToString(2);
        v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
        v102 = v101;

        v103._countAndFlagsBits = v100;
        v103._object = v102;
        String.append(_:)(v103);
        swift_bridgeObjectRelease(v102);
        v33 = v170;
        v34 = v171;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v97 + 104))(v25, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v98);
        v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v104 = type metadata accessor for DIPError(0);
        v105 = sub_10000745C();
        swift_allocError(v104, v105, 0, 0);
        v38 = 77;
        goto LABEL_19;
      }
      v60 = *(_QWORD *)(v1 + 664);
      v61 = *(_QWORD *)(v1 + 656);
      v162 = v61;
      v168 = v60;
      v62 = type metadata accessor for SESKeystore(0);
      swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
      swift_bridgeObjectRetain(v39);
      v63 = sub_100005A38(v61, v60);
      v158 = SESKeystore.init()(v63);
      v64 = type metadata accessor for SEPairingManager(0);
      v65 = swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
      v66 = SEPairingManager.init()(v65);
      v67 = type metadata accessor for GenericPasswordKeychainWrapper();
      v68 = swift_allocObject(v67, 16, 7);
      v69 = type metadata accessor for SyncableKeyStoreProvider();
      v70 = (_QWORD *)swift_allocObject(v69, 56, 7);
      v70[5] = v67;
      v70[6] = &protocol witness table for GenericPasswordKeychainWrapper;
      v70[2] = v68;
      *(_QWORD *)(v1 + 424) = v69;
      *(_QWORD *)(v1 + 432) = &off_10016AB90;
      *(_QWORD *)(v1 + 400) = v70;
      v71 = type metadata accessor for CredentialKeyManager();
      v72 = (_QWORD *)swift_initStackObject(v71, v1 + 272);
      *(_QWORD *)(v1 + 800) = v72;
      v73 = *(_QWORD *)(v1 + 424);
      v74 = sub_10002E040(v1 + 400, v73);
      v75 = *(_QWORD *)(v73 - 8);
      v76 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v75 + 16))(v76, v74, v73);
      v77 = *v76;
      swift_retain(v70);
      *(_QWORD *)(v1 + 808) = sub_10011A080(v158, v66, v77, v72);
      sub_10000CE40((_QWORD *)(v1 + 400));
      swift_release(v70);
      swift_task_dealloc(v76);
      sub_100005A38(v162, v168);
      v58 = (_QWORD *)swift_task_alloc(dword_1001787AC);
      v59 = sub_100119B68;
      *(_QWORD *)(v1 + 816) = v58;
LABEL_11:
      *v58 = v1;
      v58[1] = v59;
      result = sub_1000FFD3C(*(_QWORD *)(v1 + 640), v39, *(_QWORD *)(v1 + 656), *(_QWORD *)(v1 + 664));
      break;
    case 3:
      v79 = *(void **)(v1 + 648);
      if (v79)
      {
        v80 = v1 + 144;
        v81 = *(_QWORD *)(v1 + 680);
        if (v81 >> 60 == 15)
        {
          v82 = *(_QWORD *)(v1 + 664);
          v83 = *(_QWORD *)(v1 + 656);
          swift_bridgeObjectRetain(*(_QWORD *)(v1 + 648));
          sub_100005A38(v83, v82);
          v169 = 0;
        }
        else
        {
          v119 = *(_QWORD *)(v1 + 672);
          v120 = *(_QWORD *)(v1 + 664);
          v121 = *(_QWORD *)(v1 + 656);
          v122 = *(_QWORD *)(v1 + 640);
          v123 = objc_allocWithZone((Class)LAContext);
          sub_1000517CC(v122, (uint64_t)v79, v121, v120);
          sub_10000B178(v119, v81);
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000B164(v119, v81);
          v169 = objc_msgSend(v123, "initWithExternalizedContext:", isa);

          v80 = v1 + 144;
        }
        v163 = *(_QWORD *)(v1 + 640);
        v125 = type metadata accessor for SESKeystore(0);
        v126 = swift_allocObject(v125, *(unsigned int *)(v125 + 48), *(unsigned __int16 *)(v125 + 52));
        v159 = SESKeystore.init()(v126);
        v127 = type metadata accessor for SEPairingManager(0);
        v128 = swift_allocObject(v127, *(unsigned int *)(v127 + 48), *(unsigned __int16 *)(v127 + 52));
        v129 = SEPairingManager.init()(v128);
        v130 = type metadata accessor for GenericPasswordKeychainWrapper();
        v131 = swift_allocObject(v130, 16, 7);
        v132 = type metadata accessor for SyncableKeyStoreProvider();
        v133 = (_QWORD *)swift_allocObject(v132, 56, 7);
        v133[5] = v130;
        v133[6] = &protocol witness table for GenericPasswordKeychainWrapper;
        v133[2] = v131;
        *(_QWORD *)(v1 + 504) = v132;
        *(_QWORD *)(v1 + 512) = &off_10016AB90;
        *(_QWORD *)(v1 + 480) = v133;
        v134 = type metadata accessor for CredentialKeyManager();
        v135 = (_QWORD *)swift_initStackObject(v134, v80);
        v136 = *(_QWORD *)(v1 + 504);
        v137 = sub_10002E040(v1 + 480, v136);
        v138 = *(_QWORD *)(v136 - 8);
        v139 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v138 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v138 + 16))(v139, v137, v136);
        v140 = *v139;
        swift_retain(v133);
        v141 = sub_10011A080(v159, v129, v140, v135);
        sub_10000CE40((_QWORD *)(v1 + 480));
        swift_release(v133);
        swift_task_dealloc(v139);
        v142 = sub_100103CA8(v163, v79, v169);
        v143 = *(_QWORD *)(v1 + 664);
        v144 = *(_QWORD *)(v1 + 656);
        v145 = *(_QWORD *)(v1 + 648);
        v146 = *(_QWORD *)(v1 + 640);
        v147 = (uint64_t)v142;
        v148 = *(_QWORD *)(v1 + 624);
        v149 = *(_QWORD *)(v1 + 616);
        v164 = *(_QWORD *)(v1 + 608);
        swift_release(v141);
        v150 = sub_100008E84(&qword_1001789F0);
        swift_allocObject(v150, 152, 15);
        sub_100005A38(v149, v148);
        swift_retain(v147);
        v20 = (uint64_t)sub_100118820(v149, v148, v147);
        *(_QWORD *)(v164 + 24) = v150;
        *(_QWORD *)(v164 + 32) = &off_10016C490;
        swift_release(v147);

        sub_100051880(v146, v145, v144, v143);
LABEL_22:
        v151 = *(_QWORD *)(v1 + 752);
        v152 = *(_QWORD *)(v1 + 728);
        v153 = *(_QWORD *)(v1 + 704);
        **(_QWORD **)(v1 + 608) = v20;
        swift_task_dealloc(v151);
        swift_task_dealloc(v152);
        swift_task_dealloc(v153);
        v118 = *(uint64_t (**)(void))(v1 + 8);
      }
      else
      {
        v25 = *(_QWORD *)(v1 + 704);
        v106 = *(_QWORD *)(v1 + 696);
        v107 = *(_QWORD *)(v1 + 688);
        v170 = 0;
        v171 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease(v171);
        v170 = 0xD00000000000001FLL;
        v171 = 0x80000001001389A0;
        v108 = (id)DCCredentialPayloadFormatToString(3);
        v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
        v111 = v110;

        v112._countAndFlagsBits = v109;
        v112._object = v111;
        String.append(_:)(v112);
        swift_bridgeObjectRelease(v111);
        v33 = v170;
        v34 = v171;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v106 + 104))(v25, enum case for DIPError.Code.idcsMissingPayloadProtectionKey(_:), v107);
        v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
        v113 = type metadata accessor for DIPError(0);
        v114 = sub_10000745C();
        swift_allocError(v113, v114, 0, 0);
        v38 = 91;
LABEL_19:
        v115 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v33, v34, 0, v25, 0, v35, 0xD00000000000006FLL, 0x8000000100138900, 0xD00000000000002ELL, 0x8000000100138970, v38);
        swift_willThrow(v115);
        v116 = *(_QWORD *)(v1 + 728);
        v117 = *(_QWORD *)(v1 + 704);
        swift_task_dealloc(*(_QWORD *)(v1 + 752));
        swift_task_dealloc(v116);
        swift_task_dealloc(v117);
        v118 = *(uint64_t (**)(void))(v1 + 8);
      }
      result = v118();
      break;
    case 4:
      v84 = *(_QWORD *)(v1 + 624);
      v85 = *(_QWORD *)(v1 + 616);
      v86 = *(_QWORD *)(v1 + 608);
      v87 = type metadata accessor for ACWGPackagePayloadProcessor();
      swift_allocObject(v87, 120, 15);
      sub_100005A38(v85, v84);
      v20 = sub_10002EC10(v85, v84);
      *(_QWORD *)(v86 + 24) = v87;
      *(_QWORD *)(v86 + 32) = &off_100168900;
      goto LABEL_22;
    default:
      v25 = *(_QWORD *)(v1 + 704);
      v26 = *(_QWORD *)(v1 + 696);
      v27 = *(_QWORD *)(v1 + 688);
      v170 = 0;
      v171 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease(v171);
      v170 = 0xD00000000000001BLL;
      v171 = 0x80000001001388E0;
      v28 = (id)DCCredentialPayloadFormatToString(v15);
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v31);
      v33 = v170;
      v34 = v171;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:), v27);
      v35 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
      v36 = type metadata accessor for DIPError(0);
      v37 = sub_10000745C();
      swift_allocError(v36, v37, 0, 0);
      v38 = 98;
      goto LABEL_19;
  }
  return result;
}

uint64_t sub_10011989C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 776);
  v3[98] = a1;
  v3[99] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100119F30;
  }
  else
  {
    v6 = v3[96];
    sub_100005AB0(v3[82], v3[83]);
    swift_release(v6);
    v5 = sub_100119924;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100119924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;

  v1 = *(_QWORD *)(v0 + 784);
  if (v1)
  {
    v26 = *(_QWORD *)(v0 + 656);
    v27 = *(_QWORD *)(v0 + 664);
    v2 = *(_QWORD *)(v0 + 648);
    v3 = *(_QWORD *)(v0 + 640);
    v4 = *(_QWORD *)(v0 + 624);
    v5 = *(_QWORD *)(v0 + 616);
    v6 = *(_QWORD *)(v0 + 608);
    v7 = (void *)DeviceIdentityKey.key.getter();
    v8 = sub_100008E84((uint64_t *)&unk_100178A00);
    v9 = (_QWORD *)swift_allocObject(v8, 144, 15);
    sub_100005A38(v5, v4);
    v10 = v7;
    swift_defaultActor_initialize(v9);
    v9[14] = v5;
    v9[15] = v4;
    v9[16] = v10;
    v9[17] = 0;
    *(_QWORD *)(v6 + 24) = v8;
    *(_QWORD *)(v6 + 32) = &off_100167BA8;

    swift_release(v1);
    sub_100051880(v3, v2, v26, v27);
    v11 = *(_QWORD *)(v0 + 752);
    v12 = *(_QWORD *)(v0 + 728);
    v13 = *(_QWORD *)(v0 + 704);
    **(_QWORD **)(v0 + 608) = v9;
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 704);
    v15 = *(_QWORD *)(v0 + 664);
    v16 = *(_QWORD *)(v0 + 656);
    v17 = *(_QWORD *)(v0 + 648);
    v18 = *(_QWORD *)(v0 + 640);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 696) + 104))(v14, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), *(_QWORD *)(v0 + 688));
    v19 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for DIPError(0);
    v21 = sub_10000745C();
    swift_allocError(v20, v21, 0, 0);
    v22 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x80000001001389C0, 0, v14, 0, v19, 0xD00000000000006FLL, 0x8000000100138900, 0xD00000000000002ELL, 0x8000000100138970, 71);
    swift_willThrow(v22);
    sub_100051880(v18, v17, v16, v15);
    v23 = *(_QWORD *)(v0 + 728);
    v24 = *(_QWORD *)(v0 + 704);
    swift_task_dealloc(*(_QWORD *)(v0 + 752));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 816);
  v3[103] = a1;
  v3[104] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100119FC8;
  }
  else
  {
    v6 = v3[101];
    sub_100005AB0(v3[82], v3[83]);
    swift_release(v6);
    v5 = sub_100119BF0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100119BF0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v1 = v0[103];
  if (!v1)
  {
    v24 = v0[88];
    v25 = v0[83];
    v26 = v0[82];
    v27 = v0[81];
    v28 = v0[80];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[87] + 104))(v24, enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:), v0[86]);
    v29 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v30 = type metadata accessor for DIPError(0);
    v31 = sub_10000745C();
    swift_allocError(v30, v31, 0, 0);
    v32 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001FLL, 0x80000001001389C0, 0, v24, 0, v29, 0xD00000000000006FLL, 0x8000000100138900, 0xD00000000000002ELL, 0x8000000100138970, 81);
    swift_willThrow(v32);
    sub_100051880(v28, v27, v26, v25);
    v33 = v0[91];
    v34 = v0[88];
    swift_task_dealloc(v0[94]);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  v2 = v0[85];
  v3 = (void *)DeviceIdentityKey.key.getter();
  if (v2 >> 60 == 15)
    goto LABEL_6;
  v4 = v0[85];
  v5 = v0[84];
  v6 = objc_allocWithZone((Class)LAContext);
  sub_100005A38(v5, v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000B164(v5, v4);
  v8 = objc_msgSend(v6, "initWithExternalizedContext:", isa);

  if (!v8)
  {
LABEL_6:
    v11 = 0;
    v36 = 0;
LABEL_7:
    v13 = 0xF000000000000000;
    goto LABEL_8;
  }
  v9 = objc_msgSend(v8, "externalizedContext");
  v36 = v8;
  if (!v9)
  {
    v11 = 0;
    goto LABEL_7;
  }
  v10 = v9;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

LABEL_8:
  v39 = v0[82];
  v40 = v0[83];
  v37 = v0[80];
  v38 = v0[81];
  v14 = v0[78];
  v15 = v0[77];
  v16 = v0[76];
  v17 = sub_100008E84(&qword_1001789F8);
  swift_allocObject(v17, 152, 15);
  sub_100005A38(v15, v14);
  v18 = v3;
  sub_10000B178(v11, v13);
  v19 = sub_10011A304(v15, v14, v18, v11, v13);

  sub_100005AB0(v15, v14);
  *(_QWORD *)(v16 + 24) = v17;
  *(_QWORD *)(v16 + 32) = &off_10016C380;
  sub_10000B164(v11, v13);

  swift_release(v1);
  sub_100051880(v37, v38, v39, v40);
  v20 = v0[94];
  v21 = v0[91];
  v22 = v0[88];
  *(_QWORD *)v0[76] = v19;
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100119F30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  sub_100005AB0(v3, v2);
  swift_release(v1);
  sub_100051880(v5, v4, v3, v2);
  v6 = *(_QWORD *)(v0 + 728);
  v7 = *(_QWORD *)(v0 + 704);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119FC8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  sub_100005AB0(v3, v2);
  swift_release(v1);
  sub_100051880(v5, v4, v3, v2);
  v6 = *(_QWORD *)(v0 + 728);
  v7 = *(_QWORD *)(v0 + 704);
  swift_task_dealloc(*(_QWORD *)(v0 + 752));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for PayloadProcessorBuilder()
{
  return objc_opt_self(_TtC7idcredd23PayloadProcessorBuilder);
}

_QWORD *sub_10011A080(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;
  __int128 v14;
  uint64_t v15;
  void *v16;

  v15 = type metadata accessor for SEPairingManager(0);
  v16 = &protocol witness table for SEPairingManager;
  *(_QWORD *)&v14 = a2;
  v12 = type metadata accessor for SyncableKeyStoreProvider();
  v13 = &off_10016AB90;
  *(_QWORD *)&v11 = a3;
  a4[3] = sub_100008EC4();
  v8 = type metadata accessor for DeviceIdentityKeystore(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  a4[4] = DeviceIdentityKeystore.init()(v9);
  a4[5] = sub_1000403F0();
  a4[2] = a1;
  sub_10002597C(&v14, (uint64_t)(a4 + 11));
  sub_10002597C(&v11, (uint64_t)(a4 + 6));
  return a4;
}

uint64_t sub_10011A138(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 5)
    return (0xEu >> a1) & 1;
  v8 = defaultLogger()(v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v20 = v18;
    *(_DWORD *)v11 = 136315138;
    v17 = v11 + 4;
    v12 = (id)DCCredentialPayloadFormatToString(a1);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v19 = sub_10003FA80(v13, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown payload format %s", v11, 0xCu);
    v16 = v18;
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 0;
}

_QWORD *sub_10011A304(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  id v11;
  Class isa;
  id v13;

  swift_defaultActor_initialize(v5);
  v5[18] = 0;
  v5[14] = a1;
  v5[15] = a2;
  v5[16] = a3;
  sub_100005A38(a1, a2);
  v11 = a3;
  isa = 0;
  if (a5 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000B164(a4, a5);
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)LAContext), "initWithExternalizedContext:", isa);

  v5[17] = v13;
  return v5;
}

uint64_t sub_10011A3BC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 5)
    return qword_10012C088[a1];
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v19);
  v18 = 0xD00000000000001BLL;
  v19 = 0x80000001001388E0;
  v7 = (id)DCCredentialPayloadFormatToString(a1);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12 = v18;
  v13 = v19;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:), v2);
  v14 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v15 = type metadata accessor for DIPError(0);
  v16 = sub_10000745C();
  swift_allocError(v15, v16, 0, 0);
  v17 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v12, v13, 0, v5, 0, v14, 0xD00000000000006FLL, 0x8000000100138900, 0xD000000000000016, 0x80000001001389E0, 112);
  return swift_willThrow(v17);
}

ValueMetadata *type metadata accessor for KeyLookupInfo()
{
  return &type metadata for KeyLookupInfo;
}

uint64_t sub_10011A590(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58[8];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v5 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredential.getter(v11);
  DIPSignpost.init(_:)(v9);
  v14 = type metadata accessor for StoredCredential(0);
  v15 = (void *)static StoredCredential.fetchRequest()();
  objc_msgSend(v15, "setFetchLimit:", 1);
  sub_100039BA4();
  v16 = sub_100008E84(&qword_100174878);
  v17 = swift_allocObject(v16, 72, 7);
  v51 = xmmword_10012A6D0;
  *(_OWORD *)(v17 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10000EA3C();
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v18 = (void *)NSPredicate.init(format:_:)(0xD000000000000019, 0x8000000100138A00, v17);
  objc_msgSend(v15, "setPredicate:", v18);

  result = NSManagedObjectContext.fetch<A>(_:)(v15, v14);
  if (v2)
  {

    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v20._countAndFlagsBits = 0xD00000000000001ALL;
    v20._object = (void *)0x8000000100138A20;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 8250;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v61 = v2;
    v23 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v61, &v59, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = v60;
    v50 = v59;
    v25 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.coreDataError(_:), v53);
    v26 = sub_100008E84((uint64_t *)&unk_100178A30);
    v27 = sub_100008E84(&qword_100174898);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v32 + 16) = v51;
    v33 = (uint64_t *)(v32 + v31 + *(int *)(v27 + 48));
    v34 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v35 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32 + v31, v34, v35);
    swift_getErrorValue(v2, v58, v57);
    v36 = v57[1];
    v37 = v57[2];
    swift_errorRetain(v2);
    v38 = dispatch thunk of Error._code.getter(v36, v37);
    v33[3] = (uint64_t)&type metadata for Int;
    *v33 = v38;
    v39 = sub_10003E0A8(v32);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v40, v41, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v24, v2, v25, 0, v39, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000026, 0x8000000100138AB0, 58);
    swift_willThrow(v42);
    swift_errorRelease(v2);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v56);
    return v40;
  }
  v43 = result;
  v45 = v55;
  v44 = v56;
  if (!((unint64_t)result >> 62))
  {
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_13:

    swift_bridgeObjectRelease(v43);
    v40 = 0;
    goto LABEL_14;
  }
  if (result < 0)
    v47 = result;
  else
    v47 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  result = swift_bridgeObjectRelease(v43);
  if (!v48)
    goto LABEL_13;
LABEL_5:
  if ((v43 & 0xC000000000000001) != 0)
  {
    v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v46 = *(id *)(v43 + 32);
LABEL_8:
    v40 = (uint64_t)v46;

    swift_bridgeObjectRelease(v43);
LABEL_14:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v44);
    return v40;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011AA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[8];
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllCredentials.getter(v9);
  DIPSignpost.init(_:)(v7);
  v12 = type metadata accessor for StoredCredential(0);
  v13 = (void *)static StoredCredential.fetchRequest()();
  v14 = NSManagedObjectContext.fetch<A>(_:)(v13, v12);

  if (v0)
  {
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v15._countAndFlagsBits = 0xD000000000000020;
    v15._object = (void *)0x8000000100138AE0;
    String.append(_:)(v15);
    v44 = v0;
    v16 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v44, &v42, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v36 = v43;
    v37 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    v17 = sub_100008E84((uint64_t *)&unk_100178A30);
    v18 = sub_100008E84(&qword_100174898);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v17, v22 + v20, v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_10012A6D0;
    v24 = v23 + v22;
    v25 = (uint64_t *)(v23 + v22 + *(int *)(v18 + 48));
    v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v27 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v24, v26, v27);
    swift_getErrorValue(v0, v41, v40);
    v28 = v40[1];
    v29 = v40[2];
    swift_errorRetain(v0);
    v30 = dispatch thunk of Error._code.getter(v28, v29);
    v25[3] = (uint64_t)&type metadata for Int;
    *v25 = v30;
    v31 = sub_10003E0A8(v23);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v32, v33, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v37, v36, v0, v4, 0, v31, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000015, 0x8000000100138B10, 36);
    swift_willThrow(v34);
    swift_errorRelease(v0);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  return v14;
}

unint64_t sub_10011AE44(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[3];
  char v65[8];
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v3 = type metadata accessor for DIPError.Code(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost(0);
  v63 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiers.getter(v9);
  DIPSignpost.init(_:)(v7);
  v12 = objc_allocWithZone((Class)NSFetchRequest);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "initWithEntityName:", v13);

  objc_msgSend(v14, "setResultType:", 2);
  v15 = sub_100008E84(&qword_1001748A0);
  v16 = swift_allocObject(v15, 96, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v16 + 32) = 0xD000000000000014;
  *(_QWORD *)(v16 + 40) = 0x8000000100138B30;
  *(_QWORD *)(v16 + 88) = &type metadata for String;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = 0x6F69746974726170;
  *(_QWORD *)(v16 + 72) = 0xE90000000000006ELL;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v14, "setPropertiesToFetch:", isa);

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100039BA4();
    v18 = sub_100008E84(&qword_100174878);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v19 + 56) = sub_100008E84(&qword_100177CB0);
    *(_QWORD *)(v19 + 64) = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    *(_QWORD *)(v19 + 32) = a1;
    swift_bridgeObjectRetain(a1);
    v20 = (void *)NSPredicate.init(format:_:)(0x6F69746974726170, 0xEF4025204E49206ELL, v19);
    objc_msgSend(v14, "setPredicate:", v20);

  }
  v21 = sub_100008E84((uint64_t *)&unk_100178A40);
  v22 = NSManagedObjectContext.fetch<A>(_:)(v14, v21);
  if (v1)
  {
    v58 = v11;
    v59 = v8;

    v23 = enum case for DIPError.Code.coreDataError(_:);
    v24 = v1;
    v26 = v60;
    v25 = v61;
  }
  else
  {
    v50 = v22;
    v51 = sub_10011EFBC(v22);
    swift_bridgeObjectRelease(v50);
    if (v51)
    {
      v24 = sub_10012017C((uint64_t)v51);

      swift_bridgeObjectRelease(v51);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v11, v8);
      return v24;
    }
    v58 = v11;
    v59 = v8;
    v23 = enum case for DIPError.Code.coreDataError(_:);
    v26 = v60;
    v25 = v61;
    v53 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v62, enum case for DIPError.Code.coreDataError(_:), v61);
    v54 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v55 = type metadata accessor for DIPError(0);
    v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v24 = swift_allocError(v55, v56, 0, 0);
    v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100138BC0, 0, v53, 0, v54, 0xD00000000000006ALL, 0x8000000100138A40, 0xD00000000000001FLL, 0x8000000100138D80, 87);
    swift_willThrow(v57);

  }
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v27._countAndFlagsBits = 0xD00000000000001CLL;
  v27._object = (void *)0x8000000100138B70;
  String.append(_:)(v27);
  v68 = v24;
  v28 = sub_100008E84(&qword_100174890);
  _print_unlocked<A, B>(_:_:)(&v68, &v66, v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v29 = v66;
  v30 = v67;
  v31 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v62, v23, v25);
  v32 = sub_100008E84((uint64_t *)&unk_100178A30);
  v33 = sub_100008E84(&qword_100174898);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 72);
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject(v32, v37 + v35, v36 | 7);
  *(_OWORD *)(v38 + 16) = xmmword_10012A6D0;
  v39 = (uint64_t *)(v38 + v37 + *(int *)(v33 + 48));
  v40 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v41 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v38 + v37, v40, v41);
  swift_getErrorValue(v24, v65, v64);
  v42 = v64[1];
  v43 = v64[2];
  swift_errorRetain(v24);
  v44 = dispatch thunk of Error._code.getter(v42, v43);
  v39[3] = (uint64_t)&type metadata for Int;
  *v39 = v44;
  v45 = sub_10003E0A8(v38);
  v46 = type metadata accessor for DIPError(0);
  v47 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v46, v47, 0, 0);
  v48 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v29, v30, v24, v31, 0, v45, 0xD00000000000006ALL, 0x8000000100138A40, 0xD00000000000001FLL, 0x8000000100138D80, 93);
  swift_willThrow(v48);
  swift_errorRelease(v24);
  v49 = v58;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v59);
  return v24;
}

unint64_t sub_10011B4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  char v76[8];
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  v71 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  __chkstk_darwin(v5);
  v70 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersByDocType.getter(v11);
  DIPSignpost.init(_:)(v9);
  v14 = objc_allocWithZone((Class)NSFetchRequest);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "initWithEntityName:", v15);

  objc_msgSend(v16, "setResultType:", 2);
  v17 = sub_100008E84(&qword_1001748A0);
  v18 = swift_allocObject(v17, 96, 7);
  v67 = xmmword_10012A5D0;
  *(_OWORD *)(v18 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v18 + 32) = 0xD000000000000014;
  *(_QWORD *)(v18 + 40) = 0x8000000100138B30;
  *(_QWORD *)(v18 + 88) = &type metadata for String;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = 0x6F69746974726170;
  *(_QWORD *)(v18 + 72) = 0xE90000000000006ELL;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v16, "setPropertiesToFetch:", isa);

  v20 = *(_QWORD *)(a1 + 16);
  sub_100039BA4();
  v21 = sub_100008E84(&qword_100174878);
  if (v20)
  {
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = v67;
    *(_QWORD *)(v22 + 56) = sub_100008E84(&qword_100177CB0);
    *(_QWORD *)(v22 + 64) = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    *(_QWORD *)(v22 + 32) = a1;
    *(_QWORD *)(v22 + 96) = &type metadata for String;
    *(_QWORD *)(v22 + 104) = sub_10000EA3C();
    *(_QWORD *)(v22 + 72) = v71;
    *(_QWORD *)(v22 + 80) = a3;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    v23 = 0xD00000000000002ELL;
    v24 = 0x8000000100138BE0;
    v25 = v22;
  }
  else
  {
    v26 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_10000EA3C();
    *(_QWORD *)(v26 + 32) = v71;
    *(_QWORD *)(v26 + 40) = a3;
    swift_bridgeObjectRetain(a3);
    v23 = 0xD00000000000001ALL;
    v24 = 0x8000000100138B50;
    v25 = v26;
  }
  v27 = (void *)NSPredicate.init(format:_:)(v23, v24, v25);
  objc_msgSend(v16, "setPredicate:", v27);

  v28 = sub_100008E84((uint64_t *)&unk_100178A40);
  v29 = (uint64_t)v72;
  v30 = NSManagedObjectContext.fetch<A>(_:)(v16, v28);
  if (v29)
  {
    v72 = v13;

    v31 = enum case for DIPError.Code.coreDataError(_:);
    v32 = v29;
    v34 = v68;
    v33 = v69;
  }
  else
  {
    v59 = v30;
    v60 = sub_10011EFBC(v30);
    swift_bridgeObjectRelease(v59);
    if (v60)
    {
      v54 = sub_10012017C((uint64_t)v60);

      swift_bridgeObjectRelease(v60);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v74);
      return v54;
    }
    v72 = v13;
    v31 = enum case for DIPError.Code.coreDataError(_:);
    v34 = v68;
    v33 = v69;
    v62 = v70;
    (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v70, enum case for DIPError.Code.coreDataError(_:), v69);
    v63 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v64 = type metadata accessor for DIPError(0);
    v65 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v32 = swift_allocError(v64, v65, 0, 0);
    v66 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100138BC0, 0, v62, 0, v63, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000027, 0x8000000100138B90, 120);
    swift_willThrow(v66);

  }
  v77 = 0;
  v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._countAndFlagsBits = 0xD00000000000001CLL;
  v35._object = (void *)0x8000000100138B70;
  String.append(_:)(v35);
  v79 = v32;
  v36 = sub_100008E84(&qword_100174890);
  _print_unlocked<A, B>(_:_:)(&v79, &v77, v36, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v37 = v77;
  v38 = v78;
  v39 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v70, v31, v33);
  v40 = sub_100008E84((uint64_t *)&unk_100178A30);
  v41 = sub_100008E84(&qword_100174898);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(_QWORD *)(v42 + 72);
  v44 = *(unsigned __int8 *)(v42 + 80);
  v45 = (v44 + 32) & ~v44;
  v46 = swift_allocObject(v40, v45 + v43, v44 | 7);
  *(_OWORD *)(v46 + 16) = xmmword_10012A6D0;
  v47 = v46 + v45;
  v48 = (uint64_t *)(v46 + v45 + *(int *)(v41 + 48));
  v49 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v50 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v47, v49, v50);
  swift_getErrorValue(v32, v76, v75);
  v51 = v75[1];
  v52 = v75[2];
  swift_errorRetain(v32);
  v53 = dispatch thunk of Error._code.getter(v51, v52);
  v48[3] = (uint64_t)&type metadata for Int;
  *v48 = v53;
  v54 = sub_10003E0A8(v46);
  v55 = type metadata accessor for DIPError(0);
  v56 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v55, v56, 0, 0);
  v57 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v37, v38, v32, v39, 0, v54, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000027, 0x8000000100138B90, 126);
  swift_willThrow(v57);
  swift_errorRelease(v32);
  v58 = v72;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v74);
  return v54;
}

unint64_t sub_10011BBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[3];
  char v89[8];
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;

  v79 = a4;
  v83 = a2;
  v8 = type metadata accessor for DIPError.Code(0);
  v80 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  __chkstk_darwin(v8);
  v82 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DIPSignpost(0);
  v86 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialIdentifiersByDocTypeAndRegion.getter(v14);
  v85 = v16;
  DIPSignpost.init(_:)(v12);
  v17 = objc_allocWithZone((Class)NSFetchRequest);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithEntityName:", v18);

  objc_msgSend(v19, "setResultType:", 2);
  v20 = sub_100008E84(&qword_1001748A0);
  v21 = swift_allocObject(v20, 96, 7);
  v78 = xmmword_10012A5D0;
  *(_OWORD *)(v21 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v21 + 32) = 0xD000000000000014;
  *(_QWORD *)(v21 + 40) = 0x8000000100138B30;
  *(_QWORD *)(v21 + 88) = &type metadata for String;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = 0x6F69746974726170;
  *(_QWORD *)(v21 + 72) = 0xE90000000000006ELL;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v19, "setPropertiesToFetch:", isa);

  v23 = *(_QWORD *)(a1 + 16);
  v87 = v13;
  if (v23)
  {
    sub_100039BA4();
    v24 = sub_100008E84(&qword_100174878);
    if (a5)
    {
      v25 = swift_allocObject(v24, 152, 7);
      *(_OWORD *)(v25 + 16) = xmmword_10012AB20;
      *(_QWORD *)(v25 + 56) = sub_100008E84(&qword_100177CB0);
      *(_QWORD *)(v25 + 64) = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
      *(_QWORD *)(v25 + 32) = a1;
      *(_QWORD *)(v25 + 96) = &type metadata for String;
      v26 = sub_10000EA3C();
      *(_QWORD *)(v25 + 72) = v83;
      *(_QWORD *)(v25 + 80) = a3;
      *(_QWORD *)(v25 + 136) = &type metadata for String;
      *(_QWORD *)(v25 + 144) = v26;
      v27 = v79;
      *(_QWORD *)(v25 + 104) = v26;
      *(_QWORD *)(v25 + 112) = v27;
      *(_QWORD *)(v25 + 120) = a5;
      swift_bridgeObjectRetain(a5);
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a3);
      v28 = 0xD00000000000004CLL;
      v29 = 0x8000000100138D30;
    }
    else
    {
      v25 = swift_allocObject(v24, 112, 7);
      *(_OWORD *)(v25 + 16) = v78;
      *(_QWORD *)(v25 + 56) = sub_100008E84(&qword_100177CB0);
      *(_QWORD *)(v25 + 64) = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
      *(_QWORD *)(v25 + 32) = a1;
      *(_QWORD *)(v25 + 96) = &type metadata for String;
      *(_QWORD *)(v25 + 104) = sub_10000EA3C();
      *(_QWORD *)(v25 + 72) = v83;
      *(_QWORD *)(v25 + 80) = a3;
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a3);
      v29 = 0x8000000100138BE0;
      v28 = 0xD00000000000002ELL;
    }
    v30 = v25;
  }
  else
  {
    if (!a5)
      goto LABEL_11;
    v31 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0)
      v31 = v79 & 0xFFFFFFFFFFFFLL;
    if (v31)
    {
      sub_100039BA4();
      v32 = sub_100008E84(&qword_100174878);
      v33 = swift_allocObject(v32, 112, 7);
      *(_OWORD *)(v33 + 16) = v78;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      v34 = sub_10000EA3C();
      *(_QWORD *)(v33 + 32) = v83;
      *(_QWORD *)(v33 + 40) = a3;
      *(_QWORD *)(v33 + 96) = &type metadata for String;
      *(_QWORD *)(v33 + 104) = v34;
      v35 = v79;
      *(_QWORD *)(v33 + 64) = v34;
      *(_QWORD *)(v33 + 72) = v35;
      *(_QWORD *)(v33 + 80) = a5;
      swift_bridgeObjectRetain(a5);
      swift_bridgeObjectRetain(a3);
      v28 = 0xD000000000000038;
      v36 = "ANY payloads.docType == %@ AND ANY payloads.region == %@";
    }
    else
    {
LABEL_11:
      sub_100039BA4();
      v37 = sub_100008E84(&qword_100174878);
      v33 = swift_allocObject(v37, 72, 7);
      *(_OWORD *)(v33 + 16) = xmmword_10012A6D0;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      *(_QWORD *)(v33 + 64) = sub_10000EA3C();
      *(_QWORD *)(v33 + 32) = v83;
      *(_QWORD *)(v33 + 40) = a3;
      swift_bridgeObjectRetain(a3);
      v28 = 0xD00000000000001ALL;
      v36 = "ANY payloads.docType == %@";
    }
    v29 = (unint64_t)(v36 - 32) | 0x8000000000000000;
    v30 = v33;
  }
  v38 = (void *)NSPredicate.init(format:_:)(v28, v29, v30);
  v39 = v84;
  objc_msgSend(v19, "setPredicate:", v38);

  v40 = sub_100008E84((uint64_t *)&unk_100178A40);
  v41 = NSManagedObjectContext.fetch<A>(_:)(v19, v40);
  if (v39)
  {

    v42 = enum case for DIPError.Code.coreDataError(_:);
    v43 = v39;
    v45 = v80;
    v44 = v81;
  }
  else
  {
    v69 = v41;
    v70 = sub_10011EFBC(v41);
    swift_bridgeObjectRelease(v69);
    if (v70)
    {
      v43 = sub_10012017C((uint64_t)v70);

      swift_bridgeObjectRelease(v70);
      v71 = v85;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v71, v87);
      return v43;
    }
    v42 = enum case for DIPError.Code.coreDataError(_:);
    v45 = v80;
    v44 = v81;
    v73 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v82, enum case for DIPError.Code.coreDataError(_:), v81);
    v74 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v75 = type metadata accessor for DIPError(0);
    v76 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v43 = swift_allocError(v75, v76, 0, 0);
    v77 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000016, 0x8000000100138BC0, 0, v73, 0, v74, 0xD00000000000006ALL, 0x8000000100138A40, 0xD00000000000002ELL, 0x8000000100138CC0, 162);
    swift_willThrow(v77);

  }
  v90 = 0;
  v91 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v46._countAndFlagsBits = 0xD00000000000001CLL;
  v46._object = (void *)0x8000000100138B70;
  String.append(_:)(v46);
  v92 = v43;
  v47 = sub_100008E84(&qword_100174890);
  _print_unlocked<A, B>(_:_:)(&v92, &v90, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v48 = v90;
  v49 = v91;
  v50 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 104))(v82, v42, v44);
  v51 = sub_100008E84((uint64_t *)&unk_100178A30);
  v52 = sub_100008E84(&qword_100174898);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(_QWORD *)(v53 + 72);
  v55 = *(unsigned __int8 *)(v53 + 80);
  v56 = (v55 + 32) & ~v55;
  v57 = swift_allocObject(v51, v56 + v54, v55 | 7);
  *(_OWORD *)(v57 + 16) = xmmword_10012A6D0;
  v58 = (uint64_t *)(v57 + v56 + *(int *)(v52 + 48));
  v59 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
  v60 = type metadata accessor for DIPError.PropertyKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v57 + v56, v59, v60);
  swift_getErrorValue(v43, v89, v88);
  v61 = v88[1];
  v62 = v88[2];
  swift_errorRetain(v43);
  v63 = dispatch thunk of Error._code.getter(v61, v62);
  v58[3] = (uint64_t)&type metadata for Int;
  *v58 = v63;
  v64 = sub_10003E0A8(v57);
  v65 = type metadata accessor for DIPError(0);
  v66 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v65, v66, 0, 0);
  v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v48, v49, v43, v50, 0, v64, 0xD00000000000006ALL, 0x8000000100138A40, 0xD00000000000002ELL, 0x8000000100138CC0, 168);
  swift_willThrow(v67);
  swift_errorRelease(v43);
  v68 = v85;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v68, v87);
  return v43;
}

uint64_t sub_10011C460(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t result;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  void *v85;
  __n128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[16];
  uint64_t v111[4];
  void *v112;

  v107 = a3;
  v105 = a2;
  v4 = type metadata accessor for DIPError.Code(0);
  v98 = *(_QWORD *)(v4 - 8);
  v99 = v4;
  __chkstk_darwin(v4);
  v97 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for Logger(0);
  v102 = *(_QWORD *)(v106 - 8);
  v6 = __chkstk_darwin(v106);
  v95 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v93 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v93 - v11;
  v13 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveRegionsInPartitions.getter(v18);
  v101 = v20;
  DIPSignpost.init(_:)(v15);
  v21 = type metadata accessor for StoredPayload(0);
  v22 = (id)static StoredPayload.fetchRequest()();
  v23 = sub_100008E84(&qword_1001748A0);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 32) = 0x6E6F69676572;
  *(_QWORD *)(v24 + 40) = 0xE600000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v22, "setPropertiesToFetch:", isa);

  v27 = *(_QWORD *)(a1 + 16);
  v104 = v22;
  if (v27)
  {
    v96 = v21;
    defaultLogger()(v26);
    swift_bridgeObjectRetain_n(a1, 2);
    v28 = swift_bridgeObjectRetain_n(v107, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v93 = swift_slowAlloc(64, -1);
      v111[0] = v93;
      *(_DWORD *)v31 = 136315394;
      v100 = v16;
      swift_bridgeObjectRetain(a1);
      v33 = Array.description.getter(v32, &type metadata for String);
      v94 = v17;
      v34 = v33;
      v36 = v35;
      swift_bridgeObjectRelease(a1);
      v109 = sub_10003FA80(v34, v36, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 4);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2080;
      v37 = v107;
      swift_bridgeObjectRetain(v107);
      v38 = v105;
      v109 = sub_10003FA80(v105, v37, v111);
      v17 = v94;
      v16 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 14);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "fetchActiveRegionsInPartitions partitions %s docType %s", (uint8_t *)v31, 0x16u);
      v39 = v93;
      swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v102 = *(_QWORD *)(v102 + 8);
      ((void (*)(char *, uint64_t))v102)(v12, v106);
    }
    else
    {

      swift_bridgeObjectRelease_n(v107, 2);
      swift_bridgeObjectRelease_n(a1, 2);
      v102 = *(_QWORD *)(v102 + 8);
      ((void (*)(char *, uint64_t))v102)(v12, v106);
      v38 = v105;
    }
    sub_100039BA4();
    v50 = sub_100008E84(&qword_100174878);
    v51 = swift_allocObject(v50, 152, 7);
    *(_OWORD *)(v51 + 16) = xmmword_10012AB20;
    *(_QWORD *)(v51 + 56) = sub_100008E84(&qword_100177CB0);
    v52 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    *(_QWORD *)(v51 + 32) = a1;
    *(_QWORD *)(v51 + 96) = &type metadata for UInt;
    *(_QWORD *)(v51 + 104) = &protocol witness table for UInt;
    *(_QWORD *)(v51 + 64) = v52;
    *(_QWORD *)(v51 + 72) = 2;
    *(_QWORD *)(v51 + 136) = &type metadata for String;
    *(_QWORD *)(v51 + 144) = sub_10000EA3C();
    v53 = v107;
    *(_QWORD *)(v51 + 112) = v38;
    *(_QWORD *)(v51 + 120) = v53;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v53);
    v54 = (void *)NSPredicate.init(format:_:)(0xD000000000000047, 0x8000000100138C70, v51);
    v22 = v104;
    v21 = v96;
  }
  else
  {
    defaultLogger()(v26);
    v40 = swift_bridgeObjectRetain_n(v107, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v100 = v16;
      v45 = v44;
      v111[0] = v44;
      v96 = v21;
      *(_DWORD *)v43 = 136315138;
      v46 = v107;
      swift_bridgeObjectRetain(v107);
      v109 = sub_10003FA80(v105, v46, v111);
      v22 = v104;
      v21 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v43 + 4);
      swift_bridgeObjectRelease_n(v46, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "fetchActiveRegionsInPartitions docType %s", v43, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      v47 = v45;
      v16 = v100;
      swift_slowDealloc(v47, -1, -1);
      v48 = v43;
      v49 = v105;
      swift_slowDealloc(v48, -1, -1);

      v102 = *(_QWORD *)(v102 + 8);
      ((void (*)(char *, uint64_t))v102)(v10, v106);
    }
    else
    {

      swift_bridgeObjectRelease_n(v107, 2);
      v102 = *(_QWORD *)(v102 + 8);
      ((void (*)(char *, uint64_t))v102)(v10, v106);
      v49 = v105;
    }
    sub_100039BA4();
    v55 = sub_100008E84(&qword_100174878);
    v56 = swift_allocObject(v55, 112, 7);
    *(_OWORD *)(v56 + 16) = xmmword_10012A5D0;
    *(_QWORD *)(v56 + 56) = &type metadata for UInt;
    *(_QWORD *)(v56 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v56 + 32) = 2;
    *(_QWORD *)(v56 + 96) = &type metadata for String;
    *(_QWORD *)(v56 + 104) = sub_10000EA3C();
    v57 = v107;
    *(_QWORD *)(v56 + 72) = v49;
    *(_QWORD *)(v56 + 80) = v57;
    swift_bridgeObjectRetain(v57);
    v54 = (void *)NSPredicate.init(format:_:)(0xD000000000000028, 0x8000000100138C10, v56);
  }
  objc_msgSend(v22, "setPredicate:", v54);

  v58 = v103;
  result = NSManagedObjectContext.fetch<A>(_:)(v22, v21);
  if (v58)
  {

    v60 = v97;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, enum case for DIPError.Code.internalError(_:), v99);
    swift_errorRetain(v58);
    v61 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v62 = type metadata accessor for DIPError(0);
    v63 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v62, v63, 0, 0);
    v64 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v58, v60, 0, v61, 0xD00000000000006ALL, 0x8000000100138A40, 0xD00000000000002BLL, 0x8000000100138C40, 347);
    swift_willThrow(v64);
    swift_errorRelease(v58);
    v65 = v101;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v65, v16);
    return v62;
  }
  v66 = result;
  v107 = 0;
  v100 = v16;
  v112 = &_swiftEmptySetSingleton;
  v94 = v17;
  if (!((unint64_t)result >> 62))
  {
    v67 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v67)
      goto LABEL_14;
LABEL_31:
    v78 = swift_bridgeObjectRelease(v66);
    v79 = v95;
    v80 = defaultLogger()(v78);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = swift_slowAlloc(32, -1);
      v111[0] = v84;
      *(_DWORD *)v83 = 136315138;
      swift_beginAccess(&v112, &v109, 0, 0);
      v85 = v112;
      v86 = swift_bridgeObjectRetain(v112);
      v87 = Set.description.getter(v86);
      v89 = v88;
      swift_bridgeObjectRelease(v85);
      v108 = sub_10003FA80(v87, v89, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v83 + 4);
      swift_bridgeObjectRelease(v89);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "fetchActiveRegionsInPartitions returning %s", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      v90 = v95;
    }
    else
    {

      v90 = v79;
    }
    ((void (*)(char *, uint64_t))v102)(v90, v106);
    v91 = v100;
    swift_beginAccess(&v112, v111, 0, 0);
    v62 = (uint64_t)v112;
    v92 = v101;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v91);
    return v62;
  }
  if (result < 0)
    v77 = result;
  else
    v77 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v67 = _CocoaArrayWrapper.endIndex.getter(v77);
  result = swift_bridgeObjectRelease(v66);
  if (!v67)
    goto LABEL_31;
LABEL_14:
  if (v67 >= 1)
  {
    v68 = 0;
    while (1)
    {
      if ((v66 & 0xC000000000000001) != 0)
        v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v68, v66);
      else
        v69 = *(id *)(v66 + 8 * v68 + 32);
      v70 = v69;
      v71 = objc_msgSend(v69, "region");
      if (v71)
      {
        v72 = v71;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        v75 = v74;

        v76 = HIBYTE(v75) & 0xF;
        if ((v75 & 0x2000000000000000) == 0)
          v76 = v73 & 0xFFFFFFFFFFFFLL;
        if (v76)
        {
          sub_100005E20(v111, v73, v75);

          swift_bridgeObjectRelease(v111[1]);
          goto LABEL_18;
        }
        swift_bridgeObjectRelease(v75);
      }

LABEL_18:
      if (v67 == ++v68)
        goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

void (*sub_10011CFB8(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10011FE44(v6, a2, a3);
  return sub_10011D024;
}

void sub_10011D024(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

uint64_t sub_10011D05C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint8_t *v27;
  unint64_t v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  void (*v37)(_QWORD *@<X8>);
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t result;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint8_t *v94;
  uint64_t v95;
  _BYTE v96[24];
  uint64_t v97[4];
  _QWORD *v98;

  v2 = type metadata accessor for DIPError.Code(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v84 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveDocTypes.getter(v11);
  v85 = v13;
  DIPSignpost.init(_:)(v9);
  v14 = type metadata accessor for StoredPayload(0);
  v15 = (id)static StoredPayload.fetchRequest()();
  v16 = sub_100008E84(&qword_1001748A0);
  v17 = swift_allocObject(v16, 96, 7);
  v93 = xmmword_10012A5D0;
  *(_OWORD *)(v17 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v17 + 32) = 0x65707954636F64;
  *(_QWORD *)(v17 + 40) = 0xE700000000000000;
  *(_QWORD *)(v17 + 88) = &type metadata for String;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = 0x6E6F69676572;
  *(_QWORD *)(v17 + 72) = 0xE600000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v15, "setPropertiesToFetch:", isa);

  v19 = *(_QWORD *)(a1 + 16);
  sub_100039BA4();
  v20 = sub_100008E84(&qword_100174878);
  v90 = v15;
  if (v19)
  {
    v21 = swift_allocObject(v20, 112, 7);
    *(_OWORD *)(v21 + 16) = v93;
    *(_QWORD *)(v21 + 56) = sub_100008E84(&qword_100177CB0);
    v15 = v90;
    v22 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    *(_QWORD *)(v21 + 32) = a1;
    *(_QWORD *)(v21 + 96) = &type metadata for UInt;
    *(_QWORD *)(v21 + 104) = &protocol witness table for UInt;
    *(_QWORD *)(v21 + 64) = v22;
    *(_QWORD *)(v21 + 72) = 2;
    swift_bridgeObjectRetain(a1);
    v23 = 0xD000000000000035;
    v24 = 0x8000000100138F10;
    v25 = v21;
  }
  else
  {
    v25 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_10012A6D0;
    *(_QWORD *)(v25 + 56) = &type metadata for UInt;
    *(_QWORD *)(v25 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v25 + 32) = 2;
    v24 = 0x8000000100138EC0;
    v23 = 0xD000000000000016;
  }
  v26 = (void *)NSPredicate.init(format:_:)(v23, v24, v25);
  objc_msgSend(v15, "setPredicate:", v26);

  v27 = v94;
  v28 = NSManagedObjectContext.fetch<A>(_:)(v15, v14);
  v29 = v27;
  if (v27)
  {

    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DIPError.Code.internalError(_:), v2);
    swift_errorRetain(v27);
    v30 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v31 = type metadata accessor for DIPError(0);
    v32 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v31, v32, 0, 0);
    v33 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v27, v5, 0, v30, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000022, 0x8000000100138EE0, 313);
    swift_willThrow(v33);
    swift_errorRelease(v27);
    v34 = v85;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v34, v87);
    return v30;
  }
  isUniquelyReferenced_nonNull_native = v28;
  v98 = _swiftEmptyDictionarySingleton;
  if (v28 >> 62)
  {
LABEL_41:
    if (isUniquelyReferenced_nonNull_native < 0)
      v80 = isUniquelyReferenced_nonNull_native;
    else
      v80 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
    v36 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  }
  else
  {
    v36 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v81 = v29;
  v37 = 0;
  if (!v36)
  {
LABEL_33:
    v66 = swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    v67 = v84;
    v68 = defaultLogger()(v66);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v97[0] = v72;
      *(_DWORD *)v71 = 136315138;
      v94 = v71 + 4;
      swift_beginAccess(&v98, v96, 0, 0);
      v73 = v98;
      swift_bridgeObjectRetain(v98);
      v74 = sub_100008E84(&qword_1001770B0);
      v75 = Dictionary.description.getter(v73, &type metadata for String, v74, &protocol witness table for String);
      v77 = v76;
      swift_bridgeObjectRelease(v73);
      v95 = sub_10003FA80(v75, v77, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v94);
      swift_bridgeObjectRelease(v77);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "fetchActiveDocTypesAndRegions returning %s", v71, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v82 + 8))(v67, v83);
    }
    swift_beginAccess(&v98, v97, 0, 0);
    v30 = (unint64_t)v98;
    v78 = v85;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v78, v87);
    sub_100008FC0((uint64_t)v37, 0);
    return v30;
  }
  *(_QWORD *)&v93 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  v38 = 4;
  v88 = v36;
  v89 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    v29 = (uint8_t *)(v38 - 4);
    if ((_QWORD)v93)
      v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, isUniquelyReferenced_nonNull_native);
    else
      v39 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v38);
    v40 = v39;
    v41 = v38 - 3;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v42 = objc_msgSend(v39, "docType", v81);
    if (v42)
      break;

LABEL_11:
    ++v38;
    if (v41 == v36)
      goto LABEL_33;
  }
  v43 = v42;
  v94 = (uint8_t *)(v38 - 3);
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v46 = v45;

  v47 = objc_msgSend(v40, "region");
  if (!v47)
  {
    swift_bridgeObjectRelease(v46);

LABEL_32:
    v41 = (uint64_t)v94;
    goto LABEL_11;
  }
  v48 = v47;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v91 = v50;
  v92 = v49;

  sub_100008FC0((uint64_t)v37, 0);
  v29 = (uint8_t *)v98;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v98);
  v97[0] = (uint64_t)v29;
  v98 = (_QWORD *)0x8000000000000000;
  v15 = (id)v44;
  v52 = sub_1000FBC04(v44, v46);
  v53 = *((_QWORD *)v29 + 2);
  v54 = (v51 & 1) == 0;
  v55 = v53 + v54;
  if (__OFADD__(v53, v54))
    goto LABEL_39;
  v56 = v51;
  if (*((_QWORD *)v29 + 3) >= v55)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_10007E9F8();
    goto LABEL_25;
  }
  sub_10007D1FC(v55, isUniquelyReferenced_nonNull_native);
  v57 = sub_1000FBC04(v44, v46);
  if ((v56 & 1) == (v58 & 1))
  {
    v52 = v57;
LABEL_25:
    isUniquelyReferenced_nonNull_native = v89;
    v29 = (uint8_t *)v97[0];
    v59 = v98;
    v98 = (_QWORD *)v97[0];
    swift_bridgeObjectRelease(v59);
    v60 = v29;
    if ((v56 & 1) == 0)
    {
      *(_QWORD *)&v29[8 * (v52 >> 6) + 64] |= 1 << v52;
      v61 = (uint64_t *)(*((_QWORD *)v29 + 6) + 16 * v52);
      *v61 = v44;
      v61[1] = v46;
      *(_QWORD *)(*((_QWORD *)v29 + 7) + 8 * v52) = &_swiftEmptySetSingleton;
      v62 = *((_QWORD *)v29 + 2);
      v63 = v62 + 1;
      v64 = __OFADD__(v62, 1);
      swift_bridgeObjectRetain(v29);
      if (v64)
        goto LABEL_40;
      *((_QWORD *)v29 + 2) = v63;
      v60 = (_QWORD *)v46;
    }
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRelease(v29);
    sub_100005E20(v97, v92, v91);
    v65 = v97[1];
    swift_bridgeObjectRelease(v46);

    swift_bridgeObjectRelease(v65);
    v37 = sub_10011F1B0;
    v15 = v90;
    v36 = v88;
    goto LABEL_32;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10011D94C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t i;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];
  void *v50;

  v44 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost(0);
  v9 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  v48 = v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveDocTypes.getter(v10);
  DIPSignpost.init(_:)(v7);
  v13 = type metadata accessor for StoredPayload(0);
  v14 = (void *)static StoredPayload.fetchRequest()();
  v15 = sub_100008E84(&qword_1001748A0);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 32) = 0x65707954636F64;
  *(_QWORD *)(v16 + 40) = 0xE700000000000000;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v14, "setPropertiesToFetch:", isa);

  sub_100039BA4();
  v18 = sub_100008E84(&qword_100174878);
  v19 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v19 + 56) = sub_100008E84(&qword_100177CB0);
  v20 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
  *(_QWORD *)(v19 + 32) = a1;
  *(_QWORD *)(v19 + 96) = &type metadata for UInt;
  *(_QWORD *)(v19 + 104) = &protocol witness table for UInt;
  *(_QWORD *)(v19 + 64) = v20;
  *(_QWORD *)(v19 + 72) = 2;
  swift_bridgeObjectRetain(a1);
  v21 = (void *)NSPredicate.init(format:_:)(0xD000000000000035, 0x8000000100138F10, v19);
  objc_msgSend(v14, "setPredicate:", v21);

  v22 = v46;
  result = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  if (v22)
  {

    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.internalError(_:), v44);
    swift_errorRetain(v22);
    v24 = (void *)sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v25 = type metadata accessor for DIPError(0);
    v26 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v25, v26, 0, 0);
    v27 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v22, v4, 0, v24, 0xD00000000000006ALL, 0x8000000100138A40, 0xD000000000000018, 0x8000000100138F50, 246);
    swift_willThrow(v27);
    swift_errorRelease(v22);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v47);
    return (uint64_t)v24;
  }
  v28 = result;
  v44 = 0;
  v45 = v14;
  v29 = v47;
  v46 = v12;
  v50 = &_swiftEmptySetSingleton;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v42 = result;
    else
      v42 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v30 = _CocoaArrayWrapper.endIndex.getter(v42);
    result = swift_bridgeObjectRelease(v28);
  }
  else
  {
    v30 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v31 = v48;
  v32 = v46;
  if (!v30)
  {

    swift_bridgeObjectRelease(v28);
    v24 = &_swiftEmptySetSingleton;
    v41 = v29;
LABEL_17:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v41);
    return (uint64_t)v24;
  }
  if (v30 >= 1)
  {
    for (i = 0; i != v30; ++i)
    {
      if ((v28 & 0xC000000000000001) != 0)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v28);
      else
        v38 = *(id *)(v28 + 8 * i + 32);
      v39 = v38;
      v40 = objc_msgSend(v38, "docType");
      if (v40)
      {
        v34 = v40;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v37 = v36;

        sub_100005E20(v49, v35, v37);
        swift_bridgeObjectRelease(v49[1]);
      }
      else
      {

      }
    }

    swift_bridgeObjectRelease(v28);
    v24 = v50;
    v41 = v47;
    v31 = v48;
    v32 = v46;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011DE30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v101 = a4;
  v110 = a3;
  v108 = a2;
  v7 = type metadata accessor for Logger(0);
  v105 = *(_QWORD *)(v7 - 8);
  v106 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v98 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v98 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v98 - v17;
  v19 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DIPSignpost(0);
  v103 = *(_QWORD *)(v22 - 8);
  v104 = v22;
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveCredentialsByDocTypeAndRegion.getter(v23);
  v102 = v25;
  DIPSignpost.init(_:)(v21);
  v107 = type metadata accessor for StoredCredential(0);
  v26 = (void *)static StoredCredential.fetchRequest()();
  v109 = v26;
  if (*(_QWORD *)(a1 + 16))
  {
    if (!a5)
    {
      defaultLogger()(v26);
      swift_bridgeObjectRetain_n(a1, 2);
      v55 = v110;
      v56 = swift_bridgeObjectRetain_n(v110, 2);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(22, -1);
        v101 = swift_slowAlloc(64, -1);
        v113 = v101;
        *(_DWORD *)v59 = 136315394;
        swift_bridgeObjectRetain(a1);
        v61 = Array.description.getter(v60, &type metadata for String);
        v63 = v62;
        swift_bridgeObjectRelease(a1);
        v111 = sub_10003FA80(v61, v63, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v59 + 4);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease(v63);
        *(_WORD *)(v59 + 12) = 2080;
        swift_bridgeObjectRetain(v55);
        v64 = v108;
        v111 = sub_10003FA80(v108, v55, &v113);
        v65 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v59 + 14);
        v66 = v55;
        swift_bridgeObjectRelease_n(v55, 3);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "fetchActiveCredentialsByDocTypeAndRegion partitions %s docType %s", (uint8_t *)v59, 0x16u);
        v67 = v101;
        swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        (*(void (**)(char *, uint64_t))(v105 + 8))(v16, v106);
        v69 = v103;
        v68 = v104;
        v70 = v102;
      }
      else
      {

        v66 = v55;
        swift_bridgeObjectRelease_n(v55, 2);
        swift_bridgeObjectRelease_n(a1, 2);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v16, v106);
        v69 = v103;
        v68 = v104;
        v70 = v102;
        v65 = v108;
      }
      sub_100039BA4();
      v87 = sub_100008E84(&qword_100174878);
      v88 = swift_allocObject(v87, 152, 7);
      *(_OWORD *)(v88 + 16) = xmmword_10012AB20;
      *(_QWORD *)(v88 + 56) = sub_100008E84(&qword_100177CB0);
      v89 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
      *(_QWORD *)(v88 + 32) = a1;
      *(_QWORD *)(v88 + 96) = &type metadata for UInt;
      *(_QWORD *)(v88 + 104) = &protocol witness table for UInt;
      *(_QWORD *)(v88 + 64) = v89;
      *(_QWORD *)(v88 + 72) = 2;
      *(_QWORD *)(v88 + 136) = &type metadata for String;
      *(_QWORD *)(v88 + 144) = sub_10000EA3C();
      *(_QWORD *)(v88 + 112) = v65;
      *(_QWORD *)(v88 + 120) = v66;
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(v66);
      v90 = (void *)NSPredicate.init(format:_:)(0xD00000000000003DLL, 0x8000000100138E20, v88);
      goto LABEL_24;
    }
    swift_bridgeObjectRetain(a5);
    defaultLogger()(v27);
    swift_bridgeObjectRetain_n(a5, 2);
    swift_bridgeObjectRetain_n(a1, 2);
    v28 = v110;
    v29 = swift_bridgeObjectRetain_n(v110, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(32, -1);
      v100 = v32;
      v34 = v33;
      v99 = swift_slowAlloc(96, -1);
      v113 = v99;
      *(_DWORD *)v34 = 136315650;
      swift_bridgeObjectRetain(a1);
      v36 = Array.description.getter(v35, &type metadata for String);
      v38 = v37;
      swift_bridgeObjectRelease(a1);
      v111 = sub_10003FA80(v36, v38, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v34 + 4);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain(v110);
      v39 = v108;
      v111 = sub_10003FA80(v108, v110, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v34 + 14);
      swift_bridgeObjectRelease_n(v110, 3);
      *(_WORD *)(v34 + 22) = 2080;
      swift_bridgeObjectRetain(a5);
      v40 = v101;
      v111 = sub_10003FA80(v101, a5, &v113);
      v41 = v39;
      v28 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v34 + 24);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v100, "fetchActiveCredentialsByDocTypeAndRegion partitions %s docType %s region %s ", (uint8_t *)v34, 0x20u);
      v42 = v99;
      swift_arrayDestroy(v99, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      (*(void (**)(char *, uint64_t))(v105 + 8))(v18, v106);
    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(v28, 2);
      swift_bridgeObjectRelease_n(a1, 2);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v18, v106);
      v41 = v108;
      v40 = v101;
    }
    sub_100039BA4();
    v81 = sub_100008E84(&qword_100174878);
    v82 = swift_allocObject(v81, 192, 7);
    *(_OWORD *)(v82 + 16) = xmmword_10012AB30;
    *(_QWORD *)(v82 + 56) = sub_100008E84(&qword_100177CB0);
    v83 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    *(_QWORD *)(v82 + 32) = a1;
    *(_QWORD *)(v82 + 96) = &type metadata for UInt;
    *(_QWORD *)(v82 + 104) = &protocol witness table for UInt;
    *(_QWORD *)(v82 + 64) = v83;
    *(_QWORD *)(v82 + 72) = 2;
    *(_QWORD *)(v82 + 136) = &type metadata for String;
    v84 = sub_10000EA3C();
    *(_QWORD *)(v82 + 112) = v41;
    *(_QWORD *)(v82 + 120) = v28;
    *(_QWORD *)(v82 + 176) = &type metadata for String;
    *(_QWORD *)(v82 + 184) = v84;
    *(_QWORD *)(v82 + 144) = v84;
    *(_QWORD *)(v82 + 152) = v40;
    *(_QWORD *)(v82 + 160) = a5;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v28);
    v85 = 0xD00000000000005BLL;
    v86 = "partition IN %@ AND state = %d AND ANY payloads.docType == %@ AND ANY payloads.region == %@";
LABEL_23:
    v90 = (void *)NSPredicate.init(format:_:)(v85, (unint64_t)(v86 - 32) | 0x8000000000000000, v82);
    v69 = v103;
    v68 = v104;
    v70 = v102;
LABEL_24:
    v80 = v107;
    goto LABEL_25;
  }
  if (a5)
  {
    v43 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0)
      v43 = v101 & 0xFFFFFFFFFFFFLL;
    if (v43)
    {
      swift_bridgeObjectRetain(a5);
      defaultLogger()(v44);
      swift_bridgeObjectRetain_n(a5, 2);
      v45 = v110;
      v46 = swift_bridgeObjectRetain_n(v110, 2);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.debug.getter();
      v49 = os_log_type_enabled(v47, v48);
      v50 = v108;
      if (v49)
      {
        v51 = swift_slowAlloc(22, -1);
        v52 = swift_slowAlloc(64, -1);
        v113 = v52;
        *(_DWORD *)v51 = 136315394;
        swift_bridgeObjectRetain(v110);
        v111 = sub_10003FA80(v50, v110, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v51 + 4);
        swift_bridgeObjectRelease_n(v110, 3);
        *(_WORD *)(v51 + 12) = 2080;
        swift_bridgeObjectRetain(a5);
        v53 = v101;
        v111 = sub_10003FA80(v101, a5, &v113);
        v50 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v51 + 14);
        swift_bridgeObjectRelease_n(a5, 3);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "fetchActiveCredentialsByDocTypeAndRegion docType %s region %s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
        v54 = v52;
        v45 = v110;
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v51, -1, -1);

        (*(void (**)(char *, uint64_t))(v105 + 8))(v13, v106);
      }
      else
      {

        swift_bridgeObjectRelease_n(a5, 2);
        swift_bridgeObjectRelease_n(v45, 2);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v13, v106);
        v53 = v101;
      }
      sub_100039BA4();
      v93 = sub_100008E84(&qword_100174878);
      v82 = swift_allocObject(v93, 152, 7);
      *(_OWORD *)(v82 + 16) = xmmword_10012AB20;
      *(_QWORD *)(v82 + 56) = &type metadata for UInt;
      *(_QWORD *)(v82 + 64) = &protocol witness table for UInt;
      *(_QWORD *)(v82 + 32) = 2;
      *(_QWORD *)(v82 + 96) = &type metadata for String;
      v94 = sub_10000EA3C();
      *(_QWORD *)(v82 + 72) = v50;
      *(_QWORD *)(v82 + 80) = v45;
      *(_QWORD *)(v82 + 136) = &type metadata for String;
      *(_QWORD *)(v82 + 144) = v94;
      *(_QWORD *)(v82 + 104) = v94;
      *(_QWORD *)(v82 + 112) = v53;
      *(_QWORD *)(v82 + 120) = a5;
      swift_bridgeObjectRetain(v45);
      v85 = 0xD000000000000047;
      v86 = "state = %d AND ANY payloads.docType == %@ AND ANY payloads.region == %@";
      goto LABEL_23;
    }
  }
  defaultLogger()(v26);
  v71 = v110;
  v72 = swift_bridgeObjectRetain_n(v110, 2);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(12, -1);
    v76 = swift_slowAlloc(32, -1);
    v113 = v76;
    *(_DWORD *)v75 = 136315138;
    swift_bridgeObjectRetain(v71);
    v77 = v108;
    v111 = sub_10003FA80(v108, v71, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v75 + 4);
    swift_bridgeObjectRelease_n(v71, 3);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "fetchActiveCredentialsByDocTypeAndRegion docType %s", v75, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    v78 = v76;
    v79 = v77;
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    (*(void (**)(char *, uint64_t))(v105 + 8))(v10, v106);
    v69 = v103;
    v68 = v104;
    v70 = v102;
    v80 = v107;
  }
  else
  {

    swift_bridgeObjectRelease_n(v71, 2);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v10, v106);
    v69 = v103;
    v68 = v104;
    v70 = v102;
    v80 = v107;
    v79 = v108;
  }
  sub_100039BA4();
  v91 = sub_100008E84(&qword_100174878);
  v92 = swift_allocObject(v91, 112, 7);
  *(_OWORD *)(v92 + 16) = xmmword_10012A5D0;
  *(_QWORD *)(v92 + 56) = &type metadata for UInt;
  *(_QWORD *)(v92 + 64) = &protocol witness table for UInt;
  *(_QWORD *)(v92 + 32) = 2;
  *(_QWORD *)(v92 + 96) = &type metadata for String;
  *(_QWORD *)(v92 + 104) = sub_10000EA3C();
  *(_QWORD *)(v92 + 72) = v79;
  *(_QWORD *)(v92 + 80) = v71;
  swift_bridgeObjectRetain(v71);
  v90 = (void *)NSPredicate.init(format:_:)(0xD000000000000029, 0x8000000100138DA0, v92);
LABEL_25:
  v95 = v109;
  objc_msgSend(v109, "setPredicate:", v90);

  v96 = NSManagedObjectContext.fetch<A>(_:)(v95, v80);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v68);
  return v96;
}

uint64_t sub_10011EA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a2;
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DIPSignpost(0);
  v8 = *(_QWORD *)(v29 - 8);
  v9 = __chkstk_darwin(v29);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchActiveCredentialsByDocType.getter(v9);
  DIPSignpost.init(_:)(v7);
  v12 = type metadata accessor for StoredCredential(0);
  v13 = (void *)static StoredCredential.fetchRequest()();
  v14 = *(_QWORD *)(a1 + 16);
  sub_100039BA4();
  v15 = sub_100008E84(&qword_100174878);
  if (v14)
  {
    v16 = swift_allocObject(v15, 152, 7);
    v27 = v12;
    v17 = (_QWORD *)v16;
    *(_OWORD *)(v16 + 16) = xmmword_10012AB20;
    *(_QWORD *)(v16 + 56) = sub_100008E84(&qword_100177CB0);
    v18 = sub_1001206D8((unint64_t *)&qword_100178A50, &qword_100177CB0);
    v17[4] = a1;
    v17[12] = &type metadata for UInt;
    v17[13] = &protocol witness table for UInt;
    v17[8] = v18;
    v17[9] = 2;
    v17[17] = &type metadata for String;
    v17[18] = sub_10000EA3C();
    v17[14] = v28;
    v17[15] = a3;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    v19 = 0xD00000000000003DLL;
    v20 = 0x8000000100138E20;
    v21 = v17;
    v12 = v27;
  }
  else
  {
    v22 = swift_allocObject(v15, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_10012A5D0;
    *(_QWORD *)(v22 + 56) = &type metadata for UInt;
    *(_QWORD *)(v22 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v22 + 32) = 2;
    *(_QWORD *)(v22 + 96) = &type metadata for String;
    *(_QWORD *)(v22 + 104) = sub_10000EA3C();
    *(_QWORD *)(v22 + 72) = v28;
    *(_QWORD *)(v22 + 80) = a3;
    swift_bridgeObjectRetain(a3);
    v20 = 0x8000000100138DA0;
    v19 = 0xD000000000000029;
    v21 = (_QWORD *)v22;
  }
  v23 = (void *)NSPredicate.init(format:_:)(v19, v20, v21);
  objc_msgSend(v13, "setPredicate:", v23);

  v24 = NSManagedObjectContext.fetch<A>(_:)(v13, v12);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v29);
  return v24;
}

uint64_t sub_10011ED50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DIPSignpost(0);
  v5 = *(_QWORD *)(v25 - 8);
  v6 = __chkstk_darwin(v25);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchCredentialInStates.getter(v6);
  DIPSignpost.init(_:)(v4);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v24 = v5;
    v26 = _swiftEmptyArrayStorage;
    sub_100055890(0, v9, 0);
    v10 = v26;
    v11 = (uint64_t *)(a1 + 32);
    v12 = v26[2];
    do
    {
      v14 = *v11++;
      v13 = v14;
      v26 = v10;
      v15 = v10[3];
      if (v12 >= v15 >> 1)
      {
        sub_100055890(v15 > 1, v12 + 1, 1);
        v10 = v26;
      }
      v10[2] = v12 + 1;
      v10[v12++ + 4] = v13;
      --v9;
    }
    while (v9);
    v5 = v24;
  }
  v16 = type metadata accessor for StoredCredential(0);
  v17 = (void *)static StoredCredential.fetchRequest()();
  sub_100039BA4();
  v18 = sub_100008E84(&qword_100174878);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v19 + 56) = sub_100008E84(&qword_100178A78);
  *(_QWORD *)(v19 + 64) = sub_1001206D8((unint64_t *)&unk_100178A80, &qword_100178A78);
  *(_QWORD *)(v19 + 32) = v10;
  v20 = (void *)NSPredicate.init(format:_:)(0x4E49206574617473, 0xEB00000000402520, v19);
  objc_msgSend(v17, "setPredicate:", v20);

  v21 = NSManagedObjectContext.fetch<A>(_:)(v17, v16);
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v25);
  return v21;
}

_QWORD *sub_10011EFBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v19 = _swiftEmptyArrayStorage;
  sub_100055874(0, v3 & ~(v3 >> 63), 0);
  v4 = v19;
  if (!v2)
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_10:
    for (i = 4; ; ++i)
    {
      v7 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
        v9 = i - 3;
        if (__OFADD__(v7, 1))
          goto LABEL_25;
      }
      else
      {
        v8 = swift_unknownObjectRetain(*(_QWORD *)(a1 + 8 * i));
        v9 = i - 3;
        if (__OFADD__(v7, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          if (a1 < 0)
            v16 = a1;
          else
            v16 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v3 = _CocoaArrayWrapper.endIndex.getter(v16);
          swift_bridgeObjectRelease(a1);
          goto LABEL_3;
        }
      }
      v18 = v8;
      v10 = sub_100008E84((uint64_t *)&unk_100178A40);
      v11 = sub_100008E84((uint64_t *)&unk_100178A60);
      if (!swift_dynamicCast(&v17, &v18, v10, v11, 6))
      {
        v17 = 0;
        swift_release(v4);
        swift_bridgeObjectRelease(v17);
        return 0;
      }
      v12 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      {
        sub_100055874(0, v4[2] + 1, 1);
        v4 = v19;
      }
      v14 = v4[2];
      v13 = v4[3];
      if (v14 >= v13 >> 1)
      {
        sub_100055874(v13 > 1, v14 + 1, 1);
        v4 = v19;
      }
      v4[2] = v14 + 1;
      v4[v14 + 4] = v12;
      if (v9 == v2)
        return v4;
    }
  }
  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(a1);
  if (v2)
    goto LABEL_10;
  return v4;
}

void sub_10011F1B0(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptySetSingleton;
}

unint64_t sub_10011F1C0(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_10011F204(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for SESKeystore.KeyDesignation(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  result = sub_100015124(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_10011F2B8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100041220(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_10011F320(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_10011F368(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_1000058C8((unint64_t *)&qword_100178A70, (uint64_t (*)(uint64_t))&type metadata accessor for SESKeystore.KeyDesignation, (uint64_t)&protocol conformance descriptor for SESKeystore.KeyDesignation);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10011F640(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10011F814(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10011F9E8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for SESKeystore.KeyDesignation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000FBB6C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
        return sub_100120694(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10007D6A4();
      goto LABEL_7;
    }
    sub_10007B48C(v17, a3 & 1);
    v24 = sub_1000FBB6C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10011F204(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10011FB68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10011FCD4(a1, a2, a3, a4, (void (*)(void))sub_10007DB18, (void (*)(void))sub_10007BB34);
}

void sub_10011FB7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10011FCD4(a1, a2, a3, a4, (void (*)(void))sub_10007DF80, (void (*)(void))sub_10007C1D0);
}

void sub_10011FB90(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1000FBC04(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10000CE40(v19);
        sub_100041220(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10007DF8C();
      goto LABEL_7;
    }
    sub_10007C1DC(v15, a4 & 1);
    v20 = sub_1000FBC04(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10011F2B8(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10011FCC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10011FCD4(a1, a2, a3, a4, (void (*)(void))sub_10007E170, (void (*)(void))sub_10007C4D8);
}

void sub_10011FCD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v14 = *v6;
  v16 = sub_1000FBC04(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v23 + 8 * v16));
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = a2;
    v26[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  a6();
  v24 = sub_1000FBC04(a2, a3);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void (*sub_10011FE44(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10012008C(v7);
  v7[10] = sub_10011FF24(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10011FED4;
}

void sub_10011FED4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_10011FF24(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_1000FBC04(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_100120050;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10007DF80();
      goto LABEL_7;
    }
    sub_10007C1D0(v16, a4 & 1);
    v20 = sub_1000FBC04(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100120050(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1001200B8(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_10012008C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001200AC;
}

uint64_t sub_1001200AC(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void sub_1001200B8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v8 = *a1;
  if (!*a1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
      sub_10011F814(a4, *a3);
    }
    goto LABEL_8;
  }
  v9 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v9[7] + 8 * a4) = v8;
LABEL_8:
    swift_bridgeObjectRetain(v8);
    return;
  }
  v9[(a4 >> 6) + 8] |= 1 << a4;
  v10 = (_QWORD *)(v9[6] + 16 * a4);
  *v10 = a5;
  v10[1] = a6;
  *(_QWORD *)(v9[7] + 8 * a4) = v8;
  v11 = v9[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (!v12)
  {
    v9[2] = v13;
    swift_bridgeObjectRetain(a6);
    goto LABEL_8;
  }
  __break(1u);
}

unint64_t sub_10012017C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  char v26;
  char **v27;
  char *v28;
  char **v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD *);
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD v69[4];
  _QWORD *v70;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v61 - v7;
  result = sub_10003E3FC((uint64_t)_swiftEmptyArrayStorage);
  v70 = (_QWORD *)result;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return result;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  v68 = 0x8000000100138B30;
  v63 = xmmword_10012A6D0;
  v64 = v3;
  v65 = v2;
  v66 = v10;
  v67 = v8;
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 8 * v12 + 32);
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_18;
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8 * v12 + 32));
    v14 = sub_1000FBC04(0x6F69746974726170, 0xE90000000000006ELL);
    if ((v15 & 1) == 0)
    {
      v11 = swift_bridgeObjectRelease(v13);
LABEL_18:
      v34 = defaultLogger()(v11);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "missing partition; skipping", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      goto LABEL_4;
    }
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_21;
    v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain(v18);
    v19 = sub_1000FBC04(0xD000000000000014, v68);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease(v18);
      v10 = v66;
      v8 = v67;
LABEL_21:
      v38 = swift_bridgeObjectRelease(v13);
      v39 = defaultLogger()(v38);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "missing credential identifier; skipping", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      goto LABEL_4;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v19);
    v22 = *v21;
    v23 = v21[1];
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v13);
    v24 = v70;
    if (!v70[2])
      break;
    swift_bridgeObjectRetain(v18);
    sub_1000FBC04(v17, v18);
    v26 = v25;
    swift_bridgeObjectRelease(v18);
    if ((v26 & 1) == 0)
      break;
    v62 = sub_10011CFB8(v69, v17, v18);
    v28 = *v27;
    if (*v27)
    {
      v29 = v27;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
      *v29 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v28 = sub_1000A73AC(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
        *v29 = v28;
      }
      v32 = *((_QWORD *)v28 + 2);
      v31 = *((_QWORD *)v28 + 3);
      if (v32 >= v31 >> 1)
      {
        v28 = sub_1000A73AC((char *)(v31 > 1), v32 + 1, 1, v28);
        *v29 = v28;
      }
      v2 = v65;
      *((_QWORD *)v28 + 2) = v32 + 1;
      v33 = &v28[16 * v32];
      *((_QWORD *)v33 + 4) = v22;
      *((_QWORD *)v33 + 5) = v23;
      ((void (*)(_QWORD *, _QWORD))v62)(v69, 0);
      v11 = swift_bridgeObjectRelease(v18);
      goto LABEL_38;
    }
    swift_bridgeObjectRelease(v23);
    ((void (*)(_QWORD *, _QWORD))v62)(v69, 0);
    v56 = v18;
LABEL_37:
    v11 = swift_bridgeObjectRelease(v56);
    v2 = v65;
LABEL_38:
    v3 = v64;
    v10 = v66;
    v8 = v67;
LABEL_4:
    if (v10 == ++v12)
    {
      swift_bridgeObjectRelease(a1);
      return (unint64_t)v70;
    }
  }
  v43 = sub_100008E84(&qword_1001752D8);
  v44 = swift_allocObject(v43, 48, 7);
  *(_OWORD *)(v44 + 16) = v63;
  *(_QWORD *)(v44 + 32) = v22;
  *(_QWORD *)(v44 + 40) = v23;
  v45 = swift_isUniquelyReferenced_nonNull_native(v24);
  v69[0] = v24;
  v47 = sub_1000FBC04(v17, v18);
  v48 = v24[2];
  v49 = (v46 & 1) == 0;
  v50 = v48 + v49;
  if (!__OFADD__(v48, v49))
  {
    v51 = v46;
    if (v24[3] < v50)
    {
      sub_10007C1D0(v50, v45);
      v52 = sub_1000FBC04(v17, v18);
      if ((v51 & 1) != (v53 & 1))
        goto LABEL_43;
      v47 = v52;
      v54 = (_QWORD *)v69[0];
      if ((v51 & 1) == 0)
        goto LABEL_34;
LABEL_31:
      v55 = v54[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v55 + 8 * v47));
      *(_QWORD *)(v55 + 8 * v47) = v44;
LABEL_36:
      v70 = v54;
      swift_bridgeObjectRelease(v18);
      v56 = 0x8000000000000000;
      goto LABEL_37;
    }
    if ((v45 & 1) != 0)
    {
      v54 = (_QWORD *)v69[0];
      if ((v46 & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      sub_10007DF80();
      v54 = (_QWORD *)v69[0];
      if ((v51 & 1) != 0)
        goto LABEL_31;
    }
LABEL_34:
    v54[(v47 >> 6) + 8] |= 1 << v47;
    v57 = (uint64_t *)(v54[6] + 16 * v47);
    *v57 = v17;
    v57[1] = v18;
    *(_QWORD *)(v54[7] + 8 * v47) = v44;
    v58 = v54[2];
    v59 = __OFADD__(v58, 1);
    v60 = v58 + 1;
    if (v59)
      goto LABEL_42;
    v54[2] = v60;
    swift_bridgeObjectRetain(v18);
    goto LABEL_36;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100120694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001206D8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100016404(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100120718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v15;
  int v16;
  int v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_100008E84((uint64_t *)&unk_100177B40);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPError.Code(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  DIPError.Code.init(rawValue:)(a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000D63C((uint64_t)v6);
    return -5000;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v15 == enum case for DIPError.Code.missingEntitlement(_:))
    goto LABEL_8;
  if (v15 == enum case for DIPError.Code.invalidStoredData(_:))
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5004;
  }
  if (v15 == enum case for DIPError.Code.idcsUnauthorizedPartition(_:))
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5002;
  }
  else if (v15 == enum case for DIPError.Code.idcsUnknownCredential(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5015;
  }
  else if (v15 == enum case for DIPError.Code.idcsInvalidPayload(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5101;
  }
  else if (v15 == enum case for DIPError.Code.idcsUnsupportedPayloadFormat(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5102;
  }
  else if (v15 == enum case for DIPError.Code.idcsIncorrectCredentialState(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return -5200;
  }
  else
  {
    if (v15 == enum case for DIPError.Code.idcsMissingPayload(_:)
      || v15 == enum case for DIPError.Code.idcsMissingKeySigningKey(_:)
      || v15 == enum case for DIPError.Code.idcsMissingDeviceEncryptionKey(_:)
      || v15 == enum case for DIPError.Code.idcsMissingPresentmentKey(_:)
      || v15 == enum case for DIPError.Code.idcsInvalidPublicKey(_:))
    {
      goto LABEL_6;
    }
    if (v15 == enum case for DIPError.Code.idcsInvalidCredentialStateTransition(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return -5201;
    }
    else if (v15 == enum case for DIPError.Code.idcsPublicKeyIdentifierAlreadyExists(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return -5016;
    }
    else if (v15 == enum case for DIPError.Code.idcsMisformattedIssuerAuthCerts(_:)
           || v15 == enum case for DIPError.Code.idcsUnknownIssuerAuthAlgorithm(_:)
           || v15 == enum case for DIPError.Code.idcsMisformattedIssuerAuthSignature(_:)
           || v15 == enum case for DIPError.Code.idcsInvalidIssuerAuthSignature(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return -5104;
    }
    else if (v15 == enum case for DIPError.Code.idcsPayloadRequiresAuth(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return -5017;
    }
    else if (v15 == enum case for DIPError.Code.idcsInvalidPayloadAuth(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      return -5018;
    }
    else
    {
      v16 = v15;
      v17 = enum case for DIPError.Code.idcsPayloadPresentmentKeyMismatch(_:);
      v18 = *(void (**)(char *, uint64_t))(v8 + 8);
      v18(v13, v7);
      if (v16 != v17)
      {
        v18(v11, v7);
        return -5000;
      }
      return -5105;
    }
  }
}

_QWORD *sub_100120C70(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *i;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v31 = a1;
  v32 = a2;
  v30[0] = 46;
  v30[1] = 0xE100000000000000;
  v2 = sub_1000533A0();
  result = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v30, &type metadata for String, &type metadata for String, v2, v2);
  v4 = result;
  if (result[2] != 2
    || ((v5 = result[4],
         v6 = result[5],
         v7 = HIBYTE(v6) & 0xF,
         v8 = v5 & 0xFFFFFFFFFFFFLL,
         (v6 & 0x2000000000000000) != 0)
      ? (v9 = HIBYTE(v6) & 0xF)
      : (v9 = v5 & 0xFFFFFFFFFFFFLL),
        !v9))
  {
LABEL_50:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(result[5]);
    v11 = (uint64_t)sub_100033F4C(v5, v6, 10);
    v5 = v29;
    swift_bridgeObjectRelease(v6);
    goto LABEL_45;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_59;
    for (i = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v6))
    {
      v11 = (uint64_t)sub_100033F38(i, v8, 10);
      v5 = v12 & 1;
LABEL_45:
      if ((v5 & 1) != 0)
        break;
      if (v4[2] >= 2uLL)
      {
        v23 = v4[6];
        v24 = v4[7];
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRelease(v4);
        sub_1000333D4(v23, v24);
        if ((v25 & 1) != 0)
          return 0;
        else
          return (_QWORD *)v11;
      }
      __break(1u);
LABEL_59:
      ;
    }
    goto LABEL_50;
  }
  v31 = result[4];
  v32 = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (!v7)
      goto LABEL_61;
    if (v7 == 1 || (BYTE1(v5) - 48) > 9u)
      goto LABEL_32;
    v11 = (BYTE1(v5) - 48);
    if (v7 != 2)
    {
      if ((BYTE2(v5) - 48) > 9u)
        goto LABEL_32;
      v11 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
      v14 = v7 - 3;
      if (v7 != 3)
      {
        v15 = (unsigned __int8 *)&v31 + 3;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_32;
          v17 = 10 * v11;
          if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
            goto LABEL_32;
          v11 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_32;
          v5 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_45;
        }
      }
    }
LABEL_44:
    v5 = 0;
    goto LABEL_45;
  }
  if (v5 != 45)
  {
    if (!v7 || (v5 - 48) > 9u)
      goto LABEL_32;
    v11 = (v5 - 48);
    if (v7 != 1)
    {
      if ((BYTE1(v5) - 48) > 9u)
        goto LABEL_32;
      v11 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
      v18 = v7 - 2;
      if (v7 != 2)
      {
        v19 = (unsigned __int8 *)&v31 + 2;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_32;
          v21 = 10 * v11;
          if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
            goto LABEL_32;
          v11 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_32;
          v5 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_45;
        }
      }
    }
    goto LABEL_44;
  }
  if (v7)
  {
    if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
    {
      v13 = (BYTE1(v5) - 48);
      if (v7 == 2)
      {
        v5 = 0;
        v11 = -v13;
        goto LABEL_45;
      }
      if ((BYTE2(v5) - 48) <= 9u)
      {
        v11 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
        v22 = v7 - 3;
        if (v7 == 3)
          goto LABEL_44;
        v26 = (unsigned __int8 *)&v31 + 3;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            break;
          v28 = 10 * v11;
          if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
            break;
          v11 = v28 - v27;
          if (__OFSUB__(v28, v27))
            break;
          v5 = 0;
          ++v26;
          if (!--v22)
            goto LABEL_45;
        }
      }
    }
LABEL_32:
    v11 = 0;
    v5 = 1;
    goto LABEL_45;
  }
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

uint64_t *sub_100120FD4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int (*v35)(char *, uint64_t, uint64_t, __n128);
  char *v36;
  char *__dst;
  uint64_t v38;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a3[7];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    v13 = type metadata accessor for CredentialElement(0);
    v14 = *(int *)(v13 + 20);
    __dst = (char *)v10 + v14;
    v38 = v13;
    v36 = v11;
    v15 = &v11[v14];
    v16 = type metadata accessor for AnyCodable(0);
    v17 = *(_QWORD *)(v16 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v18 = swift_bridgeObjectRetain(v12);
    if (v35(v15, 1, v16, v18))
    {
      v19 = sub_100008E84(&qword_1001752C8);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v21 = *(int *)(v38 + 24);
    v22 = (char *)v10 + v21;
    v23 = &v36[v21];
    v24 = *((_QWORD *)v23 + 1);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = *(_QWORD *)v23;
      sub_100005A38(*(_QWORD *)v23, *((_QWORD *)v23 + 1));
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
    }
    v26 = a3[8];
    v27 = a3[9];
    v28 = (uint64_t *)((char *)v4 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (uint64_t *)((char *)v4 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    v20 = v32[1];
    *v31 = *v32;
    v31[1] = v20;
    swift_retain(v30);
  }
  swift_retain(v20);
  return v4;
}

uint64_t type metadata accessor for CredentialElement(uint64_t a1)
{
  return sub_1000147F0(a1, (uint64_t *)&unk_100178C38, (uint64_t)&nominal type descriptor for CredentialElement);
}

uint64_t sub_1001211C4(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
  v5 = type metadata accessor for CredentialElement(0);
  v6 = &v4[*(int *)(v5 + 20)];
  v7 = type metadata accessor for AnyCodable(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v9 = (uint64_t *)&v4[*(int *)(v5 + 24)];
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_100005AB0(*v9, v10);
  swift_release(*(_QWORD *)((char *)a1 + a2[8] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[9] + 8));
}

_QWORD *sub_1001212AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int (*v34)(char *, uint64_t, uint64_t, __n128);
  char *v35;
  char *__dst;
  uint64_t v37;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a3[7];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  *v9 = *(_QWORD *)((char *)a2 + v8);
  v9[1] = v11;
  v12 = type metadata accessor for CredentialElement(0);
  v13 = *(int *)(v12 + 20);
  __dst = (char *)v9 + v13;
  v37 = v12;
  v35 = v10;
  v14 = &v10[v13];
  v15 = type metadata accessor for AnyCodable(0);
  v16 = *(_QWORD *)(v15 - 8);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v17 = swift_bridgeObjectRetain(v11);
  if (v34(v14, 1, v15, v17))
  {
    v18 = sub_100008E84(&qword_1001752C8);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = *(int *)(v37 + 24);
  v20 = (char *)v9 + v19;
  v21 = &v35[v19];
  v22 = *((_QWORD *)v21 + 1);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v23 = *(_QWORD *)v21;
    sub_100005A38(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
    *(_QWORD *)v20 = v23;
    *((_QWORD *)v20 + 1) = v22;
  }
  v24 = a3[8];
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)((char *)a1 + v25);
  v30 = (_QWORD *)((char *)a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_retain(v28);
  swift_retain(v31);
  return a1;
}

_QWORD *sub_100121460(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v46 = a3;
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  *v13 = *(_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  v16 = *(_QWORD *)((char *)a1 + v12 + 8);
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v45 = type metadata accessor for CredentialElement(0);
  v17 = *(int *)(v45 + 20);
  v18 = (char *)v13 + v17;
  v19 = &v14[v17];
  v20 = type metadata accessor for AnyCodable(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    v25 = sub_100008E84(&qword_1001752C8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_7:
  v26 = *(int *)(v45 + 24);
  v27 = (_QWORD *)((char *)v13 + v26);
  v28 = (uint64_t *)&v14[v26];
  v29 = *(_QWORD *)&v14[v26 + 8];
  if (*(_QWORD *)((char *)v13 + v26 + 8) >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      v31 = *v28;
      sub_100005A38(*v28, v29);
      v32 = *v27;
      v33 = v27[1];
      *v27 = v31;
      v27[1] = v29;
      sub_100005AB0(v32, v33);
      goto LABEL_14;
    }
    sub_100014A1C((uint64_t)v27);
    goto LABEL_12;
  }
  if (v29 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v27 = *(_OWORD *)v28;
    goto LABEL_14;
  }
  v30 = *v28;
  sub_100005A38(*v28, v29);
  *v27 = v30;
  v27[1] = v29;
LABEL_14:
  v34 = *(int *)(v46 + 32);
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  v37 = v36[1];
  v38 = v35[1];
  *v35 = *v36;
  v35[1] = v37;
  swift_retain(v37);
  swift_release(v38);
  v39 = *(int *)(v46 + 36);
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v42 = v41[1];
  v43 = v40[1];
  *v40 = *v41;
  v40[1] = v42;
  swift_retain(v42);
  swift_release(v43);
  return a1;
}

_OWORD *sub_1001216E4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for CredentialElement(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AnyCodable(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100008E84(&qword_1001752C8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_OWORD *)&v8[*(int *)(v10 + 24)] = *(_OWORD *)&v9[*(int *)(v10 + 24)];
  v17 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  return a1;
}

_QWORD *sub_100121800(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v38 = a3;
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  v16 = *(_QWORD *)((char *)a1 + v12 + 8);
  *v13 = *(_QWORD *)((char *)a2 + v12);
  v13[1] = v15;
  swift_bridgeObjectRelease(v16);
  v37 = type metadata accessor for CredentialElement(0);
  v17 = *(int *)(v37 + 20);
  v18 = (char *)v13 + v17;
  v19 = &v14[v17];
  v20 = type metadata accessor for AnyCodable(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    v25 = sub_100008E84(&qword_1001752C8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
LABEL_7:
  v26 = *(int *)(v37 + 24);
  v27 = (_QWORD *)((char *)v13 + v26);
  v28 = (uint64_t *)&v14[v26];
  v29 = *(_QWORD *)((char *)v13 + v26 + 8);
  if (v29 >> 60 != 15)
  {
    v30 = v28[1];
    if (v30 >> 60 != 15)
    {
      v31 = *v27;
      *v27 = *v28;
      v27[1] = v30;
      sub_100005AB0(v31, v29);
      goto LABEL_12;
    }
    sub_100014A1C((uint64_t)v27);
  }
  *(_OWORD *)v27 = *(_OWORD *)v28;
LABEL_12:
  v32 = *(int *)(v38 + 32);
  v33 = *(_QWORD *)((char *)a1 + v32 + 8);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  swift_release(v33);
  v34 = *(int *)(v38 + 36);
  v35 = *(_QWORD *)((char *)a1 + v34 + 8);
  *(_OWORD *)((char *)a1 + v34) = *(_OWORD *)((char *)a2 + v34);
  swift_release(v35);
  return a1;
}

uint64_t sub_1001219FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100121A08);
}

uint64_t sub_100121A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CredentialElement(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100121A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100121A90);
}

uint64_t sub_100121A90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CredentialElement(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ElementFallback(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100178AE8, (uint64_t)&nominal type descriptor for ElementFallback);
}

uint64_t sub_100121B18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10012C110;
  v4[1] = &unk_10012C110;
  v4[2] = &unk_10012C110;
  result = type metadata accessor for CredentialElement(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_100121BA0(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    v9 = *((_QWORD *)a2 + 4);
    swift_bridgeObjectRetain(v7);
    sub_100005A38(v8, v9);
    *((_QWORD *)a1 + 3) = v8;
    *((_QWORD *)a1 + 4) = v9;
    v10 = *((_QWORD *)a2 + 5);
    v11 = *((_QWORD *)a2 + 6);
    sub_100005A38(v10, v11);
    *((_QWORD *)a1 + 5) = v10;
    *((_QWORD *)a1 + 6) = v11;
    v12 = a3[8];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v16(&a1[a3[9]], &a2[a3[9]], v15);
    v17 = a3[10];
    v18 = a3[11];
    v19 = &a1[v17];
    v20 = &a2[v17];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = &a1[v18];
    v23 = &a2[v18];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = a3[12];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
  }
  return a1;
}

uint64_t sub_100121CD8(char *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);

  swift_bridgeObjectRelease(*((_QWORD *)a1 + 1));
  sub_100005AB0(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
  sub_100005AB0(*((_QWORD *)a1 + 5), *((_QWORD *)a1 + 6));
  v4 = &a1[a2[8]];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(&a1[a2[9]], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[a2[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[a2[11] + 8]);
  return swift_bridgeObjectRelease(*(_QWORD *)&a1[a2[12] + 8]);
}

char *sub_100121D84(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain(v6);
  sub_100005A38(v7, v8);
  *((_QWORD *)a1 + 3) = v7;
  *((_QWORD *)a1 + 4) = v8;
  v9 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  sub_100005A38(v9, v10);
  *((_QWORD *)a1 + 5) = v9;
  *((_QWORD *)a1 + 6) = v10;
  v11 = a3[8];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v15(&a1[a3[9]], &a2[a3[9]], v14);
  v16 = a3[10];
  v17 = a3[11];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = &a1[v17];
  v22 = &a2[v17];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v24 = a3[12];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v27);
  return a1;
}

char *sub_100121E90(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  sub_100005A38(v8, v9);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 3) = v8;
  *((_QWORD *)a1 + 4) = v9;
  sub_100005AB0(v10, v11);
  v12 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)a2 + 6);
  sub_100005A38(v12, v13);
  v14 = *((_QWORD *)a1 + 5);
  v15 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 5) = v12;
  *((_QWORD *)a1 + 6) = v13;
  sub_100005AB0(v14, v15);
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24);
  v20(v17, v18, v19);
  v20(&a1[a3[9]], &a2[a3[9]], v19);
  v21 = a3[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v25 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[11];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  v30 = *((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[12];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  v35 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  return a1;
}

uint64_t sub_100121FF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + a3[9], a2 + a3[9], v9);
  v11 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1001220BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v8;
  sub_100005AB0(v9, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100005AB0(v11, v12);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v17(a1 + a3[9], a2 + a3[9], v16);
  v18 = a3[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[11];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[12];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  return a1;
}

uint64_t sub_1001221CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001221D8);
}

uint64_t sub_1001221D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100122254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100122260);
}

uint64_t sub_100122260(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PayloadMetadata(uint64_t a1)
{
  return sub_1000147F0(a1, qword_100178B88, (uint64_t)&nominal type descriptor for PayloadMetadata);
}

uint64_t sub_1001222E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v4[0] = &unk_10012C110;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_10012C138;
  v4[3] = &unk_10012C138;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_10012C150;
    v8 = &unk_10012C150;
    v9 = &unk_10012C150;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100122384(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AnyCodable(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100008E84(&qword_1001752C8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = *(int *)(a3 + 24);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_QWORD *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      sub_100005A38(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
  }
  return v4;
}

uint64_t sub_1001224C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AnyCodable(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_100005AB0(*v8, v9);
  return result;
}

_QWORD *sub_100122570(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AnyCodable(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100008E84(&qword_1001752C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_QWORD *)v17 + 1);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_100005A38(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  return a1;
}

_QWORD *sub_100122688(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AnyCodable(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100008E84(&qword_1001752C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = *(_QWORD *)((char *)a2 + v17 + 8);
  if (*(_QWORD *)((char *)a1 + v17 + 8) >> 60 != 15)
  {
    if (v20 >> 60 != 15)
    {
      v22 = *v19;
      sub_100005A38(v22, v20);
      v23 = *v18;
      v24 = v18[1];
      *v18 = v22;
      v18[1] = v20;
      sub_100005AB0(v23, v24);
      return a1;
    }
    sub_100014A1C((uint64_t)v18);
    goto LABEL_12;
  }
  if (v20 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  v21 = *v19;
  sub_100005A38(v21, v20);
  *v18 = v21;
  v18[1] = v20;
  return a1;
}

_OWORD *sub_100122838(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AnyCodable(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100008E84(&qword_1001752C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100122910(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for AnyCodable(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100008E84(&qword_1001752C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = *(_QWORD *)((char *)a1 + v17 + 8);
  if (v20 >> 60 != 15)
  {
    v21 = v19[1];
    if (v21 >> 60 != 15)
    {
      v22 = *v18;
      *v18 = *v19;
      v18[1] = v21;
      sub_100005AB0(v22, v20);
      return a1;
    }
    sub_100014A1C((uint64_t)v18);
  }
  *(_OWORD *)v18 = *(_OWORD *)v19;
  return a1;
}

uint64_t sub_100122A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100122A8C);
}

uint64_t sub_100122A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100008E84(&qword_1001752C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100122B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100122B18);
}

uint64_t sub_100122B18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100008E84(&qword_1001752C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_100122B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10012C110;
  sub_100122C0C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_10012C188;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100122C0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100178C48)
  {
    v2 = type metadata accessor for AnyCodable(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100178C48);
  }
}

uint64_t sub_100122C60(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58[8];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v5 = type metadata accessor for DIPError.Code(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAuthACL.getter(v11);
  DIPSignpost.init(_:)(v9);
  v14 = type metadata accessor for StoredAuthACL(0);
  v15 = (void *)static StoredAuthACL.fetchRequest()();
  objc_msgSend(v15, "setFetchLimit:", 1);
  sub_100039BA4();
  v16 = sub_100008E84(&qword_100174878);
  v17 = swift_allocObject(v16, 72, 7);
  v51 = xmmword_10012A6D0;
  *(_OWORD *)(v17 + 16) = xmmword_10012A6D0;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10000EA3C();
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v18 = (void *)NSPredicate.init(format:_:)(0x696669746E656469, 0xEF4025203D207265, v17);
  objc_msgSend(v15, "setPredicate:", v18);

  result = NSManagedObjectContext.fetch<A>(_:)(v15, v14);
  if (v2)
  {

    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v20._object = (void *)0x80000001001390D0;
    v20._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v20);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 8250;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v61 = v2;
    v23 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v61, &v59, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = v60;
    v50 = v59;
    v25 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, enum case for DIPError.Code.coreDataError(_:), v53);
    v26 = sub_100008E84((uint64_t *)&unk_100178A30);
    v27 = sub_100008E84(&qword_100174898);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v32 + 16) = v51;
    v33 = (uint64_t *)(v32 + v31 + *(int *)(v27 + 48));
    v34 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v35 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32 + v31, v34, v35);
    swift_getErrorValue(v2, v58, v57);
    v36 = v57[1];
    v37 = v57[2];
    swift_errorRetain(v2);
    v38 = dispatch thunk of Error._code.getter(v36, v37);
    v33[3] = (uint64_t)&type metadata for Int;
    *v33 = v38;
    v39 = sub_10003E0A8(v32);
    v40 = type metadata accessor for DIPError(0);
    v41 = sub_10000745C();
    swift_allocError(v40, v41, 0, 0);
    v42 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, v24, v2, v25, 0, v39, 0xD000000000000067, 0x80000001001390F0, 0xD00000000000001DLL, 0x8000000100133920, 46);
    swift_willThrow(v42);
    swift_errorRelease(v2);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v56);
    return v40;
  }
  v43 = result;
  v45 = v55;
  v44 = v56;
  if (!((unint64_t)result >> 62))
  {
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease(v43);

    v40 = 0;
    goto LABEL_14;
  }
  if (result < 0)
    v47 = result;
  else
    v47 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(result);
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  result = swift_bridgeObjectRelease(v43);
  if (!v48)
    goto LABEL_13;
LABEL_5:
  if ((v43 & 0xC000000000000001) != 0)
  {
    v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v46 = *(id *)(v43 + 32);
LABEL_8:
    v40 = (uint64_t)v46;
    swift_bridgeObjectRelease(v43);

LABEL_14:
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v44);
    return v40;
  }
  __break(1u);
  return result;
}

unint64_t sub_10012315C(char *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _QWORD v65[3];
  char v66[8];
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v64 = a2;
  v5 = type metadata accessor for DIPError.Code(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v63 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  v61 = *(_QWORD *)(v11 - 8);
  v62 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseDeleteAuthACL.getter(v12);
  DIPSignpost.init(_:)(v10);
  v15 = sub_100123618();
  if (v3)
  {
    v67 = 0;
    v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v16._object = (void *)0x8000000100139160;
    v16._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v16);
    v69 = v3;
    v17 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v69, &v67, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v18 = v67;
    v64 = v68;
    v19 = v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v63, enum case for DIPError.Code.coreDataError(_:), v5);
    v20 = sub_100008E84((uint64_t *)&unk_100178A30);
    v21 = sub_100008E84(&qword_100174898);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(_QWORD *)(v22 + 72);
    v24 = *(unsigned __int8 *)(v22 + 80);
    v25 = (v24 + 32) & ~v24;
    v26 = swift_allocObject(v20, v25 + v23, v24 | 7);
    *(_OWORD *)(v26 + 16) = xmmword_10012A6D0;
    v27 = v26 + v25;
    v28 = (uint64_t *)(v27 + *(int *)(v21 + 48));
    v29 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v30 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v27, v29, v30);
    swift_getErrorValue(v3, v66, v65);
    v31 = v65[1];
    v32 = v65[2];
    swift_errorRetain(v3);
    v33 = dispatch thunk of Error._code.getter(v31, v32);
    v28[3] = (uint64_t)&type metadata for Int;
    *v28 = v33;
    v34 = sub_10003E0A8(v26);
    v35 = type metadata accessor for DIPError(0);
    v36 = sub_10000745C();
    swift_allocError(v35, v36, 0, 0);
    v37 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v18, v64, v3, v19, 0, v34, 0xD000000000000067, 0x80000001001390F0, 0xD00000000000001ELL, 0x8000000100139180, 65);
    swift_willThrow(v37);
    swift_errorRelease(v3);
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v62);
  }
  else
  {
    v38 = v15;
    v63 = a1;
    v59 = 0;
    v60 = v14;
    v58 = v2;
    if (v15 >> 62)
      goto LABEL_21;
    v39 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v39)
    {
      v40 = 4;
      while (1)
      {
        v41 = (v38 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40 - 4, v38)
            : *(id *)(v38 + 8 * v40);
        v42 = v41;
        v43 = v40 - 3;
        if (__OFADD__(v40 - 4, 1))
          break;
        v44 = objc_msgSend(v41, "identifier");
        if (v44)
        {
          v45 = v44;
          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v48 = v47;

          v49 = v64;
          if ((char *)v46 == v63 && v48 == v64)
          {
            swift_bridgeObjectRelease(v38);
            goto LABEL_19;
          }
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v63, v64, 0);
          swift_bridgeObjectRelease(v48);
          if ((v51 & 1) != 0)
          {
            v49 = v38;
LABEL_19:
            swift_bridgeObjectRelease(v49);
            objc_msgSend(*(id *)(v58 + 16), "deleteObject:", v42);

            LOBYTE(v34) = 1;
            goto LABEL_26;
          }
        }

        ++v40;
        if (v43 == v39)
          goto LABEL_25;
      }
      __break(1u);
LABEL_21:
      if (v38 < 0)
        v52 = v38;
      else
        v52 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v39 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(v38);
    }
LABEL_25:
    swift_bridgeObjectRelease(v38);
    LOBYTE(v34) = 0;
LABEL_26:
    v54 = v61;
    v53 = v62;
    v55 = v60;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
  }
  return v34 & 1;
}

uint64_t sub_100123618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _BYTE v41[8];
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v1 = type metadata accessor for DIPError.Code(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DIPSignpost.Config(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DIPSignpost(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IDCSSignposts.databaseFetchAllAuthACLs.getter(v9);
  DIPSignpost.init(_:)(v7);
  v12 = type metadata accessor for StoredAuthACL(0);
  v13 = (void *)static StoredAuthACL.fetchRequest()();
  v14 = NSManagedObjectContext.fetch<A>(_:)(v13, v12);

  if (v0)
  {
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v15._countAndFlagsBits = 0xD00000000000001ELL;
    v15._object = (void *)0x80000001001391A0;
    String.append(_:)(v15);
    v44 = v0;
    v16 = sub_100008E84(&qword_100174890);
    _print_unlocked<A, B>(_:_:)(&v44, &v42, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v36 = v43;
    v37 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DIPError.Code.coreDataError(_:), v1);
    v17 = sub_100008E84((uint64_t *)&unk_100178A30);
    v18 = sub_100008E84(&qword_100174898);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject(v17, v22 + v20, v21 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_10012A6D0;
    v24 = v23 + v22;
    v25 = (uint64_t *)(v23 + v22 + *(int *)(v18 + 48));
    v26 = enum case for DIPError.PropertyKey.underlyingErrno(_:);
    v27 = type metadata accessor for DIPError.PropertyKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v24, v26, v27);
    swift_getErrorValue(v0, v41, v40);
    v28 = v40[1];
    v29 = v40[2];
    swift_errorRetain(v0);
    v30 = dispatch thunk of Error._code.getter(v28, v29);
    v25[3] = (uint64_t)&type metadata for Int;
    *v25 = v30;
    v31 = sub_10003E0A8(v23);
    v32 = type metadata accessor for DIPError(0);
    v33 = sub_10000745C();
    swift_allocError(v32, v33, 0, 0);
    v34 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v37, v36, v0, v4, 0, v31, 0xD000000000000067, 0x80000001001390F0, 0xD000000000000012, 0x80000001001391C0, 30);
    swift_willThrow(v34);
    swift_errorRelease(v0);
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  return v14;
}

ValueMetadata *type metadata accessor for KeySigningKeySignatureProvider()
{
  return &type metadata for KeySigningKeySignatureProvider;
}

uint64_t sub_1001239B8()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtC7idcredd13CredentialKey_lock) + 16);
  os_unfair_lock_lock(v1);
  sub_100123A48(v2);
  os_unfair_lock_unlock(v1);
  return v4;
}

uint64_t sub_100123A28(uint64_t a1, uint64_t a2)
{
  return sub_100057250(a1, a2);
}

uint64_t sub_100123A48(uint64_t a1)
{
  uint64_t v1;

  return sub_100104334(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100123A60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t (*v20)(char *, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  char v94[72];

  v85 = a4;
  v82 = a2;
  v83 = a3;
  v91 = a1;
  v81 = type metadata accessor for PayloadMetadata(0);
  __chkstk_darwin(v81);
  v86 = (uint64_t *)((char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v5 - 8);
  v89 = v5;
  v6 = __chkstk_darwin(v5);
  v87 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v80 = (char *)&v79 - v8;
  v90 = type metadata accessor for IDCSAnalytics.NamespaceElement(0);
  v84 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ISO18013KnownDocTypes(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v79 - v16;
  v18 = sub_100008E84(&qword_1001752D8);
  inited = swift_initStackObject(v18, v94);
  *(_OWORD *)(inited + 16) = xmmword_10012A5D0;
  v20 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v21 = v20(v17, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v11);
  v22 = ISO18013KnownDocTypes.rawValue.getter(v21);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v17, v11);
  *(_QWORD *)(inited + 32) = v22;
  v26 = inited + 32;
  *(_QWORD *)(inited + 40) = v24;
  v27 = v20(v15, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v11);
  v28 = ISO18013KnownDocTypes.rawValue.getter(v27);
  v30 = v29;
  v25(v15, v11);
  *(_QWORD *)(inited + 48) = v28;
  *(_QWORD *)(inited + 56) = v30;
  v31 = sub_10007A230(inited);
  swift_setDeallocating(inited);
  v32 = *(_QWORD *)(inited + 16);
  v33 = v91;
  swift_arrayDestroy(v26, v32, &type metadata for String);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  LOBYTE(v30) = sub_1000097C4(v34, v35, v31);
  swift_bridgeObjectRelease(v35);
  v36 = swift_bridgeObjectRelease(v31);
  if ((v30 & 1) == 0)
  {
    v66 = v87;
    defaultLogger()(v36);
    v67 = v86;
    v68 = sub_100051968((uint64_t)v33, (uint64_t)v86);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v93 = v72;
      *(_DWORD *)v71 = 136315138;
      v73 = *v67;
      v74 = v67[1];
      swift_bridgeObjectRetain(v74);
      v92 = sub_10003FA80(v73, v74, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v71 + 4);
      swift_bridgeObjectRelease(v74);
      sub_100051BE4((uint64_t)v67);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Not checking for missing elements because document type %s is not supported for analytics", v71, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      sub_100051BE4((uint64_t)v67);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v66, v89);
  }
  v37 = v82;
  v38 = v80;
  v39 = (uint64_t *)((char *)v33 + *(int *)(v81 + 40));
  v40 = v39[1];
  if (!v40)
  {
    v75 = defaultLogger()(v36);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Not processing missing elements due to missing issuer data", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v38, v89);
  }
  v41 = *v39;
  v42 = sub_1001240E0(v34, v35, v83, v85);
  v43 = sub_100124F4C(v42, v37);
  result = swift_bridgeObjectRelease(v42);
  v45 = 0;
  v46 = *(_QWORD *)(v43 + 64);
  v85 = v43 + 64;
  v47 = 1 << *(_BYTE *)(v43 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & v46;
  v86 = (uint64_t *)((unint64_t)(v47 + 63) >> 6);
  v83 = v43;
  while (v49)
  {
    v50 = __clz(__rbit64(v49));
    v49 &= v49 - 1;
    v51 = v50 | (v45 << 6);
LABEL_22:
    v55 = *(char **)(*(_QWORD *)(v43 + 56) + 8 * v51);
    v56 = *((_QWORD *)v55 + 2);
    if (v56)
    {
      v88 = v49;
      v89 = v45;
      v57 = (uint64_t **)(*(_QWORD *)(v43 + 48) + 16 * v51);
      v58 = v57[1];
      v91 = *v57;
      type metadata accessor for IDCSAnalytics(0);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v55);
      v87 = v55;
      v59 = (uint64_t *)(v55 + 40);
      v60 = v84;
      do
      {
        v61 = v40;
        v63 = *(v59 - 1);
        v62 = *v59;
        swift_bridgeObjectRetain(v58);
        v64 = swift_bridgeObjectRetain(v62);
        v65 = v62;
        v40 = v61;
        IDCSAnalytics.NamespaceElement.init(namespace:element:)(v91, v58, v63, v65, v64);
        static IDCSAnalytics.sendPayloadMissingRequiredElementEvent(element:issuer:)(v10, v41, v61);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v90);
        v59 += 2;
        --v56;
      }
      while (v56);
      swift_bridgeObjectRelease(v58);
      result = swift_bridgeObjectRelease(v87);
      v43 = v83;
      v49 = v88;
      v45 = v89;
    }
  }
  v52 = v45 + 1;
  if (__OFADD__(v45, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v52 >= (uint64_t)v86)
    return swift_release(v43);
  v53 = *(_QWORD *)(v85 + 8 * v52);
  ++v45;
  if (v53)
    goto LABEL_21;
  v45 = v52 + 1;
  if (v52 + 1 >= (uint64_t)v86)
    return swift_release(v43);
  v53 = *(_QWORD *)(v85 + 8 * v45);
  if (v53)
    goto LABEL_21;
  v45 = v52 + 2;
  if (v52 + 2 >= (uint64_t)v86)
    return swift_release(v43);
  v53 = *(_QWORD *)(v85 + 8 * v45);
  if (v53)
  {
LABEL_21:
    v49 = (v53 - 1) & v53;
    v51 = __clz(__rbit64(v53)) + (v45 << 6);
    goto LABEL_22;
  }
  v54 = v52 + 3;
  if (v54 >= (uint64_t)v86)
    return swift_release(v43);
  v53 = *(_QWORD *)(v85 + 8 * v54);
  if (v53)
  {
    v45 = v54;
    goto LABEL_21;
  }
  while (1)
  {
    v45 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v45 >= (uint64_t)v86)
      return swift_release(v43);
    v53 = *(_QWORD *)(v85 + 8 * v45);
    ++v54;
    if (v53)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_1001240E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v7 = type metadata accessor for ISO18013KnownDocTypes(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v14 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v15 = v14((char *)&v31 - v12, enum case for ISO18013KnownDocTypes.iso18013_5_1_mDL(_:), v7);
  v16 = ISO18013KnownDocTypes.rawValue.getter(v15);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v13, v7);
  if (v16 == a1 && v18 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_13;
  }
  v21 = v32;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a1, a2, 0);
  swift_bridgeObjectRelease(v18);
  if ((v22 & 1) != 0)
  {
LABEL_13:
    v29 = a3;
LABEL_14:
    swift_bridgeObjectRetain(v29);
    return a3;
  }
  v23 = v14(v11, enum case for ISO18013KnownDocTypes.japanNationalIDCard(_:), v7);
  v24 = ISO18013KnownDocTypes.rawValue.getter(v23);
  v26 = v25;
  v19(v11, v7);
  if (v24 == a1 && v26 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_17;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, a1, a2, 0);
  swift_bridgeObjectRelease(v26);
  if ((v28 & 1) != 0)
  {
LABEL_17:
    a3 = v21;
    v29 = v21;
    goto LABEL_14;
  }
  return sub_10003E3FC((uint64_t)_swiftEmptyArrayStorage);
}

char *sub_10012429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t inited;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, _QWORD, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t (*v146)(char *, _QWORD, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(char *, _QWORD, uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(char *, _QWORD, uint64_t);
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(char *, uint64_t);
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t (*v225)(char *, _QWORD, uint64_t);
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  void (*v247)(char *, uint64_t);
  char v248[8];
  char v249[8];

  v241 = type metadata accessor for ISO23220_1_Japan_ElementIdentifier(0);
  v240 = *(_QWORD *)(v241 - 8);
  v0 = __chkstk_darwin(v241);
  v245 = (char *)&v214 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __chkstk_darwin(v0);
  v244 = (char *)&v214 - v3;
  v4 = __chkstk_darwin(v2);
  v243 = (char *)&v214 - v5;
  v6 = __chkstk_darwin(v4);
  v242 = (char *)&v214 - v7;
  v8 = __chkstk_darwin(v6);
  v239 = (char *)&v214 - v9;
  __chkstk_darwin(v8);
  v238 = (char *)&v214 - v10;
  v235 = type metadata accessor for ISO23220_1_ElementIdentifier(0);
  v234 = *(_QWORD *)(v235 - 8);
  v11 = __chkstk_darwin(v235);
  v237 = (char *)&v214 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v236 = (char *)&v214 - v14;
  __chkstk_darwin(v13);
  v233 = (char *)&v214 - v15;
  v16 = type metadata accessor for ISO18013_5_1_ElementIdentifier(0);
  v215 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v231 = (char *)&v214 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v230 = (char *)&v214 - v20;
  v21 = __chkstk_darwin(v19);
  v229 = (char *)&v214 - v22;
  v23 = __chkstk_darwin(v21);
  v228 = (char *)&v214 - v24;
  v25 = __chkstk_darwin(v23);
  v226 = (char *)&v214 - v26;
  v27 = __chkstk_darwin(v25);
  v222 = (char *)&v214 - v28;
  v29 = __chkstk_darwin(v27);
  v221 = (char *)&v214 - v30;
  v31 = __chkstk_darwin(v29);
  v220 = (char *)&v214 - v32;
  v33 = __chkstk_darwin(v31);
  v219 = (char *)&v214 - v34;
  v35 = __chkstk_darwin(v33);
  v218 = (char *)&v214 - v36;
  v37 = __chkstk_darwin(v35);
  v217 = (char *)&v214 - v38;
  v39 = __chkstk_darwin(v37);
  v216 = (char *)&v214 - v40;
  v41 = __chkstk_darwin(v39);
  v214 = (char *)&v214 - v42;
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v214 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)&v214 - v47;
  __chkstk_darwin(v46);
  v50 = (char *)&v214 - v49;
  v51 = type metadata accessor for ISO18013KnownNamespaces(0);
  v52 = *(_QWORD *)(v51 - 8);
  v224 = v51;
  v53 = __chkstk_darwin(v51);
  v232 = (char *)&v214 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v56 = (char *)&v214 - v55;
  v227 = sub_100008E84(&qword_1001752D0);
  inited = swift_initStackObject(v227, v249);
  *(_OWORD *)(inited + 16) = xmmword_10012A6D0;
  v225 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v52 + 104);
  v58 = v225(v56, enum case for ISO18013KnownNamespaces.iso18013_5_1(_:), v51);
  v223 = v56;
  v59 = ISO18013KnownNamespaces.rawValue.getter(v58);
  v61 = v60;
  v247 = *(void (**)(char *, uint64_t))(v52 + 8);
  v247(v56, v51);
  *(_QWORD *)(inited + 32) = v59;
  *(_QWORD *)(inited + 40) = v61;
  v246 = sub_100008E84(&qword_1001752D8);
  v62 = swift_allocObject(v246, 288, 7);
  *(_OWORD *)(v62 + 16) = xmmword_10012C1F0;
  v63 = v215;
  v64 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v215 + 104);
  v65 = v64(v50, enum case for ISO18013_5_1_ElementIdentifier.givenName(_:), v16);
  v66 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v65);
  v68 = v67;
  v69 = *(void (**)(char *, uint64_t))(v63 + 8);
  v69(v50, v16);
  *(_QWORD *)(v62 + 32) = v66;
  *(_QWORD *)(v62 + 40) = v68;
  v70 = v64(v48, enum case for ISO18013_5_1_ElementIdentifier.familyName(_:), v16);
  v71 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v70);
  v73 = v72;
  v69(v48, v16);
  *(_QWORD *)(v62 + 48) = v71;
  *(_QWORD *)(v62 + 56) = v73;
  v74 = v64(v45, enum case for ISO18013_5_1_ElementIdentifier.portrait(_:), v16);
  v75 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v74);
  v77 = v76;
  v69(v45, v16);
  *(_QWORD *)(v62 + 64) = v75;
  *(_QWORD *)(v62 + 72) = v77;
  v78 = v214;
  v79 = v64(v214, enum case for ISO18013_5_1_ElementIdentifier.residentAddress(_:), v16);
  v80 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v79);
  v82 = v81;
  v69(v78, v16);
  *(_QWORD *)(v62 + 80) = v80;
  *(_QWORD *)(v62 + 88) = v82;
  v83 = v216;
  v84 = v64(v216, enum case for ISO18013_5_1_ElementIdentifier.residentCity(_:), v16);
  v85 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v84);
  v87 = v86;
  v69(v83, v16);
  *(_QWORD *)(v62 + 96) = v85;
  *(_QWORD *)(v62 + 104) = v87;
  v88 = v217;
  v89 = v64(v217, enum case for ISO18013_5_1_ElementIdentifier.residentState(_:), v16);
  v90 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v89);
  v92 = v91;
  v69(v88, v16);
  *(_QWORD *)(v62 + 112) = v90;
  *(_QWORD *)(v62 + 120) = v92;
  v93 = v218;
  v94 = v64(v218, enum case for ISO18013_5_1_ElementIdentifier.residentCountry(_:), v16);
  v95 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v94);
  v97 = v96;
  v69(v93, v16);
  *(_QWORD *)(v62 + 128) = v95;
  *(_QWORD *)(v62 + 136) = v97;
  v98 = v219;
  v99 = v64(v219, enum case for ISO18013_5_1_ElementIdentifier.residentPostalCode(_:), v16);
  v100 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v99);
  v102 = v101;
  v69(v98, v16);
  *(_QWORD *)(v62 + 144) = v100;
  *(_QWORD *)(v62 + 152) = v102;
  v103 = v220;
  v104 = v64(v220, enum case for ISO18013_5_1_ElementIdentifier.issuingAuthority(_:), v16);
  v105 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v104);
  v107 = v106;
  v69(v103, v16);
  *(_QWORD *)(v62 + 160) = v105;
  *(_QWORD *)(v62 + 168) = v107;
  v108 = v221;
  v109 = v64(v221, enum case for ISO18013_5_1_ElementIdentifier.issuingCountry(_:), v16);
  v110 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v109);
  v112 = v111;
  v69(v108, v16);
  *(_QWORD *)(v62 + 176) = v110;
  *(_QWORD *)(v62 + 184) = v112;
  v113 = v222;
  v114 = v64(v222, enum case for ISO18013_5_1_ElementIdentifier.issuingJurisdiction(_:), v16);
  v115 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v114);
  v117 = v116;
  v69(v113, v16);
  *(_QWORD *)(v62 + 192) = v115;
  *(_QWORD *)(v62 + 200) = v117;
  v118 = v226;
  v119 = v64(v226, enum case for ISO18013_5_1_ElementIdentifier.expiryDate(_:), v16);
  v120 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v119);
  v122 = v121;
  v69(v118, v16);
  *(_QWORD *)(v62 + 208) = v120;
  *(_QWORD *)(v62 + 216) = v122;
  v123 = v228;
  v124 = v64(v228, enum case for ISO18013_5_1_ElementIdentifier.documentNumber(_:), v16);
  v125 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v124);
  v127 = v126;
  v69(v123, v16);
  *(_QWORD *)(v62 + 224) = v125;
  *(_QWORD *)(v62 + 232) = v127;
  v128 = v229;
  v129 = v64(v229, enum case for ISO18013_5_1_ElementIdentifier.drivingPrivileges(_:), v16);
  v130 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v129);
  v132 = v131;
  v69(v128, v16);
  *(_QWORD *)(v62 + 240) = v130;
  *(_QWORD *)(v62 + 248) = v132;
  v133 = v230;
  v134 = v64(v230, enum case for ISO18013_5_1_ElementIdentifier.ageInYears(_:), v16);
  v135 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v134);
  v137 = v136;
  v69(v133, v16);
  *(_QWORD *)(v62 + 256) = v135;
  *(_QWORD *)(v62 + 264) = v137;
  v138 = v231;
  v139 = v64(v231, enum case for ISO18013_5_1_ElementIdentifier.birthDate(_:), v16);
  v140 = ISO18013_5_1_ElementIdentifier.rawValue.getter(v139);
  v142 = v141;
  v69(v138, v16);
  *(_QWORD *)(v62 + 272) = v140;
  *(_QWORD *)(v62 + 280) = v142;
  *(_QWORD *)(inited + 48) = v62;
  v231 = (char *)sub_10003E3FC(inited);
  v143 = swift_initStackObject(v227, v248);
  *(_OWORD *)(v143 + 16) = xmmword_10012A5D0;
  v144 = v223;
  v145 = v224;
  v146 = v225;
  v147 = v225(v223, enum case for ISO18013KnownNamespaces.iso23220_1(_:), v224);
  v148 = ISO18013KnownNamespaces.rawValue.getter(v147);
  v150 = v149;
  v247(v144, v145);
  *(_QWORD *)(v143 + 32) = v148;
  *(_QWORD *)(v143 + 40) = v150;
  v151 = swift_allocObject(v246, 80, 7);
  *(_OWORD *)(v151 + 16) = xmmword_10012AB20;
  v152 = v234;
  v153 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v234 + 104);
  v154 = v233;
  v155 = v235;
  v156 = v153(v233, enum case for ISO23220_1_ElementIdentifier.ageInYears(_:), v235);
  v157 = ISO23220_1_ElementIdentifier.rawValue.getter(v156);
  v159 = v158;
  v160 = *(void (**)(char *, uint64_t))(v152 + 8);
  v160(v154, v155);
  *(_QWORD *)(v151 + 32) = v157;
  *(_QWORD *)(v151 + 40) = v159;
  v161 = v236;
  v162 = v153(v236, enum case for ISO23220_1_ElementIdentifier.birthDate(_:), v155);
  v163 = ISO23220_1_ElementIdentifier.rawValue.getter(v162);
  v165 = v164;
  v160(v161, v155);
  *(_QWORD *)(v151 + 48) = v163;
  *(_QWORD *)(v151 + 56) = v165;
  v166 = v237;
  v167 = v153(v237, enum case for ISO23220_1_ElementIdentifier.sex(_:), v155);
  v168 = v166;
  v169 = ISO23220_1_ElementIdentifier.rawValue.getter(v167);
  v171 = v170;
  v160(v168, v155);
  *(_QWORD *)(v151 + 64) = v169;
  *(_QWORD *)(v151 + 72) = v171;
  *(_QWORD *)(v143 + 48) = v151;
  v172 = v232;
  v173 = v146(v232, enum case for ISO18013KnownNamespaces.iso23220_1_jp(_:), v145);
  v174 = ISO18013KnownNamespaces.rawValue.getter(v173);
  v176 = v175;
  v247(v172, v145);
  *(_QWORD *)(v143 + 56) = v174;
  *(_QWORD *)(v143 + 64) = v176;
  v177 = swift_allocObject(v246, 128, 7);
  *(_OWORD *)(v177 + 16) = xmmword_10012B8F0;
  v178 = v240;
  v179 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v240 + 104);
  v180 = v238;
  v181 = v241;
  v182 = v179(v238, enum case for ISO23220_1_Japan_ElementIdentifier.localGovCode(_:), v241);
  v183 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v182);
  v185 = v184;
  v186 = *(void (**)(char *, uint64_t))(v178 + 8);
  v186(v180, v181);
  *(_QWORD *)(v177 + 32) = v183;
  *(_QWORD *)(v177 + 40) = v185;
  v187 = v239;
  v188 = v179(v239, enum case for ISO23220_1_Japan_ElementIdentifier.fullName(_:), v181);
  v189 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v188);
  v191 = v190;
  v186(v187, v181);
  *(_QWORD *)(v177 + 48) = v189;
  *(_QWORD *)(v177 + 56) = v191;
  v192 = v242;
  v193 = v179(v242, enum case for ISO23220_1_Japan_ElementIdentifier.birthDate(_:), v181);
  v194 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v193);
  v196 = v195;
  v186(v192, v181);
  *(_QWORD *)(v177 + 64) = v194;
  *(_QWORD *)(v177 + 72) = v196;
  v197 = v243;
  v198 = v179(v243, enum case for ISO23220_1_Japan_ElementIdentifier.residentAddress(_:), v181);
  v199 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v198);
  v201 = v200;
  v186(v197, v181);
  *(_QWORD *)(v177 + 80) = v199;
  *(_QWORD *)(v177 + 88) = v201;
  v202 = v244;
  v203 = v179(v244, enum case for ISO23220_1_Japan_ElementIdentifier.sex(_:), v181);
  v204 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v203);
  v206 = v205;
  v186(v202, v181);
  *(_QWORD *)(v177 + 96) = v204;
  *(_QWORD *)(v177 + 104) = v206;
  v207 = v245;
  v208 = v179(v245, enum case for ISO23220_1_Japan_ElementIdentifier.portrait(_:), v181);
  v209 = v207;
  v210 = ISO23220_1_Japan_ElementIdentifier.rawValue.getter(v208);
  v212 = v211;
  v186(v209, v181);
  *(_QWORD *)(v177 + 112) = v210;
  *(_QWORD *)(v177 + 120) = v212;
  *(_QWORD *)(v143 + 72) = v177;
  sub_10003E3FC(v143);
  return v231;
}

uint64_t sub_100124F4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void (*v37)(_QWORD *@<X8>);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t result;
  uint64_t *v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD *@<X8>);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = (_QWORD *)sub_10003E3FC((uint64_t)_swiftEmptyArrayStorage);
  v87 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v88 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v77 = 0;
  v8 = 0;
  v89 = a1;
  v90 = a2;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v12 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v12 < v88)
    {
      v13 = *(_QWORD *)(v87 + 8 * v12);
      ++v8;
      if (v13)
        goto LABEL_21;
      v8 = v12 + 1;
      if (v12 + 1 < v88)
      {
        v13 = *(_QWORD *)(v87 + 8 * v8);
        if (v13)
          goto LABEL_21;
        v8 = v12 + 2;
        if (v12 + 2 < v88)
        {
          v13 = *(_QWORD *)(v87 + 8 * v8);
          if (v13)
            goto LABEL_21;
          v14 = v12 + 3;
          if (v14 < v88)
          {
            v13 = *(_QWORD *)(v87 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v8 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_91;
                if (v8 >= v88)
                  goto LABEL_85;
                v13 = *(_QWORD *)(v87 + 8 * v8);
                ++v14;
                if (v13)
                  goto LABEL_21;
              }
            }
            v8 = v14;
LABEL_21:
            v7 = (v13 - 1) & v13;
            for (i = __clz(__rbit64(v13)) + (v8 << 6); ; i = v10 | (v8 << 6))
            {
              v15 = (uint64_t *)(*(_QWORD *)(v89 + 48) + 16 * i);
              v17 = *v15;
              v16 = v15[1];
              v18 = *(_QWORD *)(*(_QWORD *)(v89 + 56) + 8 * i);
              v19 = *(_QWORD *)(a2 + 16);
              swift_bridgeObjectRetain(v16);
              if (!v19)
              {
                swift_bridgeObjectRetain(v18);
                goto LABEL_26;
              }
              swift_bridgeObjectRetain(v16);
              swift_bridgeObjectRetain(v18);
              v20 = sub_1000FBC04(v17, v16);
              if ((v21 & 1) == 0)
              {
                swift_bridgeObjectRelease(v16);
LABEL_26:
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
                v24 = sub_1000FBC04(v17, v16);
                v25 = v4[2];
                v26 = (v23 & 1) == 0;
                v27 = v25 + v26;
                if (!__OFADD__(v25, v26))
                {
                  v28 = v23;
                  if (v4[3] < v27)
                  {
                    sub_10007C1D0(v27, isUniquelyReferenced_nonNull_native);
                    v29 = sub_1000FBC04(v17, v16);
                    if ((v28 & 1) != (v30 & 1))
                      goto LABEL_94;
                    v24 = v29;
                    if ((v28 & 1) == 0)
                      goto LABEL_33;
LABEL_5:
                    v9 = v4[7];
                    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8 * v24));
                    *(_QWORD *)(v9 + 8 * v24) = v18;
LABEL_6:
                    swift_bridgeObjectRelease(v16);
                    swift_bridgeObjectRelease(0x8000000000000000);
                    a2 = v90;
                    if (!v7)
                      goto LABEL_8;
                    goto LABEL_7;
                  }
                  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                  {
                    if ((v23 & 1) != 0)
                      goto LABEL_5;
                  }
                  else
                  {
                    sub_10007DF80();
                    if ((v28 & 1) != 0)
                      goto LABEL_5;
                  }
LABEL_33:
                  v4[(v24 >> 6) + 8] |= 1 << v24;
                  v31 = (uint64_t *)(v4[6] + 16 * v24);
                  *v31 = v17;
                  v31[1] = v16;
                  *(_QWORD *)(v4[7] + 8 * v24) = v18;
                  v32 = v4[2];
                  v33 = __OFADD__(v32, 1);
                  v34 = v32 + 1;
                  if (v33)
                    goto LABEL_87;
                  v4[2] = v34;
                  swift_bridgeObjectRetain(v16);
                  goto LABEL_6;
                }
                __break(1u);
LABEL_87:
                __break(1u);
                goto LABEL_88;
              }
              v35 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v20);
              swift_bridgeObjectRetain(v35);
              swift_bridgeObjectRelease(v16);
              v83 = *(_QWORD *)(v18 + 16);
              if (v83)
                break;
              swift_bridgeObjectRelease(v16);
              swift_bridgeObjectRelease(v18);
LABEL_81:
              swift_bridgeObjectRelease(v35);
              if (!v7)
                goto LABEL_8;
LABEL_7:
              v10 = __clz(__rbit64(v7));
              v7 &= v7 - 1;
            }
            v75 = v7;
            v76 = v8;
            v36 = 0;
            v84 = v35[2];
            v82 = v18 + 32;
            v74 = v35 + 9;
            v37 = (void (*)(_QWORD *@<X8>))v77;
            v79 = v18;
            v80 = v35;
            while (1)
            {
              if (v36 >= *(_QWORD *)(v18 + 16))
                goto LABEL_89;
              v38 = (uint64_t *)(v82 + 16 * v36);
              v40 = *v38;
              v39 = v38[1];
              if (!v84)
                goto LABEL_49;
              v41 = v35[4];
              v42 = v35[5];
              v43 = v41 == v40 && v42 == v39;
              if (!v43)
              {
                v85 = v38[1];
                if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v40, v39, 0) & 1) == 0)
                {
                  v39 = v85;
                  if (v84 == 1)
                    goto LABEL_49;
                  v65 = v35[6];
                  v66 = v35[7];
                  if ((v65 != v40 || v66 != v85)
                    && (_stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, v40, v85, 0) & 1) == 0)
                  {
                    break;
                  }
                }
              }
LABEL_40:
              if (++v36 == v83)
              {
                v77 = (uint64_t)v37;
                swift_bridgeObjectRelease(v16);
                swift_bridgeObjectRelease(v18);
                v7 = v75;
                v8 = v76;
                goto LABEL_81;
              }
            }
            v39 = v85;
            if (v84 != 2)
            {
              v67 = v74;
              v68 = 2;
              v78 = v37;
              do
              {
                v69 = v68 + 1;
                if (__OFADD__(v68, 1))
                  goto LABEL_93;
                v70 = *(v67 - 1);
                v71 = *v67;
                v72 = v70 == v40 && v71 == v39;
                if (v72 || (_stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, v40, v39, 0) & 1) != 0)
                {
                  v37 = v78;
                  goto LABEL_39;
                }
                v67 += 2;
                ++v68;
                v39 = v85;
                v43 = v69 == v84;
                v37 = v78;
              }
              while (!v43);
            }
LABEL_49:
            v44 = v39;
            swift_bridgeObjectRetain(v16);
            v86 = v44;
            swift_bridgeObjectRetain(v44);
            sub_100008FC0((uint64_t)v37, 0);
            v45 = swift_isUniquelyReferenced_nonNull_native(v4);
            v47 = sub_1000FBC04(v17, v16);
            v48 = v4[2];
            v49 = (v46 & 1) == 0;
            v50 = v48 + v49;
            if (__OFADD__(v48, v49))
              goto LABEL_90;
            v51 = v46;
            if (v4[3] >= v50)
            {
              if ((v45 & 1) == 0)
                sub_10007DF80();
            }
            else
            {
              sub_10007C1D0(v50, v45);
              v52 = sub_1000FBC04(v17, v16);
              if ((v51 & 1) != (v53 & 1))
                goto LABEL_94;
              v47 = v52;
            }
            swift_bridgeObjectRelease(0x8000000000000000);
            v54 = v4;
            if ((v51 & 1) == 0)
            {
              v4[(v47 >> 6) + 8] |= 1 << v47;
              v55 = (uint64_t *)(v4[6] + 16 * v47);
              *v55 = v17;
              v55[1] = v16;
              *(_QWORD *)(v4[7] + 8 * v47) = _swiftEmptyArrayStorage;
              v56 = v4[2];
              v57 = v56 + 1;
              v58 = __OFADD__(v56, 1);
              swift_bridgeObjectRetain(v4);
              if (v58)
                goto LABEL_92;
              v4[2] = v57;
              v54 = (_QWORD *)v16;
            }
            swift_bridgeObjectRetain(v54);
            v59 = v4[7];
            swift_bridgeObjectRelease(v4);
            v60 = *(char **)(v59 + 8 * v47);
            v61 = swift_isUniquelyReferenced_nonNull_native(v60);
            *(_QWORD *)(v59 + 8 * v47) = v60;
            v81 = v40;
            if ((v61 & 1) == 0)
            {
              v60 = sub_1000A73AC(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
              *(_QWORD *)(v59 + 8 * v47) = v60;
            }
            v63 = *((_QWORD *)v60 + 2);
            v62 = *((_QWORD *)v60 + 3);
            if (v63 >= v62 >> 1)
            {
              v60 = sub_1000A73AC((char *)(v62 > 1), v63 + 1, 1, v60);
              *(_QWORD *)(v59 + 8 * v47) = v60;
            }
            a2 = v90;
            v18 = v79;
            *((_QWORD *)v60 + 2) = v63 + 1;
            v64 = &v60[16 * v63];
            *((_QWORD *)v64 + 4) = v81;
            *((_QWORD *)v64 + 5) = v86;
            swift_bridgeObjectRelease(v16);
            v37 = sub_1000BD384;
LABEL_39:
            v35 = v80;
            goto LABEL_40;
          }
        }
      }
    }
LABEL_85:
    swift_release(v89);
    sub_100008FC0(v77, 0);
    return (uint64_t)v4;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001255D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1000FBB6C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007D6A4();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for SESKeystore.KeyDesignation(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100015124(v13 + *(_QWORD *)(v15 + 72) * v7, a2);
    sub_10011F368(v7, v10);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for MockSESKeystore.MockDesignatedKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_100125704(uint64_t a1, uint64_t a2)
{
  return sub_100125830(a1, a2, (void (*)(unint64_t, uint64_t))sub_10011F63C, (void (*)(void))sub_10007DB18);
}

uint64_t sub_100125718(uint64_t a1, uint64_t a2)
{
  return sub_100125830(a1, a2, (void (*)(unint64_t, uint64_t))sub_10011F63C, (void (*)(void))sub_10007DF80);
}

double sub_10012572C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1000FBC04(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007DF8C();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100041220((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_10011F640(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10012581C(uint64_t a1, uint64_t a2)
{
  return sub_100125830(a1, a2, (void (*)(unint64_t, uint64_t))sub_10011F63C, (void (*)(void))sub_10007E170);
}

uint64_t sub_100125830(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), void (*a4)(void))
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_1000FBC04(a1, a2);
  LOBYTE(a2) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v14 = *v7;
  v18 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    v14 = v18;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v11 + 8));
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v11);
  a3(v11, v14);
  v16 = *v7;
  *v7 = v14;
  swift_bridgeObjectRelease(v16);
  return v15;
}

void sub_10012590C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::Bool v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  id v36;
  Swift::String v37;
  Swift::Bool v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *Constraints;
  id v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char *v60;
  char v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t);
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  const char *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  id v94;
  Swift::String v95;
  Swift::Bool v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  char *v112;
  Class isa;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  void *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[2];
  char v132[24];
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char v136;

  v127 = a2;
  v128 = a1;
  v4 = type metadata accessor for DIPError.Code(0);
  v123 = *(_QWORD *)(v4 - 8);
  v124 = v4;
  __chkstk_darwin(v4);
  v126 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v129 - 8);
  v7 = __chkstk_darwin(v129);
  v119 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v122 = (char *)&v116 - v10;
  v11 = __chkstk_darwin(v9);
  v118 = (char *)&v116 - v12;
  v13 = __chkstk_darwin(v11);
  v120 = (char *)&v116 - v14;
  v15 = __chkstk_darwin(v13);
  v117 = (char *)&v116 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v116 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v116 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v116 - v23;
  v136 = a3;
  v25 = (void *)objc_opt_self(NSUserDefaults);
  v26 = objc_msgSend(v25, "standardUserDefaults");
  v27._object = (void *)0x80000001001391E0;
  v27._countAndFlagsBits = 0xD000000000000029;
  v28 = NSUserDefaults.internalBool(forKey:)(v27);

  v121 = v25;
  if (v28)
  {
    v30 = defaultLogger()(v29);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Forcing shouldHaveOACL to false due to internal defaults setting", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v24, v129);
    a3 = 0;
    v136 = 0;
    v35 = v126;
  }
  else
  {
    v36 = objc_msgSend(v25, "standardUserDefaults");
    v37._countAndFlagsBits = 0xD00000000000002ALL;
    v37._object = (void *)0x8000000100139210;
    v38 = NSUserDefaults.internalBool(forKey:)(v37);

    v35 = v126;
    if (v38)
    {
      v39 = defaultLogger()(v34);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Forcing shouldHaveOACL to true due to internal defaults setting", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      v34 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v22, v129);
      a3 = 1;
      v136 = 1;
    }
  }
  v43 = defaultLogger()(v34);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v46 = 67109120;
    LODWORD(v133) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 4, v46 + 4);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "ACLMigrator migrateOACLOperation shouldHaveOACL? %{BOOL}d", v46, 8u);
    swift_slowDealloc(v46, -1, -1);
  }

  v47 = *(void (**)(char *, uint64_t))(v6 + 8);
  v47(v19, v129);
  type metadata accessor for SecAccessControl(0);
  v48 = v125;
  v49 = (char *)static SecAccessControlRef.fromData(_:)(v128, v127);
  if (v48)
  {
    v50 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v35, enum case for DIPError.Code.internalError(_:), v124);
LABEL_26:
    swift_errorRetain(v50);
    v71 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v72 = type metadata accessor for DIPError(0);
    v73 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v72, v73, 0, 0);
    v74 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v50, v35, 0, v71, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000029, 0x8000000100139290, 97);
    swift_willThrow(v74);
    swift_errorRelease(v50);
    return;
  }
  v126 = v49;
  Constraints = (void *)SecAccessControlGetConstraints();
  if (!Constraints
    || (v52 = Constraints,
        *(_QWORD *)&v133 = 0,
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(),
        v52,
        (v53 = v133) == 0))
  {
    v62 = v124;
    v63 = *(void (**)(char *, _QWORD, uint64_t))(v123 + 104);
    v63(v35, enum case for DIPError.Code.secAccessControlCannotGetConstraints(_:), v124);
    v64 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v65 = type metadata accessor for DIPError(0);
    v66 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v50 = swift_allocError(v65, v66, 0, 0);
    v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001DLL, 0x80000001001392C0, 0, v35, 0, v64, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000029, 0x8000000100139290, 60);
LABEL_25:
    swift_willThrow(v67);

    v63(v35, enum case for DIPError.Code.internalError(_:), v62);
    goto LABEL_26;
  }
  v135 = v133;
  if (!*(_QWORD *)(v133 + 16))
  {
LABEL_24:
    swift_bridgeObjectRelease(v53);
    v62 = v124;
    v63 = *(void (**)(char *, _QWORD, uint64_t))(v123 + 104);
    v63(v35, enum case for DIPError.Code.idcsInvalidACL(_:), v124);
    v68 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v69 = type metadata accessor for DIPError(0);
    v70 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    v50 = swift_allocError(v69, v70, 0, 0);
    v67 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD000000000000023, 0x80000001001392E0, 0, v35, 0, v68, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000029, 0x8000000100139290, 63);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain(v133);
  v54 = sub_1000FBC04(1852273519, 0xE400000000000000);
  if ((v55 & 1) == 0
    || (sub_1000412B0(*(_QWORD *)(v53 + 56) + 32 * v54, (uint64_t)&v133),
        v56 = sub_100008E84(&qword_100178C80),
        (swift_dynamicCast(v131, &v133, (char *)&type metadata for Any + 8, v56, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v53);
    goto LABEL_24;
  }
  v57 = *(_QWORD *)&v131[0];
  swift_beginAccess(&v136, v132, 0, 0);
  if (v136 == 1)
  {
    if (*(_QWORD *)(v53 + 16))
    {
      v58 = sub_1000FBC04(1818452335, 0xE400000000000000);
      v59 = v121;
      v60 = v120;
      if ((v61 & 1) != 0)
      {
        sub_1000412B0(*(_QWORD *)(v53 + 56) + 32 * v58, (uint64_t)&v133);
      }
      else
      {
        v133 = 0u;
        v134 = 0u;
      }
    }
    else
    {
      v133 = 0u;
      v134 = 0u;
      v59 = v121;
      v60 = v120;
    }
    swift_bridgeObjectRelease(v53);
    if (*((_QWORD *)&v134 + 1))
    {
      v78 = swift_dynamicCast(v131, &v133, (char *)&type metadata for Any + 8, v56, 6);
      if ((v78 & 1) != 0)
      {
        swift_bridgeObjectRelease(v57);
        v79 = swift_bridgeObjectRelease(*(_QWORD *)&v131[0]);
        v76 = v117;
        v80 = defaultLogger()(v79);
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v83 = 0;
          swift_bridgeObjectRelease(v53);
          v84 = "ACL contains oacl dictionary, no migration needed";
LABEL_53:
          _os_log_impl((void *)&_mh_execute_header, v81, v82, v84, v83, 2u);
          swift_slowDealloc(v83, -1, -1);

          v47(v76, v129);
LABEL_55:
          sub_100005A38(v128, v127);
          return;
        }
        goto LABEL_54;
      }
    }
    else
    {
      v78 = sub_1000CD76C((uint64_t)&v133);
    }
    v85 = defaultLogger()(v78);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Adding oacl operation to acl", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    v89 = v60;
    v90 = v129;
    v47(v89, v129);
    *((_QWORD *)&v134 + 1) = v56;
    *(_QWORD *)&v133 = v57;
    sub_100041220(&v133, v131);
    v91 = v135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v135);
    v130 = v91;
    sub_10011FB90(v131, 1818452335, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
    v93 = v130;
    v135 = v130;
    swift_bridgeObjectRelease(0x8000000000000000);
    v94 = objc_msgSend(v59, "standardUserDefaults");
    v95._countAndFlagsBits = 0xD000000000000021;
    v95._object = (void *)0x8000000100139310;
    v96 = NSUserDefaults.internalBool(forKey:)(v95);

    if (v96)
    {
      v98 = v118;
      v99 = defaultLogger()(v97);
      v100 = Logger.logObject.getter(v99);
      v101 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v100, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Setting OACL to true due to internal defaults setting", v102, 2u);
        swift_slowDealloc(v102, -1, -1);
      }

      v47(v98, v90);
      *((_QWORD *)&v134 + 1) = &type metadata for Bool;
      LOBYTE(v133) = 1;
      sub_100041220(&v133, v131);
      v103 = v135;
      v104 = swift_isUniquelyReferenced_nonNull_native(v135);
      v130 = v103;
      sub_10011FB90(v131, 1818452335, 0xE400000000000000, v104);
      v93 = v130;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v57);
    if (*(_QWORD *)(v53 + 16))
    {
      v75 = sub_1000FBC04(1818452335, 0xE400000000000000);
      v76 = v122;
      if ((v77 & 1) != 0)
      {
        sub_1000412B0(*(_QWORD *)(v53 + 56) + 32 * v75, (uint64_t)&v133);
      }
      else
      {
        v133 = 0u;
        v134 = 0u;
      }
    }
    else
    {
      v133 = 0u;
      v134 = 0u;
      v76 = v122;
    }
    swift_bridgeObjectRelease(v53);
    v105 = *((_QWORD *)&v134 + 1);
    v106 = sub_1000CD76C((uint64_t)&v133);
    if (!v105)
    {
      v115 = defaultLogger()(v106);
      v81 = Logger.logObject.getter(v115);
      v82 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v83 = 0;
        swift_bridgeObjectRelease(v53);
        v84 = "ACL does not contain oacl dictionary, no migration needed";
        goto LABEL_53;
      }
LABEL_54:

      v47(v76, v129);
      swift_bridgeObjectRelease(v135);
      goto LABEL_55;
    }
    v107 = v119;
    v108 = defaultLogger()(v106);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Removing oacl operation from acl", v111, 2u);
      swift_slowDealloc(v111, -1, -1);
    }

    v47(v107, v129);
    sub_10012572C(1818452335, 0xE400000000000000, &v133);
    sub_1000CD76C((uint64_t)&v133);
    v93 = v135;
  }
  v112 = v126;
  swift_bridgeObjectRetain(v93);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v93);
  SecAccessControlSetConstraints(v112, isa);

  v114 = (void *)SecAccessControlCopyData(v112);
  if (v114)
  {
    swift_bridgeObjectRelease(v93);
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v114);

  }
  else
  {
    __break(1u);
  }
}

void *sub_100126654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  char v17;
  unint64_t v18;
  id v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[3];
  char v61[8];
  _OWORD v62[2];
  __int128 v63;
  void *v64;
  uint64_t v65;

  v0 = type metadata accessor for DIPError.Code(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v53 - v8;
  v65 = 0;
  v10 = (void *)SecAccessControlCreate(kCFAllocatorDefault, &v65);
  v11 = v10;
  v12 = v65;
  if (v10)
  {
    if (!v65)
    {
      v13 = v10;
      v14 = sub_10003E548((uint64_t)_swiftEmptyArrayStorage);
      v64 = &type metadata for Bool;
      LOBYTE(v63) = 1;
      sub_100041220(&v63, v62);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v59 = v14;
      sub_10011FB90(v62, 1852273519, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      v16 = v59;
      swift_bridgeObjectRelease(0x8000000000000000);
      v64 = &type metadata for Bool;
      LOBYTE(v63) = 1;
      sub_100041220(&v63, v62);
      v17 = swift_isUniquelyReferenced_nonNull_native(v16);
      v59 = v16;
      sub_10011FB90(v62, 1818452335, 0xE400000000000000, v17);
      v18 = v59;
      swift_bridgeObjectRelease(0x8000000000000000);
      v19 = v13;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v18);
      SecAccessControlSetConstraints(v19, isa);

      return v11;
    }
    goto LABEL_5;
  }
  if (v65)
  {
LABEL_5:
    v56 = v4;
    v57 = v1;
    type metadata accessor for CFError(0);
    v22 = v21;
    v23 = sub_1000058C8(&qword_100178C88, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
    v24 = swift_allocError(v22, v23, 0, 0);
    *v25 = v12;
    v26 = swift_errorRetain(v24);
    defaultLogger()(v26);
    swift_errorRetain(v24);
    v27 = swift_errorRetain(v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v53 = v0;
      v31 = (uint8_t *)v30;
      v32 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v63 = v32;
      v54 = v3;
      v55 = v11;
      *(_DWORD *)v31 = 136315138;
      swift_getErrorValue(v24, v61, v60);
      v33 = Error.localizedDescription.getter(v60[1], v60[2]);
      v35 = v34;
      *(_QWORD *)&v62[0] = sub_10003FA80(v33, v34, (uint64_t *)&v63);
      v3 = v54;
      v11 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, (char *)v62 + 8, v31 + 4);
      swift_bridgeObjectRelease(v35);
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to create empty ACL due to error: %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      v36 = v31;
      v0 = v53;
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v9, v56);
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v3, enum case for DIPError.Code.secAccessControlCannotCreateACL(_:), v0);
    swift_errorRetain(v24);
    v37 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v38 = type metadata accessor for DIPError(0);
    v39 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v38, v39, 0, 0);
    v40 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000001ALL, 0x8000000100139370, v24, v3, 0, v37, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000017, 0x8000000100139390, 116);
    swift_willThrow(v40);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    return v11;
  }
  v42 = v4;
  v43 = defaultLogger()(0);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, (os_log_type_t)v45))
  {
    v46 = v0;
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Unable to create empty ACL.", v47, 2u);
    v48 = v47;
    v0 = v46;
    swift_slowDealloc(v48, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v42);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DIPError.Code.secAccessControlCannotCreateACL(_:), v0);
  v49 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
  v50 = type metadata accessor for DIPError(0);
  v51 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
  swift_allocError(v50, v51, 0, 0);
  v52 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0xD00000000000002FLL, 0x80000001001393B0, 0, v3, 0, v49, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000017, 0x8000000100139390, 110);
  swift_willThrow(v52);
  return v11;
}

void sub_100126CC8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  Class isa;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;

  v3 = type metadata accessor for DIPError.Code(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100126654();
  if (v1)
  {
    v8 = v1;
LABEL_3:
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DIPError.Code.internalError(_:), v3);
    swift_errorRetain(v8);
    v9 = sub_1000CFC1C((uint64_t)_swiftEmptyArrayStorage);
    v10 = type metadata accessor for DIPError(0);
    v11 = sub_1000058C8((unint64_t *)&qword_100174E20, (uint64_t (*)(uint64_t))&type metadata accessor for DIPError, (uint64_t)&protocol conformance descriptor for DIPError);
    swift_allocError(v10, v11, 0, 0);
    v12 = DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xE000000000000000, v8, v6, 0, v9, 0xD00000000000004CLL, 0x8000000100139240, 0xD000000000000025, 0x8000000100139340, 135);
    swift_willThrow(v12);
    swift_errorRelease(v8);
    return;
  }
  v13 = v7;
  v14 = sub_10003ED40((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v21 = 0;
  v16 = objc_msgSend(a1, "evaluateAccessControl:operation:options:error:", v13, 3, isa, &v21);

  v17 = v21;
  if (!v16)
  {
    v19 = v21;
    v8 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v20);
    goto LABEL_3;
  }
  v18 = v21;

}
