unint64_t sub_10016BD50(unint64_t result, uint64_t a2)
{
  if (result >= 2)
    return swift_release(a2);
  return result;
}

unint64_t sub_10016BD64(unint64_t result, uint64_t a2)
{
  if (result >= 2)
    return swift_retain(a2);
  return result;
}

uint64_t Completion.deinit()
{
  uint64_t v0;

  Completion.assertInvoked()();
  sub_10016BD50(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Void __swiftcall Completion.assertInvoked()()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v17, 0);
  if (*(_QWORD *)(v0 + 16) != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v1 = sub_10016C0E0();
    sub_10016C120(v1, v2, v3, v4, v5, v6, v7, v8, v13, v14, v15, 0);
    swift_bridgeObjectRelease();
    sub_10016C10C((uint64_t)"Fatal error", v9, v10, v16, 0xE000000000000000, (uint64_t)"EnsembleAgent/Completion.swift", v11, v12, 49, 0);
    __break(1u);
  }
}

uint64_t Completion.__deallocating_deinit()
{
  uint64_t v0;

  Completion.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for Completion()
{
  return objc_opt_self(_TtC13EnsembleAgent10Completion);
}

_QWORD *destroy for Completion.State(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release(result[1]);
  return result;
}

uint64_t _s13EnsembleAgent10CompletionC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain(v3);
  }
  return a1;
}

unint64_t *assignWithCopy for Completion.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      swift_retain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v5 = a2[1];
  v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

unint64_t *assignWithTake for Completion.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v5 = a2[1];
  v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Completion.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Completion.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *sub_10016C0B0(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Completion.State()
{
  return &type metadata for Completion.State;
}

uint64_t sub_10016C0E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

void sub_10016C0F8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10016C10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 30, 2, a9, a10);
}

void sub_10016C120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  uint64_t v13;
  Swift::String v14;

  v14._countAndFlagsBits = v13;
  v14._object = v12;
  String.append(_:)(v14);
}

uint64_t sub_10016C130()
{
  uint64_t v0;

  return swift_allocObject(v0, 48, 7);
}

unint64_t sub_10016C140()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10016BD50(v1, v0);
}

uint64_t sub_10016C14C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t *sub_10016C1A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_10016C274(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return result;
}

void *sub_10016C2C0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_10016C350(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v5);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_10016C428(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_10016C4B8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v5);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_10016C590(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 > v7)
  {
    v10 = 8 * v8;
    if (v8 > 3)
      goto LABEL_8;
    v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v8);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v8 > 3)
          v13 = 0;
        if ((_DWORD)v8)
        {
          if (v8 > 3)
            LODWORD(v8) = 4;
          __asm { BR              X12 }
        }
        return v7 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v15 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, v6, v4);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_10016C6BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8 * v11;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        v6 = &dword_100000004;
      }
      else if (v15 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v15 > 1;
      }
    }
    else
    {
      v6 = &_mh_execute_header.magic + 1;
    }
  }
  if (v9 < a2)
  {
    v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_10016C850()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_10016C858()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_10016C87C(uint64_t a1, uint64_t a2)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_10016C888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, *(_QWORD *)(a3 + 16));
}

uint64_t type metadata accessor for SyncValue(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncValue);
}

uint64_t sub_10016C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10016C8A8(uint64_t a1)
{
  __int128 v2;
  uint64_t result;
  unint64_t v4;
  _OWORD v5[2];
  _QWORD v6[3];

  v6[0] = &unk_1002285D0;
  v6[1] = &unk_1002285E8;
  v2 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v2;
  result = type metadata accessor for SyncValue(319, (uint64_t)v5);
  if (v4 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v6, a1 + 48);
    return 0;
  }
  return result;
}

_QWORD *sub_10016C930(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  const void *v17;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = ~(unint64_t)v6;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || ((v7 + 33) & ~v7) + v9 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    v14 = *(_OWORD *)a2;
    v15 = *((_OWORD *)a2 + 1);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v15;
    v16 = (void *)((a1 + v7 + 33) & v8);
    v17 = (const void *)(((unint64_t)a2 + v7 + 33) & v8);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v17, 1, v4))
    {
      memcpy(v16, v17, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v16, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_10016CA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

uint64_t sub_10016CA9C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 33 + a1) & ~v8);
  v10 = (const void *)(((unint64_t)a2 + v8 + 33) & ~v8);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v9, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_10016CB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  int v10;
  int v11;
  size_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  v4 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)((v7 + 33 + a1) & ~v7);
  v9 = (const void *)((v7 + 33 + a2) & ~v7);
  v10 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v5);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v5);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, v5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v8, v9, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v12);
  return a1;
}

uint64_t sub_10016CCD8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 33 + a1) & ~v8);
  v10 = (const void *)(((unint64_t)a2 + v8 + 33) & ~v8);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v9, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_10016CD94(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  int v12;
  size_t v13;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)((v8 + 33 + a1) & ~v8);
  v10 = (const void *)(((unint64_t)a2 + v8 + 33) & ~v8);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v6);
  v12 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v6);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v13);
  return a1;
}

uint64_t sub_10016CE94(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v17;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = a2 - v7;
  if (a2 > v7)
  {
    v11 = v8 + ((v9 + 33) & ~v9);
    v12 = 8 * v11;
    if (v11 > 3)
      goto LABEL_8;
    v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (v13)
        goto LABEL_15;
    }
    else
    {
      if (v14 <= 0xFF)
      {
        if (v14 < 2)
          goto LABEL_22;
LABEL_8:
        v13 = *(unsigned __int8 *)(a1 + v11);
        if (!*(_BYTE *)(a1 + v11))
          goto LABEL_22;
LABEL_15:
        v15 = (v13 - 1) << v12;
        if (v11 > 3)
          v15 = 0;
        if ((_DWORD)v11)
        {
          if (v11 > 3)
            LODWORD(v11) = 4;
          __asm { BR              X12 }
        }
        return v7 + v15 + 1;
      }
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (*(_WORD *)(a1 + v11))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v17 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((a1 + v9 + 33) & ~v9, v6, v4);
  if (v17 >= 2)
    return v17 - 1;
  else
    return 0;
}

void sub_10016CFE0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  char v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = (*(unsigned __int8 *)(v7 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = v11 + v10;
  v13 = 8 * (v11 + v10);
  v14 = a3 >= v9;
  v15 = a3 - v9;
  if (v15 != 0 && v14)
  {
    if (v12 <= 3)
    {
      v16 = ((v15 + ~(-1 << v13)) >> v13) + 1;
      if (HIWORD(v16))
      {
        v6 = &dword_100000004;
      }
      else if (v16 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v16 > 1;
      }
    }
    else
    {
      v6 = &_mh_execute_header.magic + 1;
    }
  }
  if (v9 < a2)
  {
    v17 = ~v9 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v18 = v17 & ~(-1 << v13);
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v12 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_10016D190()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_10016D198()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for SyncAtom(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncAtom);
}

uint64_t sub_10016D1C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    swift_bridgeObjectRetain();
    swift_retain();
    v7 = (int *)sub_1000055B0(&qword_1002B1430);
    v8 = v7[16];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = *(_OWORD *)((char *)a2 + v8 + 16);
    *(_OWORD *)v9 = *(_OWORD *)((char *)a2 + v8);
    *(_OWORD *)(v9 + 16) = v11;
    *(_BYTE *)(v9 + 32) = *((_BYTE *)a2 + v8 + 32);
    v12 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v13 = (void *)(v9 + v12);
    v14 = (const void *)(v10 + v12);
    v15 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v14, 1, v15))
    {
      v16 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v13, 0, 1, v15);
    }
    v17 = v7[20];
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v20;
    *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
    *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 40);
    v21 = v7[24];
    v22 = a1 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = *(_OWORD *)((char *)a2 + v21 + 16);
    *(_OWORD *)v22 = *(_OWORD *)((char *)a2 + v21);
    *(_OWORD *)(v22 + 16) = v24;
    *(_BYTE *)(v22 + 32) = *((_BYTE *)a2 + v21 + 32);
    v26 = (uint64_t *)((char *)a2 + v21 + 40);
    v25 = *v26;
    swift_bridgeObjectRetain();
    if (v25)
    {
      v27 = *(_QWORD *)(v23 + 48);
      *(_QWORD *)(v22 + 40) = v25;
      *(_QWORD *)(v22 + 48) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v22 + 40) = *(_OWORD *)v26;
    }
    v28 = v7[28];
    v29 = a1 + v28;
    v30 = (uint64_t)a2 + v28;
    v31 = *(_OWORD *)(v30 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v31;
    *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
    v32 = *(_QWORD *)(v30 + 40);
    if (v32 == 1)
    {
      *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
      *(_QWORD *)(v29 + 56) = *(_QWORD *)(v30 + 56);
    }
    else
    {
      *(_QWORD *)(v29 + 40) = v32;
      *(_OWORD *)(v29 + 48) = *(_OWORD *)(v30 + 48);
      swift_bridgeObjectRetain();
    }
    v33 = v7[32];
    v34 = a1 + v33;
    v35 = (uint64_t)a2 + v33;
    v36 = *(_OWORD *)((char *)a2 + v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)((char *)a2 + v33);
    *(_OWORD *)(v34 + 16) = v36;
    *(_BYTE *)(v34 + 32) = *((_BYTE *)a2 + v33 + 32);
    v37 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v38 = (void *)(v34 + v37);
    v39 = (const void *)(v35 + v37);
    v40 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v39, 1, v40))
    {
      v41 = sub_1000055B0(&qword_1002B1438);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v38, 0, 1, v40);
    }
    v42 = v7[36];
    v43 = a1 + v42;
    v44 = (uint64_t)a2 + v42;
    v45 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v45;
    *(_DWORD *)(v43 + 31) = *(_DWORD *)(v44 + 31);
  }
  return a1;
}

uint64_t sub_10016D498(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  v2 = (int *)sub_1000055B0(&qword_1002B1430);
  v3 = a1 + v2[16];
  v4 = v3 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v5 = type metadata accessor for UniversalControlDisplayLayout(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + v2[24] + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + v2[28] + 40) != 1)
    swift_bridgeObjectRelease();
  v6 = a1 + v2[32];
  v7 = v6 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v8 = type metadata accessor for UniversalControlConfiguration(0);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return result;
}

uint64_t sub_10016D5CC(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  v4 = (int *)sub_1000055B0(&qword_1002B1430);
  v5 = v4[16];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a2 + v5 + 32);
  v9 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v10 = (void *)(v6 + v9);
  v11 = (const void *)(v7 + v9);
  v12 = type metadata accessor for UniversalControlDisplayLayout(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v4[20];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 + 32);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v16 + 40);
  v18 = v4[24];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(a2 + v18 + 16);
  *(_OWORD *)v19 = *(_OWORD *)(a2 + v18);
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(a2 + v18 + 32);
  v23 = (uint64_t *)(a2 + v18 + 40);
  v22 = *v23;
  swift_bridgeObjectRetain();
  if (v22)
  {
    v24 = *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v19 + 40) = v22;
    *(_QWORD *)(v19 + 48) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(v19 + 40) = *(_OWORD *)v23;
  }
  v25 = v4[28];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
  v29 = *(_QWORD *)(v27 + 40);
  if (v29 == 1)
  {
    *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
    *(_QWORD *)(v26 + 56) = *(_QWORD *)(v27 + 56);
  }
  else
  {
    *(_QWORD *)(v26 + 40) = v29;
    *(_OWORD *)(v26 + 48) = *(_OWORD *)(v27 + 48);
    swift_bridgeObjectRetain();
  }
  v30 = v4[32];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_OWORD *)(a2 + v30 + 16);
  *(_OWORD *)v31 = *(_OWORD *)(a2 + v30);
  *(_OWORD *)(v31 + 16) = v33;
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(a2 + v30 + 32);
  v34 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v35 = (void *)(v31 + v34);
  v36 = (const void *)(v32 + v34);
  v37 = type metadata accessor for UniversalControlConfiguration(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v36, 1, v37))
  {
    v38 = sub_1000055B0(&qword_1002B1438);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v35, 0, 1, v37);
  }
  v39 = v4[36];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_DWORD *)(v40 + 31) = *(_DWORD *)(v41 + 31);
  return a1;
}

uint64_t sub_10016D878(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v5 = (int *)sub_1000055B0(&qword_1002B1430);
  v6 = v5[16];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_BYTE *)v7 = *(_BYTE *)(a2 + v6);
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(a2 + v6 + 1);
  *(_BYTE *)(v7 + 2) = *(_BYTE *)(a2 + v6 + 2);
  *(_BYTE *)(v7 + 3) = *(_BYTE *)(a2 + v6 + 3);
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(a2 + v6 + 4);
  *(_BYTE *)(v7 + 5) = *(_BYTE *)(a2 + v6 + 5);
  *(_BYTE *)(v7 + 6) = *(_BYTE *)(a2 + v6 + 6);
  *(_BYTE *)(v7 + 7) = *(_BYTE *)(a2 + v6 + 7);
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(a2 + v6 + 9);
  *(_BYTE *)(v7 + 10) = *(_BYTE *)(a2 + v6 + 10);
  *(_BYTE *)(v7 + 11) = *(_BYTE *)(a2 + v6 + 11);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(a2 + v6 + 12);
  *(_BYTE *)(v7 + 13) = *(_BYTE *)(a2 + v6 + 13);
  *(_BYTE *)(v7 + 14) = *(_BYTE *)(a2 + v6 + 14);
  *(_BYTE *)(v7 + 15) = *(_BYTE *)(a2 + v6 + 15);
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + v6 + 32);
  *(_OWORD *)(v7 + 16) = v9;
  v10 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v11 = (void *)(v7 + v10);
  v12 = (const void *)(v8 + v10);
  v13 = type metadata accessor for UniversalControlDisplayLayout(0);
  v14 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v13);
  v15 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    v17 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  v18 = v5[20];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  *(_BYTE *)(v19 + 1) = *(_BYTE *)(v20 + 1);
  *(_BYTE *)(v19 + 2) = *(_BYTE *)(v20 + 2);
  *(_BYTE *)(v19 + 3) = *(_BYTE *)(v20 + 3);
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_BYTE *)(v19 + 5) = *(_BYTE *)(v20 + 5);
  *(_BYTE *)(v19 + 6) = *(_BYTE *)(v20 + 6);
  *(_BYTE *)(v19 + 7) = *(_BYTE *)(v20 + 7);
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(v19 + 9) = *(_BYTE *)(v20 + 9);
  *(_BYTE *)(v19 + 10) = *(_BYTE *)(v20 + 10);
  *(_BYTE *)(v19 + 11) = *(_BYTE *)(v20 + 11);
  *(_BYTE *)(v19 + 12) = *(_BYTE *)(v20 + 12);
  *(_BYTE *)(v19 + 13) = *(_BYTE *)(v20 + 13);
  *(_BYTE *)(v19 + 14) = *(_BYTE *)(v20 + 14);
  *(_BYTE *)(v19 + 15) = *(_BYTE *)(v20 + 15);
  v21 = *(_OWORD *)(v20 + 16);
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  *(_OWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = v5[24];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)(a2 + v22);
  *(_BYTE *)(v23 + 1) = *(_BYTE *)(a2 + v22 + 1);
  *(_BYTE *)(v23 + 2) = *(_BYTE *)(a2 + v22 + 2);
  *(_BYTE *)(v23 + 3) = *(_BYTE *)(a2 + v22 + 3);
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(a2 + v22 + 4);
  *(_BYTE *)(v23 + 5) = *(_BYTE *)(a2 + v22 + 5);
  *(_BYTE *)(v23 + 6) = *(_BYTE *)(a2 + v22 + 6);
  *(_BYTE *)(v23 + 7) = *(_BYTE *)(a2 + v22 + 7);
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(a2 + v22 + 8);
  *(_BYTE *)(v23 + 9) = *(_BYTE *)(a2 + v22 + 9);
  *(_BYTE *)(v23 + 10) = *(_BYTE *)(a2 + v22 + 10);
  *(_BYTE *)(v23 + 11) = *(_BYTE *)(a2 + v22 + 11);
  *(_BYTE *)(v23 + 12) = *(_BYTE *)(a2 + v22 + 12);
  *(_BYTE *)(v23 + 13) = *(_BYTE *)(a2 + v22 + 13);
  *(_BYTE *)(v23 + 14) = *(_BYTE *)(a2 + v22 + 14);
  *(_BYTE *)(v23 + 15) = *(_BYTE *)(a2 + v22 + 15);
  v25 = *(_OWORD *)(a2 + v22 + 16);
  *(_BYTE *)(v23 + 32) = *(_BYTE *)(a2 + v22 + 32);
  *(_OWORD *)(v23 + 16) = v25;
  v26 = (_QWORD *)(a1 + v22 + 40);
  v28 = (uint64_t *)(a2 + v22 + 40);
  v27 = *v28;
  if (*v26)
  {
    if (v27)
    {
      *(_QWORD *)(v23 + 40) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v23 + 48) = *(_QWORD *)(v24 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_10000E36C(v23 + 40, &qword_1002ADF48);
  }
  else if (v27)
  {
    *(_QWORD *)(v23 + 40) = v27;
    *(_QWORD *)(v23 + 48) = *(_QWORD *)(v24 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  *(_OWORD *)v26 = *(_OWORD *)v28;
LABEL_14:
  v29 = v5[28];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_BYTE *)v30 = *(_BYTE *)(a2 + v29);
  *(_BYTE *)(v30 + 1) = *(_BYTE *)(a2 + v29 + 1);
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(a2 + v29 + 2);
  *(_BYTE *)(v30 + 3) = *(_BYTE *)(a2 + v29 + 3);
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(a2 + v29 + 4);
  *(_BYTE *)(v30 + 5) = *(_BYTE *)(a2 + v29 + 5);
  *(_BYTE *)(v30 + 6) = *(_BYTE *)(a2 + v29 + 6);
  *(_BYTE *)(v30 + 7) = *(_BYTE *)(a2 + v29 + 7);
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(a2 + v29 + 8);
  *(_BYTE *)(v30 + 9) = *(_BYTE *)(a2 + v29 + 9);
  *(_BYTE *)(v30 + 10) = *(_BYTE *)(a2 + v29 + 10);
  *(_BYTE *)(v30 + 11) = *(_BYTE *)(a2 + v29 + 11);
  *(_BYTE *)(v30 + 12) = *(_BYTE *)(a2 + v29 + 12);
  *(_BYTE *)(v30 + 13) = *(_BYTE *)(a2 + v29 + 13);
  *(_BYTE *)(v30 + 14) = *(_BYTE *)(a2 + v29 + 14);
  *(_BYTE *)(v30 + 15) = *(_BYTE *)(a2 + v29 + 15);
  v32 = *(_OWORD *)(a2 + v29 + 16);
  *(_BYTE *)(v30 + 32) = *(_BYTE *)(a2 + v29 + 32);
  *(_OWORD *)(v30 + 16) = v32;
  v33 = (_OWORD *)(a1 + v29 + 40);
  v35 = (uint64_t *)(a2 + v29 + 40);
  v34 = *v35;
  if (*(_QWORD *)v33 == 1)
  {
    if (v34 == 1)
    {
      v36 = *(_OWORD *)v35;
      *(_QWORD *)(v30 + 56) = *(_QWORD *)(v31 + 56);
      *v33 = v36;
    }
    else
    {
      *(_QWORD *)(v30 + 40) = v34;
      *(_OWORD *)(v30 + 48) = *(_OWORD *)(v31 + 48);
      swift_bridgeObjectRetain();
    }
  }
  else if (v34 == 1)
  {
    sub_10000E36C(v30 + 40, &qword_1002B37B8);
    v37 = *(_QWORD *)(v31 + 56);
    *v33 = *(_OWORD *)v35;
    *(_QWORD *)(v30 + 56) = v37;
  }
  else
  {
    *(_QWORD *)(v30 + 40) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v30 + 48) = *(_BYTE *)(v31 + 48);
    *(_BYTE *)(v30 + 49) = *(_BYTE *)(v31 + 49);
    *(_BYTE *)(v30 + 50) = *(_BYTE *)(v31 + 50);
    *(_BYTE *)(v30 + 51) = *(_BYTE *)(v31 + 51);
    *(_BYTE *)(v30 + 52) = *(_BYTE *)(v31 + 52);
    *(_BYTE *)(v30 + 53) = *(_BYTE *)(v31 + 53);
    *(_BYTE *)(v30 + 54) = *(_BYTE *)(v31 + 54);
    *(_BYTE *)(v30 + 55) = *(_BYTE *)(v31 + 55);
    *(_BYTE *)(v30 + 56) = *(_BYTE *)(v31 + 56);
    *(_BYTE *)(v30 + 57) = *(_BYTE *)(v31 + 57);
    *(_BYTE *)(v30 + 58) = *(_BYTE *)(v31 + 58);
    *(_BYTE *)(v30 + 59) = *(_BYTE *)(v31 + 59);
    *(_BYTE *)(v30 + 60) = *(_BYTE *)(v31 + 60);
    *(_BYTE *)(v30 + 61) = *(_BYTE *)(v31 + 61);
    *(_BYTE *)(v30 + 62) = *(_BYTE *)(v31 + 62);
    *(_BYTE *)(v30 + 63) = *(_BYTE *)(v31 + 63);
  }
  v38 = v5[32];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_BYTE *)v39 = *(_BYTE *)(a2 + v38);
  *(_BYTE *)(v39 + 1) = *(_BYTE *)(a2 + v38 + 1);
  *(_BYTE *)(v39 + 2) = *(_BYTE *)(a2 + v38 + 2);
  *(_BYTE *)(v39 + 3) = *(_BYTE *)(a2 + v38 + 3);
  *(_BYTE *)(v39 + 4) = *(_BYTE *)(a2 + v38 + 4);
  *(_BYTE *)(v39 + 5) = *(_BYTE *)(a2 + v38 + 5);
  *(_BYTE *)(v39 + 6) = *(_BYTE *)(a2 + v38 + 6);
  *(_BYTE *)(v39 + 7) = *(_BYTE *)(a2 + v38 + 7);
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(a2 + v38 + 8);
  *(_BYTE *)(v39 + 9) = *(_BYTE *)(a2 + v38 + 9);
  *(_BYTE *)(v39 + 10) = *(_BYTE *)(a2 + v38 + 10);
  *(_BYTE *)(v39 + 11) = *(_BYTE *)(a2 + v38 + 11);
  *(_BYTE *)(v39 + 12) = *(_BYTE *)(a2 + v38 + 12);
  *(_BYTE *)(v39 + 13) = *(_BYTE *)(a2 + v38 + 13);
  *(_BYTE *)(v39 + 14) = *(_BYTE *)(a2 + v38 + 14);
  *(_BYTE *)(v39 + 15) = *(_BYTE *)(a2 + v38 + 15);
  v41 = *(_OWORD *)(a2 + v38 + 16);
  *(_BYTE *)(v39 + 32) = *(_BYTE *)(a2 + v38 + 32);
  *(_OWORD *)(v39 + 16) = v41;
  v42 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v43 = (void *)(v39 + v42);
  v44 = (const void *)(v40 + v42);
  v45 = type metadata accessor for UniversalControlConfiguration(0);
  v46 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v43, 1, v45);
  v47 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v44, 1, v45);
  if (!v46)
  {
    v48 = *(_QWORD *)(v45 - 8);
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v48 + 24))(v43, v44, v45);
      goto LABEL_27;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v43, v45);
    goto LABEL_26;
  }
  if (v47)
  {
LABEL_26:
    v49 = sub_1000055B0(&qword_1002B1438);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v43, 0, 1, v45);
LABEL_27:
  v50 = v5[36];
  v51 = a1 + v50;
  v52 = (__int128 *)(a2 + v50);
  v53 = *v52;
  v54 = v52[1];
  *(_DWORD *)(v51 + 31) = *(_DWORD *)((char *)v52 + 31);
  *(_OWORD *)v51 = v53;
  *(_OWORD *)(v51 + 16) = v54;
  return a1;
}

uint64_t sub_10016DFE4(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = (int *)sub_1000055B0(&qword_1002B1430);
  v5 = v4[16];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a2 + v5 + 32);
  v9 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v10 = (void *)(v6 + v9);
  v11 = (const void *)(v7 + v9);
  v12 = type metadata accessor for UniversalControlDisplayLayout(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v12))
  {
    v13 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v12);
  }
  v14 = v4[20];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  v18 = v4[24];
  v19 = a1 + v18;
  v20 = (__int128 *)(a2 + v18);
  *(_QWORD *)(v19 + 48) = *((_QWORD *)v20 + 6);
  v21 = v20[2];
  v22 = *v20;
  *(_OWORD *)(v19 + 16) = v20[1];
  *(_OWORD *)(v19 + 32) = v21;
  *(_OWORD *)v19 = v22;
  v23 = v4[28];
  v24 = (_OWORD *)(a1 + v23);
  v25 = (_OWORD *)(a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v25[3];
  v24[2] = v25[2];
  v24[3] = v27;
  v28 = v4[32];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_OWORD *)(a2 + v28 + 16);
  *(_OWORD *)v29 = *(_OWORD *)(a2 + v28);
  *(_OWORD *)(v29 + 16) = v31;
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(a2 + v28 + 32);
  v32 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v33 = (void *)(v29 + v32);
  v34 = (const void *)(v30 + v32);
  v35 = type metadata accessor for UniversalControlConfiguration(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v34, 1, v35))
  {
    v36 = sub_1000055B0(&qword_1002B1438);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v33, 0, 1, v35);
  }
  v37 = v4[36];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *(_OWORD *)(v38 + 16) = v40;
  *(_DWORD *)(v38 + 31) = *(_DWORD *)(v39 + 31);
  return a1;
}

uint64_t sub_10016E208(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v4 = (int *)sub_1000055B0(&qword_1002B1430);
  v5 = v4[16];
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a2 + v5 + 32);
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  v9 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v10 = (void *)(v6 + v9);
  v11 = (const void *)(v7 + v9);
  v12 = type metadata accessor for UniversalControlDisplayLayout(0);
  v13 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v12);
  v14 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    v16 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
LABEL_7:
  v17 = v4[20];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  *(_QWORD *)(v18 + 40) = *(_QWORD *)(v19 + 40);
  swift_bridgeObjectRelease();
  v21 = v4[24];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_OWORD *)(a2 + v21 + 16);
  *(_OWORD *)v22 = *(_OWORD *)(a2 + v21);
  *(_OWORD *)(v22 + 16) = v24;
  *(_BYTE *)(v22 + 32) = *(_BYTE *)(a2 + v21 + 32);
  v25 = (_QWORD *)(a1 + v21 + 40);
  v27 = (uint64_t *)(a2 + v21 + 40);
  v26 = *v27;
  if (*v25)
  {
    if (v26)
    {
      *(_QWORD *)(v22 + 40) = v26;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10000E36C((uint64_t)v25, &qword_1002ADF48);
  }
  *(_OWORD *)v25 = *(_OWORD *)v27;
LABEL_12:
  v28 = v4[28];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_OWORD *)(a2 + v28 + 16);
  *(_OWORD *)v29 = *(_OWORD *)(a2 + v28);
  *(_OWORD *)(v29 + 16) = v31;
  *(_BYTE *)(v29 + 32) = *(_BYTE *)(a2 + v28 + 32);
  v32 = a1 + v28 + 40;
  v34 = (uint64_t *)(a2 + v28 + 40);
  v33 = *v34;
  if (*(_QWORD *)v32 == 1)
  {
LABEL_15:
    *(_OWORD *)v32 = *(_OWORD *)v34;
    *(_QWORD *)(v32 + 16) = v34[2];
    goto LABEL_17;
  }
  if (v33 == 1)
  {
    sub_10000E36C(v32, &qword_1002B37B8);
    goto LABEL_15;
  }
  *(_QWORD *)(v29 + 40) = v33;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(v30 + 48);
LABEL_17:
  v35 = v4[32];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_OWORD *)(a2 + v35 + 16);
  *(_OWORD *)v36 = *(_OWORD *)(a2 + v35);
  *(_OWORD *)(v36 + 16) = v38;
  *(_BYTE *)(v36 + 32) = *(_BYTE *)(a2 + v35 + 32);
  v39 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v40 = (void *)(v36 + v39);
  v41 = (const void *)(v37 + v39);
  v42 = type metadata accessor for UniversalControlConfiguration(0);
  v43 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v40, 1, v42);
  v44 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v41, 1, v42);
  if (!v43)
  {
    v45 = *(_QWORD *)(v42 - 8);
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v45 + 40))(v40, v41, v42);
      goto LABEL_23;
    }
    (*(void (**)(void *, uint64_t))(v45 + 8))(v40, v42);
    goto LABEL_22;
  }
  if (v44)
  {
LABEL_22:
    v46 = sub_1000055B0(&qword_1002B1438);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v40, 0, 1, v42);
LABEL_23:
  v47 = v4[36];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_DWORD *)(v48 + 31) = *(_DWORD *)(v49 + 31);
  return a1;
}

uint64_t sub_10016E584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1430);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
}

uint64_t sub_10016E5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000055B0(&qword_1002B1430);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a3, v6);
}

uint64_t type metadata accessor for SyncMessage(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B3830, (uint64_t)&nominal type descriptor for SyncMessage);
}

void sub_10016E618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  _BYTE v7[20];
  int v8;

  v6[0] = "\b";
  v6[1] = &unk_100228638;
  sub_10016F628(319, (unint64_t *)&qword_1002B1E90);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_100228638;
    v6[4] = &unk_100228650;
    v6[5] = &unk_100228668;
    sub_10016E704(319, (unint64_t *)&qword_1002B14F8);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = &unk_100228680;
      swift_getTupleTypeLayout(v7, 0, 8, v6);
      swift_initEnumMetadataSingleCase(a1, 256, v7);
      *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v8;
    }
  }
}

void sub_10016E704(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for UniversalControlConfiguration(255);
    sub_1001798E4(qword_1002B1EB0);
    sub_1001798E4((unint64_t *)&unk_1002B1500);
    v4 = sub_100179798(v3, (uint64_t)&protocol witness table for UniversalControlConfiguration, v6, v7, v8, v9);
    if (!v5)
      atomic_store(v4, a2);
  }
  sub_1000797D8();
}

uint64_t *sub_10016E794(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000055B0(&qword_1002B1438);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[6];
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    if (*v15)
    {
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    v17 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UniversalControlDisplayLayout(0);
    swift_retain();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v22 = a3[9];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    if (*(_QWORD *)v24 == 1)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
    }
    else
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
      swift_bridgeObjectRetain();
    }
    *(uint64_t *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

double sub_10016E990(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UniversalControlConfiguration(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(a1 + a2[6]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v6 = a1 + a2[8];
  v7 = type metadata accessor for UniversalControlDisplayLayout(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  if (*(_QWORD *)(a1 + a2[9]) != 1)
    swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_WORD *sub_10016EA74(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000055B0(&qword_1002B1438);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  if (*v13)
  {
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  v15 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for UniversalControlDisplayLayout(0);
  swift_retain();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v17, 1, v18))
  {
    v19 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v16, 0, 1, v18);
  }
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  if (*(_QWORD *)v22 == 1)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  return a1;
}

_WORD *sub_10016EC44(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  v10 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000055B0(&qword_1002B1438);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a2 + v14);
  if (*(_QWORD *)((char *)a1 + v14))
  {
    if (v17)
    {
      *v15 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15[1] = *((_QWORD *)v16 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_10000E36C((uint64_t)a1 + v14, &qword_1002ADF48);
  }
  else if (v17)
  {
    *v15 = v17;
    v15[1] = *((_QWORD *)v16 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
LABEL_14:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for UniversalControlDisplayLayout(0);
  v22 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v21);
  v23 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v20, 1, v21);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v19, 0, 1, v21);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v24 = *(_QWORD *)(v21 - 8);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
LABEL_19:
    v25 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v19, v20, v21);
LABEL_20:
  v26 = a3[9];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26);
  if (*(_QWORD *)((char *)a1 + v26) == 1)
  {
    if (v29 == 1)
    {
      v30 = *(_OWORD *)v28;
      *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v27 = v30;
    }
    else
    {
      *(_QWORD *)v27 = v29;
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
      swift_bridgeObjectRetain();
    }
  }
  else if (v29 == 1)
  {
    sub_10000E36C((uint64_t)a1 + v26, &qword_1002B37B8);
    v31 = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_QWORD *)v27 + 2) = v31;
  }
  else
  {
    *(_QWORD *)v27 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v27[8] = v28[8];
    v27[9] = v28[9];
    v27[10] = v28[10];
    v27[11] = v28[11];
    v27[12] = v28[12];
    v27[13] = v28[13];
    v27[14] = v28[14];
    v27[15] = v28[15];
    v27[16] = v28[16];
    v27[17] = v28[17];
    v27[18] = v28[18];
    v27[19] = v28[19];
    v27[20] = v28[20];
    v27[21] = v28[21];
    v27[22] = v28[22];
    v27[23] = v28[23];
  }
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *sub_10016EFD4(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000055B0(&qword_1002B1438);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UniversalControlDisplayLayout(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v14, 1, v15))
  {
    v16 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v13, 0, 1, v15);
  }
  v17 = a3[9];
  v18 = a3[10];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  return a1;
}

_WORD *sub_10016F144(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  v10 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1000055B0(&qword_1002B1438);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  if (*(_QWORD *)((char *)a1 + v14))
  {
    if (*v16)
    {
      *v15 = *v16;
      swift_bridgeObjectRelease();
      v15[1] = v16[1];
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10000E36C((uint64_t)v15, &qword_1002ADF48);
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
LABEL_12:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  v17 = a3[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for UniversalControlDisplayLayout(0);
  v21 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v20);
  v22 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v20);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v18, 0, 1, v20);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v23 = *(_QWORD *)(v20 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v20);
LABEL_17:
    v24 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v18, v19, v20);
LABEL_18:
  v25 = a3[9];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  if (*(_QWORD *)((char *)a1 + v25) != 1)
  {
    if (*(_QWORD *)v27 != 1)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
      goto LABEL_23;
    }
    sub_10000E36C(v26, &qword_1002B37B8);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
LABEL_23:
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10016F3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016F3F0);
}

uint64_t sub_10016F3F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v6 = sub_1000055B0(&qword_1002B1438);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a3[5];
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + v8, a2, v7);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v7 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    v8 = a3[8];
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[6]);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10016F4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016F4AC);
}

void sub_10016F4AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1000055B0(&qword_1002B1438);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6]) = a2;
      sub_10000B350();
      return;
    }
    v9 = sub_1000055B0((uint64_t *)&unk_1002B3380);
    v10 = a4[8];
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1 + v10, a2, a2, v9);
}

uint64_t type metadata accessor for SyncViewRemoteData(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B3898, (uint64_t)&nominal type descriptor for SyncViewRemoteData);
}

void sub_10016F558(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_1002286B8;
  sub_10016E704(319, &qword_1002B38A8);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1002286D0;
    v6[3] = &unk_1002286E8;
    sub_10016F628(319, (unint64_t *)&unk_1002B38B0);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_100228700;
      v6[6] = &unk_1002286E8;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_10016F628(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    type metadata accessor for UniversalControlDisplayLayout(255);
    sub_1001798E4(&qword_1002B14F0);
    sub_1001798E4((unint64_t *)&unk_1002B1EA0);
    v4 = sub_100179798(v3, (uint64_t)&protocol witness table for UniversalControlDisplayLayout, v6, v7, v8, v9);
    if (!v5)
      atomic_store(v4, a2);
  }
  sub_1000797D8();
}

void sub_10016F6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  Swift::String v48;
  Swift::String v49;

  sub_10002626C();
  v2 = v1;
  v3 = sub_10000E440();
  v44 = *(_QWORD *)(v3 - 8);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10000E478();
  swift_bridgeObjectRetain_n(v2, 2);
  sub_100057E00();
  v6 = v5;
  sub_10000E420();
  v45 = v6;
  sub_100179A2C(&v45);
  if (v6)
  {
    sub_100179AF0();
    __break(1u);
  }
  else
  {
    sub_10000E420();
    v7 = v45;
    v8 = *(_QWORD *)(v45 + 16);
    if (v8)
    {
      v47 = _swiftEmptyArrayStorage;
      sub_10003B17C();
      v9 = v7 + 48;
      do
      {
        v10 = *(unsigned __int8 *)(v9 - 11);
        v11 = *(unsigned __int8 *)(v9 - 12);
        v12 = *(unsigned __int8 *)(v9 - 13);
        v13 = *(unsigned __int8 *)(v9 - 14);
        v14 = *(unsigned __int8 *)(v9 - 15);
        v15 = *(unsigned __int8 *)(v9 - 16);
        v45 = 0;
        v46 = 0xE000000000000000;
        v16 = UUID.init(uuid:)(v15, v14, v13, v12, v11, v10);
        v17 = UUID.uuidString.getter(v16);
        v19 = v18;
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v0, v3);
        v20 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000) == 0)
          v20 = v17;
        v21 = 7;
        if (((v19 >> 60) & ((v17 & 0x800000000000000) == 0)) != 0)
          v21 = 11;
        v22 = v21 | (v20 << 16);
        v23 = String.index(_:offsetBy:limitedBy:)(15, 8, v22, v17, v19);
        if ((v24 & 1) != 0)
          v25 = v22;
        else
          v25 = v23;
        v26 = String.subscript.getter(15, v25);
        v28 = v27;
        sub_100075850();
        static String._fromSubstring(_:)(v26);
        sub_100179940();
        sub_10000E594();
        swift_bridgeObjectRelease(v46);
        v45 = v28;
        v46 = v26;
        sub_100179740();
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        sub_1001799C0(v48);
        sub_10000E410();
        v29 = v45;
        v30 = v46;
        v31 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_10003B148();
          v31 = v47;
        }
        v32 = v31[2];
        if (v32 >= v31[3] >> 1)
        {
          sub_10003B148();
          v31 = v47;
        }
        v9 += 24;
        v31[2] = v32 + 1;
        v33 = &v31[2 * v32];
        v33[4] = v29;
        v33[5] = v30;
        --v8;
      }
      while (v8);
      swift_release();
    }
    else
    {
      sub_1000269A0();
      v31 = _swiftEmptyArrayStorage;
    }
    v45 = (uint64_t)v31;
    sub_10003B038();
    sub_100179800((unint64_t *)&qword_1002AB150);
    sub_1001794F8(v34, v35, v36, v34);
    sub_100075850();
    _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease(v39);
    v41 = HIBYTE(v40) & 0xF;
    if ((v40 & 0x2000000000000000) == 0)
      v41 = v38 & 0xFFFFFFFFFFFFLL;
    v45 = 91;
    v46 = 0xE100000000000000;
    if (v41)
    {
      _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
      sub_1001799C0(v49);
      sub_10000E410();
      sub_100179954();
      sub_100179B10();
      sub_10000E594();
      v42 = 23901;
      v43 = 0xE200000000000000;
    }
    else
    {
      sub_100179B10();
      sub_10000E594();
      v42 = 93;
      v43 = 0xE100000000000000;
    }
    String.append(_:)(*(Swift::String *)&v42);
    sub_10000E4E0();
  }
}

void sub_10016F9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  Swift::String v41;

  sub_10002626C();
  v2 = sub_10000E440();
  v37 = *(_QWORD *)(v2 - 8);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10017967C();
  sub_100057E00();
  v38 = v4;
  sub_100179A2C(&v38);
  if (v0)
  {
    sub_100179AF0();
    __break(1u);
  }
  else
  {
    sub_10000E420();
    v5 = v38;
    v6 = *(_QWORD *)(v38 + 16);
    if (v6)
    {
      v40 = _swiftEmptyArrayStorage;
      sub_10003B17C();
      v7 = v5 + 48;
      do
      {
        v8 = *(unsigned __int8 *)(v7 - 9);
        v9 = *(unsigned __int8 *)(v7 - 10);
        v10 = *(unsigned __int8 *)(v7 - 11);
        v11 = *(unsigned __int8 *)(v7 - 12);
        v12 = *(unsigned __int8 *)(v7 - 13);
        v13 = *(unsigned __int8 *)(v7 - 14);
        v14 = *(unsigned __int8 *)(v7 - 15);
        v15 = *(unsigned __int8 *)(v7 - 16);
        v38 = 0;
        v39 = 0xE000000000000000;
        sub_100065DE8(v15, v14, v13, v12, v11, v10, v9, v8);
        v16 = sub_100043344();
        v18 = v17;
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v1, v2);
        v19 = HIBYTE(v18) & 0xF;
        if ((v18 & 0x2000000000000000) == 0)
          v19 = v16;
        v20 = 7;
        if (((v18 >> 60) & ((v16 & 0x800000000000000) == 0)) != 0)
          v20 = 11;
        v21 = v20 | (v19 << 16);
        v22 = String.index(_:offsetBy:limitedBy:)(15, 8, v21, v16, v18);
        if ((v23 & 1) != 0)
          v24 = v21;
        else
          v24 = v22;
        v25 = String.subscript.getter(15, v24);
        sub_10002D89C();
        v26 = static String._fromSubstring(_:)(v25);
        v28 = v27;
        sub_10000E594();
        swift_bridgeObjectRelease(v39);
        v38 = v26;
        v39 = v28;
        sub_100179740();
        v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        sub_1001799C0(v41);
        sub_10000E594();
        v29 = v38;
        v30 = v39;
        v31 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        {
          sub_10003B148();
          v31 = v40;
        }
        v32 = v31[2];
        if (v32 >= v31[3] >> 1)
        {
          sub_10003B148();
          v31 = v40;
        }
        v7 += 24;
        v31[2] = v32 + 1;
        v33 = &v31[2 * v32];
        v33[4] = v29;
        v33[5] = v30;
        --v6;
      }
      while (v6);
      swift_release();
    }
    else
    {
      sub_1000269A0();
      v31 = _swiftEmptyArrayStorage;
    }
    v38 = (uint64_t)v31;
    sub_100179738();
    sub_100179AA8((unint64_t *)&qword_1002AB150);
    sub_1001794F8(v34, v35, v36, v34);
    sub_10002D89C();
    v38 = 91;
    v39 = 0xE100000000000000;
    sub_100179550();
    sub_10000E594();
    sub_1001794B0(93);
    sub_10000E4E0();
  }
}

void sub_10016FC9C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;

  sub_10002626C();
  v3 = v2;
  v4 = sub_10000E440();
  v66 = *(_QWORD *)(v4 - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_10017967C();
  sub_100057E00();
  v67 = (_QWORD *)v6;
  sub_100179A2C((uint64_t *)&v67);
  if (v0)
  {
    swift_release();
    __break(1u);
  }
  else
  {
    v7 = v3 >> 8;
    v8 = v3 >> 16;
    v64 = v3 >> 24;
    sub_10000E420();
    v9 = (uint64_t)v67;
    v10 = v67[2];
    v65 = v3 >> 16;
    if (v10)
    {
      v61 = v3 >> 8;
      v63 = v3;
      v69 = _swiftEmptyArrayStorage;
      sub_10003B17C();
      v11 = v9 + 48;
      do
      {
        v12 = *(unsigned __int8 *)(v11 - 9);
        v13 = *(unsigned __int8 *)(v11 - 10);
        v14 = *(unsigned __int8 *)(v11 - 11);
        v15 = *(unsigned __int8 *)(v11 - 12);
        v16 = *(unsigned __int8 *)(v11 - 13);
        v17 = *(unsigned __int8 *)(v11 - 14);
        v18 = *(unsigned __int8 *)(v11 - 15);
        v19 = *(unsigned __int8 *)(v11 - 16);
        v67 = 0;
        v68 = 0xE000000000000000;
        sub_100065DE8(v19, v18, v17, v16, v15, v14, v13, v12);
        v20 = sub_100043344();
        v22 = v21;
        v23 = v4;
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v1, v4);
        v24 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0)
          v24 = v20;
        v25 = 7;
        if (((v22 >> 60) & ((v20 & 0x800000000000000) == 0)) != 0)
          v25 = 11;
        v26 = v25 | (v24 << 16);
        v27 = String.index(_:offsetBy:limitedBy:)(15, 8, v26, v20, v22);
        if ((v28 & 1) != 0)
          v29 = v26;
        else
          v29 = v27;
        v30 = String.subscript.getter(15, v29);
        swift_bridgeObjectRelease(v22);
        v31 = static String._fromSubstring(_:)(v30);
        v33 = v32;
        sub_1000267C4();
        swift_bridgeObjectRelease(v68);
        v67 = (_QWORD *)v31;
        v68 = v33;
        sub_100179740();
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v34);
        sub_10000E50C();
        v35 = (uint64_t)v67;
        v36 = v68;
        v37 = v69;
        if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
        {
          sub_10003B148();
          v37 = v69;
        }
        v38 = v37[2];
        if (v38 >= v37[3] >> 1)
        {
          sub_10003B148();
          v37 = v69;
        }
        v11 += 24;
        v37[2] = v38 + 1;
        v39 = &v37[2 * v38];
        v39[4] = v35;
        v39[5] = v36;
        --v10;
        v4 = v23;
      }
      while (v10);
      swift_release();
      v3 = v63;
      v7 = v61;
      v8 = v65;
    }
    else
    {
      sub_1000269A0();
      v37 = _swiftEmptyArrayStorage;
    }
    v67 = v37;
    sub_10003B038();
    sub_100179800((unint64_t *)&qword_1002AB150);
    v62 = sub_1001794F8(v40, v41, v42, v40);
    swift_bridgeObjectRelease(v37);
    sub_1001794B8();
    sub_1001799DC(v3, v7, v8, v64);
    sub_100043344();
    v44 = v43;
    sub_100179AF8();
    v45 = sub_10016B12C();
    sub_1000599D0(v45, v46, v44);
    v47 = sub_1000602C0();
    v49 = v48;
    sub_10000E420();
    sub_100075850();
    v50 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0)
      v50 = v47 & 0xFFFFFFFFFFFFLL;
    if (v50)
    {
      sub_1001797E0();
      sub_1001794B8();
      sub_1001799DC(v3, v7, v65, v64);
      sub_100043344();
      v52 = v51;
      sub_100179AF8();
      v53 = sub_10016B12C();
      sub_1000599D0(v53, v54, v52);
      v55 = sub_1000676A4();
      v57 = v56;
      sub_10000E410();
      v58._countAndFlagsBits = v55;
      v58._object = v57;
      String.append(_:)(v58);
      sub_10000E50C();
      sub_100179954();
      sub_1001798EC(v62);
      sub_10000E410();
      v59 = 23901;
      v60 = 0xE200000000000000;
    }
    else
    {
      sub_1001797E0();
      sub_1001798EC(v62);
      sub_10000E410();
      v59 = 93;
      v60 = 0xE100000000000000;
    }
    String.append(_:)(*(Swift::String *)&v59);
    sub_10000E4E0();
  }
}

void sub_1001700D0()
{
  sub_100099908();
  sub_1000050D4();
}

void sub_1001700EC()
{
  uint64_t *v0;
  uint64_t v1;

  *v0 = sub_10017999C();
  v0[1] = v1;
  sub_1000050D4();
}

void sub_100170108()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100179984();
  *v0 = v1;
  sub_1000050D4();
}

void sub_100170124()
{
  sub_10009999C();
  sub_1000050D4();
}

void sub_100170140()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001799A8();
  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
  sub_1000050D4();
}

void sub_100170160()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100179990();
  *v0 = v1;
  sub_1000050D4();
}

void sub_10017017C(uint64_t a1)
{
  CGSize.init(_:)(a1);
  sub_1000050D4();
}

void sub_100170198(_WORD *a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *a1 = 256;
  v2 = (int *)type metadata accessor for SyncViewRemoteData(0);
  v3 = type metadata accessor for UniversalControlConfiguration(0);
  sub_1001798D4(v3, v4, v5, v3);
  v6 = (_QWORD *)((char *)a1 + v2[6]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)a1 + v2[7]) = 0;
  v7 = type metadata accessor for UniversalControlDisplayLayout(0);
  sub_1001798D4(v7, v8, v9, v7);
  v10 = (_QWORD *)((char *)a1 + v2[9]);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 1;
  *(_QWORD *)((char *)a1 + v2[10]) = 0;
  sub_10000B350();
}

uint64_t sub_100170228()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_1000F0204();
  sub_100178BCC(v1, (uint64_t)v0);
  v3 = *v0;
  swift_release();
  v4 = (int *)sub_1000055B0(&qword_1002B1430);
  v5 = (uint64_t)v0 + v4[16];
  swift_bridgeObjectRelease();
  sub_1000FB3C0(*(uint64_t *)((char *)v0 + v4[24] + 40), *(uint64_t *)((char *)v0 + v4[24] + 48));
  sub_1000FB3FC(*(uint64_t *)((char *)v0 + v4[28] + 40));
  sub_10000E36C((uint64_t)v0 + v4[32], (uint64_t *)&unk_1002B1E00);
  sub_10000E36C(v5, (uint64_t *)&unk_1002B1DF0);
  return v3;
}

void sub_1001702F4()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  sub_10002626C();
  v3 = v2;
  sub_1000055B0((uint64_t *)&unk_1002B1E00);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_1000268CC();
  sub_1000055B0((uint64_t *)&unk_1002B1DF0);
  sub_10000E490();
  __chkstk_darwin(v5);
  v7 = (__int128 *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_100179618(v9, v25);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v33 = *(_QWORD *)(v1 + 48);
  sub_1000055B0(&qword_1002B1430);
  sub_100179B2C();
  v34 = *((_QWORD *)v11 + 5);
  v13 = (__int128 *)(v1 + v12[24]);
  v14 = *((_QWORD *)v13 + 5);
  v15 = *((_QWORD *)v13 + 6);
  v16 = (__int128 *)(v1 + v12[28]);
  v17 = *((_QWORD *)v16 + 5);
  v29 = *((_QWORD *)v16 + 6);
  v30 = v17;
  v28 = *((_QWORD *)v16 + 7);
  v18 = v1 + v12[32];
  v19 = (uint64_t *)(v1 + v12[36]);
  v20 = *((_BYTE *)v19 + 34);
  if (v20)
    v21 = 0;
  else
    v21 = *v19;
  if (*((_BYTE *)v19 + 34))
    v22 = 0;
  else
    v22 = v19[1];
  v23 = *v13;
  v26 = *(_OWORD *)(v1 + 8);
  v27 = v23;
  v24 = *v16;
  v31 = *v11;
  v32 = v24;
  sub_10005FA70(v10, (uint64_t)v7, (uint64_t *)&unk_1002B1DF0);
  sub_10005FA70(v18, (uint64_t)v0, (uint64_t *)&unk_1002B1E00);
  v25 = *v0;
  sub_10000E36C((uint64_t)v0, (uint64_t *)&unk_1002B1E00);
  sub_1000FB3C0(v14, v15);
  sub_100179AF0();
  v33 = *v7;
  sub_10000E36C((uint64_t)v7, (uint64_t *)&unk_1002B1DF0);
  sub_1000FB3FC(v30);
  swift_bridgeObjectRelease();
  *(_QWORD *)v3 = v21;
  *(_QWORD *)(v3 + 8) = v22;
  *(_BYTE *)(v3 + 16) = v20;
  *(_OWORD *)(v3 + 17) = v25;
  *(_OWORD *)(v3 + 33) = v27;
  *(_OWORD *)(v3 + 49) = v26;
  *(_OWORD *)(v3 + 65) = v33;
  *(_OWORD *)(v3 + 81) = v32;
  *(_OWORD *)(v3 + 97) = v31;
  sub_10000E4E0();
}

void sub_1001704C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  sub_10002626C();
  v3 = v2;
  sub_1000055B0((uint64_t *)&unk_1002B1E00);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_100065E48();
  sub_1000055B0((uint64_t *)&unk_1002B1DF0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002641C();
  v8 = v7 - v6;
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_100179618(v10, v54);
  swift_bridgeObjectRelease();
  v63 = *(_OWORD *)(v1 + 24);
  v68 = *(_BYTE *)(v1 + 40);
  sub_1000055B0(&qword_1002B1430);
  sub_100179B2C();
  v61 = *(_QWORD *)(v11 + 24);
  v62 = *(_QWORD *)(v11 + 16);
  v12 = *(_BYTE *)(v11 + 32);
  v14 = v1 + v13[24];
  v59 = *(_OWORD *)(v14 + 16);
  v65 = *(_BYTE *)(v14 + 32);
  v66 = v12;
  v16 = *(_QWORD *)(v14 + 40);
  v15 = *(_QWORD *)(v14 + 48);
  v17 = v1 + v13[28];
  v60 = *(_OWORD *)(v17 + 16);
  v64 = *(_BYTE *)(v17 + 32);
  v18 = *(_QWORD *)(v17 + 40);
  v19 = v1 + v13[32];
  v20 = v1 + v13[36];
  v21 = *(_QWORD *)(v20 + 16);
  v57 = *(_WORD *)(v20 + 32);
  v58 = *(_QWORD *)(v20 + 24);
  v56 = *(unsigned __int8 *)(v20 + 34);
  sub_10005FA70(v22, v8, (uint64_t *)&unk_1002B1DF0);
  sub_10005FA70(v19, v0, (uint64_t *)&unk_1002B1E00);
  swift_release();
  if ((v68 & 1) != 0)
  {
    sub_100179638(v18);
    swift_bridgeObjectRelease();
    sub_10000E36C(v0, (uint64_t *)&unk_1002B1E00);
    v23 = (uint64_t *)&unk_1002B1DF0;
    v24 = v8;
LABEL_3:
    sub_10000E36C(v24, v23);
LABEL_13:
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    v50 = 1;
    goto LABEL_14;
  }
  v69 = v21;
  v25 = v18;
  v26 = v0;
  v55 = *(_QWORD *)(v8 + 16);
  v67 = *(_QWORD *)(v8 + 24);
  v27 = *(_BYTE *)(v8 + 32);
  sub_10000E36C(v8, (uint64_t *)&unk_1002B1DF0);
  if ((v27 & 1) != 0)
  {
    sub_100179858(v28, (uint64_t *)&unk_1002B1E00);
    sub_100179638(v25);
    sub_10000E568();
    goto LABEL_13;
  }
  v29 = sub_10000E568();
  if ((v66 & 1) != 0)
  {
    sub_100179858(v29, (uint64_t *)&unk_1002B1E00);
    sub_100179638(v25);
    goto LABEL_13;
  }
  v30 = sub_1000FB3C0(v16, v15);
  if ((v65 & 1) != 0)
  {
    sub_100179858(v30, (uint64_t *)&unk_1002B1E00);
    sub_1001798C4();
    goto LABEL_13;
  }
  v31 = sub_1001798C4();
  if ((v64 & 1) != 0)
  {
    v23 = (uint64_t *)&unk_1002B1E00;
    v24 = v26;
    goto LABEL_3;
  }
  v33 = *(_QWORD *)(v26 + 16);
  v32 = *(_QWORD *)(v26 + 24);
  v34 = *(_BYTE *)(v26 + 32);
  sub_100179858(v31, (uint64_t *)&unk_1002B1E00);
  if ((v34 & 1) != 0)
    goto LABEL_13;
  v50 = 0;
  v36 = v58;
  v51 = v57 & 1;
  if (v56)
    v51 = 1;
  v37 = v51 | (v33 << 8);
  v49 = HIBYTE(v61);
  *((_QWORD *)&v52 + 1) = v32;
  *(_QWORD *)&v52 = v33;
  v38 = v52 >> 56;
  v35 = v69;
  if (v56)
  {
    v35 = 0;
    v36 = 0;
  }
  *((_QWORD *)&v53 + 1) = v59;
  *(_QWORD *)&v53 = v32;
  v39 = v53 >> 56;
  v40 = v59 >> 56;
  *((_QWORD *)&v53 + 1) = v63;
  *(_QWORD *)&v53 = *((_QWORD *)&v59 + 1);
  v41 = v53 >> 56;
  v42 = v63 >> 56;
  *((_QWORD *)&v53 + 1) = v55;
  *(_QWORD *)&v53 = *((_QWORD *)&v63 + 1);
  v43 = v53 >> 56;
  *((_QWORD *)&v53 + 1) = v67;
  *(_QWORD *)&v53 = v55;
  v44 = v53 >> 56;
  *((_QWORD *)&v53 + 1) = v60;
  *(_QWORD *)&v53 = v67;
  v45 = v53 >> 56;
  v46 = v60 >> 56;
  *((_QWORD *)&v53 + 1) = v62;
  *(_QWORD *)&v53 = *((_QWORD *)&v60 + 1);
  v47 = v53 >> 56;
  *((_QWORD *)&v53 + 1) = v61;
  *(_QWORD *)&v53 = v62;
  v48 = v53 >> 56;
LABEL_14:
  *(_QWORD *)v3 = v35;
  *(_QWORD *)(v3 + 8) = v36;
  *(_QWORD *)(v3 + 16) = v37;
  *(_QWORD *)(v3 + 24) = v38;
  *(_QWORD *)(v3 + 32) = v39;
  *(_QWORD *)(v3 + 40) = v40;
  *(_QWORD *)(v3 + 48) = v41;
  *(_QWORD *)(v3 + 56) = v42;
  *(_QWORD *)(v3 + 64) = v43;
  *(_QWORD *)(v3 + 72) = v44;
  *(_QWORD *)(v3 + 80) = v45;
  *(_QWORD *)(v3 + 88) = v46;
  *(_QWORD *)(v3 + 96) = v47;
  *(_QWORD *)(v3 + 104) = v48;
  *(_BYTE *)(v3 + 112) = v49;
  *(_BYTE *)(v3 + 113) = v50;
  sub_10000E4E0();
}

void sub_100170838()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  __n128 *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int16 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[2];
  __int16 v100;
  char v101;
  uint64_t v102;
  _OWORD v103[3];
  _BYTE v104[129];

  sub_10002626C();
  v1 = v0;
  v92 = v2;
  v94 = v3;
  v5 = v4;
  v90 = v6;
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_10002641C();
  v10 = (_QWORD *)(v9 - v8);
  sub_100179754(v104, v1);
  v11 = *(_QWORD *)&v1[*(int *)(type metadata accessor for SyncView(0) + 24)];
  v12 = sub_100179920();
  *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
  v13 = v12 + 16;
  v14 = sub_100179920();
  *(_QWORD *)(v14 + 16) = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_100228878);
  v91 = v11;
  swift_bridgeObjectRetain(v11);
  sub_1001789A0(KeyPath, 0x7972616E6163, 0xE600000000000000, v5, v104, v12, v14);
  sub_1000269A0();
  swift_getKeyPath(&unk_100228898);
  sub_100179904();
  sub_100179508(v16, 0x72756769666E6F63, 0xED00006E6F697461, v17, v18);
  sub_1000269A0();
  v19 = swift_getKeyPath(&unk_1002288B8);
  sub_100179508(v19, 0xD000000000000010, 0x8000000100252870, v20, v104);
  sub_1000269A0();
  swift_getKeyPath(&unk_1002288D8);
  sub_100179904();
  sub_100179508(v21, 0x656369766564, 0xE600000000000000, v22, v23);
  sub_1000269A0();
  swift_getKeyPath(&unk_1002288F8);
  sub_100179904();
  sub_100179508(v24, 0x4C79616C70736964, 0xED000074756F7961, v25, v26);
  sub_1000269A0();
  swift_getKeyPath(&unk_100228918);
  sub_100179904();
  sub_100179508(v27, 0x6544656372756F73, 0xEC00000065636976, v28, v29);
  sub_1000269A0();
  swift_getKeyPath(&unk_100228938);
  sub_100179904();
  sub_100178844(v30, 0x65446465636E7973, 0xED00007365636976, v5, v31, v12, v14);
  sub_1000269A0();
  sub_10005FE28(v14 + 16, (uint64_t)&v102);
  v95 = (uint64_t)v1;
  v96 = (uint64_t)v10;
  if (*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16)
    || (sub_10005FE28(v13, (uint64_t)&v97), *(_QWORD *)(*(_QWORD *)v13 + 16)))
  {
    v32 = sub_100043360();
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = sub_10000797C(32);
      v89 = sub_10000797C(96);
      *(_QWORD *)&v103[0] = v89;
      *(_DWORD *)v36 = 136446722;
      v88 = v33;
      sub_100043360();
      v37 = sub_100179930();
      v38 = sub_100179ADC(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v36 + 4);
      swift_retain(v14);
      swift_retain(v12);
      sub_1000E49C8();
      *(_WORD *)(v36 + 12) = 2082;
      sub_100179910();
      sub_10003B038();
      sub_100179800((unint64_t *)&qword_1002AB150);
      v40 = sub_100179698();
      v93 = v35;
      v42 = v41;
      sub_10002D89C();
      *(_QWORD *)&v99[0] = sub_100006FCC(v40, v42, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v10 + 1, v36 + 14);
      sub_10005FF18();
      sub_10000E568();
      *(_WORD *)(v36 + 22) = 2082;
      sub_10005FE28(v12 + 16, (uint64_t)&v98);
      sub_100179910();
      v43 = sub_100179698();
      v45 = v44;
      sub_10002D89C();
      *(_QWORD *)&v99[0] = sub_100006FCC(v43, v45, (uint64_t *)v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v10 + 1, v36 + 24);
      sub_10005FF18();
      sub_10000E594();
      v33 = v88;
      _os_log_impl((void *)&_mh_execute_header, v88, v93, "%{public}s: Create Message: new: [%{public}s], updated: [%{public}s]", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v89, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v89);
      sub_100007958(v36);
    }
    else
    {
      swift_retain(v14);
      swift_release();
      sub_100026AF4(v92);
    }

    v46 = v91;
  }
  else
  {
    v79 = sub_100043360();
    v80 = Logger.logObject.getter(v79);
    v82 = static os_log_type_t.default.getter(v80, v81);
    v46 = v11;
    if (os_log_type_enabled(v80, v82))
    {
      v83 = (uint8_t *)sub_10000797C(12);
      v84 = sub_10000797C(32);
      *(_QWORD *)&v103[0] = v84;
      *(_DWORD *)v83 = 136446210;
      sub_100043360();
      v85 = sub_100179930();
      v86 = sub_100179ADC(v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v87, v83 + 4);
      sub_1000E49C8();
      _os_log_impl((void *)&_mh_execute_header, v80, v82, "%{public}s: Create Message (Barrier)", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v84);
      sub_100007958((uint64_t)v83);
    }
    else
    {
      sub_100026AF4(v92);
    }

  }
  v47 = (__n128 *)(v10 + 1);
  v48 = sub_1000055B0(&qword_1002B1430);
  v49 = (_OWORD *)((char *)v10 + *(int *)(v48 + 80));
  *v10 = v46;
  v50 = swift_getKeyPath(&unk_100228958);
  sub_1001723C8(v95, v50, v5, v104, v94, v47);
  swift_release();
  swift_getKeyPath(&unk_100228980);
  sub_10017975C();
  sub_10000FF50();
  swift_getKeyPath(&unk_1002289A8);
  v51 = sub_100179710();
  sub_100172CEC(v51, v52, v53, v54, v55, v56);
  sub_10000FF50();
  v57 = v103[1];
  v58 = v103[2];
  *v49 = v103[0];
  v49[1] = v57;
  v49[2] = v58;
  swift_getKeyPath(&unk_1002289D0);
  v59 = sub_100179710();
  sub_100172564(v59, v60, v61, v62, v63, v64);
  sub_10000FF50();
  swift_getKeyPath(&unk_1002289F8);
  v65 = sub_100179710();
  sub_100172700(v65, v66, v67, v68, v69, v70);
  sub_10000FF50();
  swift_getKeyPath(&unk_100228A20);
  sub_10017975C();
  sub_10000FF50();
  if (sub_10005E084())
  {
    v71 = swift_getKeyPath(&unk_100228A48);
    sub_100172A64(v95, v71, v5, v104, v94, (uint64_t)v99);
    sub_1000269A0();
    sub_1000A3F3C(v95);
    v72 = type metadata accessor for Logger(0);
    sub_1001797CC(v72);
    v73 = v99[0];
    v74 = v99[1];
    v75 = v100;
    v76 = v101;
  }
  else
  {
    sub_1000A3F3C(v95);
    v77 = type metadata accessor for Logger(0);
    sub_1001797CC(v77);
    v75 = 0;
    v73 = 0uLL;
    v76 = 1;
    v74 = 0uLL;
  }
  v78 = v96 + *(int *)(v48 + 144);
  *(_OWORD *)v78 = v73;
  *(_OWORD *)(v78 + 16) = v74;
  *(_WORD *)(v78 + 32) = v75;
  *(_BYTE *)(v78 + 34) = v76;
  sub_1000FA720(v96, v90);
  swift_release();
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_100170F94(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100171068(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 1701736302;
}

void sub_100171088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[5];
  uint64_t v64;

  sub_10003AFC4();
  v61 = v0;
  v62 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v3[2];
  v8 = v3[3];
  v9 = v3[4];
  v10 = v3[5];
  v11 = sub_100179A18();
  v13 = type metadata accessor for SyncValue.DataCodingKeys(v11, v12);
  swift_getWitnessTable(&unk_100228FF8, v13);
  v14 = sub_100179A74();
  v50 = v15;
  v51 = v13;
  v56 = type metadata accessor for KeyedEncodingContainer(v14, v13, v15);
  v54 = *(_QWORD *)(v56 - 8);
  sub_1001794A0();
  __chkstk_darwin(v16);
  sub_100179724();
  v52 = v17;
  v55 = *(_QWORD *)(v7 - 8);
  sub_1000262EC();
  __chkstk_darwin(v18);
  sub_10000E5DC();
  v53 = v19;
  v20 = sub_100179A18();
  v22 = type metadata accessor for SyncValue.NoneCodingKeys(v20, v21);
  swift_getWitnessTable(&unk_100228FA8, v22);
  v23 = sub_100179A74();
  v48 = v24;
  v49 = v22;
  v25 = type metadata accessor for KeyedEncodingContainer(v23, v22, v24);
  v46 = *(_QWORD *)(v25 - 8);
  v47 = v25;
  sub_1001794A0();
  __chkstk_darwin(v26);
  sub_100179724();
  v45 = v27;
  v58 = *(v4 - 1);
  sub_1000262EC();
  __chkstk_darwin(v28);
  sub_100124184();
  v63[0] = v7;
  v63[1] = v8;
  v63[2] = v9;
  v63[3] = v10;
  v57 = v10;
  v29 = type metadata accessor for SyncValue.CodingKeys(255, (uint64_t)v63);
  v30 = sub_100179AA0((uint64_t)&unk_100228F58);
  v31 = type metadata accessor for KeyedEncodingContainer(0, v29, v30);
  v59 = *(_QWORD *)(v31 - 8);
  v60 = v31;
  sub_1001794A0();
  __chkstk_darwin(v32);
  v34 = (char *)&v44 - v33;
  v36 = v6[3];
  v35 = v6[4];
  sub_10000DBE4(v6, v36);
  v64 = (uint64_t)v34;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v29, v29, v30, v36, v35);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(v58 + 16))(v2, v61, v4);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v2, 1, v7) == 1)
  {
    LOBYTE(v63[0]) = 0;
    v37 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v49, v63, v60, v49);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v37, v47);
    sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
  }
  else
  {
    v38 = v59;
    v39 = v55;
    v40 = v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v53, v2, v7);
    LOBYTE(v63[0]) = 1;
    v41 = v52;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(v51, v63, v60, v51);
    v42 = v56;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v40, v43, v56, v7, v57);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v41, v42);
    sub_1000850C0(v40, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
    sub_1001112AC(v64, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  }
  sub_10003AF60();
}

void sub_100171358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t WitnessTable;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  __int128 v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD v107[2];
  __int128 v108;
  __int128 v109;

  sub_10003AFC4();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v96 = v33;
  *(_QWORD *)&v108 = v29;
  *((_QWORD *)&v108 + 1) = v27;
  *(_QWORD *)&v109 = v25;
  *((_QWORD *)&v109 + 1) = v23;
  v34 = type metadata accessor for SyncValue.DataCodingKeys(255, (uint64_t)&v108);
  sub_10003D6B0((uint64_t)&unk_100228FF8);
  v35 = sub_100179A74();
  v101 = v36;
  v102 = v34;
  v92 = type metadata accessor for KeyedDecodingContainer(v35, v34, v36);
  v94 = *(_QWORD *)(v92 - 8);
  sub_1001794A0();
  __chkstk_darwin(v37);
  sub_100179724();
  v103 = v38;
  v39 = sub_100179860();
  v41 = type metadata accessor for SyncValue.NoneCodingKeys(v39, v40);
  sub_10003D6B0((uint64_t)&unk_100228FA8);
  v42 = sub_100179A74();
  v99 = v43;
  v100 = v41;
  v91 = type metadata accessor for KeyedDecodingContainer(v42, v41, v43);
  v90 = *(_QWORD *)(v91 - 8);
  sub_1001794A0();
  __chkstk_darwin(v44);
  sub_100179724();
  v98 = v45;
  v46 = sub_100179860();
  v48 = type metadata accessor for SyncValue.CodingKeys(v46, v47);
  v49 = sub_10003D6B0((uint64_t)&unk_100228F58);
  v106 = type metadata accessor for KeyedDecodingContainer(0, v48, v49);
  v104 = *(_QWORD *)(v106 - 8);
  sub_1001794A0();
  __chkstk_darwin(v50);
  v52 = (char *)&v86 - v51;
  v97 = v30;
  *(_QWORD *)&v108 = v30;
  *((_QWORD *)&v108 + 1) = v28;
  v93 = v26;
  *(_QWORD *)&v109 = v26;
  *((_QWORD *)&v109 + 1) = v24;
  v105 = type metadata accessor for SyncValue(0, (uint64_t)&v108);
  v95 = *(_QWORD *)(v105 - 8);
  sub_1000262EC();
  __chkstk_darwin(v53);
  v55 = (char *)&v86 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v58 = (char *)&v86 - v57;
  v60 = v32[3];
  v59 = v32[4];
  sub_10000DBE4(v32, v60);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v48, v48, v49, v60, v59);
  if (v20)
    goto LABEL_7;
  v87 = v55;
  v88 = v58;
  v61 = v105;
  v89 = v32;
  v62 = v106;
  *(_QWORD *)&v107[0] = KeyedDecodingContainer.allKeys.getter(v106);
  v63 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v63);
  *(_QWORD *)&v108 = ArraySlice.init<A>(_:)(v107, v48, v63, WitnessTable);
  *((_QWORD *)&v108 + 1) = v65;
  *(_QWORD *)&v109 = v66;
  *((_QWORD *)&v109 + 1) = v67;
  v68 = type metadata accessor for ArraySlice(0, v48);
  v69 = sub_10003D6B0((uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  Collection<>.popFirst()(v107, v68, v69);
  v70 = v107[0];
  if (LOBYTE(v107[0]) == 2
    || (v86 = v108, v107[0] = v108, v107[1] = v109, (Collection.isEmpty.getter(v68, v69) & 1) == 0))
  {
    v72 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v72, (uint64_t)&protocol witness table for DecodingError);
    v74 = v73;
    sub_1000055B0(&qword_1002ABBD0);
    *v74 = v61;
    v75 = KeyedDecodingContainer.codingPath.getter(v62);
    sub_1000A36F0(v75, v76, 0x8000000100253AD0);
    v77 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v74, enum case for DecodingError.typeMismatch(_:), v72);
    swift_willThrow(v77);
    swift_unknownObjectRelease(v108);
    sub_1001795B0((uint64_t)v52, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
    v32 = v89;
LABEL_7:
    v78 = v32;
    goto LABEL_8;
  }
  if ((v70 & 1) != 0)
  {
    LOBYTE(v107[0]) = 1;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v102, v107, v62, v102);
    v80 = (uint64_t)v87;
    v81 = v97;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v97, v82, v92, v97);
    v83 = v104;
    sub_100179784((uint64_t)&a18);
    sub_100179A6C();
    sub_1001795B0((uint64_t)v52, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v80, 0, 1, v81);
    v84 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 32);
    v85 = (uint64_t)v88;
    v84(v88, v80, v61);
    v84(v96, v85, v61);
  }
  else
  {
    LOBYTE(v107[0]) = 0;
    v71 = v98;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v100, v107, v62, v100);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v71, v91);
    sub_100179A6C();
    sub_100179518(v104);
    v79 = (uint64_t)v88;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v88, 1, 1, v97);
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v96, v79, v61);
  }
  v78 = v89;
LABEL_8:
  sub_100005988(v78);
  sub_10003AF60();
}

uint64_t sub_10017187C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v9;

  if (a1 == 0x69537265646E6573 && a2 == 0xEF65727574616E67)
  {
    v5 = 0xEF65727574616E67;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69537265646E6573, 0xEF65727574616E67, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100258DF0;
    if (a2 == 0x8000000100258DF0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258DF0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001719E0(char a1)
{
  if (!a1)
    return 0x69537265646E6573;
  if (a1 == 1)
    return 0xD000000000000011;
  return 0x65756C6176;
}

void sub_100171A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  sub_10003AFC4();
  a22 = v25;
  a23 = v26;
  v54 = v23;
  v55 = v24;
  v28 = v27;
  v30 = v29;
  v31 = v27[2];
  v32 = v27[3];
  v33 = v27[5];
  v52 = v27[4];
  v53 = v31;
  *(_QWORD *)&v56 = v31;
  *((_QWORD *)&v56 + 1) = v32;
  v50 = v32;
  v51 = v33;
  v57 = v52;
  v58 = v33;
  v34 = sub_100179A34();
  WitnessTable = swift_getWitnessTable(&unk_100228F08, v34);
  v36 = type metadata accessor for KeyedEncodingContainer(0, v34, WitnessTable);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (char *)&v50 - v38;
  v41 = v30[3];
  v40 = v30[4];
  sub_10000DBE4(v30, v41);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v34, v34, WitnessTable, v41, v40);
  v42 = v54;
  v56 = *v54;
  a13 = 0;
  v43 = sub_10008A0CC();
  v44 = v55;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v56, &a13, v36, &type metadata for UniversalControlUUID, v43);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  }
  else
  {
    v45 = v53;
    v55 = v37;
    v46 = *((_BYTE *)v42 + 32);
    v56 = v42[1];
    LOBYTE(v57) = v46;
    a13 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v56, &a13, v36, &type metadata for UniversalControlUUID, v43);
    v47 = (char *)v42 + *((int *)v28 + 14);
    a13 = 2;
    *(_QWORD *)&v56 = v45;
    *((_QWORD *)&v56 + 1) = v50;
    v57 = v52;
    v58 = v51;
    v48 = sub_100179A40();
    v49 = sub_100179AA0((uint64_t)&unk_1002287D4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v47, &a13, v36, v48, v49);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v36);
  }
  sub_10003AF60();
}

void sub_100171C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __n128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;

  sub_10003AFC4();
  a22 = v24;
  a23 = v25;
  v66 = v23;
  v67.n128_u64[0] = v26;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = v26;
  v35 = v34;
  v59 = v36;
  v67.n128_u64[1] = v31;
  v68 = v29;
  v69 = v27;
  v63 = sub_100179A40();
  v58 = *(_QWORD *)(v63 - 8);
  sub_1001794A0();
  __chkstk_darwin(v37);
  sub_100179724();
  v62 = v38;
  v67.n128_u64[0] = v33;
  v67.n128_u64[1] = v32;
  v68 = v30;
  v69 = v28;
  v39 = sub_100179A34();
  v40 = sub_100179AA0((uint64_t)&unk_100228F08);
  v65 = type metadata accessor for KeyedDecodingContainer(0, v39, v40);
  v61 = *(_QWORD *)(v65 - 8);
  sub_1001794A0();
  __chkstk_darwin(v41);
  v43 = (char *)&v57 - v42;
  v67.n128_u64[0] = v33;
  v67.n128_u64[1] = v32;
  v68 = v30;
  v69 = v28;
  v60 = type metadata accessor for SyncAtom(0, (uint64_t)&v67);
  v44 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v46 = (__n128 *)((char *)&v57 - v45);
  v47 = v35[3];
  v48 = v35[4];
  sub_10000DBE4(v35, v47);
  v64 = v43;
  v49 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v39, v39, v40, v47, v48);
  if (!v49)
  {
    v50 = v46;
    v66 = v44;
    v51 = v60;
    v53 = v62;
    v52 = v63;
    a13 = 0;
    v54 = sub_10008A010();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for UniversalControlUUID, &a13, v65, &type metadata for UniversalControlUUID);
    v55 = v67;
    *v50 = v67;
    a13 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &type metadata for UniversalControlUUID, &a13, v65, &type metadata for UniversalControlUUID, v54, v55);
    v56 = v68;
    v50[1] = v67;
    v50[2].n128_u8[0] = v56;
    v67.n128_u8[0] = 2;
    sub_10003D6B0((uint64_t)&unk_1002287FC);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v52, &v67, v65, v52);
    sub_100179808();
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))((char *)v50 + *(int *)(v51 + 56), v53, v52);
    (*(void (**)(uint64_t, __n128 *, uint64_t))(v66 + 32))(v59, v50, v51);
  }
  sub_100005988(v35);
  sub_10003AF60();
}

BOOL sub_100171E9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static DeviceMovementObserver.Status.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100171EB4()
{
  char *v0;

  return DeviceMovementObserver.Status.hashValue.getter(*v0);
}

void sub_100171EC8(uint64_t a1)
{
  char *v1;

  DeviceMovementObserver.Status.hash(into:)(a1, *v1);
}

Swift::Int sub_100171EDC(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  DeviceMovementObserver.Status.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_100171F24()
{
  char *v0;

  return sub_100171068(*v0);
}

void sub_100171F38(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_1001722C4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100170F94);
}

uint64_t sub_100171F44()
{
  return HIDServicePropertyKey.intValue.getter();
}

void sub_100171F6C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_100172310(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))static ReportID.consumer.getter);
}

uint64_t sub_100171F78(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228F58, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100171FAC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228F58, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100171FE0()
{
  return static ReportID.keyboard.getter();
}

Swift::Int sub_100171FF0()
{
  return sub_1000BDC1C();
}

void sub_100172000()
{
  sub_100044C34();
}

Swift::Int sub_100172010(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100044C34();
  return Hasher._finalize()();
}

uint64_t sub_100172054()
{
  return sub_100044C58();
}

void sub_100172064(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_10017210C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100044C64);
}

uint64_t sub_100172070(_QWORD *a1, uint64_t a2)
{
  return sub_100172138(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))HIDServicePropertyKey.intValue.getter);
}

void sub_10017207C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_10017216C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))static ReportID.keyboard.getter);
}

uint64_t sub_100172088(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228FF8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1001720BC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228FF8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_1001720F0()
{
  return variable initialization expression of P2PPeerCoordinator._label();
}

void sub_100172100(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_10017210C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000447B4);
}

void sub_10017210C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _BYTE *v5;

  *v5 = sub_1001796CC(a1, a2, a3, a4, a5) & 1;
  sub_1000050D4();
}

uint64_t sub_10017212C(_QWORD *a1, uint64_t a2)
{
  return sub_100172138(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PasteboardItem.CodingKeys.intValue.getter);
}

uint64_t sub_100172138(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(a1[2], a1[3], a1[4], a1[5]);
}

void sub_100172160(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_10017216C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))j___s9HIDReport8ReportIDV11EnsembleHIDE8keyboardACvgZ);
}

void sub_10017216C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _BYTE *v4;

  *v4 = sub_1001796B4(a1, a2, a3, a4) & 1;
  sub_1000050D4();
}

uint64_t sub_10017218C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228FA8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1001721C0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228FA8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

#error "100172208: call analysis failed (funcsize=8)"

void sub_100172214()
{
  sub_100171088();
}

BOOL sub_100172228(char *a1, char *a2)
{
  return static ReportID.== infix(_:_:)(*a1, *a2);
}

Swift::Int sub_100172240()
{
  unsigned __int8 *v0;

  return VectorClock.ComparisonResult.hashValue.getter(*v0);
}

void sub_100172250(uint64_t a1)
{
  unsigned __int8 *v1;

  Material.hash(into:)(a1, *v1);
}

Swift::Int sub_100172260(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Material.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1001722A8()
{
  char *v0;

  return sub_1001719E0(*v0);
}

void sub_1001722B8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_1001722C4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10017187C);
}

void sub_1001722C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _BYTE *v5;

  *v5 = sub_1001796CC(a1, a2, a3, a4, a5);
  sub_1000050D4();
}

uint64_t sub_1001722E0()
{
  return HIDServicePropertyKey.intValue.getter();
}

void sub_100172304(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_100172310(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))static ReportID.appleVendorKeyboard.getter);
}

void sub_100172310(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _BYTE *v4;

  *v4 = sub_1001796B4(a1, a2, a3, a4);
  sub_1000050D4();
}

uint64_t sub_10017232C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228F08, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100172360(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100228F08, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

#error "1001723A8: call analysis failed (funcsize=8)"

#error "1001723BC: call analysis failed (funcsize=5)"

__n128 sub_1001723C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, __n128 *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 result;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[15];
  __n128 v26;
  _BYTE __dst[113];
  _BYTE v28[113];
  char v29;
  _BYTE __src[113];
  unsigned __int8 v31;

  sub_100099784(a2);
  v12 = v11;
  memcpy(__dst, a4, sizeof(__dst));
  swift_getAtKeyPath(__dst, v12);
  v22 = v26;
  sub_10005FA70(a5, (uint64_t)__src, &qword_1002B1EF0);
  v13 = v31;
  if ((v31 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    memcpy(v28, __src, sizeof(v28));
    swift_getAtKeyPath(v28, v12);
    v14 = v25[0];
    v15 = v25[1];
  }
  sub_10005FA70(a3, (uint64_t)v28, &qword_1002B1EF0);
  v16 = v29;
  if ((v29 & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    memcpy(v25, v28, 0x71uLL);
    swift_getAtKeyPath(v25, v12);
    v17 = v23;
    v18 = v24;
  }
  memcpy(v25, a4, 0x71uLL);
  swift_getAtKeyPath(v25, v12);
  if ((v16 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v17, v18))
  {
    swift_getAtKeyPath(a1, a2);
    swift_release();
    v19 = v25[0];
  }
  else
  {
    swift_release();
    v19 = 0;
  }
  a6[2].n128_u64[1] = v19;
  result = v22;
  *a6 = v22;
  a6[1].n128_u64[0] = v14;
  a6[1].n128_u64[1] = v15;
  a6[2].n128_u8[0] = v13;
  return result;
}

__n128 sub_100172564@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __n128 result;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[9];
  _BYTE __dst[113];
  _BYTE v27[113];
  char v28;
  _BYTE __src[113];
  char v30;

  sub_100099784(a2);
  v12 = v11;
  memcpy(__dst, a4, sizeof(__dst));
  swift_getAtKeyPath(__dst, v12);
  v22 = (__n128)v25[8];
  sub_10005FA70(a5, (uint64_t)__src, &qword_1002B1EF0);
  v13 = v30;
  if ((v30 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    memcpy(v27, __src, sizeof(v27));
    swift_getAtKeyPath(v27, v12);
    v15 = *((_QWORD *)&v25[0] + 1);
    v14 = *(_QWORD *)&v25[0];
  }
  sub_10005FA70(a3, (uint64_t)v27, &qword_1002B1EF0);
  v16 = v28;
  if ((v28 & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    memcpy(v25, v27, 0x71uLL);
    swift_getAtKeyPath(v25, v12);
    v17 = v23;
    v18 = v24;
  }
  memcpy(v25, a4, 0x71uLL);
  swift_getAtKeyPath(v25, v12);
  if ((v16 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v17, v18))
  {
    swift_getAtKeyPath(a1, a2);
    swift_release();
    v19 = v25[0];
  }
  else
  {
    swift_release();
    v19 = 0uLL;
  }
  *(_OWORD *)(a6 + 40) = v19;
  result = v22;
  *(__n128 *)a6 = v22;
  *(_QWORD *)(a6 + 16) = v14;
  *(_QWORD *)(a6 + 24) = v15;
  *(_BYTE *)(a6 + 32) = v13;
  return result;
}

__n128 sub_100172700@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[9];
  _BYTE __dst[113];
  _BYTE v28[113];
  char v29;
  _BYTE __src[113];
  char v31;

  sub_100099784(a2);
  v12 = v11;
  memcpy(__dst, a4, sizeof(__dst));
  swift_getAtKeyPath(__dst, v12);
  v23 = (__n128)v26[8];
  sub_10005FA70(a5, (uint64_t)__src, &qword_1002B1EF0);
  v13 = v31;
  if ((v31 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    memcpy(v28, __src, sizeof(v28));
    swift_getAtKeyPath(v28, v12);
    v15 = *((_QWORD *)&v26[0] + 1);
    v14 = *(_QWORD *)&v26[0];
  }
  sub_10005FA70(a3, (uint64_t)v28, &qword_1002B1EF0);
  v16 = v29;
  if ((v29 & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    memcpy(v26, v28, 0x71uLL);
    swift_getAtKeyPath(v26, v12);
    v17 = v24;
    v18 = v25;
  }
  memcpy(v26, a4, 0x71uLL);
  swift_getAtKeyPath(v26, v12);
  if ((v16 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v17, v18))
  {
    swift_getAtKeyPath(a1, a2);
    swift_release();
    v19 = v26[0];
    v20 = *(_QWORD *)&v26[1];
  }
  else
  {
    swift_release();
    v20 = 0;
    v19 = xmmword_10021BB90;
  }
  *(_OWORD *)(a6 + 40) = v19;
  *(_QWORD *)(a6 + 56) = v20;
  result = v23;
  *(__n128 *)a6 = v23;
  *(_QWORD *)(a6 + 16) = v14;
  *(_QWORD *)(a6 + 24) = v15;
  *(_BYTE *)(a6 + 32) = v13;
  return result;
}

void sub_1001728AC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t (*v29)(_QWORD);
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[15];
  __int128 v35;
  _BYTE v36[113];
  _BYTE v37[113];
  char v38;
  _BYTE v39[113];
  char v40;

  sub_10002626C();
  v29 = v1;
  v30 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v25 = v11;
  v13 = v12;
  v31 = v14;
  sub_1000055B0(v14);
  sub_10000E490();
  __chkstk_darwin(v15);
  sub_10000E478();
  sub_100099784(v10);
  v17 = v16;
  sub_100179754(v36, v6);
  swift_getAtKeyPath(v36, v17);
  v28 = v35;
  sub_10005FA70(v4, (uint64_t)v39, &qword_1002B1EF0);
  v18 = v40;
  if ((v40 & 1) != 0)
  {
    v26 = 0;
    v27 = 0;
  }
  else
  {
    sub_100179754(v37, v39);
    swift_getAtKeyPath(v37, v17);
    v26 = v34[1];
    v27 = v34[0];
  }
  sub_10005FA70(v8, (uint64_t)v37, &qword_1002B1EF0);
  v19 = v38;
  if ((v38 & 1) != 0)
  {
    v20 = 0;
    v21 = 0;
  }
  else
  {
    sub_100179754(v34, v37);
    sub_1001797F0();
    v20 = v32;
    v21 = v33;
  }
  sub_100179754(v34, v6);
  sub_1001797F0();
  if ((v19 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v20, v21))
  {
    swift_getAtKeyPath(v25, v10);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  sub_10005FF18();
  v23 = v29(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, v22, 1, v23);
  *(_OWORD *)v13 = v28;
  *(_QWORD *)(v13 + 16) = v27;
  *(_QWORD *)(v13 + 24) = v26;
  *(_BYTE *)(v13 + 32) = v18;
  v24 = sub_1000055B0(v30);
  sub_10005FA70(v0, v13 + *(int *)(v24 + 56), v31);
  sub_10000E4E0();
}

uint64_t sub_100172A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v32[15];
  _BYTE __src[113];
  char v34;
  _BYTE __dst[122];

  sub_100099A38(a2);
  v13 = v12;
  memcpy(__dst, a4, 0x71uLL);
  swift_getAtKeyPath(__dst, v13);
  if ((__src[16] & 1) != 0)
  {
    result = swift_release();
    *(_WORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_BYTE *)(a6 + 34) = 1;
    return result;
  }
  v16 = *(_QWORD *)__src;
  v15 = *(_QWORD *)&__src[8];
  sub_10005FA70(a5, (uint64_t)__dst, &qword_1002B1EF0);
  v26 = a1;
  if ((__dst[113] & 1) != 0)
  {
    v17 = 0;
    v28 = 0;
    v18 = 1;
  }
  else
  {
    memcpy(__src, __dst, sizeof(__src));
    swift_getAtKeyPath(__src, v13);
    v17 = v32[0];
    v28 = v32[1];
    v18 = v32[2];
  }
  v27 = v18;
  sub_10005FA70(a3, (uint64_t)__src, &qword_1002B1EF0);
  if ((v34 & 1) != 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = 1;
  }
  else
  {
    memcpy(v32, __src, 0x71uLL);
    swift_getAtKeyPath(v32, v13);
    v19 = v29;
    v20 = v30;
    v21 = v31;
  }
  memcpy(v32, a4, 0x71uLL);
  swift_getAtKeyPath(v32, v13);
  if ((v21 & 1) == 0)
  {
    if ((v31 & 1) == 0)
    {
      v25 = static UniversalControlUUID.compare(lhs:rhs:)(v19, v20);
      v23 = v28;
      v24 = v27;
      if (!v25)
      {
        result = swift_release();
        v22 = 1;
        goto LABEL_16;
      }
      goto LABEL_15;
    }
LABEL_13:
    v23 = v28;
    v24 = v27;
LABEL_15:
    swift_getAtKeyPath(v26, a2);
    result = swift_release();
    v22 = 0;
    goto LABEL_16;
  }
  if ((v31 & 1) == 0)
    goto LABEL_13;
  result = swift_release();
  v22 = 1;
  v23 = v28;
  v24 = v27;
LABEL_16:
  *(_BYTE *)(a6 + 33) = v22;
  *(_QWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = v15;
  *(_QWORD *)(a6 + 16) = v17;
  *(_QWORD *)(a6 + 24) = v23;
  *(_BYTE *)(a6 + 32) = v24;
  *(_BYTE *)(a6 + 34) = 0;
  return result;
}

__n128 sub_100172CEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, __n128 *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 result;
  __n128 v25;
  _QWORD v26[2];
  _QWORD v27[15];
  __n128 v28;
  _BYTE __dst[113];
  _BYTE v30[113];
  char v31;
  _BYTE __src[113];
  unsigned __int8 v33;

  sub_100099784(a2);
  v12 = v11;
  memcpy(__dst, a4, sizeof(__dst));
  swift_getAtKeyPath(__dst, v12);
  v25 = v28;
  sub_10005FA70(a5, (uint64_t)__src, &qword_1002B1EF0);
  v13 = 0;
  v14 = 0;
  v15 = v33;
  if ((v33 & 1) == 0)
  {
    memcpy(v30, __src, sizeof(v30));
    swift_getAtKeyPath(v30, v12);
    v13 = v27[0];
    v14 = v27[1];
  }
  sub_10005FA70(a3, (uint64_t)v30, &qword_1002B1EF0);
  v16 = v31;
  if ((v31 & 1) != 0)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    memcpy(v27, v30, 0x71uLL);
    swift_getAtKeyPath(v27, v12);
    v17 = v26[0];
    v18 = v26[1];
  }
  memcpy(v27, a4, 0x71uLL);
  swift_getAtKeyPath(v27, v12);
  if ((v16 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v17, v18))
  {
    swift_getAtKeyPath(a1, a2);
    v19 = v27[0];
    swift_bridgeObjectRetain(v27[0]);
    sub_100057E2C();
    v21 = v20;
    swift_bridgeObjectRelease(v19);
    v26[0] = v21;
    sub_100036DCC(v26);
    swift_bridgeObjectRelease(v19);
    swift_release();
    v22 = v26[0];
  }
  else
  {
    swift_release();
    v22 = 0;
  }
  result = v25;
  *a6 = v25;
  a6[1].n128_u64[0] = v13;
  a6[1].n128_u64[1] = v14;
  a6[2].n128_u8[0] = v15;
  a6[2].n128_u64[1] = v22;
  return result;
}

uint64_t sub_100172EC8()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  Swift::String v112;
  void *object;
  Swift::String v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  Swift::String v138;
  Swift::String v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  _BYTE v190[17];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FA70((uint64_t)(v0 + 16), (uint64_t)&v186, &qword_1002ADF40);
  sub_10005FA70((uint64_t)&v186, (uint64_t)v190, &qword_1002ADF40);
  v182 = v2;
  if ((v190[16] & 1) != 0)
    goto LABEL_7;
  v167 = v190[0];
  v166 = v190[1];
  v176 = v190[2];
  v175 = v190[3];
  v174 = v190[4];
  v173 = v190[5];
  v172 = v190[6];
  v171 = v190[7];
  v181 = v190[8];
  v180 = v190[9];
  v179 = v190[10];
  v178 = v190[11];
  v177 = v190[12];
  v6 = v190[13];
  v7 = v190[14];
  v8 = v190[15];
  v9 = *v0;
  v10 = v0[1];
  v11 = v0[2];
  v12 = v0[3];
  v13 = v0[4];
  v14 = v0[5];
  v15 = v0[6];
  v16 = v0[7];
  v17 = v0[8];
  v18 = v0[9];
  v19 = v0[10];
  v20 = v0[11];
  v21 = v0[12];
  v22 = v0[13];
  v23 = v0[14];
  v157 = v0[15];
  v158 = v23;
  v159 = v22;
  v160 = v21;
  v161 = v20;
  v162 = v19;
  v163 = v18;
  v164 = v17;
  v149 = v9;
  v150 = v10;
  v156 = v11;
  v155 = v12;
  v154 = v13;
  v153 = v14;
  v152 = v15;
  v151 = v16;
  v24 = UUID.init(uuid:)(v9, v10, v11, v12, v13, v14);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v148 = v3;
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v5, v2);
  v29 = sub_1000599D0(8, v25, v27);
  v31 = v30;
  v32 = static String._fromSubstring(_:)(v29);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v168 = v8;
  v35 = v166;
  v169 = v7;
  v36 = v167;
  v170 = v6;
  v37 = UUID.init(uuid:)(v167, v166, v176, v175, v174, v173);
  v38 = UUID.uuidString.getter(v37);
  v40 = v39;
  v165 = v28;
  v28(v5, v2);
  v41 = sub_1000599D0(8, v38, v40);
  v43 = v42;
  v44 = static String._fromSubstring(_:)(v41);
  v46 = v45;
  swift_bridgeObjectRelease(v43);
  if (v32 == v44 && v34 == v46)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v44, v46, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v46);
    v2 = v182;
    v3 = v148;
    if ((v48 & 1) == 0)
    {
LABEL_7:
      v187 = 656423507;
      v188 = 0xE400000000000000;
      v49 = UUID.init(uuid:)(*v1, v1[1], v1[2], v1[3], v1[4], v1[5]);
      v50 = UUID.uuidString.getter(v49);
      v52 = v51;
      v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53(v5, v2);
      v54 = sub_1000599D0(8, v50, v52);
      v56 = v55;
      v57 = static String._fromSubstring(_:)(v54);
      v59 = v58;
      swift_bridgeObjectRelease(v56);
      v60._countAndFlagsBits = v57;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v59);
      v61._countAndFlagsBits = 39;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62 = v187;
      v63 = v188;
      sub_1000776AC();
      v65 = v64;
      v66 = *(_QWORD *)(v64 + 16);
      if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v142;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      v67 = v65 + 16 * v66;
      *(_QWORD *)(v67 + 32) = v62;
      *(_QWORD *)(v67 + 40) = v63;
      v184 = 656423506;
      v185 = 0xE400000000000000;
      sub_10005FA70((uint64_t)&v186, (uint64_t)&v187, &qword_1002ADF40);
      if ((v189 & 1) != 0)
      {
        v68 = 0;
        v69 = (void *)0xE000000000000000;
      }
      else
      {
        v70 = UUID.init(uuid:)(v187, BYTE1(v187), BYTE2(v187), BYTE3(v187), BYTE4(v187), BYTE5(v187));
        v71 = UUID.uuidString.getter(v70);
        v73 = v72;
        v53(v5, v182);
        v74 = sub_1000599D0(8, v71, v73);
        v76 = v75;
        v68 = static String._fromSubstring(_:)(v74);
        v69 = v77;
        swift_bridgeObjectRelease(v76);
      }
      v78._countAndFlagsBits = v68;
      v78._object = v69;
      String.append(_:)(v78);
      swift_bridgeObjectRelease(v69);
      v79._countAndFlagsBits = 39;
      v79._object = (void *)0xE100000000000000;
      String.append(_:)(v79);
      v81 = v184;
      v80 = v185;
LABEL_18:
      v109 = *(_QWORD *)(v65 + 16);
      v110 = v109 + 1;
      if (v109 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v141;
      }
      goto LABEL_20;
    }
  }
  v82 = v150;
  v150 = v149;
  v149 = v82;
  v148 = v156;
  v83 = v150 | (v82 << 8) | ((unint64_t)v156 << 16);
  v156 = v155;
  v166 = v154;
  v84 = v176;
  v167 = v153;
  v85 = v175;
  v175 = v152;
  v176 = v151;
  v86 = v83 | ((unint64_t)v155 << 24) | ((unint64_t)v154 << 32) | ((unint64_t)v153 << 40) | ((unint64_t)v152 << 48) | ((unint64_t)v151 << 56);
  v87 = v172;
  v88 = v171;
  v172 = v36;
  v171 = v35;
  v155 = v84;
  v154 = v85;
  v153 = v174;
  v89 = v36 | ((unint64_t)v35 << 8) | (v84 << 16) | (v85 << 24) | ((unint64_t)v174 << 32);
  v152 = v173;
  v173 = v88;
  v174 = v87;
  if (static UniversalControlUUID.compare(lhs:rhs:)(v86, v164 | (v163 << 8) | (v162 << 16) | (v161 << 24) | (v160 << 32) | (v159 << 40) | (v158 << 48) | (v157 << 56), v89 | (v152 << 40) | (v87 << 48) | (v88 << 56), v181 | (v180 << 8) | (v179 << 16) | (v178 << 24) | (v177 << 32) | (v170 << 40) | (v169 << 48) | (v168 << 56)))
  {
    v187 = 656423507;
    v188 = 0xE400000000000000;
    v90 = UUID.init(uuid:)(v150, v149, v148, v156, v166, v167);
    v91 = UUID.uuidString.getter(v90);
    v93 = v92;
    v94 = v182;
    v95 = v165;
    v165(v5, v182);
    v96._countAndFlagsBits = v91;
    v96._object = v93;
    String.append(_:)(v96);
    swift_bridgeObjectRelease(v93);
    v97._countAndFlagsBits = 39;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v187;
    v99 = v188;
    sub_1000776AC();
    v65 = v100;
    v101 = *(_QWORD *)(v100 + 16);
    if (v101 >= *(_QWORD *)(v100 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v145;
    }
    *(_QWORD *)(v65 + 16) = v101 + 1;
    v102 = v65 + 16 * v101;
    *(_QWORD *)(v102 + 32) = v98;
    *(_QWORD *)(v102 + 40) = v99;
    v187 = 656423506;
    v188 = 0xE400000000000000;
    v103 = UUID.init(uuid:)(v172, v171, v155, v154, v153, v152);
    v104 = UUID.uuidString.getter(v103);
    v106 = v105;
    v95(v5, v94);
    v107._countAndFlagsBits = v104;
    v107._object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v106);
    v108._countAndFlagsBits = 39;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    v81 = v187;
    v80 = v188;
    goto LABEL_18;
  }
  v187 = 0x27203A522653;
  v188 = 0xE600000000000000;
  v128 = UUID.init(uuid:)(v150, v149, v148, v156, v166, v167);
  v129 = UUID.uuidString.getter(v128);
  v131 = v130;
  v165(v5, v182);
  v132 = sub_1000599D0(8, v129, v131);
  v134 = v133;
  v135 = static String._fromSubstring(_:)(v132);
  v137 = v136;
  swift_bridgeObjectRelease(v134);
  v138._countAndFlagsBits = v135;
  v138._object = v137;
  String.append(_:)(v138);
  swift_bridgeObjectRelease(v137);
  v139._countAndFlagsBits = 39;
  v139._object = (void *)0xE100000000000000;
  String.append(_:)(v139);
  v81 = v187;
  v80 = v188;
  sub_1000776AC();
  v65 = v140;
  v109 = *(_QWORD *)(v140 + 16);
  v110 = v109 + 1;
  if (v109 >= *(_QWORD *)(v140 + 24) >> 1)
  {
    sub_1000776AC();
    v65 = v146;
  }
LABEL_20:
  *(_QWORD *)(v65 + 16) = v110;
  v111 = v65 + 16 * v109;
  *(_QWORD *)(v111 + 32) = v81;
  *(_QWORD *)(v111 + 40) = v80;
  if (*((_QWORD *)v1 + 5))
  {
    v184 = 656423510;
    v185 = 0xE400000000000000;
    sub_100178CB8((uint64_t)v1);
    _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
    object = v112._object;
    String.append(_:)(v112);
    swift_bridgeObjectRelease(object);
    v114._countAndFlagsBits = 39;
    v114._object = (void *)0xE100000000000000;
    String.append(_:)(v114);
    v115 = v184;
    v116 = v185;
    v117 = *(_QWORD *)(v65 + 16);
    if (v117 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v143;
    }
    *(_QWORD *)(v65 + 16) = v117 + 1;
    v118 = v65 + 16 * v117;
    *(_QWORD *)(v118 + 32) = v115;
    *(_QWORD *)(v118 + 40) = v116;
    sub_100178C68((uint64_t)v1);
  }
  else
  {
    if (v110 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v144;
    }
    *(_QWORD *)(v65 + 16) = v110 + 1;
    v119 = v65 + 16 * v110;
    *(_QWORD *)(v119 + 32) = 0x2727203A56;
    *(_QWORD *)(v119 + 40) = 0xE500000000000000;
  }
  v184 = 91;
  v185 = 0xE100000000000000;
  v183 = v65;
  v120 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10002599C((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
  v122 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v120, v121);
  v124 = v123;
  swift_bridgeObjectRelease(v65);
  v125._countAndFlagsBits = v122;
  v125._object = v124;
  String.append(_:)(v125);
  swift_bridgeObjectRelease(v124);
  v126._countAndFlagsBits = 93;
  v126._object = (void *)0xE100000000000000;
  String.append(_:)(v126);
  return v184;
}

uint64_t sub_100173B28()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  Swift::String v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  Swift::String v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  _BYTE v193[17];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FA70((uint64_t)(v0 + 16), (uint64_t)&v189, &qword_1002ADF40);
  sub_10005FA70((uint64_t)&v189, (uint64_t)v193, &qword_1002ADF40);
  v185 = v2;
  if ((v193[16] & 1) != 0)
    goto LABEL_7;
  v170 = v193[0];
  v169 = v193[1];
  v179 = v193[2];
  v178 = v193[3];
  v177 = v193[4];
  v176 = v193[5];
  v175 = v193[6];
  v174 = v193[7];
  v184 = v193[8];
  v183 = v193[9];
  v182 = v193[10];
  v181 = v193[11];
  v180 = v193[12];
  v6 = v193[13];
  v7 = v193[14];
  v8 = v193[15];
  v9 = *v0;
  v10 = v0[1];
  v11 = v0[2];
  v12 = v0[3];
  v13 = v0[4];
  v14 = v0[5];
  v15 = v0[6];
  v16 = v0[7];
  v17 = v0[8];
  v18 = v0[9];
  v19 = v0[10];
  v20 = v0[11];
  v21 = v0[12];
  v22 = v0[13];
  v23 = v0[14];
  v160 = v0[15];
  v161 = v23;
  v162 = v22;
  v163 = v21;
  v164 = v20;
  v165 = v19;
  v166 = v18;
  v167 = v17;
  v152 = v9;
  v153 = v10;
  v159 = v11;
  v158 = v12;
  v157 = v13;
  v156 = v14;
  v155 = v15;
  v154 = v16;
  v24 = UUID.init(uuid:)(v9, v10, v11, v12, v13, v14);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v151 = v3;
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v5, v2);
  v29 = sub_1000599D0(8, v25, v27);
  v31 = v30;
  v32 = static String._fromSubstring(_:)(v29);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v171 = v8;
  v35 = v169;
  v172 = v7;
  v36 = v170;
  v173 = v6;
  v37 = UUID.init(uuid:)(v170, v169, v179, v178, v177, v176);
  v38 = UUID.uuidString.getter(v37);
  v40 = v39;
  v168 = v28;
  v28(v5, v2);
  v41 = sub_1000599D0(8, v38, v40);
  v43 = v42;
  v44 = static String._fromSubstring(_:)(v41);
  v46 = v45;
  swift_bridgeObjectRelease(v43);
  if (v32 == v44 && v34 == v46)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v44, v46, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v46);
    v2 = v185;
    v3 = v151;
    if ((v48 & 1) == 0)
    {
LABEL_7:
      v190 = 656423507;
      v191 = 0xE400000000000000;
      v49 = UUID.init(uuid:)(*v1, v1[1], v1[2], v1[3], v1[4], v1[5]);
      v50 = UUID.uuidString.getter(v49);
      v52 = v51;
      v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53(v5, v2);
      v54 = sub_1000599D0(8, v50, v52);
      v56 = v55;
      v57 = static String._fromSubstring(_:)(v54);
      v59 = v58;
      swift_bridgeObjectRelease(v56);
      v60._countAndFlagsBits = v57;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v59);
      v61._countAndFlagsBits = 39;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62 = v190;
      v63 = v191;
      sub_1000776AC();
      v65 = v64;
      v66 = *(_QWORD *)(v64 + 16);
      if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v145;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      v67 = v65 + 16 * v66;
      *(_QWORD *)(v67 + 32) = v62;
      *(_QWORD *)(v67 + 40) = v63;
      v187 = 656423506;
      v188 = 0xE400000000000000;
      sub_10005FA70((uint64_t)&v189, (uint64_t)&v190, &qword_1002ADF40);
      if ((v192 & 1) != 0)
      {
        v68 = 0;
        v69 = (void *)0xE000000000000000;
      }
      else
      {
        v70 = UUID.init(uuid:)(v190, BYTE1(v190), BYTE2(v190), BYTE3(v190), BYTE4(v190), BYTE5(v190));
        v71 = UUID.uuidString.getter(v70);
        v73 = v72;
        v53(v5, v185);
        v74 = sub_1000599D0(8, v71, v73);
        v76 = v75;
        v68 = static String._fromSubstring(_:)(v74);
        v69 = v77;
        swift_bridgeObjectRelease(v76);
      }
      v78._countAndFlagsBits = v68;
      v78._object = v69;
      String.append(_:)(v78);
      swift_bridgeObjectRelease(v69);
      v79._countAndFlagsBits = 39;
      v79._object = (void *)0xE100000000000000;
      String.append(_:)(v79);
      v81 = v187;
      v80 = v188;
LABEL_18:
      v109 = *(_QWORD *)(v65 + 16);
      v110 = v109 + 1;
      if (v109 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v144;
      }
      goto LABEL_20;
    }
  }
  v82 = v153;
  v153 = v152;
  v152 = v82;
  v151 = v159;
  v83 = v153 | (v82 << 8) | ((unint64_t)v159 << 16);
  v159 = v158;
  v169 = v157;
  v84 = v179;
  v170 = v156;
  v85 = v178;
  v178 = v155;
  v179 = v154;
  v86 = v83 | ((unint64_t)v158 << 24) | ((unint64_t)v157 << 32) | ((unint64_t)v156 << 40) | ((unint64_t)v155 << 48) | ((unint64_t)v154 << 56);
  v87 = v175;
  v88 = v174;
  v175 = v36;
  v174 = v35;
  v158 = v84;
  v157 = v85;
  v156 = v177;
  v89 = v36 | ((unint64_t)v35 << 8) | (v84 << 16) | (v85 << 24) | ((unint64_t)v177 << 32);
  v155 = v176;
  v176 = v88;
  v177 = v87;
  if (static UniversalControlUUID.compare(lhs:rhs:)(v86, v167 | (v166 << 8) | (v165 << 16) | (v164 << 24) | (v163 << 32) | (v162 << 40) | (v161 << 48) | (v160 << 56), v89 | (v155 << 40) | (v87 << 48) | (v88 << 56), v184 | (v183 << 8) | (v182 << 16) | (v181 << 24) | (v180 << 32) | (v173 << 40) | (v172 << 48) | (v171 << 56)))
  {
    v190 = 656423507;
    v191 = 0xE400000000000000;
    v90 = UUID.init(uuid:)(v153, v152, v151, v159, v169, v170);
    v91 = UUID.uuidString.getter(v90);
    v93 = v92;
    v94 = v185;
    v95 = v168;
    v168(v5, v185);
    v96._countAndFlagsBits = v91;
    v96._object = v93;
    String.append(_:)(v96);
    swift_bridgeObjectRelease(v93);
    v97._countAndFlagsBits = 39;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v190;
    v99 = v191;
    sub_1000776AC();
    v65 = v100;
    v101 = *(_QWORD *)(v100 + 16);
    if (v101 >= *(_QWORD *)(v100 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v148;
    }
    *(_QWORD *)(v65 + 16) = v101 + 1;
    v102 = v65 + 16 * v101;
    *(_QWORD *)(v102 + 32) = v98;
    *(_QWORD *)(v102 + 40) = v99;
    v190 = 656423506;
    v191 = 0xE400000000000000;
    v103 = UUID.init(uuid:)(v175, v174, v158, v157, v156, v155);
    v104 = UUID.uuidString.getter(v103);
    v106 = v105;
    v95(v5, v94);
    v107._countAndFlagsBits = v104;
    v107._object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v106);
    v108._countAndFlagsBits = 39;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    v81 = v190;
    v80 = v191;
    goto LABEL_18;
  }
  v190 = 0x27203A522653;
  v191 = 0xE600000000000000;
  v131 = UUID.init(uuid:)(v153, v152, v151, v159, v169, v170);
  v132 = UUID.uuidString.getter(v131);
  v134 = v133;
  v168(v5, v185);
  v135 = sub_1000599D0(8, v132, v134);
  v137 = v136;
  v138 = static String._fromSubstring(_:)(v135);
  v140 = v139;
  swift_bridgeObjectRelease(v137);
  v141._countAndFlagsBits = v138;
  v141._object = v140;
  String.append(_:)(v141);
  swift_bridgeObjectRelease(v140);
  v142._countAndFlagsBits = 39;
  v142._object = (void *)0xE100000000000000;
  String.append(_:)(v142);
  v81 = v190;
  v80 = v191;
  sub_1000776AC();
  v65 = v143;
  v109 = *(_QWORD *)(v143 + 16);
  v110 = v109 + 1;
  if (v109 >= *(_QWORD *)(v143 + 24) >> 1)
  {
    sub_1000776AC();
    v65 = v149;
  }
LABEL_20:
  *(_QWORD *)(v65 + 16) = v110;
  v111 = v65 + 16 * v109;
  *(_QWORD *)(v111 + 32) = v81;
  *(_QWORD *)(v111 + 40) = v80;
  v112 = *((_QWORD *)v1 + 5);
  if (v112 == 1)
  {
    if (v110 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v146;
    }
    *(_QWORD *)(v65 + 16) = v110 + 1;
    v113 = v65 + 16 * v110;
    *(_QWORD *)(v113 + 32) = 0x2727203A56;
    *(_QWORD *)(v113 + 40) = 0xE500000000000000;
  }
  else
  {
    v187 = 656423510;
    v188 = 0xE400000000000000;
    sub_100178CE0((uint64_t)v1);
    if (v112)
    {
      sub_10016FC9C();
      v116 = v115;
    }
    else
    {
      v116 = 0xE300000000000000;
      v114 = 7104878;
    }
    v117 = v116;
    String.append(_:)(*(Swift::String *)&v114);
    swift_bridgeObjectRelease(v116);
    v118._countAndFlagsBits = 39;
    v118._object = (void *)0xE100000000000000;
    String.append(_:)(v118);
    v119 = v187;
    v120 = v188;
    v121 = *(_QWORD *)(v65 + 16);
    if (v121 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v147;
    }
    *(_QWORD *)(v65 + 16) = v121 + 1;
    v122 = v65 + 16 * v121;
    *(_QWORD *)(v122 + 32) = v119;
    *(_QWORD *)(v122 + 40) = v120;
    sub_100178C3C((uint64_t)v1);
  }
  v187 = 91;
  v188 = 0xE100000000000000;
  v186 = v65;
  v123 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10002599C((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
  v125 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v123, v124);
  v127 = v126;
  swift_bridgeObjectRelease(v65);
  v128._countAndFlagsBits = v125;
  v128._object = v127;
  String.append(_:)(v128);
  swift_bridgeObjectRelease(v127);
  v129._countAndFlagsBits = 93;
  v129._object = (void *)0xE100000000000000;
  String.append(_:)(v129);
  return v187;
}

uint64_t sub_1001747B4()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  Swift::String v112;
  void *object;
  Swift::String v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  Swift::String v138;
  Swift::String v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  _BYTE v190[17];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FA70((uint64_t)(v0 + 16), (uint64_t)&v186, &qword_1002ADF40);
  sub_10005FA70((uint64_t)&v186, (uint64_t)v190, &qword_1002ADF40);
  v182 = v2;
  if ((v190[16] & 1) != 0)
    goto LABEL_7;
  v167 = v190[0];
  v166 = v190[1];
  v176 = v190[2];
  v175 = v190[3];
  v174 = v190[4];
  v173 = v190[5];
  v172 = v190[6];
  v171 = v190[7];
  v181 = v190[8];
  v180 = v190[9];
  v179 = v190[10];
  v178 = v190[11];
  v177 = v190[12];
  v6 = v190[13];
  v7 = v190[14];
  v8 = v190[15];
  v9 = *v0;
  v10 = v0[1];
  v11 = v0[2];
  v12 = v0[3];
  v13 = v0[4];
  v14 = v0[5];
  v15 = v0[6];
  v16 = v0[7];
  v17 = v0[8];
  v18 = v0[9];
  v19 = v0[10];
  v20 = v0[11];
  v21 = v0[12];
  v22 = v0[13];
  v23 = v0[14];
  v157 = v0[15];
  v158 = v23;
  v159 = v22;
  v160 = v21;
  v161 = v20;
  v162 = v19;
  v163 = v18;
  v164 = v17;
  v149 = v9;
  v150 = v10;
  v156 = v11;
  v155 = v12;
  v154 = v13;
  v153 = v14;
  v152 = v15;
  v151 = v16;
  v24 = UUID.init(uuid:)(v9, v10, v11, v12, v13, v14);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v148 = v3;
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v5, v2);
  v29 = sub_1000599D0(8, v25, v27);
  v31 = v30;
  v32 = static String._fromSubstring(_:)(v29);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v168 = v8;
  v35 = v166;
  v169 = v7;
  v36 = v167;
  v170 = v6;
  v37 = UUID.init(uuid:)(v167, v166, v176, v175, v174, v173);
  v38 = UUID.uuidString.getter(v37);
  v40 = v39;
  v165 = v28;
  v28(v5, v2);
  v41 = sub_1000599D0(8, v38, v40);
  v43 = v42;
  v44 = static String._fromSubstring(_:)(v41);
  v46 = v45;
  swift_bridgeObjectRelease(v43);
  if (v32 == v44 && v34 == v46)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v44, v46, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v46);
    v2 = v182;
    v3 = v148;
    if ((v48 & 1) == 0)
    {
LABEL_7:
      v187 = 656423507;
      v188 = 0xE400000000000000;
      v49 = UUID.init(uuid:)(*v1, v1[1], v1[2], v1[3], v1[4], v1[5]);
      v50 = UUID.uuidString.getter(v49);
      v52 = v51;
      v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53(v5, v2);
      v54 = sub_1000599D0(8, v50, v52);
      v56 = v55;
      v57 = static String._fromSubstring(_:)(v54);
      v59 = v58;
      swift_bridgeObjectRelease(v56);
      v60._countAndFlagsBits = v57;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v59);
      v61._countAndFlagsBits = 39;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62 = v187;
      v63 = v188;
      sub_1000776AC();
      v65 = v64;
      v66 = *(_QWORD *)(v64 + 16);
      if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v142;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      v67 = v65 + 16 * v66;
      *(_QWORD *)(v67 + 32) = v62;
      *(_QWORD *)(v67 + 40) = v63;
      v184 = 656423506;
      v185 = 0xE400000000000000;
      sub_10005FA70((uint64_t)&v186, (uint64_t)&v187, &qword_1002ADF40);
      if ((v189 & 1) != 0)
      {
        v68 = 0;
        v69 = (void *)0xE000000000000000;
      }
      else
      {
        v70 = UUID.init(uuid:)(v187, BYTE1(v187), BYTE2(v187), BYTE3(v187), BYTE4(v187), BYTE5(v187));
        v71 = UUID.uuidString.getter(v70);
        v73 = v72;
        v53(v5, v182);
        v74 = sub_1000599D0(8, v71, v73);
        v76 = v75;
        v68 = static String._fromSubstring(_:)(v74);
        v69 = v77;
        swift_bridgeObjectRelease(v76);
      }
      v78._countAndFlagsBits = v68;
      v78._object = v69;
      String.append(_:)(v78);
      swift_bridgeObjectRelease(v69);
      v79._countAndFlagsBits = 39;
      v79._object = (void *)0xE100000000000000;
      String.append(_:)(v79);
      v81 = v184;
      v80 = v185;
LABEL_18:
      v109 = *(_QWORD *)(v65 + 16);
      v110 = v109 + 1;
      if (v109 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v141;
      }
      goto LABEL_20;
    }
  }
  v82 = v150;
  v150 = v149;
  v149 = v82;
  v148 = v156;
  v83 = v150 | (v82 << 8) | ((unint64_t)v156 << 16);
  v156 = v155;
  v166 = v154;
  v84 = v176;
  v167 = v153;
  v85 = v175;
  v175 = v152;
  v176 = v151;
  v86 = v83 | ((unint64_t)v155 << 24) | ((unint64_t)v154 << 32) | ((unint64_t)v153 << 40) | ((unint64_t)v152 << 48) | ((unint64_t)v151 << 56);
  v87 = v172;
  v88 = v171;
  v172 = v36;
  v171 = v35;
  v155 = v84;
  v154 = v85;
  v153 = v174;
  v89 = v36 | ((unint64_t)v35 << 8) | (v84 << 16) | (v85 << 24) | ((unint64_t)v174 << 32);
  v152 = v173;
  v173 = v88;
  v174 = v87;
  if (static UniversalControlUUID.compare(lhs:rhs:)(v86, v164 | (v163 << 8) | (v162 << 16) | (v161 << 24) | (v160 << 32) | (v159 << 40) | (v158 << 48) | (v157 << 56), v89 | (v152 << 40) | (v87 << 48) | (v88 << 56), v181 | (v180 << 8) | (v179 << 16) | (v178 << 24) | (v177 << 32) | (v170 << 40) | (v169 << 48) | (v168 << 56)))
  {
    v187 = 656423507;
    v188 = 0xE400000000000000;
    v90 = UUID.init(uuid:)(v150, v149, v148, v156, v166, v167);
    v91 = UUID.uuidString.getter(v90);
    v93 = v92;
    v94 = v182;
    v95 = v165;
    v165(v5, v182);
    v96._countAndFlagsBits = v91;
    v96._object = v93;
    String.append(_:)(v96);
    swift_bridgeObjectRelease(v93);
    v97._countAndFlagsBits = 39;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v187;
    v99 = v188;
    sub_1000776AC();
    v65 = v100;
    v101 = *(_QWORD *)(v100 + 16);
    if (v101 >= *(_QWORD *)(v100 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v145;
    }
    *(_QWORD *)(v65 + 16) = v101 + 1;
    v102 = v65 + 16 * v101;
    *(_QWORD *)(v102 + 32) = v98;
    *(_QWORD *)(v102 + 40) = v99;
    v187 = 656423506;
    v188 = 0xE400000000000000;
    v103 = UUID.init(uuid:)(v172, v171, v155, v154, v153, v152);
    v104 = UUID.uuidString.getter(v103);
    v106 = v105;
    v95(v5, v94);
    v107._countAndFlagsBits = v104;
    v107._object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v106);
    v108._countAndFlagsBits = 39;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    v81 = v187;
    v80 = v188;
    goto LABEL_18;
  }
  v187 = 0x27203A522653;
  v188 = 0xE600000000000000;
  v128 = UUID.init(uuid:)(v150, v149, v148, v156, v166, v167);
  v129 = UUID.uuidString.getter(v128);
  v131 = v130;
  v165(v5, v182);
  v132 = sub_1000599D0(8, v129, v131);
  v134 = v133;
  v135 = static String._fromSubstring(_:)(v132);
  v137 = v136;
  swift_bridgeObjectRelease(v134);
  v138._countAndFlagsBits = v135;
  v138._object = v137;
  String.append(_:)(v138);
  swift_bridgeObjectRelease(v137);
  v139._countAndFlagsBits = 39;
  v139._object = (void *)0xE100000000000000;
  String.append(_:)(v139);
  v81 = v187;
  v80 = v188;
  sub_1000776AC();
  v65 = v140;
  v109 = *(_QWORD *)(v140 + 16);
  v110 = v109 + 1;
  if (v109 >= *(_QWORD *)(v140 + 24) >> 1)
  {
    sub_1000776AC();
    v65 = v146;
  }
LABEL_20:
  *(_QWORD *)(v65 + 16) = v110;
  v111 = v65 + 16 * v109;
  *(_QWORD *)(v111 + 32) = v81;
  *(_QWORD *)(v111 + 40) = v80;
  if (*((_QWORD *)v1 + 5))
  {
    v184 = 656423510;
    v185 = 0xE400000000000000;
    sub_100178D0C((uint64_t)v1);
    UniversalControlDevice.label.getter();
    object = v112._object;
    String.append(_:)(v112);
    swift_bridgeObjectRelease(object);
    v114._countAndFlagsBits = 39;
    v114._object = (void *)0xE100000000000000;
    String.append(_:)(v114);
    v115 = v184;
    v116 = v185;
    v117 = *(_QWORD *)(v65 + 16);
    if (v117 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v143;
    }
    *(_QWORD *)(v65 + 16) = v117 + 1;
    v118 = v65 + 16 * v117;
    *(_QWORD *)(v118 + 32) = v115;
    *(_QWORD *)(v118 + 40) = v116;
    sub_100178C90((uint64_t)v1);
  }
  else
  {
    if (v110 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v144;
    }
    *(_QWORD *)(v65 + 16) = v110 + 1;
    v119 = v65 + 16 * v110;
    *(_QWORD *)(v119 + 32) = 0x2727203A56;
    *(_QWORD *)(v119 + 40) = 0xE500000000000000;
  }
  v184 = 91;
  v185 = 0xE100000000000000;
  v183 = v65;
  v120 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10002599C((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
  v122 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v120, v121);
  v124 = v123;
  swift_bridgeObjectRelease(v65);
  v125._countAndFlagsBits = v122;
  v125._object = v124;
  String.append(_:)(v125);
  swift_bridgeObjectRelease(v124);
  v126._countAndFlagsBits = 93;
  v126._object = (void *)0xE100000000000000;
  String.append(_:)(v126);
  return v184;
}

uint64_t sub_100175410()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  void *object;
  Swift::String v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  Swift::String v127;
  Swift::String v128;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  Swift::String v140;
  Swift::String v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  _BYTE v192[17];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FA70((uint64_t)(v0 + 16), (uint64_t)&v188, &qword_1002ADF40);
  sub_10005FA70((uint64_t)&v188, (uint64_t)v192, &qword_1002ADF40);
  v184 = v2;
  if ((v192[16] & 1) != 0)
    goto LABEL_7;
  v169 = v192[0];
  v168 = v192[1];
  v178 = v192[2];
  v177 = v192[3];
  v176 = v192[4];
  v175 = v192[5];
  v174 = v192[6];
  v173 = v192[7];
  v183 = v192[8];
  v182 = v192[9];
  v181 = v192[10];
  v180 = v192[11];
  v179 = v192[12];
  v6 = v192[13];
  v7 = v192[14];
  v8 = v192[15];
  v9 = *v0;
  v10 = v0[1];
  v11 = v0[2];
  v12 = v0[3];
  v13 = v0[4];
  v14 = v0[5];
  v15 = v0[6];
  v16 = v0[7];
  v17 = v0[8];
  v18 = v0[9];
  v19 = v0[10];
  v20 = v0[11];
  v21 = v0[12];
  v22 = v0[13];
  v23 = v0[14];
  v159 = v0[15];
  v160 = v23;
  v161 = v22;
  v162 = v21;
  v163 = v20;
  v164 = v19;
  v165 = v18;
  v166 = v17;
  v151 = v9;
  v152 = v10;
  v158 = v11;
  v157 = v12;
  v156 = v13;
  v155 = v14;
  v154 = v15;
  v153 = v16;
  v24 = UUID.init(uuid:)(v9, v10, v11, v12, v13, v14);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v150 = v3;
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v5, v2);
  v29 = sub_1000599D0(8, v25, v27);
  v31 = v30;
  v32 = static String._fromSubstring(_:)(v29);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v170 = v8;
  v35 = v168;
  v171 = v7;
  v36 = v169;
  v172 = v6;
  v37 = UUID.init(uuid:)(v169, v168, v178, v177, v176, v175);
  v38 = UUID.uuidString.getter(v37);
  v40 = v39;
  v167 = v28;
  v28(v5, v2);
  v41 = sub_1000599D0(8, v38, v40);
  v43 = v42;
  v44 = static String._fromSubstring(_:)(v41);
  v46 = v45;
  swift_bridgeObjectRelease(v43);
  if (v32 == v44 && v34 == v46)
  {
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v44, v46, 0);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v46);
    v2 = v184;
    v3 = v150;
    if ((v48 & 1) == 0)
    {
LABEL_7:
      v189 = 656423507;
      v190 = 0xE400000000000000;
      v49 = UUID.init(uuid:)(*v1, v1[1], v1[2], v1[3], v1[4], v1[5]);
      v50 = UUID.uuidString.getter(v49);
      v52 = v51;
      v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53(v5, v2);
      v54 = sub_1000599D0(8, v50, v52);
      v56 = v55;
      v57 = static String._fromSubstring(_:)(v54);
      v59 = v58;
      swift_bridgeObjectRelease(v56);
      v60._countAndFlagsBits = v57;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v59);
      v61._countAndFlagsBits = 39;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v62 = v189;
      v63 = v190;
      sub_1000776AC();
      v65 = v64;
      v66 = *(_QWORD *)(v64 + 16);
      if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v144;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      v67 = v65 + 16 * v66;
      *(_QWORD *)(v67 + 32) = v62;
      *(_QWORD *)(v67 + 40) = v63;
      v186 = 656423506;
      v187 = 0xE400000000000000;
      sub_10005FA70((uint64_t)&v188, (uint64_t)&v189, &qword_1002ADF40);
      if ((v191 & 1) != 0)
      {
        v68 = 0;
        v69 = (void *)0xE000000000000000;
      }
      else
      {
        v70 = UUID.init(uuid:)(v189, BYTE1(v189), BYTE2(v189), BYTE3(v189), BYTE4(v189), BYTE5(v189));
        v71 = UUID.uuidString.getter(v70);
        v73 = v72;
        v53(v5, v184);
        v74 = sub_1000599D0(8, v71, v73);
        v76 = v75;
        v68 = static String._fromSubstring(_:)(v74);
        v69 = v77;
        swift_bridgeObjectRelease(v76);
      }
      v78._countAndFlagsBits = v68;
      v78._object = v69;
      String.append(_:)(v78);
      swift_bridgeObjectRelease(v69);
      v79._countAndFlagsBits = 39;
      v79._object = (void *)0xE100000000000000;
      String.append(_:)(v79);
      v81 = v186;
      v80 = v187;
LABEL_18:
      v109 = *(_QWORD *)(v65 + 16);
      v110 = v109 + 1;
      if (v109 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        sub_1000776AC();
        v65 = v143;
      }
      goto LABEL_20;
    }
  }
  v82 = v152;
  v152 = v151;
  v151 = v82;
  v150 = v158;
  v83 = v152 | (v82 << 8) | ((unint64_t)v158 << 16);
  v158 = v157;
  v168 = v156;
  v84 = v178;
  v169 = v155;
  v85 = v177;
  v177 = v154;
  v178 = v153;
  v86 = v83 | ((unint64_t)v157 << 24) | ((unint64_t)v156 << 32) | ((unint64_t)v155 << 40) | ((unint64_t)v154 << 48) | ((unint64_t)v153 << 56);
  v87 = v174;
  v88 = v173;
  v174 = v36;
  v173 = v35;
  v157 = v84;
  v156 = v85;
  v155 = v176;
  v89 = v36 | ((unint64_t)v35 << 8) | (v84 << 16) | (v85 << 24) | ((unint64_t)v176 << 32);
  v154 = v175;
  v175 = v88;
  v176 = v87;
  if (static UniversalControlUUID.compare(lhs:rhs:)(v86, v166 | (v165 << 8) | (v164 << 16) | (v163 << 24) | (v162 << 32) | (v161 << 40) | (v160 << 48) | (v159 << 56), v89 | (v154 << 40) | (v87 << 48) | (v88 << 56), v183 | (v182 << 8) | (v181 << 16) | (v180 << 24) | (v179 << 32) | (v172 << 40) | (v171 << 48) | (v170 << 56)))
  {
    v189 = 656423507;
    v190 = 0xE400000000000000;
    v90 = UUID.init(uuid:)(v152, v151, v150, v158, v168, v169);
    v91 = UUID.uuidString.getter(v90);
    v93 = v92;
    v94 = v184;
    v95 = v167;
    v167(v5, v184);
    v96._countAndFlagsBits = v91;
    v96._object = v93;
    String.append(_:)(v96);
    swift_bridgeObjectRelease(v93);
    v97._countAndFlagsBits = 39;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v189;
    v99 = v190;
    sub_1000776AC();
    v65 = v100;
    v101 = *(_QWORD *)(v100 + 16);
    if (v101 >= *(_QWORD *)(v100 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v147;
    }
    *(_QWORD *)(v65 + 16) = v101 + 1;
    v102 = v65 + 16 * v101;
    *(_QWORD *)(v102 + 32) = v98;
    *(_QWORD *)(v102 + 40) = v99;
    v189 = 656423506;
    v190 = 0xE400000000000000;
    v103 = UUID.init(uuid:)(v174, v173, v157, v156, v155, v154);
    v104 = UUID.uuidString.getter(v103);
    v106 = v105;
    v95(v5, v94);
    v107._countAndFlagsBits = v104;
    v107._object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease(v106);
    v108._countAndFlagsBits = 39;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    v81 = v189;
    v80 = v190;
    goto LABEL_18;
  }
  v189 = 0x27203A522653;
  v190 = 0xE600000000000000;
  v130 = UUID.init(uuid:)(v152, v151, v150, v158, v168, v169);
  v131 = UUID.uuidString.getter(v130);
  v133 = v132;
  v167(v5, v184);
  v134 = sub_1000599D0(8, v131, v133);
  v136 = v135;
  v137 = static String._fromSubstring(_:)(v134);
  v139 = v138;
  swift_bridgeObjectRelease(v136);
  v140._countAndFlagsBits = v137;
  v140._object = v139;
  String.append(_:)(v140);
  swift_bridgeObjectRelease(v139);
  v141._countAndFlagsBits = 39;
  v141._object = (void *)0xE100000000000000;
  String.append(_:)(v141);
  v81 = v189;
  v80 = v190;
  sub_1000776AC();
  v65 = v142;
  v109 = *(_QWORD *)(v142 + 16);
  v110 = v109 + 1;
  if (v109 >= *(_QWORD *)(v142 + 24) >> 1)
  {
    sub_1000776AC();
    v65 = v148;
  }
LABEL_20:
  *(_QWORD *)(v65 + 16) = v110;
  v111 = v65 + 16 * v109;
  *(_QWORD *)(v111 + 32) = v81;
  *(_QWORD *)(v111 + 40) = v80;
  v112 = *((_QWORD *)v1 + 5);
  if (v112)
  {
    v113 = *((_QWORD *)v1 + 6);
    v186 = 656423510;
    v187 = 0xE400000000000000;
    sub_100178D34((uint64_t)v1);
    sub_10016F6B8();
    object = v114._object;
    String.append(_:)(v114);
    swift_bridgeObjectRelease(object);
    v116._countAndFlagsBits = 39;
    v116._object = (void *)0xE100000000000000;
    String.append(_:)(v116);
    v117 = v186;
    v118 = v187;
    v119 = *(_QWORD *)(v65 + 16);
    if (v119 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v145;
    }
    *(_QWORD *)(v65 + 16) = v119 + 1;
    v120 = v65 + 16 * v119;
    *(_QWORD *)(v120 + 32) = v117;
    *(_QWORD *)(v120 + 40) = v118;
    swift_bridgeObjectRelease(v113);
    swift_bridgeObjectRelease(v112);
  }
  else
  {
    if (v110 >= *(_QWORD *)(v65 + 24) >> 1)
    {
      sub_1000776AC();
      v65 = v146;
    }
    *(_QWORD *)(v65 + 16) = v110 + 1;
    v121 = v65 + 16 * v110;
    *(_QWORD *)(v121 + 32) = 0x2727203A56;
    *(_QWORD *)(v121 + 40) = 0xE500000000000000;
  }
  v186 = 91;
  v187 = 0xE100000000000000;
  v185 = v65;
  v122 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10002599C((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
  v124 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v122, v123);
  v126 = v125;
  swift_bridgeObjectRelease(v65);
  v127._countAndFlagsBits = v124;
  v127._object = v126;
  String.append(_:)(v127);
  swift_bridgeObjectRelease(v126);
  v128._countAndFlagsBits = 93;
  v128._object = (void *)0xE100000000000000;
  String.append(_:)(v128);
  return v186;
}

void sub_100176080()
{
  unsigned __int8 *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String v80;
  void *object;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  sub_10002626C();
  v95 = v1;
  v97 = v2;
  v4 = v3;
  v5 = v0;
  v100 = v6(0);
  v96 = *(_QWORD *)(v100 - 8);
  sub_1001794A0();
  __chkstk_darwin(v7);
  sub_100179724();
  v98 = (uint64_t *)v4;
  v99 = v8;
  sub_100179738();
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10000E5DC();
  v101 = v10;
  v11 = sub_10000E440();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10002641C();
  v15 = v14 - v13;
  v102 = v16;
  if ((v0[32] & 1) != 0)
    goto LABEL_7;
  v17 = *((_QWORD *)v0 + 2);
  sub_100179A8C();
  sub_100179A0C(*v0, v0[1], v0[2], v0[3], v18, v19, v20, v21);
  sub_100179528();
  sub_100179940();
  v93 = v12;
  v22 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v22(v15, v11);
  sub_1000AB088();
  v94 = sub_1000602C0();
  v4 = v23;
  sub_10000E420();
  sub_1001795CC();
  sub_100179A60(v17, v17 >> 8, v17 >> 16, v17 >> 24, HIDWORD(v17));
  sub_100179528();
  v25 = v24;
  v22(v15, v11);
  v26 = sub_10016B12C();
  v28 = sub_1000599D0(v26, v27, v25);
  v29 = static String._fromSubstring(_:)(v28);
  v31 = v30;
  sub_10002D89C();
  if (v94 == v29 && v4 == v31)
  {
    sub_100026AF4(v4);
  }
  else
  {
    v33 = sub_1001799E8(v94, v4, v29);
    sub_10000E410();
    sub_10000E420();
    v11 = v102;
    v12 = v93;
    if ((v33 & 1) == 0)
    {
LABEL_7:
      sub_100179A8C();
      sub_100179A0C(*v5, v5[1], v5[2], v5[3], v34, v35, v36, v37);
      sub_100179528();
      sub_100179940();
      v38 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v38(v15, v11);
      sub_1000AB088();
      sub_1000676A4();
      v40 = v39;
      sub_10000E410();
      sub_1001798A8();
      sub_10000E568();
      sub_100179414();
      sub_1001412A4();
      sub_100179AB0();
      if (v41)
      {
        sub_100179490();
        v40 = v87;
      }
      v42 = v98;
      *(_QWORD *)(v40 + 16) = v4;
      sub_100179898(v40 + 16 * v11);
      v104 = v43;
      if ((v5[32] & 1) != 0)
      {
        v44 = 0;
        v45 = 0xE000000000000000;
      }
      else
      {
        sub_100179420();
        UUID.init(uuid:)(v46, v47, v48, v49, v50, v51);
        sub_100179528();
        v38(v15, v102);
        sub_1000AB088();
        v44 = sub_1000602C0();
        v45 = v52;
        sub_10000E420();
      }
      v54 = v99;
      v53 = v100;
      v55 = v97;
      sub_1001798EC(v44);
      sub_10000E410();
      sub_100179414();
      v57 = v104;
      v56 = 0xE400000000000000;
      v58 = *(_QWORD *)(v40 + 16);
      sub_100179670();
      if (v41)
      {
        sub_100179490();
        v40 = v59;
      }
      goto LABEL_26;
    }
  }
  v60 = v5[10];
  v40 = v5[13];
  sub_100179964();
  if (static UniversalControlUUID.compare(lhs:rhs:)(v61, v62, v63, v64))
  {
    sub_1001793A4(656423507);
    v65 = sub_100179528();
    sub_1001795B8();
    sub_100179550();
    sub_10000E594();
    sub_100179414();
    sub_1001412A4();
    sub_100179AB0();
    if (v41)
    {
      sub_100179490();
      v40 = v90;
    }
    v42 = v98;
    *(_QWORD *)(v40 + 16) = v65;
    sub_100179898(v40 + 16 * v60);
    v105 = v66;
    sub_1001795CC();
    sub_100179A60(v67, v68, v69, v70, v71);
    v45 = sub_100179528();
    sub_1001795B8();
    sub_100179550();
    sub_10000E594();
    sub_100179414();
    v57 = v105;
    v56 = 0xE400000000000000;
    v58 = *(_QWORD *)(v40 + 16);
    sub_100179670();
    if (v41)
    {
      sub_100179490();
      v40 = v91;
    }
    v54 = v99;
    v53 = v100;
  }
  else
  {
    sub_1001799C8();
    sub_1001793A4(v72);
    v45 = sub_100179528();
    sub_1001795B8();
    sub_1000AB088();
    sub_1000676A4();
    sub_10000E410();
    sub_1001798A8();
    sub_10000E568();
    sub_100179414();
    v57 = v103;
    v56 = v107;
    sub_1001412A4();
    v40 = v73;
    v58 = *(_QWORD *)(v73 + 16);
    sub_100179670();
    if (v41)
    {
      sub_100179490();
      v40 = v92;
    }
    v54 = v99;
    v53 = v100;
    v42 = v98;
  }
  v55 = v97;
LABEL_26:
  *(_QWORD *)(v40 + 16) = v45;
  v74 = v40 + 16 * v58;
  *(_QWORD *)(v74 + 32) = v57;
  *(_QWORD *)(v74 + 40) = v56;
  v75 = sub_1000055B0(v55);
  sub_10005FAFC((uint64_t)&v5[*(int *)(v75 + 56)], v101, v42);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v101, 1, v53) == 1)
  {
    v76 = *(_QWORD *)(v40 + 16);
    if (v76 >= *(_QWORD *)(v40 + 24) >> 1)
    {
      sub_100179490();
      v40 = v88;
    }
    *(_QWORD *)(v40 + 16) = v76 + 1;
    sub_100179828(v40 + 16 * v76);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v54, v101, v53);
    sub_100179A4C();
    v106 = v77;
    v108 = v78;
    v80._countAndFlagsBits = v95(v79);
    object = v80._object;
    String.append(_:)(v80);
    sub_10000E410();
    sub_100179414();
    v82 = *(_QWORD *)(v40 + 16);
    sub_100179670();
    if (v41)
    {
      sub_100179490();
      v40 = v89;
    }
    *(_QWORD *)(v40 + 16) = object;
    v83 = v40 + 16 * v82;
    *(_QWORD *)(v83 + 32) = v106;
    *(_QWORD *)(v83 + 40) = v108;
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v54, v53);
  }
  sub_100179738();
  sub_100179AA8((unint64_t *)&qword_1002AB150);
  sub_1001794F8(v84, v85, v86, v84);
  sub_10000E568();
  sub_100179550();
  sub_10000E594();
  sub_1001794B0(93);
  sub_10000E4E0();
}

void sub_1001767CC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;

  sub_10002626C();
  v3 = v1;
  v5 = *(_QWORD *)(v4 + 16);
  v99 = *(_QWORD *)(v5 - 8);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v97 = v7;
  v98 = v8;
  v9 = *(_QWORD *)(v7 + 40);
  v104 = v5;
  v96 = *(_OWORD *)(v7 + 24);
  v105 = v96;
  v106 = v9;
  v10 = type metadata accessor for SyncValue(0, (uint64_t)&v104);
  v100 = *(_QWORD *)(v10 - 8);
  v101 = v10;
  sub_1001794A0();
  __chkstk_darwin(v11);
  sub_100179724();
  v102 = v12;
  v13 = sub_10000E440();
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100124184();
  v103 = v15;
  if ((v1[32] & 1) != 0)
    goto LABEL_7;
  v16 = *((_QWORD *)v1 + 2);
  sub_100179B40();
  sub_100179A00(*v1, v1[1], v1[2], v1[3], v17, v18, v19, v20);
  sub_10006D39C();
  sub_100179940();
  v94 = v14;
  v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v21(v2, v13);
  sub_1000AB088();
  v95 = sub_1000602C0();
  v0 = v22;
  sub_10000E420();
  sub_100179568();
  sub_100179AC4(v16, v16 >> 8, v16 >> 16, v16 >> 24, HIDWORD(v16));
  sub_10006D39C();
  v24 = v23;
  v21(v2, v13);
  v25 = sub_10016B12C();
  v27 = sub_1000599D0(v25, v26, v24);
  v28 = static String._fromSubstring(_:)(v27);
  v30 = v29;
  sub_10002D89C();
  if (v95 == v28 && v0 == v30)
  {
    sub_100026AF4(v0);
  }
  else
  {
    v32 = sub_1001799E8(v95, v0, v28);
    sub_10000E410();
    sub_10000E420();
    v13 = v103;
    v14 = v94;
    if ((v32 & 1) == 0)
    {
LABEL_7:
      v104 = 656423507;
      *(_QWORD *)&v105 = 0xE400000000000000;
      sub_100179B40();
      sub_100179A00(*v3, v3[1], v3[2], v3[3], v33, v34, v35, v36);
      sub_10006D39C();
      sub_100179940();
      v37 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v37(v2, v13);
      sub_1000AB088();
      sub_1000676A4();
      sub_10000E410();
      sub_100179818();
      sub_10000E50C();
      sub_100179414();
      sub_1001412A4();
      v39 = v38;
      v40 = *(_QWORD *)(v38 + 16);
      sub_100179670();
      if (v41)
      {
        sub_10017931C();
        v39 = v89;
      }
      v42 = v5;
      *(_QWORD *)(v39 + 16) = v0;
      sub_100179898(v39 + 16 * v40);
      v104 = v43;
      *(_QWORD *)&v105 = 0xE400000000000000;
      if ((v3[32] & 1) != 0)
      {
        v44 = 0;
        v45 = 0xE000000000000000;
      }
      else
      {
        sub_100179420();
        UUID.init(uuid:)(v46, v47, v48, v49, v50, v51);
        sub_10006D39C();
        v37(v2, v103);
        sub_1000AB088();
        v44 = sub_1000602C0();
        v45 = v52;
        sub_10000E420();
      }
      v54 = v98;
      v53 = v99;
      v55 = v97;
      sub_1001798EC(v44);
      sub_10000E410();
      sub_100179414();
      v57 = v104;
      v56 = v105;
      v58 = *(_QWORD *)(v39 + 16);
      sub_100179670();
      if (v41)
      {
        sub_10017931C();
        v39 = v59;
      }
      goto LABEL_26;
    }
  }
  if (static UniversalControlUUID.compare(lhs:rhs:)(*v3 | ((unint64_t)v3[1] << 8) | ((unint64_t)v3[2] << 16) | ((unint64_t)v3[3] << 24) | ((unint64_t)v3[4] << 32) | ((unint64_t)v3[5] << 40) | ((unint64_t)v3[6] << 48) | ((unint64_t)v3[7] << 56), v3[8] | ((unint64_t)v3[9] << 8) | ((unint64_t)v3[10] << 16) | ((unint64_t)v3[11] << 24) | ((unint64_t)v3[12] << 32) | ((unint64_t)v3[13] << 40) | ((unint64_t)v3[14] << 48) | ((unint64_t)v3[15] << 56)))
  {
    sub_100179334(656423507);
    v60 = sub_10006D39C();
    v62 = v61;
    sub_10017959C();
    v63._countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    sub_10000E50C();
    sub_100179414();
    v64 = v104;
    v65 = v105;
    sub_1001412A4();
    v39 = v66;
    v67 = *(_QWORD *)(v66 + 16);
    if (v67 >= *(_QWORD *)(v66 + 24) >> 1)
    {
      sub_10017931C();
      v39 = v92;
    }
    v42 = v5;
    sub_100179964();
    *(_QWORD *)(v39 + 16) = v67 + 1;
    v68 = v39 + 16 * v67;
    *(_QWORD *)(v68 + 32) = v64;
    *(_QWORD *)(v68 + 40) = v65;
    v104 = 656423506;
    *(_QWORD *)&v105 = 0xE400000000000000;
    sub_100179568();
    sub_100179AC4(v69, v70, v71, v72, v73);
    v45 = sub_10006D39C();
    sub_10017959C();
    sub_100179550();
    sub_10000E594();
    sub_100179414();
    v57 = v104;
    v56 = v105;
    v58 = *(_QWORD *)(v39 + 16);
    sub_100179670();
    if (v41)
    {
      sub_10017931C();
      v39 = v74;
    }
  }
  else
  {
    sub_1001799C8();
    sub_100179334(v75);
    v45 = sub_10006D39C();
    sub_10017959C();
    sub_1000AB088();
    sub_1000676A4();
    sub_10000E410();
    sub_100179818();
    sub_10000E50C();
    sub_100179414();
    v57 = v104;
    v56 = v105;
    sub_1001412A4();
    v39 = v76;
    v58 = *(_QWORD *)(v76 + 16);
    sub_100179670();
    if (v41)
    {
      sub_10017931C();
      v39 = v93;
    }
    v42 = v5;
  }
  v54 = v98;
  v53 = v99;
  v55 = v97;
LABEL_26:
  *(_QWORD *)(v39 + 16) = v45;
  v77 = v39 + 16 * v58;
  *(_QWORD *)(v77 + 32) = v57;
  *(_QWORD *)(v77 + 40) = v56;
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v100 + 16))(v102, &v3[*(int *)(v55 + 56)], v101);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v102, 1, v42) == 1)
  {
    v78 = *(_QWORD *)(v39 + 16);
    if (v78 >= *(_QWORD *)(v39 + 24) >> 1)
    {
      sub_10017931C();
      v39 = v90;
    }
    *(_QWORD *)(v39 + 16) = v78 + 1;
    sub_100179828(v39 + 16 * v78);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v54, v102, v42);
    sub_100179A4C();
    v104 = v79;
    *(_QWORD *)&v105 = v80;
    v81._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(v96 + 8))(v42);
    String.append(_:)(v81);
    sub_10000E410();
    sub_100179414();
    v82 = v104;
    v83 = v105;
    v84 = *(_QWORD *)(v39 + 16);
    if (v84 >= *(_QWORD *)(v39 + 24) >> 1)
    {
      sub_10017931C();
      v39 = v91;
    }
    *(_QWORD *)(v39 + 16) = v84 + 1;
    v85 = v39 + 16 * v84;
    *(_QWORD *)(v85 + 32) = v82;
    *(_QWORD *)(v85 + 40) = v83;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v42);
  }
  sub_1001797E0();
  sub_100179738();
  sub_100179AA8((unint64_t *)&qword_1002AB150);
  sub_1001794F8(v86, v87, v88, v86);
  swift_bridgeObjectRelease();
  sub_100179550();
  sub_10000E594();
  sub_1001794B0(93);
  sub_10000E4E0();
}

void sub_100176F58(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100176F90()
{
  return 0x656369766564;
}

uint64_t sub_100177088(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001770B8 + 4 * byte_100228564[a1]))(0x6B636F6C63, 0xE500000000000000);
}

uint64_t sub_1001770B8()
{
  return 0x656369766564;
}

uint64_t sub_1001770CC()
{
  return 0x4C79616C70736964;
}

uint64_t sub_1001770F0()
{
  return 0x65446465636E7973;
}

uint64_t sub_10017714C()
{
  return 0x6769666E6F63;
}

uint64_t sub_100177160()
{
  return 0x7972616E6163;
}

uint64_t sub_100177174()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100177194();
  qword_1002B36A8 = result;
  unk_1002B36B0 = v1;
  return result;
}

uint64_t sub_100177194()
{
  uint64_t result;
  void *v1;
  id v2;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  result = (uint64_t)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (kCFBundleVersionKey)
  {
    v1 = (void *)result;
    v2 = objc_msgSend((id)result, "objectForInfoDictionaryKey:");

    if (v2)
    {
      _bridgeAnyObjectToAny(_:)(v4, v2);
      swift_unknownObjectRelease(v2);
    }
    else
    {
      memset(v4, 0, sizeof(v4));
    }
    sub_10005FA70((uint64_t)v4, (uint64_t)v5, &qword_1002B34C0);
    if (v6)
    {
      if (swift_dynamicCast(&v3, v5, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        return v3;
    }
    else
    {
      sub_10000E36C((uint64_t)v5, &qword_1002B34C0);
    }
    return 0x35322E3533353536;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001772A8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002810C0, v2);
  sub_10000E410();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_1001772F0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 1668184435 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1668184435, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_100177364()
{
  return 1668184435;
}

void sub_100177374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[4];
  __int16 v100;
  char v101;
  uint64_t v102;
  _QWORD v103[4];

  sub_10003AFC4();
  a22 = v30;
  a23 = v31;
  v95 = v25;
  v98 = v24;
  v33 = v32;
  v94 = sub_1000055B0(&qword_1002B3990);
  v92 = *(_QWORD *)(v94 - 8);
  sub_1000262EC();
  __chkstk_darwin(v34);
  sub_10000E478();
  v82 = sub_1000055B0((uint64_t *)&unk_1002B1E00);
  sub_10000E490();
  __chkstk_darwin(v35);
  sub_100124184();
  v86 = sub_1000055B0((uint64_t *)&unk_1002B1DF0);
  sub_10000E490();
  __chkstk_darwin(v36);
  sub_1000F0204();
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v37);
  sub_1000268CC();
  v38 = sub_1000055B0(&qword_1002B3998);
  v88 = *(_QWORD *)(v38 - 8);
  sub_1000262EC();
  __chkstk_darwin(v39);
  sub_100065E48();
  v41 = v33[3];
  v40 = v33[4];
  sub_10000DBE4(v33, v41);
  v42 = sub_100178D60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SyncMessage.CodingKeys, &type metadata for SyncMessage.CodingKeys, v42, v41, v40);
  sub_100178BCC(v98, v26);
  v43 = *(_QWORD *)v26;
  a10 = *(unsigned __int8 *)(v26 + 40);
  v97 = *(_QWORD *)(v26 + 48);
  sub_1000055B0(&qword_1002B1430);
  sub_1001799B4();
  v85 = *(_BYTE *)(v44 + 32);
  v91 = *(_QWORD *)(v44 + 40);
  sub_1001799B4();
  v84 = *(_BYTE *)(v45 + 32);
  v89 = *(_QWORD *)(v45 + 40);
  v90 = *(_QWORD *)(v45 + 48);
  sub_1001799B4();
  v83 = *(_BYTE *)(v46 + 32);
  v47 = *(_QWORD *)(v46 + 40);
  v87 = *(_QWORD *)(v46 + 48);
  v96 = *(_QWORD *)(v46 + 56);
  v49 = v26 + *(int *)(v48 + 128);
  v50 = (uint64_t *)(v26 + *(int *)(v48 + 144));
  v81 = *v50;
  v80 = v50[1];
  sub_1001799B4();
  v79 = *(_WORD *)(v51 + 32);
  v78 = *(_BYTE *)(v51 + 34);
  v98 = v23;
  sub_10005FA70(v52, v23, (uint64_t *)&unk_1002B1DF0);
  sub_10005FA70(v49, v29, (uint64_t *)&unk_1002B1E00);
  sub_100178D9C();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SyncMessage.SyncCodingKeys, v53, v38, &type metadata for SyncMessage.SyncCodingKeys);
  v93 = v43;
  v99[0] = v43;
  a13 = 0;
  v54 = sub_100179738();
  sub_10002599C(&qword_1002B39A0, &qword_1002B3920);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v99, &a13, v94, v54, v55);
  if (v25)
  {
    sub_100179B24();
    sub_10017994C();
    sub_1000FB3FC(v47);
    sub_100179840();
    v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v27, v94);
    sub_100179B1C(v56, (uint64_t *)&unk_1002B1E00);
    sub_10017974C(v57, (uint64_t *)&unk_1002B1DF0);
    sub_1001795B0(v28, *(uint64_t (**)(uint64_t, uint64_t))(v88 + 8));
    swift_bridgeObjectRelease();
  }
  else
  {
    v95 = v28;
    swift_bridgeObjectRelease();
    sub_100179A80((uint64_t)&a20);
    sub_1001798B8((uint64_t)&a18);
    LOBYTE(v100) = a10;
    v102 = v97;
    a13 = 1;
    v58 = sub_100179738();
    sub_1001797AC(&qword_1002B39A8);
    v59 = sub_1001796FC();
    sub_100179730(v59, v60, v61, v58, v62);
    LOBYTE(v99[0]) = 2;
    sub_10002599C(&qword_1002B39B0, (uint64_t *)&unk_1002B1DF0);
    sub_100179730(v98, (uint64_t)v99, (uint64_t)&qword_1002B3930, v86, v63);
    sub_100179A80((uint64_t)&a14);
    sub_1001798B8((uint64_t)&a9);
    LOBYTE(v100) = v85;
    v102 = v91;
    a13 = 3;
    v64 = sub_100179738();
    sub_1001797AC(&qword_1002B39B8);
    v65 = sub_1001796FC();
    sub_100179730(v65, v66, v67, v64, v68);
    v93 = v38;
    swift_bridgeObjectRelease();
    sub_100179A80((uint64_t)v103);
    sub_1001798B8((uint64_t)&v100);
    LOBYTE(v100) = v84;
    v102 = v89;
    v103[0] = v90;
    a13 = 4;
    sub_100179738();
    sub_1001797AC(&qword_1002B39C0);
    sub_100179654(v69);
    sub_100179B04();
    sub_100179A80((uint64_t)v99);
    sub_1001798B8((uint64_t)&v97);
    LOBYTE(v100) = v83;
    v102 = v47;
    v103[0] = v87;
    v103[1] = v96;
    a13 = 5;
    sub_100179738();
    sub_10002599C(&qword_1002B39C8, &qword_1002B3968);
    sub_100179654(v70);
    sub_100179888();
    LOBYTE(v99[0]) = 6;
    sub_10002599C(&qword_1002B39D0, (uint64_t *)&unk_1002B1E00);
    sub_100179730(v29, (uint64_t)v99, v94, v82, v71);
    v99[0] = v81;
    v99[1] = v80;
    sub_1001798B8((uint64_t)&v91);
    v100 = v79;
    v101 = v78;
    a13 = 7;
    v72 = sub_1000055B0(&qword_1002B3980);
    sub_10002599C(qword_1002B39D8, &qword_1002B3980);
    v73 = sub_1001796FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v73, v74, v75, v72, v76);
    sub_100179840();
    sub_1001798F4();
    sub_10000E36C(v29, (uint64_t *)&unk_1002B1E00);
    sub_10017974C(v77, (uint64_t *)&unk_1002B1DF0);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v28, v38);
  }
  sub_10003AF60();
}

void sub_100177BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_10003AFC4();
  a26 = v29;
  a27 = v30;
  v32 = v31;
  v68 = v33;
  v70 = type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v34);
  sub_10000E5DC();
  v69 = v35;
  v36 = sub_1000055B0(&qword_1002B3900);
  __chkstk_darwin(v36);
  sub_1000268CC();
  v37 = sub_1000055B0(&qword_1002B3908);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  sub_100065E48();
  v39 = v32[3];
  v40 = v32[4];
  sub_10000DBE4(v32, v39);
  v41 = sub_100178D60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SyncMessage.CodingKeys, &type metadata for SyncMessage.CodingKeys, v41, v39, v40);
  if (!v27)
  {
    v67 = v36;
    v42 = KeyedDecodingContainer.allKeys.getter(v37);
    v43 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      sub_1000EDBD0(1, v43, v42, v42 + 32, 0, (2 * v43) | 1);
      v45 = v44;
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = v70;
      if (v45 == v47 >> 1)
      {
        sub_100178D9C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SyncMessage.SyncCodingKeys, v49, v37, &type metadata for SyncMessage.SyncCodingKeys);
        v56 = sub_10003B038();
        a17 = 0;
        sub_100179800(&qword_1002B3928);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v56, &a17, v67, v56);
        v57 = sub_1000055B0(&qword_1002B3930);
        a16 = 1;
        sub_10002599C(&qword_1002B3938, &qword_1002B3930);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v57, &a16, v67, v57);
        v71 = sub_1000055B0(&qword_1002B1430);
        v58 = sub_1000055B0((uint64_t *)&unk_1002B1DF0);
        a15 = 2;
        sub_10002599C(&qword_1002B3940, (uint64_t *)&unk_1002B1DF0);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v58, &a15, v67, v58);
        sub_10003B038();
        a14 = 3;
        sub_100179800(&qword_1002B3950);
        sub_100179534(v59, (uint64_t)&a14);
        sub_10003B038();
        a13 = 4;
        sub_100179800(&qword_1002B3960);
        sub_100179534(v60, (uint64_t)&a13);
        sub_10003B038();
        a12 = 5;
        sub_100179800(&qword_1002B3970);
        sub_100179534(v61, (uint64_t)&a12);
        v62 = sub_1000055B0((uint64_t *)&unk_1002B1E00);
        a11 = 6;
        sub_10002599C(&qword_1002B3978, (uint64_t *)&unk_1002B1E00);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v62, &a11, v67, v62);
        v63 = (_QWORD *)(v69 + *(int *)(v71 + 144));
        v64 = sub_1000055B0(&qword_1002B3980);
        a10 = 7;
        sub_10002599C(&qword_1002B3988, &qword_1002B3980);
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v63, v64, &a10, v67, v64, v65, v66);
        sub_100179878();
        sub_100012644();
        sub_100179770();
        sub_1000FA720(v69, v68);
        goto LABEL_7;
      }
    }
    else
    {
      v48 = v70;
    }
    v50 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v50, (uint64_t)&protocol witness table for DecodingError);
    v52 = v51;
    sub_1000055B0(&qword_1002ABBD0);
    *v52 = v48;
    v53 = KeyedDecodingContainer.codingPath.getter(v37);
    sub_1000A36F0(v53, v54, 0x8000000100253AD0);
    v55 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, enum case for DecodingError.typeMismatch(_:), v50);
    swift_willThrow(v55);
    sub_100012644();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v28, v37);
  }
LABEL_7:
  sub_100005988(v32);
  sub_10003AF60();
}

void sub_100178280(char *a1)
{
  sub_10008B498(*a1);
}

void sub_10017828C()
{
  unsigned __int8 *v0;

  sub_1000E794C(*v0);
}

void sub_100178294(uint64_t a1)
{
  char *v1;

  sub_1000E7A5C(a1, *v1);
}

void sub_10017829C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000E7B68(a1, *v1);
}

unint64_t sub_1001782A4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001772A8(*a1);
  *a2 = result;
  return result;
}

void sub_1001782D0(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_100177088(*v1);
  a1[1] = v3;
  sub_1000050D4();
}

void sub_1001782F4()
{
  char *v0;

  sub_100176F58(*v0);
}

uint64_t sub_1001782FC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001772EC(a1);
  *a2 = result;
  return result;
}

void sub_100178320(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10017832C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100178D9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100178354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100178D9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100178380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001772F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001783A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100178D60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001783D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100178D60();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100178400: call analysis failed (funcsize=5)"

#error "100178414: call analysis failed (funcsize=5)"

void sub_100178420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_10013FC28(&qword_1002B38F8, type metadata accessor for SyncMessage);
  *(_QWORD *)(a1 + 8) = v2;
  sub_10013FC28(&qword_1002AF5B0, type metadata accessor for SyncMessage);
  *(_QWORD *)(a1 + 16) = v3;
}

void sub_10017847C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  _OWORD v33[3];
  _OWORD v34[4];
  _OWORD v35[3];
  _OWORD v36[3];
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;

  sub_10002626C();
  sub_100179738();
  sub_10000E490();
  __chkstk_darwin(v3);
  sub_1000268CC();
  sub_1000055B0((uint64_t *)&unk_1002B1DF0);
  sub_10000E490();
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_100065E48();
  sub_100178BCC(v0, v2);
  v8 = *(_OWORD *)(v2 + 24);
  v35[0] = *(_OWORD *)(v2 + 8);
  v35[1] = v8;
  v35[2] = *(_OWORD *)(v2 + 40);
  v9 = (int *)sub_1000055B0(&qword_1002B1430);
  v10 = v2 + v9[16];
  v11 = (_OWORD *)(v2 + v9[20]);
  v12 = v11[1];
  v33[0] = *v11;
  v33[1] = v12;
  v33[2] = v11[2];
  v13 = v2 + v9[24];
  v14 = *(_OWORD *)(v13 + 16);
  v36[0] = *(_OWORD *)v13;
  v36[1] = v14;
  v36[2] = *(_OWORD *)(v13 + 32);
  v37 = *(_QWORD *)(v13 + 48);
  v15 = (_OWORD *)(v2 + v9[28]);
  v16 = v15[1];
  v34[0] = *v15;
  v34[1] = v16;
  v17 = v15[3];
  v34[2] = v15[2];
  v34[3] = v17;
  v18 = v2 + v9[32];
  v19 = *(unsigned __int8 *)(v2 + v9[36] + 34);
  sub_10005FA70(v10, (uint64_t)v6, (uint64_t *)&unk_1002B1DF0);
  sub_10005FA70(v18, v1, (uint64_t *)&unk_1002B1E00);
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(115);
  v20._countAndFlagsBits = 0x27203A6B636F6C63;
  v20._object = (void *)0xE800000000000000;
  String.append(_:)(v20);
  sub_10016F9F8();
  v22 = v21;
  v24 = v23;
  sub_1000267C4();
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  sub_10002D89C();
  v26._countAndFlagsBits = 0x69666E6F63202C27;
  v26._object = (void *)0xEB00000000203A67;
  String.append(_:)(v26);
  sub_100176080();
  sub_10017955C(v38);
  sub_1000267C4();
  sub_1001796E4(0x6E6E6F63202CLL);
  v39._countAndFlagsBits = sub_100175410();
  sub_10017955C(v39);
  sub_1000267C4();
  sub_100178C10((uint64_t)v36);
  sub_100179978(0x656369766564202CLL);
  v40._countAndFlagsBits = sub_1001747B4();
  sub_10017955C(v40);
  sub_1000267C4();
  v27._object = (void *)0x8000000100258DD0;
  v27._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v27);
  sub_100176080();
  sub_10017955C(v41);
  sub_1000267C4();
  v28._countAndFlagsBits = 0x766544637273202CLL;
  v28._object = (void *)0xED0000203A656369;
  String.append(_:)(v28);
  v42._countAndFlagsBits = sub_100173B28();
  sub_10017955C(v42);
  sub_1000267C4();
  sub_100178C3C((uint64_t)v34);
  sub_1001796E4(0x636E7973202CLL);
  v43._countAndFlagsBits = sub_100172EC8();
  sub_10017955C(v43);
  sub_1000267C4();
  sub_100178C68((uint64_t)v33);
  sub_100179978(0x7972616E6163202CLL);
  if (v19)
    v29 = 0x65736C6166;
  else
    v29 = 1702195828;
  if (v19)
    v30 = 0xE500000000000000;
  else
    v30 = 0xE400000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  sub_1000267C4();
  sub_100178C90((uint64_t)v35);
  sub_10000E36C(v1, (uint64_t *)&unk_1002B1E00);
  sub_10000E36C((uint64_t)v6, (uint64_t *)&unk_1002B1DF0);
  sub_10000E4E0();
}

uint64_t sub_100178820()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100178844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[113];
  uint64_t v23;
  uint64_t v24;
  _BYTE __dst[118];
  _BYTE __src[114];

  sub_10005FA70(a4, (uint64_t)__src, &qword_1002B1EF0);
  if ((__src[113] & 1) != 0)
  {
    swift_beginAccess(a7 + 16, __dst, 33, 0);
    swift_bridgeObjectRetain(a3);
    sub_1000CA684();
    v13 = *(_QWORD *)(*(_QWORD *)(a7 + 16) + 16);
    sub_1000CA724(v13);
    v14 = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(v14 + 16) = v13 + 1;
    v15 = v14 + 16 * v13;
  }
  else
  {
    memcpy(__dst, __src, 0x71uLL);
    swift_getAtKeyPath(__dst, a1);
    v16 = v23;
    v17 = v24;
    memcpy(v22, a5, sizeof(v22));
    swift_getAtKeyPath(v22, a1);
    result = static UniversalControlUUID.compare(lhs:rhs:)(v16, v17);
    if (!result)
      return result;
    v19 = (uint64_t *)(a6 + 16);
    swift_beginAccess(v19, __dst, 33, 0);
    swift_bridgeObjectRetain(a3);
    sub_1000CA684();
    v20 = *(_QWORD *)(*v19 + 16);
    sub_1000CA724(v20);
    v21 = *v19;
    *(_QWORD *)(v21 + 16) = v20 + 1;
    v15 = v21 + 16 * v20;
  }
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  return swift_endAccess(__dst);
}

uint64_t sub_1001789A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE __dst[118];
  _BYTE __src[114];

  sub_10005FA70(a4, (uint64_t)__src, &qword_1002B1EF0);
  if ((__src[113] & 1) != 0)
  {
    swift_beginAccess(a7 + 16, __dst, 33, 0);
    swift_bridgeObjectRetain(a3);
    sub_1000CA684();
    v13 = *(_QWORD *)(*(_QWORD *)(a7 + 16) + 16);
    sub_1000CA724(v13);
    v14 = v13 + 1;
    v15 = *(_QWORD *)(a7 + 16);
LABEL_6:
    *(_QWORD *)(v15 + 16) = v14;
    v18 = v15 + 16 * v13;
    *(_QWORD *)(v18 + 32) = a2;
    *(_QWORD *)(v18 + 40) = a3;
    return swift_endAccess(__dst);
  }
  memcpy(__dst, __src, 0x71uLL);
  result = swift_getAtKeyPath(__dst, a1);
  if ((v21 & 1) == 0)
  {
    memcpy(__dst, a5, 0x71uLL);
    swift_getAtKeyPath(__dst, a1);
    result = static UniversalControlUUID.compare(lhs:rhs:)(v19, v20);
    if (result)
    {
      v17 = (uint64_t *)(a6 + 16);
      swift_beginAccess(v17, __dst, 33, 0);
      swift_bridgeObjectRetain(a3);
      sub_1000CA684();
      v13 = *(_QWORD *)(*v17 + 16);
      sub_1000CA724(v13);
      v14 = v13 + 1;
      v15 = *v17;
      goto LABEL_6;
    }
  }
  return result;
}

void sub_100178B04()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100179984();
  *v0 = v1;
  sub_1000050D4();
}

void sub_100178B20()
{
  sub_10009999C();
  sub_1000050D4();
}

void sub_100178B3C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100179990();
  *v0 = v1;
  sub_1000050D4();
}

void sub_100178B58()
{
  uint64_t *v0;
  uint64_t v1;

  *v0 = sub_10017999C();
  v0[1] = v1;
  sub_1000050D4();
}

void sub_100178B74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001799A8();
  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
  sub_1000050D4();
}

void sub_100178B94()
{
  sub_100099908();
  sub_1000050D4();
}

void sub_100178BB0(uint64_t a1)
{
  CGSize.init(_:)(a1);
  sub_1000050D4();
}

uint64_t sub_100178BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100178C10(uint64_t a1)
{
  sub_1000FB3C0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t sub_100178C3C(uint64_t a1)
{
  sub_1000FB3FC(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178C68(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178C90(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178CB8(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178CE0(uint64_t a1)
{
  sub_1000FB3EC(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178D0C(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100178D34(uint64_t a1)
{
  sub_1000FB394(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

unint64_t sub_100178D60()
{
  unint64_t result;

  result = qword_1002B3910;
  if (!qword_1002B3910)
  {
    result = swift_getWitnessTable(&unk_100229098, &type metadata for SyncMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3910);
  }
  return result;
}

unint64_t sub_100178D9C()
{
  unint64_t result;

  result = qword_1002B3918;
  if (!qword_1002B3918)
  {
    result = swift_getWitnessTable(&unk_100229048, &type metadata for SyncMessage.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3918);
  }
  return result;
}

uint64_t type metadata accessor for SyncValue.DataCodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncValue.DataCodingKeys);
}

uint64_t type metadata accessor for SyncValue.NoneCodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncValue.NoneCodingKeys);
}

uint64_t type metadata accessor for SyncValue.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncValue.CodingKeys);
}

uint64_t type metadata accessor for SyncAtom.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SyncAtom.CodingKeys);
}

uint64_t sub_100178E08(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100178E54 + 4 * byte_100228571[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100178E88 + 4 * byte_10022856C[v4]))();
}

uint64_t sub_100178E88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178E90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100178E98);
  return result;
}

uint64_t sub_100178EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100178EACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100178EB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178EB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178EC4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100178F10 + 4 * byte_10022857B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100178F44 + 4 * byte_100228576[v4]))();
}

uint64_t sub_100178F44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100178F54);
  return result;
}

uint64_t sub_100178F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100178F68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100178F6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178F74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100178F84(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100178FC4 + 4 * byte_100228580[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100178FE4 + 4 * byte_100228585[v4]))();
}

_BYTE *sub_100178FC4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100178FE4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100178FEC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100178FF4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100178FFC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100179004(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SyncMessage.CodingKeys()
{
  return &type metadata for SyncMessage.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SyncMessage.SyncCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10017906C + 4 * byte_10022858F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001790A0 + 4 * byte_10022858A[v4]))();
}

uint64_t sub_1001790A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001790A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001790B0);
  return result;
}

uint64_t sub_1001790BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001790C4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001790C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001790D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncMessage.SyncCodingKeys()
{
  return &type metadata for SyncMessage.SyncCodingKeys;
}

unint64_t sub_1001790F0()
{
  unint64_t result;

  result = qword_1002B3BE0;
  if (!qword_1002B3BE0)
  {
    result = swift_getWitnessTable(&unk_100228BB0, &type metadata for SyncMessage.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3BE0);
  }
  return result;
}

unint64_t sub_100179130()
{
  unint64_t result;

  result = qword_1002B3BE8;
  if (!qword_1002B3BE8)
  {
    result = swift_getWitnessTable(&unk_100228C68, &type metadata for SyncMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3BE8);
  }
  return result;
}

uint64_t sub_10017916C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228D20, a1);
}

uint64_t sub_10017917C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228E28, a1);
}

uint64_t sub_10017918C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228EE0, a1);
}

uint64_t sub_10017919C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228E50, a1);
}

uint64_t sub_1001791AC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228E78, a1);
}

uint64_t sub_1001791BC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228D98, a1);
}

uint64_t sub_1001791CC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228DC0, a1);
}

uint64_t sub_1001791DC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228D48, a1);
}

uint64_t sub_1001791EC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228D70, a1);
}

uint64_t sub_1001791FC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228C90, a1);
}

uint64_t sub_10017920C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100228CB8, a1);
}

unint64_t sub_100179220()
{
  unint64_t result;

  result = qword_1002B3BF0;
  if (!qword_1002B3BF0)
  {
    result = swift_getWitnessTable(&unk_100228AE8, &type metadata for SyncMessage.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3BF0);
  }
  return result;
}

unint64_t sub_100179260()
{
  unint64_t result;

  result = qword_1002B3BF8;
  if (!qword_1002B3BF8)
  {
    result = swift_getWitnessTable(&unk_100228B10, &type metadata for SyncMessage.SyncCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3BF8);
  }
  return result;
}

unint64_t sub_1001792A0()
{
  unint64_t result;

  result = qword_1002B3C00;
  if (!qword_1002B3C00)
  {
    result = swift_getWitnessTable(&unk_100228BD8, &type metadata for SyncMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3C00);
  }
  return result;
}

unint64_t sub_1001792E0()
{
  unint64_t result;

  result = qword_1002B3C08;
  if (!qword_1002B3C08)
  {
    result = swift_getWitnessTable(&unk_100228C00, &type metadata for SyncMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3C08);
  }
  return result;
}

void sub_10017931C()
{
  sub_1000776AC();
}

uint64_t sub_100179334@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = v1;
  return UUID.init(uuid:)(*(_QWORD *)(v2 - 344), *(_QWORD *)(v2 - 400), *(_QWORD *)(v2 - 392), *(_QWORD *)(v2 - 352), *(_QWORD *)(v2 - 360), *(_QWORD *)(v2 - 368), *(_QWORD *)(v2 - 376), *(unsigned int *)(v2 - 380));
}

uint64_t sub_1001793A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  *(_QWORD *)(v2 - 96) = v1;
  return UUID.init(uuid:)(*(_QWORD *)(v2 - 304), *(_QWORD *)(v2 - 360), *(_QWORD *)(v2 - 352), *(_QWORD *)(v2 - 312), *(_QWORD *)(v2 - 320), *(_QWORD *)(v2 - 328), *(_QWORD *)(v2 - 336), *(unsigned int *)(v2 - 340));
}

void sub_100179414()
{
  Swift::String v0;

  v0._countAndFlagsBits = 39;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100179480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_100179490()
{
  sub_1000776AC();
}

void sub_1001794B0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001794F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v4, a4);
}

uint64_t sub_100179508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return sub_100178844(a1, a2, a3, v7, a5, v6, v5);
}

uint64_t sub_100179518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_100179528()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

uint64_t sub_100179534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v2, a2, v3, v2);
}

void sub_100179550()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_10017955C(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10017959C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 320))(v0, *(_QWORD *)(v1 - 136));
}

uint64_t sub_1001795B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1001795B8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 280))(v0, *(_QWORD *)(v1 - 120));
}

void sub_1001795F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10000E36C(*(_QWORD *)(v2 - 496), a2);
}

uint64_t sub_100179604()
{
  uint64_t v0;

  return sub_1000FB3FC(*(_QWORD *)(v0 - 504));
}

uint64_t sub_100179618@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return sub_100178BCC(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_100179638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000FB3FC(a1);
  return sub_1000FB3C0(v2, v1);
}

uint64_t sub_100179654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 160, v3 - 65, v2, v1, a1);
}

uint64_t sub_10017967C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100179698()
{
  uint64_t v0;
  uint64_t v1;

  return BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v1, v0);
}

uint64_t sub_1001796B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a4(a1, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_1001796CC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_1001796E4(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFFFFFFFFFFLL | 0x6544000000000000;
  v1._object = (void *)0xEF203A7365636976;
  String.append(_:)(v1);
}

uint64_t sub_1001796FC()
{
  uint64_t v0;

  return v0 - 160;
}

uint64_t sub_100179710()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100179730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100179738()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

void sub_100179740()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8250;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

void sub_10017974C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10000E36C(*(_QWORD *)(v2 - 168), a2);
}

void *sub_100179754(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x71uLL);
}

void sub_10017975C()
{
  sub_1001728AC();
}

uint64_t sub_100179770()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 96) + 8))(v0, *(_QWORD *)(v1 - 192));
}

uint64_t sub_100179784@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_100179798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(uint64_t, uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  a3 = v8;
  a4 = a2;
  a5 = v9;
  a6 = a1;
  return v6(v7, &a3);
}

void sub_1001797AC(unint64_t *a1)
{
  uint64_t *v1;

  sub_10002599C(a1, v1);
}

uint64_t sub_1001797B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 248) + 8))(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 208));
}

uint64_t sub_1001797CC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(*(_QWORD *)(v1 + 104), a1);
}

void sub_1001797E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 91;
  *(_QWORD *)(v0 - 112) = 0xE100000000000000;
}

uint64_t sub_1001797F0()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getAtKeyPath(v0 + 88, v1);
}

void sub_100179800(unint64_t *a1)
{
  uint64_t *v1;

  sub_10002599C(a1, v1);
}

uint64_t sub_100179808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 128));
}

void sub_100179818()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_100179828(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0x2727203A56;
  *(_QWORD *)(a1 + 40) = 0xE500000000000000;
}

uint64_t sub_100179840()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 176));
}

uint64_t sub_100179848()
{
  uint64_t v0;

  return sub_1000FB3FC(*(_QWORD *)(*(_QWORD *)(v0 - 176) + 40));
}

void sub_100179858(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10000E36C(v2, a2);
}

uint64_t sub_100179860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v0;
  return 255;
}

uint64_t sub_100179878()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 136) + 8))(*(_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 144));
}

uint64_t sub_100179888()
{
  uint64_t v0;

  return sub_1000FB3FC(v0);
}

void sub_100179898(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v2;
}

void sub_1001798A8()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_1001798B8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 - 256);
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v3;
}

uint64_t sub_1001798C4()
{
  uint64_t v0;

  return sub_1000FB3FC(v0);
}

uint64_t sub_1001798D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v4, 1, 1, a4);
}

void sub_1001798E4(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_10013FC28(a1, v1);
}

void sub_1001798EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001798F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_100179910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100179920()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_100179930()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100006FCC(*(_QWORD *)(v0 + 32), v1, (uint64_t *)(v0 + 232));
}

uint64_t sub_10017994C()
{
  uint64_t v0;

  return sub_1000FB3C0(*(_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 232));
}

void sub_100179954()
{
  Swift::String v0;

  v0._countAndFlagsBits = 5972026;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
}

void sub_100179978(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xEA0000000000203ALL;
  String.append(_:)(*(Swift::String *)&a1);
}

double sub_100179984()
{
  return sub_100099978();
}

double sub_100179990()
{
  return sub_100099A14();
}

uint64_t sub_10017999C()
{
  return sub_100099938();
}

double sub_1001799A8()
{
  return sub_1000999DC();
}

void sub_1001799B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

void sub_1001799C0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1001799DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UUID.init(uuid:)(a1, a2, a3, a4, *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 168));
}

uint64_t sub_1001799E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1001799F4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v0 - 160) + 40));
}

uint64_t sub_100179A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UUID.init(uuid:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100179A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UUID.init(uuid:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100179A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v3;
  return 255;
}

uint64_t sub_100179A2C(uint64_t *a1)
{
  return sub_100063434(a1);
}

uint64_t sub_100179A34()
{
  uint64_t v0;

  return type metadata accessor for SyncAtom.CodingKeys(255, v0 - 112);
}

uint64_t sub_100179A40()
{
  uint64_t v0;

  return type metadata accessor for SyncValue(0, v0 - 112);
}

uint64_t sub_100179A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return UUID.init(uuid:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 - 200), *(_QWORD *)(v5 - 192), *(_QWORD *)(v5 - 184));
}

uint64_t sub_100179A6C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 128));
}

uint64_t sub_100179A74()
{
  return 0;
}

__n128 sub_100179A80@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(a1 - 256);
  *(__n128 *)(v1 - 160) = result;
  return result;
}

uint64_t sub_100179AA0(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

void sub_100179AA8(unint64_t *a1)
{
  uint64_t *v1;

  sub_10002599C(a1, v1);
}

uint64_t sub_100179AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return UUID.init(uuid:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 - 232), *(_QWORD *)(v5 - 224), *(_QWORD *)(v5 - 216));
}

uint64_t sub_100179AD0()
{
  uint64_t v0;

  return sub_1000FB3C0(*(_QWORD *)(*(_QWORD *)(v0 - 168) + 40), *(_QWORD *)(*(_QWORD *)(v0 - 168) + 48));
}

uint64_t sub_100179ADC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
  return v1 + 160;
}

uint64_t sub_100179AF0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 112));
}

uint64_t sub_100179AF8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100179B04()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000FB3C0(v0, v1);
}

void sub_100179B10()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_100179B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10000E36C(v2, a2);
}

uint64_t sub_100179B24()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 224));
}

void sub_100179B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  sub_1000050D4();
}

void EnsembleHIDController.__allocating_init()()
{
  uint64_t v0;

  sub_1000088D8(v0, 192);
  EnsembleHIDController.init()();
  sub_1000050D4();
}

uint64_t sub_100179BD8(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_100179BE8(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

uint64_t EnsembleHIDController.updateDevice(_:)(uint64_t a1)
{
  uint64_t v1;

  sub_10017E5A0();
  HIDVirtualServicePool.updateInputDevices(for:)(a1);
  return sub_1000955AC(v1);
}

uint64_t EnsembleHIDController.removeDevice(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v11 = a1 >> 16;
  v12 = a1 >> 8;
  v9 = HIDWORD(a1);
  v10 = a1 >> 24;
  v7 = HIWORD(a1);
  v8 = a1 >> 40;
  v6 = HIBYTE(a1);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000268CC();
  sub_10017E5A0();
  UUID.init(uuid:)(a1, v12, v11, v10, v9, v8, v7, v6);
  HIDVirtualServicePool.removeInputDevices(for:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return sub_10000B348();
}

void EnsembleHIDController.enabledDeviceTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  sub_10000B2F8(v1 + 56, (uint64_t)v4, 1);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  sub_10017A520(v3);
  sub_10000E594();
  sub_10000B338();
}

uint64_t EnsembleHIDController.setMaskState(filterMask:copyMask:notifyMask:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL8 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  void (*v52)(uint64_t, unint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63[3];

  v5 = v4;
  if (v4[8] == a1 && v4[9] == a2 && v4[10] == a3)
    return Completion.callAsFunction(_:)(0);
  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v10 = sub_10000F6E4();
  v11 = sub_100006FB4(v10, (uint64_t)qword_1002B3C10);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = sub_10000797C(32);
    *(_DWORD *)v15 = 134218496;
    v63[0] = a1;
    v21 = sub_10017E5F0(v15, v16, v15 + 4, v15 + 12, v17, v18, v19, v20, v55, v58, v59);
    *(_WORD *)(v15 + 12) = 2048;
    v63[0] = a2;
    v27 = sub_10017E5F0(v21, v22, v15 + 14, v15 + 22, v23, v24, v25, v26, v56, v58, v59);
    *(_WORD *)(v15 + 22) = 2048;
    v63[0] = a3;
    sub_10017E5F0(v27, v28, v15 + 24, v15 + 32, v29, v30, v31, v32, v57, v58, v59);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "set masks: filter=%lx copy=%lx notify=%lx", (uint8_t *)v15, 0x20u);
    sub_100007958(v15);
  }

  v33 = static ReportID.appleVendorKeyboard.getter();
  v34 = (HIDEventType.maskValue.getter(v33) & a1) != 0;
  v35 = static ReportID.translation.getter();
  v36 = static ReportID.button.getter();
  v37 = static ReportID.dockSwipe.getter();
  HIDEventType.maskValue.getter(v35);
  v38 = HIDEventType.maskValue.getter(v35);
  if ((HIDEventType.maskValue.getter(v36) & v38) == 0)
    v38 |= HIDEventType.maskValue.getter(v36);
  if ((HIDEventType.maskValue.getter(v37) & v38) == 0)
    v38 |= HIDEventType.maskValue.getter(v37);
  if ((v38 & a1) != 0)
    v39 = v34 | 2;
  else
    v39 = v34;
  if (v5[22] != v39)
    sub_10017A9BC(v39);
  v40 = sub_10005FE28((uint64_t)(v5 + 17), (uint64_t)v63);
  if (!*(_QWORD *)(v5[17] + 16))
  {
    v47 = Logger.logObject.getter(v40);
    v49 = static os_log_type_t.default.getter(v47, v48);
    if (os_log_type_enabled(v47, v49))
    {
      v50 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v49, "set masks: no input hardware, skipping", v50, 2u);
      sub_100007958((uint64_t)v50);
    }

    return Completion.callAsFunction(_:)(0);
  }
  ServiceFilterFlags.maskChanged.unsafeMutableAddressor();
  ServiceFilterReport.init(_:filterMask:copyMask:notifyMask:)();
  v60 = v41;
  v61 = v42;
  v62 = v43;
  v44 = v5[17];
  v45 = type metadata accessor for CompletionGroup();
  v46 = sub_1000088D8(v45, 32);
  sub_10002D790();
  swift_bridgeObjectRetain(v44);
  swift_retain(a4);
  sub_1000C4FC0(v44, 0xD000000000000064, 0x8000000100258E10, 104, a4, v46, (uint64_t)v5, &v60);
  swift_release();
  if (v5[8] != a1)
  {
    sub_10005FE28((uint64_t)(v5 + 3), (uint64_t)&v58);
    v52 = (void (*)(uint64_t, unint64_t, uint64_t))v5[3];
    v53 = v60;
    v54 = v61;
    sub_1000088D0();
    sub_10002517C(v53, v54);
    v52(v53, v54, -1);
    sub_1000E71F0();
    sub_10000B348();
  }
  v5[8] = a1;
  v5[9] = a2;
  v5[10] = a3;
  return sub_1000E71F0();
}

Swift::Void __swiftcall EnsembleHIDController.clearActivityNotificationMask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v2 = sub_10000F6E4();
  sub_100006FB4(v2, (uint64_t)qword_1002B3C10);
  v3 = sub_10002D790();
  v4 = (void *)Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (sub_100040394(v5))
  {
    v6 = (_DWORD *)sub_10000797C(12);
    *v6 = 134217984;
    sub_10017E61C((uint64_t)v6, v7, (uint64_t)(v6 + 1), (uint64_t)(v6 + 3), v8);
    swift_release();
    sub_10017E5C8((void *)&_mh_execute_header, v9, v10, "clearing notify mask: old=%lx");
    sub_100007958((uint64_t)v6);

  }
  else
  {

    swift_release();
  }
  *(_QWORD *)(v1 + 80) = 0;
}

uint64_t EnsembleHIDController.assertVirtualMouseButtonDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  os_log_type_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)();
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 184);
  v3 = v2 + 1;
  do
  {
    v4 = v3;
    v3 = 1;
  }
  while (!v4);
  *(_QWORD *)(v0 + 184) = v4;
  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v5 = sub_10000F6E4();
  v6 = sub_100006FB4(v5, (uint64_t)qword_1002B3C10);
  v7 = (void *)Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (sub_100040394(v9))
  {
    v10 = (_DWORD *)sub_10000797C(12);
    *v10 = 134217984;
    sub_10017E61C((uint64_t)v10, v11, (uint64_t)(v10 + 1), (uint64_t)(v10 + 3), v12);
    sub_10017E5C8((void *)&_mh_execute_header, v13, v14, "assertVirtualMouseButtonDown: Begin (%ld)");
    sub_100007958((uint64_t)v10);
  }

  sub_10017CC54();
  if ((v15 & 1) != 0)
  {
    v16 = sub_1000088D8((uint64_t)&unk_10028EBB0, 32);
    *(_QWORD *)(v16 + 16) = v1;
    *(_QWORD *)(v16 + 24) = v2;
    v17 = type metadata accessor for AnyCancellable(0);
    sub_10004113C(v17);
    sub_10002D790();
    v18 = sub_10017E0CC;
    v19 = v16;
  }
  else
  {
    v20 = type metadata accessor for AnyCancellable(0);
    sub_10004113C(v20);
    v18 = (void (*)())CGSize.init(_:);
    v19 = 0;
  }
  return AnyCancellable.init(_:)(v18, v19);
}

Swift::Void __swiftcall EnsembleHIDController.resetGestureState()()
{
  uint64_t v0;

  sub_10017E5A0();
  HIDVirtualServicePool.resetGestureState()();
  sub_1000955AC(v0);
}

void sub_10017A364(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_10008B69C(*a1, *v2);
  sub_1000050D4();
}

void sub_10017A38C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_100179BD4(*a1, *v2);
  sub_1000050D4();
}

void sub_10017A3B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_100179B58(a1);
  *a2 = v3;
}

uint64_t sub_10017A3D8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B3C10);
  sub_100006FB4(v0, (uint64_t)qword_1002B3C10);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1145653334, 0xE400000000000000);
}

void EnsembleHIDController.controlHandler.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + 24, (uint64_t)v1);
  sub_1000088D0();
  sub_100015540();
}

void EnsembleHIDController.controlHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_10000B2F8(v2 + 24, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  swift_release();
  sub_10000B338();
}

void EnsembleHIDController.eventHandler.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + 40, (uint64_t)v1);
  sub_1000088D0();
  sub_100015540();
}

void EnsembleHIDController.eventHandler.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 40, a1, 33);
  sub_1000050D4();
}

uint64_t sub_10017A520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[7];
  _BYTE v29[24];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v2 + 56, v29, 0, 0);
  v12 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain(v12);
  sub_100198DA4(a1, v12);
  LOBYTE(a1) = v13;
  result = swift_bridgeObjectRelease(v12);
  if ((a1 & 1) == 0)
  {
    v15 = *(_QWORD *)(v2 + 56);
    swift_retain(*(_QWORD *)(v2 + 112));
    swift_bridgeObjectRetain(v15);
    HIDVirtualServicePool.enabledDeviceTypes.setter();
    result = swift_release();
    v16 = *(_QWORD *)(v2 + 104);
    if (*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16))
    {
      if (v16)
        return result;
      type metadata accessor for HIDVirtualService();
      static HIDVirtualService.basicMouseService(queue:)(*(void **)(v2 + 120));
      *(_QWORD *)(v2 + 104) = v23;
      swift_retain(v23);
      swift_release();
      HIDVirtualService.activate()();
    }
    else
    {
      if (v16)
      {
        v25 = *(_QWORD *)(v2 + 120);
        aBlock[4] = j___s11EnsembleHID17HIDVirtualServiceC6cancelyyF;
        aBlock[5] = v16;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10000E610;
        aBlock[3] = &unk_10028EEB8;
        v24 = _Block_copy(aBlock);
        v17 = swift_retain_n(v16, 2);
        static DispatchQoS.unspecified.getter(v17);
        v27 = _swiftEmptyArrayStorage;
        sub_100021264((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        v19 = v18;
        v20 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
        sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v5, v19);
        v22 = v24;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v24);
        _Block_release(v22);
        swift_release();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        swift_release();
      }
      *(_QWORD *)(v2 + 104) = 0;
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_10017A8C4()
{
  return 0xD000000000000028;
}

double EnsembleHIDController.enabledDeviceTypes.getter()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_10005FE28(v0 + 56, (uint64_t)v2);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void (*EnsembleHIDController.enabledDeviceTypes.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  sub_10005FE28(v1 + 56, (uint64_t)v3);
  v3[3] = *(_QWORD *)(v1 + 56);
  swift_bridgeObjectRetain();
  return sub_10017A96C;
}

void sub_10017A96C(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    EnsembleHIDController.enabledDeviceTypes.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    EnsembleHIDController.enabledDeviceTypes.setter(v3);
  }
  free(v2);
}

void sub_10017A9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint32_t v15;
  uint32_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  v2 = v1;
  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v4 = type metadata accessor for Logger(0);
  sub_100006FB4(v4, (uint64_t)qword_1002B3C10);
  v5 = swift_retain(v1);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v36[0] = v10;
    *(_DWORD *)v9 = 136446466;
    v11 = a1;
    v12 = *(_QWORD *)(v2 + 152);
    v13 = *(_QWORD *)(v2 + 160);
    swift_bridgeObjectRetain(v13);
    v35 = sub_100006FCC(v12, v13, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v9 + 4, v9 + 12);
    swift_release();
    v14 = v13;
    a1 = v11;
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 12) = 2048;
    v35 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v9 + 14, v9 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "%{public}s: publish filter notification: 0x%llu", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_beginAccess(v2 + 168, v36, 0, 0);
  v15 = notify_set_state(*(_DWORD *)(v2 + 168), a1);
  if (v15)
  {
    v16 = v15;
    v17 = swift_retain(v2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(18, -1);
      v21 = swift_slowAlloc(32, -1);
      v35 = v21;
      *(_DWORD *)v20 = 136446466;
      v33 = a1;
      v23 = *(_QWORD *)(v2 + 152);
      v22 = *(_QWORD *)(v2 + 160);
      swift_bridgeObjectRetain(v22);
      v34 = sub_100006FCC(v23, v22, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v20 + 4, v20 + 12);
      swift_release();
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v20 + 12) = 1024;
      LODWORD(v34) = v16;
      a1 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v20 + 14, v20 + 18);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: notify_set_state failed: %u", (uint8_t *)v20, 0x12u);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  v25 = *(_QWORD *)(v2 + 152);
  v24 = *(_QWORD *)(v2 + 160);
  v26 = String.utf8CString.getter(v25, v24);
  v27 = notify_post((const char *)(v26 + 32));
  swift_release();
  if (v27)
  {
    v28 = swift_retain(v2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(18, -1);
      v32 = swift_slowAlloc(32, -1);
      v35 = v32;
      *(_DWORD *)v31 = 136446466;
      swift_bridgeObjectRetain(v24);
      v34 = sub_100006FCC(v25, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v31 + 4, v31 + 12);
      swift_release();
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v31 + 12) = 1024;
      LODWORD(v34) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v31 + 14, v31 + 18);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s: notify_post failed: %u", (uint8_t *)v31, 0x12u);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  *(_QWORD *)(v2 + 176) = a1;
}

void sub_10017AE50(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Class isa;
  NSString v39;

  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v7 = sub_10000F6E4();
  sub_100006FB4(v7, (uint64_t)qword_1002B3C10);
  sub_100140EA0();
  sub_100140EA0();
  sub_100140EA0();
  sub_100140EA0();
  sub_100140EA0();
  v8 = a4;
  sub_100140EA0();
  v9 = v8;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = sub_10000797C(42);
    *(_DWORD *)v12 = 134218752;
    objc_msgSend(v9, "serviceID");

    sub_10017E590(v13, v14, v15, v12 + 12, v16);
    *(_WORD *)(v12 + 12) = 2048;
    v17 = sub_10017E60C();
    ServiceFilterReport.filterMask.getter(v17, v18);
    v19 = sub_100048C38();
    sub_10017E590(v19, v20, v21, v12 + 22, v22);
    sub_100048C38();
    *(_WORD *)(v12 + 22) = 2048;
    v23 = sub_10017E60C();
    ServiceFilterReport.copyMask.getter(v23, v24);
    v25 = sub_100048C38();
    sub_10017E590(v25, v26, v27, v12 + 32, v28);
    sub_100048C38();
    *(_WORD *)(v12 + 32) = 2048;
    v29 = sub_10017E60C();
    ServiceFilterReport.notifyMask.getter(v29, v30);
    v31 = sub_100048C38();
    sub_10017E590(v31, v32, v33, v12 + 42, v34);
    sub_100048C38();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%llx: update service, filter=%lx copy=%lx notify=%lx", (uint8_t *)v12, 0x2Au);
    sub_100007958(v12);
  }
  else
  {
    sub_100048C38();
    sub_100048C38();
    sub_100048C38();

    sub_100048C38();
    sub_100048C38();
    sub_100048C38();
  }

  v35 = HIDReport.storage.getter(a1, a2);
  v37 = v36;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100022AEC(v35, v37);
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setProperty:forKey:", isa, v39);

}

double EnsembleHIDController.localInputDevices.getter()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_10005FE28(v0 + 144, (uint64_t)v2);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10017B0E0(uint64_t a1)
{
  return sub_10017B100(a1, 2, &qword_1002B3C28);
}

uint64_t sub_10017B0F0(uint64_t a1)
{
  return sub_10017B100(a1, 6, &qword_1002B3C30);
}

uint64_t sub_10017B100(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = sub_1000055B0(&qword_1002AA680);
  inited = swift_initStackObject(v5, &v9);
  *(_OWORD *)(inited + 16) = xmmword_10021CFF0;
  *(_QWORD *)(inited + 32) = 0x7355656369766544;
  *(_QWORD *)(inited + 40) = 0xEF65676150656761;
  *(_QWORD *)(inited + 48) = 1;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 80) = 0x7355656369766544;
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 88) = 0xEB00000000656761;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 128) = HIDUniversalControlMatchedServiceKey.getter();
  *(_QWORD *)(inited + 136) = v7;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  result = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  *a3 = result;
  return result;
}

uint64_t sub_10017B1E0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[56];

  v0 = sub_1000055B0(&qword_1002B3DB0);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 32) = HIDUniversalControlVirtualServiceKey.getter();
  *(_QWORD *)(inited + 40) = v2;
  *(_BYTE *)(inited + 48) = 1;
  result = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for Bool, &protocol witness table for String);
  qword_1002B3C38 = result;
  return result;
}

void EnsembleHIDController.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uid_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  const char *v34;
  uint32_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSNumber v49;
  uint64_t v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  id v62;
  void *v63;
  double v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(_QWORD, _QWORD, _QWORD);
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  void (*v84)();
  uint64_t v85;

  v2 = v0;
  v3 = (_QWORD *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v76 = (void (**)(_QWORD, _QWORD, _QWORD))*(v3 - 1);
  v77 = v3;
  __chkstk_darwin(v3);
  sub_1000268CC();
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Completions();
  v12 = sub_10017E5FC(v10, v11, v10);
  *(_QWORD *)(v0 + 16) = v12;
  *(_QWORD *)(v0 + 24) = CGSize.init(_:);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = CGSize.init(_:);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  v14 = sub_10017E5FC(v12, v13, (uint64_t)&type metadata for EnsembleHIDController.LocalInputDevice);
  *(_DWORD *)(v0 + 168) = -1;
  *(_QWORD *)(v0 + 136) = v14;
  *(_QWORD *)(v0 + 144) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  v78 = sub_10017E62C(objc_allocWithZone((Class)HIDEventSystemClient));
  if (!v78)
    goto LABEL_45;
  v75 = v1;
  v15 = sub_10017E62C(objc_allocWithZone((Class)HIDEventSystemClient));
  if (v15)
  {
    v16 = v15;
    sub_100060018((uint64_t)v15, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v74 = static OS_dispatch_queue.main.getter(v17);
    static DispatchQoS.userInteractive.getter();
    v80 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100021264((unint64_t *)&unk_1002AC980, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    v19 = v18;
    v20 = sub_1000055B0((uint64_t *)&unk_1002AB9C0);
    sub_10002599C((unint64_t *)&unk_1002AC990, (uint64_t *)&unk_1002AB9C0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v20, v21, v4, v19);
    v22 = v75;
    ((void (**)(uint64_t, _QWORD, id))v76)[13](v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v77);
    v23 = sub_10016B540(0xD00000000000002FLL, 0x8000000100258E80, 47, 0);
    v24 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002FLL, 0x8000000100258E80, v9, v6, v22, v23);
    v25 = geteuid();
    v80 = 0;
    v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v80 = 0x6469752E72657375;
    v81 = 0xE90000000000002ELL;
    LODWORD(v79) = v25;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    String.append(_:)(v26);
    sub_10000E594();
    v27._countAndFlagsBits = 0xD000000000000026;
    v27._object = (void *)0x8000000100258EB0;
    String.append(_:)(v27);
    v28 = v80;
    v29 = v81;
    v30 = v78;
    *(_QWORD *)(v0 + 88) = v78;
    *(_QWORD *)(v0 + 96) = v16;
    *(_QWORD *)(v0 + 152) = v28;
    *(_QWORD *)(v0 + 160) = v29;
    v31 = (void *)v74;
    *(_QWORD *)(v0 + 120) = v24;
    *(_QWORD *)(v0 + 128) = v31;
    type metadata accessor for HIDVirtualServicePool(0);
    v32 = v24;
    v33 = v30;
    v77 = v16;
    sub_10002D9F8();
    v78 = v31;
    *(_QWORD *)(v0 + 112) = HIDVirtualServicePool.init(queue:)((uint64_t)v32);
    v34 = (const char *)(String.utf8CString.getter(v28, v29) + 32);
    sub_10000B2F8(v0 + 168, (uint64_t)&v80, 33);
    v35 = notify_register_check(v34, (int *)(v0 + 168));
    swift_endAccess(&v80);
    sub_10000B348();
    v76 = (void (**)(_QWORD, _QWORD, _QWORD))v32;
    if (v35)
    {
      if (qword_1002A9908 != -1)
        swift_once(&qword_1002A9908, sub_10017A3D8);
      v36 = sub_10000F6E4();
      sub_100006FB4(v36, (uint64_t)qword_1002B3C10);
      v37 = sub_10002D9F8();
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = sub_10000797C(18);
        v41 = sub_10000797C(32);
        v80 = v41;
        *(_DWORD *)v40 = 136446466;
        sub_10002D9F8();
        v79 = sub_100006FCC(v28, v29, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v40 + 4);
        swift_bridgeObjectRelease_n(v29, 3);
        *(_WORD *)(v40 + 12) = 1024;
        LODWORD(v79) = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4, v40 + 14);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s: notify_register_check failed: %u", (uint8_t *)v40, 0x12u);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        sub_100007958(v41);
        sub_100007958(v40);

      }
      else
      {

        swift_bridgeObjectRelease_n(v29, 2);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10017A9BC(0);
    v84 = sub_10017E0D4;
    v85 = v2;
    v80 = (uint64_t)_NSConcreteStackBlock;
    v81 = 1107296256;
    v82 = sub_10000E610;
    v83 = &unk_10028EBC8;
    sub_10017E5DC();
    sub_10017E580();
    sub_1000269A0();
    sub_10000F710(v33, "setCancelHandler:");
    sub_10000F7A8();
    objc_msgSend(v33, "setDispatchQueue:", v78);
    sub_10017E5AC((uint64_t)sub_10017E0F4);
    v82 = sub_10017C0E8;
    v83 = &unk_10028EBF0;
    sub_10017E5DC();
    sub_10017E580();
    sub_1000269A0();
    sub_10000F710(v33, "setEventHandler:");
    sub_10000F7A8();
    v42 = sub_1000055B0(&qword_1002B3C40);
    v43 = sub_1000088D8(v42, 48);
    *(_OWORD *)(v43 + 16) = xmmword_10021DE60;
    if (qword_1002A9910 != -1)
      swift_once(&qword_1002A9910, sub_10017B0E0);
    v44 = qword_1002B3C28;
    *(_QWORD *)(v43 + 32) = qword_1002B3C28;
    v45 = (void *)qword_1002A9918;
    swift_bridgeObjectRetain(v44);
    if (v45 != (void *)-1)
      swift_once(&qword_1002A9918, sub_10017B0F0);
    v46 = qword_1002B3C30;
    *(_QWORD *)(v43 + 40) = qword_1002B3C30;
    swift_bridgeObjectRetain(v46);
    sub_1000055B0((uint64_t *)&unk_1002B6170);
    sub_10017E5E4();
    sub_10017E5BC();
    objc_msgSend(v33, "setMatching:", v45);

    v47 = sub_1000055B0(&qword_1002AC0E0);
    v48 = sub_1000088D8(v47, 40);
    *(_OWORD *)(v48 + 16) = xmmword_10021EFD0;
    v49.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    *(NSNumber *)(v48 + 32) = v49;
    v80 = v48;
    v50 = specialized Array._endMutation()(v49.super.super.isa);
    sub_100060018(v50, &qword_1002AC398, NSNumber_ptr);
    sub_10017E5E4();
    sub_10017E5BC();
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "setProperty:forKey:", v45, v51);

    sub_10017E5AC((uint64_t)sub_10017E0F8);
    v82 = sub_10000A194;
    v83 = &unk_10028EC18;
    sub_10017E5DC();
    sub_10017E580();
    sub_1000269A0();
    sub_10000F710(v33, "setServiceNotificationHandler:");
    sub_10000F7A8();
    objc_msgSend(v33, "activate");
    sub_10017E5AC((uint64_t)sub_10017E0FC);
    v82 = sub_10000E610;
    v83 = &unk_10028EC40;
    sub_10017E5DC();
    sub_10017E580();
    sub_1000269A0();
    v52 = v77;
    sub_10000F710(v77, "setCancelHandler:");
    sub_10000F7A8();
    objc_msgSend(v52, "setDispatchQueue:", v78);
    v53 = sub_1000055B0(&qword_1002B3C48);
    v54 = sub_1000088D8(v53, 40);
    *(_OWORD *)(v54 + 16) = xmmword_10021BBA0;
    if (qword_1002A9920 != -1)
      swift_once(&qword_1002A9920, sub_10017B1E0);
    v55 = qword_1002B3C38;
    *(_QWORD *)(v54 + 32) = qword_1002B3C38;
    swift_bridgeObjectRetain(v55);
    sub_1000055B0(&qword_1002B3C50);
    sub_10017E5E4();
    sub_10017E5BC();
    objc_msgSend(v52, "setMatching:", v45);

    sub_10017E5AC((uint64_t)sub_10017E104);
    v82 = sub_10000A194;
    v83 = &unk_10028EC68;
    sub_10017E5DC();
    sub_10017E580();
    sub_1000269A0();
    sub_10000F710(v52, "setServiceNotificationHandler:");
    sub_10000F7A8();
    objc_msgSend(v52, "activate");
    v56 = objc_msgSend(v33, "services");
    sub_100060018((uint64_t)v56, &qword_1002B3C58, HIDServiceClient_ptr);
    v58 = v57;
    v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v57);

    if ((unint64_t)v59 >> 62)
    {
      if (v59 < 0)
        v72 = v59;
      else
        v72 = v59 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v59);
      v60 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease();
      if (!v60)
        goto LABEL_24;
    }
    else
    {
      v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v60)
        goto LABEL_24;
    }
    if (v60 < 1)
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    for (i = 0; i != v60; ++i)
    {
      if ((v59 & 0xC000000000000001) != 0)
        v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v59);
      else
        v62 = *(id *)(v59 + 8 * i + 32);
      v63 = v62;
      sub_10017C154(v62);

    }
LABEL_24:
    *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
    v65 = v77;
    v66 = objc_msgSend(v77, "services", v64);
    v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v66, v58);

    if ((unint64_t)v67 >> 62)
    {
      if (v67 < 0)
        v73 = v67;
      else
        v73 = v67 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v67);
      v68 = _CocoaArrayWrapper.endIndex.getter(v73);
      sub_10000E594();
      if (v68)
      {
LABEL_26:
        if (v68 >= 1)
        {
          for (j = 0; j != v68; ++j)
          {
            if ((v67 & 0xC000000000000001) != 0)
              v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v67);
            else
              v70 = *(id *)(v67 + 8 * j + 32);
            v71 = v70;
            sub_10017C4CC(v70);

          }
          goto LABEL_32;
        }
        goto LABEL_44;
      }
    }
    else
    {
      v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v68)
        goto LABEL_26;
    }
LABEL_32:

    sub_10000E594();
    return;
  }
LABEL_46:
  __break(1u);
}

void sub_10017BCC0()
{
  HIDEventSystemClient.canceled()();
}

void sub_10017BCE0(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t IntegerValue;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, unint64_t);
  id v18;
  void *v19;
  void *v20;
  uint64_t SenderID;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t DataValue;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  __n128 v33;
  uint64_t v34;
  id v35;
  int v36;
  void (*v37)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  _QWORD v45[3];

  v3 = v2;
  v5 = (void *)sub_10017E47C(a2);
  if (v5)
  {
    v44 = v5;
    v6 = VendorDefinedEvent.usage.getter(v5);
    v7 = sub_10017C858(v6);
    if ((v7 & 0x10000) != 0)
      goto LABEL_5;
    if (!a1)
      goto LABEL_5;
    v8 = v7;
    v9 = objc_msgSend(a1, "serviceID");
    v45[0] = v44;
    HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for VendorDefinedEvent, (uint64_t)&protocol witness table for VendorDefinedEvent);
    v11 = v10;
    IntegerValue = IOHIDEventGetIntegerValue(v10, 65538);

    if (IntegerValue)
      goto LABEL_5;
    if (*(unsigned __int16 *)EnsembleUsage.control.unsafeMutableAddressor() == (unsigned __int16)v8)
    {
      v13 = v44;
      v14 = ServiceFilterReport.init(_:)(v13);
      if (v15 >> 60 == 15)
      {

      }
      else
      {
        v29 = v14;
        v30 = v15;
        v31 = v16;
        ServiceFilterReport.flags.getter(v14, v15);
        if ((*(unsigned __int8 *)ServiceFilterFlags.maskChanged.unsafeMutableAddressor() & ~v32) == 0)
        {
          v33 = swift_beginAccess(v3 + 16, v45, 33, 0);
          v34 = sub_1001AA130(v9, v33);
          swift_endAccess(v45);
          if (v34)
          {
            sub_1000C4E9C(0);
            swift_release();
          }
        }
        v35 = a1;
        ServiceFilterReport.flags.getter(v29, v30);
        if ((*(unsigned __int8 *)ServiceFilterFlags.propertiesChanged.unsafeMutableAddressor() & ~v36) == 0)
          sub_10017C880(v35);

        swift_beginAccess(v3 + 24, v45, 0, 0);
        v37 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v3 + 24);
        v38 = swift_retain();
        v37(v29, v30, v31, v38);
        swift_release();

        sub_100022AD8(v29, v30);
      }
    }
    else if (*(unsigned __int16 *)EnsembleUsage.report.unsafeMutableAddressor() == (unsigned __int16)v8
           || *(unsigned __int16 *)EnsembleUsage.synthetic.unsafeMutableAddressor() == (unsigned __int16)v8
           || *(unsigned __int16 *)EnsembleUsage.copy.unsafeMutableAddressor() == (unsigned __int16)v8)
    {
      swift_beginAccess(v3 + 40, v45, 0, 0);
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v3 + 40);
      v18 = v44;
      swift_retain();
      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for VendorDefinedEvent, (uint64_t)&protocol witness table for VendorDefinedEvent);
      v20 = v19;
      SenderID = IOHIDEventGetSenderID();

      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for VendorDefinedEvent, (uint64_t)&protocol witness table for VendorDefinedEvent);
      v23 = v22;
      v24 = IOHIDEventGetIntegerValue(v22, 65539);
      DataValue = IOHIDEventGetDataValue(v23, 65540);
      v26 = sub_10004091C(DataValue, DataValue + v24);
      v28 = v27;

      v17(SenderID, v8, v26, v28);
      swift_release();

      sub_100022AEC(v26, v28);
    }
    else
    {
      if (qword_1002A9908 != -1)
        swift_once(&qword_1002A9908, sub_10017A3D8);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_100006FB4(v39, (uint64_t)qword_1002B3C10);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v41, v42))
      {

LABEL_5:
        return;
      }
      v43 = (uint8_t *)swift_slowAlloc(6, -1);
      *(_DWORD *)v43 = 33554688;
      LOWORD(v45[0]) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 2, v43 + 4);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "unexpected usage: %hx", v43, 6u);
      swift_slowDealloc(v43, -1, -1);

    }
  }
}

void sub_10017C0E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, id);
  id v7;
  id v8;

  v6 = *(void (**)(void *, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, v7);
  swift_release(v5);

}

void sub_10017C154(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  id v10;
  uint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **aBlock;
  _QWORD v37[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (void **)objc_msgSend(a1, "serviceID");
  v9 = *(void **)(v2 + 128);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    v11 = swift_unknownObjectRetain(a1);
    v12 = HIDServiceProperties.init(service:)(v11, (uint64_t)&protocol witness table for HIDServiceClient);
    v19 = v18;
    if (sub_10017D2BC(a1, v12, v18))
    {
      v23 = v21;
      v24 = v22;
      swift_beginAccess(v2 + 136, &aBlock, 33, 0);
      swift_retain();
      v25 = v23;
      v26 = v24;
      sub_1001AA8D4();
      swift_endAccess(&aBlock);
      v27 = swift_allocObject(&unk_10028ED88, 24, 7);
      swift_weakInit(v27 + 16, v2);
      v28 = swift_allocObject(&unk_10028EDB0, 32, 7);
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = v8;
      v37[3] = sub_10017E428;
      v37[4] = v28;
      aBlock = _NSConcreteStackBlock;
      v37[0] = 1107296256;
      v37[1] = sub_10000E610;
      v37[2] = &unk_10028EDC8;
      v29 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a1, "setRemovalHandler:", v29);
      _Block_release(v29);
      ServiceFilterFlags.maskChanged.unsafeMutableAddressor();
      ServiceFilterReport.init(_:filterMask:copyMask:notifyMask:)();
      v31 = v30;
      v33 = v32;
      sub_10017AE50(v30, v32, v34, a1);
      sub_10017D914();
      sub_100022AEC(v31, v33);

      swift_release();
    }
    else
    {

    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_1002A9908, sub_10017A3D8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100006FB4(v13, (uint64_t)qword_1002B3C10);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      aBlock = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v37, v17 + 4);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%llx: Failed to read service properties", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);
    }

  }
}

void sub_10017C4AC()
{
  HIDEventSystemClient.canceled()();
}

void sub_10017C4CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(a1, "serviceID");
  v9 = *(void **)(v2 + 128);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    v11 = swift_unknownObjectRetain(a1);
    v17 = HIDServiceProperties.init(service:)(v11, (uint64_t)&protocol witness table for HIDServiceClient);
    v19 = v18;
    if (qword_1002A9908 != -1)
      swift_once(&qword_1002A9908, sub_10017A3D8);
    v20 = type metadata accessor for Logger(0);
    sub_100006FB4(v20, (uint64_t)qword_1002B3C10);
    v21 = v19;
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.default.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(32, -1);
      v37 = (uint64_t)v8;
      v38 = v26;
      *(_DWORD *)v25 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v25 + 4);
      *(_WORD *)(v25 + 12) = 2082;
      HIDServiceProperties.product.getter(v17, (uint64_t)v21, v27, v28, v29, v30, v31, v32);
      if (v34)
      {
        v35 = v34;
      }
      else
      {
        v33 = 0;
        v35 = 0xE000000000000000;
      }
      v37 = sub_100006FCC(v33, v35, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v25 + 14);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "%llx: Matched Virtual Service %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    swift_retain();
    HIDVirtualServicePool.addServiceClient(_:)();

    swift_release();
  }
  else
  {
    __break(1u);
    swift_once(&qword_1002A9908, sub_10017A3D8);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100006FB4(v12, (uint64_t)qword_1002B3C10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v16 = 134217984;
      v38 = (uint64_t)v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v16 + 4);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%llx: Failed to read service properties", v16, 0xCu);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

uint64_t sub_10017C858(unsigned int a1)
{
  unsigned int v1;

  v1 = HIWORD(a1);
  if ((unsigned __int16)a1 != 65306)
    v1 = 0;
  return v1 | (((unsigned __int16)a1 != 65306) << 16);
}

void sub_10017C880(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  _BYTE v47[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (void **)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = objc_msgSend(a1, "serviceID", v6);
  v10 = *(void **)(v2 + 128);
  *v8 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    swift_unknownObjectRetain(a1);
    v18 = HIDServiceProperties.init(service:)(v12, (uint64_t)&protocol witness table for HIDServiceClient);
    v20 = v19;
    swift_beginAccess(v2 + 136, &v46, 32, 0);
    if (sub_100041F1C((uint64_t)v9, *(_QWORD *)(v2 + 136)))
    {
      v25 = v22;
      v26 = v23;
      v27 = v24;
      swift_endAccess(&v46);
      if ((static HIDServiceProperties.== infix(_:_:)(v25, (uint64_t)v26, v18, (uint64_t)v20) & 1) == 0)
      {
        v28 = sub_10017D2BC(a1, v18, v20);
        v44 = v30;
        v45 = v29;
        v32 = v31;
        swift_beginAccess(v2 + 136, &v46, 33, 0);
        if (v28)
        {
          swift_retain();
          v33 = v32;
          v34 = v44;
          sub_1001AA8D4();
        }
        else
        {
          v40 = sub_1001A9ED0();
          sub_10017E440(v40, v41, v42, v43);
        }
        swift_endAccess(&v46);
        sub_10017D914();
        sub_10017E440(v28, v45, v32, v44);
      }

      swift_release();
    }
    else
    {
      swift_endAccess(&v46);
      if (qword_1002A9908 != -1)
        swift_once(&qword_1002A9908, sub_10017A3D8);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100006FB4(v35, (uint64_t)qword_1002B3C10);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v39 = 134217984;
        v46 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v39 + 4);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%llx: Failed to find existing local device", v39, 0xCu);
        swift_slowDealloc(v39, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_1002A9908, sub_10017A3D8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100006FB4(v13, (uint64_t)qword_1002B3C10);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      v46 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v17 + 4);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%llx: Failed to read service properties", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);
    }

  }
}

void sub_10017CC54()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v1);
  PointerReport.init()();
  __asm { BR              X12 }
}

uint64_t sub_10017D0E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000DBE4(a1, v3);
  result = dispatch thunk of HIDEventProtocol.wrappedValue.getter(v3, v4);
  *a2 = result;
  return result;
}

void sub_10017D12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v4 = sub_1000055B0(&qword_1002B3DB8);
  sub_10002599C(&qword_1002B3DC0, &qword_1002B3DB8);
  HIDVirtualService.dispatch<A>(_:)((uint64_t)v6, v4, v5, (uint64_t)&protocol witness table for HIDEvent);
}

void sub_10017D1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100006FB4(v3, (uint64_t)qword_1002B3C10);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v9 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "assertVirtualMouseButtonDown: End (%ld)", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_10017CC54();
}

uint64_t sub_10017D2BC(void *a1, Swift::UInt64 a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  _QWORD v41[5];
  uint64_t v42;
  uint64_t v43[2];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "serviceID");
  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v11 = sub_100006FB4(v6, (uint64_t)qword_1002B3C10);
  v12 = a3;
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    v41[1] = v11;
    v17 = v16;
    v41[0] = swift_slowAlloc(96, -1);
    v43[0] = v41[0];
    *(_DWORD *)v17 = 136446978;
    v41[3] = v7;
    v18 = HIDServiceProperties.deviceType.getter(a2, v12);
    v19 = HIDDeviceType.description.getter(v18);
    v41[4] = v6;
    v42 = sub_100006FCC(v19, v20, v43);
    v41[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 4);

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2048;
    v42 = (uint64_t)v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 14);
    *(_WORD *)(v17 + 22) = 2082;
    HIDServiceProperties.manufacturer.getter();
    if (v22)
    {
      v23 = v22;
    }
    else
    {
      v21 = 0;
      v23 = 0xE000000000000000;
    }
    v42 = sub_100006FCC(v21, v23, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 24);

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2082;
    HIDServiceProperties.product.getter(a2, (uint64_t)v12, v24, v25, v26, v27, v28, v29);
    if (v31)
    {
      v32 = v31;
    }
    else
    {
      v30 = 0;
      v32 = 0xE000000000000000;
    }
    v42 = sub_100006FCC(v30, v32, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 34);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Matched Local %{public}s, ID %llx, Mf '%{public}s', Nm '%{public}s'", (uint8_t *)v17, 0x2Au);
    v33 = v41[0];
    swift_arrayDestroy(v41[0], 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  HIDServiceProperties.dictionaryRepresentation.getter(a2, v12);
  v35 = v34;
  v36 = type metadata accessor for UniversalControlInputDevice(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = UniversalControlInputDevice.init(senderID:serviceProperties:)(v10, v35);
  v38 = v12;
  v39 = a1;
  return v37;
}

unint64_t sub_10017D6A8()
{
  return 0xD000000000000023;
}

uint64_t sub_10017D6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10017D720(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10017D720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v1 + 128);
  v11 = swift_allocObject(&unk_10028EE28, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10017E438;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028EE40;
  v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v20 = _swiftEmptyArrayStorage;
  sub_100021264((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v15 = v14;
  v16 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_10017D914()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];
  char v47[24];
  char v48[32];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v41 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  __chkstk_darwin(v5);
  v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v0 + 17, v48, 0, 0);
  v7 = v0[17];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v44 = v2;
    v45 = v0;
    aBlock[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v7);
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    v9 = sub_100071A78(v7);
    if ((v9 & 0x8000000000000000) == 0)
    {
      v11 = v9;
      if (v9 < 1 << *(_BYTE *)(v7 + 32))
      {
        v12 = v10;
        v13 = v7 + 64;
        while ((*(_QWORD *)(v13 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
        {
          if (v12 != *(_DWORD *)(v7 + 36))
            goto LABEL_24;
          v14 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 32 * v11);
          swift_retain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v1 = *(_QWORD **)(aBlock[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v1);
          v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v14);
          specialized ContiguousArray._endMutation()(v16);
          v17 = -1 << *(_BYTE *)(v7 + 32);
          if ((uint64_t)v11 >= -v17)
            goto LABEL_25;
          if ((*(_QWORD *)(v13 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
            goto LABEL_26;
          if (v12 != *(_DWORD *)(v7 + 36))
            goto LABEL_27;
          v18 = _HashTable.occupiedBucket(after:)(v11, v7 + 64, ~v17);
          if (!--v8)
            goto LABEL_14;
          v11 = v18;
          if ((v18 & 0x8000000000000000) == 0)
          {
            v12 = *(_DWORD *)(v7 + 36);
            if (v18 < 1 << *(_BYTE *)(v7 + 32))
              continue;
          }
          goto LABEL_13;
        }
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        if (v8 < 0)
          v36 = v8;
        else
          v36 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v8);
        v23 = _CocoaArrayWrapper.endIndex.getter(v36);
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
LABEL_13:
    __break(1u);
LABEL_14:
    v8 = aBlock[0];
    swift_bridgeObjectRelease();
    v2 = v44;
    v1 = v45;
  }
  else
  {
    v8 = (uint64_t)_swiftEmptyArrayStorage;
  }
  swift_beginAccess(v1 + 18, v47, 1, 0);
  v19 = v1[18];
  swift_bridgeObjectRetain(v19);
  sub_1000710BC(v8, v19);
  v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  sub_100021264(&qword_1002AC1B0, v22, (uint64_t (*)(uint64_t))type metadata accessor for EnsembleHIDController);
  ObservableObject<>.objectWillChange.getter(v2);
  ObservableObjectPublisher.send()();
  swift_release();
  v1[18] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  if ((unint64_t)v8 >> 62)
    goto LABEL_28;
  v23 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_20:
  swift_bridgeObjectRelease();
  if (!v23)
  {
    sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v25 = (void *)static OS_dispatch_queue.main.getter(v24);
    aBlock[4] = sub_10017E430;
    aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E610;
    aBlock[3] = &unk_10028EDF0;
    v26 = _Block_copy(aBlock);
    swift_retain();
    v27 = swift_release();
    v28 = v38;
    static DispatchQoS.unspecified.getter(v27);
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100021264((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v30 = v29;
    v31 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
    v32 = v41;
    v33 = v31;
    v34 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v35, v43, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v34);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
  }
}

void sub_10017DD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_1002A9908 != -1)
    swift_once(&qword_1002A9908, sub_10017A3D8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006FB4(v4, (uint64_t)qword_1002B3C10);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v17 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Removed Local Input Device: %llx", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(a1 + 136, &v17, 33, 0);
  v10 = sub_1001A9ED0();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_endAccess(&v17);
  sub_10017E440(v10, v12, v14, v16);
  sub_10017D914();
}

uint64_t sub_10017DED4(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, unint64_t, uint64_t, __n128);
  __n128 v10;
  _BYTE v12[24];

  ServiceFilterFlags.maskChanged.unsafeMutableAddressor();
  v2 = static ReportID.translation.getter();
  HIDEventType.maskValue.getter(v2);
  HIDEventType.maskValue.getter(v2);
  ServiceFilterReport.init(_:filterMask:copyMask:notifyMask:)();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_beginAccess(a1 + 24, v12, 0, 0);
  v9 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(a1 + 24);
  v10 = swift_retain();
  v9(v4, v6, v8, v10);
  swift_release();
  return sub_100022AEC(v4, v6);
}

uint64_t EnsembleHIDController.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  return v0;
}

uint64_t EnsembleHIDController.__deallocating_deinit()
{
  uint64_t v0;

  EnsembleHIDController.deinit();
  return swift_deallocClassInstance(v0, 192, 7);
}

#error "10017E054: call analysis failed (funcsize=17)"

uint64_t sub_10017E06C()
{
  return EnsembleHIDController.sendReport(_:from:)();
}

void sub_10017E08C()
{
  EnsembleHIDController.sendReport(_:from:)();
  sub_1000050D4();
}

uint64_t sub_10017E0A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10017E0CC()
{
  uint64_t v0;

  sub_10017D1A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10017E0D4()
{
  sub_10017BCC0();
}

uint64_t sub_10017E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10017E0EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10017E0FC()
{
  sub_10017C4AC();
}

uint64_t type metadata accessor for EnsembleHIDController()
{
  return objc_opt_self(_TtC13EnsembleAgent21EnsembleHIDController);
}

ValueMetadata *type metadata accessor for FilterNotificationState()
{
  return &type metadata for FilterNotificationState;
}

void destroy for EnsembleHIDController.LocalInputDevice(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

}

uint64_t *initializeWithCopy for EnsembleHIDController.LocalInputDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  v6 = (void *)a2[3];
  a1[2] = (uint64_t)v5;
  a1[3] = (uint64_t)v6;
  swift_retain(v3);
  v7 = v5;
  v8 = v6;
  return a1;
}

uint64_t *assignWithCopy for EnsembleHIDController.LocalInputDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = (uint64_t)v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = (uint64_t)v9;
  v11 = v9;

  return a1;
}

uint64_t *assignWithTake for EnsembleHIDController.LocalInputDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];

  v5 = (void *)a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);

  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleHIDController.LocalInputDevice(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleHIDController.LocalInputDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleHIDController.LocalInputDevice()
{
  return &type metadata for EnsembleHIDController.LocalInputDevice;
}

unint64_t sub_10017E308()
{
  unint64_t result;

  result = qword_1002B3D90;
  if (!qword_1002B3D90)
  {
    result = swift_getWitnessTable(&unk_100229284, &type metadata for FilterNotificationState);
    atomic_store(result, (unint64_t *)&qword_1002B3D90);
  }
  return result;
}

unint64_t sub_10017E348()
{
  unint64_t result;

  result = qword_1002B3D98;
  if (!qword_1002B3D98)
  {
    result = swift_getWitnessTable(&unk_100229254, &type metadata for FilterNotificationState);
    atomic_store(result, (unint64_t *)&qword_1002B3D98);
  }
  return result;
}

unint64_t sub_10017E388()
{
  unint64_t result;

  result = qword_1002B3DA0;
  if (!qword_1002B3DA0)
  {
    result = swift_getWitnessTable(&unk_1002292AC, &type metadata for FilterNotificationState);
    atomic_store(result, (unint64_t *)&qword_1002B3DA0);
  }
  return result;
}

unint64_t sub_10017E3C8()
{
  unint64_t result;

  result = qword_1002B3DA8;
  if (!qword_1002B3DA8)
  {
    result = swift_getWitnessTable(&unk_1002292E4, &type metadata for FilterNotificationState);
    atomic_store(result, (unint64_t *)&qword_1002B3DA8);
  }
  return result;
}

uint64_t sub_10017E404()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017E428()
{
  uint64_t v0;

  return sub_10017D6C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10017E430()
{
  uint64_t v0;

  return sub_10017DED4(v0);
}

void sub_10017E438()
{
  uint64_t v0;

  sub_10017DD74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10017E440(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    swift_release(a1);

  }
}

uint64_t sub_10017E47C(void *a1)
{
  int v2;
  int v3;
  int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  HIDEvent.eventType.getter();
  v3 = v2;
  v4 = static ReportID.keyboard.getter();
  if (static HIDUsage.== infix(_:_:)(v3, v4))
  {
    v5 = a1;
    CGSize.init(_:)(v5);
    v7 = v6;

  }
  else
  {

    return 0;
  }
  return v7;
}

uint64_t sub_10017E4D8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10017E50C()
{
  uint64_t *v0;

  sub_10017D12C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10017E580()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10017E590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v5, v6, a4);
}

uint64_t sub_10017E5A0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 112));
}

void sub_10017E5AC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 112) = a1;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 144) = v2;
  *(_QWORD *)(v3 - 136) = v4;
}

uint64_t sub_10017E5BC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10017E5C8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

void *sub_10017E5DC()
{
  uint64_t v0;

  return _Block_copy((const void *)(v0 - 144));
}

NSArray sub_10017E5E4()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_10017E5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v11, a3, a4);
}

uint64_t sub_10017E5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

uint64_t sub_10017E60C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10017E61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a3, a4);
}

id sub_10017E62C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 1032), 0);
}

double sub_10017E638()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 48) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v0 + 72) = 1;
  return result;
}

uint64_t sub_10017E660()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_10017E668(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return sub_10017E7AC();
}

uint64_t sub_10017E670()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_10017E678(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return sub_10017E7AC();
}

void (*sub_10017E680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(_BYTE *, _QWORD)
{
  uint64_t v4;
  void (*result)(_BYTE *, _QWORD);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = a1;
  result = (void (*)(_BYTE *, _QWORD))swift_modifyAtReferenceWritableKeyPath(v14, &v15, a2);
  if (__OFADD__(*v9, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v9;
    result(v14, 0);
    v10 = *(_QWORD *)(v4 + 16);
    v11 = v15;
    v12 = (_QWORD *)swift_allocObject(&unk_10028F158, 64, 7);
    v12[2] = v4;
    v12[3] = v10;
    v12[4] = v11;
    v12[5] = a2;
    v12[6] = a3;
    v12[7] = a4;
    v13 = type metadata accessor for AnyCancellable(0);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    swift_retain(v11);
    swift_retain(v4);
    swift_retain(a2);
    swift_retain(a4);
    return (void (*)(_BYTE *, _QWORD))AnyCancellable.init(_:)(sub_10017F2F0, v12);
  }
  return result;
}

void sub_10017E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16) + 1;
  do
  {
    v2 = v1;
    v1 = 1;
  }
  while (!v2);
  *(_QWORD *)(v0 + 16) = v2;
}

uint64_t sub_10017E790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24) + 1;
  do
  {
    result = v1;
    v1 = 1;
  }
  while (!result);
  *(_QWORD *)(v0 + 24) = result;
  return result;
}

uint64_t sub_10017E7AC()
{
  _QWORD *v0;

  if ((uint64_t)v0[5] <= 0)
    return (*(uint64_t (**)(BOOL))(*v0 + 272))(v0[4] < 1);
  else
    return (*(uint64_t (**)(uint64_t))(*v0 + 272))(2);
}

void sub_10017E7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v0;
  v3 = sub_10000F6E4();
  sub_10016A76C();
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10017E790();
  v8 = qword_1002A9928;
  sub_10002D790();
  if (v8 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v9 = sub_100006FB4(v3, (uint64_t)qword_1002B7068);
  sub_10017F3A4(v9);
  v10 = sub_10002645C();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (sub_10017F3B8(v11))
  {
    v14 = (float *)sub_10017F38C();
    sub_10017F36C(v14, 3.852e-34);
    sub_10017F398((void *)&_mh_execute_header, v11, v13, "Take Show Pointer Assertion: %ld");
    sub_100007958((uint64_t)v14);
  }

  sub_10009BE10((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v15 = sub_100047434((uint64_t)&unk_10028F180);
  *(_QWORD *)(v15 + 16) = v2;
  *(_QWORD *)(v15 + 24) = v7;
  swift_getKeyPath(&unk_100229560);
  v16 = sub_10002D790();
  sub_10017F3C0(v16, v17, (uint64_t)sub_10017F304);
  sub_10009A5DC();
  swift_release();
  sub_10000E4E0();
}

void sub_10017E930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v0;
  v3 = sub_10000F6E4();
  sub_10016A76C();
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10017E790();
  v8 = qword_1002A9928;
  sub_10002D790();
  if (v8 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v9 = sub_100006FB4(v3, (uint64_t)qword_1002B7068);
  sub_10017F3A4(v9);
  v10 = sub_10002645C();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (sub_10017F3B8(v11))
  {
    v14 = (float *)sub_10017F38C();
    sub_10017F36C(v14, 3.852e-34);
    sub_10017F398((void *)&_mh_execute_header, v11, v13, "Take Hide Pointer Assertion: %ld");
    sub_100007958((uint64_t)v14);
  }

  sub_10009BE10((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v15 = sub_100047434((uint64_t)&unk_10028F130);
  *(_QWORD *)(v15 + 16) = v2;
  *(_QWORD *)(v15 + 24) = v7;
  swift_getKeyPath(&unk_100229538);
  v16 = sub_10002D790();
  sub_10017F3C0(v16, v17, (uint64_t)sub_10017F248);
  sub_10009A5DC();
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_10017EA88()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    return sub_10017EAA4(16.0, 16.0);
  else
    return sub_10017EAA4(*(CGFloat *)(v0 + 56), *(CGFloat *)(v0 + 64));
}

uint64_t sub_10017EAA4(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSString *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSPoint v25;

  v5 = sub_10000F6E4();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100026518();
  v7 = qword_1002A9928;
  sub_10002D790();
  if (v7 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v8 = sub_100006FB4(v5, (uint64_t)qword_1002B7068);
  sub_1000B3974(v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  v9 = sub_10002645C();
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (sub_10017F3B8(v10))
  {
    v22 = v6;
    v13 = (uint8_t *)sub_10017F38C();
    v21 = swift_slowAlloc(32, -1);
    v24 = v21;
    *(_DWORD *)v13 = 136315138;
    v25.x = a1;
    v25.y = a2;
    v14 = NSStringFromPoint(v25);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v23 = sub_100006FCC(v15, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Warp Location: %s", v13, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v21);
    sub_100007958((uint64_t)v13);

    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
  }
  else
  {

    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  }
  v19 = sub_10009BE10(v2, v18);
  return (*(uint64_t (**)(uint64_t, CGFloat, CGFloat))(*(_QWORD *)v2 + 368))(v19, a1, a2);
}

uint64_t sub_10017ECA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = sub_10000F6E4();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100026518();
  v3 = qword_1002A9928;
  sub_10002D790();
  if (v3 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v4 = sub_100006FB4(v1, (uint64_t)qword_1002B7068);
  sub_1000B3974(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v5 = sub_10002645C();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "=== RESET ===", v8, 2u);
    sub_100007958((uint64_t)v8);
  }

  sub_10009BE10(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10017E774();
  *(_QWORD *)(v0 + 32) = 0;
  sub_10017E7AC();
  *(_QWORD *)(v0 + 40) = 0;
  return sub_10017E7AC();
}

void sub_10017EDD4()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10000897C(v0, qword_1002B7068);
  sub_100006FB4(v0, (uint64_t)qword_1002B7068);
  Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x7265746E696F70, 0xE700000000000000);
  sub_1000050D4();
}

uint64_t sub_10017EE40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[32];
  uint64_t v9;

  v9 = a3;
  if (*(_QWORD *)(result + 16) == a2)
  {
    result = swift_modifyAtReferenceWritableKeyPath(v8, &v9, a4);
    if (__OFSUB__(*v6, 1))
    {
      __break(1u);
    }
    else
    {
      --*v6;
      v7 = ((uint64_t (*)(_BYTE *, _QWORD))result)(v8, 0);
      return a5(v7);
    }
  }
  return result;
}

void sub_10017EEB0()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6C706D6920746F4ELL, 0xEF6465746E656D65, "EnsembleAgent/PointerControllerProtocol.swift", 45, 2, 91, 0);
  __break(1u);
}

uint64_t sub_10017EF10(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  float *v15;

  v7 = sub_10000F6E4();
  sub_10016A76C();
  __chkstk_darwin(v8);
  sub_100026518();
  v9 = qword_1002A9928;
  swift_retain(a1);
  if (v9 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v10 = sub_100006FB4(v7, (uint64_t)qword_1002B7068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v10, v7);
  v11 = swift_release();
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (sub_10017F3B8(v12))
  {
    v15 = (float *)sub_10017F38C();
    sub_10017F36C(v15, 3.852e-34);
    sub_10017F398((void *)&_mh_execute_header, v12, v14, a3);
    sub_100007958((uint64_t)v15);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
}

uint64_t sub_10017F03C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 73, 7);
}

uint64_t type metadata accessor for _BasePointerController()
{
  return objc_opt_self(_TtC13EnsembleAgent22_BasePointerController);
}

uint64_t storeEnumTagSinglePayload for _BasePointerController.Visibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10017F0CC + 4 * byte_1002293F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10017F100 + 4 * byte_1002293F0[v4]))();
}

uint64_t sub_10017F100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10017F110);
  return result;
}

uint64_t sub_10017F11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017F124);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10017F128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017F130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _BasePointerController.Visibility()
{
  return &type metadata for _BasePointerController.Visibility;
}

unint64_t sub_10017F150()
{
  unint64_t result;

  result = qword_1002B3F88;
  if (!qword_1002B3F88)
  {
    result = swift_getWitnessTable(&unk_1002294B4, &type metadata for _BasePointerController.Visibility);
    atomic_store(result, (unint64_t *)&qword_1002B3F88);
  }
  return result;
}

uint64_t sub_10017F18C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for _BasePointerController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

void sub_10017F1C4()
{
  sub_10017E7D8();
}

uint64_t sub_10017F1E4(CGFloat a1, CGFloat a2)
{
  return sub_10017EAA4(a1, a2);
}

uint64_t sub_10017F204()
{
  return sub_10017ECA4();
}

uint64_t sub_10017F224()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017F248()
{
  uint64_t v0;

  return sub_10017EF10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), "Release Hide Pointer Assertion: %ld");
}

void sub_10017F268(uint64_t *a1@<X8>)
{
  *a1 = sub_10017E660();
  sub_1000050D4();
}

void sub_10017F28C(uint64_t *a1)
{
  sub_10017E668(*a1);
  sub_1000050D4();
}

uint64_t sub_10017F2AC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return sub_10017EE40(a1, a2, *a3, a4, a5);
}

uint64_t sub_10017F2B4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10017F2F0()
{
  uint64_t v0;

  return sub_10017F2AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t *)(v0 + 32), *(_QWORD *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48));
}

uint64_t sub_10017F304()
{
  uint64_t v0;

  return sub_10017EF10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), "Release Show Pointer Assertion: %ld");
}

void sub_10017F324(uint64_t *a1@<X8>)
{
  *a1 = sub_10017E670();
  sub_1000050D4();
}

void sub_10017F348(uint64_t *a1)
{
  sub_10017E678(*a1);
  sub_1000050D4();
}

uint64_t sub_10017F36C(float *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = a2;
  *(_QWORD *)(v4 - 88) = v2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 88, v4 - 80, a1 + 1, (char *)a1 + v3);
}

uint64_t sub_10017F38C()
{
  return swift_slowAlloc(12, -1);
}

void sub_10017F398(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_10017F3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

BOOL sub_10017F3B8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void (*sub_10017F3C0(uint64_t a1, uint64_t a2, uint64_t a3))(_BYTE *, _QWORD)
{
  uint64_t v3;
  uint64_t v4;

  return sub_10017E680(a1, v4, a3, v3);
}

void sub_10017F3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int rawValue;
  _QWORD *v27;

  v3 = type metadata accessor for CompanionLinkDevice(0);
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  v4 = __chkstk_darwin(v3);
  v23 = (uint64_t)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v22 = (uint64_t)v20 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v20[1] = v1;
    v27 = _swiftEmptyArrayStorage;
    sub_1000586B0();
    v8 = sub_100071A78(a1);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = v8;
      if (v8 < 1 << *(_BYTE *)(a1 + 32))
      {
        v11 = v9;
        v12 = a1 + 64;
        v21 = a1 + 64;
        while ((*(_QWORD *)(v12 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
        {
          if (v11 != *(_DWORD *)(a1 + 36))
            goto LABEL_20;
          v13 = v22;
          sub_100022838(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v24 + 72) * v10, v22, type metadata accessor for CompanionLinkDevice);
          v14 = v13;
          v15 = v23;
          sub_10005F3FC(v14, v23, type metadata accessor for CompanionLinkDevice);
          rawValue = RapportEndpoint.sourceVersion.getter(v25, (uint64_t)&protocol witness table for CompanionLinkDevice).rawValue;
          sub_100184294(v15, type metadata accessor for CompanionLinkDevice);
          v16 = v27;
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
          {
            sub_1000586B0();
            v16 = v27;
          }
          v17 = v16[2];
          if (v17 >= v16[3] >> 1)
          {
            sub_1000586B0();
            v16 = v27;
          }
          v16[2] = v17 + 1;
          v16[v17 + 4] = rawValue;
          v18 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v10 >= -v18)
            goto LABEL_21;
          v12 = v21;
          if ((*(_QWORD *)(v21 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
            goto LABEL_22;
          if (v11 != *(_DWORD *)(a1 + 36))
            goto LABEL_23;
          v19 = _HashTable.occupiedBucket(after:)(v10, v21, ~v18);
          if (!--v7)
            return;
          v10 = v19;
          if ((v19 & 0x8000000000000000) == 0)
          {
            v11 = *(_DWORD *)(a1 + 36);
            if (v19 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_24;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
    }
LABEL_24:
    __break(1u);
  }
}

void sub_10017F650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95[3];
  uint64_t v96;

  sub_10002626C();
  v2 = v1;
  v93 = v3;
  v5 = v4;
  v84 = sub_10000F6E4();
  v86 = *(_QWORD *)(v84 - 8);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v85 = v7;
  v8 = sub_10000E408();
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10003D69C();
  v88 = v10;
  sub_1000A3464();
  __chkstk_darwin(v11);
  sub_1000A34C8();
  v87 = (void *)v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  v82 = (uint64_t)&v78 - v14;
  v15 = sub_1000055B0(&qword_1002B4220);
  sub_10000E490();
  __chkstk_darwin(v16);
  sub_1000F0204();
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v17);
  sub_10003D69C();
  v89 = v18;
  sub_1000A3464();
  __chkstk_darwin(v19);
  v21 = (char *)&v78 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v78 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v78 - v26;
  RapportEndpoint.identifier.getter(v8, (uint64_t)&protocol witness table for CompanionLinkDevice);
  v29 = v28;
  v31 = v30;
  v91 = v2;
  v32 = v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v32, (uint64_t)&v96);
  v90 = v32;
  v34 = *(_QWORD *)(v32 + 16);
  v33 = v32 + 16;
  sub_100041CD4(v29, v31, v34);
  v35 = v5;
  swift_bridgeObjectRelease();
  sub_100022838(v5, (uint64_t)v24, type metadata accessor for CompanionLinkDevice);
  sub_100184718();
  v36 = v0 + *(int *)(v15 + 48);
  v92 = v27;
  sub_1000FB4A8((uint64_t)v27, v0, &qword_1002A9200);
  v37 = sub_1001847D8();
  sub_1000FB4A8(v37, v38, &qword_1002A9200);
  v39 = sub_1001846C0(v0, 1, v8);
  if (v41)
  {
    sub_10018472C(v39, &qword_1002A9200);
    v40 = sub_1001846C0(v36, 1, v8);
    if (v41)
    {
      sub_10018477C(v40, &qword_1002A9200);
LABEL_22:
      sub_100184688((uint64_t)v92, &qword_1002A9200);
      sub_10000E4E0();
      return;
    }
    goto LABEL_9;
  }
  sub_1000FB4A8(v0, (uint64_t)v21, &qword_1002A9200);
  v42 = sub_1001846C0(v36, 1, v8);
  if (v41)
  {
    sub_10018472C(v42, &qword_1002A9200);
    sub_1001847C8(v43, type metadata accessor for CompanionLinkDevice);
LABEL_9:
    v83 = v33;
    sub_10018477C(v40, &qword_1002B4220);
    goto LABEL_10;
  }
  v83 = v33;
  v75 = v82;
  sub_10005F3FC(v36, v82, type metadata accessor for CompanionLinkDevice);
  v76 = static CompanionLinkDevice.== infix(_:_:)((uint64_t)v21, v75);
  sub_100184294(v75, type metadata accessor for CompanionLinkDevice);
  sub_10018474C((uint64_t)v24);
  sub_100184294((uint64_t)v21, type metadata accessor for CompanionLinkDevice);
  sub_10018474C(v0);
  if ((v76 & 1) != 0)
    goto LABEL_22;
LABEL_10:
  v44 = type metadata accessor for P2PDevice.Properties(0);
  v45 = v90;
  if (*(_BYTE *)(v90 + *(int *)(v44 + 40)) != 1)
  {
LABEL_21:
    RapportEndpoint.identifier.getter(v8, (uint64_t)&protocol witness table for CompanionLinkDevice);
    v77 = v89;
    sub_100022838(v35, v89, type metadata accessor for CompanionLinkDevice);
    sub_100184718();
    sub_10000B2F8(v45, (uint64_t)v95, 33);
    sub_1000C281C(v77);
    swift_endAccess(v95);
    sub_100182B28();
    goto LABEL_22;
  }
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v46 = v84;
  v47 = sub_100006FB4(v84, (uint64_t)qword_1002B6D10);
  v48 = v85;
  v49 = v86;
  sub_10003D664(v85, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 16));
  v50 = (uint64_t)v87;
  sub_1001846D4(v35, (uint64_t)v87);
  v51 = v88;
  sub_1001846D4(v35, v88);
  swift_retain();
  v53 = Logger.logObject.getter(v52);
  LODWORD(v82) = static os_log_type_t.default.getter(v53, v54);
  if (!os_log_type_enabled(v53, (os_log_type_t)v82))
  {
    sub_10002645C();
    sub_100184294(v50, type metadata accessor for CompanionLinkDevice);
    sub_100184294(v51, type metadata accessor for CompanionLinkDevice);

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v46);
    goto LABEL_21;
  }
  v80 = v35;
  v81 = v53;
  v55 = sub_10000797C(42);
  v79 = sub_10000797C(128);
  v95[0] = v79;
  *(_DWORD *)v55 = 136446978;
  swift_bridgeObjectRetain();
  v94 = sub_100184734(v56, v57, v95);
  sub_10004327C((uint64_t)&v94, (uint64_t)v95, v58, v55 + 12);
  sub_10002645C();
  sub_10000E568();
  *(_WORD *)(v55 + 12) = 2082;
  if (!HIDWORD(v93))
  {
    v59 = RPDeviceChangeFlagsCopyDescription(v93);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v59);

    v94 = sub_100184784();
    sub_10004327C((uint64_t)&v94, (uint64_t)v95, v60, v55 + 22);
    sub_10000E4A0();
    *(_WORD *)(v55 + 22) = 2082;
    v61 = (uint64_t)v87;
    v62 = v87;
    v63 = CompanionLinkDevice.statusFlags.getter();
    v64 = RPStatusFlagsCopyDescription((unint64_t)v63);
    sub_10000E530((uint64_t)v64);

    v94 = sub_100184784();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v55 + 24);
    sub_10000E4A0();
    sub_100184294(v61, type metadata accessor for CompanionLinkDevice);
    *(_WORD *)(v55 + 32) = 2082;
    RapportEndpoint.activityLevel.getter(v8, (uint64_t)&protocol witness table for CompanionLinkDevice);
    if (v65 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      v67 = v85;
      v66 = v86;
      v68 = v81;
      if (v65 <= 0x7FFFFFFF)
      {
        v69 = RPActivityLevelCopyDescription(v65);
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        v94 = sub_100006FCC(v70, v72, v95);
        sub_10004327C((uint64_t)&v94, (uint64_t)v95, v73, v55 + 42);
        sub_1000267C4();
        sub_100184294(v88, type metadata accessor for CompanionLinkDevice);
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v82, "%{public}s: Device Changed [%{public}s] SF <%{public}s>, AL %{public}s", (uint8_t *)v55, 0x2Au);
        v74 = v79;
        swift_arrayDestroy(v79, 4, (char *)&type metadata for Any + 8);
        sub_100007958(v74);
        sub_100007958(v55);

        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v67, v84);
        v35 = v80;
        v45 = v90;
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

void sub_10017FD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  CompanionLink::RapportSourceVersion v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CompanionLink::RapportSourceVersion v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v5 = sub_10000E408();
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10003D69C();
  v90 = v7;
  sub_1000A3464();
  __chkstk_darwin(v8);
  v10 = (char *)&v84 - v9;
  __chkstk_darwin(v11);
  sub_1000A34C8();
  v88 = (void *)v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  sub_1000A34C8();
  v91 = v14;
  sub_1000A3464();
  __chkstk_darwin(v15);
  v87 = (uint64_t)&v84 - v16;
  sub_1000A3464();
  __chkstk_darwin(v17);
  v19 = (char *)&v84 - v18;
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v20);
  sub_1000268CC();
  RapportEndpoint.identifier.getter(v5, (uint64_t)&protocol witness table for CompanionLinkDevice);
  sub_1001847EC(v4);
  v89 = v5;
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v1, 0, 1, v5);
  v21 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v93, 33);
  sub_1000C281C(v1);
  swift_endAccess(v93);
  sub_100182B28();
  sub_100181E8C();
  v23 = v22;
  *(_BYTE *)(v21 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 40)) = v22 & 1;
  if ((v23 & 1) == 0)
  {
    if (qword_1002A9800 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    v49 = sub_10000F6E4();
    sub_100006FB4(v49, (uint64_t)qword_1002B6D10);
    sub_1001846D4(v4, (uint64_t)v10);
    v50 = v90;
    sub_1001846D4(v4, v90);
    swift_retain();
    v52 = Logger.logObject.getter(v51);
    v54 = static os_log_type_t.default.getter(v52, v53);
    if (os_log_type_enabled(v52, v54))
    {
      v55 = sub_10000797C(32);
      v91 = sub_10000797C(96);
      v93[0] = v91;
      *(_DWORD *)v55 = 136446722;
      v56 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label);
      v57 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label + 8);
      sub_10005FFC0();
      v92 = sub_100006FCC(v56, v57, v93);
      sub_1000E4B3C((uint64_t)&v92, (uint64_t)v93, v58, v55 + 12);
      sub_100026AEC();
      sub_1000267C4();
      *(_WORD *)(v55 + 12) = 2082;
      v59 = v89;
      RapportEndpoint.model.getter(v89, (uint64_t)&protocol witness table for CompanionLinkDevice);
      v92 = sub_100026754(v60, v61);
      sub_1000E4B3C((uint64_t)&v92, (uint64_t)v93, v62, v55 + 22);
      sub_10000E420();
      sub_100184294((uint64_t)v10, type metadata accessor for CompanionLinkDevice);
      *(_WORD *)(v55 + 22) = 2082;
      v63 = v90;
      v64.rawValue = RapportEndpoint.sourceVersion.getter(v59, (uint64_t)&protocol witness table for CompanionLinkDevice).rawValue;
      v65 = (id)RPVersionToSourceVersionString(v64.rawValue);
      if (v65)
      {
        v66 = v65;
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        v69 = v68;

      }
      else
      {
        v67 = 0;
        v69 = 0xE000000000000000;
      }
      v92 = sub_100006FCC(v67, v69, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v55 + 24);
      sub_10000E410();
      sub_100184294(v63, type metadata accessor for CompanionLinkDevice);
      _os_log_impl((void *)&_mh_execute_header, v52, v54, "%{public}s: Ineligible Device Found Md %{public}s, SV %{public}s", (uint8_t *)v55, 0x20u);
      v83 = v91;
      swift_arrayDestroy(v91, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v83);
      sub_100007958(v55);
    }
    else
    {
      sub_100026AEC();
      sub_1001846B8((uint64_t)v10);
      sub_1001846B8(v50);
    }

    goto LABEL_21;
  }
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v24 = sub_10000F6E4();
  sub_100006FB4(v24, (uint64_t)qword_1002B6D10);
  sub_1001846D4(v4, (uint64_t)v19);
  v25 = v87;
  sub_1001846D4(v4, v87);
  v26 = v91;
  sub_1001846D4(v4, v91);
  v27 = v88;
  sub_1001846D4(v4, (uint64_t)v88);
  swift_retain();
  v29 = (os_log_t)Logger.logObject.getter(v28);
  v31 = static os_log_type_t.default.getter(v29, v30);
  if (!os_log_type_enabled(v29, (os_log_type_t)v31))
  {
    sub_100026AEC();
    sub_1001846B8((uint64_t)v19);
    sub_1001846B8(v25);
    sub_1001846B8(v26);
    sub_1001846B8((uint64_t)v27);
LABEL_17:

LABEL_21:
    sub_10000E4E0();
    return;
  }
  v85 = v29;
  LODWORD(v90) = v31;
  v32 = sub_10000797C(52);
  v86 = sub_10000797C(160);
  v93[0] = v86;
  *(_DWORD *)v32 = 136447234;
  v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label);
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label + 8);
  swift_bridgeObjectRetain();
  v92 = sub_100006FCC(v33, v34, v93);
  sub_1001846E4(v92, v35, v36, v32 + 12);
  sub_100026AEC();
  swift_bridgeObjectRelease();
  *(_WORD *)(v32 + 12) = 2082;
  v37 = CompanionLinkDevice.statusFlags.getter();
  v38 = RPStatusFlagsCopyDescription((unint64_t)v37);
  sub_10000E530((uint64_t)v38);

  v92 = sub_100184734(v39, v40, v93);
  sub_1001846E4(v92, v41, v42, v32 + 22);
  sub_10000E568();
  sub_1001846B8((uint64_t)v19);
  *(_WORD *)(v32 + 22) = 2082;
  v43 = v89;
  RapportEndpoint.model.getter(v89, (uint64_t)&protocol witness table for CompanionLinkDevice);
  v92 = sub_100026754(v44, v45);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v32 + 24);
  sub_10000E420();
  sub_1001846B8(v25);
  *(_WORD *)(v32 + 32) = 2082;
  v46.rawValue = RapportEndpoint.sourceVersion.getter(v43, (uint64_t)&protocol witness table for CompanionLinkDevice).rawValue;
  v47 = (id)RPVersionToSourceVersionString(v46.rawValue);
  if (v47)
  {
    v48 = v47;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v47);

  }
  v70 = sub_1001847D8();
  v92 = sub_100006FCC(v70, v71, v72);
  sub_1001846E4(v92, v73, v74, v32 + 42);
  v75 = sub_10000E420();
  sub_1001847E4(v75, type metadata accessor for CompanionLinkDevice);
  *(_WORD *)(v32 + 42) = 2082;
  RapportEndpoint.activityLevel.getter(v43, (uint64_t)&protocol witness table for CompanionLinkDevice);
  if (v76 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v76 <= 0x7FFFFFFF)
  {
    v77 = RPActivityLevelCopyDescription(v76);
    sub_10000E530((uint64_t)v77);

    v92 = sub_100184734(v78, v79, v93);
    sub_1000E4B3C((uint64_t)&v92, (uint64_t)v93, v80, v32 + 52);
    v81 = sub_10000E568();
    sub_1001847C8(v81, type metadata accessor for CompanionLinkDevice);
    v29 = v85;
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v90, "%{public}s: Device Found SF <%{public}s>, Md %{public}s, SV %{public}s, AL %{public}s", (uint8_t *)v32, 0x34u);
    v82 = v86;
    swift_arrayDestroy(v86, 5, (char *)&type metadata for Any + 8);
    sub_100007958(v82);
    sub_100007958(v32);
    goto LABEL_17;
  }
  __break(1u);
}

void sub_1001804AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  sub_10002626C();
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = sub_10000E408();
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_10002671C();
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - v9;
  RapportEndpoint.identifier.getter(v11, (uint64_t)&protocol witness table for CompanionLinkDevice);
  v13 = v12;
  v14 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v36, 33);
  sub_1001AA084(v13);
  swift_endAccess(v36);
  sub_10002D89C();
  sub_1001846C0(v5, 1, v6);
  if (v15)
  {
    sub_100184688(v5, &qword_1002A9200);
  }
  else
  {
    sub_10005F3FC(v5, (uint64_t)v10, type metadata accessor for CompanionLinkDevice);
    if (*(_BYTE *)(v14 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 40)) == 1)
    {
      if (qword_1002A9800 != -1)
        swift_once(&qword_1002A9800, sub_100026BF4);
      v16 = sub_10000F6E4();
      sub_100006FB4(v16, (uint64_t)qword_1002B6D10);
      sub_100022838((uint64_t)v10, (uint64_t)v1, type metadata accessor for CompanionLinkDevice);
      swift_retain();
      v18 = Logger.logObject.getter(v17);
      v20 = static os_log_type_t.default.getter(v18, v19);
      if (os_log_type_enabled(v18, v20))
      {
        v21 = sub_10000797C(22);
        v34 = sub_10000797C(64);
        v36[0] = v34;
        *(_DWORD *)v21 = 136446466;
        v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label);
        v23 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label + 8);
        swift_bridgeObjectRetain();
        v35 = sub_100006FCC(v22, v23, v36);
        sub_10004327C((uint64_t)&v35, (uint64_t)v36, v24, v21 + 12);
        sub_10002645C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2082;
        v33 = v21 + 14;
        v25 = CompanionLinkDevice.statusFlags.getter();
        v26 = RPStatusFlagsCopyDescription((unint64_t)v25);
        v27 = sub_10000E530((uint64_t)v26);
        v29 = v28;

        v35 = sub_100006FCC(v27, v29, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v33);
        swift_bridgeObjectRelease();
        sub_1001847E4(v30, type metadata accessor for CompanionLinkDevice);
        _os_log_impl((void *)&_mh_execute_header, v18, v20, "%{public}s: Device Lost SF <%{public}s>", (uint8_t *)v21, 0x16u);
        v31 = v34;
        swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
        sub_100007958(v31);
        sub_100007958(v21);
      }
      else
      {
        v32 = sub_10002645C();
        sub_1001847E4(v32, type metadata accessor for CompanionLinkDevice);
      }

    }
    RapportDeviceChangeFlags.removed.unsafeMutableAddressor();
    sub_100182B28();
    sub_100184294((uint64_t)v10, type metadata accessor for CompanionLinkDevice);
  }
  sub_10000E4E0();
}

void sub_1001807C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_10002626C();
  v3 = v2;
  v4 = sub_10000E408();
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10000E5DC();
  v40 = v6;
  v7 = sub_1000055B0(&qword_1002B4220);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_1000601B4();
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_1000268BC();
  v12 = v10 - v11;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v40 - v17;
  v42 = v0;
  v19 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v43, 1);
  sub_100143B88(*(_QWORD *)(v19 + 16), (uint64_t)v18);
  v41 = v3;
  sub_100022838(v3, (uint64_t)v16, type metadata accessor for CompanionLinkDevice);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v16, 0, 1, v4);
  v20 = v1 + *(int *)(v7 + 48);
  sub_1000FB4A8((uint64_t)v18, v1, &qword_1002A9200);
  sub_1000FB4A8((uint64_t)v16, v20, &qword_1002A9200);
  sub_1001846C0(v1, 1, v4);
  if (v22)
  {
    sub_100184704((uint64_t)v16);
    sub_100184704((uint64_t)v18);
    v21 = sub_1001846C0(v20, 1, v4);
    if (v22)
    {
      sub_10018472C(v21, &qword_1002A9200);
      goto LABEL_12;
    }
LABEL_9:
    sub_10018472C(v21, &qword_1002B4220);
LABEL_11:
    ObservableObjectPublisher.send()();
    v26 = sub_1000055B0(&qword_1002B4228);
    v27 = sub_1000055B0(&qword_1002B4230);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = *(unsigned __int8 *)(v28 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v32 + 16) = xmmword_10021BBA0;
    v33 = (_QWORD *)(v32 + v31);
    v34 = v32 + v31 + *(int *)(v27 + 48);
    v35 = v41;
    RapportEndpoint.identifier.getter(v4, (uint64_t)&protocol witness table for CompanionLinkDevice);
    *v33 = v36;
    v33[1] = v37;
    sub_100022838(v35, v34, type metadata accessor for CompanionLinkDevice);
    v38 = Dictionary.init(dictionaryLiteral:)(v32, &type metadata for String, v4, &protocol witness table for String);
    v39 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v19 + 16) = v38;
    swift_bridgeObjectRelease(v39);
    sub_100182B28();
    goto LABEL_12;
  }
  sub_1000FB4A8(v1, v12, &qword_1002A9200);
  sub_1001846C0(v20, 1, v4);
  if (v22)
  {
    sub_100184704((uint64_t)v16);
    sub_100184704((uint64_t)v18);
    sub_1001847C8(v23, type metadata accessor for CompanionLinkDevice);
    goto LABEL_9;
  }
  v24 = v40;
  sub_10005F3FC(v20, v40, type metadata accessor for CompanionLinkDevice);
  v25 = static CompanionLinkDevice.== infix(_:_:)(v12, v24);
  sub_1001846B8(v24);
  sub_10018474C((uint64_t)v16);
  sub_10018474C((uint64_t)v18);
  sub_1001846B8(v12);
  sub_10018474C(v1);
  if ((v25 & 1) == 0)
    goto LABEL_11;
LABEL_12:
  sub_10000E4E0();
}

void sub_100180AF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  sub_10002626C();
  v46 = sub_1000055B0(&qword_1002B1298);
  sub_10000E490();
  __chkstk_darwin(v1);
  sub_10003D69C();
  v45 = v2;
  sub_1000A3464();
  __chkstk_darwin(v3);
  v44 = (uint64_t *)((char *)&v39 - v4);
  sub_1000A3464();
  __chkstk_darwin(v5);
  sub_1000A34C8();
  v43 = v6;
  sub_1000A3464();
  __chkstk_darwin(v7);
  v42 = (char *)&v39 - v8;
  v9 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v50);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v49 = _swiftEmptyArrayStorage;
    sub_10005FFC0();
    sub_100058678();
    v12 = sub_100071A78(v10);
    if ((v12 & 0x8000000000000000) == 0)
    {
      v14 = v12;
      if (v12 < 1 << *(_BYTE *)(v10 + 32))
      {
        v15 = v10 + 64;
        v40 = v10 + 64;
        v41 = v10;
        while ((*(_QWORD *)(v15 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
        {
          if ((_DWORD)v13 != *(_DWORD *)(v10 + 36))
            goto LABEL_21;
          v47 = v11;
          v48 = v13;
          v16 = v46;
          v17 = v42;
          v18 = (uint64_t)&v42[*(int *)(v46 + 48)];
          v19 = *(_QWORD *)(v10 + 56);
          v20 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v14);
          v22 = *v20;
          v21 = v20[1];
          v23 = sub_10000E408();
          sub_10018480C(v19 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v14, v18);
          *v17 = v22;
          v17[1] = v21;
          v24 = v43;
          *v43 = v22;
          v24[1] = v21;
          sub_10018480C(v18, (uint64_t)v24 + *(int *)(v16 + 48));
          v25 = (uint64_t)v24;
          v26 = v44;
          sub_10005FA70(v25, (uint64_t)v44, &qword_1002B1298);
          sub_10003B09C(v21);
          sub_100184704((uint64_t)v17);
          v27 = *(int *)(v16 + 48);
          v28 = v45;
          v29 = (uint64_t)v45 + v27;
          v30 = v26[1];
          *v45 = *v26;
          v28[1] = v30;
          sub_10018480C((uint64_t)v26 + v27, v29);
          v31 = CompanionLinkDevice.description.getter();
          v33 = v32;
          sub_100184294(v29, type metadata accessor for CompanionLinkDevice);
          sub_100184704((uint64_t)v26);
          v34 = v49;
          if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
          {
            sub_100058678();
            v34 = v49;
          }
          v35 = v34[2];
          v10 = v41;
          if (v35 >= v34[3] >> 1)
          {
            sub_100058678();
            v34 = v49;
          }
          v34[2] = v35 + 1;
          v36 = &v34[2 * v35];
          v36[4] = v31;
          v36[5] = v33;
          v37 = -1 << *(_BYTE *)(v10 + 32);
          if ((uint64_t)v14 >= -v37)
            goto LABEL_22;
          v15 = v40;
          if ((*(_QWORD *)(v40 + 8 * (v14 >> 6)) & (1 << v14)) == 0)
            goto LABEL_23;
          if ((_DWORD)v48 != *(_DWORD *)(v10 + 36))
            goto LABEL_24;
          v38 = _HashTable.occupiedBucket(after:)(v14, v40, ~v37);
          v11 = v47 - 1;
          if (v47 == 1)
          {
            sub_1000267C4();
            goto LABEL_19;
          }
          v14 = v38;
          if ((v38 & 0x8000000000000000) == 0)
          {
            v13 = *(unsigned int *)(v10 + 36);
            if (v38 < 1 << *(_BYTE *)(v10 + 32))
              continue;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
  else
  {
LABEL_19:
    sub_10000E4E0();
  }
}

void static P2PDevice.makeNotificationIcon(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSURL *v30;
  const __CFURL *v31;
  const __CFURL *v32;
  uint64_t v33;
  __CFString *v34;
  CGImageDestination *v35;
  id v36;
  void *v37;
  CGImageDestination *v38;
  CGImageRef v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_10002626C();
  v3 = v2;
  v4 = sub_1001846FC();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_100065E48();
  v47 = sub_10000E440();
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  sub_1000F0204();
  v7 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v7 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  v12 = sub_100181120();
  v13 = objc_msgSend((id)objc_opt_self(ISImageDescriptor), "imageDescriptorNamed:", v12);

  sub_100181130();
  v14 = v13;
  v15 = UTType.identifier.getter(v14);
  v17 = sub_100182DEC(v15, v16);
  v18 = sub_100182E5C(v17, (uint64_t)v14);

  if (!v18)
  {

    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v3, 1, 1, v7);
    return;
  }
  v44 = v7;
  v45 = v3;
  v43 = v18;
  v19 = NSTemporaryDirectory();
  v20 = sub_10000E530((uint64_t)v19);
  v22 = v21;

  v24 = UUID.init()(v23);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v47);
  sub_100182EDC(v25, v27, v20, v22);
  sub_1000267C4();
  swift_bridgeObjectRelease();
  v28 = sub_10000E4F8();
  URL.init(fileURLWithPath:)(v28, v29);
  sub_10000E420();
  URL._bridgeToObjectiveC()(v30);
  v32 = v31;
  v33 = ((uint64_t (*)(void))static UTType.png.getter)();
  UTType.identifier.getter(v33);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v1, v49);
  sub_10000E4F8();
  v34 = (__CFString *)String._bridgeToObjectiveC()();
  sub_10000E420();
  v35 = CGImageDestinationCreateWithURL(v32, v34, 1uLL, 0);

  if (!v35)
  {
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v11, v44);

    v40 = v45;
    v41 = 1;
    v42 = v44;
LABEL_10:
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v40, v41, 1, v42);
    sub_10000E4E0();
    return;
  }
  v36 = objc_msgSend(v43, "CGImage");
  if (v36)
  {
    v37 = v36;
    v38 = (CGImageDestination *)sub_10000E4F8();
    CGImageDestinationAddImage(v38, v39, 0);

    LODWORD(v37) = CGImageDestinationFinalize(v35);
    if ((_DWORD)v37)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v45, v11, v44);
      v40 = v45;
      v41 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v11, v44);
      v40 = v45;
      v41 = 1;
    }
    v42 = v44;
    goto LABEL_10;
  }
  __break(1u);
}

id sub_100181120()
{
  return kISImageDescriptorNotification;
}

unint64_t sub_100181130()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B3F90;
  if (!qword_1002B3F90)
  {
    v1 = objc_opt_self(ISIcon);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B3F90);
  }
  return result;
}

void sub_10018116C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  char v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  int *v49;

  sub_10002626C();
  v5 = v4;
  v7 = v6;
  v8 = sub_1001846FC();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000601B4();
  v10 = sub_1000055B0(&qword_1002B4250);
  sub_10000E490();
  __chkstk_darwin(v11);
  sub_1000F0204();
  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_10002671C();
  __chkstk_darwin(v13);
  sub_10018476C();
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - v15;
  if (*v7 != *v5)
    goto LABEL_39;
  if (v7[1] != v5[1])
    goto LABEL_39;
  sub_1000F1144();
  if ((v17 & 1) == 0)
    goto LABEL_39;
  v18 = v7[4];
  v19 = v5[4];
  if (v18)
  {
    if (!v19)
      goto LABEL_39;
    v20 = v7[3];
    v21 = v5[3];
    v22 = v20 == v21 && v18 == v19;
    if (!v22 && (sub_100184840(v20, v18, v21, v19) & 1) == 0)
      goto LABEL_39;
  }
  else if (v19)
  {
    goto LABEL_39;
  }
  v49 = (int *)sub_10006028C();
  if ((static UniversalControlDevice.DeviceType.== infix(_:_:)((char *)v7 + v49[8], (char *)v5 + v49[8]) & 1) == 0)
    goto LABEL_39;
  v23 = sub_100184814(v49[9]);
  if (static UniversalControlUUID.compare(lhs:rhs:)(v23, v24, v25, v26)
    || *((unsigned __int8 *)v7 + v49[10]) != *((unsigned __int8 *)v5 + v49[10]))
  {
    goto LABEL_39;
  }
  v27 = sub_100184814(v49[11]);
  if (v27 != v29 || v28 != v30)
  {
    v33 = sub_100184840(v27, v28, v29, v30);
    v31 = v49;
    if ((v33 & 1) == 0)
      goto LABEL_39;
  }
  sub_10019881C(*(_QWORD *)((char *)v7 + v31[12]), *(_QWORD *)((char *)v5 + v31[12]));
  if ((v34 & 1) == 0)
    goto LABEL_39;
  v35 = v49[13];
  v36 = (_QWORD *)((char *)v7 + v35);
  v37 = *((_BYTE *)v7 + v35 + 8);
  v38 = (_QWORD *)((char *)v5 + v35);
  v39 = *((unsigned __int8 *)v5 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_39;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_39;
  }
  if (*(_QWORD *)((char *)v7 + v49[14]) == *(_QWORD *)((char *)v5 + v49[14])
    && *(_QWORD *)((char *)v7 + v49[15]) == *(_QWORD *)((char *)v5 + v49[15]))
  {
    v40 = (uint64_t)v7 + v49[16];
    v41 = v49;
    sub_1000FB4A8(v40, (uint64_t)v16, &qword_1002AA5F0);
    sub_100184804((uint64_t)v5 + v41[16], v3);
    v42 = v0 + *(int *)(v10 + 48);
    sub_100184804((uint64_t)v16, v0);
    sub_100184804(v3, v42);
    sub_1001846C0(v0, 1, v8);
    if (v22)
    {
      sub_1001846DC(v3);
      sub_1001846DC((uint64_t)v16);
      v43 = sub_1001846C0(v42, 1, v8);
      if (v22)
      {
        sub_10018477C(v43, &qword_1002AA5F0);
        goto LABEL_39;
      }
    }
    else
    {
      sub_1000FB4A8(v0, v2, &qword_1002AA5F0);
      sub_1001846C0(v42, 1, v8);
      if (!v44)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v42, v8);
        sub_10000E330(&qword_1002B4258, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
        dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v8, v45);
        v46 = *(void (**)(uint64_t))(v9 + 8);
        v47 = sub_1001847D8();
        v46(v47);
        sub_1001846DC(v3);
        sub_1001846DC((uint64_t)v16);
        ((void (*)(uint64_t, uint64_t))v46)(v2, v8);
        sub_1001846DC(v0);
        goto LABEL_39;
      }
      sub_1001846DC(v3);
      sub_1001846DC((uint64_t)v16);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v2, v8);
    }
    sub_10018477C(v43, &qword_1002B4250);
  }
LABEL_39:
  sub_10000E4E0();
}

void sub_100181510()
{
  Swift::UInt64 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char *v22;
  Swift::UInt v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  sub_10002626C();
  v3 = v2;
  v4 = sub_1001846FC();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000268CC();
  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  sub_10003AFBC();
  v10 = sub_10000E4F8();
  sub_10018430C(v10, v11);
  sub_10000E420();
  v12 = v0[4];
  if (v12)
  {
    v13 = v0[3];
    sub_10000E58C(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(v3, v13, v12);
    sub_10000E4A0();
  }
  else
  {
    sub_10000E58C(0);
  }
  v14 = (int *)sub_10006028C();
  v15 = sub_1001846F4();
  sub_10000E330(&qword_1002B4240, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice.DeviceType, (uint64_t)&protocol conformance descriptor for UniversalControlDevice.DeviceType);
  dispatch thunk of Hashable.hash(into:)(v3, v15, v16);
  v26 = *(_OWORD *)((char *)v0 + v14[9]);
  Hasher.combine(bytes:)(&v26, &v27);
  Hasher._combine(_:)(*((_BYTE *)v0 + v14[10]));
  v17 = *(Swift::UInt64 *)((char *)v0 + v14[11] + 8);
  swift_bridgeObjectRetain();
  v18 = sub_10000E4F8();
  String.hash(into:)(v18, v19, v17);
  sub_10002D89C();
  sub_10003AFBC();
  v20 = (__int128 *)sub_10000E4F8();
  sub_100083D20(v20, v21);
  sub_10000E420();
  v22 = (char *)v0 + v14[13];
  if (v22[8] == 1)
  {
    sub_10000E58C(0);
  }
  else
  {
    v23 = *(_QWORD *)v22;
    sub_10000E58C(1u);
    Hasher._combine(_:)(v23);
  }
  Hasher._combine(_:)(*(Swift::UInt64 *)((char *)v0 + v14[14]));
  Hasher._combine(_:)(*(Swift::UInt64 *)((char *)v0 + v14[15]));
  sub_1000FB4A8((uint64_t)v0 + v14[16], v9, &qword_1002AA5F0);
  sub_1001846C0(v9, 1, v4);
  if (v24)
  {
    sub_10000E58C(0);
  }
  else
  {
    sub_10003D664(v1, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    sub_10000E58C(1u);
    sub_10000E330(&qword_1002B4248, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
    dispatch thunk of Hashable.hash(into:)(v3, v4, v25);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  }
  sub_10000E4E0();
}

void sub_1001817A4(uint64_t a1)
{
  sub_10000E5C0(a1);
  sub_100181510();
  Hasher._finalize()();
  sub_10000E59C();
}

Swift::Int sub_1001817DC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100181510();
  return Hasher._finalize()();
}

void P2PDevice.dateCreated.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  sub_100015540();
}

void P2PDevice.dateModified.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  sub_100015540();
}

void P2PDevice.id.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  sub_10006028C();
  sub_100015540();
}

uint64_t P2PDevice.label.getter()
{
  sub_10003AFBC();
  return sub_10000E4F8();
}

void sub_1001818C8()
{
  uint64_t v0;
  int *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  sub_10002626C();
  v40 = v0;
  v4 = v3;
  v6 = v5;
  v49 = v5 >> 16;
  v50 = v5 >> 8;
  v47 = HIDWORD(v5);
  v48 = v5 >> 24;
  v45 = HIWORD(v5);
  v46 = v5 >> 40;
  v44 = HIBYTE(v5);
  v42 = v7;
  v43 = v3 >> 8;
  v8 = v3 >> 16;
  v9 = v3 >> 24;
  v38 = v3 >> 40;
  v39 = HIDWORD(v3);
  v36 = HIBYTE(v3);
  v37 = HIWORD(v3);
  v41 = *(_QWORD *)(sub_10000E440() - 8);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10000E5DC();
  sub_1001847A4();
  sub_10000E490();
  __chkstk_darwin(v11);
  sub_100065E48();
  v12 = mach_continuous_time();
  v13 = (uint64_t)v2 + v1[16];
  v14 = sub_1001846FC();
  sub_1000B9BA0(v13, v15, v16, v14);
  v17 = sub_10000E408();
  v18 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v17, &protocol witness table for String);
  v19 = (char *)v2 + v1[8];
  v20 = enum case for UniversalControlDevice.DeviceType.other(_:);
  v21 = sub_1001846F4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  v22 = *RapportActivityLevel.unknown.unsafeMutableAddressor();
  *v2 = v12;
  v2[1] = v12;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v18;
  v23 = (char *)v2 + v1[9];
  *v23 = v6;
  v23[1] = v50;
  v23[2] = v49;
  v23[3] = v48;
  v23[4] = v47;
  v23[5] = v46;
  v23[6] = v45;
  v23[7] = v44;
  v23[8] = v4;
  v23[9] = v43;
  v23[10] = v8;
  v23[11] = v9;
  v23[12] = v39;
  v23[13] = v38;
  v23[14] = v37;
  v23[15] = v36;
  *((_BYTE *)v2 + v1[10]) = 0;
  v24 = (uint64_t *)((char *)v2 + v1[11]);
  *v24 = 0;
  v24[1] = 0xE000000000000000;
  *(uint64_t *)((char *)v2 + v1[12]) = (uint64_t)&_swiftEmptySetSingleton;
  v25 = (char *)v2 + v1[13];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  *(uint64_t *)((char *)v2 + v1[14]) = 0;
  *(uint64_t *)((char *)v2 + v1[15]) = v22;
  sub_10005F3FC((uint64_t)v2, v40 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, type metadata accessor for P2PDevice.Properties);
  v26 = UUID.init(uuid:)(v6, v50, v49, v48, v47, v46, v45, v44);
  v27 = UUID.uuidString.getter(v26);
  v29 = v28;
  sub_10018470C(v41);
  v30 = sub_1000599D0(8, v27, v29);
  v31 = static String._fromSubstring(_:)(v30);
  v33 = v32;
  sub_10000E420();
  v34._countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);
  sub_10000E568();
  v35 = (_QWORD *)(v40 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_label);
  *v35 = 542327881;
  v35[1] = 0xE400000000000000;
  *(_QWORD *)(v40 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_objectWillChange) = v42;
  sub_10000E4E0();
}

void P2PDevice.statusFlags.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  type metadata accessor for P2PDevice.Properties(0);
  sub_100015540();
}

void P2PDevice.activityLevel.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  type metadata accessor for P2PDevice.Properties(0);
  sub_100015540();
}

BOOL sub_100181C38()
{
  uint64_t v0;
  uint64_t v2;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v2);
  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) == 0;
}

void P2PDevice.typeIdentifier.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];

  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_1000268CC();
  v5 = v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v5, (uint64_t)v10);
  v6 = sub_10006028C();
  sub_1000FB4A8(v5 + *(int *)(v6 + 64), v2, &qword_1002AA5F0);
  v7 = sub_1001846FC();
  v8 = sub_1001846C0(v2, 1, v7);
  if (v9)
  {
    static UTType._appleDevice.getter(v8);
    sub_100184688(v2, &qword_1002AA5F0);
  }
  else
  {
    sub_10003D664(a1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32));
  }
  sub_10000B350();
}

void P2PDevice.deviceModel.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  swift_bridgeObjectRetain();
  sub_10000E4F8();
  sub_100015540();
}

uint64_t P2PDevice.deviceType.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v3);
  sub_10006028C();
  v1 = sub_1001846F4();
  return sub_1000265B0(v1);
}

uint64_t sub_100181DD0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return sub_100181E4C(v1, v2);
}

void P2PDevice.name.getter()
{
  uint64_t v0;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v0);
  type metadata accessor for P2PDevice.Properties(0);
  sub_10003AFBC();
  sub_10000E4F8();
  sub_100015540();
}

uint64_t sub_100181E4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)RapportDeviceChangeFlags.name.unsafeMutableAddressor();
  sub_100182020(a1, a2, *v4);
  return swift_bridgeObjectRelease(a2);
}

void sub_100181E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;

  sub_10002626C();
  v2 = sub_1001846F4();
  __chkstk_darwin(v2);
  sub_1000268BC();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - v7;
  v9 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v23);
  v10 = (uint64_t *)(v9 + *(int *)(sub_1001847A4() + 52));
  if (*((_BYTE *)v10 + 8))
    v11 = 0;
  else
    v11 = *v10;
  v12 = RapportSourceVersion.skyEchoAligned.unsafeMutableAddressor();
  if (v11 >= *v12)
  {
    v13 = sub_100184754((uint64_t)v12, v9 + *(int *)(v1 + 32));
    sub_100184740(v13, enum case for UniversalControlDevice.DeviceType.mac(_:));
    v14 = sub_100184760();
    sub_10012417C(v5);
    v15 = sub_10012417C((uint64_t)v8);
    if ((v14 & 1) != 0)
      goto LABEL_9;
    v16 = sub_100184754(v15, v9 + *(int *)(v1 + 32));
    sub_100184740(v16, enum case for UniversalControlDevice.DeviceType.iPad(_:));
    v17 = sub_100184760();
    sub_10012417C(v5);
    v18 = sub_10012417C((uint64_t)v8);
    if ((v17 & 1) != 0
      || (v19 = sub_100184754(v18, v9 + *(int *)(v1 + 32)),
          sub_100184740(v19, enum case for UniversalControlDevice.DeviceType.realityDevice(_:)),
          v20 = sub_100184760(),
          sub_10012417C(v5),
          sub_10012417C((uint64_t)v8),
          (v20 & 1) != 0))
    {
LABEL_9:
      P2PDevice.deviceModel.getter();
      v21 = String._bridgeToObjectiveC()();
      sub_10000E410();
      sub_100215C6C(v21);

    }
  }
  sub_10000E4E0();
}

uint64_t sub_100182020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE v16[24];

  v7 = v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v16, 1);
  result = type metadata accessor for P2PDevice.Properties(0);
  v9 = (uint64_t *)(v7 + *(int *)(result + 44));
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != a1 || v11 != a2)
  {
    v13 = result;
    result = sub_100184840(*v9, v9[1], a1, a2);
    if ((result & 1) == 0)
    {
      v14 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v14 = v10 & 0xFFFFFFFFFFFFLL;
      if (!v14
        || (result = (uint64_t)RapportDeviceChangeFlags.name.unsafeMutableAddressor(), (*(_QWORD *)result & ~a3) == 0))
      {
        sub_1001847D0();
        v15 = (uint64_t *)(v7 + *(int *)(v13 + 44));
        *v15 = a1;
        v15[1] = a2;
        sub_1000103C0();
        return sub_10000E420();
      }
    }
  }
  return result;
}

void sub_100182104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t);
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53[2];
  void *v54;
  uint64_t v55;
  _QWORD v56[6];

  sub_10002626C();
  v2 = sub_10000E408();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_100026738();
  __chkstk_darwin(v4);
  v48 = (uint64_t)&v43 - v5;
  v43 = v0;
  v6 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v55, 1);
  v45 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  sub_100043078(v56, v7);
  v51 = v56[0];
  v8 = v56[3];
  v9 = v56[4];
  v46 = v56[1];
  v47 = (unint64_t)(v56[2] + 64) >> 6;
  v44 = v7;
  sub_10003B09C(v7);
  v10 = &_swiftEmptySetSingleton;
  v11 = type metadata accessor for CompanionLinkDevice;
  if (!v9)
    goto LABEL_3;
LABEL_2:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v13 = v12 | (v8 << 6);
  while (1)
  {
    v28 = v48;
    sub_100022838(*(_QWORD *)(v51 + 56) + *(_QWORD *)(v49 + 72) * v13, v48, v11);
    sub_10005F3FC(v28, v1, v11);
    sub_10005FFC0();
    RapportEndpoint.serviceTypes.getter(v50, (uint64_t)&protocol witness table for CompanionLinkDevice);
    v54 = v10;
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v52 = v10;
      v31 = v1;
      v32 = v8;
      v33 = v11;
      v34 = (uint64_t *)(v29 + 40);
      do
      {
        v36 = *(v34 - 1);
        v35 = *v34;
        sub_1000103C0();
        sub_10011953C(v53, v36, v35);
        swift_bridgeObjectRelease(v53[1]);
        v34 += 2;
        --v30;
      }
      while (v30);
      sub_10002D89C();
      v37 = v54;
      v11 = v33;
      v8 = v32;
      v1 = v31;
    }
    else
    {
      sub_10002D89C();
      v37 = v10;
    }
    sub_100184294(v1, v11);
    sub_1000267C4();
    v10 = v37;
    if (v9)
      goto LABEL_2;
LABEL_3:
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      return;
    }
    if (v14 >= v47)
      goto LABEL_31;
    if (!*(_QWORD *)(v46 + 8 * v14))
    {
      sub_100184848();
      if (v15 == v16)
        goto LABEL_31;
      sub_100184828();
      if (!v17)
      {
        sub_100184848();
        if (v15 == v16)
          goto LABEL_31;
        sub_100184828();
        if (!v18)
        {
          sub_100184848();
          if (v15 == v16)
            goto LABEL_31;
          sub_100184828();
          if (!v19)
          {
            sub_100184848();
            if (v15 == v16)
              goto LABEL_31;
            sub_100184828();
            if (!v21)
            {
              if (v20 + 5 >= v47)
                goto LABEL_31;
              if (!*(_QWORD *)(v46 + 8 * (v20 + 5)))
                break;
            }
          }
        }
      }
    }
LABEL_23:
    sub_100184794();
    v9 = v25 & v24;
    v13 = v27 + (v26 << 6);
    v8 = v26;
  }
  v22 = v8 + 7;
  while (v22 < v47)
  {
    if (*(_QWORD *)(v46 + 8 * v22++))
      goto LABEL_23;
  }
LABEL_31:
  swift_bridgeObjectRelease(v44);
  swift_release();
  v38 = sub_10006028C();
  v39 = v45;
  v40 = sub_10003AFBC();
  sub_10019881C(v40, (uint64_t)v10);
  v42 = v41;
  sub_10000E420();
  if ((v42 & 1) == 0)
  {
    ObservableObjectPublisher.send()();
    *(_QWORD *)(v39 + *(int *)(v38 + 48)) = v10;
  }
  sub_1000267C4();
  sub_10000E4E0();
}

void sub_1001823F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v13, 1);
  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
  sub_10017F3D0(v2);
  v4 = v3;
  sub_10000E568();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(v4 + 32);
    do
    {
      v9 = *v7++;
      v8 = v9;
      if (v9 > v6)
        v6 = v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease(v4);
  v10 = sub_10006028C();
  v11 = v1 + *(int *)(v10 + 52);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0 || *(_QWORD *)v11 != v6)
  {
    sub_1001847D0();
    v12 = v1 + *(int *)(v10 + 52);
    *(_QWORD *)v12 = v6;
    *(_BYTE *)(v12 + 8) = 0;
  }
}

void sub_1001824D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];

  sub_10002626C();
  v39 = sub_1000055B0(&qword_1002B1298);
  sub_10000E490();
  __chkstk_darwin(v3);
  sub_100026738();
  __chkstk_darwin(v4);
  sub_10018476C();
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v34 - v6);
  v34 = v0;
  v8 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v42, 1);
  v36 = v8;
  v9 = *(_QWORD *)(v8 + 16);
  sub_100043078(v43, v9);
  v40 = v43[0];
  v41 = v43[3];
  v10 = v43[4];
  v37 = v43[1];
  v38 = (unint64_t)(v43[2] + 64) >> 6;
  v35 = v9;
  sub_10003B09C(v9);
  v11 = 0;
  if (!v10)
    goto LABEL_3;
LABEL_2:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v13 = v12 | (v41 << 6);
  while (1)
  {
    v21 = *(_QWORD *)(v40 + 56);
    v22 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * v13);
    v24 = *v22;
    v23 = v22[1];
    v25 = v21 + *(_QWORD *)(*(_QWORD *)(sub_10000E408() - 8) + 72) * v13;
    v26 = v39;
    sub_100022838(v25, (uint64_t)v7 + *(int *)(v39 + 48), type metadata accessor for CompanionLinkDevice);
    *v7 = v24;
    v7[1] = v23;
    sub_10005FA70((uint64_t)v7, (uint64_t)v2, &qword_1002B1298);
    v27 = *(int *)(v26 + 48);
    v28 = (uint64_t)v1 + v27;
    v29 = v2[1];
    *v1 = *v2;
    v1[1] = v29;
    sub_100022838((uint64_t)v2 + v27, (uint64_t)v1 + v27, type metadata accessor for CompanionLinkDevice);
    sub_1000103C0();
    v30 = (unint64_t)CompanionLinkDevice.statusFlags.getter();
    sub_100184294(v28, type metadata accessor for CompanionLinkDevice);
    v11 |= v30;
    sub_1001846DC((uint64_t)v2);
    if (v10)
      goto LABEL_2;
LABEL_3:
    v14 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      return;
    }
    if (v14 >= v38)
      goto LABEL_20;
    if (!*(_QWORD *)(v37 + 8 * v14))
    {
      if (v41 + 2 >= v38)
        goto LABEL_20;
      if (!*(_QWORD *)(v37 + 8 * (v41 + 2)))
      {
        if (v41 + 3 >= v38)
          goto LABEL_20;
        if (!*(_QWORD *)(v37 + 8 * (v41 + 3)))
        {
          if (v41 + 4 >= v38)
            goto LABEL_20;
          if (!*(_QWORD *)(v37 + 8 * (v41 + 4)))
          {
            if (v41 + 5 >= v38)
              goto LABEL_20;
            if (!*(_QWORD *)(v37 + 8 * (v41 + 5)))
              break;
          }
        }
      }
    }
LABEL_17:
    sub_100184794();
    v10 = v18 & v17;
    v13 = v20 + (v19 << 6);
    v41 = v19;
  }
  v15 = v41 + 6;
  while (v15 < v38)
  {
    if (*(_QWORD *)(v37 + 8 * v15++))
      goto LABEL_17;
  }
LABEL_20:
  swift_bridgeObjectRelease(v35);
  swift_release();
  v31 = type metadata accessor for P2PDevice.Properties(0);
  v32 = v36;
  if (*(_QWORD *)(v36 + *(int *)(v31 + 56)) != v11)
  {
    v33 = v31;
    ObservableObjectPublisher.send()();
    *(_QWORD *)(v32 + *(int *)(v33 + 56)) = v11;
  }
  sub_10000E4E0();
}

void sub_10018278C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  v1 = mach_continuous_time();
  v2 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v3, 1);
  if (*(_QWORD *)(v2 + 8) != v1)
  {
    sub_1001847D0();
    *(_QWORD *)(v2 + 8) = v1;
  }
}

void sub_1001827F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = v0;
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = sub_1001847D8();
  sub_1000FB4A8(v6, v7, &qword_1002A9200);
  v8 = sub_10000E408();
  sub_1001846C0(v5, 1, v8);
  if (v9)
  {
    sub_100184688(v5, &qword_1002A9200);
    v11 = *RapportActivityLevel.unknown.unsafeMutableAddressor();
  }
  else
  {
    RapportEndpoint.activityLevel.getter(v8, (uint64_t)&protocol witness table for CompanionLinkDevice);
    v11 = v10;
    sub_100184294(v5, type metadata accessor for CompanionLinkDevice);
  }
  v12 = v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v15, 1);
  v13 = type metadata accessor for P2PDevice.Properties(0);
  if (*(_QWORD *)(v12 + *(int *)(v13 + 60)) != v11)
  {
    v14 = v13;
    ObservableObjectPublisher.send()();
    *(_QWORD *)(v12 + *(int *)(v14 + 60)) = v11;
  }
}

void sub_100182910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;

  sub_10002626C();
  v5 = sub_1001846F4();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1000601B4();
  sub_1000055B0(&qword_1002B4238);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_100065E48();
  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10002671C();
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - v10;
  v12 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v28, 1);
  v13 = sub_1001847A4();
  sub_1000FB4A8(v12 + *(int *)(v13 + 64), (uint64_t)v11, &qword_1002AA5F0);
  v14 = sub_1001846FC();
  v15 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v14);
  sub_100184688((uint64_t)v11, &qword_1002AA5F0);
  if (v15 == 1)
  {
    v16 = sub_10000E408();
    RapportEndpoint.model.getter(v16, (uint64_t)&protocol witness table for CompanionLinkDevice);
    v19 = v18;
    v20 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0)
      v20 = v17 & 0xFFFFFFFFFFFFLL;
    if (v20)
    {
      v21 = v17;
      ObservableObjectPublisher.send()();
      *(_QWORD *)(v12 + 24) = v21;
      *(_QWORD *)(v12 + 32) = v19;
      swift_bridgeObjectRetain(v19);
      sub_10000E410();
      v22 = type metadata accessor for UTHardwareColor(0);
      sub_1000B9BA0(v4, v23, v24, v22);
      swift_bridgeObjectRetain(v19);
      UTType.init(_deviceModelCode:enclosureColor:)(v21, v19, v4);
      sub_10000B2F8(v12, (uint64_t)v27, 33);
      sub_1001842C4(v2, v12 + *(int *)(v3 + 64));
      swift_endAccess(v27);
      sub_1000FB4A8(v12 + *(int *)(v3 + 64), v2, &qword_1002AA5F0);
      UniversalControlDevice.DeviceType.init(model:typeIdentifier:)(v21, v19, v2);
      sub_10000B2F8(v12, (uint64_t)v27, 33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 40))(v12 + *(int *)(v3 + 32), v1, v26);
      swift_endAccess(v27);
    }
    else
    {
      swift_bridgeObjectRelease(v18);
    }
  }
  sub_10000E4E0();
}

void sub_100182B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];

  sub_10002626C();
  v44 = v3;
  v45 = v2;
  v42 = sub_10000E408();
  v4 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_1000268BC();
  sub_10018476C();
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - v6;
  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v43 = v9;
  v46 = v0;
  v10 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v48);
  v11 = *(_QWORD *)(v10 + 16);
  sub_100043078(v49, v11);
  v12 = v49[0];
  v47 = v49[1];
  v13 = v49[3];
  v14 = v49[4];
  v15 = (unint64_t)(v49[2] + 64) >> 6;
  v41 = v11;
  sub_10003B09C(v11);
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v17 = v16 | (v13 << 6);
  while (1)
  {
    sub_100022838(*(_QWORD *)(v12 + 56) + *(_QWORD *)(v4 + 72) * v17, (uint64_t)v7, type metadata accessor for CompanionLinkDevice);
    sub_10005F3FC((uint64_t)v7, v1, type metadata accessor for CompanionLinkDevice);
    v33 = (unint64_t)CompanionLinkDevice.statusFlags.getter();
    if ((*(_QWORD *)RapportStatusFlags.BLE.unsafeMutableAddressor() & ~v33) == 0)
    {
      swift_release();
      v34 = v43;
      sub_10005F3FC(v1, v43, type metadata accessor for CompanionLinkDevice);
      v35 = 0;
      goto LABEL_25;
    }
    sub_100184294(v1, type metadata accessor for CompanionLinkDevice);
    if (v14)
      goto LABEL_2;
LABEL_3:
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v18 >= v15)
      goto LABEL_24;
    if (!*(_QWORD *)(v47 + 8 * v18))
    {
      if (v13 + 2 >= v15)
        goto LABEL_24;
      sub_1001847F8();
      if (!v20)
      {
        if (v19 + 2 >= v15)
          goto LABEL_24;
        sub_1001847F8();
        if (!v22)
        {
          if (v21 + 3 >= v15)
            goto LABEL_24;
          sub_1001847F8();
          if (!v24)
          {
            if (v23 + 4 >= v15)
              goto LABEL_24;
            sub_1001847F8();
            if (!v26)
            {
              if (v25 + 5 >= v15)
                goto LABEL_24;
              if (!*(_QWORD *)(v47 + 8 * (v25 + 5)))
              {
                v27 = v13 + 7;
                while (v27 < v15)
                {
                  if (*(_QWORD *)(v47 + 8 * v27++))
                    goto LABEL_19;
                }
LABEL_24:
                swift_release();
                v35 = 1;
                v34 = v43;
LABEL_25:
                v36 = v42;
                _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v34, v35, 1, v42);
                swift_bridgeObjectRelease(v41);
                RapportEndpoint.name.getter(v36, (uint64_t)&protocol witness table for CompanionLinkDevice);
                sub_100182020(v37, v38, v44);
                sub_10000E568();
                sub_100182104();
                sub_1001823F8();
                sub_1001824D0();
                sub_10018278C();
                sub_1001827F4();
                sub_100182910();
                sub_10018472C(v39, &qword_1002A9200);
                sub_10000E4E0();
                return;
              }
            }
          }
        }
      }
    }
LABEL_19:
    sub_100184794();
    v14 = v30 & v29;
    v17 = v32 + (v31 << 6);
    v13 = v31;
  }
  __break(1u);
}

id sub_100182DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithType:", v5);

  return v6;
}

id sub_100182E5C(void *a1, uint64_t a2)
{
  id v4;
  void *v5;

  v4 = objc_msgSend(a1, "imageForDescriptor:", a2);
  if (!v4)
    return objc_msgSend(a1, "prepareImageForDescriptor:", a2);
  v5 = v4;
  if (objc_msgSend(v4, "placeholder"))
  {

    return objc_msgSend(a1, "prepareImageForDescriptor:", a2);
  }
  return v5;
}

uint64_t sub_100182EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = a3;
  v7 = a4;
  swift_bridgeObjectRetain(a4);
  v6 = String.init<A>(_:)(&v6, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v7 = v4;
  String.append<A>(contentsOf:)(v8, &type metadata for String, &protocol witness table for String);
  return v6;
}

uint64_t type metadata accessor for P2PDevice.Properties(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B41A8, (uint64_t)&nominal type descriptor for P2PDevice.Properties);
}

uint64_t P2PDevice.deinit()
{
  uint64_t v0;

  sub_100184294(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, type metadata accessor for P2PDevice.Properties);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t P2PDevice.__deallocating_deinit()
{
  uint64_t v0;

  P2PDevice.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100182FE0(_BYTE *a1@<X8>)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  P2PDevice.id.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  a1[13] = v15;
  a1[14] = v16;
  a1[15] = v17;
}

uint64_t P2PDevice.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t result;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;

  sub_10002626C();
  v39 = v2;
  v40 = v3;
  v4 = *v0;
  v36 = sub_1001846FC();
  v5 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_1000268CC();
  v6 = sub_10000E440();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10002641C();
  v10 = v9 - v8;
  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v11 = _typeName(_:qualified:)(v4, 0);
  v13 = v12;
  sub_10000E420();
  v38[0] = v11;
  v38[1] = v13;
  sub_100184834(0x20534449202CLL);
  v14 = (char *)v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28((uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v37);
  v15 = (unsigned __int8 *)&v14[*(int *)(sub_1001847A4() + 36)];
  v16 = UUID.init(uuid:)(*v15, v15[1], v15[2], v15[3], v15[4], v15[5]);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  v20 = sub_1000599D0(8, v17, v19);
  static String._fromSubstring(_:)(v20);
  sub_10000E420();
  sub_1001847BC();
  sub_10002D89C();
  v21._countAndFlagsBits = 0x27206D4E2027;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRetain();
  sub_1001847BC();
  sub_10002D89C();
  sub_100184834(0x20644D202C27);
  P2PDevice.typeIdentifier.getter(v1);
  v23 = UTType.identifier.getter(v22);
  v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v36);
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  sub_10000E4A0();
  sub_100179414();
  result = v38[0];
  v28 = &v14[*(int *)(v13 + 52)];
  if ((v28[8] & 1) == 0)
  {
    v29 = *(_QWORD *)v28;
    if (v29)
    {
      v30 = (id)RPVersionToSourceVersionString(v29);
      if (v30)
      {
        v31 = sub_10000E530((uint64_t)v30);
        v33 = v32;

      }
      else
      {
        v31 = 0;
        v33 = (void *)0xE000000000000000;
      }
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      sub_10000E410();
      sub_100179414();
      v35._countAndFlagsBits = 0x27205653202CLL;
      v35._object = (void *)0xE600000000000000;
      String.append(_:)(v35);
      sub_10000E410();
      return v38[0];
    }
  }
  return result;
}

uint64_t sub_100183338()
{
  return P2PDevice.description.getter();
}

uint64_t static P2PDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v13[24];
  _BYTE v14[24];

  sub_10006028C();
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002671C();
  __chkstk_darwin(v6);
  v8 = &v13[-v7];
  v9 = a1 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v9, (uint64_t)v14);
  sub_1001846D4(v9, (uint64_t)v8);
  v10 = a2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v10, (uint64_t)v13);
  sub_1001846D4(v10, v2);
  sub_10018116C();
  LOBYTE(v10) = v11;
  sub_1001846B8(v2);
  sub_1001846B8((uint64_t)v8);
  return v10 & 1;
}

uint64_t sub_100183430(uint64_t *a1, uint64_t *a2)
{
  return static P2PDevice.== infix(_:_:)(*a1, *a2) & 1;
}

void P2PDevice.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];

  sub_10006028C();
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_1000268CC();
  v3 = v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  sub_10005FE28(v3, (uint64_t)v4);
  sub_1001847EC(v3);
  sub_100181510();
  sub_100184294(v1, type metadata accessor for P2PDevice.Properties);
  sub_10000B350();
}

void P2PDevice.hashValue.getter(uint64_t a1)
{
  sub_10000E5C0(a1);
  P2PDevice.hash(into:)();
  Hasher._finalize()();
  sub_10000E59C();
}

void sub_1001834F8(uint64_t a1)
{
  P2PDevice.hashValue.getter(a1);
}

void sub_100183518()
{
  P2PDevice.hash(into:)();
}

Swift::Int sub_100183538(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  P2PDevice.hash(into:)();
  return Hasher._finalize()();
}

void sub_100183574()
{
  sub_10000E330(&qword_1002B3FA8, type metadata accessor for P2PDevice, (uint64_t)&protocol conformance descriptor for P2PDevice);
}

uint64_t type metadata accessor for P2PDevice(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B3FD8, (uint64_t)&nominal type descriptor for P2PDevice);
}

void sub_1001835B4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  P2PDevice.name.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001835E0()
{
  return type metadata accessor for P2PDevice(0);
}

uint64_t sub_1001835E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for P2PDevice.Properties(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100229690;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_10018366C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    a1[4] = a2[4];
    v8 = a3[8];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UniversalControlDevice.DeviceType(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    v12(v9, v10, v11, v13);
    v14 = a3[10];
    *(_OWORD *)((char *)v4 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[11];
    v16 = a3[12];
    v17 = (_QWORD *)((char *)v4 + v15);
    v18 = (_QWORD *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(_QWORD *)((char *)v4 + v16) = *(_QWORD *)((char *)a2 + v16);
    v20 = a3[13];
    v21 = a3[14];
    v22 = (char *)v4 + v20;
    v23 = (char *)a2 + v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *(_QWORD *)((char *)v4 + v21) = *(_QWORD *)((char *)a2 + v21);
    v24 = a3[15];
    v25 = a3[16];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    *(_QWORD *)((char *)v4 + v24) = *(_QWORD *)((char *)a2 + v24);
    v28 = type metadata accessor for UTType(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v27, 1, v28))
    {
      v29 = sub_1000055B0(&qword_1002AA5F0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t sub_100183820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 64);
  v7 = type metadata accessor for UTType(0);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

uint64_t sub_1001838E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v11(v8, v9, v10, v12);
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[11];
  v15 = a3[12];
  v16 = (_QWORD *)(a1 + v14);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v19 = a3[13];
  v20 = a3[14];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v23 = a3[15];
  v24 = a3[16];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v27 = type metadata accessor for UTType(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v26, 1, v27))
  {
    v28 = sub_1000055B0(&qword_1002AA5F0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v25, 0, 1, v27);
  }
  return a1;
}

_QWORD *sub_100183A68(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  v11[3] = v12[3];
  v11[4] = v12[4];
  v11[5] = v12[5];
  v11[6] = v12[6];
  v11[7] = v12[7];
  v11[8] = v12[8];
  v11[9] = v12[9];
  v11[10] = v12[10];
  v11[11] = v12[11];
  v11[12] = v12[12];
  v11[13] = v12[13];
  v11[14] = v12[14];
  v11[15] = v12[15];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v13 = a3[11];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[13];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v20 = a3[16];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for UTType(0);
  LODWORD(v8) = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v21, 1, v23);
  v24 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v22, 1, v23);
  if (!(_DWORD)v8)
  {
    v25 = *(_QWORD *)(v23 - 8);
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v26 = sub_1000055B0(&qword_1002AA5F0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v21, 0, 1, v23);
  return a1;
}

uint64_t sub_100183CEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[13];
  v13 = a3[14];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v16 = a3[15];
  v17 = a3[16];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v20 = type metadata accessor for UTType(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v20))
  {
    v21 = sub_1000055B0(&qword_1002AA5F0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_100183E38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[11];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  v17 = a3[13];
  v18 = a3[14];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v21 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for UTType(0);
  LODWORD(v9) = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v22, 1, v24);
  v25 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v23, 1, v24);
  if (!(_DWORD)v9)
  {
    v26 = *(_QWORD *)(v24 - 8);
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v27 = sub_1000055B0(&qword_1002AA5F0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v22, 0, 1, v24);
  return a1;
}

uint64_t sub_100183FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100184004);
}

uint64_t sub_100184004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1001846F4();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 32);
    }
    else
    {
      v9 = sub_1000055B0(&qword_1002AA5F0);
      v10 = *(int *)(a3 + 64);
    }
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + v10, a2, v9);
  }
}

uint64_t sub_10018409C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001840A8);
}

void sub_1001840A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 16) = (a2 - 1);
    sub_10000B350();
  }
  else
  {
    v8 = sub_1001846F4();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 32);
    }
    else
    {
      v9 = sub_1000055B0(&qword_1002AA5F0);
      v10 = *(int *)(a4 + 64);
    }
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1 + v10, a2, a2, v9);
  }
}

void sub_100184134(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = &unk_1002296B8;
  v2 = type metadata accessor for UniversalControlDevice.DeviceType(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_1002296D0;
    v6[6] = &unk_1002296E8;
    v6[7] = &unk_100229690;
    v6[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[9] = &unk_100229700;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100184214(319);
    if (v5 <= 0x3F)
    {
      v6[12] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

void sub_100184214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B41B8)
  {
    v2 = type metadata accessor for UTType(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B41B8);
  }
}

void sub_100184268()
{
  sub_10000E330(&qword_1002B4218, type metadata accessor for P2PDevice.Properties, (uint64_t)&unk_100229758);
}

void sub_100184294(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10018470C(*(_QWORD *)(v2 - 8));
  sub_1000050D4();
}

uint64_t sub_1001842C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AA5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10018430C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::UInt v16;
  uint64_t *v17;
  Swift::UInt v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  _OWORD v49[4];
  uint64_t v50;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  v45 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v47 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000055B0(&qword_1002B1290);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v41 - v10);
  v12 = *(_QWORD *)(a2 + 64);
  v43 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v44 = (unint64_t)(v13 + 63) >> 6;
  v42 = v44 - 1;
  v46 = a2;
  swift_bridgeObjectRetain();
  v16 = 0;
  v48 = 0;
  v17 = &qword_1002B1298;
  if (!v15)
    goto LABEL_6;
LABEL_4:
  v18 = v16;
  v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v20 = v19 | (v48 << 6);
LABEL_5:
  v21 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * v20);
  v23 = *v21;
  v22 = v21[1];
  v24 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v45 + 72) * v20;
  v25 = v17;
  v26 = sub_1000055B0(v17);
  sub_100022838(v24, (uint64_t)v8 + *(int *)(v26 + 48), type metadata accessor for CompanionLinkDevice);
  *v8 = v23;
  v8[1] = v22;
  v27 = v26;
  v17 = v25;
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, 0, 1, v27);
  swift_bridgeObjectRetain();
  v16 = v18;
  while (1)
  {
    sub_10005FA70((uint64_t)v8, (uint64_t)v11, &qword_1002B1290);
    v33 = sub_1000055B0(v17);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v33) == 1)
    {
      swift_release();
      Hasher._combine(_:)(v16);
      return;
    }
    v34 = (uint64_t)v11 + *(int *)(v33 + 48);
    v35 = *v11;
    v36 = v11[1];
    v37 = v47;
    sub_10005F3FC(v34, v47, type metadata accessor for CompanionLinkDevice);
    v38 = *(_QWORD *)(a1 + 64);
    v39 = *(_OWORD *)(a1 + 16);
    v49[0] = *(_OWORD *)a1;
    v49[1] = v39;
    v40 = *(_OWORD *)(a1 + 48);
    v49[2] = *(_OWORD *)(a1 + 32);
    v49[3] = v40;
    v50 = v38;
    String.hash(into:)(v49, v35, v36);
    swift_bridgeObjectRelease();
    CompanionLinkDevice.hash(into:)(v49);
    sub_100184294(v37, type metadata accessor for CompanionLinkDevice);
    v16 ^= Hasher._finalize()();
    if (v15)
      goto LABEL_4;
LABEL_6:
    v28 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 < v44)
    {
      v29 = *(_QWORD *)(v43 + 8 * v28);
      if (v29)
        goto LABEL_9;
      v30 = v48 + 2;
      ++v48;
      if (v28 + 1 < v44)
      {
        v29 = *(_QWORD *)(v43 + 8 * v30);
        if (v29)
        {
          ++v28;
LABEL_9:
          v18 = v16;
          v15 = (v29 - 1) & v29;
          v20 = __clz(__rbit64(v29)) + (v28 << 6);
          v48 = v28;
          goto LABEL_5;
        }
        v31 = v28 + 2;
        v48 = v28 + 1;
        if (v28 + 2 < v44)
          break;
      }
    }
LABEL_21:
    v32 = sub_1000055B0(v17);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, 1, 1, v32);
    v15 = 0;
  }
  v29 = *(_QWORD *)(v43 + 8 * v31);
  if (v29)
  {
    v28 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v28 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v28 >= v44)
    {
      v48 = v42;
      goto LABEL_21;
    }
    v29 = *(_QWORD *)(v43 + 8 * v28);
    ++v31;
    if (v29)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

void sub_100184688(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_1000055B0(a2);
  sub_10018470C(*(_QWORD *)(v2 - 8));
  sub_1000050D4();
}

void sub_1001846B8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_100184294(a1, v1);
}

uint64_t sub_1001846C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, a3);
}

void sub_1001846D4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100022838(a1, a2, v2);
}

void sub_1001846DC(uint64_t a1)
{
  uint64_t *v1;

  sub_100184688(a1, v1);
}

uint64_t sub_1001846E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t sub_1001846F4()
{
  return type metadata accessor for UniversalControlDevice.DeviceType(0);
}

uint64_t sub_1001846FC()
{
  return type metadata accessor for UTType(0);
}

void sub_100184704(uint64_t a1)
{
  uint64_t *v1;

  sub_100184688(a1, v1);
}

uint64_t sub_10018470C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100184718()
{
  uint64_t v0;
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, 0, 1, v1);
}

void sub_10018472C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100184688(v2, a2);
}

uint64_t sub_100184734(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100006FCC(v3, v4, a3);
}

uint64_t sub_100184740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

void sub_10018474C(uint64_t a1)
{
  uint64_t *v1;

  sub_100184688(a1, v1);
}

uint64_t sub_100184754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_100184760()
{
  uint64_t v0;
  uint64_t v1;

  return static UniversalControlDevice.DeviceType.== infix(_:_:)(v1, v0);
}

void sub_10018477C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100184688(v2, a2);
}

uint64_t sub_100184784()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 136));
}

uint64_t sub_1001847A4()
{
  return type metadata accessor for P2PDevice.Properties(0);
}

void sub_1001847BC()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_1001847C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100184294(v2, a2);
}

void sub_1001847D0()
{
  ObservableObjectPublisher.send()();
}

uint64_t sub_1001847D8()
{
  uint64_t v0;

  return v0;
}

void sub_1001847E4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_100184294(v2, a2);
}

void sub_1001847EC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100022838(a1, v2, v1);
}

void sub_100184804(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000FB4A8(a1, a2, v2);
}

void sub_10018480C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100022838(a1, a2, v2);
}

uint64_t sub_100184814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

void sub_100184834(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFFFFFFFFFFLL | 0x27000000000000;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
}

uint64_t sub_100184840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t *EventDispatcher.shared.unsafeMutableAddressor()
{
  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  return &static EventDispatcher.shared;
}

void EventDispatcher.willWarp(to:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32[3];

  v3 = v0;
  v4 = type metadata accessor for EventDispatcher.HotZoneState(0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_1000601B4();
  sub_1000055B0(&qword_1002AC148);
  sub_10000E490();
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000B9A80();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100026500();
  sub_100185568((uint64_t)v8);
  v14 = sub_100188774();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v14) == 1)
  {
    sub_100025A28((uint64_t)v8, &qword_1002AC148);
    sub_10003D6D8((uint64_t)v11, 1);
LABEL_4:
    sub_100025A28((uint64_t)v11, (uint64_t *)&unk_1002AC150);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v8, v12);
  sub_1000255F0((uint64_t)v8, type metadata accessor for HotZone);
  sub_10003D6D8((uint64_t)v11, 0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v12) == 1)
    goto LABEL_4;
  v15 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v15(v2, v11, v12);
  v16 = sub_100184C60();
  v18 = v17;
  v19 = (v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_logger);
  swift_bridgeObjectRetain();
  Logger.logObject.getter(v20);
  v21 = sub_10002D844();
  if (os_log_type_enabled(v19, v21))
  {
    v22 = sub_10000797C(12);
    v28 = v16;
    v23 = (uint8_t *)v22;
    v29 = sub_10000797C(32);
    v32[0] = v29;
    v30 = v15;
    *(_DWORD *)v23 = 136446210;
    v27 = v23 + 4;
    swift_bridgeObjectRetain();
    v31 = sub_100006FCC(v28, v18, v32);
    v15 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v27);
    swift_bridgeObjectRelease_n(v18, 3);
    sub_100026484((void *)&_mh_execute_header, v19, v21, "Hot Zone: Warped into: %{public}s", v23);
    v24 = v29;
    sub_1000263F4(v29, v25, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v24);
    sub_100007958((uint64_t)v23);
  }
  else
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }

  v15((char *)v1, v2, v12);
  swift_storeEnumTagMultiPayload(v1, v4, 3);
  v26 = v3 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state;
  sub_100026478(v26, (uint64_t)v32);
  sub_100185840(v1, v26);
  swift_endAccess(v32);
}

uint64_t sub_100184BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = v2;
  v6 = type metadata accessor for EventCatcher();
  swift_allocObject(v6, 32, 7);
  sub_1000088D0();
  v7 = sub_10009ABF8(a1, a2);
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_catchers);
  v9 = sub_100026478(v3 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_catchers, (uint64_t)v13);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
  v10 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000CA720(v10);
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
  specialized Array._endMutation()(v11);
  return swift_endAccess(v13);
}

uint64_t sub_100184C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v20;

  v1 = type metadata accessor for UniversalControlAnchor(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100026500();
  type metadata accessor for UniversalControlLink.Endpoint(0);
  sub_10016A76C();
  __chkstk_darwin(v3);
  sub_1000268CC();
  v5 = UniversalControlLink.endpoint1.getter(v4);
  UniversalControlLink.Endpoint.anchor.getter(v5);
  v6 = sub_10018887C();
  v7 = UniversalControlAnchor.edge.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  v8 = UniversalControlEdge.description.getter(v7);
  swift_bridgeObjectRelease();
  v20 = v8;
  sub_1000AAE48();
  v10 = UniversalControlLink.endpoint2.getter(v9);
  v11 = UniversalControlLink.Endpoint.display.getter(v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_10018887C();
  v18._countAndFlagsBits = UniversalControlDisplayID.description.getter(v11, v13, v15, v17);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_100184DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = v0;
  _StringGuts.grow(_:)(16);
  v2 = sub_100184C60();
  sub_10000E420();
  sub_1000AAE48();
  v3 = sub_100188774();
  v4 = *(id *)(v0 + *(int *)(v3 + 24));
  sub_100049D94(v4);

  v5 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v6 = sub_100065AF0();
  v7 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  sub_1000267C4();
  v11._countAndFlagsBits = 0x646564726175673ALL;
  v11._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v11);
  if (*(_BYTE *)(v1 + *(int *)(v3 + 20)))
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if (*(_BYTE *)(v1 + *(int *)(v3 + 20)))
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100184EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UniversalControlLink.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = sub_100188774(),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20))))
  {
    return CGRegionEqualToRegion(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100184F68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UniversalControlLink(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100184FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for EventDispatcher(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10018714C();
  static EventDispatcher.shared = v1;
  return result;
}

uint64_t type metadata accessor for EventDispatcher.HotZoneState(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B43E8, (uint64_t)&nominal type descriptor for EventDispatcher.HotZoneState);
}

void static EventDispatcher.shared.getter()
{
  _BYTE v0[24];

  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  sub_10000B2F8((uint64_t)&static EventDispatcher.shared, (uint64_t)v0, 0);
  swift_retain();
  sub_100015540();
}

void static EventDispatcher.shared.setter(uint64_t a1)
{
  _BYTE v2[24];

  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  sub_10000B2F8((uint64_t)&static EventDispatcher.shared, (uint64_t)v2, 1);
  static EventDispatcher.shared = a1;
  swift_release();
  sub_100015540();
}

uint64_t (*static EventDispatcher.shared.modify(uint64_t a1))(_QWORD)
{
  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  sub_100026478((uint64_t)&static EventDispatcher.shared, a1);
  return j_j__swift_endAccess;
}

void sub_10018511C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v5 = v1;
  v7 = type metadata accessor for EventDispatcher.HotZoneState(0);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_1000601B4();
  v9 = sub_1000B9A80();
  sub_10016A76C();
  __chkstk_darwin(v10);
  sub_1000268CC();
  sub_1000431F0(v5, v2, type metadata accessor for EventDispatcher.HotZoneState);
  if (swift_getEnumCaseMultiPayload(v2, v7) > 3)
  {
    v12 = 1;
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v11(v3, v2, v9);
    v11(a1, v3, v9);
    v12 = 0;
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, v12, 1, v9);
  sub_10002D8A4();
}

void EventDispatcher.maskedTime.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime, (uint64_t)v1, 0);
  sub_100015540();
}

void EventDispatcher.maskedTime.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v4[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime);
  sub_10000B2F8((uint64_t)v3, (uint64_t)v4, 1);
  *v3 = a1;
  sub_100015540();
}

uint64_t (*EventDispatcher.maskedTime.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_100026478(v1 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime, a1);
  return j__swift_endAccess;
}

double sub_1001852A0(uint64_t (*a1)(void))
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
  v3 = a1();

  return (double)v3 / 1000.0;
}

void sub_1001852F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *EmptyRegion;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  uint64_t UnionWithRegion;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  char v34[24];
  _QWORD v35[5];

  v2 = sub_100188774();
  sub_10016A76C();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v31 = v0;
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones);
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones, (uint64_t)v34, 0);
  v10 = *v9;
  swift_bridgeObjectRetain();
  EmptyRegion = (void *)CGRegionCreateEmptyRegion(v11);
  sub_100043078(v35, v10);
  v13 = v35[0];
  v14 = v35[3];
  v15 = v35[4];
  v32 = v35[1];
  v33 = (unint64_t)(v35[2] + 64) >> 6;
  v30 = v10;
  swift_bridgeObjectRetain();
  v16 = EmptyRegion;
  v29 = v16;
  if (!v15)
    goto LABEL_3;
LABEL_2:
  v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v18 = v17 | (v14 << 6);
  while (1)
  {
    sub_1000431F0(*(_QWORD *)(v13 + 56) + *(_QWORD *)(v1 + 72) * v18, (uint64_t)v8, type metadata accessor for HotZone);
    sub_10018781C((uint64_t)v8, (uint64_t)v6);
    UnionWithRegion = CGRegionCreateUnionWithRegion(v16, *(_QWORD *)&v6[*(int *)(v2 + 24)]);
    sub_1000255F0((uint64_t)v6, type metadata accessor for HotZone);

    v16 = (id)UnionWithRegion;
    if (v15)
      goto LABEL_2;
LABEL_3:
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v19 >= v33)
      goto LABEL_27;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    v21 = v14 + 1;
    if (!v20)
    {
      sub_1001888BC();
      if (v22 == v23)
        goto LABEL_27;
      sub_1001888B0();
      if (!v20)
      {
        sub_1001888BC();
        if (v22 == v23)
          goto LABEL_27;
        sub_1001888B0();
        if (!v20)
        {
          sub_1001888BC();
          if (v22 == v23)
            goto LABEL_27;
          sub_1001888B0();
          if (!v20)
          {
            sub_1001888BC();
            if (v22 == v23)
              goto LABEL_27;
            sub_1001888B0();
            if (!v20)
            {
              v21 = v24 + 5;
              if (v24 + 5 >= v33)
                goto LABEL_27;
              v20 = *(_QWORD *)(v32 + 8 * v21);
              if (!v20)
              {
                v25 = v14 + 7;
                while (v25 < v33)
                {
                  v20 = *(_QWORD *)(v32 + 8 * v25++);
                  if (v20)
                  {
                    v21 = v25 - 1;
                    goto LABEL_24;
                  }
                }
LABEL_27:

                swift_release();
                swift_bridgeObjectRelease();
                v27 = *(void **)(v31 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_eventRegion);
                *(_QWORD *)(v31 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_eventRegion) = v16;

                return;
              }
            }
          }
        }
      }
    }
LABEL_24:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
    v14 = v21;
  }
  __break(1u);
}

void sub_100185568(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];
  _QWORD v29[5];

  v3 = type metadata accessor for HotZone(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v3);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v26 - v8;
  if (CGRegionContainsPoint(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_eventRegion)))
  {
    v27 = a1;
    v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones);
    swift_beginAccess(v10, v28, 0, 0);
    v11 = *v10;
    sub_100043078(v29, *v10);
    v13 = v29[0];
    v12 = v29[1];
    v14 = v29[3];
    v15 = v29[4];
    v16 = (unint64_t)(v29[2] + 64) >> 6;
    v26 = v11;
    swift_bridgeObjectRetain_n(v11, 2);
    if (!v15)
      goto LABEL_4;
LABEL_3:
    v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v18 = v17 | (v14 << 6);
    while (1)
    {
      sub_1000431F0(*(_QWORD *)(v13 + 56) + *(_QWORD *)(v4 + 72) * v18, (uint64_t)v9, type metadata accessor for HotZone);
      sub_10018781C((uint64_t)v9, (uint64_t)v7);
      if (CGRegionContainsPoint(*(_QWORD *)&v7[*(int *)(v3 + 24)]))
      {
        swift_release();
        v23 = v27;
        sub_10018781C((uint64_t)v7, v27);
        v24 = v23;
        v25 = 0;
        goto LABEL_28;
      }
      sub_1000255F0((uint64_t)v7, type metadata accessor for HotZone);
      if (v15)
        goto LABEL_3;
LABEL_4:
      v19 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      if (v19 >= v16)
        goto LABEL_27;
      v20 = *(_QWORD *)(v12 + 8 * v19);
      v21 = v14 + 1;
      if (!v20)
      {
        v21 = v14 + 2;
        if (v14 + 2 >= v16)
          goto LABEL_27;
        v20 = *(_QWORD *)(v12 + 8 * v21);
        if (!v20)
        {
          v21 = v14 + 3;
          if (v14 + 3 >= v16)
            goto LABEL_27;
          v20 = *(_QWORD *)(v12 + 8 * v21);
          if (!v20)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v16)
              goto LABEL_27;
            v20 = *(_QWORD *)(v12 + 8 * v21);
            if (!v20)
            {
              v21 = v14 + 5;
              if (v14 + 5 >= v16)
                goto LABEL_27;
              v20 = *(_QWORD *)(v12 + 8 * v21);
              if (!v20)
              {
                v21 = v14 + 6;
                if (v14 + 6 >= v16)
                  goto LABEL_27;
                v20 = *(_QWORD *)(v12 + 8 * v21);
                if (!v20)
                {
                  v22 = v14 + 7;
                  while (v22 < v16)
                  {
                    v20 = *(_QWORD *)(v12 + 8 * v22++);
                    if (v20)
                    {
                      v21 = v22 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_27:
                  swift_release();
                  v24 = v27;
                  v25 = 1;
LABEL_28:
                  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v24, v25, 1, v3);
                  swift_bridgeObjectRelease();
                  return;
                }
              }
            }
          }
        }
      }
LABEL_21:
      v15 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v21 << 6);
      v14 = v21;
    }
    __break(1u);
  }
  else
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, 1, 1, v3);
  }
}

uint64_t type metadata accessor for HotZone(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B4478, (uint64_t)&nominal type descriptor for HotZone);
}

uint64_t sub_100185840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventDispatcher.HotZoneState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void EventDispatcher.dispatchPointerEvent(_:)(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[11];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  char v108[8];
  uint64_t v109;

  v2 = (unint64_t)v1;
  v95 = *v1;
  v94 = type metadata accessor for UniversalControlAnchor(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  sub_10000E5DC();
  v92 = v4;
  v91 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v90[10] = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  sub_10000E5DC();
  v90[9] = v5;
  sub_1000055B0(&qword_1002AC148);
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v7);
  v97 = (char *)v90 - v8;
  v103 = sub_100188774();
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v10);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v11);
  v90[7] = (char *)v90 - v12;
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v13);
  sub_10000E5DC();
  v101 = v14;
  v15 = type metadata accessor for EventDispatcher.HotZoneState(0);
  sub_10000E490();
  __chkstk_darwin(v16);
  v18 = (char *)v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  sub_1000A34C8();
  v102 = v20;
  __chkstk_darwin(v21);
  v23 = (char *)v90 - v22;
  v24 = sub_1000B9A80();
  v105 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v25);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v26);
  v28 = (char *)v90 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)v90 - v30;
  __chkstk_darwin(v32);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v33);
  v96 = (uint64_t)v90 - v34;
  v35 = *(_QWORD *)(a1 + 16);
  v36 = v2 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime;
  sub_10000B2F8(v2 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime, (uint64_t)v108, 0);
  v37 = *(_QWORD *)v36;
  v100 = v35;
  if (v35 < v37)
  {
    if (qword_1002A9870 != -1)
      goto LABEL_79;
    goto LABEL_3;
  }
  v90[0] = v28;
  v90[1] = v31;
  v90[2] = v18;
  v52 = (uint64_t *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_catchers);
  sub_100026478(v2 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_catchers, (uint64_t)&v107);
  v53 = *v52;
  v54 = (unint64_t)*v52 >> 62;
  v98 = v24;
  v104 = v2;
  v99 = v15;
  if (v54)
  {
    if (v53 < 0)
      v88 = v53;
    else
      v88 = v53 & 0xFFFFFFFFFFFFFF8;
    sub_10005FFC0();
    v55 = _CocoaArrayWrapper.endIndex.getter(v88);
    if (v55)
      goto LABEL_7;
LABEL_14:
    sub_1000267C4();
    if ((unint64_t)*v52 >> 62)
      goto LABEL_90;
    v36 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v2 = v98;
LABEL_17:
      v59 = *v52;
      if ((unint64_t)*v52 >> 62)
      {
        if (v59 < 0)
          v89 = *v52;
        else
          v89 = v59 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v60 = _CocoaArrayWrapper.endIndex.getter(v89);
        swift_bridgeObjectRelease();
      }
      else
      {
        v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v61 = v103;
      if (v60 >= v36)
      {
        sub_100187464(v36, v60);
        swift_endAccess(&v107);
        v62 = v104;
        v63 = v104 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state;
        sub_10000B2F8(v104 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state, (uint64_t)&v107, 0);
        sub_1000431F0(v63, (uint64_t)v23, type metadata accessor for EventDispatcher.HotZoneState);
        v64 = v101;
        sub_10018511C(v101);
        sub_1000255F0((uint64_t)v23, type metadata accessor for EventDispatcher.HotZoneState);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v64, 1, v2) == 1)
        {
          sub_100025A28(v64, (uint64_t *)&unk_1002AC150);
          v65 = v102;
        }
        else
        {
          v66 = v96;
          sub_1000AB0F8(v96, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 32));
          v67 = v62 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones;
          sub_10000B2F8(v62 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones, (uint64_t)v106, 32);
          sub_10018885C();
          sub_100041DD8(v66, v68);
          v69 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v67, 1, v61);
          v65 = v102;
          if (v69 == 1)
          {
            sub_100025A28(v67, &qword_1002AC148);
            sub_100188684();
          }
          else
          {
            sub_100188850(v67, (uint64_t)&v109);
            sub_100188684();
            CGRegionContainsPoint(*(_QWORD *)(v67 + *(int *)(v61 + 24)));
            sub_1000255F0(v67, type metadata accessor for HotZone);
          }
          sub_100188808();
        }
        sub_1000431F0(v63, v65, type metadata accessor for EventDispatcher.HotZoneState);
        v87 = (char *)&loc_100186160 + *((int *)qword_100187098 + swift_getEnumCaseMultiPayload(v65, v99));
        __asm { BR              X10 }
      }
      __break(1u);
LABEL_90:
      sub_100188670();
      v36 = sub_100188874();
      sub_10000E420();
    }
  }
  v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10005FFC0();
  if (!v55)
    goto LABEL_14;
LABEL_7:
  v36 = 0;
  v2 = v53 & 0xC000000000000001;
  while (1)
  {
    if (v2)
    {
      v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v53);
    }
    else
    {
      v56 = *(_QWORD *)(v53 + 8 * v36 + 32);
      sub_1000269EC();
    }
    v57 = *(uint64_t (**)(uint64_t))(v56 + 16);
    sub_1000088D0();
    LOBYTE(v57) = v57(a1);
    swift_release();
    swift_release();
    if ((v57 & 1) != 0)
    {
      sub_1000267C4();
      if (__OFADD__(v36, 1))
      {
        __break(1u);
      }
      else
      {
        v2 = v98;
        if (!((unint64_t)*v52 >> 62))
        {
          v70 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_29:
          if (v36 + 1 == v70)
            goto LABEL_17;
          v71 = v36 + 5;
          while (1)
          {
            v72 = v71 - 4;
            v73 = *v52;
            if ((*v52 & 0xC000000000000001) != 0)
            {
              v74 = specialized _ArrayBuffer._getElementSlowPath(_:)(v71 - 4, v73);
            }
            else
            {
              if ((v72 & 0x8000000000000000) != 0)
                goto LABEL_69;
              if (v72 >= *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_70;
              v74 = *(_QWORD *)(v73 + 8 * v71);
              sub_1000269EC();
            }
            v75 = *(uint64_t (**)(uint64_t))(v74 + 16);
            sub_1000088D0();
            LOBYTE(v75) = v75(a1);
            swift_release();
            swift_release();
            if ((v75 & 1) == 0)
            {
              if (v72 != v36)
              {
                v76 = *v52;
                if ((*v52 & 0xC000000000000001) != 0)
                {
                  v77 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, *v52);
                  v76 = *v52;
                }
                else
                {
                  if (v36 < 0)
                    goto LABEL_73;
                  if ((unint64_t)v36 >= *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_74;
                  v77 = *(_QWORD *)(v76 + 8 * v36 + 32);
                  swift_retain();
                }
                if ((v76 & 0xC000000000000001) != 0)
                {
                  v78 = specialized _ArrayBuffer._getElementSlowPath(_:)(v71 - 4, v76);
                  v76 = *v52;
                }
                else
                {
                  if ((v72 & 0x8000000000000000) != 0)
                    goto LABEL_75;
                  if (v72 >= *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_76;
                  v78 = *(_QWORD *)(v76 + 8 * v71);
                  sub_1000269EC();
                }
                isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v76);
                *v52 = v76;
                if (!isUniquelyReferenced_nonNull_bridgeObject || v76 < 0 || (v76 & 0x4000000000000000) != 0)
                {
                  v76 = sub_1001877B4(v76);
                  *v52 = v76;
                }
                *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 8 * v36 + 0x20) = v78;
                v80 = swift_release();
                specialized Array._endMutation()(v80);
                v81 = *v52;
                v82 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v52);
                *v52 = v81;
                if (!v82 || v81 < 0 || (v81 & 0x4000000000000000) != 0)
                {
                  v81 = sub_1001877B4(v81);
                  *v52 = v81;
                }
                if ((v72 & 0x8000000000000000) != 0)
                  goto LABEL_77;
                if (v72 >= *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_78;
                *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 8 * v71) = v77;
                v83 = swift_release();
                specialized Array._endMutation()(v83);
              }
              if (__OFADD__(v36++, 1))
                goto LABEL_72;
            }
            v85 = v71 - 3;
            if (__OFADD__(v72, 1))
              goto LABEL_71;
            if ((unint64_t)*v52 >> 62)
            {
              sub_100188670();
              v86 = sub_100188874();
              sub_10000E420();
            }
            else
            {
              v86 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            ++v71;
            if (v85 == v86)
              goto LABEL_17;
          }
        }
      }
      sub_100188670();
      v70 = sub_100188874();
      sub_10000E420();
      goto LABEL_29;
    }
    v58 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    ++v36;
    if (v58 == v55)
      goto LABEL_14;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  swift_once(&qword_1002A9870, sub_1000876CC);
LABEL_3:
  v38 = sub_10000F6E4();
  sub_100006FB4(v38, (uint64_t)qword_1002B6EB0);
  v39 = swift_retain_n(v2, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = sub_10000797C(22);
    v43 = sub_10000797C(64);
    v107 = v43;
    *(_DWORD *)v42 = 136315394;
    v44 = HIDTime.description.getter(v100);
    v106[0] = sub_100006FCC(v44, v45, &v107);
    sub_1001887C0((uint64_t)v106, v46, v47, v42 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    v48 = HIDTime.description.getter(*(_QWORD *)v36);
    v106[0] = sub_100006FCC(v48, v49, &v107);
    sub_1001887C0((uint64_t)v106, v50, v51, v42 + 22);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "ignoring pointer event (timestamp %s < mask %s)", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    sub_100007958(v43);
    sub_100007958(v42);

  }
  else
  {

    swift_release_n(v2, 2);
  }
}

void EventDispatcher.deinit()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000AEBC(v0 + 16);
  v1 = sub_10000F6E4();
  sub_10002666C(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state, type metadata accessor for EventDispatcher.HotZoneState);
  sub_1000050D4();
}

uint64_t EventDispatcher.__deallocating_deinit()
{
  uint64_t v0;

  EventDispatcher.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018714C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit(v0 + 16, 0);
  v1 = OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_logger;
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0 + v1, v3, v2);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_catchers) = _swiftEmptyArrayStorage;
  v4 = OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones;
  v5 = sub_1000B9A80();
  v6 = sub_100188774();
  sub_10000E330(&qword_1002A9A28, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
  *(_QWORD *)(v0 + v4) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v5, v6, v7);
  v8 = OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_eventRegion;
  *(_QWORD *)(v0 + v8) = CGRegionCreateEmptyRegion();
  v9 = v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state;
  v10 = type metadata accessor for EventDispatcher.HotZoneState(0);
  swift_storeEnumTagMultiPayload(v9, v10, 4);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime) = 0;
  return v0;
}

void sub_10018728C(uint64_t a1)
{
  EventDispatcher.dispatchPointerEvent(_:)(a1);
}

void sub_1001872AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_10018877C();
  if (v6 != v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = v5;
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = v4 - v9;
  if (__OFADD__(v4, v10))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = sub_1001888A8();
  if (!v12 || v11 > *(_QWORD *)(v1 + 24) >> 1)
  {
    if (v4 <= v11)
      v13 = v4 + v10;
    else
      v13 = v4;
    sub_100077A14(v12, v13, 1, v1);
    v1 = v14;
  }
  v15 = (char *)(v1 + 32 + 24 * v8);
  v16 = sub_1000055B0((uint64_t *)&unk_1002ACDC0);
  sub_1001886E4(v16);
  if (!v9)
    goto LABEL_16;
  v17 = *(_QWORD *)(v1 + 16);
  if (__OFSUB__(v17, v3))
    goto LABEL_22;
  sub_100078ED0((char *)(v1 + 32 + 24 * v3), v17 - v3, v15);
  v18 = *(_QWORD *)(v1 + 16);
  v7 = __OFADD__(v18, v10);
  v19 = v18 - v9;
  if (!v7)
  {
    *(_QWORD *)(v1 + 16) = v19;
LABEL_16:
    *v2 = v1;
    sub_10002D8A4();
    return;
  }
LABEL_23:
  __break(1u);
}

void sub_10018738C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_10018877C();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = v5;
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v4, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!sub_1001888A8() || v4 - v9 > *(_QWORD *)(v1 + 24) >> 1)
  {
    sub_10007786C();
    v1 = v11;
  }
  v12 = (char *)(v1 + 32 + 16 * v8);
  v13 = sub_1000055B0(&qword_1002ACDE0);
  sub_1001886E4(v13);
  if (!v9)
    goto LABEL_13;
  v14 = *(_QWORD *)(v1 + 16);
  if (__OFSUB__(v14, v3))
    goto LABEL_19;
  sub_100078D30((char *)(v1 + 32 + 16 * v3), v14 - v3, v12);
  v15 = *(_QWORD *)(v1 + 16);
  v7 = __OFADD__(v15, v10);
  v16 = v15 - v9;
  if (!v7)
  {
    *(_QWORD *)(v1 + 16) = v16;
LABEL_13:
    *v2 = v1;
    sub_10002D8A4();
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_100187464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v5 < 0)
    v18 = v5;
  else
    v18 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease();
LABEL_4:
  if (v7 < v2)
  {
    __break(1u);
    goto LABEL_35;
  }
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_37:
  if (v5 < 0)
    v19 = v5;
  else
    v19 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease();
LABEL_9:
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_42:
    if (v5 < 0)
      v20 = v5;
    else
      v20 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v13 = v11 + 32 + 8 * v4;
  v14 = type metadata accessor for EventCatcher();
  v15 = swift_arrayDestroy(v13, v7, v14);
  if (!v6)
  {
LABEL_28:
    specialized Array._endMutation()(v15);
    return;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v21 = v5;
    else
      v21 = v11;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 16);
  }
  if (__OFSUB__(v16, v2))
  {
    __break(1u);
  }
  else
  {
    v15 = sub_100078D34(v11 + 32 + 8 * v2, v16 - v2, v13);
    if (!((unint64_t)v5 >> 62))
    {
      v17 = *(_QWORD *)(v11 + 16);
      goto LABEL_26;
    }
  }
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v11;
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease();
LABEL_26:
  if (!__OFADD__(v17, v6))
  {
    *(_QWORD *)(v11 + 16) = v17 + v6;
    goto LABEL_28;
  }
  __break(1u);
}

void sub_1001876B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_10018877C();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = v5;
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v4, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!sub_1001888A8() || v4 - v9 > *(_QWORD *)(v1 + 24) >> 1)
  {
    sub_1000776C8();
    v1 = v11;
  }
  v12 = (char *)(v1 + 32 + 16 * v8);
  v13 = sub_1000055B0(&qword_1002ACDD8);
  sub_1001886E4(v13);
  if (!v9)
    goto LABEL_13;
  v14 = *(_QWORD *)(v1 + 16);
  if (__OFSUB__(v14, v3))
    goto LABEL_19;
  sub_100078BF0((char *)(v1 + 32 + 16 * v3), v14 - v3, v12);
  v15 = *(_QWORD *)(v1 + 16);
  v7 = __OFADD__(v15, v10);
  v16 = v15 - v9;
  if (!v7)
  {
    *(_QWORD *)(v1 + 16) = v16;
LABEL_13:
    *v2 = v1;
    sub_10002D8A4();
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_10018778C(uint64_t a1)
{
  sub_100077A14(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_1001877A0()
{
  sub_10007786C();
}

uint64_t sub_1001877B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_10018781C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HotZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100187860()
{
  return type metadata accessor for EventDispatcher(0);
}

uint64_t type metadata accessor for EventDispatcher(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B42C0, (uint64_t)&nominal type descriptor for EventDispatcher);
}

uint64_t sub_10018787C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = &unk_100229800;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for EventDispatcher.HotZoneState(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      result = swift_updateClassMetadata2(a1, 256, 7, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_100187938(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = sub_1000055B0(&qword_1002B4280);
        *(uint64_t *)((char *)a1 + *(int *)(v9 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 48));
        *(uint64_t *)((char *)a1 + *(int *)(v9 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 64));
        v10 = a1;
        v11 = a3;
        v12 = 0;
        goto LABEL_9;
      case 1u:
        v14 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = sub_1000055B0(&qword_1002B4278);
        *(uint64_t *)((char *)a1 + *(int *)(v15 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v15 + 48));
        v10 = a1;
        v11 = a3;
        v12 = 1;
        goto LABEL_9;
      case 2u:
        v16 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v10 = a1;
        v11 = a3;
        v12 = 2;
        goto LABEL_9;
      case 3u:
        v17 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
        v10 = a1;
        v11 = a3;
        v12 = 3;
LABEL_9:
        swift_storeEnumTagMultiPayload(v10, v11, v12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100187AD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 3)
  {
    v4 = type metadata accessor for UniversalControlLink(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

char *sub_100187B20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = sub_1000055B0(&qword_1002B4280);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      *(_QWORD *)&a1[*(int *)(v7 + 64)] = *(_QWORD *)&a2[*(int *)(v7 + 64)];
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_7;
    case 1u:
      v11 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = sub_1000055B0(&qword_1002B4278);
      *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_7;
    case 2u:
      v13 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_7;
    case 3u:
      v14 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v8 = a1;
      v9 = a3;
      v10 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100187C94(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for EventDispatcher.HotZoneState);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = sub_1000055B0(&qword_1002B4280);
        *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
        *(_QWORD *)&a1[*(int *)(v7 + 64)] = *(_QWORD *)&a2[*(int *)(v7 + 64)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_8;
      case 1u:
        v11 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = sub_1000055B0(&qword_1002B4278);
        *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_8;
      case 2u:
        v13 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_8;
      case 3u:
        v14 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v8 = a1;
        v9 = a3;
        v10 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_100187E20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_1000055B0(&qword_1002B4280);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      *(_QWORD *)&a1[*(int *)(v7 + 64)] = *(_QWORD *)&a2[*(int *)(v7 + 64)];
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_7;
    case 1u:
      v11 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = sub_1000055B0(&qword_1002B4278);
      *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_7;
    case 2u:
      v13 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_7;
    case 3u:
      v14 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v8 = a1;
      v9 = a3;
      v10 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100187F94(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for EventDispatcher.HotZoneState);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = sub_1000055B0(&qword_1002B4280);
        *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
        *(_QWORD *)&a1[*(int *)(v7 + 64)] = *(_QWORD *)&a2[*(int *)(v7 + 64)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_8;
      case 1u:
        v11 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = sub_1000055B0(&qword_1002B4278);
        *(_QWORD *)&a1[*(int *)(v12 + 48)] = *(_QWORD *)&a2[*(int *)(v12 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_8;
      case 2u:
        v13 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_8;
      case 3u:
        v14 = type metadata accessor for UniversalControlLink(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v8 = a1;
        v9 = a3;
        v10 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100188120(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _QWORD v7[4];

  result = type metadata accessor for UniversalControlLink(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v6, v4, (char *)&value witness table for Builtin.Int64 + 64, (char *)&value witness table for Builtin.Int64 + 64);
    v7[0] = v6;
    swift_getTupleTypeLayout2(v5, v4, (char *)&value witness table for Builtin.Int64 + 64);
    v7[1] = v5;
    v7[2] = v4;
    v7[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v7);
    return 0;
  }
  return result;
}

_QWORD *sub_1001881CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UniversalControlLink(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = v9;
  }
  return a1;
}

void sub_100188260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UniversalControlLink(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1001882A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UniversalControlLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_10018830C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UniversalControlLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_100188380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UniversalControlLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001883E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UniversalControlLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_100188450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018845C);
}

uint64_t sub_10018845C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000B9A80();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1001884D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001884DC);
}

uint64_t sub_1001884DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1000B9A80();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_10018854C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UniversalControlLink(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100229830;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1001885CC()
{
  sub_10000E330(&qword_1002A9A28, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
}

void sub_1001885F8()
{
  sub_10000E330(&qword_1002B44B8, type metadata accessor for HotZone, (uint64_t)&unk_100229880);
}

uint64_t sub_100188624()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0, v1 - 192, 33, 0);
}

uint64_t sub_100188638(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10018864C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v1, v0, (uint64_t *)(v2 - 192));
}

uint64_t sub_10018865C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v7 - 200) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 200, v6, v5, a5);
}

uint64_t sub_100188670()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100188684()
{
  uint64_t v0;

  return swift_endAccess(v0 - 192);
}

uint64_t sub_10018868C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 304) + 8))(v0, *(_QWORD *)(v1 - 296));
}

uint64_t sub_1001886AC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v1, v0, (uint64_t *)(v2 - 192));
}

uint64_t sub_1001886BC()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 - 216) + 16);
}

uint64_t sub_1001886C8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1001886D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, a4);
}

uint64_t sub_1001886E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_arrayDestroy(v1, v2, a1);
}

void sub_1001886F4()
{
  unint64_t v0;

  HIDTime.nanoseconds.getter(v0);
}

uint64_t sub_1001886FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100185840(v0, v1);
}

uint64_t sub_100188708()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 336) + 8))(v0, *(_QWORD *)(v1 - 328));
}

uint64_t sub_100188724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_DWORD *)(v4 - 200) = 2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 200, v4 - 196, a3, a4);
}

uint64_t sub_10018873C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = a1;
  return v1 - 200;
}

uint64_t sub_10018875C()
{
  uint64_t v0;

  return swift_storeEnumTagMultiPayload(*(_QWORD *)(v0 - 400), *(_QWORD *)(v0 - 256), 4);
}

uint64_t sub_100188774()
{
  return type metadata accessor for HotZone(0);
}

uint64_t sub_100188790(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = a1;
  return v1 - 200;
}

uint64_t sub_1001887AC()
{
  uint64_t v0;

  static HIDFixed.zero.getter();
  v0 = static HIDFixed.zero.getter();
  return Logger.logObject.getter(v0);
}

uint64_t sub_1001887C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t sub_1001887CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 - 224))(a1, *(_QWORD *)(v2 - 408), v1);
}

uint64_t sub_1001887E0(uint64_t a1)
{
  return UniversalControlLink.Endpoint.anchor.getter(a1);
}

void sub_1001887F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x1Cu);
}

uint64_t sub_100188808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_100188818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 200, v4, v5, a4);
}

uint64_t sub_100188828()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 400);
}

uint64_t sub_100188840()
{
  uint64_t v0;
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(v0, *(_QWORD *)(v1 - 256), 3);
}

uint64_t sub_100188850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10018781C(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_100188868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 200, v4, a3, a4);
}

uint64_t sub_100188874()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_10018887C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_100188888()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 416);
}

uint64_t sub_10018889C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = result;
  return result;
}

uint64_t sub_1001888A8()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

double sub_1001888C8(double a1, double a2)
{
  double v2;
  double v3;

  return v2 * a1 + v3 * a2;
}

uint64_t DeviceMovementObserver.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 41, 7);
  DeviceMovementObserver.init()();
  return v1;
}

void sub_100188910()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v6[6];

  if (*(_BYTE *)(v0 + 40) == 1)
  {
    v1 = *(void **)(v0 + 24);
    v2 = *(void **)(v0 + 32);
    v6[4] = sub_1001891A8;
    v6[5] = v0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    v6[2] = sub_100188FE4;
    v6[3] = &unk_10028F3D0;
    v3 = _Block_copy(v6);
    v4 = v1;
    v5 = v2;
    swift_retain();
    swift_release();
    objc_msgSend(v4, "startActivityUpdatesToQueue:withHandler:", v5, v3);
    _Block_release(v3);

  }
}

uint64_t DeviceMovementObserver.status.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t DeviceMovementObserver.init()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  char v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  const char *v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  os_log_type_t v17;
  _WORD *v18;
  uint64_t v19;
  os_log_type_t v20;
  _WORD *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  int v28;
  uint64_t v29;

  v2 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 40) = 0;
  v3 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v0 + 32) = v3;
  objc_msgSend(v3, "setQualityOfService:", 25);
  objc_msgSend(*(id *)(v0 + 32), "setMaxConcurrentOperationCount:", 1);
  objc_msgSend(*(id *)(v0 + 32), "setSuspended:", 0);
  *(_QWORD *)(v0 + 24) = objc_msgSend(objc_allocWithZone((Class)CMMotionActivityManager), "init");
  v4 = objc_opt_self(CMMotionActivityManager);
  *(_BYTE *)(v2 + 40) = -[NSObject isActivityAvailable](v4, "isActivityAvailable");
  switch((unint64_t)-[NSObject authorizationStatus](v4, "authorizationStatus"))
  {
    case 0uLL:
      sub_1001891D0();
      if (!v5)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v6 = sub_10000F6E4();
      sub_10005FE9C(v6, (uint64_t)qword_1002B6EB0);
      v7 = sub_1001891C8();
      if (sub_1000403A4(v7))
      {
        v8 = (_WORD *)sub_100040274();
        sub_100066CDC(v8);
        v9 = "DEVICE MOVEMENT STATUS: not determined";
        goto LABEL_22;
      }
      break;
    case 1uLL:
      sub_1001891D0();
      if (!v5)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v13 = sub_10000F6E4();
      sub_10005FE9C(v13, (uint64_t)qword_1002B6EB0);
      v14 = sub_1001891C8();
      if (sub_1000403A4(v14))
      {
        v15 = (_WORD *)sub_100040274();
        sub_100066CDC(v15);
        v9 = "DEVICE MOVEMENT STATUS: restricted";
        goto LABEL_22;
      }
      break;
    case 2uLL:
      sub_1001891D0();
      if (!v5)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v16 = sub_10000F6E4();
      sub_10005FE9C(v16, (uint64_t)qword_1002B6EB0);
      v17 = sub_1001891C8();
      if (sub_1000403A4(v17))
      {
        v18 = (_WORD *)sub_100040274();
        sub_100066CDC(v18);
        v9 = "DEVICE MOVEMENT STATUS: denied";
        goto LABEL_22;
      }
      break;
    case 3uLL:
      sub_1001891D0();
      if (!v5)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v19 = sub_10000F6E4();
      sub_10005FE9C(v19, (uint64_t)qword_1002B6EB0);
      v20 = sub_1001891C8();
      if (sub_1000403A4(v20))
      {
        v21 = (_WORD *)sub_100040274();
        sub_100066CDC(v21);
        v9 = "DEVICE MOVEMENT STATUS: authorized";
        goto LABEL_22;
      }
      break;
    default:
      sub_1001891D0();
      if (!v5)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v10 = sub_10000F6E4();
      sub_10005FE9C(v10, (uint64_t)qword_1002B6EB0);
      v11 = sub_1001891C8();
      if (sub_1000403A4(v11))
      {
        v12 = (_WORD *)sub_100040274();
        sub_100066CDC(v12);
        v9 = "DEVICE MOVEMENT STATUS: whuh?";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v4, v1, v9, (uint8_t *)&_ss15CollectionOfOneVyxG10Foundation15ContiguousBytesADs5UInt8VRszlMc_ptr, 2u);
        sub_100007958((uint64_t)&_ss15CollectionOfOneVyxG10Foundation15ContiguousBytesADs5UInt8VRszlMc_ptr);
      }
      break;
  }

  sub_1001891D0();
  if (!v5)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v22 = sub_10000F6E4();
  v23 = sub_100006FB4(v22, (uint64_t)qword_1002B6EB0);
  swift_retain();
  Logger.logObject.getter(v24);
  v25 = sub_1001891C8();
  if (os_log_type_enabled(v23, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v26 = 67109120;
    v28 = *(unsigned __int8 *)(v2 + 40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v26 + 4);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "DEVICE MOVEMENT AVAILABLE: %{BOOL}d", v26, 8u);
    sub_100007958((uint64_t)v26);

  }
  else
  {

    swift_release();
  }
  return v2;
}

void sub_100188DC0(void *a1, uint64_t a2)
{
  char *v4;
  int v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v4 = (char *)(a2 + 16);
  swift_beginAccess(a2 + 16, v19, 1, 0);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (!a1)
  {
LABEL_9:
    if (!v5)
      return;
    goto LABEL_10;
  }
  v6 = a1;
  if ((objc_msgSend(v6, "unknown") & 1) != 0)
  {

    goto LABEL_4;
  }
  if ((objc_msgSend(v6, "stationary") & 1) != 0
    || (objc_msgSend(v6, "automotive") & 1) != 0)
  {

    goto LABEL_9;
  }
  v16 = objc_msgSend(v6, "cycling");

  if ((v16 & 1) != 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      return;
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  if ((v5 & 1) != 0)
    return;
  v7 = 1;
LABEL_11:
  *v4 = v7;
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100006FB4(v8, (uint64_t)qword_1002B6EB0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    LOBYTE(v17) = v7;
    v14 = String.init<A>(describing:)(&v17, &type metadata for DeviceMovementObserver.Status);
    v17 = sub_100006FCC(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "DEVICE MOVEMENT: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

}

void sub_100188FE4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t DeviceMovementObserver.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DeviceMovementObserver.__deallocating_deinit()
{
  uint64_t v0;

  DeviceMovementObserver.deinit();
  return swift_deallocClassInstance(v0, 41, 7);
}

unint64_t sub_100189080()
{
  unint64_t result;

  result = qword_1002B44C0;
  if (!qword_1002B44C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceMovementObserver.Status, &type metadata for DeviceMovementObserver.Status);
    atomic_store(result, (unint64_t *)&qword_1002B44C0);
  }
  return result;
}

uint64_t type metadata accessor for DeviceMovementObserver()
{
  return objc_opt_self(_TtC13EnsembleAgent22DeviceMovementObserver);
}

uint64_t storeEnumTagSinglePayload for DeviceMovementObserver.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100189128 + 4 * byte_100229929[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10018915C + 4 * byte_100229924[v4]))();
}

uint64_t sub_10018915C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100189164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018916CLL);
  return result;
}

uint64_t sub_100189178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100189180);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100189184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018918C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceMovementObserver.Status()
{
  return &type metadata for DeviceMovementObserver.Status;
}

void sub_1001891A8(void *a1)
{
  uint64_t v1;

  sub_100188DC0(a1, v1);
}

uint64_t sub_1001891B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001891C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001891C8()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_1001891DC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  double v13;
  id v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t inited;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  NSString v22;
  Class isa;
  _BYTE v25[176];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v25[-v7];
  v9 = mach_absolute_time();
  HIDTime.nanoseconds.getter(a1);
  v11 = (double)v10 * 0.000000001;
  HIDTime.nanoseconds.getter(v9);
  v13 = v11 - (double)v12 * 0.000000001;
  v14 = objc_msgSend((id)objc_opt_self(NSDate), "now");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v15 = sub_1001894EC();
  sub_100189528((uint64_t)v6);
  v16 = sub_100189460((uint64_t)v6, v13);
  v17 = sub_1000055B0(&qword_1002AA680);
  inited = swift_initStackObject(v17, v25);
  *(_OWORD *)(inited + 16) = xmmword_10021CFF0;
  *(_QWORD *)(inited + 32) = 0x6D617473656D6974;
  *(_QWORD *)(inited + 40) = 0xE900000000000070;
  *(_QWORD *)(inited + 48) = v16;
  *(_QWORD *)(inited + 72) = v15;
  strcpy((char *)(inited + 80), "timestampEnd");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(_QWORD *)(inited + 120) = v2;
  v19 = sub_100005534((_QWORD *)(inited + 96));
  sub_100189528((uint64_t)v19);
  *(_QWORD *)(inited + 128) = 0x726F70736E617254;
  *(_QWORD *)(inited + 136) = 0xE900000000000074;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = 1279547201;
  *(_QWORD *)(inited + 152) = 0xE400000000000000;
  v20 = v16;
  v21 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  sub_100085B40(v21);
  swift_bridgeObjectRelease();
  v22 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  PLLogRegisteredEvent(112, v22, isa, 0);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
}

id sub_100189460(uint64_t a1, double a2)
{
  uint64_t v2;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  isa = Date._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "initWithTimeInterval:sinceDate:", isa, a2);

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

unint64_t sub_1001894EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4580;
  if (!qword_1002B4580)
  {
    v1 = objc_opt_self(NSDate);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B4580);
  }
  return result;
}

uint64_t sub_100189528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t static UInt64.logicalMaximum.getter()
{
  return -1;
}

uint64_t sub_10018953C(uint64_t a1, uint64_t a2)
{
  return static UniversalControlLink.< infix(_:_:)(a2, a1);
}

BOOL sub_10018954C(uint64_t a1, uint64_t a2)
{
  return sub_10007ECE0(a2, a1);
}

BOOL sub_10018955C(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_100189568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17;

  if (static UniversalControlUUID.compare(lhs:rhs:)(a7, a8, a3, a4) == -1)
    return 1;
  if (static UniversalControlUUID.compare(lhs:rhs:)(a3, a4, a7, a8) == -1)
    return 0;
  if (a5 == a1 && a6 == a2)
    return 0;
  v17 = 1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a5, a6, a1, a2, 1) & 1) == 0)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 1);
    return 0;
  }
  return v17;
}

BOOL static HIDTime.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

unint64_t static HIDTime.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 >= a2)
    return a1 - a2;
  else
    return 0;
}

void ContinuousTime.seconds.getter(unint64_t a1)
{
  char v2;
  char v3;
  char v4;

  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0((double)a1 * (double)(unint64_t)static ContinuousTime.timebase, (double)*((unint64_t *)&static ContinuousTime.timebase + 1));
  if (v2)
  {
    sub_100189CB8();
    if (v3)
    {
      __break(1u);
    }
    else
    {
      sub_100189CC8();
      if (!(v2 ^ v4 | v3))
        return;
    }
    __break(1u);
  }
}

EnsembleAgent::ContinuousTime static ContinuousTime.+ infix(_:_:)(unint64_t a1, double a2)
{
  unint64_t v3;

  ContinuousTime.nanoseconds.getter(a1);
  return ContinuousTime.init(nanoseconds:)(((double)v3 * 0.000000001 + a2) * 1000000000.0);
}

float sub_100189738()
{
  __int128 v0;
  float result;
  mach_timebase_info v2;

  v2 = 0;
  mach_timebase_info(&v2);
  *(_QWORD *)&v0 = v2.numer;
  *((_QWORD *)&v0 + 1) = v2.denom;
  result = *(float *)&v2.numer;
  static ContinuousTime.timebase = v0;
  return result;
}

__int128 *ContinuousTime.timebase.unsafeMutableAddressor()
{
  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  return &static ContinuousTime.timebase;
}

uint64_t static ContinuousTime.timebase.getter()
{
  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  return static ContinuousTime.timebase;
}

EnsembleAgent::ContinuousTime __swiftcall ContinuousTime.init(nanoseconds:)(Swift::Double nanoseconds)
{
  char v2;
  EnsembleAgent::ContinuousTime result;
  char v4;
  char v5;

  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0((double)*((unint64_t *)&static ContinuousTime.timebase + 1) * nanoseconds, (double)(unint64_t)static ContinuousTime.timebase);
  if (!v2)
    goto LABEL_7;
  sub_100189CB8();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    sub_100189CC8();
    if (!(v2 ^ v5 | v4))
    {
LABEL_7:
      sub_100189CD4();
      return result;
    }
  }
  __break(1u);
  return result;
}

EnsembleAgent::ContinuousTime __swiftcall ContinuousTime.init(nanoseconds:)(Swift::UInt64 nanoseconds)
{
  double v1;
  char v2;
  EnsembleAgent::ContinuousTime result;
  char v4;
  char v5;

  v1 = (double)nanoseconds;
  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0(v1 * (double)*((unint64_t *)&static ContinuousTime.timebase + 1), (double)(unint64_t)static ContinuousTime.timebase);
  if (!v2)
    goto LABEL_7;
  sub_100189CB8();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    sub_100189CC8();
    if (!(v2 ^ v5 | v4))
    {
LABEL_7:
      sub_100189CD4();
      return result;
    }
  }
  __break(1u);
  return result;
}

void ContinuousTime.nanoseconds.getter(unint64_t a1)
{
  char v2;
  char v3;
  char v4;

  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0((double)a1 * (double)(unint64_t)static ContinuousTime.timebase, (double)*((unint64_t *)&static ContinuousTime.timebase + 1));
  if (v2)
  {
    sub_100189CB8();
    if (v3)
    {
      __break(1u);
    }
    else
    {
      sub_100189CC8();
      if (!(v2 ^ v4 | v3))
        return;
    }
    __break(1u);
  }
}

EnsembleAgent::ContinuousTime __swiftcall ContinuousTime.init(seconds:)(Swift::Double seconds)
{
  double v1;
  char v2;
  EnsembleAgent::ContinuousTime result;
  char v4;
  char v5;

  v1 = seconds * 1000000000.0;
  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0(v1 * (double)*((unint64_t *)&static ContinuousTime.timebase + 1), (double)(unint64_t)static ContinuousTime.timebase);
  if (!v2)
    goto LABEL_7;
  sub_100189CB8();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    sub_100189CC8();
    if (!(v2 ^ v5 | v4))
    {
LABEL_7:
      sub_100189CD4();
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static HIDTime.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (__CFADD__(a1, a2))
    return -1;
  else
    return a1 + a2;
}

void static ContinuousTime.- infix(_:_:)(unint64_t a1, double a2)
{
  char v4;
  char v5;
  double v6;
  char v7;
  double v8;

  if (qword_1002A9938 != -1)
    swift_once(&qword_1002A9938, sub_100189738);
  sub_100189CA0((double)a1 * (double)(unint64_t)static ContinuousTime.timebase, (double)*((unint64_t *)&static ContinuousTime.timebase + 1));
  if (!v4)
  {
    v8 = 1.84467441e10;
    goto LABEL_8;
  }
  sub_100189CB8();
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_100189CC8();
  if (v4 ^ v7 | v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v8 = (double)(unint64_t)v6 * 0.000000001;
LABEL_8:
  if (v8 > a2)
    ContinuousTime.init(nanoseconds:)((v8 - a2) * 1000000000.0);
}

BOOL sub_100189B20(unint64_t *a1, unint64_t *a2)
{
  return static HIDTime.< infix(_:_:)(*a1, *a2);
}

BOOL sub_100189B2C(unint64_t *a1, unint64_t *a2)
{
  return sub_10007F0DC(*a1, *a2);
}

BOOL sub_100189B38(unint64_t *a1, unint64_t *a2)
{
  return sub_10007F204(*a1, *a2);
}

BOOL sub_100189B44(unint64_t *a1, unint64_t *a2)
{
  return sub_10018955C(*a1, *a2);
}

uint64_t ContinuousTime.description.getter(unint64_t a1)
{
  ContinuousTime.nanoseconds.getter(a1);
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
}

uint64_t sub_100189B90()
{
  unint64_t *v0;

  return ContinuousTime.description.getter(*v0);
}

void HIDTime.hash(into:)(int a1, Swift::UInt64 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int HIDTime.hashValue.getter(Swift::UInt64 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_100189C00()
{
  Swift::UInt64 *v0;

  return HIDTime.hashValue.getter(*v0);
}

void sub_100189C08(int a1)
{
  Swift::UInt64 *v1;

  HIDTime.hash(into:)(a1, *v1);
}

Swift::Int sub_100189C10(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100189C54()
{
  unint64_t result;

  result = qword_1002B4588;
  if (!qword_1002B4588)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContinuousTime, &type metadata for ContinuousTime);
    atomic_store(result, (unint64_t *)&qword_1002B4588);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuousTime()
{
  return &type metadata for ContinuousTime;
}

double sub_100189CA0(double a1, double a2)
{
  return round(a1 / a2);
}

id sub_100189CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (qword_1002A9940 != -1)
    a1 = swift_once(&qword_1002A9940, sub_10018A7C0);
  v4 = sub_10018AEC0(a1, a2, a3, (void *)qword_1002B4590);
  if (!v4)
  {
    if (qword_1002A9948 != -1)
      v4 = (id)swift_once(&qword_1002A9948, sub_10018AB2C);
    v4 = sub_10018AEC0((uint64_t)v4, v5, v6, (void *)qword_1002B4598);
  }
  v7 = v4;
  swift_bridgeObjectRelease(a2);
  return v7;
}

uint64_t sub_100189D94(unsigned __int8 a1)
{
  return a1 + 1;
}

id sub_100189DA0(double a1, double a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  id v10;
  id v11;
  uint64_t v12;
  NSString v13;
  id v14;

  v10 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v11 = objc_msgSend(v10, "userInterfaceIdiom");

  v12 = sub_10018AC7C((unint64_t)v11);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(a6, "namedVectorGlyphWithName:scaleFactor:deviceIdiom:layoutDirection:glyphSize:glyphWeight:glyphPointSize:appearanceName:", v13, v12, 0, a5 + 1, sub_100189D94(HIBYTE(a5)), 0, a2, a1);

  return v14;
}

void sub_100189E90(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double MidX;
  id v31;
  double v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  v4 = type metadata accessor for FloatingPointRoundingRule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000E478();
  v7 = sub_10018AED8(v6, "baselineOffset");
  v9 = v8;
  sub_10018AED8((uint64_t)v7, "capHeight");
  v11 = v10;
  objc_msgSend(a1, "contentBounds");
  v34 = v12;
  v35 = v13;
  v36 = v14;
  v38 = v15;
  objc_msgSend(a1, "alignmentRect");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  objc_msgSend(a1, "numberOfHierarchyLayers");
  v24 = sub_100007734(a1);
  if (v25)
    v26 = v24;
  else
    v26 = 0x6C6F626D79534653;
  if (v25)
    v27 = v25;
  else
    v27 = 0xE800000000000000;
  sub_10018AED8(v24, "scale");
  v29 = v28;
  v39.origin.x = v17;
  v39.origin.y = v19;
  v39.size.width = v21;
  v39.size.height = v23;
  MidX = CGRectGetMidX(v39);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v4);
  CGPoint.rounded(_:to:)(v2, v29, MidX, (v11 - v9) * 0.5);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  v31 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  v40.origin.x = v17;
  v40.origin.y = v19;
  v40.size.width = v21;
  v40.size.height = v23;
  objc_msgSend(v31, "setBounds:", 0.0, 0.0, CGRectGetWidth(v40), v11, *(_QWORD *)&v21, *(_QWORD *)&v23);
  sub_10018AE34(v26, v27, v31);
  v41.origin.x = v34;
  v41.size.width = v35;
  v41.origin.y = v36;
  v41.size.height = v38;
  v32 = ceil(v29 * CGRectGetWidth(v41));
  if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) != 0)
  {
    if (v32 > -9.22337204e18)
    {
      if (v32 < 9.22337204e18)
      {
        v42.origin.x = v34;
        v42.origin.y = v36;
        v42.size.width = v35;
        v42.size.height = v38;
        v33 = ceil(v29 * CGRectGetHeight(v42));
        if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) != 0)
        {
          if (v33 > -9.22337204e18)
          {
            if (v33 < 9.22337204e18)
              __asm { BR              X10 }
LABEL_19:
            __break(1u);
            JUMPOUT(0x10018A33CLL);
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_16;
}

void sub_10018A360(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, int64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, char a13)
{
  uint64_t v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  uint64_t v27;
  size_t v28;
  size_t v29;
  CGColorSpace *DeviceRGB;
  uint32_t v31;
  CGContext *v32;
  CGColor *SRGB;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  CGImageRef Image;
  CGImage *value;
  const char *v39;
  uint64_t v40;
  void **aBlock;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t v49;
  EnsembleAgent::VibrantAppearance v50;
  CGRect v51;

  v22 = *a1;
  v23 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  objc_msgSend(v23, "setPosition:", a10, a11);
  aBlock = a2;
  v44 = a3;
  swift_bridgeObjectRetain(a3);
  v24._countAndFlagsBits = 45;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v49 = v22;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  sub_10000922C((uint64_t)aBlock, a3, v23);
  v27 = CARenderImageBitsPerComponent(a6);
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a4))
    {
      v39 = "Not enough bits to represent the passed value";
      v40 = 45;
      goto LABEL_13;
    }
    v28 = v27;
    v29 = CARenderImageRowbytes(a6, a4);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v31 = CARenderImageCGBitmapInfo(a6);
    v32 = CGBitmapContextCreate(0, a4, a5, v28, v29, DeviceRGB, v31);

    if (!v32)
    {
LABEL_9:
      *a9 = v23;
      return;
    }
    SRGB = CGColorCreateSRGB(0.0, 0.0, 0.0, 0.0);
    CGContextSetFillColorWithColor(v32, SRGB);

    v51.size.width = (double)(uint64_t)a4;
    v51.size.height = (double)a5;
    v51.origin.x = 0.0;
    v51.origin.y = 0.0;
    CGContextFillRect(v32, v51);
    LOBYTE(v49) = 5;
    v34 = swift_allocObject(&unk_10028F500, 32, 7);
    *(_QWORD *)(v34 + 16) = a8;
    *(_QWORD *)(v34 + 24) = &v49;
    v35 = swift_allocObject(&unk_10028F528, 32, 7);
    *(_QWORD *)(v35 + 16) = sub_10018AE7C;
    *(_QWORD *)(v35 + 24) = v34;
    v47 = sub_10018AE88;
    v48 = v35;
    aBlock = _NSConcreteStackBlock;
    v44 = 1107296256;
    v45 = sub_10018A798;
    v46 = &unk_10028F540;
    v36 = _Block_copy(&aBlock);
    swift_retain(v35);
    swift_release();
    objc_msgSend(a7, "drawHierarchyLayerAtIndex:inContext:withColorResolver:", v22, v32, v36);
    _Block_release(v36);
    LOBYTE(v36) = swift_isEscapingClosureAtFileLocation(v35, "", 78, 156, 79, 1);
    swift_release();
    if ((v36 & 1) == 0)
    {
      Image = CGBitmapContextCreateImage(v32);
      objc_msgSend(v23, "setContentsGravity:", kCAGravityCenter);
      objc_msgSend(v23, "setContentsScale:", a12);
      objc_msgSend(v23, "setContents:", Image);
      if (v49 == 5)
      {
        swift_release();

      }
      else
      {
        sub_1001A2E90(a13 & 1, v49);
        value = (CGImage *)v50.compositing.value;
        CALayer.setVibrantAppearance(_:)(v50);
        swift_release();

        Image = value;
      }

      goto LABEL_9;
    }
    __break(1u);
  }
  v39 = "Negative value is not representable";
  v40 = 35;
LABEL_13:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v39, v40, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

void sub_10018A734(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  unint64_t v4;

  v4 = *a3 + a2;
  if (__OFADD__(*a3, a2))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= 4)
      LOBYTE(v4) = 5;
    *a4 = v4;

  }
}

uint64_t sub_10018A798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

void (*sub_10018A7C0(uint64_t a1))(char *, uint64_t, uint64_t)
{
  return sub_10018AB54(a1, 0xD00000000000002ELL, 0x80000001002594D0, (void (**)(char *, uint64_t, uint64_t))&qword_1002B4590);
}

void (*sub_10018A7E8(uint64_t a1))(char *, uint64_t, uint64_t)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  id v15;
  void *v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  id v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  id v26;
  id v27;
  _QWORD v29[2];
  uint64_t v30;

  v2 = sub_1000055B0(qword_1002ABCC8);
  __chkstk_darwin(v2);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v29[0] = (char *)v29 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)v29 - v12;
  sub_1000078E0(0, &qword_1002B45A0, NSBundle_ptr);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v13, a1, v5);
  v15 = sub_10018AC00((uint64_t)v13);
  if (!v15)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v26 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0xD000000000000010, 0x8000000100259440, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/SFSymbol.swift", 78, 2, 208);
    swift_willThrow(v26);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return v14;
  }
  v16 = v15;
  v30 = a1;
  v17 = sub_10018ADA4(0x737465737341, 0xE600000000000000, 7496035, 0xE300000000000000, v15);
  if (!v17)
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v4, 1, 1, v5);
    goto LABEL_9;
  }
  v18 = v17;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v19(v4, v13, v5);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v4, 0, 1, v5);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v5) == 1)
  {
LABEL_9:
    sub_100048AE8((uint64_t)v4);
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v27 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0xD000000000000017, 0x80000001002594B0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/SFSymbol.swift", 78, 2, 214);
    swift_willThrow(v27);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v30, v5);
    return v14;
  }
  v20 = v29[0];
  v19((char *)v29[0], v4, v5);
  v14(v9, v20, v5);
  v21 = objc_allocWithZone((Class)CUICatalog);
  v22 = v29[1];
  v23 = (void (*)(char *, uint64_t, uint64_t))sub_10018AC9C((uint64_t)v9);
  v24 = v30;
  if (!v22)
    v14 = v23;

  v25 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v25(v24, v5);
  v25(v20, v5);
  return v14;
}

void (*sub_10018AB2C(uint64_t a1))(char *, uint64_t, uint64_t)
{
  return sub_10018AB54(a1, 0xD000000000000035, 0x80000001002593E0, (void (**)(char *, uint64_t, uint64_t))&qword_1002B4598);
}

void (*sub_10018AB54(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(char *, uint64_t, uint64_t)))(char *, uint64_t, uint64_t)
{
  uint64_t v4;
  uint64_t v8;
  void (*result)(char *, uint64_t, uint64_t);

  v8 = type metadata accessor for URL(0);
  __chkstk_darwin(v8);
  sub_10000E478();
  URL.init(fileURLWithPath:isDirectory:)(a2, a3, 1);
  result = sub_10018A7E8(v4);
  *a4 = result;
  return result;
}

id sub_10018AC00(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSURL *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  v7 = objc_msgSend(v3, "initWithURL:", v5);

  v8 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

uint64_t sub_10018AC7C(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_100229B18[a1];
}

id sub_10018AC9C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v15 = 0;
  v6 = objc_msgSend(v2, "initWithURL:error:", v4, &v15);

  v7 = v15;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v15;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    v13 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v6;
}

id sub_10018ADA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;
  NSString v9;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v10 = objc_msgSend(a5, "URLForResource:withExtension:", v8, v9);

  return v10;
}

void sub_10018AE34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setName:", v4);

}

void sub_10018AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10018A734(a1, a2, *(_QWORD **)(v2 + 16), *(_BYTE **)(v2 + 24));
}

uint64_t sub_10018AE88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10018AEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10018AEB8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10018AEC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  double v7;
  double v8;

  return sub_100189DA0(v8, v7, v6, v4, v5, a4);
}

id sub_10018AED8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_10018AEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _QWORD *v34;

  v2 = v1;
  v3 = &_swiftEmptyDictionarySingleton;
  v34 = &_swiftEmptyDictionarySingleton;
  sub_100043078(v33, a1);
  v4 = v33[0];
  v5 = v33[1];
  v6 = v33[3];
  v7 = v33[4];
  v8 = (unint64_t)(v33[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    do
    {
      if (v7)
      {
        v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v10 = v9 | (v6 << 6);
      }
      else
      {
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v11 >= v8)
          goto LABEL_34;
        v12 = *(_QWORD *)(v5 + 8 * v11);
        v13 = v6 + 1;
        if (!v12)
        {
          v13 = v6 + 2;
          if (v6 + 2 >= v8)
            goto LABEL_34;
          v12 = *(_QWORD *)(v5 + 8 * v13);
          if (!v12)
          {
            v13 = v6 + 3;
            if (v6 + 3 >= v8)
              goto LABEL_34;
            v12 = *(_QWORD *)(v5 + 8 * v13);
            if (!v12)
            {
              v13 = v6 + 4;
              if (v6 + 4 >= v8)
                goto LABEL_34;
              v12 = *(_QWORD *)(v5 + 8 * v13);
              if (!v12)
              {
                v13 = v6 + 5;
                if (v6 + 5 >= v8)
                  goto LABEL_34;
                v12 = *(_QWORD *)(v5 + 8 * v13);
                if (!v12)
                {
                  v14 = v6 + 6;
                  while (v14 < v8)
                  {
                    v12 = *(_QWORD *)(v5 + 8 * v14++);
                    if (v12)
                    {
                      v13 = v14 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_34:
                  sub_10005E1F4(v4);
                  return;
                }
              }
            }
          }
        }
LABEL_19:
        v7 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v13 << 6);
        v6 = v13;
      }
      v15 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v10);
    }
    while (!v15);
    v32 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v10);
    v16 = v3[2];
    if (v3[3] <= v16)
    {
      v18 = v2;
      v19 = v16 + 1;
      v20 = v15;
      v21 = v19;
      v2 = v18;
      sub_1000546B4(v21, 1);
      v3 = v34;
    }
    else
    {
      v17 = v15;
    }
    v22 = static Hasher._hash(seed:_:)(v3[5], v32);
    v23 = (char *)(v3 + 8);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = v22 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~v3[(v25 >> 6) + 8]) == 0)
      break;
    v27 = __clz(__rbit64((-1 << v25) & ~v3[(v25 >> 6) + 8])) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)&v23[(v27 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v27;
    *(_QWORD *)(v3[6] + 8 * v27) = v32;
    *(_QWORD *)(v3[7] + 8 * v27) = v15;
    ++v3[2];

  }
  v28 = 0;
  v29 = (unint64_t)(63 - v24) >> 6;
  while (++v26 != v29 || (v28 & 1) == 0)
  {
    v30 = v26 == v29;
    if (v26 == v29)
      v26 = 0;
    v28 |= v30;
    v31 = *(_QWORD *)&v23[8 * v26];
    if (v31 != -1)
    {
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
      goto LABEL_33;
    }
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_10018B174(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (sub_10018DF44(1684632949, 0xE400000000000000, a1) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x736D657469 && a2 == 0xE500000000000000;
    if (v6 || (sub_10018DF44(0x736D657469, 0xE500000000000000, a1) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E4972656461656CLL && a2 == 0xEB00000000786564)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_10018DF44(0x6E4972656461656CLL, 0xEB00000000786564, a1);
      sub_10000E410();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_10018B2A4(char a1)
{
  if (!a1)
    return 1684632949;
  if (a1 == 1)
    return 0x736D657469;
  return 0x6E4972656461656CLL;
}

uint64_t sub_10018B2F8()
{
  char *v0;

  return sub_10018B2A4(*v0);
}

uint64_t sub_10018B300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10018B174(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018B324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D554();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018B34C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D554();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10018B374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews) = 0;
  v7 = v3 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid;
  v8 = sub_10000E440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a1, v8);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items) = a2;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_leaderIndex) = a3;
  return v3;
}

void sub_10018B3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10000E440();
  sub_10018DF80();
  __chkstk_darwin(v4);
  sub_1000601B4();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid, v0);
  UUID.uuid.getter(v5, v6);
  sub_10006D2DC();
  sub_10018DEA4();
  UniversalControlUUID.init(rawValue:)(v7, v14, v8, v9, v10, v11, v12, v13);
  sub_10018DF50();
  sub_10002644C();
}

void sub_10018B484()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10000E440();
  sub_10018DF80();
  __chkstk_darwin(v2);
  sub_1000601B4();
  sub_10018B3F8();
  sub_10006D2DC();
  sub_10018DEA4();
  v9 = UUID.init(uuid:)(v3, v8, v4, v5, v6, v7);
  UUID.uuidString.getter(v9);
  sub_10018DF50();
  v10 = sub_1000599D0(8, v0, v1);
  static String._fromSubstring(_:)(v10);
  sub_10000E410();
  sub_10002644C();
}

uint64_t sub_10018B520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid;
  v2 = sub_10000E440();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10018B580()
{
  uint64_t v0;

  sub_10018B520();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018B5A4()
{
  return type metadata accessor for DragSession(0);
}

uint64_t type metadata accessor for DragSession(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B45D0;
  if (!qword_1002B45D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DragSession);
  return result;
}

uint64_t sub_10018B5E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10018B674(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  type metadata accessor for UUID(0);
  sub_10018DF94();
  __chkstk_darwin(v6);
  sub_1000432FC();
  v7 = sub_1000055B0(&qword_1002B4808);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000E478();
  v10 = a1[3];
  v9 = a1[4];
  sub_10000DBE4(a1, v10);
  v11 = sub_10018D554();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_10028F698, &unk_10028F698, v11, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v18 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid, v3);
  v23 = 0;
  v12 = sub_100041014(&qword_1002AF0D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v4, &v23, v7, v3, v12);
  if (v19)
  {
    sub_10018DF70();
  }
  else
  {
    sub_10018DF70();
    v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items);
    v22 = 1;
    v13 = sub_10003B038();
    v15 = sub_10003B030(&qword_1002B4810, v14, (void (*)(void))sub_10018D5CC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v22, v7, v13, v15);
    v16 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_leaderIndex);
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v21, v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v2, v7);
}

uint64_t sub_10018B860(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10018B8AC(a1);
  return v3;
}

uint64_t sub_10018B8AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, char *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  type metadata accessor for UUID(0);
  sub_10018DF94();
  __chkstk_darwin(v6);
  v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000055B0(&qword_1002B47E0);
  __chkstk_darwin(v25);
  sub_1000432FC();
  v26 = OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews;
  v27 = v1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews) = 0;
  v9 = a1[3];
  v8 = a1[4];
  v28 = a1;
  sub_10000DBE4(a1, v9);
  v10 = sub_10018D554();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_10028F698, &unk_10028F698, v10, v9, v8);
  if (v2)
  {
    v16 = v27;
    v13 = v28;
    swift_bridgeObjectRelease();
    v14 = type metadata accessor for DragSession(0);
    swift_deallocPartialClassInstance(v16, v14, *(unsigned int *)(*(_QWORD *)v16 + 48), *(unsigned __int16 *)(*(_QWORD *)v16 + 52));
    v21 = v13;
  }
  else
  {
    v23 = v3;
    v32 = 0;
    sub_100041014(&qword_1002AF0E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = v24;
    v11 = v25;
    sub_10018DF68(v4, (uint64_t)&v32, v25, v4);
    v16 = v27;
    v17 = *(void (**)(uint64_t, char *))(v23 + 32);
    v24 = (char *)v4;
    v17(v27 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid, v12);
    v18 = sub_10003B038();
    v31 = 1;
    sub_10003B030(&qword_1002B47F8, v19, (void (*)(void))sub_10018D590, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10018DF68(v18, (uint64_t)&v31, v11, v18);
    *(_QWORD *)(v16 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items) = v29;
    v30 = 2;
    v20 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v11);
    sub_10018DEDC();
    *(_QWORD *)(v16 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_leaderIndex) = v20;
    v21 = v28;
  }
  sub_100005988(v21);
  return v16;
}

uint64_t sub_10018BB54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x73646E756F62 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73646E756F62, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F50726F68636E61 && a2 == 0xEB00000000746E69)
  {
    v8 = 0xEB00000000746E69;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F50726F68636E61, 0xEB00000000746E69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656E6F706D6F63, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10018BCBC(char a1)
{
  if (!a1)
    return 0x73646E756F62;
  if (a1 == 1)
    return 0x6F50726F68636E61;
  return 0x6E656E6F706D6F63;
}

void sub_10018BD1C()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;

  sub_1000055B0(&qword_1002B47C0);
  sub_1001018E4();
  __chkstk_darwin(v3);
  sub_1000EFFE8();
  v4 = sub_10018D4A0();
  sub_10003B088((uint64_t)&type metadata for DragItem.CodingKeys, v5, v4);
  v16 = *v1;
  v15 = 0;
  type metadata accessor for CGSize(0);
  v6 = sub_100041014(&qword_1002B47C8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  sub_10018DEEC((uint64_t)&v16, (uint64_t)&v15, v7, v8, v6);
  if (!v2)
  {
    v16 = v1[1];
    v15 = 1;
    type metadata accessor for CGPoint(0);
    v9 = sub_100041014(&qword_1002AEF00, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    sub_10018DEEC((uint64_t)&v16, (uint64_t)&v15, v10, v11, v9);
    *(_QWORD *)&v16 = *((_QWORD *)v1 + 4);
    v15 = 2;
    v12 = sub_10003B038();
    v14 = sub_10003B030(&qword_1002B47D0, v13, (void (*)(void))sub_10018D518, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v15, v0, v12, v14);
  }
  sub_1000876BC();
  sub_1000C260C();
}

void sub_10018BE9C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = sub_1000055B0(&qword_1002B4790);
  __chkstk_darwin(v5);
  sub_10000DBE4(a1, a1[3]);
  v6 = sub_10018D4A0();
  sub_10003B190((uint64_t)&type metadata for DragItem.CodingKeys, (uint64_t)&type metadata for DragItem.CodingKeys, v6);
  if (v2)
  {
    sub_10003B008();
  }
  else
  {
    type metadata accessor for CGSize(0);
    sub_100041014(&qword_1002B47A0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    sub_10018DF00();
    type metadata accessor for CGPoint(0);
    v11 = 1;
    sub_100041014(&qword_1002ABBE8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    sub_10018DF00();
    v7 = sub_10003B038();
    v11 = 2;
    sub_10003B030(&qword_1002B47B0, v8, (void (*)(void))sub_10018D4DC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10018DF68(v7, (uint64_t)&v11, v5, v7);
    sub_10003B0F4();
    sub_10003B008();
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v9;
    a2[3] = v10;
    a2[4] = v9;
  }
  sub_10018DF24();
}

uint64_t sub_10018C054(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7955819, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D617266 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D617266, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1752457584, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10018C178(char a1)
{
  if (!a1)
    return 7955819;
  if (a1 == 1)
    return 0x656D617266;
  return 1752457584;
}

void sub_10018C1BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _OWORD v15[2];
  _BYTE v16[8];

  v3 = v1;
  sub_1000055B0(&qword_1002B4888);
  sub_1001018E4();
  __chkstk_darwin(v4);
  sub_1000EFFE8();
  v5 = sub_10018DC18();
  sub_10003B088((uint64_t)&type metadata for DragComponent.CodingKeys, v6, v5);
  v7 = *v1;
  v8 = v1[1];
  LOBYTE(v15[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v15, v0);
  if (!v2)
  {
    v9 = *((_OWORD *)v1 + 2);
    v15[0] = *((_OWORD *)v1 + 1);
    v15[1] = v9;
    v14 = 1;
    type metadata accessor for CGRect(0);
    v11 = v10;
    v12 = sub_100041014(&qword_1002B4890, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v14, v0, v11, v12);
    sub_10018DC90((uint64_t)(v3 + 6), (uint64_t)v16);
    sub_10018DC90((uint64_t)v16, (uint64_t)v15);
    v14 = 2;
    v13 = sub_10018DCD8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v14, v0, &type metadata for Path, v13);
  }
  sub_1000876BC();
  sub_1000C260C();
}

void sub_10018C310(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  __n128 v17;
  id v18;
  id v19;
  id v20[4];
  char v21;

  v5 = sub_1000055B0(&qword_1002B4868);
  __chkstk_darwin(v5);
  sub_10000DBE4(a1, a1[3]);
  v6 = sub_10018DC18();
  sub_10003B190((uint64_t)&type metadata for DragComponent.CodingKeys, (uint64_t)&type metadata for DragComponent.CodingKeys, v6);
  if (v2)
  {
    sub_10003B008();
  }
  else
  {
    LOBYTE(v20[0]) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(v20, v5);
    v9 = v8;
    type metadata accessor for CGRect(0);
    v11 = v10;
    v21 = 1;
    sub_100041014(&qword_1002B4878, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &v21, v5, v11);
    v12 = v20[0];
    v13 = v20[1];
    v14 = v20[2];
    v15 = v20[3];
    v21 = 2;
    v16 = sub_10018DC54();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, &type metadata for Path, &v21, v5, &type metadata for Path, v16, v17);
    sub_100179480();
    v18 = v20[0];
    v19 = v20[0];
    sub_10003B008();

    sub_10002D89C();
    *a2 = v7;
    a2[1] = v9;
    a2[2] = (uint64_t)v12;
    a2[3] = (uint64_t)v13;
    a2[4] = (uint64_t)v14;
    a2[5] = (uint64_t)v15;
    a2[6] = (uint64_t)v18;
  }
  sub_10018DF24();
}

uint64_t sub_10018C4EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10018B860(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10018C514(_QWORD *a1)
{
  return sub_10018B674(a1);
}

void sub_10018C534(_BYTE *a1@<X8>)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  sub_10018B3F8();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  a1[13] = v15;
  a1[14] = v16;
  a1[15] = v17;
}

uint64_t sub_10018C5D0()
{
  char *v0;

  return sub_10018BCBC(*v0);
}

uint64_t sub_10018C5D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10018BB54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018C5FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D4A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018C624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D4A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10018C64C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10018BE9C(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

void sub_10018C690()
{
  sub_10018BD1C();
}

uint64_t sub_10018C6A4()
{
  char *v0;

  return sub_10018C178(*v0);
}

uint64_t sub_10018C6AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10018C054(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018C6D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018DC18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018C6F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018DC18();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10018C720@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_10018C310(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

void sub_10018C76C()
{
  sub_10018C1BC();
}

uint64_t sub_10018C7AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000DBE4(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v13, v3, v4);
  if (a2)
  {
    a2 = CGImageRef.pngData()();
    v6 = v5;
  }
  else
  {
    v6 = 0xF000000000000000;
  }
  v12[0] = a2;
  v12[1] = v6;
  v7 = v14;
  v8 = v15;
  sub_10003FEF8((uint64_t)v13, v14);
  v9 = sub_1000055B0(&qword_1002B4730);
  v10 = sub_1000366C8(&qword_1002B4738, &qword_1002B4730, (void (*)(void))sub_1000A23DC, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v12, v9, v10, v7, v8);
  sub_100022AD8(a2, v6);
  return sub_100005988(v13);
}

uint64_t sub_10018C8AC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10018C7AC(a1, *v1);
}

void *sub_10018C8C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = sub_10000DBE4(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v3);
  if (v1)
  {
    sub_100005988(a1);
  }
  else
  {
    v5 = v15;
    v6 = v16;
    sub_10000DBE4(v14, v15);
    v7 = sub_1000055B0(&qword_1002B4730);
    v8 = sub_1000366C8(&qword_1002B4740, &qword_1002B4730, (void (*)(void))sub_1000A2140, (uint64_t)&protocol conformance descriptor for <A> A?);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v12, v7, v7, v8, v5, v6);
    v10 = v13;
    if (v13 >> 60 == 15)
    {
      v4 = 0;
    }
    else
    {
      v11 = v12;
      type metadata accessor for CGImage(0);
      v4 = static CGImageRef.new(imageData:)();
      sub_100022AD8(v11, v10);
    }
    sub_100005988(v14);
    sub_100005988(a1);
  }
  return v4;
}

uint64_t sub_10018CA10(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x73746E65746E6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_10018DF44(0x73746E65746E6F63, 0xE800000000000000, a1);
    sub_10000E410();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_10018CA88(uint64_t a1)
{
  sub_10000E5C0(a1);
  Hasher._combine(_:)(0);
  sub_10004740C();
  sub_10000E59C();
}

void *sub_10018CAB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;

  result = sub_10018C8C4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10018CAE0()
{
  return 0x73746E65746E6F63;
}

uint64_t sub_10018CAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_10018CA10(a1, a2);
  *a3 = result != 0;
  return result;
}

void sub_10018CB24(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10018CB30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D1D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10018CB58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10018D1D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10018CB80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_1000055B0(&qword_1002B4748);
  sub_1001018E4();
  __chkstk_darwin(v3);
  sub_1000EFFE8();
  v4 = sub_10018D1D4();
  sub_10003B088((uint64_t)&unk_10028F7B8, v5, v4);
  v10 = sub_10018D210(a2);
  sub_1000055B0(&qword_1002B4758);
  v6 = sub_10018D3F0(&qword_1002B4760, (void (*)(void))sub_10018D3B4, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  sub_10018DEEC((uint64_t)&v10, v7, v8, v9, v6);
  swift_release();
  sub_1000876BC();
  sub_1000C260C();
}

void sub_10018CC68(uint64_t a1)
{
  uint64_t *v1;

  sub_10018CB80(a1, *v1);
}

_QWORD *sub_10018CC80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v3 = sub_1000055B0(&qword_1002B4778);
  __chkstk_darwin(v3);
  sub_10000E478();
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_10000DBE4(a1, v4);
  v7 = sub_10018D1D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_10028F7B8, &unk_10028F7B8, v7, v4, v5);
  if (!v1)
  {
    v8 = sub_1000055B0(&qword_1002B4758);
    sub_10018D3F0(&qword_1002B4780, (void (*)(void))sub_10018D464, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    sub_10018DF68(v8, v9, v3, v8);
    sub_10018AEE0(v12);
    v6 = v11;
    swift_bridgeObjectRelease();
    sub_10000E4B4();
  }
  sub_10003B008();
  return v6;
}

_QWORD *sub_10018CDC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10018CC80(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10018CE24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_key);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_key + 8));
  return v1;
}

id sub_10018CE7C()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_image);
}

double sub_10018CEAC()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_frame);
}

id sub_10018CEC4(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  char *v8;
  double *v9;
  objc_super v11;

  v8 = &v7[OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_key];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_image] = a3;
  v9 = (double *)&v7[OBJC_IVAR____TtC13EnsembleAgent21CoreDragItemComponent_frame];
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for CoreDragItemComponent();
  return objc_msgSendSuper2(&v11, "init");
}

void sub_10018CFA0()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.CoreDragItemComponent", 35, "init()", 6, 0);
  __break(1u);
}

id sub_10018CFD8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreDragItemComponent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CoreDragItemComponent()
{
  return objc_opt_self(_TtC13EnsembleAgent21CoreDragItemComponent);
}

void type metadata accessor for DragPreview()
{
  sub_10003B1DC();
}

uint64_t sub_10018D070(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10018D078(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_10018D0AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v3 = a2[4];
  v4 = a1[4];
  a1[4] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10018D104(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10018D13C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10018D17C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DragItem()
{
  sub_10003B1DC();
}

unint64_t sub_10018D1D4()
{
  unint64_t result;

  result = qword_1002B4750;
  if (!qword_1002B4750)
  {
    result = swift_getWitnessTable(&unk_10022A084, &unk_10028F7B8);
    atomic_store(result, (unint64_t *)&qword_1002B4750);
  }
  return result;
}

_QWORD *sub_10018D210(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  sub_1000055B0(&qword_1002B4770);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v3 = result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = (char *)(result + 8);
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = v17;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    result = v17;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_10018D3B4()
{
  unint64_t result;

  result = qword_1002B4768;
  if (!qword_1002B4768)
  {
    result = swift_getWitnessTable(&unk_100229C94, &type metadata for EncodableImage);
    atomic_store(result, (unint64_t *)&qword_1002B4768);
  }
  return result;
}

uint64_t sub_10018D3F0(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000DCA0(&qword_1002B4758);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10018D464()
{
  unint64_t result;

  result = qword_1002B4788;
  if (!qword_1002B4788)
  {
    result = swift_getWitnessTable(&unk_100229C6C, &type metadata for EncodableImage);
    atomic_store(result, (unint64_t *)&qword_1002B4788);
  }
  return result;
}

unint64_t sub_10018D4A0()
{
  unint64_t result;

  result = qword_1002B4798;
  if (!qword_1002B4798)
  {
    result = swift_getWitnessTable(&unk_10022A034, &type metadata for DragItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4798);
  }
  return result;
}

unint64_t sub_10018D4DC()
{
  unint64_t result;

  result = qword_1002B47B8;
  if (!qword_1002B47B8)
  {
    result = swift_getWitnessTable(&unk_10022A00C, &unk_10028F8B0);
    atomic_store(result, (unint64_t *)&qword_1002B47B8);
  }
  return result;
}

unint64_t sub_10018D518()
{
  unint64_t result;

  result = qword_1002B47D8;
  if (!qword_1002B47D8)
  {
    result = swift_getWitnessTable(&unk_100229FE4, &unk_10028F8B0);
    atomic_store(result, (unint64_t *)&qword_1002B47D8);
  }
  return result;
}

unint64_t sub_10018D554()
{
  unint64_t result;

  result = qword_1002B47E8;
  if (!qword_1002B47E8)
  {
    result = swift_getWitnessTable(&unk_100229F94, &unk_10028F698);
    atomic_store(result, (unint64_t *)&qword_1002B47E8);
  }
  return result;
}

unint64_t sub_10018D590()
{
  unint64_t result;

  result = qword_1002B4800;
  if (!qword_1002B4800)
  {
    result = swift_getWitnessTable(&unk_100229BF4, &unk_10028F5F8);
    atomic_store(result, (unint64_t *)&qword_1002B4800);
  }
  return result;
}

unint64_t sub_10018D5CC()
{
  unint64_t result;

  result = qword_1002B4818;
  if (!qword_1002B4818)
  {
    result = swift_getWitnessTable(&unk_100229BCC, &unk_10028F5F8);
    atomic_store(result, (unint64_t *)&qword_1002B4818);
  }
  return result;
}

void type metadata accessor for DragSession.CodingKeys()
{
  sub_10003B1DC();
}

ValueMetadata *type metadata accessor for DragItem.CodingKeys()
{
  return &type metadata for DragItem.CodingKeys;
}

uint64_t sub_10018D628(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10018D668 + 4 * byte_100229B50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10018D688 + 4 * byte_100229B55[v4]))();
}

_BYTE *sub_10018D668(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10018D688(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10018D690(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10018D698(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10018D6A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10018D6A8(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for DragPreview.CodingKeys()
{
  sub_10003B1DC();
}

void **initializeBufferWithCopyOfBuffer for EncodableImage(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for EncodableImage(id *a1)
{

}

void **assignWithCopy for EncodableImage(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for EncodableImage(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for EncodableImage(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EncodableImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodableImage()
{
  return &type metadata for EncodableImage;
}

void sub_10018D80C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

uint64_t sub_10018D834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  v6 = v5;
  return a1;
}

_QWORD *sub_10018D874(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = (void *)a1[6];
  v7 = (void *)a2[6];
  a1[6] = v7;
  v8 = v7;

  return a1;
}

uint64_t sub_10018D8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

uint64_t sub_10018D940(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10018D980(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DragComponent()
{
  sub_10003B1DC();
}

unint64_t sub_10018D9DC()
{
  unint64_t result;

  result = qword_1002B4820;
  if (!qword_1002B4820)
  {
    result = swift_getWitnessTable(&unk_100229DFC, &unk_10028F7B8);
    atomic_store(result, (unint64_t *)&qword_1002B4820);
  }
  return result;
}

unint64_t sub_10018DA1C()
{
  unint64_t result;

  result = qword_1002B4828;
  if (!qword_1002B4828)
  {
    result = swift_getWitnessTable(&unk_100229EB4, &type metadata for DragItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4828);
  }
  return result;
}

unint64_t sub_10018DA5C()
{
  unint64_t result;

  result = qword_1002B4830;
  if (!qword_1002B4830)
  {
    result = swift_getWitnessTable(&unk_100229F6C, &unk_10028F698);
    atomic_store(result, (unint64_t *)&qword_1002B4830);
  }
  return result;
}

unint64_t sub_10018DA9C()
{
  unint64_t result;

  result = qword_1002B4838;
  if (!qword_1002B4838)
  {
    result = swift_getWitnessTable(&unk_100229EDC, &unk_10028F698);
    atomic_store(result, (unint64_t *)&qword_1002B4838);
  }
  return result;
}

unint64_t sub_10018DADC()
{
  unint64_t result;

  result = qword_1002B4840;
  if (!qword_1002B4840)
  {
    result = swift_getWitnessTable(&unk_100229F04, &unk_10028F698);
    atomic_store(result, (unint64_t *)&qword_1002B4840);
  }
  return result;
}

unint64_t sub_10018DB1C()
{
  unint64_t result;

  result = qword_1002B4848;
  if (!qword_1002B4848)
  {
    result = swift_getWitnessTable(&unk_100229E24, &type metadata for DragItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4848);
  }
  return result;
}

unint64_t sub_10018DB5C()
{
  unint64_t result;

  result = qword_1002B4850;
  if (!qword_1002B4850)
  {
    result = swift_getWitnessTable(&unk_100229E4C, &type metadata for DragItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4850);
  }
  return result;
}

unint64_t sub_10018DB9C()
{
  unint64_t result;

  result = qword_1002B4858;
  if (!qword_1002B4858)
  {
    result = swift_getWitnessTable(&unk_100229D6C, &unk_10028F7B8);
    atomic_store(result, (unint64_t *)&qword_1002B4858);
  }
  return result;
}

unint64_t sub_10018DBDC()
{
  unint64_t result;

  result = qword_1002B4860;
  if (!qword_1002B4860)
  {
    result = swift_getWitnessTable(&unk_100229D94, &unk_10028F7B8);
    atomic_store(result, (unint64_t *)&qword_1002B4860);
  }
  return result;
}

unint64_t sub_10018DC18()
{
  unint64_t result;

  result = qword_1002B4870;
  if (!qword_1002B4870)
  {
    result = swift_getWitnessTable(&unk_10022A18C, &type metadata for DragComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4870);
  }
  return result;
}

unint64_t sub_10018DC54()
{
  unint64_t result;

  result = qword_1002B4880;
  if (!qword_1002B4880)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Path, &type metadata for Path);
    atomic_store(result, (unint64_t *)&qword_1002B4880);
  }
  return result;
}

uint64_t sub_10018DC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B4898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10018DCD8()
{
  unint64_t result;

  result = qword_1002B48A0;
  if (!qword_1002B48A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Path, &type metadata for Path);
    atomic_store(result, (unint64_t *)&qword_1002B48A0);
  }
  return result;
}

uint64_t _s13EnsembleAgent8DragItemV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10018DD60 + 4 * byte_100229B5F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10018DD94 + 4 * byte_100229B5A[v4]))();
}

uint64_t sub_10018DD94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018DD9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018DDA4);
  return result;
}

uint64_t sub_10018DDB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018DDB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10018DDBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018DDC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragComponent.CodingKeys()
{
  return &type metadata for DragComponent.CodingKeys;
}

unint64_t sub_10018DDE4()
{
  unint64_t result;

  result = qword_1002B48A8;
  if (!qword_1002B48A8)
  {
    result = swift_getWitnessTable(&unk_10022A164, &type metadata for DragComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B48A8);
  }
  return result;
}

unint64_t sub_10018DE24()
{
  unint64_t result;

  result = qword_1002B48B0;
  if (!qword_1002B48B0)
  {
    result = swift_getWitnessTable(&unk_10022A0D4, &type metadata for DragComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B48B0);
  }
  return result;
}

unint64_t sub_10018DE64()
{
  unint64_t result;

  result = qword_1002B48B8;
  if (!qword_1002B48B8)
  {
    result = swift_getWitnessTable(&unk_10022A0FC, &type metadata for DragComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B48B8);
  }
  return result;
}

uint64_t sub_10018DEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10018DEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, v6, a5);
}

uint64_t sub_10018DF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 65, v1, v0);
}

uint64_t sub_10018DF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_10018DF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10018DF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10018DF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

_QWORD *sub_10018DFA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  int64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  _BYTE v48[16];
  _QWORD v49[9];

  v29 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v34 = v5 & *(_QWORD *)(a1 + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v6 = a2 + 56;
  swift_bridgeObjectRetain();
  v33 = 0;
  v31 = _swiftEmptyArrayStorage;
LABEL_5:
  while (v34)
  {
    v7 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    v8 = v7 | (v33 << 6);
LABEL_22:
    v13 = (char *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v47 = *v13;
    v46 = v13[1];
    v45 = v13[2];
    v44 = v13[3];
    v43 = v13[4];
    v42 = v13[5];
    v41 = v13[6];
    v40 = v13[7];
    v39 = v13[8];
    v38 = v13[9];
    v37 = v13[10];
    v36 = v13[11];
    v35 = v13[12];
    v14 = v13[13];
    v15 = v13[14];
    v16 = v13[15];
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_29;
    Hasher.init(_seed:)(v49, *(_QWORD *)(a2 + 40));
    v48[0] = v47;
    v48[1] = v46;
    v48[2] = v45;
    v48[3] = v44;
    v48[4] = v43;
    v48[5] = v42;
    v48[6] = v41;
    v48[7] = v40;
    v48[8] = v39;
    v48[9] = v38;
    v48[10] = v37;
    v48[11] = v36;
    v48[12] = v35;
    v48[13] = v14;
    v48[14] = v15;
    v48[15] = v16;
    Hasher.combine(bytes:)(v48, v49);
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(a2 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v6 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_29;
    if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v19), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v19 + 8)))
    {
      v20 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v20;
        if (((*(_QWORD *)(v6 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v19), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v19 + 8)))goto LABEL_5;
      }
LABEL_29:
      v21 = (uint64_t)v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      {
        sub_100077AE8(0, v31[2] + 1, 1, (uint64_t)v31);
        v21 = v25;
      }
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_100077AE8(v22 > 1, v23 + 1, 1, v21);
        v21 = v26;
      }
      *(_QWORD *)(v21 + 16) = v23 + 1;
      v31 = (_QWORD *)v21;
      v24 = (_BYTE *)(v21 + 17 * v23);
      v24[32] = v47;
      v24[33] = v46;
      v24[34] = v45;
      v24[35] = v44;
      v24[36] = v43;
      v24[37] = v42;
      v24[38] = v41;
      v24[39] = v40;
      v24[40] = v39;
      v24[41] = v38;
      v24[42] = v37;
      v24[43] = v36;
      v24[44] = v35;
      v24[45] = v14;
      v24[46] = v15;
      v24[47] = v16;
      v24[48] = a3;
    }
  }
  v9 = v33 + 1;
  if (__OFADD__(v33, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v9 >= v30)
    goto LABEL_34;
  v10 = *(_QWORD *)(v29 + 8 * v9);
  v11 = v33 + 1;
  if (v10)
    goto LABEL_21;
  v11 = v33 + 2;
  if (v33 + 2 >= v30)
    goto LABEL_34;
  v10 = *(_QWORD *)(v29 + 8 * v11);
  if (v10)
    goto LABEL_21;
  v11 = v33 + 3;
  if (v33 + 3 >= v30)
    goto LABEL_34;
  v10 = *(_QWORD *)(v29 + 8 * v11);
  if (v10)
    goto LABEL_21;
  v11 = v33 + 4;
  if (v33 + 4 >= v30)
    goto LABEL_34;
  v10 = *(_QWORD *)(v29 + 8 * v11);
  if (v10)
  {
LABEL_21:
    v33 = v11;
    v34 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    goto LABEL_22;
  }
  v12 = v33 + 5;
  if (v33 + 5 < v30)
  {
    v10 = *(_QWORD *)(v29 + 8 * v12);
    v11 = v33 + 5;
    if (!v10)
    {
      while (1)
      {
        v11 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v11 >= v30)
          goto LABEL_34;
        v10 = *(_QWORD *)(v29 + 8 * v11);
        ++v12;
        if (v10)
          goto LABEL_21;
      }
LABEL_36:
      __break(1u);
    }
    goto LABEL_21;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  swift_release();
  return v31;
}

_QWORD *sub_10018E490(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v25;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  _BYTE v42[16];
  _QWORD v43[9];

  v7 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v9 = a3;
    v41 = a5 + 56;
    swift_unknownObjectRetain(a1);
    v8 = _swiftEmptyArrayStorage;
    v25 = v7;
    while (1)
    {
      if (v9 >= v7)
        __break(1u);
      v10 = (char *)(a2 + 16 * v9);
      v40 = *v10;
      v39 = v10[1];
      v38 = v10[2];
      v37 = v10[3];
      v36 = v10[4];
      v35 = v10[5];
      v34 = v10[6];
      v33 = v10[7];
      v32 = v10[8];
      v31 = v10[9];
      v30 = v10[10];
      v29 = v10[11];
      v28 = v10[12];
      v27 = v10[13];
      v11 = v10[14];
      v12 = v10[15];
      if (!*(_QWORD *)(a5 + 16))
        goto LABEL_12;
      Hasher.init(_seed:)(v43, *(_QWORD *)(a5 + 40));
      v42[0] = v40;
      v42[1] = v39;
      v42[2] = v38;
      v42[3] = v37;
      v42[4] = v36;
      v42[5] = v35;
      v42[6] = v34;
      v42[7] = v33;
      v42[8] = v32;
      v42[9] = v31;
      v42[10] = v30;
      v42[11] = v29;
      v42[12] = v28;
      v42[13] = v27;
      v42[14] = v11;
      v42[15] = v12;
      Hasher.combine(bytes:)(v42, v43);
      v13 = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(a5 + 32);
      v15 = v13 & ~v14;
      if (((*(_QWORD *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_12;
      if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * v15), *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * v15 + 8)))
      {
        break;
      }
LABEL_11:
      v7 = v25;
LABEL_17:
      if (++v9 == v7)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease(a1);
        return v8;
      }
    }
    v16 = ~v14;
    while (1)
    {
      v15 = (v15 + 1) & v16;
      if (((*(_QWORD *)(v41 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        break;
      if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * v15), *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * v15 + 8)))goto LABEL_11;
    }
LABEL_12:
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    {
      sub_100077AE8(0, v8[2] + 1, 1, (uint64_t)v8);
      v8 = v20;
    }
    v18 = v8[2];
    v17 = v8[3];
    v7 = v25;
    if (v18 >= v17 >> 1)
    {
      sub_100077AE8(v17 > 1, v18 + 1, 1, (uint64_t)v8);
      v8 = v21;
    }
    v8[2] = v18 + 1;
    v19 = (char *)v8 + 17 * v18;
    v19[32] = v40;
    v19[33] = v39;
    v19[34] = v38;
    v19[35] = v37;
    v19[36] = v36;
    v19[37] = v35;
    v19[38] = v34;
    v19[39] = v33;
    v19[40] = v32;
    v19[41] = v31;
    v19[42] = v30;
    v19[43] = v29;
    v19[44] = v28;
    v19[45] = v27;
    v19[46] = v11;
    v19[47] = v12;
    v19[48] = a6;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10018E88C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  _BYTE v40[16];
  _QWORD v41[9];

  v23 = *(_QWORD *)(a1 + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  v22 = a1 + 32;
  v39 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  do
  {
    v6 = (char *)(v22 + 16 * v4);
    v38 = *v6;
    v37 = v6[1];
    v36 = v6[2];
    v35 = v6[3];
    v34 = v6[4];
    v33 = v6[5];
    v32 = v6[6];
    v31 = v6[7];
    v30 = v6[8];
    v29 = v6[9];
    v28 = v6[10];
    v27 = v6[11];
    v26 = v6[12];
    v25 = v6[13];
    v24 = v6[14];
    v7 = v6[15];
    if (*(_QWORD *)(a2 + 16))
    {
      Hasher.init(_seed:)(v41, *(_QWORD *)(a2 + 40));
      v40[0] = v38;
      v40[1] = v37;
      v40[2] = v36;
      v40[3] = v35;
      v40[4] = v34;
      v40[5] = v33;
      v40[6] = v32;
      v40[7] = v31;
      v40[8] = v30;
      v40[9] = v29;
      v40[10] = v28;
      v40[11] = v27;
      v40[12] = v26;
      v40[13] = v25;
      v40[14] = v24;
      v40[15] = v7;
      Hasher.combine(bytes:)(v40, v41);
      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(a2 + 32);
      v10 = v8 & ~v9;
      if (((*(_QWORD *)(v39 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v10), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v10 + 8)))goto LABEL_15;
        v11 = ~v9;
        for (i = v10 + 1; ; i = v13 + 1)
        {
          v13 = i & v11;
          if (((*(_QWORD *)(v39 + (((i & v11) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v11)) & 1) == 0)
            break;
          if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v13), *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v13 + 8)))goto LABEL_15;
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    {
      sub_100077AE8(0, v5[2] + 1, 1, (uint64_t)v5);
      v5 = v17;
    }
    v15 = v5[2];
    v14 = v5[3];
    if (v15 >= v14 >> 1)
    {
      sub_100077AE8(v14 > 1, v15 + 1, 1, (uint64_t)v5);
      v5 = v18;
    }
    v5[2] = v15 + 1;
    v16 = (char *)v5 + 17 * v15;
    v16[32] = v38;
    v16[33] = v37;
    v16[34] = v36;
    v16[35] = v35;
    v16[36] = v34;
    v16[37] = v33;
    v16[38] = v32;
    v16[39] = v31;
    v16[40] = v30;
    v16[41] = v29;
    v16[42] = v28;
    v16[43] = v27;
    v16[44] = v26;
    v16[45] = v25;
    v16[46] = v24;
    v16[47] = v7;
    v16[48] = a3;
LABEL_15:
    ++v4;
  }
  while (v4 != v23);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return v5;
}

void sub_10018EC90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v7 << 6);
LABEL_22:
    v14 = sub_100195954(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10 + 8));
    if (v15)
    {
      v16 = v14;
      v17 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_1000776AC();
        v8 = v23;
      }
      v18 = v8;
      v19 = v8[2];
      v20 = v18;
      v21 = v19 + 1;
      if (v19 >= v18[3] >> 1)
      {
        sub_1000776AC();
        v21 = v19 + 1;
        v20 = v24;
      }
      v20[2] = v21;
      v22 = &v20[2 * v19];
      v8 = v20;
      v22[4] = v16;
      v22[5] = v17;
    }
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v11 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v7;
  if (v12)
    goto LABEL_21;
  v7 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v7);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_28:
    swift_release();
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_28;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
}

void sub_10018EE90(void (*a1)(__int128 *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(__int128 *__return_ptr, __int128 *);
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  char v21;
  unint64_t v22;
  char *v23;
  void (*v24)(__int128 *__return_ptr, __int128 *);
  unint64_t v25;
  unint64_t i;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v38;
  int64_t v39;
  __int128 v40;
  char v41;
  __int128 v42;
  char v43;
  _QWORD *v44;

  v5 = *(_QWORD *)(a3 + 16);
  v44 = _swiftEmptyArrayStorage;
  sub_100058704();
  v6 = _swiftEmptyArrayStorage;
  v38 = a3 + 56;
  v7 = -1;
  v8 = -1 << *(_BYTE *)(a3 + 32);
  if (-v8 < 64)
    v7 = ~(-1 << -(char)v8);
  v9 = v7 & *(_QWORD *)(a3 + 56);
  v39 = (unint64_t)(63 - v8) >> 6;
  if (!v5)
  {
    swift_bridgeObjectRetain(a3);
    v11 = 0;
LABEL_31:
    v24 = a1;
    if (!v9)
      goto LABEL_33;
LABEL_32:
    v25 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v25 | (v11 << 6); ; i = __clz(__rbit64(v27)) + (v11 << 6))
    {
      v29 = *(_QWORD *)(a3 + 48) + 17 * i;
      v30 = *(_BYTE *)(v29 + 16);
      v42 = *(_OWORD *)v29;
      v43 = v30;
      v24(&v40, &v42);
      if (v3)
        break;
      v31 = v40;
      v32 = v41;
      v44 = v6;
      v33 = v6[2];
      if (v33 >= v6[3] >> 1)
      {
        v36 = v40;
        sub_100058704();
        v31 = v36;
        v24 = a1;
        v6 = v44;
      }
      v6[2] = v33 + 1;
      v34 = (char *)v6 + 17 * v33;
      *((_OWORD *)v34 + 2) = v31;
      v34[48] = v32;
      if (v9)
        goto LABEL_32;
LABEL_33:
      v15 = __OFADD__(v11++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_58;
      }
      if (v11 >= v39)
        goto LABEL_56;
      v27 = *(_QWORD *)(v38 + 8 * v11);
      if (!v27)
      {
        v28 = v11 + 1;
        if (v11 + 1 >= v39)
          goto LABEL_56;
        v27 = *(_QWORD *)(v38 + 8 * v28);
        if (!v27)
        {
          v28 = v11 + 2;
          if (v11 + 2 >= v39)
            goto LABEL_56;
          v27 = *(_QWORD *)(v38 + 8 * v28);
          if (!v27)
          {
            v28 = v11 + 3;
            if (v11 + 3 >= v39)
              goto LABEL_56;
            v27 = *(_QWORD *)(v38 + 8 * v28);
            if (!v27)
            {
              v28 = v11 + 4;
              if (v11 + 4 >= v39)
              {
LABEL_56:
                swift_release();
                return;
              }
              v27 = *(_QWORD *)(v38 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v11 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_60;
                  if (v11 >= v39)
                    goto LABEL_56;
                  v27 = *(_QWORD *)(v38 + 8 * v11);
                  ++v28;
                  if (v27)
                    goto LABEL_45;
                }
              }
            }
          }
        }
        v11 = v28;
      }
LABEL_45:
      v9 = (v27 - 1) & v27;
    }
LABEL_55:
    swift_release();
    swift_release();
    return;
  }
  swift_bridgeObjectRetain(a3);
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      v14 = a1;
      goto LABEL_20;
    }
    v15 = __OFADD__(v11++, 1);
    v14 = a1;
    if (v15)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    if (v11 >= v39)
      goto LABEL_61;
    v16 = *(_QWORD *)(v38 + 8 * v11);
    if (!v16)
      break;
LABEL_19:
    v9 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_20:
    v18 = *(_QWORD *)(a3 + 48) + 17 * v13;
    v19 = *(unsigned __int8 *)(v18 + 16);
    v40 = *(_OWORD *)v18;
    v41 = v19;
    if (v19 == 6)
      goto LABEL_61;
    v14(&v42, &v40);
    if (v3)
      goto LABEL_55;
    v20 = v42;
    v21 = v43;
    v44 = v6;
    v22 = v6[2];
    if (v22 >= v6[3] >> 1)
    {
      v35 = v42;
      sub_100058704();
      v20 = v35;
      v6 = v44;
    }
    ++v10;
    v6[2] = v22 + 1;
    v23 = (char *)v6 + 17 * v22;
    *((_OWORD *)v23 + 2) = v20;
    v23[48] = v21;
    if (v10 == v5)
      goto LABEL_31;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v39)
    goto LABEL_61;
  v16 = *(_QWORD *)(v38 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 2;
  if (v11 + 2 >= v39)
    goto LABEL_61;
  v16 = *(_QWORD *)(v38 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 3;
  if (v11 + 3 >= v39)
    goto LABEL_61;
  v16 = *(_QWORD *)(v38 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v11 + 4;
  if (v11 + 4 >= v39)
    goto LABEL_61;
  v16 = *(_QWORD *)(v38 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v11 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v39)
      goto LABEL_61;
    v16 = *(_QWORD *)(v38 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

void sub_10018F2D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  sub_10000E440();
  sub_10019E170();
  v18 = v6;
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10000E478();
  if (v3[2])
  {
    v8 = v3[5];
    sub_100021264(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable._rawHashValue(seed:)(v8, v0, v9);
    sub_10019DF04();
    v12 = v11 & ~v10;
    if (((*(_QWORD *)((char *)v3 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v12) & 1) != 0)
    {
      v13 = ~v10;
      v14 = *(_QWORD *)(v18 + 72);
      v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
      do
      {
        v15(v1, v3[6] + v14 * v12, v0);
        sub_100021264((unint64_t *)&qword_1002A9370, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v17 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v5, v0, v16);
        sub_10019DD08(v18);
        if ((v17 & 1) != 0)
          break;
        v12 = (v12 + 1) & v13;
      }
      while (((*(_QWORD *)((char *)v3 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v12) & 1) != 0);
    }
  }
  sub_10000E4E0();
}

void sub_10018F420(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  Swift::Int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[16];
  _QWORD v29[9];

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = a2;
    v5 = a1;
    v26 = HIWORD(a2);
    v27 = HIBYTE(a2);
    v24 = HIDWORD(a2);
    v25 = a2 >> 40;
    v22 = a2 >> 16;
    v23 = a2 >> 24;
    v21 = a2 >> 8;
    v6 = HIBYTE(a1);
    v7 = HIWORD(a1);
    v8 = a1 >> 40;
    v9 = HIDWORD(a1);
    v10 = a1 >> 24;
    v11 = a1 >> 16;
    v12 = a1 >> 8;
    Hasher.init(_seed:)(v29, *(_QWORD *)(a3 + 40));
    v28[0] = v5;
    v28[1] = v12;
    v28[2] = v11;
    v28[3] = v10;
    v28[4] = v9;
    v28[5] = v8;
    v28[6] = v7;
    v28[7] = v6;
    v28[8] = v4;
    v28[9] = v21;
    v28[10] = v22;
    v28[11] = v23;
    v28[12] = v24;
    v28[13] = v25;
    v28[14] = v26;
    v28[15] = v27;
    Hasher.combine(bytes:)(v28, v29);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(a3 + 32);
    v15 = v13 & ~v14;
    sub_100123E38();
    if ((v16 & 1) != 0)
    {
      if (sub_10019DDCC())
      {
        v17 = ~v14;
        v18 = (v15 + 1) & v17;
        sub_100123E38();
        if ((v19 & 1) != 0)
        {
          do
          {
            if (!sub_10019DDCC())
              break;
            v18 = (v18 + 1) & v17;
            sub_100123E38();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

void sub_10018F5D8(char a1)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = a1;
  sub_100193134(v2);
}

uint64_t sub_10018F5E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  sub_100193450(v2);
  return sub_10019DC50(v2);
}

uint64_t sub_10018F610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  sub_10019385C(v2);
  return sub_10019DC50(v2);
}

void sub_10018F638(double a1, double a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inited;
  char v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  char v83;
  _BYTE *v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  char v109;
  char v110;
  char v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  char v126[8];
  char v127[8];

  v9 = v4;
  v123 = a4;
  v12 = sub_100026B20();
  v117 = *(_QWORD *)(v12 - 8);
  sub_1000262EC();
  __chkstk_darwin(v13);
  sub_10000E5DC();
  v116 = v14;
  sub_1000055B0(&qword_1002B1CD0);
  sub_1000262EC();
  __chkstk_darwin(v15);
  v17 = sub_10019DDF4(v16, v88);
  type metadata accessor for OSSignposter(v17);
  sub_10019E170();
  v124 = v18;
  sub_1000262EC();
  __chkstk_darwin(v19);
  v21 = sub_10019DD44(v20, v88);
  v119 = type metadata accessor for SignpostInterval(v21);
  v121 = *(_QWORD *)(v119 - 8);
  v22 = *(_QWORD *)(v121 + 64);
  __chkstk_darwin(v119);
  v122 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v88 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v88 - v27;
  type metadata accessor for UniversalControlLink(0);
  sub_10019E190();
  __chkstk_darwin(v29);
  sub_100026500();
  Strong = swift_unknownObjectWeakLoadStrong(v9 + 72);
  if (Strong)
  {
    v106 = v12;
    v118 = v8;
    v107 = v28;
    v31 = Strong;
    sub_10000B2F8(*(_QWORD *)(Strong + 120) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v127, 0);
    sub_10016A480();
    sub_10019DF24();
    v32 = sub_1000088D0();
    v33 = dispatch thunk of UniversalControlDevice.id.getter(v32);
    v125 = v9;
    v35 = v34;
    sub_10000B348();
    v36 = v35;
    v37 = v125;
    v38 = UniversalControlLink.normalized(for:)(v33, v36);
    v39 = UniversalControlLink.display2.getter(v38);
    v41 = v40;
    sub_1001942C8(v39, v40);
    if (v42)
    {
      v99 = v22;
      v100 = v25;
      v101 = v5;
      v102 = v42;
      v103 = v31;
      v104 = v7;
      v105 = v6;
      v114 = HIBYTE(v41);
      v113 = HIWORD(v41);
      sub_10016AE84(v41 >> 40);
      sub_100141348(HIDWORD(v41));
      sub_10016AC24(v41 >> 24);
      sub_10016AE78(v41 >> 16);
      v108 = v41;
      v89 = *(_QWORD *)(v37 + 48);
      v43 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
      inited = swift_initStackObject(v43, v126);
      *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
      v92 = v39;
      *(_BYTE *)(inited + 32) = v39;
      v90 = v39 >> 8;
      *(_BYTE *)(inited + 33) = BYTE1(v39);
      v91 = v39 >> 16;
      *(_BYTE *)(inited + 34) = BYTE2(v39);
      v93 = v39 >> 24;
      *(_BYTE *)(inited + 35) = BYTE3(v39);
      v94 = HIDWORD(v39);
      *(_BYTE *)(inited + 36) = BYTE4(v39);
      v95 = v39 >> 40;
      *(_BYTE *)(inited + 37) = BYTE5(v39);
      v45 = v108;
      v96 = HIWORD(v39);
      *(_BYTE *)(inited + 38) = BYTE6(v39);
      v97 = HIBYTE(v39);
      *(_BYTE *)(inited + 39) = HIBYTE(v39);
      *(_BYTE *)(inited + 40) = v45;
      v98 = v41 >> 8;
      *(_BYTE *)(inited + 41) = BYTE1(v41);
      *(_BYTE *)(inited + 42) = v109;
      sub_10019E014();
      v46[43] = v47;
      v46[44] = v111;
      v46[45] = v112;
      v46[46] = v113;
      v46[47] = v114;
      v48 = v89;
      sub_1000103C0();
      sub_100191390(inited, 4, v48, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D3F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018E88C);
      v50 = v49;
      swift_setDeallocating(inited);
      sub_10000E410();
      sub_100194504(v50, 0x20676E69646E6553, 0xEC00000065756C67, v51, v52, v53, v54, v55, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98,
        v99);
      sub_1000267C4();
      if (qword_1002A98A0 != -1)
        swift_once(&qword_1002A98A0, sub_1000C3010);
      v56 = v101;
      v57 = sub_100006FB4(v101, (uint64_t)qword_1002B6F70);
      v58 = v124;
      v59 = (uint64_t)v100;
      sub_1000C2764((uint64_t)v100, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 16));
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v59, 0, 1, v56);
      v60 = v119;
      v61 = v120;
      v62 = v59 + *(int *)(v119 + 20);
      *(_QWORD *)v62 = 0;
      *(_QWORD *)(v62 + 8) = 0;
      *(_WORD *)(v62 + 16) = 256;
      v63 = *(int *)(v60 + 24);
      *(_QWORD *)(v59 + v63) = 0;
      sub_1000259FC(v59, v61, &qword_1002B1CD0);
      v64 = sub_10019DFA8(v61);
      v65 = v99;
      if (v64 == 1)
      {
        sub_100184688(v61, &qword_1002B1CD0);
        v66 = v104;
        v67 = v92;
        v68 = v108;
      }
      else
      {
        v69 = sub_1000C2764(v115, v61, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32));
        *(_QWORD *)v62 = "connect_link";
        *(_QWORD *)(v62 + 8) = 12;
        *(_WORD *)(v62 + 16) = 2;
        v70 = OSSignposter.logHandle.getter(v69);
        v71 = v116;
        OSSignpostID.init(log:)(v70);
        sub_10019E104();
        v67 = v92;
        v68 = v108;
        sub_100197F98();
        v73 = v72;
        sub_1000EFF78(v71, *(uint64_t (**)(uint64_t, _QWORD))(v117 + 8));
        sub_10019DD08(v124);
        swift_release();
        *(_QWORD *)(v59 + v63) = v73;
        v66 = v104;
      }
      v74 = (uint64_t)v107;
      sub_10019DED0(v59, (uint64_t)v107);
      v75 = (uint64_t)v122;
      sub_10019DF50(v74);
      v76 = *(unsigned __int8 *)(v121 + 80);
      v77 = (v76 + 16) & ~v76;
      v78 = v77 + v65;
      v79 = (v77 + v65 + 23) & 0xFFFFFFFFFFFFFFF8;
      v80 = swift_allocObject(&unk_10028FB20, v79 + 8, v76 | 7);
      sub_10019DED0(v75, v80 + v77);
      v81 = (_BYTE *)(v80 + v78);
      *v81 = v67;
      v81[1] = v90;
      v81[2] = v91;
      v81[3] = v93;
      v81[4] = v94;
      v81[5] = v95;
      v81[6] = v96;
      v81[7] = v97;
      v81[8] = v68;
      v81[9] = v98;
      v81[10] = v109;
      v81[11] = v110;
      sub_10019E0E4();
      *(_BYTE *)(v82 + 12) = v83;
      sub_10019DEE8();
      v84[13] = v85;
      v84[14] = v113;
      v84[15] = v114;
      *(_QWORD *)(v80 + v79) = v125;
      v86 = type metadata accessor for Completion();
      sub_1000088D8(v86, 48);
      sub_10002679C();
      v87 = Completion.init(file:line:body:)(0xD000000000000063, 0x80000001002598D0, 159, (uint64_t)sub_10019D670, v80);
      sub_1000B7108(a1, a2, v66, v123, (uint64_t)v87);
      swift_unknownObjectRelease(v103);
      sub_10000B348();
      sub_10002645C();
      sub_100184294(v74, type metadata accessor for SignpostInterval);
      sub_1000EFF78(v66, *(uint64_t (**)(uint64_t, _QWORD))(v118 + 8));
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v7, v6);
      swift_unknownObjectRelease(v31);
    }
  }
  sub_10009543C();
}

void sub_10018FD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10002626C();
  v3 = type metadata accessor for UniversalControlLink(0);
  sub_10003B160();
  __chkstk_darwin(v4);
  sub_10000E478();
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 72);
  if (Strong)
  {
    v6 = Strong;
    sub_10000B2F8(*(_QWORD *)(Strong + 120) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v12, 0);
    sub_10016A480();
    sub_10019DF24();
    v7 = sub_1000088D0();
    v8 = dispatch thunk of UniversalControlDevice.id.getter(v7);
    v10 = v9;
    sub_10000B348();
    v11 = UniversalControlLink.normalized(for:)(v8, v10);
    UniversalControlLink.display2.getter(v11);
    sub_100192DF4();
    swift_unknownObjectRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  }
  sub_10000E4E0();
}

void sub_10018FE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  os_log_t v69;
  id v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  sub_10002626C();
  v4 = v0;
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for UniveralControlErrorCode(0);
  sub_10003B160();
  __chkstk_darwin(v10);
  v12 = &v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000E440();
  sub_1000F0150();
  __chkstk_darwin(v14);
  sub_100065E48();
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 72);
  if (!Strong)
    goto LABEL_14;
  v16 = Strong;
  v87 = v3;
  v88 = v9;
  v84 = v2;
  v85 = v1;
  v86 = v13;
  v89 = v12;
  v17 = sub_100194F60();
  v18 = sub_100193A7C();
  v19 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  v20 = sub_10019DEC8(v19);
  *(_OWORD *)(v20 + 16) = xmmword_10021BBA0;
  sub_10000B2F8(*(_QWORD *)(v16 + 120) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v92, 0);
  sub_10016A480();
  type metadata accessor for SyncViewLocalData(0);
  v21 = sub_1000088D0();
  v22 = dispatch thunk of UniversalControlDevice.id.getter(v21);
  v24 = v23;
  sub_10000B348();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  v25 = sub_1001958D0(v18, v20);
  swift_setDeallocating(v20);
  sub_1000267C4();
  v26 = v17[2];
  v27 = *(_QWORD *)(v25 + 16);
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }
  else
  {
    v20 = type metadata accessor for UniversalControlPreferences(0);
    v29 = objc_msgSend((id)v20, "sharedPreferences");
    v30 = UniversalControlPreferences.connectedDeviceLimit.getter();

    if (v30 >= v28)
    {
      swift_unknownObjectRelease(v16);
      sub_10002D860();
      sub_10000E410();
      goto LABEL_14;
    }
    v18 = v8 >> 8;
    v82 = v8 >> 24;
    v83 = v8 >> 16;
    v80 = v8 >> 40;
    v81 = HIDWORD(v8);
    v79 = HIWORD(v8);
    v78 = HIBYTE(v8);
    v28 = v6 >> 8;
    v77 = v6 >> 16;
    sub_10016AE84(v6 >> 24);
    sub_100141348(HIDWORD(v6));
    sub_10016AC24(v6 >> 40);
    v76 = HIWORD(v6);
    v75 = HIBYTE(v6);
    if (qword_1002A9950 == -1)
      goto LABEL_5;
  }
  swift_once(&qword_1002A9950, sub_1001930C8);
LABEL_5:
  v31 = sub_10000F6E4();
  sub_100006FB4(v31, (uint64_t)qword_1002B48C0);
  sub_1000103C0();
  v32 = sub_10016A624();
  v33 = Logger.logObject.getter(v32);
  v35 = static os_log_type_t.default.getter(v33, v34);
  v74 = v35;
  v36 = os_log_type_enabled(v33, v35);
  v73 = v18;
  v72 = v28;
  if (v36)
  {
    v37 = sub_10000797C(42);
    v70 = (id)v20;
    v38 = v37;
    v71 = sub_10000797C(96);
    v91 = v71;
    *(_DWORD *)v38 = 136446978;
    v68 = v38 + 4;
    sub_10019DB1C();
    v67 = v28;
    v66 = v6;
    v39 = sub_10019DCB4(v8, v18, v83);
    v69 = v33;
    v40 = UUID.uuidString.getter(v39);
    v42 = v41;
    sub_10016B008(v85);
    v43 = sub_1000599D0(8, v40, v42);
    v44 = static String._fromSubstring(_:)(v43);
    v46 = v45;
    sub_10000E420();
    v90 = sub_100006FCC(v44, v46, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v68);
    sub_10000E4A0();
    *(_WORD *)(v38 + 12) = 2082;
    _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
    v90 = sub_100006FCC(v47, v48, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v38 + 14);
    sub_100026AF4(v25);
    sub_10000E4A0();
    *(_WORD *)(v38 + 22) = 2082;
    v49 = sub_100061BB4((uint64_t)v17);
    v90 = sub_100006FCC(v49, v50, &v91);
    sub_10019DEAC(v90, v51, v52, v38 + 32);
    sub_100026AF4((uint64_t)v17);
    sub_10000E420();
    *(_WORD *)(v38 + 32) = 2050;
    v53 = objc_msgSend(v70, "sharedPreferences");
    v54 = UniversalControlPreferences.connectedDeviceLimit.getter();

    v90 = v54;
    sub_10019DEAC(v55, v56, v57, v38 + 42);
    v58 = v69;
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v74, "Cannot connect '%{public}s', would exceed limit: mine:%{public}s + theirs:%{public}s > %{public}ld", (uint8_t *)v38, 0x2Au);
    v25 = v71;
    swift_arrayDestroy(v71, 3, (char *)&type metadata for Any + 8);
    sub_100007958(v25);
    sub_100007958(v38);

  }
  else
  {

    sub_100026AF4((uint64_t)v17);
    sub_100026AF4(v25);
  }
  v59 = v89;
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v89, enum case for UniveralControlErrorCode.connectionDeviceLimit(_:), v88);
  v60 = v4;
  sub_100195954(v8, v6);
  if (v61)
  {
    sub_100179940();
  }
  else
  {
    sub_10019DB1C();
    v67 = v72;
    v66 = v6;
    v63 = v84;
    v64 = sub_10019DCB4(v8, v73, v83);
    v60 = v63;
    UUID.uuidString.getter(v64);
    sub_100179940();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v63, v86);
    v65 = sub_1000AB088();
    static String._fromSubstring(_:)(v65);
    sub_100179940();
    v62 = sub_10000E568();
  }
  sub_10002D82C(v62, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  NSError.init(ucErrorCode:associatedDeviceName:underlyingError:)(v59, v25, v60, 0);
  swift_unknownObjectRelease(v16);
LABEL_14:
  sub_10000E4E0();
}

void sub_100190474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  char v102;
  uint64_t v103;
  char v104;
  _BYTE *v105;
  char v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  char v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;

  sub_10002626C();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v28 = sub_100026B20();
  sub_1000A353C(v28, (uint64_t)&a11);
  v124 = v29;
  sub_1000262EC();
  __chkstk_darwin(v30);
  sub_10000E5DC();
  sub_1000A3740(v31);
  sub_1000055B0(&qword_1002B1CD0);
  sub_1000262EC();
  __chkstk_darwin(v32);
  sub_10000E5DC();
  v135 = v33;
  v34 = type metadata accessor for OSSignposter(0);
  v136 = *(_QWORD *)(v34 - 8);
  v137 = v34;
  sub_1000262EC();
  __chkstk_darwin(v35);
  sub_10000E5DC();
  v122 = v36;
  sub_100026774();
  sub_10019E170();
  v138 = v37;
  v38 = *(_QWORD *)(v37 + 64);
  v40 = __chkstk_darwin(v39);
  v139 = (char *)&v111 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v40);
  v43 = (char *)&v111 - v42;
  __chkstk_darwin(v41);
  v45 = (char *)&v111 - v44;
  v46 = sub_10000E440();
  v134 = *(_QWORD *)(v46 - 8);
  sub_1000262EC();
  __chkstk_darwin(v47);
  sub_10000E5DC();
  v133 = v48;
  v49 = sub_1000103C0();
  sub_10004B67C(v49);
  sub_10000E410();
  sub_10019DED8();
  v51 = v50;
  sub_10000E4A0();
  if ((v51 & 1) == 0
    || (sub_1000103C0(), sub_10019DF9C(), sub_10000E410(), sub_10019DED8(), v53 = v52, sub_10000E4A0(), (v53 & 1) != 0))
  {
    v54 = sub_10019E104();
    sub_1001942C8(v54, v55);
    if (v56)
    {
      v114 = v21;
      v118 = v43;
      v119 = v38;
      v120 = v56;
      v121 = v45;
      v144 = v27 >> 8;
      v131 = v27 >> 16;
      v140 = v27 >> 24;
      v130 = HIDWORD(v27);
      v142 = HIWORD(v27);
      v143 = v27 >> 40;
      v141 = HIBYTE(v27);
      v129 = v25 >> 8;
      sub_10016AE84(v25 >> 16);
      sub_100141348(v25 >> 24);
      v113 = v46;
      v125 = v27;
      sub_10016AC24(v25 >> 40);
      v57 = *(_QWORD *)(v20 + 48);
      v58 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
      v59 = sub_10019DEC8(v58);
      v132 = v20;
      v60 = v59;
      *(_OWORD *)(v59 + 16) = xmmword_10021BBA0;
      *(_BYTE *)(v59 + 32) = v125;
      *(_BYTE *)(v59 + 33) = v144;
      *(_BYTE *)(v59 + 34) = BYTE2(v27);
      *(_BYTE *)(v59 + 35) = v140;
      *(_BYTE *)(v59 + 36) = BYTE4(v27);
      *(_BYTE *)(v59 + 37) = v143;
      *(_BYTE *)(v59 + 38) = v142;
      *(_BYTE *)(v59 + 39) = v141;
      *(_BYTE *)(v59 + 40) = v25;
      v61 = v129;
      *(_BYTE *)(v59 + 41) = v129;
      v62 = v128;
      *(_BYTE *)(v59 + 42) = v128;
      v63 = v127;
      *(_BYTE *)(v59 + 43) = v127;
      *(_BYTE *)(v59 + 44) = BYTE4(v25);
      v64 = v126;
      *(_BYTE *)(v59 + 45) = v126;
      *(_BYTE *)(v59 + 46) = BYTE6(v25);
      *(_BYTE *)(v59 + 47) = HIBYTE(v25);
      sub_10016A624();
      sub_100191390(v60, 2, v57, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D3F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018E88C);
      v112 = v65;
      swift_setDeallocating(v60);
      sub_10002D860();
      v145 = 0x697463656E6E6F43;
      v146 = 0xEB0000000020676ELL;
      v115 = HIBYTE(v25);
      HIBYTE(v109) = HIBYTE(v25);
      v116 = HIWORD(v25);
      BYTE6(v109) = BYTE6(v25);
      BYTE5(v109) = v64;
      v117 = HIDWORD(v25);
      BYTE4(v109) = BYTE4(v25);
      BYTE3(v109) = v63;
      v66 = v62;
      v67 = v125;
      BYTE2(v109) = v66;
      BYTE1(v109) = v61;
      LOBYTE(v109) = v25;
      v68 = v133;
      UUID.init(uuid:)(v125, v144, v131, v140, v130, v143);
      sub_100043344();
      sub_100179940();
      sub_1000EFF78(v68, *(uint64_t (**)(uint64_t, _QWORD))(v134 + 8));
      sub_1000AB088();
      v69 = sub_1000676A4();
      v71 = v70;
      sub_10000E410();
      v72._countAndFlagsBits = v69;
      v72._object = v71;
      String.append(_:)(v72);
      sub_10002D860();
      sub_100194504(v112, v145, v146, v73, v74, v75, v76, v77, v109, v110, v111, v112, v113, v114, v115, v116, v117, (uint64_t)v118, v119,
        v120);
      sub_10000E410();
      sub_10000E568();
      if (qword_1002A98A0 != -1)
        swift_once(&qword_1002A98A0, sub_1000C3010);
      v78 = v137;
      v79 = sub_100006FB4(v137, (uint64_t)qword_1002B6F70);
      v80 = v136;
      v81 = (uint64_t)v118;
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v118, v79, v78);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v81, 0, 1, v78);
      v82 = v114;
      v83 = v81 + *(int *)(v114 + 20);
      *(_QWORD *)v83 = 0;
      *(_QWORD *)(v83 + 8) = 0;
      *(_WORD *)(v83 + 16) = 256;
      v84 = *(int *)(v82 + 24);
      *(_QWORD *)(v81 + v84) = 0;
      v85 = v135;
      sub_1000259FC(v81, v135, &qword_1002B1CD0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v85, 1, v78) == 1)
      {
        sub_100184688(v85, &qword_1002B1CD0);
      }
      else
      {
        v86 = v122;
        v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v122, v85, v78);
        *(_QWORD *)v83 = "connect";
        *(_QWORD *)(v83 + 8) = 7;
        *(_WORD *)(v83 + 16) = 2;
        v88 = OSSignposter.logHandle.getter(v87);
        v89 = v123;
        OSSignpostID.init(log:)(v88);
        sub_100197F98();
        v91 = v90;
        sub_1000EFF78(v89, *(uint64_t (**)(uint64_t, _QWORD))(v124 + 8));
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v86, v78);
        swift_release();
        *(_QWORD *)(v81 + v84) = v91;
      }
      v92 = v81;
      v93 = (uint64_t)v121;
      sub_10019DED0(v92, (uint64_t)v121);
      v94 = (uint64_t)v139;
      sub_10019DF50(v93);
      v95 = *(unsigned __int8 *)(v138 + 80);
      v96 = (v95 + 16) & ~v95;
      v97 = v96 + v119;
      v98 = (v96 + v119 + 23) & 0xFFFFFFFFFFFFFFF8;
      v99 = swift_allocObject(&unk_10028FA80, v98 + 8, v95 | 7);
      sub_10019DED0(v94, v99 + v96);
      v100 = (_BYTE *)(v99 + v97);
      *v100 = v67;
      v100[1] = v144;
      sub_10019DF44();
      v101[2] = v102;
      v101[3] = v140;
      v101[4] = v130;
      v101[5] = v143;
      v101[6] = v142;
      v101[7] = v141;
      v101[8] = v25;
      v101[9] = v129;
      sub_10019DEE8();
      *(_BYTE *)(v103 + 10) = v104;
      sub_10019E0E4();
      v105[11] = v106;
      v105[12] = v117;
      v105[13] = v126;
      v105[14] = v116;
      v105[15] = v115;
      *(_QWORD *)(v99 + v98) = v132;
      v107 = type metadata accessor for Completion();
      sub_1000088D8(v107, 48);
      sub_10002679C();
      v108 = Completion.init(file:line:body:)(0xD000000000000063, 0x80000001002598D0, 220, (uint64_t)sub_10019D440, v99);
      sub_1000B7098((uint64_t)v108);
      sub_10000B348();
      sub_10002645C();
      sub_100184294(v93, type metadata accessor for SignpostInterval);
    }
  }
  sub_10000E4E0();
}

void sub_100190B90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD v38[5];

  sub_10002626C();
  v2 = sub_10000E440();
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10000E5DC();
  v33 = v4;
  v32 = *(_QWORD *)(sub_1000055B0(&qword_1002AC200) - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_100026500();
  sub_10003B09C(*(_QWORD *)(v0 + 24));
  sub_100057E2C();
  v7 = v6;
  sub_10000E568();
  v38[0] = v7;
  sub_100036DCC(v38);
  sub_10000E568();
  sub_10000B2F8(v0 + 88, (uint64_t)v38, 0);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    sub_100058854();
    v10 = sub_100071A78(v8);
    if (v10 < 0 || (v12 = v10, v10 >= 1 << *(_BYTE *)(v8 + 32)))
    {
LABEL_20:
      __break(1u);
    }
    else
    {
      v13 = v8 + 64;
      v30 = v8 + 64;
      v31 = v8;
      while ((*(_QWORD *)(v13 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
      {
        if (v11 != *(_DWORD *)(v8 + 36))
          goto LABEL_22;
        v36 = v11;
        v14 = (unsigned __int8 *)(*(_QWORD *)(v8 + 48) + 16 * v12);
        v37 = v9;
        v15 = v14[5];
        v16 = v14[4];
        v17 = v14[3];
        v18 = v14[2];
        v19 = v14[1];
        v20 = v1;
        v21 = *v14;
        sub_10002D790();
        v22 = v21;
        v1 = v20;
        v23 = UUID.init(uuid:)(v22, v19, v18, v17, v16, v15);
        v24 = UUID.uuidString.getter(v23);
        v26 = v25;
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
        *v20 = v24;
        v20[1] = v26;
        sub_1000B82C0();
        sub_10002645C();
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100058854();
        v27 = _swiftEmptyArrayStorage[2];
        if (v27 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_100058854();
        _swiftEmptyArrayStorage[2] = v27 + 1;
        sub_10019D578((uint64_t)v20, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v27);
        v8 = v31;
        v28 = -1 << *(_BYTE *)(v31 + 32);
        if ((uint64_t)v12 >= -v28)
          goto LABEL_23;
        v13 = v30;
        if ((*(_QWORD *)(v30 + 8 * (v12 >> 6)) & (1 << v12)) == 0)
          goto LABEL_24;
        if (v36 != *(_DWORD *)(v31 + 36))
          goto LABEL_25;
        v29 = _HashTable.occupiedBucket(after:)(v12, v30, ~v28);
        v9 = v37 - 1;
        if (v37 == 1)
        {
          sub_10000E594();
          goto LABEL_19;
        }
        v12 = v29;
        if ((v29 & 0x8000000000000000) == 0)
        {
          v11 = *(_DWORD *)(v31 + 36);
          if (v29 < 1 << *(_BYTE *)(v31 + 32))
            continue;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
LABEL_19:
    sub_10004F6A4((uint64_t)_swiftEmptyArrayStorage);
    sub_10000E4E0();
  }
}

void sub_100190EE8(uint64_t (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  char v19;
  int64_t v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  _BYTE v60[17];
  _QWORD *v61;

  v4 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v5 = a3 + 56;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 24);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v44 = v5;
  v45 = (unint64_t)(v8 + 63) >> 6;
  v11 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v10)
    {
      sub_10019E11C();
      v57 = v12;
      v58 = v13;
      v15 = v14 | (v13 << 6);
      goto LABEL_23;
    }
    v16 = __OFADD__(v4, 1);
    v17 = v4 + 1;
    if (v16)
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v45)
      goto LABEL_36;
    v18 = *(_QWORD *)(v44 + 8 * v17);
    if (!v18)
      break;
LABEL_22:
    v57 = (v18 - 1) & v18;
    v58 = v17;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
LABEL_23:
    v21 = (char *)(*(_QWORD *)(a3 + 48) + 17 * v15);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    v28 = v21[6];
    v29 = v21[7];
    v30 = v21[8];
    v31 = v21[9];
    v32 = v21[10];
    v33 = v21[11];
    v34 = v21[12];
    v35 = v21[13];
    v36 = v21[14];
    v37 = v21[15];
    LOBYTE(v21) = v21[16];
    v60[0] = v22;
    v60[1] = v23;
    v60[2] = v24;
    v60[3] = v25;
    v60[4] = v26;
    v60[5] = v27;
    v60[6] = v28;
    v60[7] = v29;
    v55 = v31;
    v56 = v30;
    v60[8] = v30;
    v60[9] = v31;
    v53 = v33;
    v54 = v32;
    v60[10] = v32;
    v60[11] = v33;
    v51 = v35;
    v52 = v34;
    v60[12] = v34;
    v60[13] = v35;
    v49 = v37;
    v50 = v36;
    v60[14] = v36;
    v60[15] = v37;
    v48 = (char)v21;
    v60[16] = (_BYTE)v21;
    v38 = a1(v60);
    if (v3)
    {
      swift_release();
LABEL_36:
      swift_release();
      return;
    }
    if ((v38 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      v61 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100058704();
        v11 = v61;
      }
      v40 = v11[2];
      v41 = v40 + 1;
      if (v40 >= v11[3] >> 1)
      {
        v59 = v40 + 1;
        v43 = v11[2];
        sub_100058704();
        v41 = v59;
        v40 = v43;
        v3 = 0;
        v11 = v61;
      }
      v11[2] = v41;
      v42 = (char *)v11 + 17 * v40;
      v42[32] = v22;
      v42[33] = v23;
      v42[34] = v24;
      v42[35] = v25;
      v42[36] = v26;
      v42[37] = v27;
      v42[38] = v28;
      v42[39] = v29;
      v42[40] = v56;
      v42[41] = v55;
      v42[42] = v54;
      v42[43] = v53;
      v42[44] = v52;
      v42[45] = v51;
      v42[46] = v50;
      v42[47] = v49;
      v42[48] = v48;
    }
    v10 = v57;
    v4 = v58;
  }
  sub_10019DFE8();
  if (v19 == v16)
    goto LABEL_36;
  sub_10019DFF4();
  if (v18)
    goto LABEL_21;
  sub_10019DFE8();
  if (v19 == v16)
    goto LABEL_36;
  sub_10019DFF4();
  if (v18)
    goto LABEL_21;
  sub_10019DFE8();
  if (v19 == v16)
    goto LABEL_36;
  sub_10019DFF4();
  if (v18)
    goto LABEL_21;
  sub_10019DFE8();
  if (v19 == v16)
    goto LABEL_36;
  sub_10019DFF4();
  if (v18)
  {
LABEL_21:
    v17 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v17 >= v45)
      goto LABEL_36;
    v18 = *(_QWORD *)(v44 + 8 * v17);
    ++v20;
    if (v18)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
}

void sub_100191220(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  char v22[16];
  uint64_t *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v26 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v23 = &v26;
  v24 = a5;
  sub_10018EE90((void (*)(__int128 *__return_ptr, __int128 *))sub_10019D308, (uint64_t)v22, a6);
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_1000586CC();
    v10 = v25;
    v11 = (__int128 *)(v8 + 32);
    v12 = v25[2];
    do
    {
      v13 = *v11;
      v25 = v10;
      if (v12 >= v10[3] >> 1)
      {
        v21 = v13;
        sub_1000586CC();
        v13 = v21;
        v10 = v25;
      }
      v10[2] = v12 + 1;
      *(_OWORD *)&v10[2 * v12 + 4] = v13;
      v11 = (__int128 *)((char *)v11 + 17);
      ++v12;
      --v9;
    }
    while (v9);
  }
  sub_1000DF7F4();
  v15 = v14;
  if (a5)
  {
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = v29;
    swift_bridgeObjectRetain();
    v20 = sub_10018E490(v16, v17, v18, v19, v15, a5);
  }
  else
  {
    v20 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)v8;
  sub_100192078((uint64_t)v20);
  sub_1000DFA30();
}

void sub_100191390(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__int128 *__return_ptr, __int128 *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  _BYTE v19[16];
  uint64_t *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = a1;
  v20 = &v23;
  v21 = a2;
  sub_10018EE90(a4, (uint64_t)v19, a3);
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_10019DF8C();
    v10 = v22;
    v11 = (__int128 *)(v8 + 32);
    v12 = v22[2];
    do
    {
      v13 = *v11;
      v22 = v10;
      if (v12 >= v10[3] >> 1)
      {
        v18 = v13;
        sub_1000586CC();
        v13 = v18;
        v10 = v22;
      }
      v10[2] = v12 + 1;
      *(_OWORD *)&v10[2 * v12 + 4] = v13;
      v11 = (__int128 *)((char *)v11 + 17);
      ++v12;
      --v9;
    }
    while (v9);
  }
  sub_1000DF7F4();
  v15 = v14;
  if ((_BYTE)a2)
  {
    v16 = v23;
    sub_10003AFBC();
    v17 = (_QWORD *)a5(v16, v15, a2);
  }
  else
  {
    v17 = _swiftEmptyArrayStorage;
  }
  sub_10000E420();
  v22 = (_QWORD *)v8;
  sub_100192078((uint64_t)v17);
  sub_1000DFA30();
}

void sub_1001914E8(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v11;

  sub_10018F420(a1, a2, a4);
  if ((v11 & 1) != 0)
    __asm { BR              X10 }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
}

void sub_1001915D4()
{
  JUMPOUT(0x100191540);
}

void sub_1001915E4()
{
  JUMPOUT(0x100191540);
}

void sub_1001915F8()
{
  JUMPOUT(0x100191540);
}

uint64_t sub_100191614@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  int64_t v13;
  char v14;
  uint64_t v16;
  _QWORD *v19;

  v11 = result;
  v13 = a7 >> 1;
  if (a7 >> 1 == a6)
  {
    v14 = a3;
  }
  else
  {
    v16 = a6;
    swift_unknownObjectRetain(a4);
    v19 = (_QWORD *)(a5 + 16 * v16 + 8);
    do
    {
      if (v16 >= v13)
      {
        __break(1u);
        JUMPOUT(0x1001917B8);
      }
      if (!static UniversalControlUUID.compare(lhs:rhs:)(*(v19 - 1), *v19, v11, a2))
      {
        swift_unknownObjectRelease(a4);
        __asm { BR              X10 }
      }
      ++v16;
      v19 += 2;
    }
    while (v13 != v16);
    result = swift_unknownObjectRelease(a4);
    v14 = a3;
  }
  *(_QWORD *)a9 = v11;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v14;
  return result;
}

uint64_t sub_1001917D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v13;

  v8 = result;
  v10 = *(_QWORD *)(a4 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain(a4);
    v13 = (_QWORD *)(a4 + 40);
    do
    {
      if (!static UniversalControlUUID.compare(lhs:rhs:)(*(v13 - 1), *v13, v8, a2))
      {
        swift_bridgeObjectRelease(a4);
        __asm { BR              X10 }
      }
      v13 += 2;
      --v10;
    }
    while (v10);
    result = swift_bridgeObjectRelease(a4);
  }
  *(_QWORD *)a6 = v8;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  return result;
}

void sub_10019190C()
{
  JUMPOUT(0x100191870);
}

void sub_10019191C()
{
  JUMPOUT(0x100191870);
}

void sub_100191930()
{
  JUMPOUT(0x100191870);
}

uint64_t sub_10019194C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  _QWORD *v11;

  v6 = result;
  v8 = a3;
  v9 = *(_QWORD *)(a4 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(a4);
    v11 = (_QWORD *)(a4 + 40);
    while (static UniversalControlUUID.compare(lhs:rhs:)(*(v11 - 1), *v11, v6, a2))
    {
      v11 += 2;
      if (!--v9)
      {
        result = swift_bridgeObjectRelease(a4);
        goto LABEL_8;
      }
    }
    result = swift_bridgeObjectRelease(a4);
    if ((v8 - 3) < 2)
      LOBYTE(v8) = 5;
  }
LABEL_8:
  *(_QWORD *)a5 = v6;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_100191A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL8 v11;
  BOOL v13;

  v4 = *(_QWORD *)(a4 + 16);
  if (!v4)
    return 1;
  swift_bridgeObjectRetain(a4);
  v8 = v4 - 1;
  v9 = (_QWORD *)(a4 + 40);
  do
  {
    v10 = static UniversalControlUUID.compare(lhs:rhs:)(*(v9 - 1), *v9, a1, a2);
    v11 = v10 != 0;
    v13 = v8-- != 0;
    if (!v10)
      break;
    v9 += 2;
  }
  while (v13);
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100191B08(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_10019B6DC(a1, a2);
  sub_10019A70C(a1);
  return (void *)a2;
}

void sub_100191B58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int64_t v46;
  int v47;
  unint64_t v48;
  _BYTE *v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  char v53;
  int64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _BYTE v83[32];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 48);
  v8 = sub_10019DF14();
  sub_10005E1FC(v8, v9, v10);
  sub_10005E1FC(v5, v6, v7);
  sub_10019DF14();
  sub_10019CFA8();
  v12 = v11;
  sub_100025618(v5, v6, v7);
  v13 = sub_10019DF14();
  sub_100025618(v13, v14, v15);
  v16 = *v2;
  v17 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v17, v12))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v2)
    || (v18 = *(_QWORD *)(v16 + 24) >> 1, v18 < v17 + v12))
  {
    sub_10019DEBC();
    sub_100077A14(v19, v20, v21, v22);
    v16 = v23;
    v18 = *(_QWORD *)(v23 + 24) >> 1;
  }
  v24 = v18 - *(_QWORD *)(v16 + 16);
  sub_10005CB58();
  if (v25 < v12)
    goto LABEL_13;
  if (v25 >= 1)
  {
    v26 = *(_QWORD *)(v16 + 16);
    v27 = __OFADD__(v26, v25);
    v28 = v26 + v25;
    if (v27)
    {
      __break(1u);
LABEL_20:
      v80 = *(_QWORD *)(v16 + 16);
      v94 = v4;
      v95 = v7;
      v70 = v7;
      v71 = v6;
      v96 = v6;
      v72 = v3;
      v97 = v3;
      v98 = v17;
      v99 = v12;
      v73 = v12;
      v100 = 0;
      v32 = sub_10019D248((uint64_t)v83, v24, v75, 0);
      v34 = *(_QWORD *)v33;
      v35 = *(_QWORD *)(v33 + 8);
      v36 = *(_BYTE *)(v33 + 16);
      sub_10005E1FC(*(_QWORD *)v33, v35, v36);
      ((void (*)(_BYTE *, _QWORD))v32)(v83, 0);
      v37 = v34;
      v74 = v4;
      v38 = sub_10019D078(v24, v75, 0, v4);
      v39 = v35;
      v40 = v80;
      v41 = v38;
      v43 = v42;
      v45 = v44 & 1;
      v46 = v38;
      v47 = v42;
      while (1)
      {
        v48 = *(_QWORD *)(v16 + 24);
        v76 = v48 >> 1;
        if ((uint64_t)(v48 >> 1) < v40 + 1)
        {
          v82 = v41;
          v61 = v16;
          v62 = v40;
          v63 = v39;
          v64 = v43;
          v65 = v45;
          sub_100077A14(v48 > 1, v40 + 1, 1, v61);
          v45 = v65;
          v43 = v64;
          v41 = v82;
          v39 = v63;
          v40 = v62;
          v16 = v66;
          v76 = *(_QWORD *)(v66 + 24) >> 1;
        }
        if (v40 < v76)
          break;
        v50 = v41;
        v51 = v43;
LABEL_31:
        *(_QWORD *)(v16 + 16) = v40;
        v41 = v50;
        v43 = v51;
      }
      v49 = (_BYTE *)(v16 + 24 * v40 + 48);
      v50 = v46;
      LODWORD(v51) = v47;
      while (1)
      {
        *((_QWORD *)v49 - 2) = v37;
        *((_QWORD *)v49 - 1) = v39;
        *v49 = v36 & 1;
        if ((v45 & 1) != 0)
          goto LABEL_35;
        if ((_DWORD)v51 != (_DWORD)v75)
        {
          __break(1u);
          goto LABEL_34;
        }
        v52 = v40 + 1;
        if (v50 == v17)
        {
          *(_QWORD *)(v16 + 16) = v52;
          v67 = v41;
          v68 = v43;
          v69 = v45;
          swift_bridgeObjectRelease();
          sub_100025618(v70, v71, v72);
          sub_10019DF94(v17, v73);
          v31 = v69 & 1;
          v29 = v67;
          v30 = v68;
          goto LABEL_11;
        }
        v53 = v45 & 1;
        v54 = v41;
        v81 = v52;
        v55 = v43;
        v56 = sub_10019D248((uint64_t)v83, v41, v43, v45 & 1);
        v78 = *(_QWORD *)(v57 + 8);
        v79 = *(_QWORD *)v57;
        v77 = *(_BYTE *)(v57 + 16);
        sub_10005E1FC(*(_QWORD *)v57, v78, v77);
        ((void (*)(_BYTE *, _QWORD))v56)(v83, 0);
        v50 = sub_10019D078(v54, v55, v53, v74);
        v51 = v58;
        v60 = v59 & 1;
        sub_10019E13C(v54, v55);
        v45 = v60;
        v39 = v78;
        v37 = v79;
        v36 = v77;
        v40 = v81;
        v49 += 24;
        v41 = v50;
        v43 = v51;
        v46 = v50;
        v47 = v51;
        if (v81 >= v76)
          goto LABEL_31;
      }
    }
    *(_QWORD *)(v16 + 16) = v28;
  }
  v17 = v88;
  v12 = v89;
  if (v25 != v24)
  {
    swift_bridgeObjectRelease();
    sub_100025618(v85, v86, v87);
    sub_100025618(v88, v89, v90);
    v29 = v91;
    v30 = v92;
    v31 = v93;
LABEL_11:
    sub_100025618(v29, v30, v31);
    *v2 = v16;
    return;
  }
LABEL_14:
  if ((v93 & 1) != 0 || (v90 & 1) != 0)
    goto LABEL_36;
  v75 = v92;
  if ((_DWORD)v92 == (_DWORD)v12)
  {
    v24 = v91;
    v4 = v84;
    v7 = v85;
    v6 = v86;
    v3 = v87;
    if (v91 == v17)
    {
      sub_100075850();
      sub_100025618(v85, v86, v87);
      sub_10019DF94(v91, v12);
      v29 = v91;
      v30 = v92;
      v31 = 0;
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_100191FD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  sub_10019DD90();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_10019DE14() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_10019DEBC();
    sub_100077ACC();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_10019DFC8();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10006A4DC((char *)(v0 + 32), v3, (char *)(v2 + 16 * v7 + 32));
  if (!v3)
  {
LABEL_11:
    sub_10000E410();
    *v1 = v2;
    sub_10002644C();
    return;
  }
  v9 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v9, v3);
  v10 = v9 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_100192078(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    sub_100077AE8(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    v3 = v9;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_10006A608((char *)(a1 + 32), v2, (char *)(v3 + 17 * v10 + 32));
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *(_QWORD *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_100192154()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10019DD90();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_10019DE14() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_10019DEBC();
    v2 = sub_100077B9C();
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  v6 = (*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16);
  v7 = type metadata accessor for HotZone(0);
  if (v6 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10006A884(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)), v3);
  if (!v3)
  {
LABEL_11:
    sub_10000E410();
    *v1 = v2;
    sub_10002644C();
    return;
  }
  v8 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v8, v3);
  v9 = v8 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100192220(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  __int128 v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = a1;
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || (v9 = *(_QWORD *)(v6 + 24) >> 1, v9 < v7 + v5))
  {
    sub_100077ACC();
    v6 = v10;
    v9 = *(_QWORD *)(v10 + 24) >> 1;
  }
  v11 = *(_QWORD *)(v6 + 16);
  v12 = v9 - v11;
  result = (uint64_t)sub_10005C830(&v45, (_OWORD *)(v6 + 16 * v11 + 32), v9 - v11, v8);
  if (result < v5)
    goto LABEL_13;
  if (result)
  {
    v14 = *(_QWORD *)(v6 + 16);
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_44;
    }
    *(_QWORD *)(v6 + 16) = v16;
  }
  if (result != v12)
  {
    result = v45;
    goto LABEL_11;
  }
LABEL_14:
  v8 = *(_QWORD *)(v6 + 16);
  result = v45;
  v17 = v46;
  v18 = v47;
  v19 = v48;
  if (v49)
  {
    v20 = (v49 - 1) & v49;
    v21 = __clz(__rbit64(v49)) | (v48 << 6);
    goto LABEL_16;
  }
  a4 = v48 + 1;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    return result;
  }
  v23 = (unint64_t)(v47 + 64) >> 6;
  if (a4 >= v23)
    goto LABEL_11;
  v26 = v46;
  v38 = *(_QWORD *)(v46 + 8 * a4);
  if (!v38)
  {
    v39 = v48 + 2;
    if (v48 + 2 >= v23)
      goto LABEL_11;
    v38 = *(_QWORD *)(v46 + 8 * v39);
    if (!v38)
    {
      if (v48 + 3 >= v23)
        goto LABEL_11;
      v38 = *(_QWORD *)(v46 + 8 * (v48 + 3));
      if (v38)
      {
        a4 = v48 + 3;
        goto LABEL_48;
      }
LABEL_58:
      v39 = a4 + 3;
      if (a4 + 3 >= v23)
        goto LABEL_11;
      v38 = *(_QWORD *)(v26 + 8 * v39);
      if (!v38)
      {
        a4 += 4;
        if (a4 >= v23)
          goto LABEL_11;
        v38 = *(_QWORD *)(v26 + 8 * a4);
        if (!v38)
        {
          v40 = v19 + 6;
          while (v40 < v23)
          {
            v38 = *(_QWORD *)(v26 + 8 * v40++);
            if (v38)
            {
              a4 = v40 - 1;
              goto LABEL_48;
            }
          }
          goto LABEL_11;
        }
        goto LABEL_48;
      }
    }
    a4 = v39;
  }
LABEL_48:
  v20 = (v38 - 1) & v38;
  v21 = __clz(__rbit64(v38)) + (a4 << 6);
  v19 = a4;
  v17 = v26;
LABEL_16:
  v22 = *(_OWORD *)(*(_QWORD *)(result + 48) + 16 * v21);
  v23 = (unint64_t)(v18 + 64) >> 6;
  v24 = v23 - 1;
LABEL_17:
  v25 = *(_QWORD *)(v6 + 24) >> 1;
  if (v25 < v8 + 1)
  {
    v42 = v23;
    v43 = v24;
    v44 = result;
    v34 = v17;
    v35 = v18;
    v36 = v20;
    v41 = v22;
    sub_100077ACC();
    v22 = v41;
    v20 = v36;
    v23 = v42;
    v24 = v43;
    v18 = v35;
    v17 = v34;
    v6 = v37;
    result = v44;
    v25 = *(_QWORD *)(v6 + 24) >> 1;
  }
  v26 = v6 + 32;
  while (1)
  {
    if (v8 >= v25)
    {
      *(_QWORD *)(v6 + 16) = v8;
      goto LABEL_17;
    }
    *(_OWORD *)(v26 + 16 * v8++) = v22;
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v19 << 6);
      goto LABEL_33;
    }
    v29 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v29 >= v23)
      goto LABEL_44;
    v30 = *(_QWORD *)(v17 + 8 * v29);
    if (!v30)
      break;
LABEL_32:
    v32 = __clz(__rbit64(v30));
    v20 = (v30 - 1) & v30;
    v28 = v32 + (v29 << 6);
    v19 = v29;
LABEL_33:
    v22 = *(_OWORD *)(*(_QWORD *)(result + 48) + 16 * v28);
  }
  v31 = v19 + 2;
  a4 = v19 + 1;
  if (v19 + 2 >= v23)
    goto LABEL_44;
  v30 = *(_QWORD *)(v17 + 8 * v31);
  if (v30)
    goto LABEL_28;
  a4 = v19 + 2;
  if (v19 + 3 >= v23)
    goto LABEL_44;
  v30 = *(_QWORD *)(v17 + 8 * (v19 + 3));
  if (v30)
  {
    v29 = v19 + 3;
    goto LABEL_32;
  }
  v31 = v19 + 4;
  a4 = v19 + 3;
  if (v19 + 4 >= v23)
    goto LABEL_44;
  v30 = *(_QWORD *)(v17 + 8 * v31);
  if (v30)
  {
LABEL_28:
    v29 = v31;
    goto LABEL_32;
  }
  v29 = v19 + 5;
  a4 = v19 + 4;
  if (v19 + 5 >= v23)
    goto LABEL_44;
  v30 = *(_QWORD *)(v17 + 8 * v29);
  if (v30)
    goto LABEL_32;
  v33 = v19 + 6;
  while (v33 < v23)
  {
    v30 = *(_QWORD *)(v17 + 8 * v33++);
    if (v30)
    {
      v29 = v33 - 1;
      goto LABEL_32;
    }
  }
LABEL_44:
  *(_QWORD *)(v6 + 16) = v8;
LABEL_11:
  result = sub_10005E1F4(result);
  *v4 = v6;
  return result;
}

uint64_t sub_100192638(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_1000103C0();
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    sub_10000E410();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0)
      v17 = *v1;
    else
      v17 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_100040544();
    v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    sub_10000E568();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    sub_100040544();
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = sub_10019CE24(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1, (void (*)(uint64_t, _QWORD, uint64_t))sub_10006B3E0, &qword_1002B4A08, &qword_1002B4A00, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005DF0C);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    sub_100040544();
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    sub_10000E568();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

void sub_1001927F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  sub_10019DD90();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_10019DE14() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_10019DEBC();
    sub_100077E58();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  sub_10019DFC8();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10006B7C8(v0 + 32, v3);
  if (!v3)
  {
LABEL_11:
    sub_10000E410();
    *v1 = v2;
    sub_10002644C();
    return;
  }
  v8 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v8, v3);
  v9 = v8 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_100192898(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return a2;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001928CC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = String.subscript.getter(result, v4 | (v3 << 16));
    sub_10000E410();
    return v5;
  }
  return result;
}

void sub_100192968()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[6];

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  type metadata accessor for ConnectionCoordinator.Event(0);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_100065E48();
  sub_1001942C8(v7, v5);
  if (v9)
  {
    v10 = sub_10019E130();
    swift_storeEnumTagMultiPayload(v10, v11, 4);
    sub_1000B472C(v1);
    sub_100184294(v1, type metadata accessor for ConnectionCoordinator.Event);
    if ((v3 & 1) != 0)
    {
      v27 = HIWORD(v5);
      v28 = HIBYTE(v5);
      v25 = HIDWORD(v5);
      v26 = v5 >> 40;
      v23 = v5 >> 16;
      v24 = v5 >> 24;
      v22 = v5 >> 8;
      v12 = *(_QWORD *)(v0 + 48);
      v13 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
      inited = swift_initStackObject(v13, v29);
      *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
      *(_QWORD *)(inited + 32) = v7;
      *(_QWORD *)(inited + 40) = v5;
      sub_10003AFBC();
      sub_100191390(inited, 3, v12, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D3F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018E88C);
      v16 = v15;
      swift_setDeallocating(inited);
      sub_10000E420();
      sub_100194504(v16, 0x6E69766965636552, 0xEE0065756C672067, v17, v18, v19, v20, v21, v7 >> 40, HIWORD(v7), HIBYTE(v7), v22, v23, v24, v25, v26, v27, v28, v29[0],
        v29[1]);
      sub_10000E568();
    }
    sub_1000269A0();
  }
  sub_10000E4E0();
}

void sub_100192B44()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  sub_10002626C();
  v42 = v0;
  v2 = v1;
  v4 = v3;
  v38 = v3 >> 8;
  v37 = v3 >> 16;
  v48 = v3 >> 24;
  v5 = HIDWORD(v3);
  v36 = HIDWORD(v3);
  v6 = v3 >> 40;
  v35 = v3 >> 40;
  v46 = HIBYTE(v3);
  v47 = HIWORD(v3);
  v44 = v1 >> 16;
  v45 = v1 >> 8;
  v43 = v1 >> 24;
  sub_10016AE78(HIDWORD(v1));
  v33 = v7 >> 40;
  v8 = HIWORD(v7);
  v32 = HIBYTE(v7);
  v41 = sub_10000E440();
  v40 = *(_QWORD *)(v41 - 8);
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_1000A3740((uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(v0 + 48);
  v12 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  v13 = sub_10019DEC8(v12);
  *(_OWORD *)(v13 + 16) = xmmword_10021BBA0;
  *(_BYTE *)(v13 + 32) = v4;
  v14 = sub_10019E060((_BYTE *)v13);
  v14[36] = v5;
  v14[37] = v6;
  v14[38] = v47;
  v14[39] = v46;
  v14[40] = v2;
  v15 = (_BYTE *)sub_10019E04C((uint64_t)v14);
  v15[43] = v43;
  v16 = v34;
  v15[44] = v34;
  LOBYTE(v5) = v33;
  v15[45] = v33;
  v15[46] = v8;
  LOBYTE(v6) = v32;
  v15[47] = v32;
  v49[2] = &v50;
  v50 = (uint64_t)v15;
  sub_10002D9F8();
  sub_10018EE90((void (*)(__int128 *__return_ptr, __int128 *))sub_10019D418, (uint64_t)v49, v11);
  sub_1000DFA30();
  v18 = v17;
  sub_10002D89C();
  sub_10000E4A0();
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v50 = 0x6D6F632065756C47;
  v51 = 0xEF20646574656C70;
  HIBYTE(v29) = v6;
  BYTE6(v29) = v8;
  BYTE5(v29) = v5;
  BYTE4(v29) = v16;
  BYTE3(v29) = v43;
  sub_10019E038();
  LOBYTE(v29) = v2;
  v19 = v39;
  UUID.init(uuid:)(v4, v38, v37, v48, v36, v35);
  v20 = sub_100141378();
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v19, v41);
  sub_1000599D0(8, v20, v22);
  sub_1000676A4();
  sub_10000E410();
  v23._countAndFlagsBits = sub_1000FD3C8();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  sub_100194504(v18, v50, v51, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
  sub_10000E594();
  sub_10000E410();
  sub_10000E4E0();
}

void sub_100192DF4()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[3];
  uint64_t v55[11];

  sub_10002626C();
  v48 = v0;
  HIDWORD(v36) = v1;
  v3 = v2;
  v5 = v4;
  v44 = v4 >> 8;
  v43 = v4 >> 16;
  v52 = HIDWORD(v4);
  v53 = v4 >> 24;
  v6 = v4 >> 40;
  v42 = v4 >> 40;
  v51 = HIWORD(v4);
  v7 = HIBYTE(v4);
  v41 = HIBYTE(v4);
  v49 = v2 >> 16;
  v50 = v2 >> 8;
  v8 = v2 >> 24;
  sub_10016AC24(HIDWORD(v2));
  sub_10016AE78(v9 >> 40);
  v38 = HIWORD(v10);
  v37 = HIBYTE(v10);
  v11 = sub_10000E440();
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_1000A3740((uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(v0 + 48);
  v15 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  v16 = sub_10019DEC8(v15);
  *(_OWORD *)(v16 + 16) = xmmword_10021BBA0;
  *(_BYTE *)(v16 + 32) = v5;
  v17 = sub_10019E060((_BYTE *)v16);
  v17[36] = v52;
  v17[37] = v6;
  v17[38] = v51;
  v17[39] = v7;
  v17[40] = v3;
  v18 = (_BYTE *)sub_10019E04C((uint64_t)v17);
  v19 = v8;
  v18[43] = v8;
  LOBYTE(v6) = v40;
  v18[44] = v40;
  v20 = v39;
  v18[45] = v39;
  LOBYTE(v7) = v38;
  v18[46] = v38;
  LOBYTE(v8) = v37;
  v18[47] = v37;
  v54[2] = v55;
  v55[0] = (uint64_t)v18;
  sub_10003B09C(v14);
  sub_100190EE8((uint64_t (*)(_BYTE *))sub_10019DA8C, (uint64_t)v54, v14);
  sub_1000DFA30();
  v22 = v21;
  sub_10000E4A0();
  sub_10002D89C();
  strcpy((char *)v55, "Disconnected ");
  HIWORD(v55[1]) = -4864;
  HIBYTE(v34) = v8;
  BYTE6(v34) = v7;
  BYTE5(v34) = v20;
  BYTE4(v34) = v6;
  BYTE3(v34) = v19;
  sub_10019E038();
  LOBYTE(v34) = v3;
  UUID.init(uuid:)(v5, v44, v43, v53, v52, v42);
  v23 = sub_100141378();
  v25 = v24;
  sub_10018470C(v46);
  sub_1000599D0(8, v23, v25);
  sub_1000676A4();
  sub_10000E410();
  v26._countAndFlagsBits = sub_10019E130();
  String.append(_:)(v26);
  sub_10002D89C();
  v27 = v48;
  sub_100194504(v22, v55[0], v55[1], v28, v29, v30, v31, v32, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
    v45);
  sub_10000E410();
  sub_10000E594();
  sub_10000B2F8(v27 + 88, (uint64_t)v55, 32);
  sub_100041C38(v5, v3, *(_QWORD *)(v27 + 88));
  if (v33)
  {
    swift_endAccess(v55);
    sub_1000B7584(0, SBYTE4(v36));
    sub_10000B348();
  }
  else
  {
    swift_endAccess(v55);
  }
  sub_10000E4E0();
}

uint64_t sub_1001930C8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B48C0);
  sub_100006FB4(v0, (uint64_t)qword_1002B48C0);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1313754947, 0xE400000000000000);
}

void sub_100193134(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  if (*(_BYTE *)(v1 + 16) == 1 && (a1 & 1) == 0)
  {
    v2 = (_QWORD *)v1;
    v3 = *(_QWORD *)(v1 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100191390(v4, 1, v3, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D29C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018DFA8);
    v6 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v2[6];
    swift_bridgeObjectRetain();
    v8 = sub_100198DB8(v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1002A9950 != -1)
        swift_once(&qword_1002A9950, sub_1001930C8);
      v9 = type metadata accessor for Logger(0);
      sub_100006FB4(v9, (uint64_t)qword_1002B48C0);
      swift_retain_n(v2, 2);
      swift_bridgeObjectRetain();
      v11 = Logger.logObject.getter(v10);
      v13 = static os_log_type_t.default.getter(v11, v12);
      if (os_log_type_enabled(v11, v13))
      {
        v14 = swift_slowAlloc(22, -1);
        v15 = swift_slowAlloc(64, -1);
        v24[0] = v15;
        *(_DWORD *)v14 = 136446466;
        swift_bridgeObjectRetain();
        v17 = sub_100061C88(v16);
        v19 = v18;
        swift_bridgeObjectRelease();
        v23 = sub_100006FCC(v17, v19, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v14 + 4);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2082;
        v20 = sub_100061C88(v6);
        v23 = sub_100006FCC(v20, v21, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v14 + 14);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v13, "Automatically reconnect enabled, update connections: %{public}s -> %{public}s ", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v6, 2);
        swift_release_n(v2, 2);
      }
      swift_beginAccess(v2 + 14, v24, 0, 0);
      if (v2[14])
      {
        v22 = v2[15];
        swift_getObjectType(v22);
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain(v22);
        OS_dispatch_source_data_add.add(data:)(1uLL);
        swift_unknownObjectRelease(v22);
        swift_bridgeObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

double sub_100193450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  if ((sub_100198A54(a1, v3) & 1) == 0)
    sub_1001934A0(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1001934A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v7 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  if (static HIDFixed.zero.getter() && *(_BYTE *)(v2 + 16) == 1)
  {
    swift_bridgeObjectRetain();
    v8 = sub_100191B08(a1, a2);
    v9 = sub_100193A7C();
    sub_100191B08(v9, (uint64_t)v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_100057E2C();
    v11 = v10;
    swift_bridgeObjectRelease();
    v57 = v11;
    sub_100036DCC(&v57);
    swift_bridgeObjectRelease();
    v12 = v57;
    v13 = *(_QWORD *)(sub_100193A7C() + 16);
    swift_bridgeObjectRelease();
    v14 = v13 + 1;
    v15 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
    v16 = UniversalControlPreferences.connectedDeviceLimit.getter();

    if (__OFSUB__(v16, v14))
    {
      __break(1u);
    }
    else
    {
      v17 = (v16 - v14) & ~((v16 - v14) >> 63);
      v16 = sub_1000E78E0(v17, v12);
      v3 = v19;
      v4 = v20;
      if (v17 >= *(_QWORD *)(v12 + 16))
      {
LABEL_10:
        sub_100191220(v16, v3, v4, v18, 1, v7);
        v36 = v35;
        swift_unknownObjectRelease(v16);
        swift_bridgeObjectRelease();
        v7 = v36;
        goto LABEL_11;
      }
      v54 = v18;
      v14 = sub_100192898(v17, v12);
      v52 = v22;
      v53 = v21;
      v51 = v23;
      v24 = qword_1002A9950;
      swift_bridgeObjectRetain();
      if (v24 == -1)
      {
LABEL_6:
        v25 = type metadata accessor for Logger(0);
        sub_100006FB4(v25, (uint64_t)qword_1002B48C0);
        v26 = swift_unknownObjectRetain_n(v14, 2);
        v27 = Logger.logObject.getter(v26);
        v29 = v14;
        v30 = static os_log_type_t.default.getter(v27, v28);
        if (os_log_type_enabled(v27, v30))
        {
          v50 = v3;
          v49 = v4;
          v31 = (uint8_t *)swift_slowAlloc(12, -1);
          v48 = swift_slowAlloc(32, -1);
          v57 = v48;
          v47 = v29;
          *(_DWORD *)v31 = 136446210;
          v46 = (uint64_t)(v31 + 4);
          sub_100061C94();
          v55 = sub_100006FCC(v32, v33, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v31 + 4);
          swift_unknownObjectRelease_n(v29, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v30, "Automatic Reconnect would exceed device limit, skip connecting: %{public}s", v31, 0xCu);
          swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          v34 = v31;
          v4 = v49;
          swift_slowDealloc(v34, -1, -1);
          swift_unknownObjectRelease(v29);

        }
        else
        {

          swift_unknownObjectRelease_n(v29, 3);
        }
        v18 = v54;
        goto LABEL_10;
      }
    }
    swift_once(&qword_1002A9950, sub_1001930C8);
    goto LABEL_6;
  }
LABEL_11:
  swift_bridgeObjectRetain();
  v37 = sub_100191B08(a2, a1);
  sub_100191390((uint64_t)v37, 0, v7, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D29C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018DFA8);
  v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100194504(v39, 0xD00000000000001ALL, 0x8000000100259840, v40, v41, v42, v43, v44, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56,
    v57);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10019385C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v3 = v1[4];
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_100198A54(a1, v3);
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    swift_beginAccess(v1 + 14, v5, 0, 0);
    if (v1[14])
    {
      v4 = v1[15];
      swift_getObjectType(v4);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain(v4);
      OS_dispatch_source_data_add.add(data:)(1uLL);
      swift_unknownObjectRelease(v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10019390C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  sub_100193934(v2);
  return sub_10019DC50(v2);
}

double sub_100193934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRetain();
  if ((sub_100198A54(a1, v3) & 1) == 0)
    sub_100193984(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

#error "100193A5C: call analysis failed (funcsize=58)"

uint64_t sub_100193A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  sub_10004B67C(v0);
  v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

void sub_100193AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  void (*v92)(_QWORD);
  uint64_t v93;
  uint64_t v94[6];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[6];
  uint64_t v108;

  sub_10002626C();
  a19 = v23;
  a20 = v24;
  v25 = (_QWORD *)v20;
  v106 = v26;
  v27 = type metadata accessor for DispatchTimeInterval(0);
  v104 = *(_QWORD *)(v27 - 8);
  v105 = v27;
  sub_1000262EC();
  __chkstk_darwin(v28);
  sub_10003D69C();
  v101 = v29;
  __chkstk_darwin(v30);
  v100 = (char *)v94 - v31;
  v32 = type metadata accessor for DispatchTime(0);
  v102 = *(_QWORD *)(v32 - 8);
  v103 = v32;
  sub_1000262EC();
  __chkstk_darwin(v33);
  v35 = sub_10019DDF4(v34, v94[0]);
  v36 = type metadata accessor for DispatchWorkItemFlags(v35);
  v97 = *(_QWORD *)(v36 - 8);
  v98 = v36;
  sub_1000262EC();
  __chkstk_darwin(v37);
  v39 = sub_10019DD44(v38, v94[0]);
  v40 = type metadata accessor for DispatchQoS(v39);
  v95 = *(_QWORD *)(v40 - 8);
  v96 = v40;
  sub_1000262EC();
  __chkstk_darwin(v41);
  v43 = sub_1000F0190((uint64_t)v94 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for UniversalControlDiagnoseCategory(v43);
  sub_1000A353C(v44, (uint64_t)&a16);
  sub_10016AE84(v45);
  sub_1000262EC();
  __chkstk_darwin(v46);
  sub_10000E5DC();
  v48 = sub_1000F0190(v47);
  type metadata accessor for OS_dispatch_source.TimerFlags(v48);
  sub_10019E170();
  v94[0] = v49;
  sub_1000262EC();
  __chkstk_darwin(v50);
  sub_10000E478();
  *(_BYTE *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v20 + 32) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v20 + 40) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v20 + 48) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v20 + 56) = &_swiftEmptySetSingleton;
  v51 = type metadata accessor for AnyCancellable(0);
  v52 = sub_100033B3C();
  v53 = sub_10019E130();
  v25[8] = Dictionary.init(dictionaryLiteral:)(v53, v54, v51, v52);
  v25[10] = 0;
  swift_unknownObjectWeakInit(v25 + 9, 0);
  type metadata accessor for ConnectionCoordinator(0);
  v55 = sub_10019E130();
  v58 = Dictionary.init(dictionaryLiteral:)(v55, v56, v57, v52);
  v25[11] = v58;
  v25[13] = &_swiftEmptySetSingleton;
  v59 = sub_10002D82C(v58, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v60 = sub_10002D82C(v59, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v25[15] = 0;
  v25[14] = 0;
  v61 = (void *)static OS_dispatch_queue.main.getter(v60);
  v107[0] = _swiftEmptyArrayStorage;
  sub_100021264((unint64_t *)&unk_1002AC3B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  v63 = v62;
  v64 = sub_1000055B0(&qword_1002AEEC0);
  sub_10002599C((unint64_t *)&qword_1002AC3C0, &qword_1002AEEC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v107, v64, v65, v21, v63);
  v66 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v22, v61);

  sub_10019E014();
  sub_10019DD08(v67);
  v25[12] = v66;
  v68 = sub_10002D790();
  v69 = (void *)static OS_dispatch_queue.main.getter(v68);
  v70 = sub_1000088D8((uint64_t)&unk_10028FAA8, 32);
  *(_QWORD *)(v70 + 24) = &off_10028FA60;
  swift_unknownObjectWeakInit(v70 + 16, v25);
  sub_10002679C();
  v71 = sub_1000C8454(v69, (uint64_t)sub_10002D0D4, v70);
  v73 = v72;
  sub_1000269A0();
  sub_10002645C();
  sub_10000B2F8((uint64_t)(v25 + 14), (uint64_t)&v108, 1);
  v74 = v25[14];
  v75 = v25[15];
  v25[14] = v71;
  v25[15] = v73;
  sub_10002D108(v74, v75);
  v76 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v94[2] + 104))(v94[1], enum case for UniversalControlDiagnoseCategory.connection(_:), v94[3]);
  v77 = UniversalControlDiagnoseCategory.code.getter(v76);
  sub_100126BA0((uint64_t)v25, (uint64_t)"com.apple.universalcontrol", 26, 2, v77, v78, v79);
  v80 = sub_10019E104();
  v81(v80);
  v82 = sub_10019DD84();
  v83 = sub_1000088D8((uint64_t)&unk_10028FAD0, 24);
  swift_weakInit(v83 + 16, v25);
  v107[4] = sub_10019D558;
  v107[5] = v83;
  v107[0] = _NSConcreteStackBlock;
  v107[1] = 1107296256;
  v107[2] = sub_10000E610;
  v107[3] = &unk_10028FAE8;
  v84 = _Block_copy(v107);
  sub_10002D988();
  sub_10002679C();
  v85 = v94[4];
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v82);
  v86 = v94[5];
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v85, v86, v84, v82);
  _Block_release(v84);
  sub_10000F718();
  sub_10019E0A0(v97);
  sub_10016B008(v95);
  sub_1000269A0();
  sub_10000B348();
  v87 = sub_10019DD84();
  v88 = sub_10002D988();
  v89 = v99;
  static DispatchTime.distantFuture.getter(v88);
  v90 = v100;
  sub_10007A0C4();
  v91 = v101;
  sub_10007A0F4(v101);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v89, v90, v91, v87);
  sub_10000F718();
  v92 = *(void (**)(_QWORD))(v104 + 8);
  ((void (*)(_QWORD *, uint64_t))v92)(v91, v105);
  v93 = sub_10019E104();
  v92(v93);
  sub_10019E0A0(v102);
  sub_10019DD84();
  sub_10002D988();
  OS_dispatch_source.activate()();
  sub_10000F718();
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_100193FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10019400C();
    return swift_release();
  }
  return result;
}

void sub_10019400C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v1 = v0;
  v2 = type metadata accessor for NotificationAlert(0);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1002A9950 != -1)
    swift_once(&qword_1002A9950, sub_1001930C8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100006FB4(v5, (uint64_t)qword_1002B48C0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "=== Disconnect Alert Timer ===", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(v1 + 104, v29, 1, 0);
  v10 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = &_swiftEmptySetSingleton;
  if (!*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 72);
  if (!Strong)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    goto LABEL_12;
  }
  v12 = Strong;
  v13 = Strong + 184;
  swift_beginAccess(Strong + 184, v22, 0, 0);
  sub_1000259FC(v13, (uint64_t)&v23, (uint64_t *)&unk_1002ABD50);
  swift_unknownObjectRelease(v12);
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_100184688((uint64_t)&v23, (uint64_t *)&unk_1002ABD50);
    return;
  }
  sub_100025A50(&v23, (uint64_t)v26);
  swift_retain();
  sub_10018EC90(v10);
  v15 = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v23 = v15;
  swift_bridgeObjectRetain();
  sub_1001994E8(&v23);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v23 + 16);
  if (v16)
  {
    v18 = *(_QWORD *)(v23 + 32);
    v17 = *(_QWORD *)(v23 + 40);
    v19 = v27;
    v20 = v28;
    sub_10000DBE4(v26, v27);
    swift_bridgeObjectRetain();
    swift_release();
    *v4 = v18;
    v4[1] = v17;
    v4[2] = v16 - 1;
    v4[3] = 0;
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v20 + 8))(v4, v19, v20);
    sub_100184294((uint64_t)v4, type metadata accessor for NotificationAlert);
  }
  else
  {
    swift_release();
  }
  sub_100005988(v26);
}

void sub_1001942C8(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = v2 + 88;
  swift_beginAccess(v2 + 88, v24, 32, 0);
  v11 = *(_QWORD *)(v2 + 88);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_1001A8C70(a1, a2), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
    swift_endAccess(v24);
    swift_retain(v14);
  }
  else
  {
    swift_endAccess(v24);
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 72);
    if (Strong)
    {
      v16 = Strong;
      v17 = *(_QWORD *)(v3 + 80);
      v18 = qword_1002A9950;
      swift_unknownObjectRetain(Strong);
      if (v18 != -1)
        swift_once(&qword_1002A9950, sub_1001930C8);
      v19 = sub_100006FB4(v6, (uint64_t)qword_1002B48C0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
      v20 = type metadata accessor for ConnectionCoordinator(0);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      v21 = sub_1000B41F0(a1, a2, v16, v17, (uint64_t)v9);
      swift_beginAccess(v3 + 112, v24, 33, 0);
      if (*(_QWORD *)(v3 + 112))
      {
        sub_100021264(&qword_1002AEEE0, 255, type metadata accessor for ConnectionCoordinator);
        dispatch thunk of ObservableObject.objectWillChange.getter(v20);
        sub_100026F38();
        swift_release();
        swift_endAccess(v24);
        swift_beginAccess(v10, v24, 33, 0);
        swift_retain(v21);
        sub_1001AAA3C(v22, a1, a2);
        swift_endAccess(v24);
        swift_unknownObjectRelease(v16);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_100194504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  os_log_type_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  char v57;
  __n128 v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  os_log_type_t v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  __n128 v76;
  int64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  os_log_type_t v106;
  _WORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  os_log_type_t v118;
  uint64_t Strong;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[4];

  sub_10002626C();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = sub_10000F6E4();
  sub_1000A353C(v29, (uint64_t)&a15);
  sub_100141348(v30);
  sub_1000262EC();
  __chkstk_darwin(v31);
  sub_10000E5DC();
  sub_1000A3740(v32);
  v112 = v20;
  v33 = *(_QWORD *)(v20 + 48);
  sub_1000103C0();
  v114 = v28;
  v34 = sub_100198DB8(v28, v33);
  sub_10000E410();
  if ((v34 & 1) != 0)
  {
LABEL_84:
    sub_10000E4E0();
    return;
  }
  if (qword_1002A9950 == -1)
    goto LABEL_3;
  while (1)
  {
    swift_once(&qword_1002A9950, sub_1001930C8);
LABEL_3:
    v35 = sub_100006FB4(v115, (uint64_t)qword_1002B48C0);
    sub_10003B09C(v24);
    swift_retain_n(v112, 2);
    v36 = sub_10003B09C(v114);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.default.getter(v37, v38);
    if (sub_10019DD28(v39))
    {
      v118 = v35;
      v40 = sub_10000797C(32);
      *(_QWORD *)&v117 = sub_10000797C(96);
      v122[0] = v117;
      *(_DWORD *)v40 = 136446722;
      sub_10002D9F8();
      v121 = sub_100006FCC(v26, v24, v122);
      sub_10019DD18(v121, v41, v42, v40 + 12);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v40 + 12) = 2082;
      v43 = sub_10002D9F8();
      v26 = sub_100061C88(v43);
      v45 = v44;
      sub_10002D89C();
      v121 = sub_100006FCC(v26, v45, v122);
      sub_10019DD18(v121, v46, v47, v40 + 22);
      sub_100141398();
      sub_100075850();
      *(_WORD *)(v40 + 22) = 2082;
      v48 = sub_100061C88(v114);
      v121 = sub_100006FCC(v48, v49, v122);
      sub_10019DD18(v121, v50, v51, v40 + 32);
      sub_100026AF4(v114);
      sub_10002D89C();
      _os_log_impl((void *)&_mh_execute_header, v37, v118, "%{public}s, update connections: %{public}s -> %{public}s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy(v117, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v117);
      sub_100007958(v40);

    }
    else
    {

      sub_100026AF4(v114);
      sub_100141398();
      sub_100026AF4(v24);
    }
    Strong = swift_unknownObjectWeakLoadStrong(v112 + 72);
    if (!Strong)
      break;
    v52 = *(_QWORD *)(v112 + 48);
    v24 = *(_QWORD *)(v52 + 16);
    if (v24)
    {
      v122[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000103C0();
      sub_10019DF8C();
      v53 = v122[0];
      v26 = sub_10019D1C8(v52);
      v55 = v54;
      v57 = v56 & 1;
      while ((v26 & 0x8000000000000000) == 0 && (uint64_t)v26 < 1 << *(_BYTE *)(v52 + 32))
      {
        if (((*(_QWORD *)(v52 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          goto LABEL_86;
        if (*(_DWORD *)(v52 + 36) != v55)
          goto LABEL_87;
        v58 = *(__n128 *)(*(_QWORD *)(v52 + 48) + 17 * v26);
        v122[0] = v53;
        v59 = *(_QWORD *)(v53 + 16);
        if (v59 >= *(_QWORD *)(v53 + 24) >> 1)
        {
          sub_10019DD68(v58);
          v58 = (__n128)v117;
          v53 = v122[0];
        }
        *(_QWORD *)(v53 + 16) = v59 + 1;
        *(__n128 *)(v53 + 16 * v59 + 32) = v58;
        v60 = sub_10019D078(v26, v55, v57 & 1, v52);
        v26 = v60;
        v55 = v61;
        v57 = v62 & 1;
        if (!--v24)
        {
          sub_10019E13C(v60, v61);
          sub_10000E410();
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
    }
    else
    {
LABEL_20:
      sub_1000DF7F4();
      v111 = v68;
      v69 = v114;
      v70 = *(_QWORD *)(v114 + 16);
      if (!v70)
      {
LABEL_30:
        sub_1000DF7F4();
        v81 = v80;
        swift_bridgeObjectRetain(v80);
        sub_100191B08(v111, v81);
        sub_10019E000();
        *(_QWORD *)(v83 - 256) = v82;
        sub_10019DBFC();
        if (v85)
        {
LABEL_31:
          sub_10019DE64();
          goto LABEL_46;
        }
        while (!__OFADD__(v84, 1))
        {
          sub_10019DDE4();
          if (v87 == v88)
            goto LABEL_53;
          v89 = *(_QWORD *)(v113 + 8 * v86);
          if (!v89)
          {
            sub_10019DBDC();
            if (v87 == v88)
              goto LABEL_53;
            sub_10019DBEC();
            if (!v89)
            {
              sub_10019DBDC();
              if (v87 == v88)
                goto LABEL_53;
              sub_10019DBEC();
              if (!v89)
              {
                sub_10019DBDC();
                if (v87 == v88)
                {
LABEL_53:
                  sub_1001412E8((uint64_t)&a10);
                  v93 = sub_100191B08(v81, v111);
                  sub_10000E410();
                  sub_10019E000();
                  *(_QWORD *)(v94 - 256) = v93;
                  sub_10019DBFC();
                  if (v96)
                  {
LABEL_54:
                    sub_10019DE64();
                    goto LABEL_69;
                  }
                  while (!__OFADD__(v95, 1))
                  {
                    sub_10019DDE4();
                    if (v87 == v88)
                      goto LABEL_76;
                    v98 = *(_QWORD *)(v113 + 8 * v97);
                    if (!v98)
                    {
                      sub_10019DBDC();
                      if (v87 == v88)
                        goto LABEL_76;
                      sub_10019DBEC();
                      if (!v98)
                      {
                        sub_10019DBDC();
                        if (v87 == v88)
                          goto LABEL_76;
                        sub_10019DBEC();
                        if (!v98)
                        {
                          sub_10019DBDC();
                          if (v87 == v88)
                          {
LABEL_76:
                            swift_unknownObjectRelease(Strong);
                            sub_1001412E8((uint64_t)&a10);
                            goto LABEL_77;
                          }
                          sub_10019DBEC();
                          if (!v98)
                          {
                            while (!__OFADD__(v99, 1))
                            {
                              sub_10019DDE4();
                              if (v87 == v88)
                                goto LABEL_76;
                              sub_10019E144();
                              if (v98)
                                goto LABEL_68;
                            }
                            goto LABEL_94;
                          }
                        }
                      }
                    }
LABEL_68:
                    sub_10019DE3C(v98);
LABEL_69:
                    sub_10019DB6C();
                    v24 = *(unsigned __int8 *)(v100 + 14);
                    sub_1000088D0();
                    v101 = sub_10019DFDC();
                    sub_10000B348();
                    sub_10000B2F8(v101 + 48, (uint64_t)&v120, 1);
                    *(_BYTE *)(v101 + 48) = 0;
                    sub_100112868();
                    swift_release();
                    v95 = v117;
                    if (v116)
                      goto LABEL_54;
                  }
                  goto LABEL_92;
                }
                sub_10019DBEC();
                if (!v89)
                {
                  while (!__OFADD__(v90, 1))
                  {
                    sub_10019DDE4();
                    if (v87 == v88)
                      goto LABEL_53;
                    sub_10019E144();
                    if (v89)
                      goto LABEL_45;
                  }
                  goto LABEL_93;
                }
              }
            }
          }
LABEL_45:
          sub_10019DE3C(v89);
LABEL_46:
          sub_10019DB6C();
          v24 = *(unsigned __int8 *)(v91 + 11);
          sub_1000088D0();
          v92 = sub_10019DFDC();
          sub_10000B348();
          sub_10000B2F8(v92 + 48, (uint64_t)&v121, 1);
          *(_BYTE *)(v92 + 48) = 1;
          sub_100112868();
          swift_release();
          v84 = v117;
          if (v116)
            goto LABEL_31;
        }
        goto LABEL_91;
      }
      v122[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10019DF8C();
      v71 = v122[0];
      v72 = sub_10019D1C8(v114);
      v24 = v73;
      v75 = v74 & 1;
      while ((v72 & 0x8000000000000000) == 0 && v72 < 1 << *(_BYTE *)(v69 + 32))
      {
        if (((*(_QWORD *)(v114 + 56 + (((unint64_t)v72 >> 3) & 0xFFFFFFFFFFFFF8)) >> v72) & 1) == 0)
          goto LABEL_89;
        if (*(_DWORD *)(v69 + 36) != (_DWORD)v24)
          goto LABEL_90;
        v76 = *(__n128 *)(*(_QWORD *)(v69 + 48) + 17 * v72);
        v122[0] = v71;
        v26 = *(_QWORD *)(v71 + 16);
        if (v26 >= *(_QWORD *)(v71 + 24) >> 1)
        {
          sub_10019DD68(v76);
          v76 = (__n128)v117;
          v71 = v122[0];
        }
        *(_QWORD *)(v71 + 16) = v26 + 1;
        *(__n128 *)(v71 + 16 * v26 + 32) = v76;
        v77 = sub_10019D078(v72, v24, v75 & 1, v114);
        v69 = v114;
        v72 = v77;
        v24 = v78;
        v75 = v79 & 1;
        if (!--v70)
        {
          sub_10019E13C(v77, v78);
          goto LABEL_30;
        }
      }
    }
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
  }
  v63 = (void *)sub_10019E020(0);
  v64 = static os_log_type_t.error.getter();
  if (sub_10019DD28(v64))
  {
    v65 = (_WORD *)sub_10000797C(2);
    *v65 = 0;
    sub_10019DE80((void *)&_mh_execute_header, v66, v67, "Failed to set traffic registration");
    sub_100007958((uint64_t)v65);
  }

LABEL_77:
  v102 = v112;
  *(_QWORD *)(v112 + 48) = v114;
  sub_100040544();
  sub_10000E410();
  v103 = swift_unknownObjectWeakLoadStrong(v112 + 72);
  if (v103)
  {
    v104 = v103;
    sub_100040544();
    sub_1000088D0();
    sub_10014A8D0(v114);
    swift_unknownObjectRelease(v104);
    sub_10000B348();
  }
  else
  {
    v105 = (void *)sub_10019E020(0);
    v106 = static os_log_type_t.error.getter();
    if (sub_10019DD28(v106))
    {
      v107 = (_WORD *)sub_10000797C(2);
      *v107 = 0;
      sub_10019DE80((void *)&_mh_execute_header, v108, v109, "Failed to set connections on sync controller");
      v110 = (uint64_t)v107;
      v102 = v112;
      sub_100007958(v110);
    }

  }
  sub_10000B2F8(v102 + 112, (uint64_t)v122, 0);
  if (*(_QWORD *)(v102 + 112))
  {
    swift_getObjectType(*(_QWORD *)(v102 + 120));
    sub_1000103C0();
    sub_10002D988();
    OS_dispatch_source_data_add.add(data:)(1uLL);
    sub_10000F718();
    sub_10000E410();
    goto LABEL_84;
  }
  __break(1u);
}

void *sub_100194F60()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 72);
  if (Strong)
  {
    v2 = Strong;
    swift_retain();
    v3 = sub_100150720();
    swift_release();
    v4 = sub_100193A7C();
    sub_100191B08(v4, (uint64_t)v3);
    swift_bridgeObjectRelease();
    v5 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
    inited = swift_initStackObject(v5, &v15);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    *(_OWORD *)(inited + 32) = *(_OWORD *)(v2 + 72);
    sub_10019BD8C();
    v8 = v7;
    swift_unknownObjectRelease(v2);
    swift_setDeallocating(inited);
  }
  else
  {
    if (qword_1002A9950 != -1)
      swift_once(&qword_1002A9950, sub_1001930C8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100006FB4(v9, (uint64_t)qword_1002B48C0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "no P2PPeerCoordinatorContext to check connected devices", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return &_swiftEmptySetSingleton;
  }
  return (void *)v8;
}

uint64_t sub_1001950F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100195A94(a1, a2, (uint64_t)"connect_link", 12, a3);
}

void sub_100195108(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignposter(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000259FC(a2, (uint64_t)v10, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100184688((uint64_t)v10, &qword_1002B1CD0);
LABEL_6:
    sub_100195614(a3, a4, a1);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v15 = type metadata accessor for SignpostInterval(0);
  v16 = a2 + *(int *)(v15 + 20);
  if ((*(_BYTE *)(v16 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = *(_QWORD *)(a2 + *(int *)(v15 + 24));
    if (v17)
    {
      sub_1001982F4((uint64_t)v14, *(const char **)v16, *(_QWORD *)(v16 + 8), *(unsigned __int8 *)(v16 + 16), v17, a1, a3, a4);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      goto LABEL_6;
    }
  }
  __break(1u);
}

void sub_100195284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v70 = a1;
  v71 = a2;
  v4 = a1;
  v36 = BYTE1(a1);
  v35 = BYTE2(a1);
  v34 = BYTE3(a1);
  v32 = BYTE4(a1);
  v49 = BYTE5(a1);
  v39 = BYTE6(a1);
  v48 = HIBYTE(a1);
  v47 = a2;
  v5 = BYTE1(a2);
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  v43 = BYTE6(a2);
  v42 = HIBYTE(a2);
  v10 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v33 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_errorRetain(a3);
  v50 = a3;
  v51 = a3;
  v37 = v4;
  v52 = v4;
  v16 = v32;
  v53 = v36;
  v54 = v35;
  v55 = v34;
  v56 = v32;
  v57 = v49;
  v58 = v39;
  v59 = v48;
  v60 = v47;
  v61 = v5;
  v62 = v6;
  v40 = v7;
  v63 = v7;
  v41 = v8;
  v64 = v8;
  v65 = v9;
  v66 = v43;
  v67 = v42;
  sub_1000259FC(v38, (uint64_t)v12, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100184688((uint64_t)v12, &qword_1002B1CD0);
    v27 = v50;
LABEL_9:
    swift_errorRelease(v27);
    return;
  }
  v44 = v9;
  v45 = v6;
  v46 = v5;
  v17 = v34;
  v18 = v35;
  v19 = v36;
  v20 = v37;
  v21 = v16;
  v22 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v33, v12, v13);
  v23 = type metadata accessor for SignpostInterval(0);
  v24 = v38 + *(int *)(v23 + 20);
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(unsigned __int8 *)(v24 + 16);
  if ((*(_BYTE *)(v24 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v30 = *(const char **)v24;
    v31 = v26;
    v28 = *(_QWORD *)(v38 + *(int *)(v23 + 24));
    swift_retain();
    if (v28)
    {
      LOBYTE(v68) = v20;
      BYTE1(v68) = v19;
      BYTE2(v68) = v18;
      BYTE3(v68) = v17;
      BYTE4(v68) = v21;
      BYTE5(v68) = v49;
      BYTE6(v68) = v39;
      HIBYTE(v68) = v48;
      LOBYTE(v69) = v47;
      BYTE1(v69) = v46;
      BYTE2(v69) = v45;
      BYTE3(v69) = v40;
      BYTE4(v69) = v41;
      BYTE5(v69) = v44;
      BYTE6(v69) = v43;
      HIBYTE(v69) = v42;
      v27 = v50;
      sub_1001982F4(v22, v30, v25, v31, v28, v50, v68, v69);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v13);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

void sub_100195614(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36[24];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  char v44[16];

  v4 = v3;
  v8 = type metadata accessor for NotificationAlert(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
    return;
  v34 = a2;
  v35 = a1;
  swift_getErrorValue(a3, v44, v43);
  v15 = v43[1];
  v16 = v43[2];
  swift_errorRetain(a3);
  if ((sub_100086BB4(4294960539, v15, v16) & 1) != 0)
  {
    swift_errorRelease(a3);
    return;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 72);
  if (!Strong)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    goto LABEL_9;
  }
  v18 = Strong;
  v19 = Strong + 184;
  swift_beginAccess(Strong + 184, v36, 0, 0);
  sub_1000259FC(v19, (uint64_t)&v37, (uint64_t *)&unk_1002ABD50);
  swift_unknownObjectRelease(v18);
  if (!*((_QWORD *)&v38 + 1))
  {
LABEL_9:
    swift_errorRelease(a3);
    sub_100184688((uint64_t)&v37, (uint64_t *)&unk_1002ABD50);
    return;
  }
  sub_100025A50(&v37, (uint64_t)v40);
  v20 = v35;
  v21 = sub_100195954(v35, v34);
  if (v22)
  {
    v23 = v21;
    v24 = v22;
  }
  else
  {
    v25 = UUID.init(uuid:)(v20, v20 >> 8, v20 >> 16, v20 >> 24, HIDWORD(v20), v20 >> 40);
    v26 = UUID.uuidString.getter(v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v29 = sub_1000599D0(8, v26, v28);
    v23 = static String._fromSubstring(_:)(v29);
    v24 = v30;
    swift_bridgeObjectRelease();
  }
  v31 = v41;
  v32 = v42;
  sub_10000DBE4(v40, v41);
  *v10 = v23;
  v10[1] = v24;
  v10[2] = a3;
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v32 + 8))(v10, v31, v32);
  sub_100184294((uint64_t)v10, type metadata accessor for NotificationAlert);
  sub_100005988(v40);
}

uint64_t sub_1001958D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;

  if (__OFADD__(*(_QWORD *)(a2 + 16), *(_QWORD *)(result + 16)))
  {
    __break(1u);
  }
  else
  {
    sub_100077ACC();
    v7 = v2;
    swift_bridgeObjectRetain();
    sub_100192220(v3, v4, v5, v6);
    swift_bridgeObjectRetain();
    sub_100191FD4();
    return v7;
  }
  return result;
}

uint64_t sub_100195954(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 72);
  if (!Strong)
    return 0;
  v6 = Strong;
  v7 = static UniversalControlUUID.compare(lhs:rhs:)(a1, a2);
  v8 = *(_QWORD *)(v6 + 96);
  if (!v7)
  {
    swift_retain();
    swift_unknownObjectRelease(v6);
    v12 = *(_QWORD *)(v8 + 32);
    swift_retain();
    swift_release();
    if (v12)
    {
      v13 = v12 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      swift_beginAccess(v12 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v15, 0, 0);
      v11 = *(_QWORD *)(v13 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 44));
      swift_bridgeObjectRetain();
      swift_release();
      return v11;
    }
    return 0;
  }
  v9 = *(_QWORD *)(v8 + 40);
  swift_beginAccess(v9 + 72, v15, 0, 0);
  v10 = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  v11 = sub_100041ECC(a1, a2, v10);
  swift_unknownObjectRelease(v6);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100195A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100195A94(a1, a2, (uint64_t)"connect", 7, a3);
}

uint64_t sub_100195A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;

  v57 = a4;
  v56 = a3;
  v58 = a5;
  v94 = a1;
  v95 = a2;
  v5 = a1;
  v6 = BYTE1(a1);
  v36 = BYTE2(a1);
  v50 = BYTE3(a1);
  v7 = BYTE4(a1);
  v35 = BYTE5(a1);
  v8 = BYTE6(a1);
  v48 = HIBYTE(a1);
  v47 = a2;
  v46 = BYTE1(a2);
  v45 = BYTE2(a2);
  v44 = BYTE3(a2);
  v43 = BYTE4(a2);
  v42 = BYTE5(a2);
  v41 = BYTE6(a2);
  v40 = HIBYTE(a2);
  v55 = type metadata accessor for OSSignpostID(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v38 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v38);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OSSignposter(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v37 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v35 - v22;
  v53 = v5;
  v59 = v5;
  v52 = v6;
  v60 = v6;
  v24 = v36;
  v61 = v36;
  v62 = v50;
  v51 = v7;
  v63 = v7;
  v25 = v35;
  v64 = v35;
  v49 = v8;
  v65 = v8;
  v66 = v48;
  v67 = v47;
  v68 = v46;
  v69 = v45;
  v70 = v44;
  v71 = v43;
  v72 = v42;
  v73 = v41;
  v74 = v40;
  v26 = sub_1000C3080();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v27(v23, v26, v18);
  v27(v15, (uint64_t)v23, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  v91 = 0;
  v92 = 0;
  v93 = 256;
  sub_1000C30C4((uint64_t)v15, 0, 0, 256, 0, (uint64_t)v17);
  sub_1000259FC((uint64_t)v17, (uint64_t)v12, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1)
  {
    sub_100184688((uint64_t)v12, &qword_1002B1CD0);
  }
  else
  {
    v28 = v37;
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v37, v12, v18);
    v30 = &v17[*(int *)(v38 + 20)];
    *(_QWORD *)v30 = v56;
    *((_QWORD *)v30 + 1) = v57;
    v30[16] = 2;
    v30[17] = 0;
    v31 = v39;
    OSSignposter.makeSignpostID()(v29);
    v75 = v53;
    v76 = v52;
    v77 = v24;
    v78 = v50;
    v79 = v51;
    v80 = v25;
    v81 = v49;
    v82 = v48;
    v83 = v47;
    v84 = v46;
    v85 = v45;
    v86 = v44;
    v87 = v43;
    v88 = v42;
    v89 = v41;
    v90 = v40;
    sub_100197F98();
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v55);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    *(_QWORD *)&v17[*(int *)(v38 + 24)] = v33;
    swift_release();
  }
  sub_100022838((uint64_t)v17, v58, type metadata accessor for SignpostInterval);
  sub_100184294((uint64_t)v17, type metadata accessor for SignpostInterval);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v18);
}

void sub_100195F7C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000259FC(a2, (uint64_t)v12, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v13) == 1)
  {
    sub_100184688((uint64_t)v12, &qword_1002B1CD0);
    if (!a1)
    {
LABEL_7:
      Strong = swift_unknownObjectWeakLoadStrong(a5 + 72);
      if (Strong)
      {
        v21 = Strong;
        swift_retain();
        swift_unknownObjectRelease(v21);
        v22 = type metadata accessor for Completion();
        swift_allocObject(v22, 48, 7);
        Completion.init(file:line:)();
        sub_100133524();
        swift_release();
        swift_release();
      }
    }
LABEL_9:
    sub_100195614(a3, a4, a1);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v17 = type metadata accessor for SignpostInterval(0);
  v18 = a2 + *(int *)(v17 + 20);
  if ((*(_BYTE *)(v18 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v19 = *(_QWORD *)(a2 + *(int *)(v17 + 24));
    if (v19)
    {
      sub_1001982F4((uint64_t)v16, *(const char **)v18, *(_QWORD *)(v18 + 8), *(unsigned __int8 *)(v18 + 16), v19, a1, a3, a4);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      if (!a1)
        goto LABEL_7;
      goto LABEL_9;
    }
  }
  __break(1u);
}

#error "1001962A4: call analysis failed (funcsize=82)"

void sub_1001962D0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  sub_10002626C();
  v16 = v1;
  v15 = v2;
  v4 = v3;
  v6 = v5;
  v20 = v5 >> 16;
  v21 = v5 >> 8;
  v18 = HIDWORD(v5);
  v19 = v5 >> 24;
  v17 = v5 >> 40;
  v7 = sub_10000E440();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000268CC();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(v4, 1);
  v9._countAndFlagsBits = v15;
  v9._object = v16;
  String.append(_:)(v9);
  sub_10019E17C();
  UUID.init(uuid:)(v6, v21, v20, v19, v18, v17);
  sub_100043344();
  sub_100179940();
  sub_10019DE94(v0, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_1000AB088();
  v10 = sub_1000676A4();
  v12 = v11;
  sub_10000E410();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  sub_10000E568();
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  sub_10000E4E0();
}

_QWORD *sub_100196434()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000AEBC((uint64_t)(v0 + 9));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(v0[12]);
  swift_bridgeObjectRelease();
  sub_10002D108(v0[14], v0[15]);
  return v0;
}

uint64_t sub_1001964A0()
{
  uint64_t v0;

  sub_100196434();
  return swift_deallocClassInstance(v0, 128, 7);
}

void sub_1001964C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _BOOL8 v72;
  Swift::Int v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  Swift::Int v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  uint64_t v151;
  uint64_t v152;

  sub_10002626C();
  a19 = v23;
  a20 = v24;
  v25 = v20;
  v26 = *v20;
  v27 = sub_10000F6E4();
  sub_1000A353C(v27, (uint64_t)&a16);
  v129 = v28;
  sub_1000262EC();
  __chkstk_darwin(v29);
  sub_10000E5DC();
  sub_1000A3740(v30);
  sub_1000103C0();
  sub_100147210();
  v32 = v31;
  sub_10000E410();
  if (*(_QWORD *)(v32 + 16))
  {
    v33 = 0;
    v34 = v32 + 56;
    sub_10019DC8C();
    if (!v22)
      goto LABEL_4;
LABEL_3:
    sub_10006D328();
    while (1)
    {
      sub_100192DF4();
      if (v22)
        goto LABEL_3;
LABEL_4:
      v35 = v33 + 1;
      if (__OFADD__(v33, 1))
      {
        __break(1u);
        goto LABEL_51;
      }
      if (v35 >= v21)
        goto LABEL_20;
      ++v33;
      if (!*(_QWORD *)(v34 + 8 * v35))
      {
        v33 = v35 + 1;
        if (v35 + 1 >= v21)
          goto LABEL_20;
        if (!*(_QWORD *)(v34 + 8 * v33))
        {
          v33 = v35 + 2;
          if (v35 + 2 >= v21)
            goto LABEL_20;
          if (!*(_QWORD *)(v34 + 8 * v33))
          {
            v36 = v35 + 3;
            if (v36 >= v21)
            {
LABEL_20:
              sub_1000269A0();
              goto LABEL_22;
            }
            if (!*(_QWORD *)(v34 + 8 * v36))
            {
              while (1)
              {
                v33 = v36 + 1;
                if (__OFADD__(v36, 1))
                  goto LABEL_52;
                if (v33 >= v21)
                  goto LABEL_20;
                ++v36;
                if (*(_QWORD *)(v34 + 8 * v33))
                  goto LABEL_17;
              }
            }
            v33 = v36;
          }
        }
      }
LABEL_17:
      sub_10006D310();
    }
  }
  sub_10000E594();
LABEL_22:
  sub_1000103C0();
  sub_10019DF9C();
  v38 = v37;
  sub_10000E410();
  swift_bridgeObjectRetain();
  v40 = sub_100166924(v39, v38);
  sub_10000E594();
  if (*(_QWORD *)(v40 + 16))
    sub_100196188(v40);
  sub_10002645C();
  sub_10000B2F8((uint64_t)(v25 + 11), (uint64_t)&v152, 0);
  v41 = sub_1000103C0();
  v42 = sub_10019A5B0(v41);
  sub_10000E410();
  sub_1000DFA24(v42);
  v44 = v43;
  v45 = v25[6];
  sub_10003AFBC();
  sub_100191390(v44, 5, v45, (void (*)(__int128 *__return_ptr, __int128 *))sub_10019D29C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10018DFA8);
  v47 = v46;
  sub_10000E410();
  sub_10000E420();
  sub_100194504(v47, 0x657463656E6E6F43, 0xE900000000000064, v48, v49, v50, v51, v52, v117, v118, v119, v120, v121, v122, v123, v125, v126, v128, v129,
    v130);
  sub_10000E568();
  v53 = sub_1000103C0();
  sub_10004B67C(v53);
  v55 = v54;
  sub_10000E410();
  v56 = sub_1000103C0();
  sub_10004B67C(v56);
  v58 = v57;
  sub_10000E410();
  v59 = sub_1000FD3C8();
  if ((sub_100198A54(v59, v60) & 1) == 0)
  {
    sub_100040544();
    sub_100191B08(v58, v55);
    swift_bridgeObjectRetain();
    v61 = sub_1000FD3C8();
    sub_100191B08(v61, v62);
    sub_10003AFBC();
    sub_100057E2C();
    sub_10000E420();
    sub_10019E02C();
    v120 = v58;
    v121 = v55;
    v122 = v26;
    sub_10000E420();
    v63 = *(_QWORD *)(v150[0] + 16);
    v125 = (uint64_t)v25;
    if (v63)
    {
      v64 = v25 + 8;
      v65 = (char *)(v150[0] + 47);
      v124 = v25 + 8;
      while (1)
      {
        v140 = *(v65 - 8);
        v133 = *v65;
        v145 = *(v65 - 13);
        v146 = *(v65 - 14);
        v143 = *(v65 - 11);
        v144 = *(v65 - 12);
        v141 = *(v65 - 9);
        v142 = *(v65 - 10);
        v138 = *(v65 - 6);
        v139 = *(v65 - 7);
        v136 = *(v65 - 4);
        v137 = *(v65 - 5);
        v134 = *(v65 - 2);
        v135 = *(v65 - 3);
        v127 = *(v65 - 15);
        sub_100196EE8();
        P2PPeerCoordinator.makeConnectionAssertion()();
        v131 = v66;
        sub_10000B2F8((uint64_t)v64, (uint64_t)v150, 33);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v64);
        v68 = *v64;
        v147 = (_QWORD *)*v64;
        *v64 = 0x8000000000000000;
        v69 = sub_10019E164();
        v71 = *(_QWORD *)(v68 + 16);
        v72 = (v70 & 1) == 0;
        v73 = v71 + v72;
        if (__OFADD__(v71, v72))
          break;
        v74 = v69;
        v75 = v70;
        sub_1000055B0(&qword_1002B4A28);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v73))
        {
          v76 = sub_10019E164();
          if ((v75 & 1) != (v77 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
            __break(1u);
            swift_release();
            __break(1u);
            return;
          }
          v74 = v76;
        }
        if ((v75 & 1) != 0)
        {
          v78 = v147[7];
          swift_release();
          *(_QWORD *)(v78 + 8 * v74) = v131;
        }
        else
        {
          v147[(v74 >> 6) + 8] |= 1 << v74;
          v79 = (_BYTE *)(v147[6] + 16 * v74);
          *v79 = v127;
          v79[1] = v146;
          v79[2] = v145;
          v79[3] = v144;
          v79[4] = v143;
          v79[5] = v142;
          v79[6] = v141;
          v79[7] = v140;
          v79[8] = v139;
          v79[9] = v138;
          v79[10] = v137;
          v79[11] = v136;
          v79[12] = v135;
          v79[13] = v134;
          sub_10019DF44();
          *(_BYTE *)(v80 + 14) = v81;
          *(_BYTE *)(v80 + 15) = v133;
          sub_10019DEE8();
          *(_QWORD *)(v82 + 8 * v74) = v83;
          v84 = v147[2];
          v85 = __OFADD__(v84, 1);
          v86 = v84 + 1;
          if (v85)
            goto LABEL_53;
          v147[2] = v86;
        }
        v64 = v124;
        *v124 = v147;
        swift_bridgeObjectRelease();
        swift_endAccess(v150);
        sub_1001412E8((uint64_t)&a14);
        v65 += 16;
        if (!--v63)
          goto LABEL_37;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
    }
    else
    {
LABEL_37:
      sub_1001412E8((uint64_t)&v151);
      sub_10003AFBC();
      sub_100057E2C();
      sub_10000E420();
      sub_10019E02C();
      sub_10000E420();
      v87 = *(_QWORD *)(v150[0] + 16);
      if (v87)
      {
        v88 = (_QWORD *)(v125 + 64);
        v89 = (uint64_t *)(v150[0] + 40);
        do
        {
          v90 = *(v89 - 1);
          v91 = *v89;
          sub_10000B2F8((uint64_t)v88, (uint64_t)v150, 33);
          sub_10002D9F8();
          v92 = sub_1001A8C70(v90, v91);
          LOBYTE(v90) = v93;
          sub_10002D89C();
          if ((v90 & 1) != 0)
          {
            v94 = swift_isUniquelyReferenced_nonNull_native(*v88);
            v148 = *v88;
            v95 = *v88;
            *v88 = 0x8000000000000000;
            v96 = *(_QWORD *)(v95 + 24);
            sub_1000055B0(&qword_1002B4A28);
            _NativeDictionary.ensureUnique(isUnique:capacity:)(v94, v96);
            v97 = type metadata accessor for AnyCancellable(0);
            sub_100033B3C();
            _NativeDictionary._delete(at:)(v92, v148, &type metadata for UniversalControlDeviceID, v97);
            *v88 = v148;
            swift_bridgeObjectRelease();
          }
          v89 += 2;
          swift_endAccess(v150);
          sub_10000B348();
          --v87;
        }
        while (v87);
      }
      swift_release();
      if (qword_1002A9950 == -1)
        goto LABEL_43;
    }
    swift_once(&qword_1002A9950, sub_1001930C8);
LABEL_43:
    sub_100006FB4(v132, (uint64_t)qword_1002B48C0);
    swift_bridgeObjectRetain();
    v98 = sub_10016A624();
    v99 = Logger.logObject.getter(v98);
    v101 = static os_log_type_t.default.getter(v99, v100);
    v26 = v122;
    if (os_log_type_enabled(v99, v101))
    {
      v102 = sub_10000797C(22);
      v103 = sub_10000797C(64);
      v150[0] = v103;
      *(_DWORD *)v102 = 136446466;
      v104 = sub_100061BB4(v120);
      v106 = sub_10019DF80(v104, v105);
      sub_10019DE9C(v106, v107, v108, v102 + 12);
      sub_100026AF4(v120);
      sub_1000267C4();
      *(_WORD *)(v102 + 12) = 2082;
      v109 = sub_100061BB4(v121);
      v149 = sub_10019DF80(v109, v110);
      sub_10019DE9C(v149, v111, v112, v102 + 22);
      sub_100026AF4(v121);
      sub_1000267C4();
      _os_log_impl((void *)&_mh_execute_header, v99, v101, "Intended Connections: %{public}s -> %{public}s", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v103);
      sub_100007958(v102);

    }
    else
    {

      sub_100026AF4(v121);
      sub_100026AF4(v120);
    }
    v25 = (uint64_t *)v125;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  sub_10000E568();
LABEL_47:
  v113 = v25[6];
  v114 = v25[7];
  sub_1000103C0();
  sub_10003AFBC();
  v115 = sub_100198DB8(v113, v114);
  sub_10000E410();
  sub_10000E420();
  if ((v115 & 1) == 0)
  {
    sub_100021264((unint64_t *)&unk_1002AC1A0, v116, (uint64_t (*)(uint64_t))type metadata accessor for ConnectionController);
    ObservableObject<>.objectWillChange.getter(v26);
    ObservableObjectPublisher.send()();
    sub_10000B348();
    v25[7] = v25[6];
    swift_bridgeObjectRetain();
    sub_10000E410();
  }
  sub_10000E4E0();
}

unint64_t sub_100196EE8()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 72);
  if (Strong)
  {
    v2 = Strong;
    swift_retain();
    swift_unknownObjectRelease(v2);
    v3 = sub_1000FD3C8();
    v5 = sub_1000FDECC(v3, v4);
    swift_release();
  }
  else
  {
    v5 = sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v6 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/ConnectionController.swift", 99, 2, 402);
    swift_willThrow(v6);
  }
  return v5;
}

uint64_t sub_100196FB8(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD v20[5];
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1 >> 16;
  v25 = a1 >> 8;
  v22 = HIDWORD(a1);
  v23 = a1 >> 24;
  v20[4] = HIWORD(a1);
  v21 = a1 >> 40;
  v20[2] = a2 >> 8;
  v20[3] = HIBYTE(a1);
  v20[0] = a2 >> 24;
  v20[1] = a2 >> 16;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(41, 1);
  v27 = v7;
  v8._countAndFlagsBits = 542327881;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9 = UUID.init(uuid:)(a1, v25, v24, v23, v22, v21);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v13 = sub_1000599D0(8, v10, v12);
  v14 = static String._fromSubstring(_:)(v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x80000001002598A0;
  v18._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v18);
  return v26;
}

void sub_10019717C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  void (*v81)(_QWORD *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned __int8 *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  unint64_t v123;
  void *v124;
  char v125[8];
  uint64_t v126;
  char v127[8];
  char v128[8];
  char v129[8];

  v6 = sub_10000F6E4();
  sub_1000F0150();
  __chkstk_darwin(v7);
  sub_100065E48();
  v8 = type metadata accessor for DispatchTimeInterval(0);
  sub_1000A353C(v8, (uint64_t)v129);
  v102 = v9;
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10003D69C();
  v101 = v11;
  __chkstk_darwin(v12);
  v14 = sub_1000F0190((uint64_t)&v92 - v13);
  v15 = type metadata accessor for DispatchTime(v14);
  sub_1000A353C(v15, (uint64_t)v127);
  v97 = v16;
  sub_1000262EC();
  __chkstk_darwin(v17);
  sub_10003D69C();
  v96 = v18;
  __chkstk_darwin(v19);
  sub_1000A3740((uint64_t)&v92 - v20);
  if (!a2)
    goto LABEL_13;
  v126 = a2;
  swift_errorRetain(a2);
  v21 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  v22 = sub_10002D82C(v21, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v23 = swift_dynamicCast(&v124, &v126, v21, v22, 6);
  if ((v23 & 1) == 0)
    goto LABEL_13;
  v24 = a1;
  v25 = v124;
  v26 = sub_100032434(v23, "domain");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v31 = (uint64_t)sub_100032434(v30, "code");
  if (v31 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_25;
  }
  v32 = v31;
  if (v31 > 0x7FFFFFFF)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    swift_once(&qword_1002A9950, sub_1001930C8);
LABEL_22:
    v84 = sub_100006FB4(v6, (uint64_t)qword_1002B48C0);
    v85 = v94;
    v86 = (uint64_t)v93;
    v87 = sub_1000C2764((uint64_t)v93, v84, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 16));
    __chkstk_darwin(v87);
    *(&v92 - 2) = (unsigned __int8 *)v2;
    sub_1000E45AC((int)sub_10019D3F0, (int)v92, (int)sub_100026210, (int)(&v92 - 4), v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95, v96, v97, v98, v99, v100, (uint64_t)v101, v102,
      v103,
      v104,
      v105,
      v106,
      v107);
    sub_1000269A0();
    sub_1000850C0(v86, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
    swift_errorRelease(v2);
    goto LABEL_23;
  }
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  if (v33 == v27 && v34 == v29)
  {
    sub_100026AF4(v29);

    a1 = v24;
    if (v32 == -6730)
      goto LABEL_23;
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v27, v29, 0);
    sub_10002D89C();
    sub_100075850();

    a1 = v24;
    if (v32 == -6730 && (v36 & 1) != 0)
      goto LABEL_23;
  }
LABEL_13:
  v93 = v3;
  v94 = v2;
  v95 = v6;
  v104 = a2;
  v37 = (uint64_t (*)(uint64_t, uint64_t))a1[24];
  v38 = a1[25];
  v120 = v38;
  v121 = v37;
  v105 = a1[26];
  v39 = a1[27];
  v119 = v39;
  v40 = a1[28];
  v118 = v40;
  v41 = a1[29];
  v117 = v41;
  v42 = a1[30];
  v116 = v42;
  v43 = a1[32];
  v114 = v43;
  v110 = a1[33];
  v122 = a1[34];
  v109 = a1[35];
  v108 = a1[36];
  v107 = a1[37];
  v106 = a1[38];
  v112 = *(_QWORD *)(v123 + 48);
  v44 = a1[31];
  v115 = v44;
  v92 = a1;
  v45 = a1[39];
  v113 = v45;
  v46 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  inited = swift_initStackObject(v46, v128);
  v111 = (uint64_t *)&v92;
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_BYTE *)(inited + 32) = (_BYTE)v37;
  *(_BYTE *)(inited + 33) = v38;
  *(_BYTE *)(inited + 34) = v105;
  *(_BYTE *)(inited + 35) = v39;
  *(_BYTE *)(inited + 36) = v40;
  *(_BYTE *)(inited + 37) = v41;
  *(_BYTE *)(inited + 38) = v42;
  *(_BYTE *)(inited + 39) = v44;
  *(_BYTE *)(inited + 40) = v43;
  v48 = v110;
  *(_BYTE *)(inited + 41) = v110;
  *(_BYTE *)(inited + 42) = v122;
  v49 = v109;
  *(_BYTE *)(inited + 43) = v109;
  v50 = v108;
  *(_BYTE *)(inited + 44) = v108;
  v51 = v107;
  *(_BYTE *)(inited + 45) = v107;
  v52 = v106;
  *(_BYTE *)(inited + 46) = v106;
  *(_BYTE *)(inited + 47) = v45;
  v126 = inited;
  __chkstk_darwin(inited);
  *(&v92 - 2) = (unsigned __int8 *)&v126;
  v53 = v112;
  sub_10003B09C(v112);
  sub_100190EE8((uint64_t (*)(_BYTE *))sub_10019D3D4, (uint64_t)(&v92 - 4), v53);
  v54 = v123;
  sub_1000DFA30();
  v56 = v55;
  sub_10000E420();
  sub_10002D89C();
  sub_100194504(v56, 0xD000000000000012, 0x8000000100259860, v57, v58, v59, v60, v61, (uint64_t)v92, (uint64_t)v93, v94, v95, v96, v97, v98, v99, v100, (uint64_t)v101, v102,
    v103);
  sub_10000E594();
  sub_10000B2F8(v54 + 88, (uint64_t)&v126, 32);
  sub_10019DF44();
  sub_10019DEE8();
  sub_10019E0E4();
  v64 = v62 | (v63 << 56);
  sub_10019E014();
  v66 = v65 | (v48 << 8) | (v122 << 16) | (v49 << 24) | (v50 << 32) | (v51 << 40) | (v52 << 48) | (v113 << 56);
  sub_100041C38(v64, v66, v67);
  if (v68)
  {
    swift_endAccess(&v126);
    v69 = sub_1000B64C8();
    v2 = v104;
    sub_1000B7584(v104, 1);
    if ((v69 & 1) != 0 && v2)
    {
      v70 = v54 + 104;
      sub_10000B2F8(v54 + 104, (uint64_t)&v126, 0);
      if (*(_QWORD *)(*(_QWORD *)(v54 + 104) + 16))
      {
        swift_errorRetain(v2);
      }
      else
      {
        type metadata accessor for UniversalControlPreferences(0);
        v122 = v54 + 104;
        v71 = swift_errorRetain(v2);
        v72 = sub_100032434(v71, "sharedPreferences");
        v73 = UniversalControlPreferences.disconnectAlertDebounceTime.getter();

        v74 = sub_10019DD84();
        v75 = sub_10002D988();
        v76 = v96;
        static DispatchTime.now()(v75);
        v123 = v64;
        v77 = v98;
        + infix(_:_:)(v76, v73);
        v121 = *(uint64_t (**)(uint64_t, uint64_t))(v97 + 8);
        v78 = v99;
        sub_10019DE94(v76, v121);
        v79 = v100;
        sub_10007A0C4();
        v80 = v101;
        sub_10007A0F4(v101);
        OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v77, v79, v80, v74);
        sub_10000F718();
        v81 = *(void (**)(_QWORD *, uint64_t))(v102 + 8);
        v82 = v103;
        v81(v80, v103);
        v83 = v82;
        v70 = v122;
        v81((_QWORD *)v79, v83);
        v64 = v123;
        v121(v77, v78);
      }
      sub_10000B2F8(v70, (uint64_t)&v124, 33);
      sub_100119698((uint64_t)v125, v64, v66);
      swift_endAccess(&v124);
      v6 = v95;
      if (qword_1002A9950 == -1)
        goto LABEL_22;
      goto LABEL_26;
    }
    sub_1000269A0();
  }
  else
  {
    swift_endAccess(&v126);
  }
LABEL_23:
  sub_10009543C();
}

uint64_t sub_1001978C4(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[2];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(34, 1);
  v19[1] = v6;
  v7._countAndFlagsBits = 542327881;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  v8 = UUID.init(uuid:)(a1[24], a1[25], a1[26], a1[27], a1[28], a1[29]);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = sub_1000599D0(8, v9, v11);
  v13 = static String._fromSubstring(_:)(v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100259880;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v17);
  return v19[0];
}

uint64_t sub_100197A08(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v8;

  if (a1 == 0xD000000000000016 && a2 == 0x8000000100253E00)
  {
    v4 = 0x8000000100253E00;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100253E00, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000011)
  {
    v6 = 0x8000000100258810;
    if (a2 == 0x8000000100258810)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258810, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x697463656E6E6F63 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease(0xEB00000000736E6FLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x697463656E6E6F63, 0xEB00000000736E6FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100197B68(char a1)
{
  if (!a1)
    return 0xD000000000000016;
  if (a1 == 1)
    return 0xD000000000000011;
  return 0x697463656E6E6F63;
}

uint64_t sub_100197BCC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;

  v9 = sub_1000055B0(&qword_1002B4A30);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000268CC();
  v11 = a1[3];
  v12 = a1[4];
  sub_10000DBE4(a1, v11);
  v13 = sub_10019D44C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConnectionController.DiagnosticState.CodingKeys, &type metadata for ConnectionController.DiagnosticState.CodingKeys, v13, v11, v12);
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v18, v9);
  if (!v4)
  {
    v18 = a3;
    sub_1000055B0(&qword_1002AA560);
    v14 = sub_1000FD1D8((unint64_t *)&qword_1002AD060, (void (*)(void))sub_10003668C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10016A6FC(v14);
    v18 = a4;
    sub_1000055B0(&qword_1002B4A48);
    v15 = sub_10019D488();
    sub_10016A6FC(v15);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t sub_100197D2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1000055B0((uint64_t *)&unk_1002B4A90);
  sub_10019E190();
  __chkstk_darwin(v3);
  sub_100026500();
  v4 = a1[3];
  v5 = a1[4];
  sub_10000DBE4(a1, v4);
  v6 = sub_10019D44C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConnectionController.DiagnosticState.CodingKeys, &type metadata for ConnectionController.DiagnosticState.CodingKeys, v6, v4, v5);
  if (v1)
  {
    v11 = 0;
  }
  else
  {
    LOBYTE(v18) = 0;
    LOBYTE(v4) = KeyedDecodingContainer.decode(_:forKey:)(&v18);
    sub_1000055B0(&qword_1002AA560);
    sub_1000FD1D8((unint64_t *)&unk_1002AD0F0, (void (*)(void))sub_10003A380, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v7 = sub_10016AC0C();
    sub_10003B1D0(v7, v8, v9, v10);
    sub_1000055B0(&qword_1002B4A48);
    v13 = sub_10019DA04();
    sub_10002D9F8();
    v14 = sub_10016AC0C();
    sub_10003B1D0(v14, v15, v16, v17);
    sub_10008A534();
    if (!v13)
    {
      sub_10003AFBC();
      sub_100005988(a1);
      swift_bridgeObjectRelease();
      sub_10002D89C();
      return v4 & 1;
    }
    sub_10002D89C();
    v11 = 1;
  }
  sub_100005988(a1);
  if (v11)
    sub_10002D89C();
  return v4 & 1;
}

uint64_t sub_100197ED0()
{
  char *v0;

  return sub_100197B68(*v0);
}

uint64_t sub_100197ED8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100197A08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100197EFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019D44C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100197F24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019D44C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100197F4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100197D2C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100197F7C(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_100197BCC(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_100197F98()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_signpost_id_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_10002626C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_10000E440();
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_100026B20();
  sub_1000F0150();
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OSSignposter.logHandle.getter(v14);
  v54 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
LABEL_11:
    sub_1000C2764((uint64_t)v16, v6, v18);
    v34 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    OSSignpostIntervalState.init(id:isOpen:)(v16, 1);
    sub_10000E4E0();
    return;
  }
  v51 = v17;
  if ((v8 & 1) == 0)
  {
    if (v10)
    {
      v35 = v10;
LABEL_10:
      v45 = v4 >> 24;
      v46 = v4 >> 16;
      v42 = v4 >> 40;
      v43 = HIDWORD(v4);
      v40 = HIBYTE(v4);
      v41 = HIWORD(v4);
      v38 = v2 >> 16;
      v39 = v2 >> 8;
      v37 = v2 >> 24;
      v36 = HIDWORD(v2);
      v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16);
      v49 = v0;
      sub_1000C2764((uint64_t)v16, v6, v48);
      v19 = sub_10000797C(22);
      v50 = v6;
      v20 = v19;
      v47 = sub_10000797C(64);
      v56 = v47;
      *(_DWORD *)v20 = 136315394;
      v44 = v20 + 4;
      sub_10019E17C();
      BYTE4(v35) = v36;
      BYTE3(v35) = v37;
      BYTE2(v35) = v38;
      BYTE1(v35) = v39;
      LOBYTE(v35) = v2;
      UUID.init(uuid:)(v4, v4 >> 8, v46, v45, v43, v42);
      v21 = sub_100141378();
      v23 = v22;
      sub_10018470C(v52);
      sub_1000599D0(8, v21, v23);
      v24 = sub_1000676A4();
      v26 = v25;
      sub_10000E410();
      v55 = sub_100006FCC(v24, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v44);
      sub_10000E4A0();
      *(_WORD *)(v20 + 12) = 2080;
      v27 = StaticString.description.getter("enableTelemetry=YES", 19, 2);
      v55 = sub_100006FCC(v27, v28, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v20 + 14);
      v29 = sub_10000E4A0();
      v30 = OSSignpostID.rawValue.getter(v29);
      v31 = v51;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, (os_signpost_type_t)v54, v30, v35, "%s %s", (uint8_t *)v20, 0x16u);
      v32 = v47;
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v32);
      v33 = v20;
      v6 = v50;
      sub_100007958(v33);

      sub_1000850C0((uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
      v18 = v48;
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)v10 >> 32)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 >> 11 != 27)
  {
    if (v10 >> 16 <= 0x10)
    {
      v35 = (const char *)&v57;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1001982F4(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  const char *v26;
  int v27;
  char v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  os_signpost_id_t v46;
  os_log_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  _QWORD v50[10];
  unint64_t v51;
  uint64_t v52;
  os_log_t v53;
  char *v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  v61 = a6;
  LODWORD(v62) = a4;
  v64 = (char *)a2;
  v10 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  __chkstk_darwin(v10);
  v57 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = (const char *)type metadata accessor for OSSignpostError(0);
  v12 = *((_QWORD *)v56 - 1);
  __chkstk_darwin(v56);
  v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OSSignpostID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v63 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)v50 - v20;
  v22 = OSSignposter.logHandle.getter(v19);
  v23 = OSSignpostIntervalState.signpostID.getter();
  v60 = static os_signpost_type_t.end.getter(v23);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v53 = v22;
  v54 = v21;
  v55 = v16;
  if ((v62 & 1) == 0)
  {
    if (!v64)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v64 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v64 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v64 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v64 = &v67;
LABEL_10:
  v50[9] = HIWORD(a7);
  v51 = a7 >> 40;
  v50[7] = a8 >> 8;
  v50[8] = HIBYTE(a7);
  v50[6] = a8 >> 16;
  v50[5] = a8 >> 24;
  v50[4] = HIDWORD(a8);
  v50[3] = a8 >> 40;
  v50[2] = HIWORD(a8);
  v50[1] = HIBYTE(a8);
  swift_retain();
  checkForErrorAndConsumeState(state:)(v25);
  swift_release();
  v26 = v56;
  v27 = (*(uint64_t (**)(char *, const char *))(v12 + 88))(v14, v56);
  v62 = HIDWORD(a7);
  if (v27 == enum case for OSSignpostError.doubleEnd(_:))
  {
    v29 = 0;
    v28 = 0;
    v56 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, const char *))(v12 + 8))(v14, v26);
    v56 = "%s success=%{BOOL}d %s";
    v28 = 2;
    v29 = 3;
  }
  v30 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v52 = v15;
  v30(v63, v54, v15);
  v31 = swift_slowAlloc(28, -1);
  v32 = swift_slowAlloc(64, -1);
  v66 = v32;
  *(_BYTE *)v31 = v28;
  *(_BYTE *)(v31 + 1) = v29;
  *(_WORD *)(v31 + 2) = 2080;
  v33 = v57;
  v34 = UUID.init(uuid:)(a7, a7 >> 8, a7 >> 16, a7 >> 24, v62, v51);
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v59);
  v38 = sub_1000599D0(8, v35, v37);
  v39 = static String._fromSubstring(_:)(v38);
  v41 = v40;
  swift_bridgeObjectRelease();
  v65 = sub_100006FCC(v39, v41, &v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v31 + 4);
  swift_bridgeObjectRelease();
  *(_WORD *)(v31 + 12) = 1024;
  LODWORD(v65) = v61 == 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v31 + 14);
  *(_WORD *)(v31 + 18) = 2080;
  v42 = StaticString.description.getter("enableTelemetry=YES", 19, 2);
  v65 = sub_100006FCC(v42, v43, &v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v31 + 20);
  swift_bridgeObjectRelease();
  v44 = v63;
  v46 = OSSignpostID.rawValue.getter(v45);
  v47 = v53;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, (os_signpost_type_t)v60, v46, v64, v56, (uint8_t *)v31, 0x1Cu);
  swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v32, -1, -1);
  swift_slowDealloc(v31, -1, -1);

  v48 = *(void (**)(char *, uint64_t))(v55 + 8);
  v49 = v52;
  v48(v54, v52);
  return ((uint64_t (*)(char *, uint64_t))v48)(v44, v49);
}

uint64_t type metadata accessor for ConnectionController()
{
  return objc_opt_self(_TtC13EnsembleAgent20ConnectionController);
}

void sub_10019881C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t j;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD v36[9];

  if (a1 == a2 || (sub_10019DC7C(), !v25))
  {
LABEL_41:
    sub_100123F40();
    return;
  }
  v4 = 0;
  v5 = *(_QWORD *)(v3 + 56);
  v33 = v3 + 56;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v34 = (unint64_t)(v6 + 63) >> 6;
  if ((v7 & v5) == 0)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v35 = v4;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = v3;
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    Hasher.init(_seed:)(v36, *(_QWORD *)(a2 + 40));
    sub_100040544();
    String.hash(into:)(v36, v18, v17);
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(a2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_40;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = (uint64_t *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (!v25 && (sub_100124288(*v23, v24) & 1) == 0)
    {
      v26 = ~v20;
      for (j = v21 + 1; ; j = v28 + 1)
      {
        v28 = j & v26;
        sub_10019E074();
        if ((v29 & 1) == 0)
          break;
        v30 = (uint64_t *)(v22 + 16 * v28);
        v31 = v30[1];
        v32 = *v30 == v18 && v31 == v17;
        if (v32 || (sub_100124288(*v30, v31) & 1) != 0)
          goto LABEL_29;
      }
LABEL_40:
      sub_10000E568();
      goto LABEL_41;
    }
LABEL_29:
    sub_10000E568();
    v3 = v15;
    v4 = v35;
    if (v8)
      goto LABEL_8;
LABEL_9:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v11 >= v34)
      goto LABEL_41;
    v12 = *(_QWORD *)(v33 + 8 * v11);
    v13 = v4 + 1;
    if (!v12)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v34)
        goto LABEL_41;
      v12 = *(_QWORD *)(v33 + 8 * v13);
      if (!v12)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v34)
          goto LABEL_41;
        v12 = *(_QWORD *)(v33 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v35 = v13;
  }
  v14 = v4 + 4;
  if (v4 + 4 >= v34)
    goto LABEL_41;
  v12 = *(_QWORD *)(v33 + 8 * v14);
  if (v12)
  {
    v13 = v4 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v34)
      goto LABEL_41;
    v12 = *(_QWORD *)(v33 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_100198A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  _BYTE v49[16];
  _QWORD v50[9];

  if (a1 == a2)
    return 1;
  v3 = a1;
  sub_10019DC7C();
  if (v4)
  {
    v5 = 0;
    sub_10019DBA8();
    v37 = v3;
    v38 = v6;
    v39 = v6 + 56;
    while (1)
    {
      if (v2)
      {
        sub_10019E0D0();
        v40 = v2;
        v41 = v5;
        v8 = v7 | (v5 << 6);
      }
      else
      {
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        sub_10019DE58();
        if (v10 == v11)
          return 1;
        if (!*(_QWORD *)(v36 + 8 * v9))
        {
          sub_1000E1598();
          if (v10 == v11)
            return 1;
          sub_1000E158C();
          if (!v12)
          {
            sub_1000E1598();
            if (v10 == v11)
              return 1;
            sub_1000E158C();
            if (!v13)
            {
              sub_1000E1598();
              if (v10 == v11)
                return 1;
              sub_1000E158C();
              if (!v14)
              {
                sub_10019DE58();
                if (v10 == v11)
                  return 1;
                sub_10019E088();
                if (!v16)
                {
                  while (!__OFADD__(v15, 1))
                  {
                    sub_1000E1598();
                    if (v10 == v11)
                      return 1;
                    v15 = v17 + 1;
                    if (*(_QWORD *)(v36 + 8 * v18))
                      goto LABEL_27;
                  }
LABEL_36:
                  __break(1u);
                }
              }
            }
          }
        }
LABEL_27:
        sub_10019DDB8();
        v40 = v19;
        v41 = v20;
        v8 = v21 + (v20 << 6);
      }
      v22 = (char *)(*(_QWORD *)(v3 + 48) + 16 * v8);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      v47 = v22[4];
      v27 = v22[5];
      v28 = v22[6];
      v29 = v22[7];
      v30 = v22[8];
      v31 = v22[9];
      v48 = v22[10];
      v46 = v22[11];
      v45 = v22[12];
      v44 = v22[13];
      v42 = v22[15];
      v43 = v22[14];
      Hasher.init(_seed:)(v50, *(_QWORD *)(v38 + 40));
      v49[0] = v23;
      v49[1] = v24;
      v49[2] = v25;
      v49[3] = v26;
      v49[4] = v47;
      v49[5] = v27;
      v49[6] = v28;
      v49[7] = v29;
      v49[8] = v30;
      v49[9] = v31;
      v49[10] = v48;
      v49[11] = v46;
      v49[12] = v45;
      v49[13] = v44;
      v49[14] = v43;
      v49[15] = v42;
      Hasher.combine(bytes:)(v49, v50);
      v32 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v38 + 32));
      if (((*(_QWORD *)(v39 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
        return 0;
      v3 = v37;
      v2 = v40;
      v5 = v41;
      if (sub_10019DF5C(*(_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v32), *(_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v32 + 8)))
      {
        sub_10019DFB4();
        if (((*(_QWORD *)(v39 + v33) >> v32) & 1) == 0)
          return 0;
        while (sub_10019DF5C(*(_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v32), *(_QWORD *)(*(_QWORD *)(v38 + 48) + 16 * v32 + 8)))
        {
          sub_10019DFB4();
          if (((*(_QWORD *)(v39 + v34) >> v32) & 1) == 0)
            return 0;
        }
      }
    }
  }
  return 0;
}

void sub_100198DA4(uint64_t a1, uint64_t a2)
{
  sub_100199164(a1, a2);
}

uint64_t sub_100198DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  Swift::UInt v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  _BYTE v56[16];
  _QWORD v57[9];

  if (a1 == a2)
    return 1;
  sub_10019DC7C();
  if (v41)
  {
    v4 = 0;
    v43 = v3 + 56;
    v5 = 1 << *(_BYTE *)(v3 + 32);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v44 = (unint64_t)(v5 + 63) >> 6;
    v7 = a2 + 56;
    if ((v6 & *(_QWORD *)(v3 + 56)) == 0)
      goto LABEL_9;
LABEL_8:
    sub_10019E11C();
    v45 = v9;
    v46 = v10;
    for (i = v11 | (v10 << 6); ; i = v25 + (v24 << 6))
    {
      v26 = (char *)(*(_QWORD *)(v8 + 48) + 17 * i);
      v27 = *v26;
      v28 = v26[1];
      v29 = v26[2];
      v30 = v26[3];
      v50 = v26[4];
      v31 = v26[5];
      v32 = v26[6];
      v33 = v26[7];
      v55 = v26[8];
      v54 = v26[9];
      v53 = v26[10];
      v52 = v26[11];
      v51 = v26[12];
      v49 = v26[13];
      v48 = v26[14];
      v47 = v26[15];
      v34 = v26[16];
      Hasher.init(_seed:)(v57, *(_QWORD *)(a2 + 40));
      v56[0] = v27;
      v56[1] = v28;
      v56[2] = v29;
      v56[3] = v30;
      v56[4] = v50;
      v56[5] = v31;
      v56[6] = v32;
      v56[7] = v33;
      v56[8] = v55;
      v56[9] = v54;
      v56[10] = v53;
      v56[11] = v52;
      v56[12] = v51;
      v56[13] = v49;
      v56[14] = v48;
      v56[15] = v47;
      Hasher.combine(bytes:)(v56, v57);
      Hasher._combine(_:)(v34);
      Hasher._finalize()();
      sub_10019DF04();
      v37 = v36 & ~v35;
      if (((*(_QWORD *)(v7 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
        return 0;
      v38 = ~v35;
      while (1)
      {
        v39 = *(_QWORD *)(a2 + 48) + 17 * v37;
        v40 = *(unsigned __int8 *)(v39 + 16);
        v41 = !static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)v39, *(_QWORD *)(v39 + 8)) && v40 == (_DWORD)v34;
        if (v41)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v7 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          return 0;
      }
      v4 = v46;
      if (v45)
        goto LABEL_8;
LABEL_9:
      v13 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      if (v13 >= v44)
        return 1;
      if (!*(_QWORD *)(v43 + 8 * v13))
      {
        sub_10019DF68();
        if (v14 == v15)
          return 1;
        sub_10019E0AC();
        if (!v16)
        {
          sub_10019DF68();
          if (v14 == v15)
            return 1;
          sub_10019E0AC();
          if (!v17)
          {
            sub_10019DF68();
            if (v14 == v15)
              return 1;
            sub_10019E0AC();
            if (!v19)
            {
              v20 = v18 + 4;
              if (v20 >= v44)
                return 1;
              if (!*(_QWORD *)(v43 + 8 * v20))
              {
                while (!__OFADD__(v20, 1))
                {
                  sub_10019DF68();
                  if (v14 == v15)
                    return 1;
                  sub_10019E0AC();
                  v20 = v21 + 1;
                  if (v22)
                    goto LABEL_27;
                }
LABEL_41:
                __break(1u);
              }
            }
          }
        }
      }
LABEL_27:
      sub_10019DDB8();
      v45 = v23;
      v46 = v24;
    }
    __break(1u);
    goto LABEL_41;
  }
  return 0;
}

void sub_100199150(uint64_t a1, uint64_t a2)
{
  sub_100199164(a1, a2);
}

void sub_100199164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v5)(_QWORD *, uint64_t);
  char v6;
  void (*v7)(_QWORD *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[9];

  if (a1 != a2)
  {
    sub_10019DC7C();
    if (v6)
    {
      v7 = v5;
      v8 = 0;
      sub_10019DBA8();
      v9 = a2 + 56;
      while (1)
      {
LABEL_5:
        if (v2)
        {
          sub_10019E0D0();
          v11 = v10 | (v8 << 6);
        }
        else
        {
          if (__OFADD__(v8, 1))
          {
            __break(1u);
LABEL_36:
            __break(1u);
            return;
          }
          sub_10019DE58();
          if (v12 == v13)
            break;
          sub_10019E088();
          v8 = v14;
          if (!v15)
          {
            v8 = v14 + 1;
            sub_10019E0B8();
            if (v12 == v13)
              break;
            sub_10019E094();
            if (!v15)
            {
              v8 = v16 + 2;
              sub_10019E0B8();
              if (v12 == v13)
                break;
              sub_10019E094();
              if (!v15)
              {
                v8 = v17 + 3;
                sub_10019E0B8();
                if (v12 == v13)
                  break;
                sub_10019E094();
                if (!v15)
                {
                  sub_10019DE58();
                  if (v12 == v13)
                    break;
                  sub_10019E088();
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v18 + 1;
                      if (__OFADD__(v18, 1))
                        goto LABEL_36;
                      sub_10019E0B8();
                      if (v12 == v13)
                        goto LABEL_34;
                      sub_10019E094();
                      v18 = v19 + 1;
                      if (v15)
                        goto LABEL_28;
                    }
                  }
                  v8 = v18;
                }
              }
            }
          }
LABEL_28:
          v2 = (v15 - 1) & v15;
          v11 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v11);
        Hasher.init(_seed:)(v23, *(_QWORD *)(a2 + 40));
        v7(v23, v20);
        v21 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(v9 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if ((sub_10019DEF4() & 1) == 0)
        {
          while (1)
          {
            sub_10019E0F0();
            if (((*(_QWORD *)(v9 + v22) >> v21) & 1) == 0)
              goto LABEL_34;
            if ((sub_10019DEF4() & 1) != 0)
              goto LABEL_5;
          }
        }
      }
    }
  }
LABEL_34:
  sub_100123F40();
}

void sub_1001992FC(uint64_t a1, uint64_t a2)
{
  char v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];

  if (a1 == a2)
    return;
  sub_10019DC7C();
  if (!v4)
    return;
  v5 = 0;
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = a2 + 56;
  do
  {
LABEL_8:
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v5 << 6);
      goto LABEL_26;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v14 >= v10)
      return;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (v15)
      goto LABEL_25;
    v5 = v14 + 1;
    if (v14 + 1 >= v10)
      return;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    if (v15)
      goto LABEL_25;
    v5 = v14 + 2;
    if (v14 + 2 >= v10)
      return;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    if (v15)
      goto LABEL_25;
    v5 = v14 + 3;
    if (v14 + 3 >= v10)
      return;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    if (v15)
      goto LABEL_25;
    v16 = v14 + 4;
    if (v16 >= v10)
      return;
    v15 = *(_QWORD *)(v6 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v5 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_35;
        if (v5 >= v10)
          return;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        ++v16;
        if (v15)
          goto LABEL_25;
      }
    }
    v5 = v16;
LABEL_25:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_26:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v13);
    Hasher.init(_seed:)(v23, *(_QWORD *)(a2 + 40));
    Hasher._combine(_:)(v17);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      return;
    v21 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v21 + v20) == v17);
  v22 = ~v19;
  while (1)
  {
    v20 = (v20 + 1) & v22;
    if (((*(_QWORD *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      break;
    if (*(unsigned __int8 *)(v21 + v20) == v17)
      goto LABEL_8;
  }
}

void sub_1001994E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CA94();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100199550(v5);
  *a1 = v2;
}

void sub_100199550(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::Int *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  Swift::Int v107;
  uint64_t v108;
  uint64_t v109;
  Swift::Int v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100199BF8(0, v3, 1, a1);
      return;
    }
    goto LABEL_126;
  }
  v5 = v4;
  v117 = v1;
  sub_1000211D4(v3 / 2);
  v108 = v6;
  v109 = v3;
  v112 = v7;
  v106 = a1;
  if (v3 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    v42 = _swiftEmptyArrayStorage[2];
LABEL_91:
    if (v42 < 2)
    {
LABEL_102:
      swift_bridgeObjectRelease();
      if (v109 >= -1)
      {
        *(_QWORD *)(v108 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_131;
    }
    v97 = *v106;
    while (1)
    {
      v98 = v42 - 2;
      if (v42 < 2)
        break;
      if (!v97)
        goto LABEL_135;
      v99 = v10[2 * v98 + 4];
      v100 = v10[2 * v42 + 3];
      v101 = v117;
      sub_100199CE4((char *)(v97 + 16 * v99), (char *)(v97 + 16 * v10[2 * v42 + 2]), v97 + 16 * v100, v112);
      v117 = v101;
      if (v101)
        goto LABEL_88;
      if (v100 < v99)
        goto LABEL_121;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10006CA50();
        v10 = v104;
      }
      if (v98 >= v10[2])
        goto LABEL_122;
      v102 = &v10[2 * v98 + 4];
      *v102 = v99;
      v102[1] = v100;
      v103 = v10[2];
      if (v42 > v103)
        goto LABEL_123;
      memmove(&v10[2 * v42 + 2], &v10[2 * v42 + 4], 16 * (v103 - v42));
      v10[2] = v103 - 1;
      v42 = v103 - 1;
      if (v103 <= 2)
        goto LABEL_102;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    return;
  }
  v107 = v5;
  v8 = 0;
  v9 = *a1;
  v105 = *a1 + 40;
  v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    v11 = v8++;
    v110 = v11;
    if (v8 < v3)
    {
      v12 = (uint64_t *)(v9 + 16 * v8);
      v14 = *v12;
      v13 = v12[1];
      v15 = (uint64_t *)(v9 + 16 * v11);
      v17 = *v15;
      v16 = v15[1];
      v115 = v14;
      v116 = v13;
      v113 = v17;
      v114 = v16;
      v18 = sub_100010CC8();
      v19 = StringProtocol.localizedStandardCompare<A>(_:)(&v113, &type metadata for String, &type metadata for String, v18, v18);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v20 = (uint64_t *)(v105 + 16 * v11);
        while (1)
        {
          v21 = *v20;
          v22 = *(v20 - 3);
          v23 = *(v20 - 2);
          v115 = *(v20 - 1);
          v116 = v21;
          v113 = v22;
          v114 = v23;
          if ((v19 == -1) == (StringProtocol.localizedStandardCompare<A>(_:)(&v113, &type metadata for String, &type metadata for String, v18, v18) != -1))break;
          v20 += 2;
          if (++v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v19 == -1)
      {
        if (v8 < v11)
          goto LABEL_130;
        if (v11 < v8)
        {
          v24 = 16 * v8;
          v25 = 16 * v11;
          v26 = v8;
          v27 = v11;
          do
          {
            if (v27 != --v26)
            {
              if (!v9)
                goto LABEL_134;
              v28 = v9 + v24;
              v29 = *(_QWORD *)(v9 + v25);
              v30 = *(_QWORD *)(v9 + v25 + 8);
              *(_OWORD *)(v9 + v25) = *(_OWORD *)(v9 + v24 - 16);
              *(_QWORD *)(v28 - 16) = v29;
              *(_QWORD *)(v28 - 8) = v30;
            }
            ++v27;
            v24 -= 16;
            v25 += 16;
          }
          while (v27 < v26);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_125;
      if (v8 - v11 < v107)
      {
        if (__OFADD__(v11, v107))
          goto LABEL_128;
        if (v11 + v107 >= v3)
          v31 = v3;
        else
          v31 = v11 + v107;
        if (v31 < v11)
          goto LABEL_129;
        if (v8 != v31)
        {
          v32 = sub_100010CC8();
          v33 = (_QWORD *)(v9 + 16 * v8);
          do
          {
            v34 = (uint64_t *)(v9 + 16 * v8);
            v35 = *v34;
            v36 = v34[1];
            v37 = v11;
            v38 = v33;
            do
            {
              v39 = *(v38 - 2);
              v40 = *(v38 - 1);
              v115 = v35;
              v116 = v36;
              v113 = v39;
              v114 = v40;
              if (StringProtocol.localizedStandardCompare<A>(_:)(&v113, &type metadata for String, &type metadata for String, v32, v32) != -1)break;
              if (!v9)
                goto LABEL_132;
              v35 = *v38;
              v36 = v38[1];
              *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
              *(v38 - 1) = v36;
              *(v38 - 2) = v35;
              v38 -= 2;
              ++v37;
            }
            while (v8 != v37);
            ++v8;
            v33 += 2;
            v11 = v110;
          }
          while (v8 != v31);
          v8 = v31;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_124;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_10006C984();
      v10 = v95;
    }
    v41 = v10[2];
    v42 = v41 + 1;
    if (v41 >= v10[3] >> 1)
    {
      sub_10006C984();
      v10 = v96;
    }
    v10[2] = v42;
    v111 = v10 + 4;
    v43 = &v10[2 * v41 + 4];
    *v43 = v11;
    v43[1] = v8;
    if (v41)
      break;
    v42 = 1;
LABEL_83:
    v3 = v109;
    if (v8 >= v109)
      goto LABEL_91;
  }
  v44 = v10 + 4;
  while (1)
  {
    v45 = v42 - 1;
    if (v42 >= 4)
    {
      v50 = &v44[2 * v42];
      v51 = *(v50 - 8);
      v52 = *(v50 - 7);
      v56 = __OFSUB__(v52, v51);
      v53 = v52 - v51;
      if (v56)
        goto LABEL_109;
      v55 = *(v50 - 6);
      v54 = *(v50 - 5);
      v56 = __OFSUB__(v54, v55);
      v48 = v54 - v55;
      v49 = v56;
      if (v56)
        goto LABEL_110;
      v57 = v42 - 2;
      v58 = &v44[2 * v42 - 4];
      v60 = *v58;
      v59 = v58[1];
      v56 = __OFSUB__(v59, v60);
      v61 = v59 - v60;
      if (v56)
        goto LABEL_111;
      v56 = __OFADD__(v48, v61);
      v62 = v48 + v61;
      if (v56)
        goto LABEL_113;
      if (v62 >= v53)
      {
        v80 = &v44[2 * v45];
        v82 = *v80;
        v81 = v80[1];
        v56 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v56)
          goto LABEL_119;
        v73 = v48 < v83;
        goto LABEL_72;
      }
    }
    else
    {
      if (v42 != 3)
      {
        v74 = v10[4];
        v75 = v10[5];
        v56 = __OFSUB__(v75, v74);
        v67 = v75 - v74;
        v68 = v56;
        goto LABEL_66;
      }
      v47 = v10[4];
      v46 = v10[5];
      v56 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      v49 = v56;
    }
    if ((v49 & 1) != 0)
      goto LABEL_112;
    v57 = v42 - 2;
    v63 = &v44[2 * v42 - 4];
    v65 = *v63;
    v64 = v63[1];
    v66 = __OFSUB__(v64, v65);
    v67 = v64 - v65;
    v68 = v66;
    if (v66)
      goto LABEL_114;
    v69 = &v44[2 * v45];
    v71 = *v69;
    v70 = v69[1];
    v56 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v56)
      goto LABEL_116;
    if (__OFADD__(v67, v72))
      goto LABEL_118;
    if (v67 + v72 >= v48)
    {
      v73 = v48 < v72;
LABEL_72:
      if (v73)
        v45 = v57;
      goto LABEL_74;
    }
LABEL_66:
    if ((v68 & 1) != 0)
      goto LABEL_115;
    v76 = &v44[2 * v45];
    v78 = *v76;
    v77 = v76[1];
    v56 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if (v56)
      goto LABEL_117;
    if (v79 < v67)
      goto LABEL_83;
LABEL_74:
    v84 = v45 - 1;
    if (v45 - 1 >= v42)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    v85 = v9;
    if (!v9)
      goto LABEL_133;
    v86 = v10;
    v87 = &v44[2 * v84];
    v88 = v44;
    v89 = *v87;
    v90 = &v88[2 * v45];
    v91 = v90[1];
    v92 = v85;
    v93 = v117;
    sub_100199CE4((char *)(v85 + 16 * *v87), (char *)(v85 + 16 * *v90), v85 + 16 * v91, v112);
    v117 = v93;
    if (v93)
      break;
    if (v91 < v89)
      goto LABEL_106;
    if (v45 > v86[2])
      goto LABEL_107;
    *v87 = v89;
    v44 = v111;
    v111[2 * v84 + 1] = v91;
    v94 = v86[2];
    if (v45 >= v94)
      goto LABEL_108;
    v10 = v86;
    v42 = v94 - 1;
    memmove(v90, v90 + 2, 16 * (v94 - 1 - v45));
    v86[2] = v94 - 1;
    v9 = v92;
    if (v94 <= 2)
      goto LABEL_83;
  }
LABEL_88:
  swift_bridgeObjectRelease();
  if (v109 < -1)
    goto LABEL_127;
  *(_QWORD *)(v108 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_100199BF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  uint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = sub_100010CC8();
    v7 = (_QWORD *)(v5 + 16 * v4);
    while (2)
    {
      v8 = (uint64_t *)(v5 + 16 * v4);
      v9 = *v8;
      v10 = v8[1];
      v11 = v17;
      v12 = v7;
      do
      {
        v13 = *(v12 - 2);
        v14 = *(v12 - 1);
        v16[2] = v9;
        v16[3] = v10;
        v16[0] = v13;
        v16[1] = v14;
        result = StringProtocol.localizedStandardCompare<A>(_:)(v16, &type metadata for String, &type metadata for String, v6, v6);
        if (result != -1)
          break;
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v9 = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = v9;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v7 += 2;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100199CE4(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_100078BF0(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_13;
    v36 = sub_100010CC8();
    v23 = (char *)(a3 - 16);
    while (1)
    {
      v24 = v23 + 16;
      v25 = *(_QWORD *)(v12 - 8);
      v26 = *((_QWORD *)v6 - 2);
      v27 = *((_QWORD *)v6 - 1);
      v28 = v6 - 16;
      v34 = *(_QWORD *)(v12 - 16);
      v35 = v25;
      v32 = v26;
      v33 = v27;
      if (StringProtocol.localizedStandardCompare<A>(_:)(&v32, &type metadata for String, &type metadata for String, v36, v36) == -1)
      {
        v31 = v24 != v6 || v23 >= v6;
        v6 -= 16;
        if (!v31)
          goto LABEL_33;
      }
      else
      {
        v29 = v24 != (char *)v12 || (unint64_t)v23 >= v12;
        v28 = (char *)(v12 - 16);
        v12 -= 16;
        if (!v29)
          goto LABEL_33;
      }
      *(_OWORD *)v23 = *(_OWORD *)v28;
LABEL_33:
      v23 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_13;
    }
  }
  sub_100078BF0(a1, (a2 - a1) / 16, a4);
  v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    v16 = sub_100010CC8();
    while (1)
    {
      v17 = *((_QWORD *)v6 + 1);
      v18 = *(_QWORD *)v4;
      v19 = *((_QWORD *)v4 + 1);
      v34 = *(_QWORD *)v6;
      v35 = v17;
      v32 = v18;
      v33 = v19;
      if (StringProtocol.localizedStandardCompare<A>(_:)(&v32, &type metadata for String, &type metadata for String, v16, v16) == -1)break;
      v20 = v4;
      v21 = v7 == v4;
      v4 += 16;
      if (!v21)
        goto LABEL_16;
LABEL_17:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_7;
    }
    v20 = v6;
    v21 = v7 == v6;
    v6 += 16;
    if (v21)
      goto LABEL_17;
LABEL_16:
    *(_OWORD *)v7 = *(_OWORD *)v20;
    goto LABEL_17;
  }
LABEL_7:
  v6 = v7;
LABEL_13:
  sub_100078BF0(v4, (uint64_t)(v12 - (_QWORD)v4) / 16, v6);
  return 1;
}

void *sub_100199EDC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _BYTE v57[16];
  _QWORD v58[9];

  v4 = a4;
  if (a3)
  {
    v5 = a3;
    if (*(_QWORD *)(a4 + 16) != a3)
    {
      sub_1000055B0(&qword_1002B2400);
      v55 = static _SetStorage.allocate(capacity:)(v5);
      if (a2 < 1)
        v6 = 0;
      else
        v6 = *a1;
      v7 = 0;
      v45 = v55 + 56;
      v44 = v4;
      while (1)
      {
        v54 = v5;
        if (v6)
        {
          v46 = (v6 - 1) & v6;
          v47 = v7;
          v8 = __clz(__rbit64(v6)) | (v7 << 6);
        }
        else
        {
          if (__OFADD__(v7, 1))
            goto LABEL_44;
          sub_10019DE58();
          if (v10 == v11)
          {
LABEL_40:
            sub_10002645C();
            return (void *)v55;
          }
          if (!a1[v9])
          {
            sub_1000E1598();
            if (v10 == v11)
              goto LABEL_40;
            sub_1000E158C();
            if (!v12)
            {
              sub_1000E1598();
              if (v10 == v11)
                goto LABEL_40;
              sub_1000E158C();
              if (!v13)
              {
                sub_10019DE58();
                if (v10 == v11)
                  goto LABEL_40;
                sub_10019E088();
                if (!v15)
                {
                  while (!__OFADD__(v14, 1))
                  {
                    sub_1000E1598();
                    if (v10 == v11)
                      goto LABEL_40;
                    v14 = v16 + 1;
                    if (a1[v17])
                      goto LABEL_28;
                  }
                  goto LABEL_45;
                }
              }
            }
          }
LABEL_28:
          sub_10019DDB8();
          v46 = v18;
          v47 = v19;
          v8 = v20 + (v19 << 6);
        }
        v21 = (char *)(*(_QWORD *)(v4 + 48) + 16 * v8);
        v22 = *v21;
        v56 = v21[2];
        v23 = v21[3];
        v51 = v21[4];
        v52 = v21[1];
        v24 = v21[5];
        v25 = v21[7];
        v50 = v21[8];
        v26 = v21[9];
        v27 = v21[10];
        v28 = v21[11];
        v48 = v21[6];
        v49 = v21[12];
        v29 = v21[13];
        v53 = v21[14];
        v30 = v21[15];
        Hasher.init(_seed:)(v58, *(_QWORD *)(v55 + 40));
        v57[0] = v22;
        v57[1] = v52;
        v57[2] = v56;
        v57[3] = v23;
        v57[4] = v51;
        v57[5] = v24;
        v57[6] = v48;
        v57[7] = v25;
        v57[8] = v50;
        v57[9] = v26;
        v57[10] = v27;
        v57[11] = v28;
        v57[12] = v49;
        v57[13] = v29;
        v57[14] = v53;
        v57[15] = v30;
        Hasher.combine(bytes:)(v57, v58);
        v31 = Hasher._finalize()();
        v32 = -1 << *(_BYTE *)(v55 + 32);
        v33 = v31 & ~v32;
        v34 = v33 >> 6;
        if (((-1 << v33) & ~*(_QWORD *)(v45 + 8 * (v33 >> 6))) != 0)
        {
          v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v45 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_38;
        }
        v36 = 0;
        v37 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
          }
          v38 = v34 == v37;
          if (v34 == v37)
            v34 = 0;
          v36 |= v38;
          v39 = *(_QWORD *)(v45 + 8 * v34);
        }
        while (v39 == -1);
        v35 = __clz(__rbit64(~v39)) + (v34 << 6);
LABEL_38:
        *(_QWORD *)(v45 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        v40 = (_BYTE *)(*(_QWORD *)(v55 + 48) + 16 * v35);
        *v40 = v22;
        v40[1] = v52;
        v40[2] = v56;
        v40[3] = v23;
        v40[4] = v51;
        v40[5] = v24;
        v40[6] = v48;
        v40[7] = v25;
        v40[8] = v50;
        v40[9] = v26;
        v40[10] = v27;
        v40[11] = v28;
        v40[12] = v49;
        v40[13] = v29;
        v40[14] = v53;
        v40[15] = v30;
        ++*(_QWORD *)(v55 + 16);
        v5 = v54 - 1;
        if (__OFSUB__(v54, 1))
          goto LABEL_43;
        v4 = v44;
        v6 = v46;
        v7 = v47;
        if (v54 == 1)
          goto LABEL_40;
      }
    }
    return (void *)a4;
  }
  else
  {
    sub_10002645C();
    return &_swiftEmptySetSingleton;
  }
}

void sub_10019A2D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[9];

  v8 = type metadata accessor for HIDUniversalSenderID(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
LABEL_36:
    swift_release();
    return;
  }
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    sub_1000055B0(&qword_1002B2490);
    v11 = static _SetStorage.allocate(capacity:)(a3);
    v12 = v11;
    v32 = a1;
    v33 = a2;
    if (a2 < 1)
      v13 = 0;
    else
      v13 = *a1;
    v14 = 0;
    v15 = v11 + 56;
    while (1)
    {
      if (v13)
      {
        v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_39;
        if (v18 >= v33)
          goto LABEL_36;
        v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_36;
          v19 = v32[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v33)
              goto LABEL_36;
            v19 = v32[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v33)
                goto LABEL_36;
              v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    break;
                  if (v14 >= v33)
                    goto LABEL_36;
                  v19 = v32[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_24;
                }
LABEL_40:
                __break(1u);
                return;
              }
              v14 = v20;
            }
          }
        }
LABEL_24:
        v13 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(v34 + 72);
      sub_100022838(*(_QWORD *)(a4 + 48) + v21 * v17, (uint64_t)v10, type metadata accessor for HIDUniversalSenderID);
      Hasher.init(_seed:)(v35, *(_QWORD *)(v12 + 40));
      HIDUniversalSenderID.hash(into:)((uint64_t)v35);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v12 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6))) == 0)
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v25);
          if (v30 != -1)
          {
            v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
      *(_QWORD *)(v15 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      sub_100025588((uint64_t)v10, *(_QWORD *)(v12 + 48) + v26 * v21, type metadata accessor for HIDUniversalSenderID);
      ++*(_QWORD *)(v12 + 16);
      if (__OFSUB__(a3--, 1))
        goto LABEL_38;
      if (!a3)
        goto LABEL_36;
    }
  }
}

uint64_t sub_10019A5B0(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v6, v8);
    v9 = sub_10019B558((uint64_t)v8, v6, v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (_QWORD *)swift_slowAlloc(v7, -1);
    sub_1001194A8(0, v6, v10);
    v2 = sub_10019B558((uint64_t)v10, v6, v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

void sub_10019A70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[17];

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v5 = a1 + 56;
  sub_10019DC8C();
  swift_bridgeObjectRetain(v6);
  v7 = 0;
  if (!v3)
    goto LABEL_4;
LABEL_3:
  sub_10006D328();
  while (1)
  {
    sub_10019ACB4(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8 + 8), (uint64_t)v11);
    if (v3)
      goto LABEL_3;
LABEL_4:
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v2)
      goto LABEL_22;
    ++v7;
    if (!*(_QWORD *)(v5 + 8 * v9))
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v2)
        goto LABEL_22;
      if (!*(_QWORD *)(v5 + 8 * v7))
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v2)
          goto LABEL_22;
        if (!*(_QWORD *)(v5 + 8 * v7))
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v2)
            goto LABEL_22;
          if (!*(_QWORD *)(v5 + 8 * v7))
            break;
        }
      }
    }
LABEL_19:
    sub_10006D310();
  }
  v10 = v9 + 4;
  if (v10 >= v2)
  {
LABEL_22:
    swift_release();
    return;
  }
  if (*(_QWORD *)(v5 + 8 * v10))
  {
    v7 = v10;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v2)
      goto LABEL_22;
    ++v10;
    if (*(_QWORD *)(v5 + 8 * v7))
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
}

void sub_10019A844()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = sub_10000E440();
  sub_10003B160();
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  v12 = *(_QWORD *)(*v2 + 40);
  sub_100021264(&qword_1002AD0B0, 255, v13);
  v15 = v14;
  swift_bridgeObjectRetain();
  v36 = v4;
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v7, v15);
  v17 = -1 << *(_BYTE *)(v11 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v11 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v33 = v2;
    v34 = v6;
    v19 = ~v17;
    v20 = *(_QWORD *)(v1 + 72);
    v35 = v1;
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    while (1)
    {
      v21(v10, *(_QWORD *)(v11 + 48) + v20 * v18, v7);
      sub_100021264((unint64_t *)&qword_1002A9370, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v36, v7, v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v7);
      if ((v23 & 1) != 0)
        break;
      v18 = (v18 + 1) & v19;
      sub_10019E074();
      if ((v24 & 1) == 0)
        goto LABEL_5;
    }
    sub_10000E4A0();
    v25 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
    v27 = *v25;
    v37 = *v25;
    *v25 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10011EEB4();
      v27 = v37;
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 32))(v34, *(_QWORD *)(v27 + 48) + v20 * v18, v7);
    sub_10019AEF4(v18);
    sub_10019E158(v37);
  }
  else
  {
LABEL_5:
    sub_10000E4A0();
  }
  sub_10019DEBC();
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v28, v29, v30, v31);
  sub_10000E4E0();
}

uint64_t sub_10019AA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  char v6;
  char v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE v41[16];
  uint64_t v42[9];

  v6 = a4;
  v7 = a3;
  v10 = a3 >> 8;
  v11 = a3 >> 16;
  v12 = a3 >> 24;
  v13 = HIDWORD(a3);
  v31 = a3 >> 40;
  v32 = HIWORD(a3);
  v33 = HIBYTE(a3);
  v34 = a4 >> 8;
  v35 = a4 >> 16;
  v36 = a4 >> 24;
  v37 = HIDWORD(a4);
  v38 = a4 >> 40;
  v39 = HIWORD(a4);
  v40 = HIBYTE(a4);
  v14 = *v5;
  Hasher.init(_seed:)(v42, *(_QWORD *)(*v5 + 40));
  sub_10002D9F8();
  swift_bridgeObjectRetain();
  String.hash(into:)(v42, a1, a2);
  sub_1000267C4();
  v41[0] = v7;
  v41[1] = v10;
  v41[2] = v11;
  v41[3] = v12;
  v41[4] = v13;
  v41[5] = v31;
  v41[6] = v32;
  v41[7] = v33;
  v41[8] = v6;
  v41[9] = v34;
  v41[10] = v35;
  v41[11] = v36;
  v41[12] = v37;
  v41[13] = v38;
  v41[14] = v39;
  v41[15] = v40;
  Hasher.combine(bytes:)(v41, v42);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v18 = ~v16;
    while (1)
    {
      v19 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 32 * v17);
      v20 = v19[1];
      v21 = v19[2];
      v22 = v19[3];
      v23 = *v19 == a1 && v20 == a2;
      if ((v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a1, a2, 0) & 1) != 0)
        && !sub_1000B231C(v21, v22))
      {
        break;
      }
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_10;
    }
    sub_10002D89C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
    v26 = *v29;
    v42[0] = *v29;
    *v29 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10011F070();
      v26 = v42[0];
    }
    v27 = *(_QWORD *)(v26 + 48) + 32 * v17;
    v28 = *(_QWORD *)(v27 + 8);
    *(_QWORD *)a5 = *(_QWORD *)v27;
    *(_QWORD *)(a5 + 8) = v28;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)(v27 + 16);
    sub_10019B16C(v17);
    return sub_10019E158(v42[0]);
  }
  else
  {
LABEL_10:
    result = sub_10002D89C();
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

Swift::Int sub_10019ACB4@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE v32[16];
  _QWORD v33[9];

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v8 = a1 >> 24;
  v9 = HIDWORD(a1);
  v10 = a1 >> 40;
  v11 = HIWORD(a1);
  v24 = HIBYTE(a1);
  v25 = a2 >> 8;
  v26 = a2 >> 16;
  v27 = a2 >> 24;
  v28 = HIDWORD(a2);
  v29 = a2 >> 40;
  v30 = HIWORD(a2);
  v31 = HIBYTE(a2);
  v12 = *v3;
  Hasher.init(_seed:)(v33, *(_QWORD *)(*v3 + 40));
  v32[0] = v5;
  v32[1] = v6;
  v32[2] = v7;
  v32[3] = v8;
  v32[4] = v9;
  v32[5] = v10;
  v32[6] = v11;
  v32[7] = v24;
  v32[8] = v4;
  v32[9] = v25;
  v32[10] = v26;
  v32[11] = v27;
  v32[12] = v28;
  v32[13] = v29;
  v32[14] = v30;
  v32[15] = v31;
  Hasher.combine(bytes:)(v32, v33);
  result = Hasher._finalize()();
  v14 = result & ~(-1 << *(_BYTE *)(v12 + 32));
  if (((*(_QWORD *)(v12 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v15 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v14);
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v12);
  if (sub_1000B231C(v16, v17))
  {
    while (1)
    {
      sub_10019E0F0();
      if (((*(_QWORD *)(v12 + 56 + v18) >> v14) & 1) == 0)
        break;
      if (!sub_1000B231C(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v14), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v14 + 8)))goto LABEL_5;
    }
    result = sub_1000267C4();
    goto LABEL_9;
  }
LABEL_5:
  sub_1000267C4();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
  v20 = *v22;
  v33[0] = *v22;
  *v22 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10011F380();
    v20 = v33[0];
  }
  *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v14);
  sub_10019B380(v14);
  v21 = *v22;
  *v22 = v33[0];
  result = swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void sub_10019AEF4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v31 = v1;
    v10 = ~v8;
    swift_retain();
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    v33 = v7;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11 + 1) & v10;
      v13 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      while (1)
      {
        v14 = v13 * v9;
        v32(v5, *(_QWORD *)(v6 + 48) + v13 * v9, v3);
        v15 = *(_QWORD *)(v6 + 40);
        sub_100021264(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v3, v16);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v3);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 < v12 || a1 < (uint64_t)v18)
            goto LABEL_24;
        }
        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_24;
        }
        v21 = *(_QWORD *)(v6 + 48);
        v22 = v13 * a1;
        v23 = v21 + v13 * a1;
        v24 = v21 + v14;
        v25 = v21 + v14 + v13;
        if (v13 * a1 < v14 || v23 >= v25)
          break;
        a1 = v9;
        if (v22 != v14)
        {
          swift_arrayInitWithTakeBackToFront(v23, v24, 1, v3);
          goto LABEL_23;
        }
LABEL_24:
        v9 = (v9 + 1) & v10;
        if (((*(_QWORD *)(v33 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_25;
      }
      swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v3);
LABEL_23:
      a1 = v9;
      goto LABEL_24;
    }
LABEL_25:
    *(_QWORD *)(v33 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v1 = v31;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
}

unint64_t sub_10019B16C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48) + 32 * v6;
        v11 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(v10 + 8);
        v25 = *(_OWORD *)(v10 + 16);
        Hasher.init(_seed:)(v27, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v26 = v25;
        Hasher.combine(bytes:)(&v26, v27);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_OWORD *)(v17 + 32 * v2);
            v19 = (_OWORD *)(v17 + 32 * v6);
            v20 = v2 != v6 || v18 >= v19 + 2;
            v2 = v6;
            if (v20)
            {
              v21 = v19[1];
              *v18 = *v19;
              v18[1] = v21;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v22 = *(_QWORD *)(v3 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
    __break(1u);
  *(_QWORD *)(v3 + 16) = v24;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_10019B380(unint64_t result)
{
  uint64_t *v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    sub_10002D790();
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v20 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)(v22, *(_QWORD *)(v3 + 40));
        v21 = v20;
        Hasher.combine(bytes:)(&v21, v22);
        v10 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_15:
            v13 = *(_QWORD *)(v3 + 48);
            v14 = (_OWORD *)(v13 + 16 * v2);
            v15 = (_OWORD *)(v13 + 16 * v6);
            v16 = v2 != v6 || v14 >= v15 + 1;
            v2 = v6;
            if (v16)
            {
              *v14 = *v15;
              v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = sub_10002645C();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
    __break(1u);
  *(_QWORD *)(v3 + 16) = v19;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

uint64_t sub_10019B558(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v3 = (uint64_t *)result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (uint64_t)sub_100083594(v3, a2, v4);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (uint64_t)sub_100083594(v3, a2, v4);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (uint64_t)sub_100083594(v3, a2, v4);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    result = sub_1000B64C8();
    if ((result & 1) != 0)
    {
      *(uint64_t *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (uint64_t)sub_100083594(v3, a2, v4);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (uint64_t)sub_100083594(v3, a2, v4);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (uint64_t)sub_100083594(v3, a2, v4);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_10019B6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  void *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _BYTE v61[16];
  _QWORD v62[4];
  uint64_t v63[5];

  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v2 = *(_QWORD *)(a1 + 56);
  v38 = a1 + 56;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  v36 = ~v3;
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v56 = v4 & v2;
  v37 = (unint64_t)(63 - v3) >> 6;
  v39 = v62;
  v59 = (char *)(a2 + 56);
  v60 = a2;
  v40 = a1;
  swift_bridgeObjectRetain(a1);
  v50 = 0;
  while (1)
  {
    do
    {
      if (v56)
      {
        v5 = __clz(__rbit64(v56));
        v56 &= v56 - 1;
        v6 = v5 | (v50 << 6);
        v7 = v60;
      }
      else
      {
        v8 = v50 + 1;
        v7 = v60;
        if (__OFADD__(v50, 1))
        {
          __break(1u);
          goto LABEL_39;
        }
        if (v8 >= v37)
          goto LABEL_36;
        v9 = *(_QWORD *)(v38 + 8 * v8);
        v10 = v50 + 1;
        if (!v9)
        {
          v10 = v50 + 2;
          if (v50 + 2 >= v37)
            goto LABEL_36;
          v9 = *(_QWORD *)(v38 + 8 * v10);
          if (!v9)
          {
            v10 = v50 + 3;
            if (v50 + 3 >= v37)
              goto LABEL_36;
            v9 = *(_QWORD *)(v38 + 8 * v10);
            if (!v9)
            {
              v10 = v50 + 4;
              if (v50 + 4 >= v37)
                goto LABEL_36;
              v9 = *(_QWORD *)(v38 + 8 * v10);
              if (!v9)
              {
                v11 = v50 + 5;
                if (v50 + 5 >= v37)
                {
LABEL_36:
                  sub_10005E1F4(v40);
                  return (void *)v60;
                }
                v9 = *(_QWORD *)(v38 + 8 * v11);
                if (!v9)
                {
                  while (1)
                  {
                    v10 = v11 + 1;
                    if (__OFADD__(v11, 1))
                      break;
                    if (v10 >= v37)
                      goto LABEL_36;
                    v9 = *(_QWORD *)(v38 + 8 * v10);
                    ++v11;
                    if (v9)
                      goto LABEL_23;
                  }
LABEL_39:
                  __break(1u);
                }
                v10 = v50 + 5;
              }
            }
          }
        }
LABEL_23:
        v56 = (v9 - 1) & v9;
        v6 = __clz(__rbit64(v9)) + (v10 << 6);
        v50 = v10;
      }
      v12 = (unsigned __int8 *)(*(_QWORD *)(v40 + 48) + 16 * v6);
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[2];
      v54 = v12[3];
      v55 = v12[4];
      v51 = v12[5];
      v57 = v12[6];
      v58 = v12[7];
      v16 = v12[8];
      v17 = v12[9];
      v18 = v12[10];
      v19 = v12[11];
      v53 = v12[12];
      v20 = v12[13];
      v52 = v12[14];
      v21 = v12[15];
      Hasher.init(_seed:)(v62, *(_QWORD *)(v7 + 40));
      v49 = v13;
      v61[0] = v13;
      v48 = v14;
      v61[1] = v14;
      v47 = v15;
      v61[2] = v15;
      v61[3] = v54;
      v61[4] = v55;
      v61[5] = v51;
      v61[6] = v57;
      v61[7] = v58;
      v45 = v16;
      v61[8] = v16;
      v43 = v17;
      v61[9] = v17;
      v46 = v18;
      v61[10] = v18;
      v44 = v19;
      v61[11] = v19;
      v61[12] = v53;
      v42 = v20;
      v61[13] = v20;
      v61[14] = v52;
      v41 = v21;
      v61[15] = v21;
      Hasher.combine(bytes:)(v61, v39);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
    }
    while (((*(_QWORD *)&v59[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) == 0);
    isStackAllocationSafe = static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v24), *(_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v24 + 8));
    if (!isStackAllocationSafe)
      break;
    v26 = ~v23;
    while (1)
    {
      v24 = (v24 + 1) & v26;
      if (((*(_QWORD *)&v59[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) == 0)
        break;
      v27 = v60;
      isStackAllocationSafe = static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v24), *(_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v24 + 8));
      if (!isStackAllocationSafe)
        goto LABEL_29;
    }
  }
  v27 = v60;
LABEL_29:
  v63[0] = v40;
  v63[1] = v38;
  v63[2] = v36;
  v63[3] = v50;
  v63[4] = v56;
  v28 = *(_BYTE *)(v27 + 32);
  v29 = v28 & 0x3F;
  v30 = (1 << v28) + 63;
  v31 = v30 >> 6;
  v32 = 8 * (v30 >> 6);
  if (v29 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v30 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v32);
    v33 = sub_10019C3C0((unint64_t *)((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0)), v31, v27, v24, v63);
    swift_release();
    sub_10005E1F4(v63[0]);
  }
  else
  {
    v35 = (void *)swift_slowAlloc(v32, -1);
    memcpy(v35, v59, v32);
    v33 = sub_10019C3C0((unint64_t *)v35, v31, v27, v24, v63);
    swift_release();
    sub_10005E1F4(v63[0]);
    swift_slowDealloc(v35, -1, -1);
  }
  return v33;
}

void sub_10019BD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  _QWORD v51[9];
  uint64_t v52;
  uint64_t v53;

  sub_10002626C();
  v2 = v1;
  if (!*(_QWORD *)(v1 + 16))
  {
    sub_10005FF18();
    goto LABEL_18;
  }
  v52 = v0;
  v39 = *(_QWORD *)(v0 + 16);
  if (!v39)
    goto LABEL_18;
  v41 = v0 + 32;
  v38 = v0;
  swift_bridgeObjectRetain(v0);
  v3 = 0;
  v40 = v2 + 56;
  while (1)
  {
    v4 = (char *)(v41 + 16 * v3);
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[2];
    v8 = v4[3];
    v45 = v4[4];
    v47 = v4[5];
    v48 = v4[6];
    v49 = v4[7];
    v9 = v4[8];
    v10 = v4[9];
    v44 = v4[10];
    v11 = v4[11];
    v43 = v4[12];
    v12 = v4[13];
    v42 = v4[14];
    v13 = v2;
    v14 = v4[15];
    v46 = v3 + 1;
    Hasher.init(_seed:)(v51, *(_QWORD *)(v13 + 40));
    v50[0] = v5;
    v50[1] = v6;
    v50[2] = v7;
    v50[3] = v8;
    v50[4] = v45;
    v50[5] = v47;
    v50[6] = v48;
    v50[7] = v49;
    sub_10016AE78(v9);
    v50[8] = v15;
    v50[9] = v10;
    v50[10] = v44;
    v50[11] = v11;
    v50[12] = v43;
    v50[13] = v12;
    v50[14] = v42;
    v50[15] = v14;
    v2 = v13;
    Hasher.combine(bytes:)(v50, v51);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v13 + 32);
    v18 = v16 & ~v17;
    sub_10019DDA4();
    if ((v19 & 1) != 0)
      break;
LABEL_9:
    v3 = v46;
    if (v46 == v39)
    {
      swift_bridgeObjectRelease(v38);
      goto LABEL_18;
    }
  }
  sub_10019DEE8();
  sub_10019E0E4();
  v22 = (void *)(v20 | (v21 << 16) | (v8 << 24) | (v45 << 32) | (v47 << 40) | (v48 << 48) | (v49 << 56));
  sub_10019E014();
  if (sub_10019DF74(v23, v24))
  {
    do
    {
      v18 = (v18 + 1) & ~v17;
      sub_10019DDA4();
      if ((v25 & 1) == 0)
        goto LABEL_9;
    }
    while (sub_10019DF74(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v18), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v18 + 8)));
  }
  v53 = v46;
  sub_10019DE20();
  if (v27 < 0xE || (v26 = sub_10019E110(), (_DWORD)v26))
  {
    v28 = __chkstk_darwin(v26);
    sub_10019DC2C(v28, v29, v30, v31, v32, v33, v34, v35, v37);
    sub_10019DCEC();
    v36 = sub_10005FF18();
    if (!v40)
    {
      swift_bridgeObjectRelease(v52);
      goto LABEL_18;
    }
    sub_10019E0C4(v36);
    sub_1000B9B84();
    __break(1u);
LABEL_20:
    sub_10005FF90();
    sub_100007958((uint64_t)v22);
    __break(1u);
  }
  else
  {
    v22 = (void *)sub_10000797C(v17);
    sub_10019DD38(v22);
    sub_10019DCEC();
    sub_10005FF18();
    if (v40)
      goto LABEL_20;
    swift_bridgeObjectRelease(v52);
    sub_100007958((uint64_t)v22);
LABEL_18:
    sub_10000E4E0();
  }
}

void sub_10019C138()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[9];
  uint64_t v35;
  unint64_t v36;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for HIDUniversalSenderID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  if (!v1[2])
  {
    sub_10002645C();
    goto LABEL_18;
  }
  v35 = v3;
  v11 = *(_QWORD *)(v3 + 16);
  sub_100040544();
  if (!v11)
  {
LABEL_10:
    sub_10000E568();
LABEL_18:
    sub_10000E4E0();
    return;
  }
  v12 = 0;
  v32 = v5;
  while (1)
  {
    if (v12 >= v11)
      __break(1u);
    v13 = *(_QWORD *)(v5 + 72);
    v33 = v12 + 1;
    sub_100022838(v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v13 * v12, (uint64_t)v10, type metadata accessor for HIDUniversalSenderID);
    Hasher.init(_seed:)(v34, v1[5]);
    HIDUniversalSenderID.hash(into:)((uint64_t)v34);
    Hasher._finalize()();
    sub_10019DF04();
    v16 = v15 & ~v14;
    if (((*(_QWORD *)((char *)v1 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v16) & 1) != 0)
      break;
LABEL_9:
    sub_100184294((uint64_t)v10, type metadata accessor for HIDUniversalSenderID);
    v11 = *(_QWORD *)(v3 + 16);
    v5 = v32;
    v12 = v33;
    if (v33 == v11)
      goto LABEL_10;
  }
  v17 = ~v14;
  while (1)
  {
    sub_100022838(v1[6] + v16 * v13, (uint64_t)v8, type metadata accessor for HIDUniversalSenderID);
    v18 = static HIDUniversalSenderID.__derived_struct_equals(_:_:)((uint64_t)v8, (uint64_t)v10);
    sub_100184294((uint64_t)v8, type metadata accessor for HIDUniversalSenderID);
    if (v18)
      break;
    v16 = (v16 + 1) & v17;
    sub_10019DDA4();
    if ((v19 & 1) == 0)
      goto LABEL_9;
  }
  v36 = v33;
  sub_100184294((uint64_t)v10, type metadata accessor for HIDUniversalSenderID);
  sub_10019DE20();
  if (v21 <= 0xD || (v20 = sub_10019E110(), (_DWORD)v20))
  {
    v22 = __chkstk_darwin(v20);
    sub_10019DC2C(v22, v23, v24, v25, v26, v27, v28, v29, v31);
    sub_10019DCD0();
    v30 = sub_10002645C();
    if (v1 == (_QWORD *)-56)
    {
      swift_bridgeObjectRelease(v35);
      goto LABEL_18;
    }
    sub_10019E0C4(v30);
    sub_1000B9B84();
    __break(1u);
  }
  else
  {
    v10 = (char *)sub_10000797C((uint64_t)v8);
    sub_10019DD38(v10);
    sub_10019DCD0();
    sub_10002645C();
    if (v1 == (_QWORD *)-56)
    {
      swift_bridgeObjectRelease(v35);
      sub_100007958((uint64_t)v10);
      goto LABEL_18;
    }
  }
  sub_10005FF90();
  sub_100007958((uint64_t)v10);
  __break(1u);
}

void *sub_10019C3C0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  char *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v36;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  _BYTE v48[16];
  _QWORD v49[9];

  v5 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v6 = v5 - 1;
  v46 = a3 + 56;
LABEL_2:
  v36 = v6;
LABEL_3:
  v7 = a5[3];
  v8 = a5[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v7 << 6);
    goto LABEL_15;
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_36:
    __break(1u);
  }
  v12 = (unint64_t)(a5[2] + 64) >> 6;
  v13 = a5[3];
  if (v11 >= v12)
    goto LABEL_34;
  v14 = a5[1];
  v15 = *(_QWORD *)(v14 + 8 * v11);
  if (v15)
    goto LABEL_14;
  v16 = v7 + 2;
  v13 = v7 + 1;
  if (v7 + 2 >= v12)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 8 * v16);
  if (v15)
    goto LABEL_10;
  v13 = v7 + 2;
  if (v7 + 3 >= v12)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 8 * (v7 + 3));
  if (v15)
  {
    v11 = v7 + 3;
    goto LABEL_14;
  }
  v16 = v7 + 4;
  v13 = v7 + 3;
  if (v7 + 4 >= v12)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 8 * v16);
  if (v15)
  {
LABEL_10:
    v11 = v16;
    goto LABEL_14;
  }
  v11 = v7 + 5;
  v13 = v7 + 4;
  if (v7 + 5 >= v12)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 8 * v11);
  if (v15)
    goto LABEL_14;
  v33 = v7 + 6;
  while (v33 < v12)
  {
    v15 = *(_QWORD *)(v14 + 8 * v33++);
    if (v15)
    {
      v11 = v33 - 1;
LABEL_14:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v11 << 6);
      v7 = v11;
LABEL_15:
      v17 = (char *)(*(_QWORD *)(*a5 + 48) + 16 * v10);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = v17[3];
      v22 = v17[4];
      v42 = v17[5];
      v43 = v17[6];
      v44 = v17[7];
      v45 = v17[8];
      v23 = v17[9];
      v24 = v17[10];
      v41 = v17[11];
      v25 = v17[12];
      v26 = v17[14];
      v39 = v17[15];
      v40 = v17[13];
      a5[3] = v7;
      a5[4] = v9;
      Hasher.init(_seed:)(v49, *(_QWORD *)(a3 + 40));
      v48[0] = v18;
      v48[1] = v19;
      v48[2] = v20;
      v48[3] = v21;
      v48[4] = v22;
      v48[5] = v42;
      v48[6] = v43;
      v48[7] = v44;
      v48[8] = v45;
      v48[9] = v23;
      v48[10] = v24;
      v48[11] = v41;
      v48[12] = v25;
      v48[13] = v40;
      v48[14] = v26;
      v48[15] = v39;
      Hasher.combine(bytes:)(v48, v49);
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(a3 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      v31 = 1 << v29;
      if (((1 << v29) & *(_QWORD *)(v46 + 8 * (v29 >> 6))) == 0)
        goto LABEL_3;
      if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v29), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v29 + 8)))
      {
        do
        {
          v29 = (v29 + 1) & ~v28;
          if (((*(_QWORD *)(v46 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
            goto LABEL_3;
        }
        while (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v29), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v29 + 8)));
        v30 = v29 >> 6;
        v31 = 1 << v29;
      }
      v32 = a1[v30];
      a1[v30] = v32 & ~v31;
      if ((v31 & v32) == 0)
        goto LABEL_3;
      v6 = v36 - 1;
      if (__OFSUB__(v36, 1))
        goto LABEL_36;
      if (v36 == 1)
        return &_swiftEmptySetSingleton;
      goto LABEL_2;
    }
  }
  v13 = v12 - 1;
LABEL_34:
  a5[3] = v13;
  a5[4] = 0;
  swift_retain(a3);
  return sub_100199EDC(a1, a2, v36, a3);
}

void *sub_10019C7C8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  _QWORD v51[9];

  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v34 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_21:
    swift_retain(v5);
    return sub_100199EDC(a1, a2, v34, v5);
  }
  v35 = a5;
  v36 = a3 + 56;
  while (1)
  {
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    if (v7 >= v9)
      goto LABEL_24;
    v10 = (unsigned __int8 *)(v8 + 16 * v7);
    v11 = v10[32];
    v12 = v10[33];
    v13 = v10[34];
    v14 = v5;
    v15 = v10[35];
    v46 = v10[36];
    v47 = v10[37];
    v48 = v10[38];
    v49 = v10[39];
    v16 = v10[40];
    v17 = v10[41];
    v45 = v10[42];
    v18 = v10[43];
    v44 = v10[44];
    v19 = v10[45];
    v43 = v10[46];
    v20 = v10[47];
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v51, *(_QWORD *)(v14 + 40));
    v40 = v12;
    v41 = v11;
    v50[0] = v11;
    v50[1] = v12;
    v39 = v13;
    v50[2] = v13;
    v50[3] = v15;
    v50[4] = v46;
    v50[5] = v47;
    v50[6] = v48;
    v50[7] = v49;
    v38 = v16;
    v50[8] = v16;
    v50[9] = v17;
    v50[10] = v45;
    v50[11] = v18;
    v50[12] = v44;
    v50[13] = v19;
    v50[14] = v43;
    v37 = v20;
    v50[15] = v20;
    Hasher.combine(bytes:)(v50, v51);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(a3 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    v25 = 1 << v23;
    if (((1 << v23) & *(_QWORD *)(v36 + 8 * (v23 >> 6))) != 0)
      break;
    v5 = a3;
LABEL_15:
    a5 = v35;
LABEL_20:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_21;
  }
  v26 = v11 | (v40 << 8) | (v39 << 16) | (v15 << 24) | (v46 << 32) | (v47 << 40) | (v48 << 48) | (v49 << 56);
  v27 = v38 | (v17 << 8) | (v45 << 16) | (v18 << 24) | (v44 << 32) | (v19 << 40) | (v43 << 48) | (v37 << 56);
  if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v23), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v23 + 8), v41 | (v40 << 8) | (v39 << 16) | (v15 << 24) | (v46 << 32) | (v47 << 40) | (v48 << 48) | (v49 << 56), v27))
  {
    v5 = a3;
    goto LABEL_17;
  }
  v28 = (v23 + 1) & ~v22;
  if (((*(_QWORD *)(v36 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
  {
    v5 = a3;
    goto LABEL_15;
  }
  v5 = a3;
  while (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v28), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v28 + 8), v26, v27))
  {
    v28 = (v28 + 1) & ~v22;
    if (((*(_QWORD *)(v36 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      goto LABEL_15;
  }
  v24 = v28 >> 6;
  v25 = 1 << v28;
LABEL_17:
  a5 = v35;
  v29 = a1[v24];
  a1[v24] = v29 & ~v25;
  if ((v25 & v29) == 0)
    goto LABEL_20;
  v30 = v34 - 1;
  if (__OFSUB__(v34, 1))
    goto LABEL_25;
  --v34;
  if (v30)
    goto LABEL_20;
  return &_swiftEmptySetSingleton;
}

void sub_10019CB40(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD v43[9];
  uint64_t v44;

  v10 = type metadata accessor for HIDUniversalSenderID(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  v18 = (char *)&v37 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20);
  v39 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21 & ((-1 << a4) - 1);
  v22 = v19 - 1;
  v23 = *a5;
  v24 = a5[1];
  v25 = *(_QWORD *)(*a5 + 16);
  v38 = a2;
  v40 = v22;
  if (v24 == v25)
  {
LABEL_2:
    swift_retain(a3);
    sub_10019A2D4(v39, v38, v40, a3);
    return;
  }
  v44 = v16;
  v26 = a3 + 56;
  v41 = v15;
  v42 = a5;
  while (v24 < v25)
  {
    v27 = *(_QWORD *)(v15 + 72);
    v28 = v44;
    sub_100022838(v23 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)) + v27 * v24, v44, type metadata accessor for HIDUniversalSenderID);
    a5[1] = v24 + 1;
    sub_100025588(v28, (uint64_t)v18, type metadata accessor for HIDUniversalSenderID);
    Hasher.init(_seed:)(v43, *(_QWORD *)(a3 + 40));
    HIDUniversalSenderID.hash(into:)((uint64_t)v43);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(a3 + 32);
    v31 = v29 & ~v30;
    if (((*(_QWORD *)(v26 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
LABEL_9:
      sub_100184294((uint64_t)v18, type metadata accessor for HIDUniversalSenderID);
LABEL_10:
      v15 = v41;
      a5 = v42;
      goto LABEL_11;
    }
    v32 = ~v30;
    while (1)
    {
      sub_100022838(*(_QWORD *)(a3 + 48) + v31 * v27, (uint64_t)v13, type metadata accessor for HIDUniversalSenderID);
      v33 = static HIDUniversalSenderID.__derived_struct_equals(_:_:)((uint64_t)v13, (uint64_t)v18);
      sub_100184294((uint64_t)v13, type metadata accessor for HIDUniversalSenderID);
      if (v33)
        break;
      v31 = (v31 + 1) & v32;
      if (((*(_QWORD *)(v26 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        goto LABEL_9;
    }
    sub_100184294((uint64_t)v18, type metadata accessor for HIDUniversalSenderID);
    v34 = (v31 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v35 = *(unint64_t *)((char *)v39 + v34);
    *(unint64_t *)((char *)v39 + v34) = v35 & ~(1 << v31);
    if ((v35 & (1 << v31)) == 0)
      goto LABEL_10;
    v15 = v41;
    v36 = v40 - 1;
    a5 = v42;
    if (__OFSUB__(v40, 1))
      goto LABEL_18;
    --v40;
    if (!v36)
      return;
LABEL_11:
    v23 = *a5;
    v24 = a5[1];
    v25 = *(_QWORD *)(*a5 + 16);
    if (v24 == v25)
      goto LABEL_2;
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

uint64_t sub_10019CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019CE24(a1, a2, a3, (void (*)(uint64_t, _QWORD, uint64_t))sub_10006A3FC, (unint64_t *)&unk_1002B4A68, &qword_1002B4A60, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005DED8);
}

uint64_t sub_10019CE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019CE24(a1, a2, a3, (void (*)(uint64_t, _QWORD, uint64_t))sub_10006A4D0, (unint64_t *)&unk_1002B4A18, &qword_1002B4A10, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10005DF0C);
}

uint64_t sub_10019CE24(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD, __n128);
  uint64_t *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _BYTE v27[32];

  v13 = result;
  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    sub_1000103C0();
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    result = sub_10000E410();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      if (a3 < 0)
        v16 = a3;
      else
        v16 = a3 & 0xFFFFFFFFFFFFFF8;
      sub_1000103C0();
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      result = sub_10000E410();
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          sub_10002599C(a5, a6);
          v19 = v18;
          sub_1000103C0();
          for (i = 0; i != v15; ++i)
          {
            v21 = sub_1000055B0(a6);
            v22 = (void (*)(_BYTE *, _QWORD, __n128))a7(v27, i, a3, v21, v19);
            v24 = *v23;
            v25 = swift_retain();
            v22(v27, 0, v25);
            *(_QWORD *)(v13 + 8 * i) = v24;
          }
          sub_10000E410();
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v13);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10019CFA8()
{
  int64_t v0;
  uint64_t v1;
  char v2;
  int64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  int64_t v7;
  int64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  sub_10002626C();
  if ((v6 & 1) == 0 && (v2 & 1) == 0)
  {
    v7 = v3;
    v8 = v0;
    if (v3 >= v0)
    {
      v9 = v4;
      v10 = v1;
      if (v4 != (_DWORD)v1)
        goto LABEL_15;
      if (v0 == v3)
      {
LABEL_11:
        sub_10000E4E0();
        return;
      }
      v11 = v5;
      v12 = 0;
      while (!__OFADD__(v12, 1))
      {
        v13 = sub_10019D078(v8, v10, 0, v11);
        v15 = v14;
        v17 = v16;
        sub_10019DF94(v8, v10);
        if ((v17 & 1) != 0)
          goto LABEL_16;
        if ((_DWORD)v15 != v9)
          goto LABEL_13;
        ++v12;
        v8 = v13;
        v10 = v15;
        if (v13 == v7)
          goto LABEL_11;
      }
      __break(1u);
LABEL_13:
      __break(1u);
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

int64_t sub_10019D078(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_10019D160()
{
  sub_1001962D0();
}

void sub_10019D194()
{
  sub_1001962D0();
}

uint64_t sub_10019D1C8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t (*sub_10019D248(uint64_t a1, uint64_t a2, uint64_t a3, char a4))(uint64_t a1)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = a4 & 1;
  sub_10005E1FC(a2, a3, a4 & 1);
  return sub_10019D28C;
}

uint64_t sub_10019D28C(uint64_t a1)
{
  return sub_100025618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10019D29C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_10019DF34();
  return sub_10019D360(v0, v1, v2, v3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _BYTE *))sub_1001914E8);
}

uint64_t sub_10019D2BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return sub_100191614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_10019D308()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  sub_10019DF34();
  return sub_10019D2BC(v0, v1, v2, v3);
}

uint64_t sub_10019D320@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10019194C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *a2, a3);
}

uint64_t sub_10019D360(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _BYTE *))
{
  _BYTE v6[8];

  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *a2, a3, v6);
}

uint64_t sub_10019D3A8(uint64_t a1, uint64_t *a2)
{
  return sub_100191A6C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *a2) & 1;
}

uint64_t sub_10019D3D4(uint64_t a1)
{
  uint64_t v1;

  return sub_10019D3A8(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_10019D3F0()
{
  unsigned __int8 *v0;

  return sub_1001978C4(v0);
}

uint64_t sub_10019D3F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_10019DF34();
  return sub_10019D360(v0, v1, v2, v3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _BYTE *))sub_1001917D0);
}

uint64_t sub_10019D418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10019D320(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_10019D434()
{
  uint64_t v0;

  return sub_100196FB8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10019D440(uint64_t a1)
{
  return sub_10019D67C(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_100195F7C);
}

unint64_t sub_10019D44C()
{
  unint64_t result;

  result = qword_1002B4A38;
  if (!qword_1002B4A38)
  {
    result = swift_getWitnessTable(&unk_10022A418, &type metadata for ConnectionController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A38);
  }
  return result;
}

unint64_t sub_10019D488()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4A50;
  if (!qword_1002B4A50)
  {
    v1 = sub_10000DCA0(&qword_1002B4A48);
    sub_100021264(&qword_1002AEE68, 255, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B4A50);
  }
  return result;
}

uint64_t sub_10019D510()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019D534()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019D558()
{
  uint64_t v0;

  return sub_100193FB8(v0);
}

uint64_t sub_10019D560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019D570(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10019D578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AC200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for OSSignposter(0);
  if (!sub_10019DFA8(v0 + v3))
    sub_1000850C0(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10019D670(uint64_t a1)
{
  return sub_10019D67C(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_100195108);
}

uint64_t sub_10019D67C(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(sub_100026774() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return a2(a1, v2 + v5, *(_QWORD *)(v2 + v5 + *(_QWORD *)(v4 + 64)), *(_QWORD *)(v2 + v5 + *(_QWORD *)(v4 + 64) + 8), *(_QWORD *)(v2 + ((v5 + *(_QWORD *)(v4 + 64) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t storeEnumTagSinglePayload for ConnectionController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10019D72C + 4 * byte_10022A1F1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019D760 + 4 * byte_10022A1EC[v4]))();
}

uint64_t sub_10019D760(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019D768(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019D770);
  return result;
}

uint64_t sub_10019D77C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019D784);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10019D788(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019D790(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionController.DiagnosticState.CodingKeys()
{
  return &type metadata for ConnectionController.DiagnosticState.CodingKeys;
}

uint64_t destroy for ConnectionController.DiagnosticState(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

void _s13EnsembleAgent20ConnectionControllerC15DiagnosticStateVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  sub_10003AFBC();
  sub_1000050D4();
}

uint64_t assignWithCopy for ConnectionController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for ConnectionController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitizerGesture.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitizerGesture.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionController.DiagnosticState()
{
  return &type metadata for ConnectionController.DiagnosticState;
}

unint64_t sub_10019D948()
{
  unint64_t result;

  result = qword_1002B4A78;
  if (!qword_1002B4A78)
  {
    result = swift_getWitnessTable(&unk_10022A3F0, &type metadata for ConnectionController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A78);
  }
  return result;
}

unint64_t sub_10019D988()
{
  unint64_t result;

  result = qword_1002B4A80;
  if (!qword_1002B4A80)
  {
    result = swift_getWitnessTable(&unk_10022A360, &type metadata for ConnectionController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A80);
  }
  return result;
}

unint64_t sub_10019D9C8()
{
  unint64_t result;

  result = qword_1002B4A88;
  if (!qword_1002B4A88)
  {
    result = swift_getWitnessTable(&unk_10022A388, &type metadata for ConnectionController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A88);
  }
  return result;
}

unint64_t sub_10019DA04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4AA8;
  if (!qword_1002B4AA8)
  {
    v1 = sub_10000DCA0(&qword_1002B4A48);
    sub_100021264((unint64_t *)&unk_1002B4AB0, 255, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B4AA8);
  }
  return result;
}

uint64_t sub_10019DA8C(uint64_t a1)
{
  return sub_10019D3D4(a1) & 1;
}

void sub_10019DBFC()
{
  char v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 344) = (unint64_t)((1 << v0) + 63) >> 6;
}

void *sub_10019DC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  size_t v10;

  return memcpy((char *)&a9 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, v10);
}

uint64_t sub_10019DC50(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10019DC58@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 304), *(_QWORD *)(v1 - 312), *(_QWORD *)(v1 - 288));
}

uint64_t sub_10019DCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UUID.init(uuid:)(a1, a2, a3, *(_QWORD *)(v3 - 240), *(_QWORD *)(v3 - 248), *(_QWORD *)(v3 - 256), *(_QWORD *)(v3 - 264), *(_QWORD *)(v3 - 272));
}

void sub_10019DCD0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;

  sub_10019CB40(v3, v2, v0, v1, (_QWORD *)(v4 - 104));
}

void *sub_10019DCEC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  return sub_10019C7C8(v2, v1, v3, v0, (_QWORD *)(v4 - 112));
}

uint64_t sub_10019DD08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_10019DD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 144, v4, v5, a4);
}

BOOL sub_10019DD28(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void *sub_10019DD38(void *a1)
{
  const void *v1;
  size_t v2;

  return memcpy(a1, v1, v2);
}

uint64_t sub_10019DD44@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void sub_10019DD68(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 - 192) = a1;
  sub_1000586CC();
}

uint64_t sub_10019DD84()
{
  uint64_t v0;

  return swift_getObjectType(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10019DDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v3), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v3 + 8), v2, v1);
}

uint64_t sub_10019DDF4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_10019DE14()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_10019DE3C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (a1 - 1) & a1;
  *(_QWORD *)(v2 - 192) = v1;
}

void sub_10019DE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (v0 - 1) & v0;
  *(_QWORD *)(v2 - 192) = v1;
}

void sub_10019DE80(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10019DE94@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10019DE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 152, v5, v4, a4);
}

uint64_t sub_10019DEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 176, v5, v4, a4);
}

uint64_t sub_10019DEC8(uint64_t a1)
{
  uint64_t v1;

  return swift_initStackObject(a1, v1 - 136);
}

void sub_10019DED0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_100025588(a1, a2, v2);
}

void sub_10019DED8()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_10018F420(v1, v0, v2);
}

uint64_t sub_10019DEF4()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(*(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + v3), v2);
}

uint64_t sub_10019DF14()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10019DF24()
{
  return type metadata accessor for SyncViewLocalData(0);
}

void sub_10019DF50(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_100022838(a1, v2, v1);
}

uint64_t sub_10019DF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v2, v3);
}

uint64_t sub_10019DF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v2, v3);
}

uint64_t sub_10019DF80(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 144));
}

void sub_10019DF8C()
{
  sub_1000586CC();
}

uint64_t sub_10019DF94(uint64_t a1, uint64_t a2)
{
  return sub_100025618(a1, a2, 0);
}

void sub_10019DF9C()
{
  sub_100147210();
}

uint64_t sub_10019DFA8(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

unint64_t sub_10019DFDC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000FDECC(v0, v1);
}

void sub_10019E000()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 352) = v0 + 56;
}

uint64_t sub_10019E020(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

void sub_10019E02C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = v0;
  sub_100036DCC((_QWORD *)(v1 - 144));
}

uint64_t sub_10019E04C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 41) = *(_QWORD *)(v1 - 224);
  *(_BYTE *)(result + 42) = *(_QWORD *)(v1 - 232);
  return result;
}

_BYTE *sub_10019E060(_BYTE *result)
{
  char v1;
  char v2;
  uint64_t v3;

  result[33] = v1;
  result[34] = v2;
  result[35] = *(_QWORD *)(v3 - 200);
  return result;
}

uint64_t sub_10019E0A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10019E0C4(uint64_t a1)
{
  return swift_willThrow(a1);
}

uint64_t sub_10019E104()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10019E110()
{
  uint64_t v0;

  return swift_stdlib_isStackAllocationSafe(v0, 8);
}

uint64_t sub_10019E130()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10019E13C(uint64_t a1, uint64_t a2)
{
  char v2;

  return sub_100025618(a1, a2, v2);
}

uint64_t sub_10019E158@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10019E164()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1001A8C70(v1, v0);
}

void sub_10019E1A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD v42[5];
  int64_t v43;

  v37 = a2;
  v3 = sub_1000055B0(&qword_1002B1260);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  sub_100043078(v42, a1);
  v9 = v42[0];
  v43 = v42[3];
  v10 = v42[4];
  v41 = v6 + 8;
  v38 = v42[1];
  v39 = (unint64_t)(v42[2] + 64) >> 6;
  v40 = UVCClientAssertionSingleDeviceMode;
  swift_bridgeObjectRetain();
  if (!v10)
    goto LABEL_3;
LABEL_2:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v12 = v11 | (v43 << 6);
  while (1)
  {
    v17 = *(_QWORD *)(v9 + 48);
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v8, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v12, v18);
    v19 = *(_QWORD *)(v9 + 56) + 40 * v12;
    v20 = *(void **)(v19 + 8);
    v21 = *(_BYTE *)(v19 + 32);
    v22 = &v8[*(int *)(v3 + 48)];
    v23 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)v22 = *(_QWORD *)v19;
    *((_QWORD *)v22 + 1) = v20;
    *((_OWORD *)v22 + 1) = v23;
    v22[32] = v21;
    sub_1001A041C((uint64_t)v8, (uint64_t)v6);
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v41[*(int *)(v3 + 48)]);
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    if (v24 == v27 && v26 == v28)
    {
      v32 = v20;
      swift_bridgeObjectRelease_n(v26, 2);
LABEL_27:
      swift_release();
      v33 = v37;
      sub_1001A041C((uint64_t)v6, v37);
      v34 = v33;
      v35 = 0;
LABEL_29:
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v34, v35, 1, v3);
      return;
    }
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0);
    v31 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_27;
    sub_10000E36C((uint64_t)v6, &qword_1002B1260);
    if (v10)
      goto LABEL_2;
LABEL_3:
    v13 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v13 >= v39)
      goto LABEL_28;
    v14 = *(_QWORD *)(v38 + 8 * v13);
    v15 = v43 + 1;
    if (!v14)
    {
      v15 = v43 + 2;
      if (v43 + 2 >= v39)
        goto LABEL_28;
      v14 = *(_QWORD *)(v38 + 8 * v15);
      if (!v14)
      {
        v15 = v43 + 3;
        if (v43 + 3 >= v39)
          goto LABEL_28;
        v14 = *(_QWORD *)(v38 + 8 * v15);
        if (!v14)
        {
          v15 = v43 + 4;
          if (v43 + 4 >= v39)
            goto LABEL_28;
          v14 = *(_QWORD *)(v38 + 8 * v15);
          if (!v14)
          {
            v15 = v43 + 5;
            if (v43 + 5 >= v39)
              goto LABEL_28;
            v14 = *(_QWORD *)(v38 + 8 * v15);
            if (!v14)
            {
              v16 = v43 + 6;
              while (v16 < v39)
              {
                v14 = *(_QWORD *)(v38 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
LABEL_28:
              swift_release();
              v34 = v37;
              v35 = 1;
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v43 = v15;
  }
  __break(1u);
}

void sub_10019E4B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[5];
  int64_t v40;

  v4 = sub_1000055B0(&qword_1002B1260);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v34 - v8;
  sub_100043078(v39, a1);
  v10 = v39[0];
  v40 = v39[3];
  v11 = v39[4];
  v35 = v39[1];
  v36 = (unint64_t)(v39[2] + 64) >> 6;
  v37 = *a2;
  v38 = v7 + 8;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v40 << 6);
      goto LABEL_20;
    }
    v14 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      return;
    }
    if (v14 >= v36)
      goto LABEL_28;
    v15 = *(_QWORD *)(v35 + 8 * v14);
    v16 = v40 + 1;
    if (!v15)
    {
      v16 = v40 + 2;
      if (v40 + 2 >= v36)
        goto LABEL_28;
      v15 = *(_QWORD *)(v35 + 8 * v16);
      if (!v15)
      {
        v16 = v40 + 3;
        if (v40 + 3 >= v36)
          goto LABEL_28;
        v15 = *(_QWORD *)(v35 + 8 * v16);
        if (!v15)
        {
          v16 = v40 + 4;
          if (v40 + 4 >= v36)
            goto LABEL_28;
          v15 = *(_QWORD *)(v35 + 8 * v16);
          if (!v15)
          {
            v16 = v40 + 5;
            if (v40 + 5 >= v36)
              goto LABEL_28;
            v15 = *(_QWORD *)(v35 + 8 * v16);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_19:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v40 = v16;
LABEL_20:
    v18 = *(_QWORD *)(v10 + 48);
    v19 = sub_10000E440();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v9, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v13, v19);
    v20 = *(_QWORD *)(v10 + 56) + 40 * v13;
    v21 = *(void **)(v20 + 8);
    v22 = *(_BYTE *)(v20 + 32);
    v23 = &v9[*(int *)(v4 + 48)];
    v24 = *(_OWORD *)(v20 + 16);
    *(_QWORD *)v23 = *(_QWORD *)v20;
    *((_QWORD *)v23 + 1) = v21;
    *((_OWORD *)v23 + 1) = v24;
    v23[32] = v22;
    sub_1001A041C((uint64_t)v9, (uint64_t)v7);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v38[*(int *)(v4 + 48)]);
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    if (v25 == v28 && v27 == v29)
    {
      v33 = v21;
      sub_100026AF4(v27);
      sub_10000E36C((uint64_t)v7, &qword_1002B1260);
LABEL_27:
      swift_release();
      return;
    }
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
    v32 = v21;
    sub_100075850();
    swift_bridgeObjectRelease();
    sub_10000E36C((uint64_t)v7, &qword_1002B1260);
    if ((v31 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v40 + 6;
  while (v17 < v36)
  {
    v15 = *(_QWORD *)(v35 + 8 * v17++);
    if (v15)
    {
      v16 = v17 - 1;
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_release();
}

uint64_t sub_10019E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a1 + 8));
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10)
  {
    sub_10019FC88(a1);
    sub_10019FC88(a2);
    swift_bridgeObjectRelease_n(v8, 2);
    sub_10019FCB0(a2);
    sub_10019FCB0(a1);
    goto LABEL_11;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
  sub_10019FC88(a1);
  sub_10019FC88(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10019FCB0(a2);
  sub_10019FCB0(a1);
  result = 0;
  if ((v12 & 1) != 0)
  {
LABEL_11:
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 32) & 1) != 0)
        return 1;
    }
    else if ((*(_BYTE *)(a2 + 32) & 1) == 0
           && !static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24)))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10019E8C4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  char v6;
  _OWORD v7[2];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_BYTE *)(a2 + 32);
  return sub_10019E7A0((uint64_t)v5, (uint64_t)v7) & 1;
}

void sub_10019E90C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v28 = a4;
  v26 = a2;
  v27 = a3;
  v7 = sub_10000E440();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = UVCClientAssertionSingleDeviceMode;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 == v15 && v14 == v16)
  {
    sub_100026AF4(v14);
    v19 = v28;
    goto LABEL_8;
  }
  v25 = v8;
  v18 = sub_1001A05FC(v12, v14, v15);
  swift_bridgeObjectRelease();
  sub_100075850();
  v19 = v28;
  v20 = v29;
  if ((v18 & 1) != 0)
  {
LABEL_8:
    sub_10019EA70(v19, a5, v26, v27);
    goto LABEL_9;
  }
  v21 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v10, v28, v7);
  v30 = a5;
  v31 = a1;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = a1;
  v24 = sub_10003AFBC();
  swift_isUniquelyReferenced_nonNull_native(v24);
  sub_1001A0614();
  sub_1000F3270();
  sub_1001A0608();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  sub_10019F048(v22);
LABEL_9:
  sub_10003AF60();
}

void sub_10019EA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v32 = a3;
  v33 = a1;
  v7 = sub_10000E440();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10003AFBC();
  sub_10019E4B8(v11, (uint64_t *)&UVCClientAssertionSingleDeviceMode);
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    v14 = 0;
LABEL_7:
    v28 = sub_1001A0464();
    v29 = swift_allocError(&type metadata for ClientAssertionController.AssertionError, v28, 0, 0);
    *v30 = v14;
    swift_willThrow(v29);
    goto LABEL_8;
  }
  v15 = v10;
  v16 = a2;
  v17 = v32;
  v18 = v33;
  if (!a4
    || (v19 = swift_bridgeObjectRetain(), v20 = UniversalControlDeviceID.init(stringValue:)(v17, a4, v19),
                                          (v22 & 1) != 0))
  {
    v14 = 2;
    goto LABEL_7;
  }
  v23 = v20;
  v24 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, v18, v7);
  v34 = v16;
  v35 = UVCClientAssertionSingleDeviceMode;
  v36 = v23;
  v37 = v24;
  v38 = 0;
  v25 = *(_QWORD *)(v4 + 16);
  v26 = UVCClientAssertionSingleDeviceMode;
  v27 = sub_10003AFBC();
  swift_isUniquelyReferenced_nonNull_native(v27);
  sub_1001A0614();
  sub_1000F3270();
  sub_1001A0608();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  sub_10019F048(v25);
LABEL_8:
  sub_10003AF60();
}

double sub_10019EBF0()
{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_1001AA450();

  return sub_10019F048(v3);
}

double sub_10019EC48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[2] = a1;
  swift_bridgeObjectRetain();
  v2 = sub_10019FE48(v1, (uint64_t (*)(char *, _OWORD *))sub_1001A04A0, (uint64_t)v4);
  swift_bridgeObjectRelease();
  return sub_10019F048(v2);
}

void sub_10019ECA8()
{
  char v0;
  char v1;

  swift_bridgeObjectRetain();
  sub_1000F1C58();
  v1 = v0;
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
    sub_10019ED04();
}

void sub_10019ED04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  os_log_type_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  const char *v32;
  uint64_t v33;
  os_log_type_t v34;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  v3 = sub_10003AFBC();
  v4 = sub_10019FCD8(v3);
  sub_10000E420();
  sub_1001A0628();
  if ((v2 == 0) != *(_BYTE *)(v1 + 25))
  {
    if (v2)
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v5 = sub_10000F6E4();
      sub_10005FE9C(v5, (uint64_t)qword_1002B6EB0);
      v6 = sub_10002D844();
      if (!sub_1000103A0(v6))
        goto LABEL_12;
      v7 = (_WORD *)sub_100040274();
      sub_1000602B4(v7);
      v10 = "'hotzonesDisabled' assertion taken, hotzones disabled";
    }
    else
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v11 = sub_10000F6E4();
      sub_10005FE9C(v11, (uint64_t)qword_1002B6EB0);
      v12 = sub_10002D844();
      if (!sub_1000103A0(v12))
        goto LABEL_12;
      v13 = (_WORD *)sub_100040274();
      sub_1000602B4(v13);
      v10 = "'hotzonesDisabled' assertion(s) dropped, hotzones enabled";
    }
    sub_1001A05D8((void *)&_mh_execute_header, v8, v9, v10);
    sub_100007958(v4);
LABEL_12:

  }
  v14 = *(void **)(v1 + 16);
  v15 = sub_10003AFBC();
  v16 = sub_10019FCD8(v15);
  sub_10000E420();
  sub_1001A0628();
  if ((v14 == 0) == *(_BYTE *)(v1 + 24))
    goto LABEL_25;
  if (v14)
  {
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v17 = sub_10000F6E4();
    sub_10005FE9C(v17, (uint64_t)qword_1002B6EB0);
    v18 = sub_10002D844();
    if (!sub_1000103A0(v18))
      goto LABEL_24;
    v19 = (_WORD *)sub_100040274();
    sub_1000602B4(v19);
    v22 = "'disabled' taken";
  }
  else
  {
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v23 = sub_10000F6E4();
    sub_10005FE9C(v23, (uint64_t)qword_1002B6EB0);
    v24 = sub_10002D844();
    if (!sub_1000103A0(v24))
      goto LABEL_24;
    v25 = (_WORD *)sub_100040274();
    sub_1000602B4(v25);
    v22 = "'disabled' assertion(s) dropped";
  }
  sub_1001A05D8((void *)&_mh_execute_header, v20, v21, v22);
  sub_100007958(v16);
LABEL_24:

LABEL_25:
  v26 = sub_10003AFBC();
  v27 = sub_10019FCD8(v26);
  sub_10000E420();
  v28 = *(NSObject **)(v27 + 16);
  swift_release();
  if ((((v28 != 0) ^ *(unsigned __int8 *)(v1 + 42)) & 1) == 0)
  {
    if (v28)
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v29 = sub_10000F6E4();
      sub_10005FE9C(v29, (uint64_t)qword_1002B6EB0);
      v30 = sub_10002D844();
      if (!sub_1000403A4(v30))
        goto LABEL_36;
      v31 = (uint8_t *)sub_100040274();
      *(_WORD *)v31 = 0;
      v32 = "'singleDeviceMode' assertion taken";
    }
    else
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v33 = sub_10000F6E4();
      sub_10005FE9C(v33, (uint64_t)qword_1002B6EB0);
      v34 = sub_10002D844();
      if (!sub_1000403A4(v34))
        goto LABEL_36;
      v31 = (uint8_t *)sub_100040274();
      *(_WORD *)v31 = 0;
      v32 = "'singleDeviceMode' assertion dropped";
    }
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v16, v32, v31, 2u);
    sub_100007958((uint64_t)v31);
LABEL_36:

  }
  sub_10019FA08();
  sub_10019FAA4();
  sub_10019FB30();
}

double sub_10019F048(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(v1 + 16) = a1;
  sub_10019ECA8();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10019F074(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *(unsigned __int8 *)(v1 + 24);
  if (v2 != (result & 1))
  {
    v3 = result;
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100006FB4(v4, (uint64_t)qword_1002B6EB0);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = swift_slowAlloc(14, -1);
      *(_DWORD *)v9 = 67240448;
      v13 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4);
      *(_WORD *)(v9 + 8) = 1026;
      v12 = v3 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 10);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Enabled Changed: %{BOOL,public}d -> %{BOOL,public}d", (uint8_t *)v9, 0xEu);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = type metadata accessor for ClientAssertionController();
    sub_1000840B4((unint64_t *)&unk_1002AC190, v11, (uint64_t (*)(uint64_t))type metadata accessor for ClientAssertionController, (uint64_t)&unk_10022A4EC);
    ObservableObject<>.objectWillChange.getter(v10);
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  return result;
}

uint64_t sub_10019F1F8(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *(unsigned __int8 *)(v1 + 25);
  if (v2 != (result & 1))
  {
    v3 = result;
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100006FB4(v4, (uint64_t)qword_1002B6EB0);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = swift_slowAlloc(14, -1);
      *(_DWORD *)v9 = 67240448;
      v13 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4);
      *(_WORD *)(v9 + 8) = 1026;
      v12 = v3 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 10);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "HotzonesEnabled Changed: %{BOOL,public}d -> %{BOOL,public}d", (uint8_t *)v9, 0xEu);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = type metadata accessor for ClientAssertionController();
    sub_1000840B4((unint64_t *)&unk_1002AC190, v11, (uint64_t (*)(uint64_t))type metadata accessor for ClientAssertionController, (uint64_t)&unk_10022A4EC);
    ObservableObject<>.objectWillChange.getter(v10);
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  return result;
}

uint64_t sub_10019F37C(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v4 + 26);
  v14 = *(_BYTE *)(v4 + 42);
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v4 + 42) & 1) != 0)
      return result;
  }
  else if ((*(_BYTE *)(v4 + 42) & 1) == 0)
  {
    result = static UniversalControlUUID.compare(lhs:rhs:)(a1, a2);
    if (!result)
      return result;
  }
  v43 = v9;
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100006FB4(v15, (uint64_t)qword_1002B6EB0);
  v17 = Logger.logObject.getter(v16);
  v44 = static os_log_type_t.default.getter(v17, v18);
  if (os_log_type_enabled(v17, (os_log_type_t)v44))
  {
    v41 = v8;
    v42 = v17;
    v19 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v46 = v40;
    *(_DWORD *)v19 = 136446466;
    if ((v14 & 1) != 0)
    {
      v20 = 0xE300000000000000;
      v21 = 7104878;
    }
    else
    {
      v22 = UUID.init(uuid:)(v13, v13 >> 8, v13 >> 16, v13 >> 24, HIDWORD(v13), v13 >> 40);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v41);
      v26 = sub_1000599D0(8, v23, v25);
      v21 = static String._fromSubstring(_:)(v26);
      v20 = v27;
      swift_bridgeObjectRelease();
    }
    v45 = sub_100006FCC(v21, v20, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v19 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    if ((a3 & 1) != 0)
    {
      v35 = 0xE300000000000000;
      v33 = 7104878;
    }
    else
    {
      v28 = UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40);
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v41);
      v32 = sub_1000599D0(8, v29, v31);
      v33 = static String._fromSubstring(_:)(v32);
      v35 = v34;
      swift_bridgeObjectRelease();
    }
    v45 = sub_100006FCC(v33, v35, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v19 + 14);
    swift_bridgeObjectRelease();
    v17 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v44, "SingleDeviceModeDeviceID Changed: %{public}s -> %{public}s", (uint8_t *)v19, 0x16u);
    v36 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  v37 = type metadata accessor for ClientAssertionController();
  sub_1000840B4((unint64_t *)&unk_1002AC190, v38, (uint64_t (*)(uint64_t))type metadata accessor for ClientAssertionController, (uint64_t)&unk_10022A4EC);
  ObservableObject<>.objectWillChange.getter(v37);
  ObservableObjectPublisher.send()();
  return swift_release();
}

uint64_t sub_10019F788()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 43, 7);
}

uint64_t type metadata accessor for ClientAssertionController()
{
  return objc_opt_self(_TtC13EnsembleAgent25ClientAssertionController);
}

void destroy for ClientAssertionController.Assertion(uint64_t a1)
{

}

uint64_t initializeWithCopy for ClientAssertionController.Assertion(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ClientAssertionController.Assertion(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

__n128 initializeWithTake for ClientAssertionController.Assertion(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClientAssertionController.Assertion(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientAssertionController.Assertion(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientAssertionController.Assertion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientAssertionController.Assertion()
{
  return &type metadata for ClientAssertionController.Assertion;
}

void sub_10019F954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for UUID(0);
  sub_1000840B4(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  *(_QWORD *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v1, &type metadata for ClientAssertionController.Assertion, v2);
  *(_WORD *)(v0 + 24) = 257;
  *(_QWORD *)(v0 + 34) = 0;
  *(_QWORD *)(v0 + 26) = 0;
  *(_BYTE *)(v0 + 42) = 1;
  sub_1000050D4();
}

uint64_t sub_10019F9D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ClientAssertionController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10019FA08()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  char v7;
  char v8;

  swift_bridgeObjectRetain();
  sub_10019E4B8(v1, &UVCClientAssertionDisabled);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    result = sub_10019F074(0);
    v5 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10019E4B8(v6, (uint64_t *)&UVCClientAssertionSingleDeviceMode);
    v8 = v7;
    swift_bridgeObjectRelease();
    v5 = (v8 & 1) == 0;
    result = sub_10019F074(v5);
  }
  *(_BYTE *)(v0 + 24) = v5;
  return result;
}

uint64_t sub_10019FAA4()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t result;

  swift_bridgeObjectRetain();
  sub_10019E4B8(v1, (uint64_t *)&UVCClientAssertionSingleDeviceMode);
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10019E4B8(v4, &UVCClientAssertionHotzonesDisabled);
  v6 = v5;
  swift_bridgeObjectRelease();
  result = sub_10019F1F8(((v3 | v6) & 1) == 0);
  *(_BYTE *)(v0 + 25) = ((v3 | v6) & 1) == 0;
  return result;
}

void sub_10019FB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v14[16];

  v1 = sub_1000055B0(&qword_1002B1258);
  v2 = __chkstk_darwin(v1);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v14[-v5];
  swift_bridgeObjectRetain();
  sub_10019E1A4(v7, (uint64_t)v6);
  swift_bridgeObjectRelease();
  sub_10019FE00((uint64_t)v6, (uint64_t)v4);
  v8 = sub_1000055B0(&qword_1002B1260);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v8) == 1)
  {
    sub_10000E36C((uint64_t)v4, &qword_1002B1258);
    v9 = 0;
    v10 = 0;
    v11 = 1;
  }
  else
  {
    v12 = &v4[*(int *)(v8 + 48)];
    v9 = *((_QWORD *)v12 + 2);
    v10 = *((_QWORD *)v12 + 3);
    v11 = v12[32];

    v13 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v4, v13);
  }
  sub_10019F37C(v9, v10, v11);
  *(_QWORD *)(v0 + 26) = v9;
  *(_QWORD *)(v0 + 34) = v10;
  *(_BYTE *)(v0 + 42) = v11;
  sub_10000E36C((uint64_t)v6, &qword_1002B1258);
}

uint64_t sub_10019FC88(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t sub_10019FCB0(uint64_t a1)
{

  return a1;
}

uint64_t sub_10019FCD8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_1001A05EC();
    sub_1001A05C0();
    if (v1)
      swift_willThrow(v7);
    else
      return v7;
  }
  else
  {
    v8 = swift_slowAlloc(v6, -1);
    sub_1001A05EC();
    sub_1001A05C0();
    v2 = v9;
    swift_slowDealloc(v8, -1, -1);
  }
  return v2;
}

uint64_t sub_10019FE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019FE48(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, _OWORD *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v10, v12);
    sub_1001A01C0(v12, v10, v6, a2);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (_QWORD *)swift_slowAlloc(v11, -1);
    sub_1001194A8(0, v10, v14);
    sub_1001A01C0(v14, v10, v6, a2);
    a3 = v15;
    swift_slowDealloc(v14, -1, -1);
  }
  return a3;
}

void sub_10019FFC4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v26;
  int64_t v27;

  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v27 = (unint64_t)(v7 + 63) >> 6;
  v10 = *a4;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v5 << 6);
LABEL_20:
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 40 * v12 + 8));
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    if (v16 == v19 && v18 == v20)
    {
      sub_100026AF4(v18);
LABEL_27:
      *(_QWORD *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_30:
        sub_1000839E4(a1, a2, v26, (_QWORD *)a3);
        return;
      }
    }
    else
    {
      v22 = sub_1001A05FC(v16, v18, v19);
      swift_bridgeObjectRelease();
      sub_100075850();
      if ((v22 & 1) != 0)
        goto LABEL_27;
    }
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v13 >= v27)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v5;
  if (v14)
    goto LABEL_19;
  v5 = v13 + 1;
  if (v13 + 1 >= v27)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_19;
  v5 = v13 + 2;
  if (v13 + 2 >= v27)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_20;
  }
  v15 = v13 + 3;
  if (v15 >= v27)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v27)
      goto LABEL_30;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_32:
  __break(1u);
}

void sub_1001A01C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, _OWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  char v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[2];
  char v30;
  uint64_t (*v31)(char *, _OWORD *);

  v24 = a2;
  v31 = a4;
  v25 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 64);
  v26 = 0;
  v27 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v28 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_20;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v28)
      goto LABEL_24;
    v17 = *(_QWORD *)(v27 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v28)
        goto LABEL_24;
      v17 = *(_QWORD *)(v27 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v28)
          goto LABEL_24;
        v17 = *(_QWORD *)(v27 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_19:
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * v15, v5);
    v19 = *(_QWORD *)(a3 + 56) + 40 * v15;
    v20 = *(_BYTE *)(v19 + 32);
    v21 = *(_OWORD *)(v19 + 16);
    v29[0] = *(_OWORD *)v19;
    v29[1] = v21;
    v30 = v20;
    sub_10019FC88((uint64_t)v29);
    v22 = v31(v8, v29);
    sub_10019FCB0((uint64_t)v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v22 & 1) != 0)
    {
      *(_QWORD *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1000839E4(v25, v24, v26, (_QWORD *)a3);
        return;
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v28)
    goto LABEL_24;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v28)
      goto LABEL_24;
    v17 = *(_QWORD *)(v27 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1001A041C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001A0464()
{
  unint64_t result;

  result = qword_1002B4BF8;
  if (!qword_1002B4BF8)
  {
    result = swift_getWitnessTable(&unk_10022A59C, &type metadata for ClientAssertionController.AssertionError);
    atomic_store(result, (unint64_t *)&qword_1002B4BF8);
  }
  return result;
}

BOOL sub_1001A04A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return *a2 != *(_QWORD *)(v2 + 16);
}

uint64_t storeEnumTagSinglePayload for ClientAssertionController.AssertionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A0500 + 4 * byte_10022A475[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A0534 + 4 * byte_10022A470[v4]))();
}

uint64_t sub_1001A0534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A053C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A0544);
  return result;
}

uint64_t sub_1001A0550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A0558);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A055C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A0564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientAssertionController.AssertionError()
{
  return &type metadata for ClientAssertionController.AssertionError;
}

unint64_t sub_1001A0584()
{
  unint64_t result;

  result = qword_1002B4C00;
  if (!qword_1002B4C00)
  {
    result = swift_getWitnessTable(&unk_10022A574, &type metadata for ClientAssertionController.AssertionError);
    atomic_store(result, (unint64_t *)&qword_1002B4C00);
  }
  return result;
}

void sub_1001A05C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10019FFC4(v3, v2, v1, v0);
}

void sub_1001A05D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

uint64_t sub_1001A05EC()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1001194A8(0, v0, v1);
}

uint64_t sub_1001A05FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_1001A0608()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_1001A0614()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = v0;
  return v1 - 120;
}

uint64_t sub_1001A0628()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001A0634()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SystemConfigurationGlue();
  swift_allocObject(v0, 40, 7);
  result = sub_1001A06E8();
  qword_1002B70D0 = result;
  return result;
}

void sub_1001A066C()
{
  __CFString *ComputerName;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  ComputerName = (__CFString *)SCDynamicStoreKeyCreateComputerName(0);
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(ComputerName);
  v3 = v2;

  qword_1002B4C08 = v1;
  unk_1002B4C10 = v3;
}

NSString sub_1001A06B4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002B4C18 = (uint64_t)result;
  return result;
}

uint64_t sub_1001A06E8()
{
  uint64_t v0;
  uint64_t v1;
  SCDynamicStoreRef v2;
  const __SCDynamicStore *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *isa;
  const __SCDynamicStore *v9;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  if (qword_1002A9968 != -1)
    swift_once(&qword_1002A9968, sub_1001A06B4);
  v2 = SCDynamicStoreCreate(0, (CFStringRef)qword_1002B4C18, (SCDynamicStoreCallBack)sub_1001A09A4, 0);
  if (v2)
  {
    sub_10000B0EC();
    v3 = v2;
    v4 = static OS_dispatch_queue.main.getter(v3);
    SCDynamicStoreSetDispatchQueue(v3, v4);

    v5 = sub_1000055B0(&qword_1002AC9B0);
    v6 = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(v6 + 16) = xmmword_10021BBA0;
    if (qword_1002A9960 != -1)
      swift_once(&qword_1002A9960, sub_1001A066C);
    v7 = unk_1002B4C10;
    *(_QWORD *)(v6 + 32) = qword_1002B4C08;
    *(_QWORD *)(v6 + 40) = v7;
    swift_bridgeObjectRetain(v7);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v6);
    SCDynamicStoreSetNotificationKeys(v3, isa, 0);

  }
  *(_QWORD *)(v1 + 32) = v2;
  v9 = v2;
  sub_1001A0848();

  return v1;
}

uint64_t sub_1001A0848()
{
  uint64_t v0;
  CFStringRef v1;
  __CFString *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = SCDynamicStoreCopyComputerName(*(SCDynamicStoreRef *)(v0 + 32), 0);
  if (v1)
  {
    v2 = (__CFString *)v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0xE000000000000000;
  }
  v6 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v5;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1001A08A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_1002A9960 != -1)
    swift_once(&qword_1002A9960, sub_1001A066C);
  v3 = qword_1002B4C08;
  v4 = unk_1002B4C10;
  v11 = 0;
  result = static Array._conditionallyBridgeFromObjectiveC(_:result:)(a2, &v11, &type metadata for String);
  v6 = v11;
  if (v11)
  {
    sub_10006DC80(v3, v4, v11);
    v8 = v7;
    result = swift_bridgeObjectRelease(v6);
    if ((v8 & 1) != 0)
    {
      if (qword_1002A9958 != -1)
        swift_once(&qword_1002A9958, sub_1001A0634);
      v9 = type metadata accessor for SystemConfigurationGlue();
      sub_1001A0A60();
      v10 = ObservableObject<>.objectWillChange.getter(v9);
      ObservableObjectPublisher.send()();
      swift_release(v10);
      return sub_1001A0848();
    }
  }
  return result;
}

void sub_1001A09A4(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = a2;
  sub_1001A08A0((uint64_t)v3, (uint64_t)v4);

}

uint64_t sub_1001A09FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return v0;
}

uint64_t sub_1001A0A20()
{
  uint64_t v0;

  sub_1001A09FC();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SystemConfigurationGlue()
{
  return objc_opt_self(_TtC13EnsembleAgent23SystemConfigurationGlue);
}

unint64_t sub_1001A0A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC3D0;
  if (!qword_1002AC3D0)
  {
    v1 = type metadata accessor for SystemConfigurationGlue();
    result = swift_getWitnessTable(&unk_10022A608, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC3D0);
  }
  return result;
}

uint64_t PropertyListTypeEncoder.encode(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v3 = type metadata accessor for EncodingError.Context(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000445C0((uint64_t)a1, (uint64_t)v26);
  v7 = sub_1000055B0(&qword_1002B4CC8);
  v8 = sub_1001A0CFC();
  if (swift_dynamicCast(&v27, v26, v7, v8, 6))
    return v27;
  v25 = v3;
  v10 = type metadata accessor for PropertyListTypeEncoder.RootEncoder();
  v11 = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v12 = a1[3];
  v13 = a1[4];
  v14 = sub_10000DBE4(a1, v12);
  v26[3] = v10;
  v26[4] = sub_1001A1688(&qword_1002B4CD0, (uint64_t)&unk_10022A724);
  v26[0] = v11;
  v15 = swift_retain(v11);
  v9 = (uint64_t)v14;
  dispatch thunk of Encodable.encode(to:)(v26, v12, v13, v15);
  if (v1)
  {
    sub_10006005C();
    sub_100005988(v26);
  }
  else
  {
    sub_100005988(v26);
    v9 = *(_QWORD *)(v11 + 16);
    if (v9)
    {
      swift_unknownObjectRetain(*(_QWORD *)(v11 + 16));
      sub_10006005C();
    }
    else
    {
      EncodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0, 0xE000000000000000, 0);
      v9 = type metadata accessor for EncodingError(0);
      swift_allocError(v9, &protocol witness table for EncodingError, 0, 0);
      v18 = v17;
      v19 = (char *)v17 + *(int *)(sub_1000055B0(&qword_1002B4CD8) + 48);
      v20 = a1[3];
      v21 = sub_10000DBE4(a1, v20);
      v18[3] = v20;
      v22 = sub_100005534(v18);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v22, v21, v20);
      v23 = v25;
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v19, v6, v25);
      v24 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v18, enum case for EncodingError.invalidValue(_:), v9);
      swift_willThrow(v24);
      sub_10006005C();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
    }
  }
  return v9;
}

unint64_t sub_1001A0CFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B0850;
  if (!qword_1002B0850)
  {
    v1 = objc_opt_self(NSData);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B0850);
  }
  return result;
}

uint64_t type metadata accessor for PropertyListTypeEncoder.RootEncoder()
{
  return objc_opt_self(_TtCC13EnsembleAgent23PropertyListTypeEncoderP33_124122DBF7046BE3E405A00E5D93C92411RootEncoder);
}

uint64_t type metadata accessor for PropertyListTypeEncoder()
{
  return objc_opt_self(_TtC13EnsembleAgent23PropertyListTypeEncoder);
}

uint64_t sub_1001A0D78()
{
  uint64_t v0;

  v0 = type metadata accessor for CodingUserInfoKey(0);
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v0, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
}

uint64_t sub_1001A0DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  _QWORD v13[2];

  v6 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  v8 = v6;
  swift_unknownObjectRelease(v7);
  v13[0] = _swiftEmptyArrayStorage;
  v13[1] = v8;
  v10 = type metadata accessor for PropertyListTypeEncoder.KeyedEncoder(0, a2, a3, v9);
  WitnessTable = swift_getWitnessTable(&unk_10022A7B0, v10);
  return KeyedEncodingContainer.init<A>(_:)(v13, a2, v10, WitnessTable);
}

unint64_t sub_1001A0E64@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;
  unint64_t result;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "init");
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  v5 = v3;
  swift_unknownObjectRelease(v4);
  a1[3] = &type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
  result = sub_1001A16C8();
  a1[4] = result;
  *a1 = _swiftEmptyArrayStorage;
  a1[1] = v5;
  return result;
}

double sub_1001A0ED8@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  double result;

  a1[3] = *v1;
  a1[4] = sub_1001A1688(&qword_1002B4E20, (uint64_t)&unk_10022A66C);
  *a1 = v1;
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_1001A0F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  swift_unknownObjectRelease(v3);
  return swift_unknownObjectRetain(a1);
}

void sub_1001A0F48()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
  sub_1001A0F1C((uint64_t)v0);

}

void sub_1001A0F8C()
{
  Class isa;

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A0FBC()
{
  NSString v0;

  v0 = String._bridgeToObjectiveC()();
  sub_1001A0F1C((uint64_t)v0);

}

void sub_1001A0FEC()
{
  Class isa;

  isa = Double._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A101C()
{
  Class isa;

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A104C()
{
  Class isa;

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A107C()
{
  Class isa;

  isa = Int8._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A10AC()
{
  Class isa;

  isa = Int16._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A10DC()
{
  Class isa;

  isa = Int32._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A110C()
{
  Class isa;

  isa = Int64._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A113C()
{
  Class isa;

  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A116C()
{
  Class isa;

  isa = UInt8._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A119C()
{
  Class isa;

  isa = UInt16._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A11CC()
{
  Class isa;

  isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A11FC()
{
  Class isa;

  isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  sub_1001A0F1C((uint64_t)isa);

}

void sub_1001A122C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  id v21[5];

  v5 = v3;
  v9 = *(void **)v5;
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v12, a1, a2, v10);
  v14 = sub_1001A0CFC();
  if (swift_dynamicCast(v21, v12, a2, v14, 6))
  {
    v15 = v21[0];
    sub_1001A0F1C((uint64_t)v15);

  }
  else
  {
    v16 = (_QWORD *)swift_allocObject(v9, 24, 7);
    v16[2] = 0;
    v21[3] = v9;
    v21[4] = (id)sub_1001A1688(&qword_1002B4CD0, (uint64_t)&unk_10022A724);
    v21[0] = v16;
    v17 = swift_retain();
    dispatch thunk of Encodable.encode(to:)(v21, a2, a3, v17);
    if (v4)
    {
      swift_release();
      sub_100005988(v21);
    }
    else
    {
      sub_100005988(v21);
      v18 = v16[2];
      swift_unknownObjectRetain(v18);
      swift_release();
      v19 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = v18;
      swift_unknownObjectRelease(v19);
    }
  }
}

uint64_t sub_1001A139C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void *sub_1001A13C0()
{
  return variable initialization expression of PasteboardDataSession.transfers();
}

uint64_t sub_1001A13E0()
{
  return sub_1001A0D78();
}

uint64_t sub_1001A1400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A0DB0(a1, a2, a3);
}

unint64_t sub_1001A1420@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001A0E64(a1);
}

double sub_1001A1440@<D0>(_QWORD *a1@<X8>)
{
  return sub_1001A0ED8(a1);
}

void sub_1001A1460()
{
  sub_1001A0F48();
}

void sub_1001A1480()
{
  sub_1001A0F8C();
}

void sub_1001A14A0()
{
  sub_1001A0FBC();
}

void sub_1001A14C0()
{
  sub_1001A0FEC();
}

void sub_1001A14E0()
{
  sub_1001A101C();
}

void sub_1001A1500()
{
  sub_1001A104C();
}

void sub_1001A1520()
{
  sub_1001A107C();
}

void sub_1001A1540()
{
  sub_1001A10AC();
}

void sub_1001A1560()
{
  sub_1001A10DC();
}

void sub_1001A1580()
{
  sub_1001A110C();
}

uint64_t sub_1001A15A0()
{
  return SingleValueEncodingContainer.encode(_:)();
}

void sub_1001A15B4()
{
  sub_1001A113C();
}

void sub_1001A15D4()
{
  sub_1001A116C();
}

void sub_1001A15F4()
{
  sub_1001A119C();
}

void sub_1001A1614()
{
  sub_1001A11CC();
}

void sub_1001A1634()
{
  sub_1001A11FC();
}

uint64_t sub_1001A1654()
{
  return SingleValueEncodingContainer.encode(_:)();
}

void sub_1001A1668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A122C(a1, a2, a3);
}

uint64_t sub_1001A1688(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PropertyListTypeEncoder.RootEncoder();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001A16C8()
{
  unint64_t result;

  result = qword_1002B4E28[0];
  if (!qword_1002B4E28[0])
  {
    result = swift_getWitnessTable(&unk_10022A928, &type metadata for PropertyListTypeEncoder.UnkeyedEncoder);
    atomic_store(result, qword_1002B4E28);
  }
  return result;
}

uint64_t type metadata accessor for PropertyListTypeEncoder.KeyedEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListTypeEncoder.KeyedEncoder);
}

ValueMetadata *type metadata accessor for PropertyListTypeEncoder.UnkeyedEncoder()
{
  return &type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
}

uint64_t sub_1001A172C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v5 = *(void **)(v3 + 8);
  v6 = dispatch thunk of CodingKey.stringValue.getter(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  v8 = v7;
  v11 = v6;
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v11, &type metadata for String);
  objc_msgSend(v5, "__swift_setObject:forKeyedSubscript:", a1, v9, v11, v12);
  swift_bridgeObjectRelease(v8);
  return swift_unknownObjectRelease(v9);
}

void sub_1001A17B8(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
  sub_1001A172C((uint64_t)v4, a1, a2);

}

void sub_1001A1814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  sub_1001A172C((uint64_t)isa, a2, a3);

}

void sub_1001A185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  sub_1001A172C((uint64_t)v6, a3, a4);

}

void sub_1001A18A4(uint64_t a1, uint64_t a2)
{
  Class isa;

  isa = Double._bridgeToObjectiveC()().super.super.isa;
  sub_1001A172C((uint64_t)isa, a1, a2);

}

void sub_1001A18EC(uint64_t a1, uint64_t a2)
{
  Class isa;

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  sub_1001A172C((uint64_t)isa, a1, a2);

}

void sub_1001A1934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v4;
  uint64_t v5;

  v5 = sub_1001A2BF8(a1, a2, a3, a4);
  sub_1001A2BDC(v5);

  sub_1001A2BEC();
}

void sub_1001A195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v4;
  uint64_t v5;

  v5 = a4();
  sub_1001A2BDC(v5);

  sub_1001A2BEC();
}

uint64_t sub_1001A1990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, __n128);
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _BYTE v28[16];

  v25 = a2;
  v26 = a3;
  v9 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v24 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v16((char *)&v24 - v14, a1, v17, v13);
  v18 = sub_1001A0CFC();
  v19 = swift_dynamicCast(v27, v15, a4, v18, 6);
  v20 = v27[0];
  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, a1, a4);
  if (v19 && v20)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a4);
  }
  else
  {
    v21 = type metadata accessor for PropertyListTypeEncoder();
    swift_initStackObject(v21, v28);
    v27[3] = a4;
    v27[4] = a5;
    v22 = sub_100005534(v27);
    ((void (*)(_QWORD *, char *, uint64_t))v16)(v22, v11, a4);
    v20 = PropertyListTypeEncoder.encode(_:)(v27);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a4);
    swift_release();
    result = sub_100005988(v27);
    if (v5)
      return result;
  }
  sub_1001A172C(v20, v25, v26);
  return swift_unknownObjectRelease(v20);
}

void sub_1001A1B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t WitnessTable;
  _QWORD v21[2];
  _BYTE v22[72];

  v10 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  sub_1001A172C((uint64_t)v10, a2, a3);
  v11 = *v5;
  v12 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
  inited = swift_initStackObject(v12, v22);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(inited + 56) = v14;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(a3 + 24);
  v15 = sub_100005534((_QWORD *)(inited + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v15, a2, v14);
  v21[0] = v11;
  v16 = v10;
  swift_bridgeObjectRetain();
  sub_1001927F0();
  v21[1] = v16;
  v18 = type metadata accessor for PropertyListTypeEncoder.KeyedEncoder(0, a4, a5, v17);
  swift_bridgeObjectRetain();
  v19 = v16;
  WitnessTable = swift_getWitnessTable(&unk_10022A7B0, v18);
  KeyedEncodingContainer.init<A>(_:)(v21, a4, v18, WitnessTable);
  swift_bridgeObjectRelease();

}

void sub_1001A1C68(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  _BYTE v14[72];

  v7 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "init");
  sub_1001A172C((uint64_t)v7, a1, a2);
  v8 = *v3;
  v9 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
  inited = swift_initStackObject(v9, v14);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(a2 + 24);
  v12 = sub_100005534((_QWORD *)(inited + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v12, a1, v11);
  v13 = v7;
  swift_bridgeObjectRetain();
  sub_1001927F0();
  a3[3] = &type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
  a3[4] = sub_1001A16C8();

  *a3 = v8;
  a3[1] = v13;
}

void sub_1001A1D68()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeEncoder.swift", 43, 2, 253, 0);
  __break(1u);
}

void sub_1001A1DC8()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeEncoder.swift", 43, 2, 257, 0);
  __break(1u);
}

void sub_1001A1E28(uint64_t a1, uint64_t a2)
{
  sub_1001A17B8(a1, a2);
}

void sub_1001A1E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1814(a1, a2, a3);
}

void sub_1001A1E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A185C(a1, a2, a3, a4);
}

void sub_1001A1E64(uint64_t a1, uint64_t a2)
{
  sub_1001A18A4(a1, a2);
}

void sub_1001A1E78(uint64_t a1, uint64_t a2)
{
  sub_1001A18EC(a1, a2);
}

void sub_1001A1E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A195C(a1, a2, a3, (uint64_t (*)(void))&Int._bridgeToObjectiveC());
}

void sub_1001A1EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&Int8._bridgeToObjectiveC());
}

void sub_1001A1EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&Int16._bridgeToObjectiveC());
}

void sub_1001A1EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&Int32._bridgeToObjectiveC());
}

void sub_1001A1EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A195C(a1, a2, a3, (uint64_t (*)(void))&Int64._bridgeToObjectiveC());
}

uint64_t sub_1001A1F18()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

void sub_1001A1F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A195C(a1, a2, a3, (uint64_t (*)(void))&UInt._bridgeToObjectiveC());
}

void sub_1001A1F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&UInt8._bridgeToObjectiveC());
}

void sub_1001A1F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&UInt16._bridgeToObjectiveC());
}

void sub_1001A1F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A1934(a1, a2, a3, (uint64_t (*)(void))&UInt32._bridgeToObjectiveC());
}

void sub_1001A1F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A195C(a1, a2, a3, (uint64_t (*)(void))&UInt64._bridgeToObjectiveC());
}

uint64_t sub_1001A1FB8()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_1001A1FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1001A1990(a1, a2, a5, a3, a4);
}

uint64_t sub_1001A1FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_1001A2018()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A202C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A2040(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_1001A2058(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A21B4(a1, a2, a3, a4, (void (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A2074(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_1001A208C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A2144(a1, a2, a3, a4, (void (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

void sub_1001A20A8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A217C(a1, a2, a3, a4, (void (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

void sub_1001A20C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A21B4(a1, a2, a3, a4, (void (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A20E0(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_1001A20F8(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_1001A2110(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_1001A2128(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A2144(a1, a2, a3, a4, (void (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

void sub_1001A2144(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(a1 & 0x1FF);
  sub_10008A5D8();
}

void sub_1001A2160(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A217C(a1, a2, a3, a4, (void (*)(_QWORD))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

void sub_1001A217C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  a5(a1 & 0x1FFFF);
  sub_10008A5D8();
}

void sub_1001A2198(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001A21B4(a1, a2, a3, a4, (void (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

void sub_1001A21B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  a5(a1 | ((HIDWORD(a1) & 1) << 32));
  sub_10008A5D8();
}

uint64_t sub_1001A21D8(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_1001A21F0(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_1001A2208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

void sub_1001A2230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1001A1B14(a1, a2, a5, a3, a4);
}

id sub_1001A2250(int a1, id a2)
{
  return objc_msgSend(a2, "count");
}

void sub_1001A2260()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
  objc_msgSend(*(id *)(v0 + 8), "addObject:", v1);

}

void sub_1001A22B4()
{
  uint64_t v0;
  Class isa;

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(*(id *)(v0 + 8), "addObject:", isa);

}

void sub_1001A22F4()
{
  uint64_t v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(*(id *)(v0 + 8), "addObject:", v1);

}

void sub_1001A2334()
{
  uint64_t v0;
  Class isa;

  isa = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(*(id *)(v0 + 8), "addObject:", isa);

}

void sub_1001A2374()
{
  uint64_t v0;
  Class isa;

  isa = Float._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(*(id *)(v0 + 8), "addObject:", isa);

}

void sub_1001A23B4(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  void *v3;

  sub_1001A2C24(a1, a2);
  v3 = (void *)sub_1001A2C18();
  sub_1001A2C10(v3, "addObject:");

  sub_1001A2C08();
}

void sub_1001A23E4(uint64_t a1, void (*a2)(void))
{
  void *v2;
  void *v3;

  a2();
  v3 = (void *)sub_1001A2C18();
  sub_1001A2C10(v3, "addObject:");

  sub_1001A2C08();
}

uint64_t sub_1001A2418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD v22[5];
  _BYTE v23[16];
  uint64_t v24;

  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v22[-1] - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14((char *)&v22[-1] - v12, a1, a2, v11);
  v15 = sub_1001A0CFC();
  v16 = swift_dynamicCast(v22, v13, a2, v15, 6);
  v17 = v22[0];
  ((void (*)(char *, uint64_t, uint64_t))v14)(v9, a1, a2);
  if (v16 && v17)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  }
  else
  {
    v18 = type metadata accessor for PropertyListTypeEncoder();
    swift_initStackObject(v18, v23);
    v22[3] = a2;
    v22[4] = a3;
    v19 = sub_100005534(v22);
    ((void (*)(_QWORD *, char *, uint64_t))v14)(v19, v9, a2);
    v17 = PropertyListTypeEncoder.encode(_:)(v22);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
    swift_release();
    result = sub_100005988(v22);
    if (v3)
      return result;
  }
  objc_msgSend(*(id *)(v24 + 8), "addObject:", v17);
  return swift_unknownObjectRelease(v17);
}

uint64_t sub_1001A25A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _QWORD v11[2];

  v6 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
  objc_msgSend(*(id *)(v3 + 8), "addObject:", v6);
  v11[0] = *(_QWORD *)v3;
  v11[1] = v6;
  v8 = type metadata accessor for PropertyListTypeEncoder.KeyedEncoder(0, a2, a3, v7);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&unk_10022A7B0, v8);
  return KeyedEncodingContainer.init<A>(_:)(v11, a2, v8, WitnessTable);
}

double sub_1001A2658@<D0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  id v3;
  uint64_t v4;
  double result;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "init");
  objc_msgSend((id)v1[1], "addObject:", v3);
  v4 = *v1;
  a1[3] = &type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
  a1[4] = sub_1001A16C8();
  *a1 = v4;
  a1[1] = v3;
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_1001A26CC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeEncoder.swift", 43, 2, 371, 0);
  __break(1u);
}

id sub_1001A272C()
{
  uint64_t v0;

  return sub_1001A2250(*(_QWORD *)v0, *(id *)(v0 + 8));
}

void sub_1001A2734()
{
  sub_1001A2260();
}

void sub_1001A2748()
{
  sub_1001A22B4();
}

void sub_1001A275C()
{
  sub_1001A22F4();
}

void sub_1001A2770()
{
  sub_1001A2334();
}

void sub_1001A2784()
{
  sub_1001A2374();
}

void sub_1001A2798(uint64_t a1)
{
  sub_1001A23E4(a1, (void (*)(void))&Int._bridgeToObjectiveC());
}

void sub_1001A27B4(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&Int8._bridgeToObjectiveC());
}

void sub_1001A27D0(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&Int16._bridgeToObjectiveC());
}

void sub_1001A27EC(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&Int32._bridgeToObjectiveC());
}

void sub_1001A2808(uint64_t a1)
{
  sub_1001A23E4(a1, (void (*)(void))&Int64._bridgeToObjectiveC());
}

uint64_t sub_1001A2824()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

void sub_1001A2838(uint64_t a1)
{
  sub_1001A23E4(a1, (void (*)(void))&UInt._bridgeToObjectiveC());
}

void sub_1001A2854(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&UInt8._bridgeToObjectiveC());
}

void sub_1001A2870(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&UInt16._bridgeToObjectiveC());
}

void sub_1001A288C(uint64_t a1)
{
  sub_1001A23B4(a1, (uint64_t (*)(void))&UInt32._bridgeToObjectiveC());
}

void sub_1001A28A8(uint64_t a1)
{
  sub_1001A23E4(a1, (void (*)(void))&UInt64._bridgeToObjectiveC());
}

uint64_t sub_1001A28C4()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t sub_1001A28D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A2418(a1, a2, a3);
}

uint64_t sub_1001A28EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A298C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A29B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A29DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001A2B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

uint64_t sub_1001A2BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1001A172C(a1, v2, v1);
}

uint64_t sub_1001A2BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

id sub_1001A2C10(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1001A2C18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1001A2C24(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void *MaterialAppearance.ultraThinLight.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinLight;
}

id static CABackdropLayer.makeVibrantBackdropLayer(appearance:groupName:captureOnly:)(EnsembleAgent::MaterialAppearance *a1, uint64_t a2, NSString a3, char a4)
{
  id v7;

  v7 = objc_msgSend(objc_allocWithZone((Class)CABackdropLayer), "init");
  objc_msgSend(v7, "setCaptureOnly:", a4 & 1);
  if (a3)
    a3 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setGroupName:", a3);

  CABackdropLayer.setMaterialAppearance(_:)(a1);
  return v7;
}

id CALayer.setMaterialAppearance(_:groupName:)(EnsembleAgent::MaterialAppearance *a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  Swift::Bool useVibrancy;
  id v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  double v15;
  double v16;
  CGColorRef v17;
  double fillOpacity;
  uint64_t v19;
  uint64_t v20;
  id v21;
  CGColorRef v22;
  uint64_t v24;

  v4 = v3;
  useVibrancy = a1->useVibrancy;
  v9 = sub_1001A4604((uint64_t)a1, "setAllowsGroupBlending:");
  v10 = sub_1001A4604((uint64_t)v9, "setAllowsEdgeAntialiasing:");
  if (useVibrancy)
  {
    sub_1001A4610((uint64_t)v10, "setBackgroundColor:");
    sub_10002D82C((uint64_t)objc_msgSend(v4, "setMasksToBounds:", 1), &qword_1002AAF60, CABackdropLayer_ptr);
    v13 = static CABackdropLayer.makeVibrantBackdropLayer(appearance:groupName:captureOnly:)(a1, a2, a3, 0);
    v14 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
    sub_10000922C(1819044198, 0xE400000000000000, v14);
    v17 = sub_1001A45DC(a1->fillGray, v15, v16, 1.0);
    objc_msgSend(v14, "setBackgroundColor:", v17);

    fillOpacity = a1->fillOpacity;
    *(float *)&fillOpacity = fillOpacity;
    objc_msgSend(v14, "setOpacity:", fillOpacity);
    v19 = sub_1000055B0(&qword_1002AC0E0);
    v20 = swift_allocObject(v19, 48, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100228340;
    *(_QWORD *)(v20 + 32) = v13;
    *(_QWORD *)(v20 + 40) = v14;
    v24 = v20;
    specialized Array._endMutation()(v20);
    v21 = v13;
    sub_1001A4120(v24);
  }
  else
  {
    v22 = sub_1001A45DC(a1->fillGray, v11, v12, 1.0);
    objc_msgSend(v4, "setBackgroundColor:", v22);

    sub_1001A4610((uint64_t)objc_msgSend(v4, "setMasksToBounds:", 0), "setSublayers:");
    return 0;
  }
  return v21;
}

void sub_1001A2E90(char a1, char a2)
{
  if ((a1 & 1) == 0)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_1001A2F08()
{
  uint64_t v0;
  id v1;

  if (qword_1002A9988 != -1)
    swift_once(&qword_1002A9988, sub_1001A3CC4);
  v0 = qword_1002B7150;
  v1 = (id)qword_1002B7150;
  return v0;
}

void sub_1001A2F24()
{
  JUMPOUT(0x1001A2FB4);
}

uint64_t sub_1001A2F34()
{
  uint64_t v0;
  id v1;

  if (qword_1002A9978 != -1)
    swift_once(&qword_1002A9978, sub_1001A3B34);
  v0 = qword_1002B7110;
  v1 = (id)qword_1002B7110;
  return v0;
}

uint64_t sub_1001A2F50()
{
  uint64_t v0;
  id v1;

  if (qword_1002A9980 != -1)
    swift_once(&qword_1002A9980, sub_1001A3BEC);
  v0 = qword_1002B7130;
  v1 = (id)qword_1002B7130;
  return v0;
}

uint64_t sub_1001A2F6C()
{
  uint64_t v0;
  id v1;

  if (qword_1002A9990 != -1)
    swift_once(&qword_1002A9990, sub_1001A3D7C);
  v0 = qword_1002B7170;
  v1 = (id)qword_1002B7170;
  return v0;
}

void sub_1001A2F88()
{
  if (qword_1002A9998 != -1)
    swift_once(&qword_1002A9998, sub_1001A3E34);
  JUMPOUT(0x1001A2FA0);
}

Swift::Void __swiftcall CALayer.setVibrantAppearance(_:)(EnsembleAgent::VibrantAppearance a1)
{
  void *v1;
  double v2;
  NSString value;
  CGColorRef v4;

  value = a1.compositing.value;
  v4 = sub_1001A45DC(a1.color.gray, a1.color.alpha, v2, a1.color.alpha);
  objc_msgSend(v1, "setCompositingFilter:", value);
  objc_msgSend(v1, "setContentsMultiplyColor:", v4);
  sub_1000AAEF4(v4);
}

void ColorScheme.hashValue.getter(uint64_t a1)
{
  char v1;

  sub_1001A45F4(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001A30DC()
{
  unsigned __int8 *v0;

  ColorScheme.hashValue.getter(*v0);
}

uint64_t sub_1001A30E8()
{
  unsigned __int8 *v0;

  return Vibrancy.hashValue.getter(*v0);
}

void _s13EnsembleAgent8VibrancyO9hashValueSivg_0(uint64_t a1)
{
  unsigned __int8 v1;

  sub_1001A45F4(a1);
  Hasher._combine(_:)(v1);
  sub_10004740C();
  sub_10000E59C();
}

uint64_t static MaterialAppearance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40))
  {
    v2 = ((*(_BYTE *)(a1 + 48) & 1) == 0) ^ *(_BYTE *)(a2 + 48);
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

void static MaterialAppearance.ultraThinLight.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10021CF70;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10021CF80);
}

void *MaterialAppearance.ultraThinLightAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinLightAX;
}

void static MaterialAppearance.ultraThinLightAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AAB0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AAC0);
}

void *MaterialAppearance.ultraThinLightRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinLightRT;
}

void static MaterialAppearance.ultraThinLightRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AAD0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AAC0);
}

void *MaterialAppearance.thinLight.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinLight;
}

void static MaterialAppearance.thinLight.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AAE0;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AAF0);
}

void *MaterialAppearance.thinLightAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinLightAX;
}

void static MaterialAppearance.thinLightAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB00;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB10);
}

void *MaterialAppearance.thinLightRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinLightRT;
}

void static MaterialAppearance.thinLightRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB20;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB10);
}

void *MaterialAppearance.mediumLight.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumLight;
}

void static MaterialAppearance.mediumLight.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB30;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AB40);
}

void *MaterialAppearance.mediumLightAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumLightAX;
}

void static MaterialAppearance.mediumLightAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB50;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB60);
}

void *MaterialAppearance.mediumLightRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumLightRT;
}

void static MaterialAppearance.mediumLightRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB70;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB60);
}

void *MaterialAppearance.thickLight.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickLight;
}

void static MaterialAppearance.thickLight.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AB80;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AB90);
}

void *MaterialAppearance.thickLightAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickLightAX;
}

void static MaterialAppearance.thickLightAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ABA0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022ABB0);
}

void *MaterialAppearance.thickLightRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickLightRT;
}

void static MaterialAppearance.thickLightRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ABC0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022ABB0);
}

void *MaterialAppearance.ultraThickLight.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickLight;
}

void static MaterialAppearance.ultraThickLight.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ABD0;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022ABE0);
}

void *MaterialAppearance.ultraThickLightAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickLightAX;
}

void static MaterialAppearance.ultraThickLightAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ABF0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC00);
}

void *MaterialAppearance.ultraThickLightRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickLightRT;
}

void static MaterialAppearance.ultraThickLightRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC10;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC00);
}

void *MaterialAppearance.ultraThinDark.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinDark;
}

void static MaterialAppearance.ultraThinDark.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC20;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AC30);
}

void *MaterialAppearance.ultraThinDarkAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinDarkAX;
}

void static MaterialAppearance.ultraThinDarkAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC40;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC50);
}

void *MaterialAppearance.ultraThinDarkRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThinDarkRT;
}

void static MaterialAppearance.ultraThinDarkRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC60;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC50);
}

void *MaterialAppearance.thinDark.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinDark;
}

void static MaterialAppearance.thinDark.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC70;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AC80);
}

void *MaterialAppearance.thinDarkAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinDarkAX;
}

void static MaterialAppearance.thinDarkAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AC90;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AAC0);
}

void *MaterialAppearance.thinDarkRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thinDarkRT;
}

void static MaterialAppearance.thinDarkRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ACA0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AAC0);
}

void *MaterialAppearance.mediumDark.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumDark;
}

void static MaterialAppearance.mediumDark.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ACB0;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AB40);
}

void *MaterialAppearance.mediumDarkAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumDarkAX;
}

void static MaterialAppearance.mediumDarkAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ACC0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB60);
}

void *MaterialAppearance.mediumDarkRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.mediumDarkRT;
}

void static MaterialAppearance.mediumDarkRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ACD0;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AB60);
}

void *MaterialAppearance.thickDark.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickDark;
}

void static MaterialAppearance.thickDark.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022ACE0;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022ACF0);
}

void *MaterialAppearance.thickDarkAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickDarkAX;
}

void static MaterialAppearance.thickDarkAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AD00;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC00);
}

void *MaterialAppearance.thickDarkRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.thickDarkRT;
}

void static MaterialAppearance.thickDarkRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AD10;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AC00);
}

void *MaterialAppearance.ultraThickDark.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickDark;
}

void static MaterialAppearance.ultraThickDark.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AD20;
  sub_1001A4560((__n128 *)a1, (__n128)xmmword_10022AD30);
}

void *MaterialAppearance.ultraThickDarkAX.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickDarkAX;
}

void static MaterialAppearance.ultraThickDarkAX.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AD40;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AD50);
}

void *MaterialAppearance.ultraThickDarkRT.unsafeMutableAddressor()
{
  return &static MaterialAppearance.ultraThickDarkRT;
}

void static MaterialAppearance.ultraThickDarkRT.getter(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_10021CF60;
  *(_OWORD *)(a1 + 16) = xmmword_10022AD60;
  sub_1001A4554((__n128 *)a1, (__n128)xmmword_10022AD50);
}

void __swiftcall MaterialAppearance.init(material:colorScheme:increaseContrast:reduceTransparency:)(EnsembleAgent::MaterialAppearance *__return_ptr retstr, EnsembleAgent::Material material, EnsembleAgent::ColorScheme colorScheme, Swift::Bool increaseContrast, Swift::Bool reduceTransparency)
{
  ((void (*)(EnsembleAgent::MaterialAppearance *__return_ptr))((char *)sub_1001A36DC
                                                                        + 4 * byte_10022ADDA[material]))(retstr);
}

void sub_1001A36DC(char a1@<W1>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  unint64_t v4;
  char v5;
  float64x2_t v6;
  double v7;
  double v8;
  const double *v9;

  if ((a1 & 1) != 0)
  {
    v4 = 0x3F8EB851EB851EB8;
    if ((a2 & 1) != 0)
    {
      v5 = 0;
      v6 = (float64x2_t)xmmword_10022AC50;
      v7 = 0.05882;
      goto LABEL_18;
    }
    v7 = 0.1569;
    if ((a3 & 1) != 0)
      v7 = 0.1255;
    v8 = 1.0;
    if ((a3 & 1) == 0)
      v8 = 0.4;
    v5 = a3 ^ 1;
    v9 = (const double *)&unk_10022B7C0;
LABEL_17:
    v6 = vld1q_dup_f64(v9);
    v6.f64[0] = v8;
    goto LABEL_18;
  }
  v4 = 0xBF847AE147AE147BLL;
  if ((a2 & 1) == 0)
  {
    v7 = 0.9646;
    if ((a3 & 1) != 0)
      v7 = 0.8548;
    v8 = 1.0;
    if ((a3 & 1) == 0)
      v8 = 0.36;
    v5 = a3 ^ 1;
    v9 = (const double *)&unk_10022B770;
    goto LABEL_17;
  }
  v5 = 0;
  v6 = (float64x2_t)xmmword_10022AAC0;
  v7 = 0.7843;
LABEL_18:
  *(_OWORD *)a4 = xmmword_10021CF60;
  *(_QWORD *)(a4 + 16) = v4;
  *(double *)(a4 + 24) = v7;
  *(float64x2_t *)(a4 + 32) = v6;
  *(_BYTE *)(a4 + 48) = v5 & 1;
}

void *VibrantAppearance.primaryLight.unsafeMutableAddressor()
{
  return &static VibrantAppearance.primaryLight;
}

uint64_t static VibrantAppearance.primaryLight.getter()
{
  return 0;
}

id sub_1001A3A7C()
{
  static VibrantAppearance.secondaryLight = xmmword_10022AD70;
  qword_1002B70F0 = kCAFilterPlusD;
  return kCAFilterPlusD;
}

__int128 *VibrantAppearance.secondaryLight.unsafeMutableAddressor()
{
  if (qword_1002A9970 != -1)
    swift_once(&qword_1002A9970, sub_1001A3A7C);
  return &static VibrantAppearance.secondaryLight;
}

void static VibrantAppearance.secondaryLight.getter()
{
  if (qword_1002A9970 != -1)
    swift_once(&qword_1002A9970, sub_1001A3A7C);
  sub_1001A4594((uint64_t)&static VibrantAppearance.secondaryLight);
  sub_1001A45A0();
  sub_1001A4570();
}

id sub_1001A3B34()
{
  static VibrantAppearance.tertiaryLight = xmmword_10022AD80;
  qword_1002B7110 = kCAFilterPlusD;
  return kCAFilterPlusD;
}

__int128 *VibrantAppearance.tertiaryLight.unsafeMutableAddressor()
{
  if (qword_1002A9978 != -1)
    swift_once(&qword_1002A9978, sub_1001A3B34);
  return &static VibrantAppearance.tertiaryLight;
}

void static VibrantAppearance.tertiaryLight.getter()
{
  if (qword_1002A9978 != -1)
    swift_once(&qword_1002A9978, sub_1001A3B34);
  sub_1001A4594((uint64_t)&static VibrantAppearance.tertiaryLight);
  sub_1001A45A0();
  sub_1001A4570();
}

id sub_1001A3BEC()
{
  static VibrantAppearance.quaternaryLight = xmmword_10022AD90;
  qword_1002B7130 = kCAFilterPlusD;
  return kCAFilterPlusD;
}

__int128 *VibrantAppearance.quaternaryLight.unsafeMutableAddressor()
{
  if (qword_1002A9980 != -1)
    swift_once(&qword_1002A9980, sub_1001A3BEC);
  return &static VibrantAppearance.quaternaryLight;
}

void static VibrantAppearance.quaternaryLight.getter()
{
  if (qword_1002A9980 != -1)
    swift_once(&qword_1002A9980, sub_1001A3BEC);
  sub_1001A4594((uint64_t)&static VibrantAppearance.quaternaryLight);
  sub_1001A45A0();
  sub_1001A4570();
}

void *VibrantAppearance.primaryDark.unsafeMutableAddressor()
{
  return &static VibrantAppearance.primaryDark;
}

uint64_t static VibrantAppearance.primaryDark.getter()
{
  return 0;
}

id sub_1001A3CC4()
{
  static VibrantAppearance.secondaryDark = xmmword_10022ADA0;
  qword_1002B7150 = kCAFilterPlusL;
  return kCAFilterPlusL;
}

__int128 *VibrantAppearance.secondaryDark.unsafeMutableAddressor()
{
  if (qword_1002A9988 != -1)
    swift_once(&qword_1002A9988, sub_1001A3CC4);
  return &static VibrantAppearance.secondaryDark;
}

void static VibrantAppearance.secondaryDark.getter()
{
  if (qword_1002A9988 != -1)
    swift_once(&qword_1002A9988, sub_1001A3CC4);
  sub_1001A4594((uint64_t)&static VibrantAppearance.secondaryDark);
  sub_1001A45A0();
  sub_1001A4570();
}

id sub_1001A3D7C()
{
  static VibrantAppearance.tertiaryDark = xmmword_10022ADB0;
  qword_1002B7170 = kCAFilterPlusL;
  return kCAFilterPlusL;
}

__int128 *VibrantAppearance.tertiaryDark.unsafeMutableAddressor()
{
  if (qword_1002A9990 != -1)
    swift_once(&qword_1002A9990, sub_1001A3D7C);
  return &static VibrantAppearance.tertiaryDark;
}

void static VibrantAppearance.tertiaryDark.getter()
{
  if (qword_1002A9990 != -1)
    swift_once(&qword_1002A9990, sub_1001A3D7C);
  sub_1001A4594((uint64_t)&static VibrantAppearance.tertiaryDark);
  sub_1001A45A0();
  sub_1001A4570();
}

id sub_1001A3E34()
{
  static VibrantAppearance.quaternaryDark = xmmword_10022ADC0;
  qword_1002B7190 = kCAFilterPlusL;
  return kCAFilterPlusL;
}

__int128 *VibrantAppearance.quaternaryDark.unsafeMutableAddressor()
{
  if (qword_1002A9998 != -1)
    swift_once(&qword_1002A9998, sub_1001A3E34);
  return &static VibrantAppearance.quaternaryDark;
}

void static VibrantAppearance.quaternaryDark.getter()
{
  if (qword_1002A9998 != -1)
    swift_once(&qword_1002A9998, sub_1001A3E34);
  sub_1001A4594((uint64_t)&static VibrantAppearance.quaternaryDark);
  sub_1001A45A0();
  sub_1001A4570();
}

Swift::Void __swiftcall CABackdropLayer.setMaterialAppearance(_:)(EnsembleAgent::MaterialAppearance *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class v12;
  NSString v13;
  Class v14;
  NSString v15;
  Class v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;

  v3 = sub_10002D82C((uint64_t)objc_msgSend(v1, "setScale:", a1->backdropScale), &qword_1002AAF68, CAFilter_ptr);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorSaturate);
  v6 = sub_100182DEC(v4, v5);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v8 = sub_1001A45B0();
  objc_msgSend(v6, "setValue:forKey:", isa, v8);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  v11 = sub_100182DEC(v9, v10);
  v12 = Bool._bridgeToObjectiveC()().super.super.isa;
  v13 = String._bridgeToObjectiveC()();
  sub_1001A457C((uint64_t)v13);

  v14 = Bool._bridgeToObjectiveC()().super.super.isa;
  v15 = String._bridgeToObjectiveC()();
  sub_1001A457C((uint64_t)v15);

  v16 = Double._bridgeToObjectiveC()().super.super.isa;
  v17 = String._bridgeToObjectiveC()();
  sub_1001A457C((uint64_t)v17);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorBrightness);
  v20 = sub_100182DEC(v18, v19);
  v21 = Double._bridgeToObjectiveC()().super.super.isa;
  v22 = sub_1001A45B0();
  objc_msgSend(v20, "setValue:forKey:", v21, v22);

  v23 = sub_1000055B0(&qword_1002AAF70);
  v24 = swift_allocObject(v23, 128, 7);
  *(_OWORD *)(v24 + 16) = xmmword_10021CFF0;
  *(_QWORD *)(v24 + 32) = v6;
  *(_QWORD *)(v24 + 56) = v3;
  *(_QWORD *)(v24 + 64) = v11;
  *(_QWORD *)(v24 + 120) = v3;
  *(_QWORD *)(v24 + 88) = v3;
  *(_QWORD *)(v24 + 96) = v20;
  sub_1001A40DC();
}

void sub_1001A40DC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  Array._bridgeToObjectiveC()();
  v0 = sub_1001A45E8();
  sub_1001A45D0(v0, "setFilters:", v1, v2, v3, v4, v5, v6, v7, v8);
  sub_1000AAEF4(v9);
}

void sub_1001A4120(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  sub_10002D82C(a1, &qword_1002A8E48, CALayer_ptr);
  Array._bridgeToObjectiveC()();
  v1 = sub_1001A45E8();
  sub_1001A45D0(v1, "setSublayers:", v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1000AAEF4(v10);
}

unint64_t sub_1001A4178()
{
  unint64_t result;

  result = qword_1002B4EB0;
  if (!qword_1002B4EB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ColorScheme, &type metadata for ColorScheme);
    atomic_store(result, (unint64_t *)&qword_1002B4EB0);
  }
  return result;
}

unint64_t sub_1001A41B8()
{
  unint64_t result;

  result = qword_1002B4EB8;
  if (!qword_1002B4EB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Material, &type metadata for Material);
    atomic_store(result, (unint64_t *)&qword_1002B4EB8);
  }
  return result;
}

unint64_t sub_1001A41F8()
{
  unint64_t result;

  result = qword_1002B4EC0;
  if (!qword_1002B4EC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Vibrancy, &type metadata for Vibrancy);
    atomic_store(result, (unint64_t *)&qword_1002B4EC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ColorScheme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001A4280 + 4 * byte_10022ADE4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001A42B4 + 4 * byte_10022ADDF[v4]))();
}

uint64_t sub_1001A42B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A42BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A42C4);
  return result;
}

uint64_t sub_1001A42D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A42D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001A42DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A42E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ColorScheme()
{
  sub_10003B1DC();
}

void type metadata accessor for Material()
{
  sub_10003B1DC();
}

uint64_t _s13EnsembleAgent8MaterialOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001A435C + 4 * byte_10022ADEE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001A4390 + 4 * byte_10022ADE9[v4]))();
}

uint64_t sub_1001A4390(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A43A0);
  return result;
}

uint64_t sub_1001A43AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A43B4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001A43B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A43C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Vibrancy()
{
  sub_10003B1DC();
}

uint64_t getEnumTagSinglePayload for MaterialAppearance(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialAppearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

void type metadata accessor for MaterialAppearance()
{
  sub_10003B1DC();
}

uint64_t initializeBufferWithCopyOfBuffer for VibrantAppearance(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void destroy for VibrantAppearance(uint64_t a1)
{

}

_QWORD *assignWithCopy for VibrantAppearance(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = (void *)a1[2];
  v4 = (void *)a2[2];
  a1[2] = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for VibrantAppearance(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

void type metadata accessor for VibrantAppearance()
{
  sub_10003B1DC();
}

void sub_1001A4554(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  a1[2] = a2;
  a1[3].n128_u8[0] = 0;
}

void sub_1001A4560(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  a1[2] = a2;
  a1[3].n128_u8[0] = 1;
}

id sub_1001A457C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, *(SEL *)(v3 + 3808), v2, a1);
}

id sub_1001A4594@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 16);
}

uint64_t sub_1001A45A0()
{
  uint64_t v0;

  return v0;
}

NSString sub_1001A45B0()
{
  return String._bridgeToObjectiveC()();
}

id sub_1001A45D0(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  return objc_msgSend(v10, a2, a10);
}

CGColorRef sub_1001A45DC(CGFloat a1, double a2, double a3, CGFloat a4)
{
  return CGColorCreateSRGB(a1, a1, a1, a4);
}

uint64_t sub_1001A45E8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

_QWORD *sub_1001A45F4(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

id sub_1001A4604(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id sub_1001A4610(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t _BasePasteboardController.deinit()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  sub_1000265F8();
  swift_bridgeObjectRelease();
  sub_1001AB27C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001A4650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_10000B2F8(v1 + 40, (uint64_t)v8, 0);
  v3 = *(_QWORD *)(v1 + 40);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  sub_10003AFBC();
  sub_1001A8B6C(a1);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    sub_10002D790();
  }
  else
  {
    v6 = 0;
  }
  sub_10000E420();
  return v6;
}

_QWORD *sub_1001A46C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21[24];
  _QWORD v22[5];

  sub_100026954();
  sub_10000B2F8(v1 + 40, (uint64_t)v21, 0);
  sub_100043078(v22, *(_QWORD *)(v1 + 40));
  v3 = v22[0];
  v4 = v22[1];
  v5 = v22[3];
  v6 = v22[4];
  v7 = (unint64_t)(v22[2] + 64) >> 6;
  result = (_QWORD *)sub_10003AFBC();
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_22;
    }
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      goto LABEL_25;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_25;
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_25;
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_25;
          v12 = *(_QWORD *)(v4 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_25;
            v12 = *(_QWORD *)(v4 + 8 * v13);
            if (!v12)
            {
              v13 = v5 + 6;
              if (v5 + 6 >= v7)
                goto LABEL_25;
              v12 = *(_QWORD *)(v4 + 8 * v13);
              if (!v12)
              {
                v14 = v5 + 7;
                while (v14 < v7)
                {
                  v12 = *(_QWORD *)(v4 + 8 * v14++);
                  if (v12)
                  {
                    v13 = v14 - 1;
                    goto LABEL_21;
                  }
                }
LABEL_25:
                swift_release();
                return _swiftEmptyArrayStorage;
              }
            }
          }
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10);
    v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 24);
    swift_retain(v15);
    if (static UniversalControlUUID.compare(lhs:rhs:)(v17, v18, v2, v0))
    {
      result = (_QWORD *)swift_release();
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(0);
      v19 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v15);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v20);
    }
  }
  __break(1u);
  return result;
}

void sub_1001A48AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_10002626C();
  v34 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_1000262CC();
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  v12 = sub_10000F6E4();
  sub_10003B160();
  __chkstk_darwin(v13);
  sub_10002641C();
  v16 = v15 - v14;
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v17 = sub_100006FB4(v12, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v16, v17, v12);
  v35 = v7;
  sub_1001AAC00(v7, v11, type metadata accessor for PasteboardDataSession.ID);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.default.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = (uint8_t *)sub_10000797C(12);
    v33 = sub_10000797C(32);
    v36 = v33;
    *(_DWORD *)v22 = 136446210;
    v23 = PasteboardDataSession.ID.label.getter();
    sub_100026754(v23, v24);
    v25 = sub_1001AB1A4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v25, v26, v22 + 4);
    sub_10000E420();
    sub_1000255F0(v11, type metadata accessor for PasteboardDataSession.ID);
    sub_100026484((void *)&_mh_execute_header, v19, v21, "%{public}s: Provider session added", v22);
    sub_1000263F4(v33, v27, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v33);
    sub_100007958((uint64_t)v22);
  }
  else
  {
    sub_1000255F0(v11, type metadata accessor for PasteboardDataSession.ID);
  }

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v16, v12);
  v28 = type metadata accessor for _BasePasteboardController.DataSessionProvider();
  v29 = (_QWORD *)swift_allocObject(v28, 40, 7);
  v30 = sub_1000262F8();
  v31 = sub_1000055B0(&qword_1002B5140);
  sub_10000E330(&qword_1002B5148, type metadata accessor for PasteboardDataTransferID, (uint64_t)&protocol conformance descriptor for PasteboardDataTransferID);
  v29[4] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v30, v31, v32);
  v29[2] = v5;
  v29[3] = v3;
  sub_10000B2F8(v34 + 48, (uint64_t)&v36, 33);
  sub_1001AA934(v29, v35, sub_1000F2964);
  sub_100026860();
  sub_10000E4E0();
}

uint64_t sub_1001A4BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  _BOOL8 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10002626C();
  v33 = v1;
  v34 = v2;
  v3 = v0;
  v5 = v4;
  sub_1000262CC();
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = sub_10000F6E4();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10002641C();
  v14 = v13 - v12;
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v15 = sub_100006FB4(v10, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v15, v10);
  sub_1001AAC00(v5, v9, type metadata accessor for PasteboardDataSession.ID);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v17, v18);
  v20 = os_log_type_enabled(v17, v19);
  if (v20)
  {
    v21 = (uint8_t *)sub_10000797C(12);
    v22 = sub_10000797C(32);
    v32 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = PasteboardDataSession.ID.label.getter();
    sub_100026754(v23, v24);
    v25 = sub_1001AB1A4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v25, v26, v21 + 4, v21 + 12);
    v27 = sub_10000E420();
    sub_1001AB154(v27, type metadata accessor for PasteboardDataSession.ID);
    sub_100026484((void *)&_mh_execute_header, v17, v19, "%{public}s: Provider session removed", v21);
    sub_1000263F4(v22, v28, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v22);
    v29 = (uint64_t)v21;
    v3 = v0;
    sub_100007958(v29);
  }
  else
  {
    sub_1001AB154(v20, type metadata accessor for PasteboardDataSession.ID);
  }

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  sub_10000B2F8(v3 + 48, (uint64_t)&v32, 33);
  v30 = sub_1001A9CC8(v5);
  sub_100026860();
  return v30;
}

uint64_t sub_1001A4E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];

  sub_10000B2F8(v2 + 48, (uint64_t)v13, 0);
  v5 = *(_QWORD *)(v2 + 48);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  sub_10003AFBC();
  sub_1001A8B6C(a2);
  if ((v7 & 1) == 0)
  {
    sub_10000E420();
    return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_retain();
  sub_10000E420();
  sub_10000B2F8(v8 + 32, (uint64_t)&v12, 0);
  v9 = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain(v9);
  swift_release();
  v10 = sub_100041BB8(a1, v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001A4ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  sub_100026954();
  sub_1001AB044();
  sub_10000B2F8(v0 + 48, (uint64_t)v5, 0);
  v1 = sub_10003AFBC();
  sub_1001A6844(v1, (void (*)(char *, uint64_t, __n128))sub_1001AABAC);
  v3 = v2;
  sub_10000E420();
  return v3;
}

uint64_t sub_1001A4FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[3];
  uint64_t v76;
  _BYTE v77[104];
  uint64_t v78;
  uint64_t v79;

  sub_10002626C();
  v78 = v1;
  v79 = v2;
  v4 = v3;
  v74 = v5;
  sub_1000262CC();
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_1000268BC();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v72 = (uint64_t)&v68 - v11;
  sub_1000262F8();
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_1000268BC();
  v15 = v13 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - v17;
  v19 = sub_10000F6E4();
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_1000268BC();
  v23 = v21 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v68 - v25;
  sub_10000B2F8(v0 + 48, (uint64_t)v77, 0);
  v27 = *(_QWORD *)(v0 + 48);
  sub_10003AFBC();
  sub_100041B84(v4, v27);
  v29 = v28;
  sub_10000E420();
  v73 = v29;
  if (v29)
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v30 = sub_100006FB4(v19, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v26, v30, v19);
    sub_1001AAC00(v74, (uint64_t)v18, type metadata accessor for PasteboardDataTransferID);
    v31 = v72;
    sub_1001AAC00(v4, v72, type metadata accessor for PasteboardDataSession.ID);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = sub_10000797C(22);
      v70 = v20;
      v37 = v36;
      v38 = sub_10000797C(64);
      v75[0] = v38;
      *(_DWORD *)v37 = 136446466;
      v69 = v37 + 4;
      v39 = UUID.uuidString.getter(v38);
      sub_100026344(v39, v40);
      v41 = sub_1000602C0();
      v71 = v19;
      v43 = v42;
      sub_10000E420();
      v76 = sub_100006FCC(v41, v43, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v69, v37 + 12);
      swift_bridgeObjectRelease(v43);
      sub_1000255F0((uint64_t)v18, type metadata accessor for PasteboardDataTransferID);
      *(_WORD *)(v37 + 12) = 2082;
      v44 = PasteboardDataSession.ID.label.getter();
      v76 = sub_100124134(v44, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v37 + 14, v37 + 22);
      sub_10000E420();
      sub_1000255F0(v31, type metadata accessor for PasteboardDataSession.ID);
      sub_100026A60((void *)&_mh_execute_header, v33, v35, "%{public}s: Provider removed, session=%{public}s", (uint8_t *)v37);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v38);
      sub_100007958(v37);

      (*(void (**)(char *, uint64_t))(v70 + 8))(v26, v71);
    }
    else
    {
      sub_1000255F0((uint64_t)v18, type metadata accessor for PasteboardDataTransferID);
      sub_1000255F0(v31, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
    }
    sub_10000B2F8(v73 + 32, (uint64_t)v75, 33);
    v65 = sub_1001A9B80(v74);
    swift_endAccess(v75);
    swift_release();
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v46 = sub_100006FB4(v19, (uint64_t)qword_1002B7198);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v46, v19);
    sub_1001AAC00(v74, v15, type metadata accessor for PasteboardDataTransferID);
    sub_1001AAC00(v4, v9, type metadata accessor for PasteboardDataSession.ID);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = sub_10000797C(22);
      v74 = v23;
      v70 = v20;
      v51 = v50;
      v52 = sub_10000797C(64);
      v75[0] = v52;
      *(_DWORD *)v51 = 136446466;
      v71 = v19;
      v53 = UUID.uuidString.getter(v52);
      sub_100026344(v53, v54);
      v55 = sub_1000602C0();
      v57 = v56;
      sub_10000E420();
      v76 = sub_100006FCC(v55, v57, v75);
      sub_1001AB194(v76, v58, v59, v51 + 12);
      swift_bridgeObjectRelease(v57);
      sub_1000255F0(v15, type metadata accessor for PasteboardDataTransferID);
      *(_WORD *)(v51 + 12) = 2082;
      v60 = PasteboardDataSession.ID.label.getter();
      v76 = sub_100124134(v60, v61);
      sub_1001AB194(v76, v62, v63, v51 + 22);
      v64 = sub_10000E420();
      sub_1001AB154(v64, type metadata accessor for PasteboardDataSession.ID);
      sub_100026A60((void *)&_mh_execute_header, v48, v49, "%{public}s: Provider remove for session that is not active, session=%{public}s", (uint8_t *)v51);
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v52);
      sub_100007958(v51);

      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v74, v71);
    }
    else
    {
      sub_1000255F0(v15, type metadata accessor for PasteboardDataTransferID);
      sub_1001AB154(v66, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
    }
    return 0;
  }
  return v65;
}

void _BasePasteboardController.populate(local:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10002626C();
  v3 = v2;
  v4 = sub_10000F6E4();
  sub_10003B160();
  __chkstk_darwin(v5);
  sub_100026518();
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v6 = sub_100006FB4(v4, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v6, v4);
  v7 = sub_10002D790();
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = sub_10000797C(22);
    v12 = sub_10000797C(32);
    v24 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = sub_1001AB120();
    v14 = sub_1000267CC(v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, v15, v16);
    *(_WORD *)(v11 + 12) = 2048;
    v17 = *(_QWORD *)(v3 + 32);
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v23 = *(_QWORD *)(v3 + 32);
      else
        v23 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease();
    }
    v18 = sub_1001AB1A4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v20);
    sub_10002645C();
    sub_100026A60((void *)&_mh_execute_header, v8, v10, "Pasteboard %s Populated (%ld items)", (uint8_t *)v11);
    sub_1000263F4(v12, v21, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v12);
    sub_100007958(v11);

  }
  else
  {

    sub_10002645C();
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v4);
  sub_10000B2F8(v0 + 32, (uint64_t)&v24, 33);
  v22 = sub_10002D790();
  sub_1001AA754(v22);
  sub_100026860();
  sub_10000E4E0();
}

void _BasePasteboardController.clear(local:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  v2 = sub_10000F6E4();
  sub_10003B160();
  __chkstk_darwin(v3);
  sub_100026518();
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v4 = sub_100006FB4(v2, (uint64_t)qword_1002B7198);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v4, v2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)sub_10000797C(12);
    v10 = sub_10000797C(32);
    v17 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_1001AB120();
    v12 = sub_1000267CC(v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, v13, v14);
    sub_100026484((void *)&_mh_execute_header, v6, v8, "Pasteboard %s Cleared", v9);
    sub_1000263F4(v10, v15, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v10);
    sub_100007958((uint64_t)v9);
  }

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  v16 = sub_10000B2F8(v0 + 32, (uint64_t)&v17, 33);
  sub_1001A9DFC(v16);
  sub_100026860();
  sub_10002645C();
  sub_10000E4E0();
}

uint64_t _BasePasteboardController.beginDataSession(for:session:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id;
  sub_10000B2F8(v2 + 40, (uint64_t)v6, 33);
  v4 = sub_10002D790();
  sub_1001AA934(v4, v3, sub_1000F2A3C);
  return swift_endAccess(v6);
}

void _BasePasteboardController.finishDataSession(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t *v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;

  sub_10002626C();
  v2 = v1;
  v44 = sub_1000262CC();
  v49 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_10002641C();
  v5 = v4 - v3;
  sub_1000055B0(&qword_1002B4ED0);
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_1000268BC();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - v11;
  v48 = (uint64_t *)(v0 + 40);
  sub_10000B2F8(v0 + 40, (uint64_t)&v53, 0);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v13 + 64);
  v45 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v47 = (unint64_t)(v15 + 63) >> 6;
  v41 = v47 - 1;
  swift_bridgeObjectRetain();
  v18 = 0;
  v42 = v13 + 104;
  v43 = v5;
  v46 = v13;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v50 = v18;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v23 >= v47)
    {
      v25 = v18;
    }
    else
    {
      v24 = *(_QWORD *)(v45 + 8 * v23);
      if (v24)
        goto LABEL_10;
      v25 = v18 + 1;
      if (v18 + 2 < v47)
      {
        v24 = *(_QWORD *)(v45 + 8 * (v18 + 2));
        if (v24)
        {
          v23 = v18 + 2;
          goto LABEL_10;
        }
        v25 = v18 + 2;
        if (v18 + 3 < v47)
        {
          v24 = *(_QWORD *)(v45 + 8 * (v18 + 3));
          if (v24)
          {
            v23 = v18 + 3;
LABEL_10:
            v17 = (v24 - 1) & v24;
            v20 = __clz(__rbit64(v24)) + (v23 << 6);
            v50 = v23;
LABEL_6:
            sub_1001AAC00(*(_QWORD *)(v13 + 48) + *(_QWORD *)(v49 + 72) * v20, v9, type metadata accessor for PasteboardDataSession.ID);
            v21 = *(_QWORD *)(v13 + 56);
            v22 = sub_1001AB23C();
            *(_QWORD *)(v9 + *(int *)(v22 + 48)) = *(_QWORD *)(v21 + 8 * v20);
            _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v9, 0, 1, v22);
            swift_retain();
            goto LABEL_13;
          }
          v23 = v18 + 4;
          v25 = v18 + 3;
          if (v18 + 4 < v47)
          {
            v24 = *(_QWORD *)(v45 + 8 * v23);
            if (v24)
              goto LABEL_10;
            while (v18 + 5 < v47)
            {
              v24 = *(_QWORD *)(v42 + 8 * v18++);
              if (v24)
              {
                v23 = v18 + 4;
                goto LABEL_10;
              }
            }
            v25 = v41;
          }
        }
      }
    }
    v26 = sub_1001AB23C();
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v9, 1, 1, v26);
    v17 = 0;
    v50 = v25;
LABEL_13:
    sub_1001AABD4(v9, (uint64_t)v12, &qword_1002B4ED0);
    v27 = sub_1001AB23C();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v27) == 1)
    {
      swift_release();
      sub_10000E4E0();
      return;
    }
    v28 = *(_QWORD *)&v12[*(int *)(v27 + 48)];
    sub_1001AABB4((uint64_t)v12, v5, type metadata accessor for PasteboardDataSession.ID);
    if (v28 == v2)
    {
      v29 = v2;
      sub_10000B2F8((uint64_t)v48, (uint64_t)v52, 33);
      sub_10003AFBC();
      sub_1001A8B6C(v5);
      v31 = v30;
      v33 = v32;
      sub_10000E420();
      if ((v33 & 1) != 0)
      {
        v34 = v48;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
        v51 = *v34;
        v36 = v51;
        *v34 = 0x8000000000000000;
        v37 = *(_QWORD *)(v36 + 24);
        sub_1000055B0(&qword_1002B12C8);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v37);
        v38 = v51;
        sub_1000255F0(*(_QWORD *)(v51 + 48) + *(_QWORD *)(v49 + 72) * v31, type metadata accessor for PasteboardDataSession.ID);
        v39 = type metadata accessor for PasteboardDataSession(0);
        sub_10000E330(&qword_1002A99B8, type metadata accessor for PasteboardDataSession.ID, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
        _NativeDictionary._delete(at:)(v31, v38, v44, v39);
        *v34 = v38;
        v5 = v43;
        swift_release();
        sub_10000E50C();
      }
      swift_endAccess(v52);
      v2 = v29;
      swift_release();
      sub_1000255F0(v5, type metadata accessor for PasteboardDataSession.ID);
      v13 = v46;
      v18 = v50;
    }
    else
    {
      sub_1000255F0(v5, type metadata accessor for PasteboardDataSession.ID);
      swift_release();
      v18 = v50;
    }
  }
  __break(1u);
}

uint64_t sub_1001A5D58(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[5];

  v8[3] = type metadata accessor for PasteboardMessage(0);
  sub_10000E330(&qword_1002AE258, type metadata accessor for PasteboardMessage, (uint64_t)&unk_100220C88);
  v8[4] = v2;
  v3 = sub_100005534(v8);
  sub_1001AAC00(a1, (uint64_t)v3, type metadata accessor for PasteboardMessage);
  v4 = sub_1001AB2A4(v8);
  v6 = v5;
  sub_100005988(v8);
  sub_10002517C(v4, v6);
  sub_100128D90();
  sub_100022AEC(v4, v6);
  return sub_100022AEC(v4, v6);
}

uint64_t sub_1001A5E68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1001A5E7C(a1, a2, a3);
}

uint64_t sub_1001A5E7C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a1;
  v5 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v5);
  v42 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v7);
  v48 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PasteboardRepresentation.ID(0);
  __chkstk_darwin(v9);
  v41 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = (id)type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v40);
  v43 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000055B0(&qword_1002AA6D8);
  __chkstk_darwin(v12);
  v46 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PasteboardDataSession.ID(0);
  __chkstk_darwin(v14);
  v15 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v15 - 8);
  v50 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v45);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v39 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v39 - v24;
  sub_10002517C(a2, a3);
  v26 = objc_autoreleasePoolPush();
  v27 = v52;
  sub_10008998C(a2, a3);
  v52 = v27;
  if (!v27)
  {
    objc_autoreleasePoolPop(v26);
    sub_100022AEC(a2, a3);
    sub_1001AABB4((uint64_t)v22, (uint64_t)v25, type metadata accessor for PasteboardMessage);
    sub_1001AAC00((uint64_t)v25, (uint64_t)v19, type metadata accessor for PasteboardMessage);
    v38 = (char *)&loc_1001A6210 + 4 * word_10022B820[swift_getEnumCaseMultiPayload(v19, v45)];
    __asm { BR              X10 }
  }
  objc_autoreleasePoolPop(v26);
  sub_100022AEC(a2, a3);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v28 = v50;
  v29 = sub_100006FB4(v50, (uint64_t)qword_1002B7198);
  v30 = v49;
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 16))(v17, v29, v28);
  __chkstk_darwin(v31);
  v32 = v52;
  *(&v39 - 2) = v52;
  sub_1000E45AC((int)sub_1001A8AE0, 0, (int)sub_100026210, (int)(&v39 - 4), v33, v34, v35, v36, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v28);
  return swift_errorRelease(v32);
}

void sub_1001A6844(uint64_t a1, void (*a2)(char *, uint64_t, __n128))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, __n128);
  _QWORD v38[5];
  uint64_t v39;

  v37 = a2;
  v3 = sub_1000055B0(&qword_1002AA6D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for PasteboardDataSession.ID(0);
  v39 = *(_QWORD *)(v36 - 8);
  v6 = __chkstk_darwin(v36);
  v32 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v31 = (uint64_t)&v30 - v8;
  v9 = sub_1000055B0(&qword_1002B5150);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100043078(v38, a1);
  v12 = v38[0];
  v13 = v38[3];
  v14 = v38[4];
  v34 = v38[1];
  v35 = (unint64_t)(v38[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v33 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_20;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v17 >= v35)
      goto LABEL_27;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    v19 = v13 + 1;
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v35)
        goto LABEL_27;
      v18 = *(_QWORD *)(v34 + 8 * v19);
      if (!v18)
      {
        v19 = v13 + 3;
        if (v13 + 3 >= v35)
          goto LABEL_27;
        v18 = *(_QWORD *)(v34 + 8 * v19);
        if (!v18)
        {
          v19 = v13 + 4;
          if (v13 + 4 >= v35)
            goto LABEL_27;
          v18 = *(_QWORD *)(v34 + 8 * v19);
          if (!v18)
          {
            v19 = v13 + 5;
            if (v13 + 5 >= v35)
              goto LABEL_27;
            v18 = *(_QWORD *)(v34 + 8 * v19);
            if (!v18)
            {
              v20 = v13 + 6;
              while (v20 < v35)
              {
                v18 = *(_QWORD *)(v34 + 8 * v20++);
                if (v18)
                {
                  v19 = v20 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
    v13 = v19;
LABEL_20:
    v21 = *(_QWORD *)(v39 + 72);
    sub_1001AAC00(*(_QWORD *)(v12 + 48) + v21 * v16, (uint64_t)v11, type metadata accessor for PasteboardDataSession.ID);
    v22 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v16);
    *(_QWORD *)&v11[*(int *)(v9 + 48)] = v22;
    v23 = swift_retain(v22);
    v37(v11, v22, v23);
    sub_100025A28((uint64_t)v11, &qword_1002B5150);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v36) == 1)
    {
      sub_100025A28((uint64_t)v5, &qword_1002AA6D8);
    }
    else
    {
      v24 = v31;
      sub_1001AABB4((uint64_t)v5, v31, type metadata accessor for PasteboardDataSession.ID);
      sub_1001AABB4(v24, v32, type metadata accessor for PasteboardDataSession.ID);
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
        v33 = (_QWORD *)sub_100077858();
      v25 = v33[2];
      v26 = v25 + 1;
      if (v25 >= v33[3] >> 1)
      {
        v30 = v25 + 1;
        v29 = sub_100077858();
        v26 = v30;
        v33 = (_QWORD *)v29;
      }
      v27 = v32;
      v28 = v33;
      v33[2] = v26;
      sub_1001AABB4(v27, (uint64_t)v28+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ v25 * v21, type metadata accessor for PasteboardDataSession.ID);
    }
  }
  __break(1u);
}

uint64_t PasteboardType.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (a1 == 1195463236 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  else
  {
    v4 = _s13EnsembleAgent14PasteboardTypeO11stringValueSSvg_0();
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, a2, 0);
    swift_bridgeObjectRelease();
    v8 = v7 ^ 1;
  }
  return v8 & 1;
}

void PasteboardType.hash(into:)()
{
  Hasher._combine(_:)(0);
  sub_1000050D4();
}

Swift::Int PasteboardType.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100047454();
  return sub_10004740C();
}

uint64_t PasteboardType.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  _QWORD v22[4];

  sub_10000DBE4(a1, a1[3]);
  v3 = sub_10016B99C();
  dispatch thunk of Decoder.singleValueContainer()(v3);
  if (!v1)
  {
    sub_10000DBE4(v22, v22[3]);
    v4 = sub_10016B99C();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v4);
    v7 = v5;
    v8 = v6;
    v9 = v5 == 1195463236 && v6 == (void *)0xE400000000000000;
    if (v9
      || (v10 = _s13EnsembleAgent14PasteboardTypeO11stringValueSSvg_0(),
          (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v7, v8, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      v15 = a1[3];
      v16 = a1[4];
      sub_10000DBE4(a1, v15);
      v17 = dispatch thunk of Decoder.codingPath.getter(v15, v16);
      v18._countAndFlagsBits = v7;
      v18._object = v8;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 39;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v17, 0xD000000000000018, 0x8000000100259AF0, 0);
      v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.dataCorrupted(_:), v12);
      swift_willThrow(v20);
    }
    sub_100005988(v22);
  }
  return sub_100005988(a1);
}

uint64_t PasteboardType.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000DBE4(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v8, v1, v2);
  v3 = v9;
  v4 = v10;
  sub_10003FEF8((uint64_t)v8, v9);
  v5 = _s13EnsembleAgent14PasteboardTypeO11stringValueSSvg_0();
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v3, v4);
  return sub_100005988(v8);
}

uint64_t sub_1001A6EF0(_QWORD *a1)
{
  return PasteboardType.init(from:)(a1);
}

uint64_t sub_1001A6F04(_QWORD *a1)
{
  return PasteboardType.encode(to:)(a1);
}

void sub_1001A6F18()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10000897C(v0, qword_1002B7198);
  sub_100006FB4(v0, (uint64_t)qword_1002B7198);
  Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1346980931, 0xE400000000000000);
  sub_1000050D4();
}

uint64_t sub_1001A6F7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

_QWORD *sub_1001A6FA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_weakInit(v1 + 2, 0);
  v3 = type metadata accessor for PasteboardContents();
  v4 = sub_100021298();
  v1[4] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for PasteboardType, v3, v4);
  sub_1000262CC();
  v5 = type metadata accessor for PasteboardDataSession(0);
  sub_1001AB1F0(&qword_1002A99B8, v6, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
  v8 = v7;
  v9 = sub_1000269E0();
  v1[5] = Dictionary.init(dictionaryLiteral:)(v9, v10, v5, v8);
  type metadata accessor for _BasePasteboardController.DataSessionProvider();
  v11 = sub_1000269E0();
  v1[6] = Dictionary.init(dictionaryLiteral:)(v11, v12, v13, v8);
  v1[3] = a1;
  return v1;
}

uint64_t sub_1001A7074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4))
  {
    v7 = 1;
  }
  else
  {
    sub_1001AAC00(a1, a5, type metadata accessor for PasteboardDataSession.ID);
    v7 = 0;
  }
  v8 = type metadata accessor for PasteboardDataSession.ID(0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a5, v7, 1, v8);
}

uint64_t _BasePasteboardController.__deallocating_deinit()
{
  uint64_t v0;

  _BasePasteboardController.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

void sub_1001A70F8()
{
  Swift::String v0;

  sub_100026954();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  sub_1001AB008();
  sub_1000267B4();
  v0._countAndFlagsBits = 0x64656C69614620;
  v0._object = (void *)0xE700000000000000;
  String.append(_:)(v0);
  sub_100026914();
}

void sub_1001A7150(uint64_t a1)
{
  swift_errorRetain(a1);
  sub_1000050D4();
}

uint64_t sub_1001A7170()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  sub_10002DA3C();
  sub_1001AB218();
  v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(30, 2);
  sub_1001AB0B8((uint64_t)"Pasteboard Provider ");
  v1 = UUID.uuidString.getter(v0);
  sub_100026344(v1, v2);
  v3 = sub_1000602C0();
  v5 = v4;
  sub_10000E420();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  sub_10000E50C();
  v7._countAndFlagsBits = 0x6920726F72724520;
  v7._object = (void *)0xEA0000000000206ELL;
  String.append(_:)(v7);
  sub_1000267B4();
  sub_1001AB008();
  return v9;
}

_QWORD *sub_1001A721C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v6 = v5;
  v12 = type metadata accessor for PasteboardDataSession.ID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AAC00(a3, (uint64_t)v15, type metadata accessor for PasteboardDataSession.ID);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 48) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (_QWORD *)swift_allocObject(&unk_100290720, v18 + 8, v16 | 7);
  v19[2] = a5;
  v19[3] = v6;
  v19[4] = a1;
  v19[5] = a2;
  sub_1001AABB4((uint64_t)v15, (uint64_t)v19 + v17, type metadata accessor for PasteboardDataSession.ID);
  *(_QWORD *)((char *)v19 + v18) = a4;
  v20 = type metadata accessor for Completion();
  swift_allocObject(v20, 48, 7);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return Completion.init(file:line:body:)(0xD000000000000063, 0x8000000100252C60, 435, (uint64_t)sub_1001AAE00, (uint64_t)v19);
}

void sub_1001A7370(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[9];

  v43 = a3;
  v44 = a7;
  v40 = a5;
  v41 = a6;
  v42 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v42);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v39 = a2;
    swift_errorRetain(a1);
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v22 = sub_100006FB4(v18, (uint64_t)qword_1002B7198);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v22, v18);
    __chkstk_darwin(v23);
    v24 = v40;
    *(&v38 - 2) = a4;
    *(&v38 - 1) = v24;
    __chkstk_darwin(v25);
    *(&v38 - 2) = a1;
    sub_1000E45AC((int)sub_1001AAE34, v26, (int)sub_100026210, (int)(&v38 - 4), v27, v28, v29, v30, v38, v39, v40, v41, v42, v43, v44, v45[0], v45[1], v45[2], v45[3],
      v45[4],
      v45[5],
      v45[6],
      v45[7],
      v45[8]);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v45[0] = a1;
    swift_errorRetain(a1);
    v31 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
    if (swift_dynamicCast(v14, v45, v31, v15, 6))
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, 0, 1, v15);
      sub_1001AABB4((uint64_t)v14, (uint64_t)v17, type metadata accessor for PasteboardAcquisitionError);
    }
    else
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, 1, 1, v15);
      swift_storeEnumTagMultiPayload(v17, v15, 12);
      sub_100025A28((uint64_t)v14, (uint64_t *)&unk_1002ADCA0);
    }
    v32 = (uint64_t)&v11[*(int *)(sub_1000055B0(&qword_1002AE168) + 64)];
    sub_1001AAC00(v41, (uint64_t)v11, type metadata accessor for PasteboardDataSession.ID);
    v33 = type metadata accessor for PasteboardDataSession.ID(0);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v11, 0, 1, v33);
    sub_1001AAC00((uint64_t)v17, v32, type metadata accessor for PasteboardAcquisitionError);
    swift_storeEnumTagMultiPayload(v11, v42, 2);
    v34 = type metadata accessor for Completion();
    swift_allocObject(v34, 48, 7);
    Completion.init(file:line:)();
    sub_1001A5D58((uint64_t)v11);
    swift_release();
    sub_1000255F0((uint64_t)v11, type metadata accessor for PasteboardMessage);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v36 = swift_allocError(v15, v35, 0, 0);
    sub_1001AAC00((uint64_t)v17, v37, type metadata accessor for PasteboardAcquisitionError);
    Completion.callAsFunction(_:)(v36);
    swift_errorRelease(v36);
    swift_errorRelease(a1);
    sub_1000255F0((uint64_t)v17, type metadata accessor for PasteboardAcquisitionError);
  }
  else
  {
    Completion.callAsFunction(_:)(0);
  }
}

void sub_1001A774C()
{
  sub_100026954();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(20, 1);
  sub_1001AB0B8((uint64_t)"Pasteboard Error in ");
  sub_1000267B4();
  sub_1001AB008();
  sub_100026914();
}

_QWORD *sub_1001A7794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a5;
  v28 = a1;
  v29 = a2;
  v9 = type metadata accessor for PasteboardDataTransferID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PasteboardDataSession.ID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AAC00(a3, (uint64_t)v16, v17);
  sub_1001AAC00(a4, (uint64_t)v12, type metadata accessor for PasteboardDataTransferID);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v15 + v20 + v19) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (_QWORD *)swift_allocObject(&unk_1002906F8, v22 + 8, v18 | v20 | 7);
  v25 = v29;
  v24 = v30;
  v23[2] = a6;
  v23[3] = v24;
  v23[4] = v28;
  v23[5] = v25;
  sub_1001AABB4((uint64_t)v16, (uint64_t)v23 + v19, type metadata accessor for PasteboardDataSession.ID);
  sub_1001AABB4((uint64_t)v12, (uint64_t)v23 + v21, type metadata accessor for PasteboardDataTransferID);
  *(_QWORD *)((char *)v23 + v22) = v31;
  v26 = type metadata accessor for Completion();
  swift_allocObject(v26, 48, 7);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return Completion.init(file:line:body:)(0xD000000000000063, 0x8000000100252C60, 455, (uint64_t)sub_1001AAD00, (uint64_t)v23);
}

void sub_1001A7964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[9];

  v45 = a3;
  v46 = a8;
  v42 = a6;
  v43 = a7;
  v41 = a5;
  v44 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v44);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v40 = a2;
    swift_errorRetain(a1);
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v23 = sub_100006FB4(v19, (uint64_t)qword_1002B7198);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v23, v19);
    __chkstk_darwin(v24);
    v25 = (uint64_t)v41;
    *(&v40 - 2) = a4;
    *(&v40 - 1) = v25;
    __chkstk_darwin(v26);
    *(&v40 - 2) = a1;
    sub_1000E45AC((int)sub_1001AAD5C, v27, (int)sub_10000B008, (int)(&v40 - 4), v28, v29, v30, v31, v40, v41, v42, v43, v44, v45, v46, v47[0], v47[1], v47[2], v47[3],
      v47[4],
      v47[5],
      v47[6],
      v47[7],
      v47[8]);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v47[0] = a1;
    swift_errorRetain(a1);
    v32 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
    if (swift_dynamicCast(v15, v47, v32, v16, 6))
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v15, 0, 1, v16);
      sub_1001AABB4((uint64_t)v15, (uint64_t)v18, type metadata accessor for PasteboardAcquisitionError);
    }
    else
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v15, 1, 1, v16);
      swift_storeEnumTagMultiPayload(v18, v16, 12);
      sub_100025A28((uint64_t)v15, (uint64_t *)&unk_1002ADCA0);
    }
    v33 = sub_1000055B0(&qword_1002AE190);
    v34 = (uint64_t)&v12[*(int *)(v33 + 48)];
    v35 = (uint64_t)&v12[*(int *)(v33 + 64)];
    sub_1001AAC00(v42, (uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
    sub_1001AAC00(v43, v34, type metadata accessor for PasteboardDataTransferID);
    sub_1001AAC00((uint64_t)v18, v35, type metadata accessor for PasteboardAcquisitionError);
    swift_storeEnumTagMultiPayload(v12, v44, 8);
    v36 = type metadata accessor for Completion();
    swift_allocObject(v36, 48, 7);
    Completion.init(file:line:)();
    sub_1001A5D58((uint64_t)v12);
    swift_release();
    sub_1000255F0((uint64_t)v12, type metadata accessor for PasteboardMessage);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v38 = swift_allocError(v16, v37, 0, 0);
    sub_1001AAC00((uint64_t)v18, v39, type metadata accessor for PasteboardAcquisitionError);
    Completion.callAsFunction(_:)(v38);
    swift_errorRelease(v38);
    swift_errorRelease(a1);
    sub_1000255F0((uint64_t)v18, type metadata accessor for PasteboardAcquisitionError);
  }
  else
  {
    Completion.callAsFunction(_:)(0);
  }
}

uint64_t sub_1001A7D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];

  v56 = a1;
  v57 = a2;
  v8 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PasteboardRepresentation.ID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v18 = sub_100006FB4(v14, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  sub_1001AAC00(a3, (uint64_t)v13, type metadata accessor for PasteboardRepresentation.ID);
  v58 = a4;
  sub_1001AAC00(a4, (uint64_t)v10, type metadata accessor for PasteboardDataTransferID);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v20, v21);
  if (os_log_type_enabled(v20, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v53 = v15;
    v24 = v23;
    v25 = swift_slowAlloc(64, -1);
    v52 = v25;
    v61[0] = v25;
    *(_DWORD *)v24 = 136446466;
    v55 = a3;
    v26 = PasteboardRepresentation.ID.label.getter(v25);
    v60 = sub_100006FCC(v26, v27, v61);
    v54 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 4);
    swift_bridgeObjectRelease();
    sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardRepresentation.ID);
    *(_WORD *)(v24 + 12) = 2082;
    v51 = v24 + 14;
    v29 = UUID.uuidString.getter(v28);
    v31 = sub_1000599D0(8, v29, v30);
    v32 = static String._fromSubstring(_:)(v31);
    v34 = v33;
    swift_bridgeObjectRelease();
    v60 = sub_100006FCC(v32, v34, v61);
    a5 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v51);
    a3 = v55;
    swift_bridgeObjectRelease();
    sub_1000255F0((uint64_t)v10, type metadata accessor for PasteboardDataTransferID);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "Pasteboard Request: rep=%{public}s id=%{public}s", (uint8_t *)v24, 0x16u);
    v35 = v52;
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v14);
  }
  else
  {
    sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardRepresentation.ID);
    sub_1000255F0((uint64_t)v10, type metadata accessor for PasteboardDataTransferID);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v36 = v59;
  sub_1001A7794(0xD000000000000036, 0x8000000100259BD0, v57, v58, v56, a5);
  swift_beginAccess(v36 + 32, v61, 0, 0);
  sub_100041C04(*(_QWORD *)(v36 + 32));
  if (v37)
  {
    PasteboardContents.representation(for:)();
    if (v38)
    {
      sub_10001C778();
      swift_release();
    }
    else
    {
      v43 = type metadata accessor for PasteboardAcquisitionError(0);
      sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
      v45 = swift_allocError(v43, v44, 0, 0);
      v46 = a3;
      v48 = v47;
      sub_1001AAC00(v46, v47, type metadata accessor for PasteboardRepresentation.ID);
      swift_storeEnumTagMultiPayload(v48, v43, 1);
      Completion.callAsFunction(_:)(v45);
      swift_errorRelease(v45);
    }
    swift_release();
  }
  else
  {
    v39 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v41 = swift_allocError(v39, v40, 0, 0);
    swift_storeEnumTagMultiPayload(v42, v39, 5);
    Completion.callAsFunction(_:)(v41);
    swift_errorRelease(v41);
  }
  return swift_release();
}

uint64_t sub_1001A8230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = v5;
  v54 = a5;
  v55 = a1;
  v56 = a2;
  v9 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v19 = sub_100006FB4(v15, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
  sub_1001AAC00(a3, (uint64_t)v14, type metadata accessor for PasteboardDataTransferID);
  v53 = a4;
  sub_1001AAC00(a4, (uint64_t)v11, type metadata accessor for PasteboardAcquisitionError);
  v21 = Logger.logObject.getter(v20);
  v23 = v16;
  v24 = static os_log_type_t.default.getter(v21, v22);
  if (os_log_type_enabled(v21, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v51 = v9;
    v26 = v25;
    v27 = swift_slowAlloc(64, -1);
    v48 = v27;
    v58 = v27;
    *(_DWORD *)v26 = 136446466;
    v47 = v26 + 4;
    v49 = v23;
    v28 = UUID.uuidString.getter(v27);
    v30 = sub_1000599D0(8, v28, v29);
    v31 = static String._fromSubstring(_:)(v30);
    v52 = a3;
    v32 = v31;
    v50 = v6;
    v34 = v33;
    swift_bridgeObjectRelease();
    v57 = sub_100006FCC(v32, v34, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v47);
    swift_bridgeObjectRelease();
    sub_1000255F0((uint64_t)v14, type metadata accessor for PasteboardDataTransferID);
    *(_WORD *)(v26 + 12) = 2082;
    PasteboardAcquisitionError.description.getter();
    v57 = sub_100006FCC(v35, v36, &v58);
    a3 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v26 + 14);
    swift_bridgeObjectRelease();
    sub_1000255F0((uint64_t)v11, type metadata accessor for PasteboardAcquisitionError);
    _os_log_impl((void *)&_mh_execute_header, v21, v24, "Pasteboard Receiver Error %{public}s: %{public}s", (uint8_t *)v26, 0x16u);
    v37 = v48;
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v26;
    v9 = v51;
    swift_slowDealloc(v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v18, v15);
  }
  else
  {
    sub_1000255F0((uint64_t)v14, type metadata accessor for PasteboardDataTransferID);
    sub_1000255F0((uint64_t)v11, type metadata accessor for PasteboardAcquisitionError);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v15);
  }
  v39 = v56;
  sub_1001A7794(0xD000000000000047, 0x8000000100259D70, v56, a3, v55, v54);
  v40 = sub_1001A4E0C(a3, v39);
  if (v40)
  {
    v41 = v40;
    sub_10001CAF4();
    swift_release();
    return swift_unknownObjectRelease(v41);
  }
  else
  {
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v44 = swift_allocError(v9, v43, 0, 0);
    v46 = v45;
    sub_1001AAC00(a3, v45, type metadata accessor for PasteboardDataTransferID);
    swift_storeEnumTagMultiPayload(v46, v9, 2);
    Completion.callAsFunction(_:)(v44);
    swift_errorRelease(v44);
    return swift_release();
  }
}

uint64_t sub_1001A8684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1001A721C(0xD000000000000045, 0x8000000100259C30, a2, a1, a7);
  if (sub_1001A4650(a2))
  {
    sub_1000C09EC();
    swift_release();
  }
  else
  {
    v8 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v10 = swift_allocError(v8, v9, 0, 0);
    v12 = v11;
    sub_1001AAC00(a2, v11, type metadata accessor for PasteboardDataSession.ID);
    swift_storeEnumTagMultiPayload(v12, v8, 0);
    Completion.callAsFunction(_:)(v10);
    swift_errorRelease(v10);
  }
  return swift_release();
}

uint64_t sub_1001A87AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1001A721C(0xD000000000000042, 0x8000000100259C80, a2, a1, a6);
  if (sub_1001A4650(a2))
  {
    sub_1000C0ABC();
    swift_release();
  }
  else
  {
    v7 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v9 = swift_allocError(v7, v8, 0, 0);
    v11 = v10;
    sub_1001AAC00(a2, v10, type metadata accessor for PasteboardDataSession.ID);
    swift_storeEnumTagMultiPayload(v11, v7, 0);
    Completion.callAsFunction(_:)(v9);
    swift_errorRelease(v9);
  }
  return swift_release();
}

uint64_t sub_1001A88CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = sub_1001A721C(0xD000000000000041, 0x8000000100259CD0, a2, a1, a4);
  if (sub_1001A4650(a2))
  {
    sub_1000C0B74(a1, a3, (uint64_t)v7);
    swift_release();
  }
  else
  {
    v8 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v10 = swift_allocError(v8, v9, 0, 0);
    v12 = v11;
    sub_1001AAC00(a2, v11, type metadata accessor for PasteboardDataSession.ID);
    swift_storeEnumTagMultiPayload(v12, v8, 0);
    Completion.callAsFunction(_:)(v10);
    swift_errorRelease(v10);
  }
  return swift_release();
}

uint64_t sub_1001A89D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1001A721C(0xD000000000000047, 0x8000000100259D20, a2, a1, a5);
  if (sub_1001A4650(a2))
  {
    sub_1000C0C44(a1, a3, a4);
    swift_release();
  }
  else
  {
    v9 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v11 = swift_allocError(v9, v10, 0, 0);
    v13 = v12;
    sub_1001AAC00(a2, v12, type metadata accessor for PasteboardDataSession.ID);
    swift_storeEnumTagMultiPayload(v13, v9, 0);
    Completion.callAsFunction(_:)(v11);
    swift_errorRelease(v11);
  }
  return swift_release();
}

unint64_t sub_1001A8AE0()
{
  return 0xD000000000000019;
}

Swift::Int sub_1001A8B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = sub_10004740C();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_1001A8B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1001AAEB0(a1);
  sub_100047454();
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1001AB10C(v1, v2);
  v3 = sub_10004740C();
  sub_1001AB230(v3, v3, (uint64_t)type metadata accessor for PasteboardDataSession.ID, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19,
    v20);
  sub_1000C26D8();
}

void sub_1001A8BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1001AAEB0(a1);
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1001AB10C(v1, v2);
  v3 = sub_10004740C();
  sub_1001AB230(v3, v3, (uint64_t)type metadata accessor for PasteboardDataTransferID, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19,
    v20);
  sub_1000C26D8();
}

uint64_t sub_1001A8C40(uint64_t a1)
{
  Swift::Int v1;

  sub_1001AAEB0(a1);
  sub_100047454();
  v1 = sub_10004740C();
  return sub_1001A9224(v1);
}

uint64_t sub_1001A8C70(unint64_t a1, uint64_t a2)
{
  return sub_1001AB134(a1, a2, (uint64_t (*)(unint64_t, uint64_t, Swift::Int))sub_1001A9250);
}

unint64_t sub_1001A8CB8()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;

  sub_1001AB244();
  v2 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  return sub_1001A9338(v1, v2);
}

unint64_t sub_1001A8CE4(uint64_t a1)
{
  unsigned __int8 v1;
  Swift::Int v2;

  v1 = a1;
  sub_1001AAEB0(a1);
  Hasher._combine(_:)(v1);
  v2 = sub_10004740C();
  return sub_1001A93FC(v1, v2);
}

unint64_t sub_1001A8D30(uint64_t a1)
{
  Swift::Int v2;
  __int128 v4[4];

  sub_1001AAEB0(a1);
  sub_100083E80(v4, a1);
  v2 = sub_10004740C();
  return sub_1001A949C(a1, v2);
}

void sub_1001A8D7C()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for UniversalControlLink(0);
  sub_1001AB1F0(&qword_1002A9A28, v0, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
  sub_1001AB15C(v1);
  sub_1001AB1D4();
  sub_10002644C();
}

unint64_t sub_1001A8DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v8;

  sub_1001AAEB0(a1);
  sub_1001AB204();
  UniversalControlDisplayID.hash(into:)();
  v8 = sub_10004740C();
  return sub_1001A959C(a1, a2, a3, a4, v8);
}

void sub_1001A8E58()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000E440();
  sub_1001AB1F0(&qword_1002AD0B0, v0, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1001AB15C(v1);
  sub_1001AB1D4();
  sub_10002644C();
}

unint64_t sub_1001A8EC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1001AB1B4(a1);
  return sub_100013358(v1, v2);
}

unint64_t sub_1001A8EF0(uint64_t a1)
{
  Swift::Int v2;
  _BYTE v4[72];

  sub_1001AAEB0(a1);
  UniversalControlEdge.hash(into:)(v4, a1);
  v2 = sub_10004740C();
  return sub_1001A97BC(a1, v2);
}

uint64_t sub_1001A8F3C(unint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t, Swift::Int))
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  _BYTE v27[16];
  _QWORD v28[9];

  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v8 = a1 >> 24;
  v9 = HIDWORD(a1);
  v10 = a1 >> 40;
  v11 = HIWORD(a1);
  v12 = HIBYTE(a1);
  sub_1001AB044();
  v24 = v14;
  v25 = v13;
  v15 = *(_QWORD *)(v3 + 40);
  v17 = HIBYTE(v16);
  Hasher.init(_seed:)(v28, v15);
  v27[0] = a1;
  v27[1] = v6;
  v27[2] = v7;
  v27[3] = v8;
  v27[4] = v9;
  v27[5] = v10;
  v27[6] = v11;
  v27[7] = v12;
  v27[8] = a2;
  v27[9] = v20;
  v27[10] = v21;
  v27[11] = v22;
  v27[12] = v23;
  v27[13] = v24;
  v27[14] = v25;
  v27[15] = v17;
  Hasher.combine(bytes:)(v27, v28);
  v18 = Hasher._finalize()();
  return a3(a1, a2, v18);
}

unint64_t sub_1001A9074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = sub_10004740C();
  sub_10000E50C();
  return sub_1001A988C(a1, v7);
}

unint64_t sub_1001A90EC(uint64_t a1)
{
  Swift::Int v2;
  _BYTE v4[72];

  sub_1001AAEB0(a1);
  HIDUniversalSenderID.hash(into:)((uint64_t)v4);
  v2 = sub_10004740C();
  return sub_1001A9A00(a1, v2);
}

void sub_1001A9138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  sub_10002626C();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = v23(0);
  __chkstk_darwin(v29);
  v32 = (char *)&a9 - v31;
  v33 = -1 << *(_BYTE *)(v20 + 32);
  v34 = v26 & ~v33;
  if (((*(_QWORD *)(v20 + 64 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
  {
    v35 = ~v33;
    v36 = *(_QWORD *)(v30 + 72);
    do
    {
      sub_1001AAC00(*(_QWORD *)(v20 + 48) + v36 * v34, (uint64_t)v32, v24);
      v37 = static UUID.== infix(_:_:)(v32, v28);
      sub_1000255F0((uint64_t)v32, v24);
      if ((v37 & 1) != 0)
        break;
      v34 = (v34 + 1) & v35;
    }
    while (((*(_QWORD *)(v20 + 64 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) != 0);
  }
  sub_10000E4E0();
}

uint64_t sub_1001A9224(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

unint64_t sub_1001A9250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i + 8), a1, a2))
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i + 8), a1, a2))break;
      }
    }
  }
  return i;
}

unint64_t sub_1001A9338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1001AAB70(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10002D33C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1001A93FC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1001A949C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    swift_bridgeObjectRetain(v7);
    v9 = sub_100198A54(v8, a1);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) == 0)
    {
      v10 = ~v4;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
        swift_bridgeObjectRetain(v11);
        v13 = sub_100198A54(v12, a1);
        swift_bridgeObjectRelease(v11);
        if ((v13 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001A959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v13;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  i = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 8), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 16), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 24), a1, a2, a3, a4) & 1) == 0)
  {
    v13 = ~v7;
    for (i = (i + 1) & v13; ((*(_QWORD *)(v6 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
    {
      if ((static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 8), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 16), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * i + 24), a1, a2, a3, a4) & 1) != 0)break;
    }
  }
  return i;
}

void sub_1001A96A8()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  sub_10002626C();
  v21 = v1;
  v22 = v2;
  v3 = v0;
  v5 = v4;
  v19 = v6;
  v20 = v7;
  v8 = v7(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v3 + 32);
  v13 = v5 & ~v12;
  if (((*(_QWORD *)(v3 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v3 + 48) + v15 * v13, v8);
      sub_10000E330(v21, v20, v22);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v19, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  sub_10000E4E0();
}

unint64_t sub_1001A97BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (static UniversalControlEdge.== infix(_:_:)(*(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + i), a1) & 1) == 0)
  {
    v7 = ~v4;
    for (i = (i + 1) & v7; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v7)
    {
      if ((static UniversalControlEdge.== infix(_:_:)(*(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + i), a1) & 1) != 0)
        break;
    }
  }
  return i;
}

unint64_t sub_1001A988C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1001A9A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;

  v5 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_1001AAC00(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for HIDUniversalSenderID);
      v13 = static HIDUniversalSenderID.__derived_struct_equals(_:_:)((uint64_t)v8, a1);
      sub_1000255F0((uint64_t)v8, type metadata accessor for HIDUniversalSenderID);
      if (v13)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void sub_1001A9B10(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a4(&v6);
  v5 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, *a1);
  *a1 = v5;
  sub_100026914();
}

uint64_t sub_1001A9B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, a4);
}

uint64_t sub_1001A9B80(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A8BD8(a1);
  v6 = v5;
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v17 = *v2;
  v9 = *v2;
  *v2 = 0x8000000000000000;
  v10 = *(_QWORD *)(v9 + 24);
  sub_1000055B0((uint64_t *)&unk_1002AA540);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  v11 = *(_QWORD *)(v17 + 48);
  v12 = type metadata accessor for PasteboardDataTransferID(0);
  sub_1000255F0(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v6, type metadata accessor for PasteboardDataTransferID);
  v13 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 16 * v6);
  v14 = sub_1000055B0(&qword_1002B5140);
  sub_10000E330(&qword_1002B5148, type metadata accessor for PasteboardDataTransferID, (uint64_t)&protocol conformance descriptor for PasteboardDataTransferID);
  _NativeDictionary._delete(at:)(v6, v17, v12, v14);
  v15 = *v2;
  *v2 = v17;
  swift_bridgeObjectRelease(v15);
  return v13;
}

uint64_t sub_1001A9CC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001A8B6C(a1);
  v6 = v5;
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v17 = *v2;
  v9 = *v2;
  *v2 = 0x8000000000000000;
  v10 = *(_QWORD *)(v9 + 24);
  sub_1000055B0(&qword_1002B1288);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  v11 = *(_QWORD *)(v17 + 48);
  v12 = type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000255F0(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v6, type metadata accessor for PasteboardDataSession.ID);
  v13 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v6);
  v14 = type metadata accessor for _BasePasteboardController.DataSessionProvider();
  sub_10000E330(&qword_1002A99B8, type metadata accessor for PasteboardDataSession.ID, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
  _NativeDictionary._delete(at:)(v6, v17, v12, v14);
  v15 = *v2;
  *v2 = v17;
  swift_bridgeObjectRelease(v15);
  return v13;
}

uint64_t sub_1001A9DFC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = sub_1001A8C40(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v12 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_1000055B0(&qword_1002B12D0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v5);
  v10 = type metadata accessor for PasteboardContents();
  sub_100021298();
  _NativeDictionary._delete(at:)(v5, v12, &type metadata for PasteboardType, v10);
  *v2 = v12;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1001A9ED0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  sub_1001AAF18();
  v2 = sub_1001AB250(v1);
  if ((v3 & 1) == 0)
    return 0;
  v4 = v2;
  sub_1001AAEF8();
  sub_1001AAE54();
  v5 = sub_1000055B0(&qword_1002B12A0);
  sub_1001AAE70(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16);
  v13 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 32 * v4);
  _NativeDictionary._delete(at:)(v4, v17, &type metadata for UInt64, &type metadata for EnsembleHIDController.LocalInputDevice);
  *v0 = v17;
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1001A9F90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  sub_1001AAF18();
  sub_1001AB244();
  v3 = *v0;
  swift_bridgeObjectRetain();
  sub_1001A8B6C(v1);
  sub_1001AAF64();
  if ((v3 & 1) == 0)
    return 0;
  sub_1001AAEF8();
  sub_1001AAE54();
  v4 = sub_1000055B0(&qword_1002AA538);
  sub_1001AAE70(v4, v5, v6, v7, v8, v9, v10, v11, v17, v18);
  v12 = *(_QWORD *)(v19 + 48);
  v13 = sub_1000262CC();
  sub_1000255F0(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v2, type metadata accessor for PasteboardDataSession.ID);
  v14 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v2);
  v15 = sub_1000055B0(&qword_1002A99B0);
  sub_10000E330(&qword_1002A99B8, type metadata accessor for PasteboardDataSession.ID, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
  _NativeDictionary._delete(at:)(v2, v19, v13, v15);
  sub_1001AAF88();
  return v14;
}

#error "1001AA0C0: call analysis failed (funcsize=41)"

#error "1001AA164: call analysis failed (funcsize=28)"

void sub_1001AA1A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;

  sub_1001AAF18();
  v2 = v1;
  v4 = sub_1001A8CE4(v3);
  v6 = v5;
  if ((v5 & 1) != 0)
  {
    v7 = v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    v12 = *v0;
    v9 = *v0;
    *v0 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    sub_1000055B0(&qword_1002B1208);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    *(_OWORD *)v2 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v7);
    sub_10013FAE4();
    _NativeDictionary._delete(at:)(v7, v12, &type metadata for EventController.TargetKey, &type metadata for UniversalControlDeviceID);
    v11 = *v0;
    *v0 = v12;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  *(_BYTE *)(v2 + 16) = (v6 & 1) == 0;
  sub_1001AB0A0();
}

#error "1001AA2C4: call analysis failed (funcsize=46)"

#error "1001AA374: call analysis failed (funcsize=32)"

#error "1001AA400: call analysis failed (funcsize=36)"

void sub_1001AA450()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_1001AAF18();
  sub_1001AB244();
  v3 = v2;
  sub_1001AAFFC();
  sub_1001A8E58();
  sub_1001AAED8();
  if ((v1 & 1) != 0)
  {
    sub_1001AAEF8();
    sub_1001AAEBC();
    v4 = sub_1000055B0(&qword_1002B1268);
    sub_1001AAE84(v4, v5, v6, v7, v8, v9, v10, v11, v18, v19);
    v12 = *(_QWORD *)(v20 + 48);
    v13 = sub_10000E440();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v0, v13);
    v14 = *(_QWORD *)(v20 + 56) + 40 * v0;
    v15 = *(_BYTE *)(v14 + 32);
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v14;
    *(_OWORD *)(v3 + 16) = v16;
    *(_BYTE *)(v3 + 32) = v15;
    sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    _NativeDictionary._delete(at:)(v0, v20, v13, &type metadata for ClientAssertionController.Assertion);
    v17 = sub_1001AB1F8();
    sub_1001AAE98(v17);
  }
  else
  {
    *(_BYTE *)(v3 + 32) = 0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    sub_1001AB0A0();
  }
}

#error "1001AA594: call analysis failed (funcsize=43)"

#error "1001AA634: call analysis failed (funcsize=32)"

#error "1001AA6CC: call analysis failed (funcsize=50)"

double sub_1001AA754(uint64_t a1)
{
  _QWORD *v1;
  double result;
  uint64_t v4;

  swift_isUniquelyReferenced_nonNull_native(*v1);
  v4 = *v1;
  *v1 = 0x8000000000000000;
  sub_1000F2978(a1);
  *v1 = v4;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

unint64_t sub_1001AA7BC()
{
  unint64_t result;

  result = qword_1002B4EE0;
  if (!qword_1002B4EE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardType, &type metadata for PasteboardType);
    atomic_store(result, (unint64_t *)&qword_1002B4EE0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PasteboardType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001AA838 + 4 * byte_10022B832[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001AA858 + 4 * byte_10022B837[v4]))();
}

_BYTE *sub_1001AA838(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001AA858(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AA860(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AA868(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AA870(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AA878(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardType()
{
  return &type metadata for PasteboardType;
}

uint64_t type metadata accessor for _BasePasteboardController()
{
  return objc_opt_self(_TtC13EnsembleAgent25_BasePasteboardController);
}

uint64_t type metadata accessor for _BasePasteboardController.DataSessionProvider()
{
  return objc_opt_self(_TtCC13EnsembleAgent25_BasePasteboardController19DataSessionProvider);
}

uint64_t sub_1001AA8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_1001AAF18();
  sub_1001AAFB8();
  sub_1001AB17C();
  sub_1001AB204();
  sub_1000F2B48();
  v8 = sub_1001AAF2C(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11);
  return sub_1001AAE98(v8);
}

uint64_t sub_1001AA928(uint64_t a1, uint64_t a2)
{
  return sub_1001AA934(a1, a2, sub_1000F2C44);
}

#error "1001AA958: call analysis failed (funcsize=12)"

uint64_t sub_1001AA964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F2D34);
}

uint64_t sub_1001AA970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F2DE0);
}

uint64_t sub_1001AA97C(uint64_t a1, uint64_t a2)
{
  return sub_1001AA934(a1, a2, sub_1000F2E04);
}

#error "1001AA9D0: call analysis failed (funcsize=21)"

uint64_t sub_1001AA9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F30B8);
}

#error "1001AAA18: call analysis failed (funcsize=15)"

uint64_t sub_1001AAA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F3170);
}

uint64_t sub_1001AAA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F3194);
}

uint64_t sub_1001AAA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F31B8);
}

uint64_t sub_1001AAA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F31DC);
}

#error "1001AAA7C: call analysis failed (funcsize=13)"

uint64_t sub_1001AAA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F34F0);
}

double sub_1001AAA94()
{
  _OWORD *v0;
  void *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;

  sub_1001AB218();
  sub_1001AAFB8();
  sub_1001AB17C();
  v0 = (_OWORD *)sub_1000269E0();
  v2 = sub_1000F35F0(v0, v1);
  sub_1001AAF2C((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001AAADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA9E8(a1, a2, a3, sub_1000F36D4);
}

uint64_t sub_1001AAAE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  sub_1001AAF18();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = sub_1001AAEF8();
  v26 = *v1;
  *v1 = 0x8000000000000000;
  sub_1000F376C(v13, v11, v9 & 0x101, v7, v5, v3, v14);
  v23 = sub_1001AAF2C(v15, v16, v17, v18, v19, v20, v21, v22, v25, v26);
  return sub_1001AAE98(v23);
}

uint64_t sub_1001AAB64(uint64_t a1, uint64_t a2)
{
  return sub_1001AA934(a1, a2, sub_1000F3958);
}

uint64_t sub_1001AAB70(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1001AABAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1001A7074(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

void sub_1001AABB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100026944(a1, a2, a3);
  sub_1001AB088(v3);
  sub_1000050D4();
}

void sub_1001AABD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000055B0(a3);
  sub_1001AB088(v3);
  sub_1000050D4();
}

void sub_1001AAC00(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100026944(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  sub_1000050D4();
}

uint64_t sub_1001AAC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_1000262CC() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(sub_1000262F8() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v2 | v6 | 7;
  v9 = ((*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_1000265F8();
  sub_1001AB27C();
  v10 = sub_10000E440();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v0 + v3, v10);
  v11(v0 + v7, v10);
  swift_release();
  return swift_deallocObject(v0, v9, v8);
}

void sub_1001AAD00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  sub_1000262CC();
  sub_1001AB1C4();
  v5 = v4 & ~v3;
  sub_1000262F8();
  sub_1001AB0D0();
  sub_1001A7964(a1, v8, v9, v10, v11, v1 + v5, v1 + v6, *(_QWORD *)(v1 + v7));
}

void sub_1001AAD5C()
{
  sub_1001A774C();
}

uint64_t sub_1001AAD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_1000262CC();
  sub_1001AB1C4();
  v3 = v2 & ~v1;
  v5 = v1 | 7;
  v6 = ((*(_QWORD *)(v4 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_1000265F8();
  sub_1001AB27C();
  v7 = sub_10000E440();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1001AAE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000262CC();
  sub_1001AB1C4();
  sub_1001AB0D0();
  sub_1001A7370(a1, v5, v6, v7, v8, v1 + v3, *(_QWORD *)(v1 + v4));
}

uint64_t sub_1001AAE40(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1001AAE54()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

BOOL sub_1001AAE70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_1001AAE84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1001AAE98(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

_QWORD *sub_1001AAEB0(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

void sub_1001AAEBC()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001AAED8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001AAEE8()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001AAEF8()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001AAF00()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1001AAF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_1001AAF3C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = 0x8000000000000000;
  return v1(v5, v4, v3, a1);
}

uint64_t sub_1001AAF64()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1001AAF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 16 * v10 + 8));
}

uint64_t sub_1001AAF88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1001AAF94(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *v2 = 0x8000000000000000;
  return v1(v4, v3, a1);
}

uint64_t sub_1001AAFB8()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001AAFC0()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1001AAFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a3, a4);
}

uint64_t sub_1001AAFFC()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_1001AB008()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1001AB018()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t _s13EnsembleAgent14PasteboardTypeO11stringValueSSvg_0()
{
  return 1195463236;
}

uint64_t sub_1001AB068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_1001AB078()
{
  return 0;
}

uint64_t sub_1001AB088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void sub_1001AB0B8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
}

void sub_1001AB0F0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001AB10C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1001AB120()
{
  uint64_t v0;

  return sub_100006FCC(1195463236, 0xE400000000000000, (uint64_t *)(v0 - 104));
}

uint64_t sub_1001AB134(unint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t, Swift::Int))
{
  return sub_1001A8F3C(a1, a2, a3);
}

uint64_t sub_1001AB13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _NativeDictionary._delete(at:)(a1, a2, a3, v3);
}

unint64_t sub_1001AB144()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000055F0(v1, v0);
}

void sub_1001AB154(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000255F0(v2, a2);
}

uint64_t sub_1001AB15C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_1001AB16C(uint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t, Swift::Int))
{
  uint64_t v3;
  unint64_t v4;

  return sub_1001A8F3C(v4, v3, a3);
}

void sub_1001AB17C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001AB194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t sub_1001AB1A4()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_1001AB1B4(uint64_t a1)
{
  uint64_t v1;

  return static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
}

void sub_1001AB1D4()
{
  sub_1001A96A8();
}

uint64_t sub_1001AB1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return _NativeDictionary._delete(at:)(v5, v4, a3, a4);
}

void sub_1001AB1F0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_10000E330(a1, v3, a3);
}

uint64_t sub_1001AB1F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  result = *v0;
  *v0 = v1;
  return result;
}

uint64_t sub_1001AB224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return _NativeDictionary._delete(at:)(v4, v5, a3, a4);
}

void sub_1001AB230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_1001A9138(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1001AB23C()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

unint64_t sub_1001AB250(uint64_t a1)
{
  return sub_1001A8EC4(a1);
}

uint64_t sub_1001AB25C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001AB270()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1001AB27C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
}

ValueMetadata *type metadata accessor for OPACKEncoder()
{
  return &type metadata for OPACKEncoder;
}

ValueMetadata *type metadata accessor for OPACKDecoder()
{
  return &type metadata for OPACKDecoder;
}

uint64_t sub_1001AB2A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  id v12;
  _BYTE v14[16];

  v4 = type metadata accessor for PropertyListTypeEncoder();
  swift_initStackObject(v4, v14);
  v5 = (void *)PropertyListTypeEncoder.encode(_:)(a1);
  if (!v1)
  {
    v6 = v5;
    v7 = sub_1001AB3FC(v5);
    if (v7)
    {
      v8 = v7;
      v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

    }
    else
    {
      v2 = 0;
      v10 = 0xF000000000000000;
    }
    if (noErr.getter())
      v11 = 1;
    else
      v11 = v10 >> 60 == 15;
    if (v11)
    {
      sub_1000136A0();
      v12 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(0, 0xD000000000000014, 0x8000000100259DE0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/OPACKCoding.swift", 81, 2, 15);
      swift_willThrow(v12);
      swift_unknownObjectRelease(v6);
      sub_100022AD8(v2, v10);
    }
    else
    {
      swift_unknownObjectRelease(v6);
    }
  }
  return v2;
}

id sub_1001AB3FC(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)OPACKEncoderCreateData();

  return v2;
}

uint64_t DigitizerGesture.style.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t DigitizerGesture.useRemoteAcceleration.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t DigitizerGesture.emitFluidGestureEvents.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 18, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t DigitizerGesture.emitFluidGestureEvents.setter(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t result;

  result = sub_1001AD9E8(a1);
  *(_BYTE *)(v2 + 18) = v1;
  return result;
}

uint64_t (*DigitizerGesture.emitFluidGestureEvents.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 18, a1, 33, 0);
  return j__swift_endAccess;
}

HIDUtils::HIDPoint __swiftcall HIDPoint.init()()
{
  double v0;
  double v1;
  double v2;
  HIDUtils::HIDPoint result;

  v0 = 0.0;
  v1 = 0.0;
  v2 = 0.0;
  result.z = v2;
  result.y = v1;
  result.x = v0;
  return result;
}

_QWORD *DigitizerGesture.enableFluidGestureEventsMode(_:)(uint64_t a1)
{
  char v1;
  uint64_t v2;

  sub_1001AD9E8(a1);
  *(_BYTE *)(v2 + 18) = v1;
  return _swiftEmptyArrayStorage;
}

void DigitizerGesture.__allocating_init(useRemoteAcceleration:)(char a1)
{
  sub_1001ADA08();
  DigitizerGesture.init(style:useRemoteAcceleration:)(1, a1);
  sub_1000050D4();
}

void DigitizerGesture.__allocating_init(style:useRemoteAcceleration:)(char a1, char a2)
{
  char v3;

  v3 = a1 & 1;
  sub_1001ADA08();
  DigitizerGesture.init(style:useRemoteAcceleration:)(v3, a2);
  sub_10000B350();
}

void DigitizerGesture.init(style:useRemoteAcceleration:)(char a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  *(_BYTE *)(v2 + 18) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v4 = a1 & 1;
  *(_QWORD *)(v2 + 24) = 0;
  v5 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int, &type metadata for DigitizerGesture.State.Contact, &protocol witness table for Int);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = v5;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 16) = v4;
  *(_BYTE *)(v2 + 17) = a2;
  sub_10000B350();
}

uint64_t variable initialization expression of DigitizerGesture.state()
{
  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int, &type metadata for DigitizerGesture.State.Contact, &protocol witness table for Int);
  return 0;
}

void DigitizerGesture.dispatch(report:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
    v3 = sub_1001ABF64(a1, a2);
  else
    v3 = sub_1001AB674(a1, a2);
  *(_QWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = v5;
  swift_bridgeObjectRelease();
  sub_1000050D4();
}

uint64_t sub_1001AB674(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  unsigned int v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  int v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  void *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  ValueMetadata *v81;
  _UNKNOWN **v82;
  void *v83;
  void *ScrollEvent;
  id v85;
  int v86;
  double v87;
  int v88;
  double v89;
  id v90;
  void *v91;
  void *v92;
  unsigned int EventFlags;
  int v94;
  void *v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  char *v106;
  id v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t result;
  _BYTE *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  ValueMetadata *v125;
  _UNKNOWN **v126;
  _BYTE v127[32];
  _QWORD *v128;

  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[8];
  swift_bridgeObjectRetain();
  sub_10002517C(a1, a2);
  v114 = a1;
  v120 = sub_1001AC380(v5, v6, v7, a1, a2);
  v121 = v8;
  v10 = v9;
  v128 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(v9, 2);
  v11 = sub_1001DAC8C(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v124 = v11;
  sub_1001ACEF8((char **)&v124);
  v115 = a2;
  v113 = v2;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v124 + 16);
  v13 = 0.0;
  v119 = v10;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v116 = v124 + 32;
    v117 = v12 - 1;
    v118 = v124;
    while (1)
    {
      if (*(_QWORD *)(v10 + 16) && (v18 = sub_1001A8EC4(*(_QWORD *)(v116 + 8 * v14)), (v19 & 1) != 0))
      {
        v20 = *(_QWORD *)(v10 + 56) + 56 * v18;
        v21 = *(_QWORD *)v20;
        v22 = *(_QWORD *)(v20 + 8);
        v23 = *(unsigned int *)(v20 + 16);
        v24 = *(_QWORD *)(v20 + 24);
        v25 = *(_QWORD *)(v20 + 32);
        v26 = *(_QWORD *)(v20 + 40);
        v27 = *(_BYTE *)(v20 + 48);
        v28 = *(_BYTE *)(v20 + 49);
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v27 = 0;
        v28 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
      }
      v29 = static ReportID.consumer.getter();
      v30.n128_u64[0] = v24;
      v31.n128_u64[0] = v25;
      v32.n128_u64[0] = v26;
      v33 = (void *)DigitizerEvent.init(time:digitizerType:digitizerEventMask:generationCount:index:identity:point:range:touch:flags:)(v121, v29, v23, v120, v21, v22, v27, v28, v30, v31, v32, 0);
      HIDPoint.simd.getter();
      HIDPoint.simd.getter();
      HIDPoint.init(_:)();
      v34 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
      v36 = v128[2];
      v35 = v128[3];
      if (v36 >= v35 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
      specialized Array._endMutation()(v37);

      v15 |= v23;
      v17 |= v28;
      v16 |= v27;
      if (v117 == v14)
        break;
      ++v14;
      v10 = v119;
      if (v14 >= *(_QWORD *)(v118 + 16))
      {
        __break(1u);
        goto LABEL_45;
      }
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v15 = 0;
  }
  swift_release();
  v38 = v128;
  v39 = 0.0;
  v40 = 0.0;
  if (v128[2])
  {
    HIDPoint.simd.getter();
    HIDPoint.init(_:)();
    v40 = v41;
    v39 = v42;
    v13 = v43;
  }
  v44 = static DigitizerEventMask.resting.getter();
  if (!v38[2])
  {
    swift_bridgeObjectRelease();
    return v120;
  }
  if ((v44 & v15) != 0)
    v45 = ~v44;
  else
    v45 = -1;
  v46 = v45 & v15;
  v47 = static ReportID.appleVendorKeyboard.getter();
  v48.n128_f64[0] = v40;
  v49.n128_f64[0] = v39;
  v50.n128_f64[0] = v13;
  v51 = (void *)DigitizerEvent.init(time:digitizerType:digitizerEventMask:generationCount:index:identity:point:range:touch:flags:)(v121, v47, v46, v120, 0x400018uLL, 1uLL, v16 & 1, v17 & 1, v48, v49, v50, 0);
  v52 = v38[2];
  if (v52)
  {
    v53 = 0;
    do
    {
      v54 = (void *)v38[v53++ + 4];
      *(_QWORD *)&v124 = v51;
      v55 = v54;
      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
      v57 = v56;
      *(_QWORD *)&v124 = v55;
      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
      v59 = v58;
      IOHIDEventAppendEvent(v57, v58, 0);

    }
    while (v52 != v53);
  }
  swift_bridgeObjectRelease();
  v60 = sub_1000055B0(&qword_1002B52F0);
  v61 = swift_allocObject(v60, 72, 7);
  *(_OWORD *)(v61 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v61 + 56) = &type metadata for DigitizerEvent;
  *(_QWORD *)(v61 + 64) = &protocol witness table for DigitizerEvent;
  *(_QWORD *)(v61 + 32) = v51;
  v62 = v51;
  v63 = HIDReport.storage.getter(v114, v115);
  v65 = v64;
  DigitizerReport.contactRange(forIndex:)(5, v114, v115);
  v67 = v66 + 13;
  if (__OFADD__(v66, 13))
  {
LABEL_45:
    __break(1u);
  }
  else if (v67 >= v66)
  {
    v68 = Data._Representation.subscript.getter(v66, v67, v63, v65);
    v70 = v69;
    sub_100022AEC(v63, v65);
    sub_1001DD170(v68, v70);
    ScrollReport.init(_:)();
    if (v72 >> 60 == 15)
    {

    }
    else
    {
      v73 = v71;
      v74 = v72;
      swift_beginAccess(v113 + 18, v127, 0, 0);
      if (v113[18] == 1 && (sub_100127CC4(8, v73, v74), v75))
      {
        v76 = sub_1001ACA88(v121, v73, v74, v40, v39, v13);
        v77 = v76[2];
        if (v77)
        {
          v122 = v73;
          v78 = (uint64_t)(v76 + 4);
          do
          {
            sub_1000445C0(v78, (uint64_t)&v124);
            HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
            v80 = v79;
            v81 = v125;
            v82 = v126;
            sub_10000DBE4(&v124, (uint64_t)v125);
            v83 = (void *)HIDEventProtocol.bridgedValue.getter(v81, v82);
            IOHIDEventAppendEvent(v80, v83, 0);

            sub_100005988(&v124);
            v78 += 40;
            --v77;
          }
          while (v77);

          swift_bridgeObjectRelease();
          v73 = v122;
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        sub_100022AD8(v73, v74);
      }
      else
      {
        sub_1001E0D24(24, v73, v74);
        sub_1001E0D24(32, v73, v74);
        ScrollEvent = (void *)IOHIDEventCreateScrollEvent(0, v121, 0);
        v85 = IOHIDEventRef.__bridgedValue.getter();

        v123 = v73;
        if (v113[17] == 1)
        {
          sub_10013E758(40, v73, v74);
          v87 = (double)v86 / static HIDFixed.scale.getter();
          sub_10013E758(72, v73, v74);
          v89 = (double)v88 / static HIDFixed.scale.getter();
          if (v87 != 0.0 || v89 != 0.0)
          {
            *(_QWORD *)&v124 = v85;
            v90 = v85;
            HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
            v92 = v91;
            EventFlags = IOHIDEventGetEventFlags();

            v94 = static HIDEventFlags.accelerated.getter();
            v95 = (void *)IOHIDEventCreateScrollEvent(0, v121, v94 | EventFlags);
            v96 = IOHIDEventRef.__bridgedValue.getter();

            *(_QWORD *)&v124 = v90;
            v97 = v96;
            HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
            v99 = v98;
            *(_QWORD *)&v124 = v97;
            HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
            v101 = v100;
            IOHIDEventAppendEvent(v99, v100, 0);

            v73 = v123;
          }
        }
        v102 = v85;
        sub_100127CC4(8, v73, v74);
        *(_QWORD *)&v124 = v102;
        HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
        v104 = v103;
        IOHIDEventSetPhase();

        if ((v113[16] & 1) != 0)
        {
          v105 = v102;
          v106 = sub_1001C45AC((char *)1, 2, 1, v61);
          v125 = &type metadata for ScrollEvent;
          v126 = &protocol witness table for ScrollEvent;
          *(_QWORD *)&v124 = v105;
          *((_QWORD *)v106 + 2) = 2;
          sub_100025A50(&v124, (uint64_t)(v106 + 72));

          sub_100022AD8(v123, v74);
        }
        else
        {
          *(_QWORD *)&v124 = v62;
          v107 = v102;
          HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
          v109 = v108;
          *(_QWORD *)&v124 = v107;
          HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
          v111 = v110;
          IOHIDEventAppendEvent(v109, v110, 0);

          sub_100022AD8(v123, v74);
        }
      }
    }
    return v120;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1001ABF64(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *RelativePointerEvent;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v4 = mach_absolute_time();
  RelativePointerEvent = (void *)IOHIDEventCreateRelativePointerEvent(0, v4, 0, 0, 0, 0.0, 0.0, 0.0);
  v6 = IOHIDEventRef.__bridgedValue.getter();

  v7 = sub_1001AB674(a1, a2);
  v9 = v7;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v20 = v7;
    v11 = v8 + 32;
    do
    {
      sub_1000445C0(v11, (uint64_t)v21);
      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
      v13 = v12;
      v14 = v22;
      v15 = v23;
      sub_10000DBE4(v21, v22);
      v16 = (void *)HIDEventProtocol.bridgedValue.getter(v14, v15);
      IOHIDEventAppendEvent(v13, v16, 0);

      sub_100005988(v21);
      v11 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v9 = v20;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v17 = sub_1000055B0(&qword_1002B52F0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v18 + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(v18 + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(v18 + 32) = v6;
  return v9;
}

uint64_t sub_1001AC114()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1001AC11C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7469746E65646920;
  v2._object = (void *)0xEA00000000003A79;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6863756F7420;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  if ((*(_BYTE *)(v0 + 49) & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 49) & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A65676E617220;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x283A6B73616D20;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = DigitizerEventMask.description.getter(*(_DWORD *)(v0 + 16));
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0x3A7865646E69;
}

uint64_t sub_1001AC2F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1001AC114();
  *a1 = result;
  return result;
}

uint64_t sub_1001AC340()
{
  return sub_1001AC11C();
}

uint64_t sub_1001AC380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::Int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt8_optional v19;
  uint64_t value;
  char v21;
  char v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char isUniquelyReferenced_nonNull_native;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  double v79;
  double v80;
  int v81;
  int v82;
  int v83;
  int v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _BOOL8 v89;
  Swift::Int v90;
  unint64_t v91;
  char v92;
  Swift::Bool v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  __int128 v110;
  char v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  int64_t v115;
  _OWORD v116[2];
  _OWORD v117[2];
  _QWORD *v118;
  _QWORD v119[2];
  int v120;
  double v121;
  double v122;
  uint64_t v123;
  char v124;
  char v125;
  char v126;

  v9 = (_QWORD *)Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int, &type metadata for DigitizerGesture.State.Contact, &protocol witness table for Int);
  v10 = a1 + 1;
  do
  {
    v11 = v10;
    v10 = 1;
  }
  while (!v11);
  sub_1001E0D24(8, a4, a5);
  if (v12)
  {
    v13 = v12;
    sub_10002517C(a4, a5);
    v14 = sub_1001DD3F0(0, v13);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v103 = v11;
  v106 = a4;
  v107 = a5;
  v108 = a2;
  v104 = v14[2];
  if (v104)
  {
    v15 = 0;
    v16 = v14 + 5;
    while (1)
    {
      v18 = *(v16 - 1);
      v17 = *v16;
      sub_10002517C(v18, *v16);
      v19 = DigitizerReport.contactIdentity(atIndex:)(v15);
      if ((*(_WORD *)&v19 & 0x100) != 0)
      {
        sub_1001E0D24(0, v18, v17);
        value = v21 & 0x1F;
      }
      else
      {
        value = v19.value;
      }
      v114 = value;
      sub_10002517C(v18, v17);
      sub_1001E0D24(0, v18, v17);
      v23 = v22 & 0x1F;
      v24 = sub_1001E053C(8, v18, v17);
      v25 = sub_1001E053C(24, v18, v17);
      HIDReport.subscript.getter(7, v18, v17);
      v111 = v26;
      HIDReport.subscript.getter(6, v18, v17);
      v28 = v27;
      HIDReport.subscript.getter(8, v18, v17);
      v30 = v29;
      sub_100022AEC(v18, v17);
      v33 = *(_QWORD *)(a2 + 16);
      v34 = 0;
      v109 = v9;
      if (!v33)
        goto LABEL_15;
      v35 = sub_1001A8EC4(v23);
      if ((v36 & 1) == 0)
        break;
      v37 = *(_QWORD *)(a2 + 56) + 56 * v35;
      v33 = *(_QWORD *)(v37 + 8);
      v34 = *(_QWORD *)(v37 + 24);
      v38 = *(double *)(v37 + 32);
      v39 = *(double *)(v37 + 40);
      v40 = *(unsigned __int8 *)(v37 + 48);
      v41 = *(unsigned __int8 *)(v37 + 49);
LABEL_16:
      if (v114 == v33)
        v42 = 0;
      else
        v42 = static DigitizerEventMask.identity.getter();
      v31.n128_f64[0] = v24;
      v32.n128_u64[0] = v34;
      if (!static HIDPoint.== infix(_:_:)(v31, v25, 0.0, v32, v38, v39))
      {
        v43 = static ReportID.appleVendorTopCase.getter();
        if ((v43 & ~v42) != 0)
          v44 = v43;
        else
          v44 = 0;
        v42 |= v44;
      }
      if ((v111 & 1) != v40)
      {
        v45 = static ReportID.keyboard.getter();
        if ((v45 & ~v42) != 0)
          v46 = v45;
        else
          v46 = 0;
        v42 |= v46;
      }
      a2 = v108;
      if ((v28 & 1) != v41)
      {
        v47 = static ReportID.consumer.getter();
        if ((v47 & ~v42) != 0)
          v48 = v47;
        else
          v48 = 0;
        v42 |= v48;
      }
      if ((v30 & 1) != 0)
      {
        v49 = static DigitizerEventMask.resting.getter();
        if ((v49 & ~v42) != 0)
          v50 = v49;
        else
          v50 = 0;
        v42 |= v50;
      }
      ++v15;
      v16 += 2;
      v119[0] = v23;
      v119[1] = v114;
      v120 = v42;
      v121 = v24;
      v122 = v25;
      v123 = 0;
      v124 = v111 & 1;
      v125 = v28 & 1;
      v126 = v30 & 1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v109);
      v118 = v109;
      sub_1001D127C((uint64_t)v119, v23, isUniquelyReferenced_nonNull_native);
      v9 = v109;
      swift_bridgeObjectRelease();
      sub_100022AEC(v18, v17);
      if (v104 == v15)
        goto LABEL_40;
    }
    v33 = 0;
LABEL_15:
    v40 = 0;
    v41 = 0;
    v38 = 0.0;
    v39 = 0.0;
    goto LABEL_16;
  }
LABEL_40:
  swift_bridgeObjectRelease();
  v52 = 0;
  v53 = a2 + 64;
  v54 = 1 << *(_BYTE *)(a2 + 32);
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & *(_QWORD *)(a2 + 64);
  v115 = (unint64_t)(v54 + 63) >> 6;
  v105 = a2 + 64;
  while (v56)
  {
    v57 = __clz(__rbit64(v56));
    v56 &= v56 - 1;
    v58 = v57 | (v52 << 6);
LABEL_56:
    v62 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v58);
    v63 = *(_QWORD *)(a2 + 56) + 56 * v58;
    v65 = *(_QWORD *)v63;
    v64 = *(_QWORD *)(v63 + 8);
    v67 = *(_QWORD *)(v63 + 24);
    v66 = *(_QWORD *)(v63 + 32);
    v68 = *(_QWORD *)(v63 + 40);
    v69 = *(unsigned __int8 *)(v63 + 48);
    v70 = *(unsigned __int8 *)(v63 + 49);
    if (v9[2])
    {
      sub_1001A8EC4(v62);
      if ((v71 & 1) == 0 && ((v70 | v69) & 1) != 0)
        goto LABEL_61;
    }
    else if ((v70 | v69) == 1)
    {
LABEL_61:
      HIDPoint.simd.getter();
      v110 = v73;
      v112 = v72;
      HIDPoint.simd.getter();
      v76 = 0;
      while (1)
      {
        v117[0] = v112;
        v117[1] = v110;
        v78 = 8 * (v76 & 3);
        v79 = *(double *)((char *)v117 + v78);
        v116[0] = v74;
        v116[1] = v75;
        v80 = *(double *)((char *)v116 + v78);
        v77 = v79 == v80;
        if (v76 == 2)
          break;
        while (1)
        {
          ++v76;
          if (v77)
            break;
          if (v76 == 2)
            goto LABEL_72;
          v77 = 0;
        }
      }
      if (v79 != v80)
      {
LABEL_72:
        v81 = static ReportID.appleVendorTopCase.getter();
        if (v81)
        {
          v82 = v81;
          if ((v69 & 1) == 0)
          {
            if (!v70)
              goto LABEL_79;
LABEL_75:
            v83 = static ReportID.consumer.getter();
            if ((v83 & ~v82) != 0)
              v84 = v83;
            else
              v84 = 0;
            v82 |= v84;
            goto LABEL_79;
          }
          goto LABEL_87;
        }
      }
      if ((v69 & 1) == 0)
      {
        v82 = 0;
        if ((v70 & 1) == 0)
          goto LABEL_79;
        goto LABEL_75;
      }
      v82 = 0;
LABEL_87:
      v97 = static ReportID.keyboard.getter();
      if ((v97 & ~v82) != 0)
        v98 = v97;
      else
        v98 = 0;
      v82 |= v98;
      if (v70)
        goto LABEL_75;
LABEL_79:
      v113 = v82;
      v85 = swift_isUniquelyReferenced_nonNull_native(v9);
      v118 = v9;
      v86 = sub_1001A8EC4(v62);
      v88 = v9[2];
      v89 = (v87 & 1) == 0;
      v90 = v88 + v89;
      if (__OFADD__(v88, v89))
        goto LABEL_100;
      v91 = v86;
      v92 = v87;
      sub_1000055B0(&qword_1002B52F8);
      v93 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v85, v90);
      a2 = v108;
      v53 = v105;
      if (v93)
      {
        v94 = sub_1001A8EC4(v62);
        if ((v92 & 1) != (v95 & 1))
          goto LABEL_102;
        v91 = v94;
      }
      v9 = v118;
      if ((v92 & 1) != 0)
      {
        v96 = v118[7] + 56 * v91;
        *(_QWORD *)v96 = v65;
        *(_QWORD *)(v96 + 8) = v64;
        *(_DWORD *)(v96 + 16) = v113;
        *(_QWORD *)(v96 + 24) = v67;
        *(_QWORD *)(v96 + 32) = v66;
        *(_QWORD *)(v96 + 40) = v68;
        *(_WORD *)(v96 + 48) = 0;
        *(_BYTE *)(v96 + 50) = 0;
      }
      else
      {
        v118[(v91 >> 6) + 8] |= 1 << v91;
        *(_QWORD *)(v9[6] + 8 * v91) = v62;
        v99 = v9[7] + 56 * v91;
        *(_QWORD *)v99 = v65;
        *(_QWORD *)(v99 + 8) = v64;
        *(_DWORD *)(v99 + 16) = v113;
        *(_QWORD *)(v99 + 24) = v67;
        *(_QWORD *)(v99 + 32) = v66;
        *(_QWORD *)(v99 + 40) = v68;
        *(_WORD *)(v99 + 48) = 0;
        *(_BYTE *)(v99 + 50) = 0;
        v100 = v9[2];
        v59 = __OFADD__(v100, 1);
        v101 = v100 + 1;
        if (v59)
          goto LABEL_101;
        v9[2] = v101;
      }
      swift_bridgeObjectRelease();
    }
  }
  v59 = __OFADD__(v52++, 1);
  if (v59)
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v52 >= v115)
    goto LABEL_97;
  v60 = *(_QWORD *)(v53 + 8 * v52);
  if (v60)
  {
LABEL_55:
    v56 = (v60 - 1) & v60;
    v58 = __clz(__rbit64(v60)) + (v52 << 6);
    goto LABEL_56;
  }
  v61 = v52 + 1;
  if (v52 + 1 >= v115)
    goto LABEL_97;
  v60 = *(_QWORD *)(v53 + 8 * v61);
  if (v60)
    goto LABEL_54;
  v61 = v52 + 2;
  if (v52 + 2 >= v115)
    goto LABEL_97;
  v60 = *(_QWORD *)(v53 + 8 * v61);
  if (v60)
    goto LABEL_54;
  v61 = v52 + 3;
  if (v52 + 3 >= v115)
  {
LABEL_97:
    sub_100022AEC(v106, v107);
    swift_release();
    return v103;
  }
  v60 = *(_QWORD *)(v53 + 8 * v61);
  if (v60)
  {
LABEL_54:
    v52 = v61;
    goto LABEL_55;
  }
  while (1)
  {
    v52 = v61 + 1;
    if (__OFADD__(v61, 1))
      break;
    if (v52 >= v115)
      goto LABEL_97;
    v60 = *(_QWORD *)(v53 + 8 * v52);
    ++v61;
    if (v60)
      goto LABEL_55;
  }
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1001ACA5C(uint64_t a1, uint64_t a2)
{
  return Dictionary.description.getter(a2, &type metadata for Int, &type metadata for DigitizerGesture.State.Contact, &protocol witness table for Int);
}

uint64_t sub_1001ACA7C()
{
  uint64_t *v0;

  return sub_1001ACA5C(*v0, v0[1]);
}

_QWORD *sub_1001ACA88(uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  _QWORD *v7;
  int v12;
  char v13;
  double v14;
  _QWORD *result;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v7 = (_QWORD *)v6;
  sub_100127CC4(8, a2, a3);
  HIDEventFlags.phase.setter(v12 & 0xFFFFFF8F);
  if (!HIDEventFlags.phase.getter(0))
    return _swiftEmptyArrayStorage;
  v13 = HIDEventFlags.phase.getter(0);
  if ((static ReportID.keyboard.getter() & ~v13) != 0)
  {
    v14 = *(double *)(v6 + 24);
  }
  else
  {
    *(double *)(v6 + 24) = a4;
    *(double *)(v6 + 32) = a5;
    v14 = a4;
    *(double *)(v6 + 40) = a6;
  }
  v16 = static HIDPoint.- infix(_:_:)(a4, a5, a6, v14);
  FluidTouchGestureEvent.init(time:swipeMask:gestureMotion:flavor:delta:progress:flags:)(a1, 0, 1u, 1u, v16, v17, v18, v16 * 2.5);
  v20 = v19;
  v21 = HIDEventFlags.phase.getter(0);
  if ((static ReportID.appleVendorTopCase.getter() & ~v21) == 0
    || (v22 = HIDEventFlags.phase.getter(0),
        (static HIDEventPhase.canceled.getter() & ~v22) == 0))
  {
    v7[3] = 0;
    v7[4] = 0;
    v7[5] = 0;
  }
  v23 = sub_1000055B0(&qword_1002B52F0);
  result = (_QWORD *)swift_allocObject(v23, 72, 7);
  *((_OWORD *)result + 1) = xmmword_10021BBA0;
  result[7] = &type metadata for FluidTouchGestureEvent;
  result[8] = &protocol witness table for FluidTouchGestureEvent;
  result[4] = v20;
  return result;
}

uint64_t DigitizerGesture.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_bridgeObjectRetain(v1);
  v3 = Dictionary.description.getter(v2, &type metadata for Int, &type metadata for DigitizerGesture.State.Contact, &protocol witness table for Int);
  swift_bridgeObjectRelease(v1);
  return v3;
}

uint64_t DigitizerGesture.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t DigitizerGesture.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_1001ACC9C()
{
  return DigitizerGesture.description.getter();
}

void sub_1001ACCBC(uint64_t a1)
{
  DigitizerGesture.dispatch(report:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1000050D4();
}

uint64_t variable initialization expression of HIDReportAccumulator.values()
{
  uint64_t v0;
  unint64_t v1;

  v0 = type metadata accessor for HIDUniversalSenderID(0);
  v1 = sub_1001ACD1C();
  return sub_1001ADA00((uint64_t)_swiftEmptyArrayStorage, v0, (uint64_t)&type metadata for HIDReportAccumulator.Value, v1);
}

unint64_t sub_1001ACD1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B09E8;
  if (!qword_1002B09E8)
  {
    v1 = type metadata accessor for HIDUniversalSenderID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDUniversalSenderID, v1);
    atomic_store(result, (unint64_t *)&qword_1002B09E8);
  }
  return result;
}

void variable initialization expression of HIDReportAccumulator.target(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for NullTarget;
  *(_QWORD *)(a1 + 32) = &off_100292B68;
}

uint64_t variable initialization expression of ServiceFilterReport.report()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = 0x1C00000000;
  v3 = __DataStorage.init(length:)(28);
  sub_1000E6A84((int *)&v2, 0);
  v3 |= 0x4000000000000000uLL;
  Data._Representation.subscript.setter(10, 0);
  return v2;
}

uint64_t variable initialization expression of HIDVirtualServicePool.virtualServices()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for HIDUniversalSenderID(0);
  v1 = type metadata accessor for HIDVirtualServicePool.VirtualService(0);
  v2 = sub_1001ACD1C();
  return sub_1001ADA00((uint64_t)_swiftEmptyArrayStorage, v0, v1, v2);
}

void variable initialization expression of HIDVirtualServicePool.__enabledDeviceTypesLock()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v0 = type metadata accessor for UnfairLock();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *v2 = 0;
  *(_QWORD *)(v1 + 16) = v2;
  sub_1000050D4();
}

uint64_t variable initialization expression of HIDVirtualService.modifiedProperties()
{
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
}

uint64_t variable initialization expression of HIDVirtualService.notificationCenterModeProcesses()
{
  uint64_t v0;

  v0 = type metadata accessor for AnyCancellable(0);
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int32, v0, &protocol witness table for Int32);
}

void sub_1001ACEF8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1001DC700((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = (uint64_t)(v2 + 32);
  v4[1] = v3;
  sub_1001ACF60(v4);
  *a1 = v2;
}

void sub_1001ACF60(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  Swift::Int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1001AD530(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  v85 = a1;
  v86 = sub_1001DA6E8(v3 / 2);
  v90 = v6;
  v88 = v3;
  if (v3 <= 0)
  {
    v9 = _swiftEmptyArrayStorage;
    v25 = _swiftEmptyArrayStorage[2];
LABEL_90:
    if (v25 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v88 >= -1)
      {
        v86[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v77 = *v85;
    while (1)
    {
      v78 = v25 - 2;
      if (v25 < 2)
        break;
      if (!v77)
        goto LABEL_133;
      v79 = v9[2 * v78 + 4];
      v80 = v9[2 * v25 + 3];
      sub_1001AD588((char *)(v77 + 8 * v79), (char *)(v77 + 8 * v9[2 * v25 + 2]), v77 + 8 * v80, v90);
      if (v1)
        goto LABEL_86;
      if (v80 < v79)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_10006CA50();
        v9 = v83;
      }
      if (v78 >= v9[2])
        goto LABEL_120;
      v81 = &v9[2 * v78 + 4];
      *v81 = v79;
      v81[1] = v80;
      v82 = v9[2];
      if (v25 > v82)
        goto LABEL_121;
      memmove(&v9[2 * v25 + 2], &v9[2 * v25 + 4], 16 * (v82 - v25));
      v9[2] = v82 - 1;
      v25 = v82 - 1;
      if (v82 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v7 = 0;
  v8 = *a1;
  v84 = *a1 - 8;
  v9 = _swiftEmptyArrayStorage;
  v87 = v5;
  v89 = *a1;
  while (1)
  {
    v10 = v7++;
    if (v7 < v3)
    {
      v11 = *(_QWORD *)(v8 + 8 * v7);
      v12 = *(_QWORD *)(v8 + 8 * v10);
      v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        v13 = v11;
        while (1)
        {
          v14 = *(_QWORD *)(v8 + 8 * v7);
          if (v11 < v12 == v14 >= v13)
            break;
          ++v7;
          v13 = v14;
          if (v7 >= v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      if (v11 < v12)
      {
        if (v7 < v10)
          goto LABEL_126;
        if (v10 < v7)
        {
          v15 = v7 - 1;
          v16 = v10;
          do
          {
            if (v16 != v15)
            {
              if (!v8)
                goto LABEL_132;
              v17 = *(_QWORD *)(v8 + 8 * v16);
              *(_QWORD *)(v8 + 8 * v16) = *(_QWORD *)(v8 + 8 * v15);
              *(_QWORD *)(v8 + 8 * v15) = v17;
            }
            v56 = ++v16 < v15--;
          }
          while (v56);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10))
        goto LABEL_123;
      if (v7 - v10 < v5)
      {
        v18 = v10 + v5;
        if (__OFADD__(v10, v5))
          goto LABEL_127;
        if (v18 >= v3)
          v18 = v3;
        if (v18 < v10)
          goto LABEL_128;
        if (v7 != v18)
        {
          v19 = (uint64_t *)(v84 + 8 * v7);
          do
          {
            v20 = *(_QWORD *)(v8 + 8 * v7);
            v21 = v10;
            v22 = v19;
            do
            {
              v23 = *v22;
              if (v20 >= *v22)
                break;
              if (!v8)
                goto LABEL_130;
              *v22 = v20;
              v22[1] = v23;
              --v22;
              ++v21;
            }
            while (v7 != v21);
            ++v7;
            ++v19;
          }
          while (v7 != v18);
          v7 = v18;
        }
      }
    }
    if (v7 < v10)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    {
      sub_10006C984();
      v9 = v75;
    }
    v24 = v9[2];
    v25 = v24 + 1;
    v8 = v89;
    if (v24 >= v9[3] >> 1)
    {
      sub_10006C984();
      v8 = v89;
      v9 = v76;
    }
    v9[2] = v25;
    v26 = v9 + 4;
    v27 = &v9[2 * v24 + 4];
    *v27 = v10;
    v27[1] = v7;
    if (v24)
      break;
    v25 = 1;
LABEL_81:
    v5 = v87;
    v3 = v88;
    if (v7 >= v88)
      goto LABEL_90;
  }
  while (1)
  {
    v28 = v25 - 1;
    if (v25 >= 4)
    {
      v33 = &v26[2 * v25];
      v34 = *(v33 - 8);
      v35 = *(v33 - 7);
      v39 = __OFSUB__(v35, v34);
      v36 = v35 - v34;
      if (v39)
        goto LABEL_107;
      v38 = *(v33 - 6);
      v37 = *(v33 - 5);
      v39 = __OFSUB__(v37, v38);
      v31 = v37 - v38;
      v32 = v39;
      if (v39)
        goto LABEL_108;
      v40 = v25 - 2;
      v41 = &v26[2 * v25 - 4];
      v43 = *v41;
      v42 = v41[1];
      v39 = __OFSUB__(v42, v43);
      v44 = v42 - v43;
      if (v39)
        goto LABEL_109;
      v39 = __OFADD__(v31, v44);
      v45 = v31 + v44;
      if (v39)
        goto LABEL_111;
      if (v45 >= v36)
      {
        v63 = &v26[2 * v28];
        v65 = *v63;
        v64 = v63[1];
        v39 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v39)
          goto LABEL_117;
        v56 = v31 < v66;
        goto LABEL_70;
      }
    }
    else
    {
      if (v25 != 3)
      {
        v57 = v9[4];
        v58 = v9[5];
        v39 = __OFSUB__(v58, v57);
        v50 = v58 - v57;
        v51 = v39;
        goto LABEL_64;
      }
      v30 = v9[4];
      v29 = v9[5];
      v39 = __OFSUB__(v29, v30);
      v31 = v29 - v30;
      v32 = v39;
    }
    if ((v32 & 1) != 0)
      goto LABEL_110;
    v40 = v25 - 2;
    v46 = &v26[2 * v25 - 4];
    v48 = *v46;
    v47 = v46[1];
    v49 = __OFSUB__(v47, v48);
    v50 = v47 - v48;
    v51 = v49;
    if (v49)
      goto LABEL_112;
    v52 = &v26[2 * v28];
    v54 = *v52;
    v53 = v52[1];
    v39 = __OFSUB__(v53, v54);
    v55 = v53 - v54;
    if (v39)
      goto LABEL_114;
    if (__OFADD__(v50, v55))
      goto LABEL_116;
    if (v50 + v55 >= v31)
    {
      v56 = v31 < v55;
LABEL_70:
      if (v56)
        v28 = v40;
      goto LABEL_72;
    }
LABEL_64:
    if ((v51 & 1) != 0)
      goto LABEL_113;
    v59 = &v26[2 * v28];
    v61 = *v59;
    v60 = v59[1];
    v39 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v39)
      goto LABEL_115;
    if (v62 < v50)
      goto LABEL_81;
LABEL_72:
    v67 = v9;
    v68 = v28 - 1;
    if (v28 - 1 >= v25)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8)
      goto LABEL_131;
    v69 = &v26[2 * v68];
    v70 = *v69;
    v71 = v26;
    v72 = &v26[2 * v28];
    v73 = v72[1];
    sub_1001AD588((char *)(v8 + 8 * *v69), (char *)(v8 + 8 * *v72), v8 + 8 * v73, v90);
    if (v1)
      break;
    if (v73 < v70)
      goto LABEL_104;
    if (v28 > v67[2])
      goto LABEL_105;
    *v69 = v70;
    v71[2 * v68 + 1] = v73;
    v74 = v67[2];
    if (v28 >= v74)
      goto LABEL_106;
    v9 = v67;
    v25 = v74 - 1;
    memmove(v72, v72 + 2, 16 * (v74 - 1 - v28));
    v26 = v71;
    v67[2] = v74 - 1;
    v8 = v89;
    if (v74 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v88 < -1)
    goto LABEL_125;
  v86[2] = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_1001AD530(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1001AD588(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_1001DA7E4(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_1001DA7E4(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_1001DA7E4(v4, (v12 - v4) / 8, v6);
  return 1;
}

unint64_t sub_1001AD704()
{
  unint64_t result;

  result = qword_1002B5208;
  if (!qword_1002B5208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DigitizerGesture.Style, &type metadata for DigitizerGesture.Style);
    atomic_store(result, (unint64_t *)&qword_1002B5208);
  }
  return result;
}

_UNKNOWN **sub_1001AD740()
{
  return &protocol witness table for DigitizerReport;
}

uint64_t type metadata accessor for DigitizerGesture()
{
  return objc_opt_self(_TtC11EnsembleHID16DigitizerGesture);
}

uint64_t storeEnumTagSinglePayload for DigitizerGesture.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001AD7B8 + 4 * byte_10022BA65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001AD7EC + 4 * byte_10022BA60[v4]))();
}

uint64_t sub_1001AD7EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AD7F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AD7FCLL);
  return result;
}

uint64_t sub_1001AD808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AD810);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001AD814(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AD81C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DigitizerGesture.Style()
{
  return &type metadata for DigitizerGesture.Style;
}

void sub_1001AD83C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_1000050D4();
}

_QWORD *assignWithCopy for DigitizerGesture.State(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for DigitizerGesture.State(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for DigitizerGesture.State()
{
  return &type metadata for DigitizerGesture.State;
}

__n128 initializeWithCopy for DigitizerGesture.State.Contact(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DigitizerGesture.State.Contact(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 51))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitizerGesture.State.Contact(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 51) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 51) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitizerGesture.State.Contact()
{
  return &type metadata for DigitizerGesture.State.Contact;
}

void *sub_1001AD9DC()
{
  return &protocol witness table for Int;
}

uint64_t sub_1001AD9E8(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1 + 18, va, 1, 0);
}

uint64_t sub_1001ADA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, a3, a4);
}

uint64_t sub_1001ADA08()
{
  uint64_t v0;

  return swift_allocObject(v0, 72, 7);
}

void *ReportID.keyboard.unsafeMutableAddressor()
{
  return &static ReportID.keyboard;
}

void *ReportID.consumer.unsafeMutableAddressor()
{
  return &static ReportID.consumer;
}

void *ReportID.appleVendorKeyboard.unsafeMutableAddressor()
{
  return &static ReportID.appleVendorKeyboard;
}

void *ReportID.appleVendorTopCase.unsafeMutableAddressor()
{
  return &static ReportID.appleVendorTopCase;
}

void *ReportID.pointer.unsafeMutableAddressor()
{
  return &static ReportID.pointer;
}

void *ReportID.button.unsafeMutableAddressor()
{
  return &static ReportID.button;
}

void *ReportID.scroll.unsafeMutableAddressor()
{
  return &static ReportID.scroll;
}

void *ReportID.digitizer.unsafeMutableAddressor()
{
  return &static ReportID.digitizer;
}

void *ReportID.serviceFilter.unsafeMutableAddressor()
{
  return &static ReportID.serviceFilter;
}

uint64_t static ReportID.serviceFilter.getter()
{
  return 10;
}

void *ReportID.dockSwipe.unsafeMutableAddressor()
{
  return &static ReportID.dockSwipe;
}

uint64_t static ReportID.dockSwipe.getter()
{
  return 11;
}

void *ReportID.fluidTouchGesture.unsafeMutableAddressor()
{
  return &static ReportID.fluidTouchGesture;
}

void *ReportID.navigationSwipe.unsafeMutableAddressor()
{
  return &static ReportID.navigationSwipe;
}

void *ReportID.zoomToggle.unsafeMutableAddressor()
{
  return &static ReportID.zoomToggle;
}

uint64_t static ReportID.zoomToggle.getter()
{
  return 14;
}

void *ReportID.scale.unsafeMutableAddressor()
{
  return &static ReportID.scale;
}

uint64_t static ReportID.scale.getter()
{
  return 15;
}

void *ReportID.rotation.unsafeMutableAddressor()
{
  return &static ReportID.rotation;
}

void *ReportID.translation.unsafeMutableAddressor()
{
  return &static ReportID.translation;
}

uint64_t static ReportID.translation.getter()
{
  return 17;
}

void *EnsembleUsage.page.unsafeMutableAddressor()
{
  return &static EnsembleUsage.page;
}

uint64_t static EnsembleUsage.page.getter()
{
  return 65306;
}

uint64_t ConsumerUsage.usage.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

EnsembleHID::EnsembleUsage_optional __swiftcall EnsembleUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  int v1;

  sub_1001ADD54();
  return (EnsembleHID::EnsembleUsage_optional)v1;
}

EnsembleHID::EnsembleUsage_optional __swiftcall EnsembleUsage.init(_:)(Swift::Int a1)
{
  int v1;

  sub_1001ADD54();
  return (EnsembleHID::EnsembleUsage_optional)v1;
}

EnsembleHID::EnsembleUsage_optional __swiftcall EnsembleUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  int v2;

  sub_1001ADD54();
  return (EnsembleHID::EnsembleUsage_optional)v2;
}

uint64_t sub_1001ADB78()
{
  unsigned __int16 *v0;

  return ConsumerUsage.usage.getter(*v0);
}

uint64_t sub_1001ADB80@<X0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(EnsembleHID::EnsembleUsage_optional *)&result = EnsembleUsage.init(page:usage:)(a1, a2);
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_1001ADBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return HIDUsageProtocol.init<A>(_:)(a1, a4, a2, a5, a3, a6);
}

uint64_t sub_1001ADBC4@<X0>(Swift::UInt16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(EnsembleHID::EnsembleUsage_optional *)&result = EnsembleUsage.init(rawValue:)(*a1);
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

void sub_1001ADBF4(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t sub_1001ADC00()
{
  unsigned __int16 *v0;

  return sub_1001DCBA0(*v0);
}

void sub_1001ADC08(int a1)
{
  Swift::UInt16 *v1;

  sub_1001DCC38(a1, *v1);
}

uint64_t sub_1001ADC10(uint64_t a1)
{
  unsigned __int16 *v1;

  return sub_1001DCC50(a1, *v1);
}

BOOL sub_1001ADC18(__int16 *a1, __int16 *a2)
{
  return sub_1001BCCE4(*a1, *a2);
}

void *EnsembleUsage.report.unsafeMutableAddressor()
{
  return &static EnsembleUsage.report;
}

uint64_t static EnsembleUsage.report.getter()
{
  return 57344;
}

void *EnsembleUsage.control.unsafeMutableAddressor()
{
  return &static EnsembleUsage.control;
}

uint64_t static EnsembleUsage.control.getter()
{
  return 57345;
}

void *EnsembleUsage.synthetic.unsafeMutableAddressor()
{
  return &static EnsembleUsage.synthetic;
}

uint64_t static EnsembleUsage.synthetic.getter()
{
  return 57346;
}

void *EnsembleUsage.copy.unsafeMutableAddressor()
{
  return &static EnsembleUsage.copy;
}

uint64_t static EnsembleUsage.copy.getter()
{
  return 57347;
}

void *EnsembleUsage.serviceSelection.unsafeMutableAddressor()
{
  return &static EnsembleUsage.serviceSelection;
}

uint64_t static EnsembleUsage.serviceSelection.getter()
{
  return 57584;
}

void *EnsembleUsage.keyboardState.unsafeMutableAddressor()
{
  return &static EnsembleUsage.keyboardState;
}

uint64_t static EnsembleUsage.keyboardState.getter()
{
  return 57585;
}

void *EnsembleUsage.resting.unsafeMutableAddressor()
{
  return &static EnsembleUsage.resting;
}

uint64_t static EnsembleUsage.resting.getter()
{
  return 57586;
}

void *EnsembleUsage.multitouchContactIdentity.unsafeMutableAddressor()
{
  return &static EnsembleUsage.multitouchContactIdentity;
}

uint64_t static EnsembleUsage.multitouchContactIdentity.getter()
{
  return 57588;
}

unint64_t sub_1001ADCC8()
{
  unint64_t result;

  result = qword_1002B5300;
  if (!qword_1002B5300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnsembleUsage, &type metadata for EnsembleUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5300);
  }
  return result;
}

unint64_t sub_1001ADD08()
{
  unint64_t result;

  result = qword_1002B5308;
  if (!qword_1002B5308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnsembleUsage, &type metadata for EnsembleUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5308);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleUsage()
{
  return &type metadata for EnsembleUsage;
}

uint64_t RotationReport.z.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = sub_1000E6BC4();
  v5 = sub_10013F740();
  v6 = sub_1000E6C3C();
  v7 = sub_1000E6C00();
  return HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, a1, a2, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v4, v5, v6, v7);
}

uint64_t TranslationReport.phase.getter(uint64_t a1, unint64_t a2)
{
  int v2;

  sub_100127CC4(8, a1, a2);
  return v2 & 0xFFFFFF8F;
}

void *RotationReport.reportID.unsafeMutableAddressor()
{
  return &static RotationReport.reportID;
}

void *RotationReport.bitCount.unsafeMutableAddressor()
{
  return &static RotationReport.bitCount;
}

void sub_1001ADE20()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static RotationReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static RotationReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001ADE78, v2);
}

uint64_t sub_1001ADE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v83;
  _BYTE *v84;
  _QWORD *v85;
  _BYTE *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  __n128 v90;
  void (*v91)(_QWORD *, uint64_t, __n128);
  void (*v92)(_BYTE *, uint64_t);
  void (*v93)(_BYTE *, uint64_t);
  _BYTE v95[12];
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  void (*v101)(_BYTE *);
  uint64_t v102;
  void (*v103)(_BYTE *, uint64_t, uint64_t);
  uint64_t v104;
  unsigned int v105;
  void (*v106)(_BYTE *);
  uint64_t v107;
  unsigned int v108;
  void (*v109)(unsigned __int8 *);
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;

  type metadata accessor for Input.Bit8();
  v123 = *(_QWORD *)(v0 - 8);
  v124 = v0;
  __chkstk_darwin(v0);
  v122 = &v95[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit6();
  v130 = v2;
  v120 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v119 = &v95[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit5();
  v128 = v4;
  v118 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v116 = &v95[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit4();
  v127 = v6;
  v115 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v114 = &v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit3();
  v9 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  __chkstk_darwin(v8);
  v113 = &v95[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit2();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  __chkstk_darwin(v11);
  v112 = &v95[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit1();
  v16 = *(_QWORD *)(v15 - 8);
  v107 = v15;
  __chkstk_darwin(v15);
  v111 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit0();
  v19 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  __chkstk_darwin(v18);
  v21 = &v95[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input();
  v23 = *(_QWORD *)(v22 - 8);
  v125 = v22;
  v126 = v23;
  __chkstk_darwin(v22);
  v135 = &v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v137 = &v95[-v26];
  type metadata accessor for ReportCount();
  v121 = v27;
  v136 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v131 = &v95[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  v132 = &v95[-v30];
  type metadata accessor for ReportSize();
  v117 = v31;
  v134 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v129 = &v95[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v33);
  v133 = &v95[-v34];
  ReportSize.init(_:)(8, v35, v36, v37, v38, v39, v40, v41);
  ReportCount.init(_:)(1, v42, v43, v44, v45, v46, v47, v48);
  v108 = 0;
  v109 = *(void (**)(unsigned __int8 *))(v19 + 104);
  v109(v21);
  v105 = 1;
  v106 = *(void (**)(_BYTE *))(v16 + 104);
  v49 = v111;
  v106(v111);
  v103 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 104);
  v50 = v112;
  v103(v112, 0, v12);
  v100 = 0;
  v101 = *(void (**)(_BYTE *))(v9 + 104);
  v51 = v113;
  v101(v113);
  v99 = 0;
  v115 = *(_QWORD *)(v115 + 104);
  v52 = v114;
  ((void (*)(_BYTE *))v115)(v114);
  v98 = 0;
  v118 = *(_QWORD *)(v118 + 104);
  v53 = v116;
  ((void (*)(_BYTE *))v118)(v116);
  v97 = 0;
  v54 = v119;
  v120 = *(_QWORD *)(v120 + 104);
  ((void (*)(_BYTE *))v120)(v119);
  v96 = 0;
  v55 = v122;
  v123 = *(_QWORD *)(v123 + 104);
  v56 = v124;
  ((void (*)(_BYTE *))v123)(v122);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v137);
  ReportSize.init(_:)(16, v57, v58, v59, v60, v61, v62, v63);
  ReportCount.init(_:)(1, v64, v65, v66, v67, v68, v69, v70);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v109)(v21, v108, v110);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v106)(v49, v105, v107);
  v103(v50, 1, v104);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v101)(v51, v100, v102);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v115)(v52, v99, v127);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v118)(v53, v98, v128);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v120)(v54, v97, v130);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v123)(v55, v96, v56);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v135);
  v71 = sub_1000055B0(&qword_1002B5310);
  v72 = swift_allocObject(v71, 312, 7);
  *(_OWORD *)(v72 + 16) = xmmword_10021F8C0;
  *(_QWORD *)(v72 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v72 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v72 + 32) = 16;
  v73 = v117;
  *(_QWORD *)(v72 + 96) = v117;
  *(_QWORD *)(v72 + 104) = &protocol witness table for ReportSize;
  v74 = sub_100005534((_QWORD *)(v72 + 72));
  v75 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v134 + 16);
  v75(v74, v133, v73);
  v76 = v121;
  *(_QWORD *)(v72 + 136) = v121;
  *(_QWORD *)(v72 + 144) = &protocol witness table for ReportCount;
  v77 = sub_100005534((_QWORD *)(v72 + 112));
  v78 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v136 + 16);
  v78(v77, v132, v76);
  v79 = v125;
  *(_QWORD *)(v72 + 176) = v125;
  *(_QWORD *)(v72 + 184) = &protocol witness table for Input;
  v80 = sub_100005534((_QWORD *)(v72 + 152));
  v81 = v126;
  v82 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v126 + 16);
  v82(v80, v137, v79);
  *(_QWORD *)(v72 + 216) = v73;
  *(_QWORD *)(v72 + 224) = &protocol witness table for ReportSize;
  v83 = sub_100005534((_QWORD *)(v72 + 192));
  v84 = v129;
  v75(v83, v129, v73);
  *(_QWORD *)(v72 + 256) = v76;
  *(_QWORD *)(v72 + 264) = &protocol witness table for ReportCount;
  v85 = sub_100005534((_QWORD *)(v72 + 232));
  v86 = v131;
  v78(v85, v131, v76);
  *(_QWORD *)(v72 + 296) = v79;
  *(_QWORD *)(v72 + 304) = &protocol witness table for Input;
  v87 = sub_100005534((_QWORD *)(v72 + 272));
  v88 = v135;
  v82(v87, v135, v79);
  v89 = static HIDReportDescriptor.Builder.buildBlock(_:)(v72);
  v90 = swift_bridgeObjectRelease();
  v91 = *(void (**)(_QWORD *, uint64_t, __n128))(v81 + 8);
  v91(v88, v79, v90);
  v92 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
  v92(v86, v76);
  v93 = *(void (**)(_BYTE *, uint64_t))(v134 + 8);
  v93(v84, v73);
  ((void (*)(_QWORD *, uint64_t))v91)(v137, v79);
  v92(v132, v76);
  v93(v133, v73);
  return v89;
}

uint64_t RotationReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B5158 != -1)
    swift_once(&qword_1002B5158, sub_1001ADE20);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static RotationReport.descriptor);
}

uint64_t static RotationReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B5158 != -1)
    swift_once(&qword_1002B5158, sub_1001ADE20);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static RotationReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001AE73C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = RotationReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

void TranslationReport.report.getter(uint64_t a1, unint64_t a2)
{
  sub_10002517C(a1, a2);
  sub_100026B88();
  sub_1000050D4();
}

uint64_t HIDReport.storage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100022AEC(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t RotationReport.init()()
{
  return 16;
}

void RotationReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001AE868()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 4uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(16, 0x4000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

void sub_1001AE934()
{
  uint64_t v0;

  sub_10002517C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  sub_1000050D4();
}

uint64_t sub_1001AE960@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = RotationReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001AE984(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  RotationReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

uint64_t sub_1001AE9A4()
{
  uint64_t v0;

  return sub_1001E2E7C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void TranslationReport.flags.getter(uint64_t a1, unint64_t a2)
{
  sub_100127CC4(8, a1, a2);
}

void TranslationReport.flags.setter(uint64_t a1)
{
  sub_1000E4D78(a1, 8);
}

void sub_1001AE9C4(uint64_t a1, char a2)
{
  if ((a2 & 7) != 0)
  {
    sub_1001AEFF0();
    __asm { BR              X11 }
  }
  sub_1001AF00C();
  __asm { BR              X12 }
}

void sub_1001AEBB8()
{
  char v0;

  sub_1000E7368();
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x1001AEBD0);
  }
  JUMPOUT(0x1001AEA4CLL);
}

void TranslationReport.flags.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_1001AF000();
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000050D4();
}

void sub_1001AEC80(uint64_t a1)
{
  sub_1000E4D78(*(unsigned __int8 *)(a1 + 8), 8);
  sub_1000050D4();
}

void TranslationReport.phase.setter()
{
  unsigned int v0;
  uint64_t v1;
  char v2;

  sub_1001AF000();
  v1 = sub_1001AF03C(v0);
  sub_1000E4D78(v1, v2);
}

void TranslationReport.phase.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_1001AF000();
  *(_BYTE *)(a1 + 8) = v3 & 0x8F;
  sub_1000050D4();
}

void sub_1001AECFC()
{
  unsigned int v0;
  uint64_t v1;
  char v2;

  sub_1001AF000();
  v1 = sub_1001AF03C(v0);
  sub_1000E4D78(v1, v2);
  sub_1000050D4();
}

uint64_t TranslationReport.x.setter(double a1)
{
  return sub_1000E618C(16, a1);
}

void (*RotationReport.z.modify(_QWORD *a1))(double *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  a1[1] = v1;
  v5 = v1;
  v3 = *v1;
  v4 = v5[1];
  v6 = sub_1000E6BC4();
  v7 = sub_10013F740();
  v8 = sub_1000E6C3C();
  v9 = sub_1000E6C00();
  HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, v3, v4, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v6, v7, v8, v9);
  *a1 = v10;
  return sub_1001AEDC8;
}

void sub_1001AEDC8(double *a1)
{
  sub_1000E618C(16, *a1);
  sub_1000050D4();
}

void sub_1001AEDEC(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_1001AEE48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

ValueMetadata *type metadata accessor for RotationReport()
{
  return &type metadata for RotationReport;
}

uint64_t sub_1001AEFE4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Data.subscript.getter(a3 >> 3, a1, a2);
}

void sub_1001AF000()
{
  uint64_t v0;

  sub_100127CC4(8, *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1001AF020(uint64_t a1)
{
  uint64_t v1;

  return Data._Representation.subscript.setter(a1, v1);
}

uint64_t sub_1001AF028(uint64_t a1)
{
  uint64_t v1;

  return Data._Representation.subscript.setter(a1, v1 >> 3);
}

uint64_t sub_1001AF030()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1001AF03C(unsigned int a1)
{
  int v1;

  return v1 & 0xFFFFFF8F | (16 * ((a1 >> 4) & 7));
}

void *ScaleReport.reportID.unsafeMutableAddressor()
{
  return &static ScaleReport.reportID;
}

void *ScaleReport.bitCount.unsafeMutableAddressor()
{
  return &static ScaleReport.bitCount;
}

void sub_1001AF068()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static ScaleReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static ScaleReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001AF0C0, v2);
}

uint64_t sub_1001AF0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v83;
  _BYTE *v84;
  _QWORD *v85;
  _BYTE *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  __n128 v90;
  void (*v91)(_QWORD *, uint64_t, __n128);
  void (*v92)(_BYTE *, uint64_t);
  void (*v93)(_BYTE *, uint64_t);
  _BYTE v95[12];
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  void (*v101)(_BYTE *);
  uint64_t v102;
  void (*v103)(_BYTE *, uint64_t, uint64_t);
  uint64_t v104;
  unsigned int v105;
  void (*v106)(_BYTE *);
  uint64_t v107;
  unsigned int v108;
  void (*v109)(unsigned __int8 *);
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;

  type metadata accessor for Input.Bit8();
  v123 = *(_QWORD *)(v0 - 8);
  v124 = v0;
  __chkstk_darwin(v0);
  v122 = &v95[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit6();
  v130 = v2;
  v120 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v119 = &v95[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit5();
  v128 = v4;
  v118 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v116 = &v95[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit4();
  v127 = v6;
  v115 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v114 = &v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit3();
  v9 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  __chkstk_darwin(v8);
  v113 = &v95[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit2();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  __chkstk_darwin(v11);
  v112 = &v95[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit1();
  v16 = *(_QWORD *)(v15 - 8);
  v107 = v15;
  __chkstk_darwin(v15);
  v111 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit0();
  v19 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  __chkstk_darwin(v18);
  v21 = &v95[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input();
  v23 = *(_QWORD *)(v22 - 8);
  v125 = v22;
  v126 = v23;
  __chkstk_darwin(v22);
  v135 = &v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v137 = &v95[-v26];
  type metadata accessor for ReportCount();
  v121 = v27;
  v136 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v131 = &v95[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  v132 = &v95[-v30];
  type metadata accessor for ReportSize();
  v117 = v31;
  v134 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v129 = &v95[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v33);
  v133 = &v95[-v34];
  ReportSize.init(_:)(8, v35, v36, v37, v38, v39, v40, v41);
  ReportCount.init(_:)(1, v42, v43, v44, v45, v46, v47, v48);
  v108 = 0;
  v109 = *(void (**)(unsigned __int8 *))(v19 + 104);
  v109(v21);
  v105 = 1;
  v106 = *(void (**)(_BYTE *))(v16 + 104);
  v49 = v111;
  v106(v111);
  v103 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 104);
  v50 = v112;
  v103(v112, 0, v12);
  v100 = 0;
  v101 = *(void (**)(_BYTE *))(v9 + 104);
  v51 = v113;
  v101(v113);
  v99 = 0;
  v115 = *(_QWORD *)(v115 + 104);
  v52 = v114;
  ((void (*)(_BYTE *))v115)(v114);
  v98 = 0;
  v118 = *(_QWORD *)(v118 + 104);
  v53 = v116;
  ((void (*)(_BYTE *))v118)(v116);
  v97 = 0;
  v54 = v119;
  v120 = *(_QWORD *)(v120 + 104);
  ((void (*)(_BYTE *))v120)(v119);
  v96 = 0;
  v55 = v122;
  v123 = *(_QWORD *)(v123 + 104);
  v56 = v124;
  ((void (*)(_BYTE *))v123)(v122);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v137);
  ReportSize.init(_:)(16, v57, v58, v59, v60, v61, v62, v63);
  ReportCount.init(_:)(1, v64, v65, v66, v67, v68, v69, v70);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v109)(v21, v108, v110);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v106)(v49, v105, v107);
  v103(v50, 1, v104);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v101)(v51, v100, v102);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v115)(v52, v99, v127);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v118)(v53, v98, v128);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v120)(v54, v97, v130);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v123)(v55, v96, v56);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v135);
  v71 = sub_1000055B0(&qword_1002B5310);
  v72 = swift_allocObject(v71, 312, 7);
  *(_OWORD *)(v72 + 16) = xmmword_10021F8C0;
  *(_QWORD *)(v72 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v72 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v72 + 32) = 15;
  v73 = v117;
  *(_QWORD *)(v72 + 96) = v117;
  *(_QWORD *)(v72 + 104) = &protocol witness table for ReportSize;
  v74 = sub_100005534((_QWORD *)(v72 + 72));
  v75 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v134 + 16);
  v75(v74, v133, v73);
  v76 = v121;
  *(_QWORD *)(v72 + 136) = v121;
  *(_QWORD *)(v72 + 144) = &protocol witness table for ReportCount;
  v77 = sub_100005534((_QWORD *)(v72 + 112));
  v78 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v136 + 16);
  v78(v77, v132, v76);
  v79 = v125;
  *(_QWORD *)(v72 + 176) = v125;
  *(_QWORD *)(v72 + 184) = &protocol witness table for Input;
  v80 = sub_100005534((_QWORD *)(v72 + 152));
  v81 = v126;
  v82 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v126 + 16);
  v82(v80, v137, v79);
  *(_QWORD *)(v72 + 216) = v73;
  *(_QWORD *)(v72 + 224) = &protocol witness table for ReportSize;
  v83 = sub_100005534((_QWORD *)(v72 + 192));
  v84 = v129;
  v75(v83, v129, v73);
  *(_QWORD *)(v72 + 256) = v76;
  *(_QWORD *)(v72 + 264) = &protocol witness table for ReportCount;
  v85 = sub_100005534((_QWORD *)(v72 + 232));
  v86 = v131;
  v78(v85, v131, v76);
  *(_QWORD *)(v72 + 296) = v79;
  *(_QWORD *)(v72 + 304) = &protocol witness table for Input;
  v87 = sub_100005534((_QWORD *)(v72 + 272));
  v88 = v135;
  v82(v87, v135, v79);
  v89 = static HIDReportDescriptor.Builder.buildBlock(_:)(v72);
  v90 = swift_bridgeObjectRelease();
  v91 = *(void (**)(_QWORD *, uint64_t, __n128))(v81 + 8);
  v91(v88, v79, v90);
  v92 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
  v92(v86, v76);
  v93 = *(void (**)(_BYTE *, uint64_t))(v134 + 8);
  v93(v84, v73);
  ((void (*)(_QWORD *, uint64_t))v91)(v137, v79);
  v92(v132, v76);
  v93(v133, v73);
  return v89;
}

uint64_t ScaleReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B5160 != -1)
    swift_once(&qword_1002B5160, sub_1001AF068);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static ScaleReport.descriptor);
}

uint64_t static ScaleReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B5160 != -1)
    swift_once(&qword_1002B5160, sub_1001AF068);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static ScaleReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001AF984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = ScaleReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t ScaleReport.init()()
{
  return 15;
}

void ScaleReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001AFA58()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 4uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(15, 0x4000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

uint64_t sub_1001AFB24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ScaleReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001AFB48(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  ScaleReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

uint64_t sub_1001AFB68()
{
  uint64_t v0;

  return sub_1001E2EA0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

ValueMetadata *type metadata accessor for ScaleReport()
{
  return &type metadata for ScaleReport;
}

uint64_t EnsembleReportProtocol<>.description.getter(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;

  v4._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v8 = v7;
  HIDReport.description.getter(v6, v7);
  v10 = v9;
  v12 = v11;
  sub_100022AEC(v6, v8);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 60;
}

void EnsembleReportProtocol<>.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_10002626C();
  v37 = v0;
  v3 = v2;
  v33 = v2;
  v31 = v4;
  v6 = v5;
  v8 = v7;
  v35 = v9;
  v11 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12);
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  sub_1000262EC();
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - v18;
  type metadata accessor for Optional(0, AssociatedTypeWitness);
  sub_1001794A0();
  __chkstk_darwin(v20);
  v22 = (char *)&v31 - v21;
  v34 = *(_QWORD *)(v6 - 8);
  sub_1000262EC();
  __chkstk_darwin(v23);
  sub_1000601B4();
  v24 = swift_getAssociatedTypeWitness(0, v3);
  v32 = *(_QWORD *)(v24 - 8);
  sub_1001794A0();
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v31 - v27;
  v36 = v11;
  v37 = v8;
  dispatch thunk of SetAlgebra.init()(v8, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v1, v35, v6);
  v29 = v33;
  dispatch thunk of Sequence.makeIterator()(v6, v33);
  v33 = v6;
  swift_getAssociatedConformanceWitness(v29, v6, v24);
  sub_1001B084C();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v22, 1, AssociatedTypeWitness) != 1)
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    do
    {
      v30(v16, v22, AssociatedTypeWitness);
      dispatch thunk of SetAlgebra.insert(_:)(v19);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, AssociatedTypeWitness);
      sub_1001B084C();
    }
    while (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v22, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v33);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v24);
  sub_10000E4E0();
}

BOOL EnsembleReportProtocol<>.insert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  v16 = v0;
  v17 = v1;
  v15 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v14 - v5;
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v14 - v9;
  sub_1001B08E0((uint64_t)v6);
  v11 = sub_1000D95F8();
  ((void (*)(uint64_t))dispatch thunk of SetAlgebra.update(with:))(v11);
  v12 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, AssociatedTypeWitness) == 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1001B08E0(v15);
  return v12;
}

void EnsembleReportProtocol<>.formUnion(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_10002626C();
  v29 = v2;
  v30 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v27[1] = v3;
  v9 = sub_1001B08D4(0, v3);
  v31 = *(_QWORD *)(v9 - 8);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10016AA74();
  __chkstk_darwin(v11);
  v13 = (char *)v27 - v12;
  type metadata accessor for Optional(0, v9);
  sub_1001794A0();
  __chkstk_darwin(v14);
  v16 = (char *)v27 - v15;
  v17 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1001B08D4(0, v4);
  v28 = *(_QWORD *)(v21 - 8);
  sub_1001794A0();
  v23 = __chkstk_darwin(v22);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v20, v8, v6, v23);
  sub_1001B0874(v6);
  swift_getAssociatedConformanceWitness(v20, v6, v21);
  sub_1001B0860();
  sub_1001B0818((uint64_t)v16);
  if (!v24)
  {
    v25 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 32);
    do
    {
      v25(v1, v16, v9);
      v26 = sub_1000D95F8();
      dispatch thunk of SetAlgebra.insert(_:)(v26);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v9);
      sub_1001B0860();
      sub_1001B0818((uint64_t)v16);
    }
    while (!v24);
  }
  sub_1001B0898(v28);
  sub_10000E4E0();
}

void EnsembleReportProtocol<>.formIntersection(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssociatedConformanceWitness;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_10002626C();
  v52 = v0;
  v56 = v4;
  v6 = v5;
  v8 = v7;
  AssociatedConformanceWitness = v9;
  v53 = v5;
  v10 = sub_1001B08C8(0, v5);
  v55 = *(_QWORD *)(v10 - 8);
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10016AA74();
  __chkstk_darwin(v12);
  sub_1001B08A8();
  __chkstk_darwin(v13);
  v14 = sub_1001B0834();
  v50 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  sub_1000262EC();
  __chkstk_darwin(v15);
  sub_10003D69C();
  v49 = v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - v18;
  v45 = sub_1001B08C8(0, v6);
  v47 = *(_QWORD *)(v45 - 8);
  sub_1001794A0();
  __chkstk_darwin(v20);
  v44 = (char *)&v44 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v44 - v27;
  v46 = v29;
  v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  v30((char *)&v44 - v27, AssociatedConformanceWitness, v8, v26);
  v57 = v8;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v24, v52, v8);
  v31 = v44;
  v32 = v45;
  sub_1001B0874(v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v57, v32);
  dispatch thunk of IteratorProtocol.next()(v32, AssociatedConformanceWitness);
  sub_1001B0818((uint64_t)v19);
  if (!v33)
  {
    v53 = *(_QWORD *)(v55 + 32);
    v48 = v10;
    do
    {
      sub_1001B08BC(v3, (uint64_t)v19);
      sub_1001B0880(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16));
      v34 = sub_1000D95F8();
      v35 = dispatch thunk of SetAlgebra.insert(_:)(v34);
      sub_1001B0890(v2);
      if ((v35 & 1) != 0)
      {
        v36 = v19;
        v37 = v28;
        v38 = v31;
        v39 = v2;
        v40 = v1;
        v41 = v32;
        v42 = v49;
        dispatch thunk of SetAlgebra.remove(_:)(v3, v57, v56);
        v43 = v42;
        v32 = v41;
        v1 = v40;
        v2 = v39;
        v31 = v38;
        v28 = v37;
        v19 = v36;
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v43, v51);
      }
      sub_1001B0890(v3);
      dispatch thunk of IteratorProtocol.next()(v32, AssociatedConformanceWitness);
      sub_1001B0818((uint64_t)v19);
    }
    while (!v33);
  }
  sub_1001B0898(v47);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v57);
  sub_10000E4E0();
}

void EnsembleReportProtocol<>.formSymmetricDifference(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedConformanceWitness;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_10002626C();
  v53 = v5;
  v54 = v0;
  v7 = v6;
  AssociatedConformanceWitness = v8;
  v51 = v6;
  v10 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  sub_10016AA74();
  __chkstk_darwin(v13);
  sub_1001B08A8();
  __chkstk_darwin(v14);
  v15 = sub_1001B0834();
  v49 = *(_QWORD *)(v15 - 8);
  v50 = v15;
  sub_1000262EC();
  __chkstk_darwin(v16);
  sub_10003D69C();
  v48 = v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - v19;
  v21 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v22);
  sub_1000601B4();
  v23 = v7;
  v25 = v24;
  v55 = v24;
  v26 = swift_getAssociatedTypeWitness(0, v23);
  v27 = *(_QWORD *)(v26 - 8);
  v45 = v26;
  v46 = v27;
  sub_1001794A0();
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v44 - v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 16))(v1, AssociatedConformanceWitness, v25, v29);
  v32 = v45;
  sub_1001B0874(v25);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, v55, v32);
  dispatch thunk of IteratorProtocol.next()(v32, AssociatedConformanceWitness);
  sub_1001B0818((uint64_t)v20);
  if (!v33)
  {
    v51 = *(_QWORD *)(v12 + 32);
    v47 = AssociatedTypeWitness;
    do
    {
      sub_1001B08BC(v4, (uint64_t)v20);
      sub_1001B0880(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
      v34 = sub_1000D95F8();
      v35 = dispatch thunk of SetAlgebra.insert(_:)(v34);
      sub_1001B0890(v3);
      if ((v35 & 1) == 0)
      {
        v36 = v20;
        v37 = v31;
        v38 = v32;
        v39 = v3;
        v40 = v2;
        v41 = v12;
        v42 = v48;
        dispatch thunk of SetAlgebra.remove(_:)(v4, v55, v53);
        v43 = v42;
        v12 = v41;
        v2 = v40;
        v3 = v39;
        v32 = v38;
        v31 = v37;
        v20 = v36;
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v43, v50);
      }
      sub_1001B0890(v4);
      dispatch thunk of IteratorProtocol.next()(v32, AssociatedConformanceWitness);
      sub_1001B0818((uint64_t)v20);
    }
    while (!v33);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v32);
  sub_10000E4E0();
}

uint64_t EnsembleReportProtocol<>.intersection(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return dispatch thunk of SetAlgebra.formIntersection(_:)(a1, a2, a3);
}

uint64_t EnsembleReportProtocol<>.symmetricDifference(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, char *a4@<X8>)
{
  return sub_1001B076C(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))&dispatch thunk of SetAlgebra.formSymmetricDifference(_:), a4);
}

uint64_t EnsembleReportProtocol<>.union(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, char *a4@<X8>)
{
  return sub_1001B076C(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t))&dispatch thunk of SetAlgebra.formUnion(_:), a4);
}

uint64_t sub_1001B076C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t (*a4)(char *, uint64_t, uint64_t)@<X5>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;

  __chkstk_darwin(a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v14(a5, v5, a2);
  v14(v12, a1, a2);
  return a4(v12, a2, a3);
}

uint64_t sub_1001B0818(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

uint64_t sub_1001B0834()
{
  uint64_t v0;

  return type metadata accessor for Optional(0, v0);
}

uint64_t sub_1001B084C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(v1, v0);
}

uint64_t sub_1001B0860()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(v1, v0);
}

uint64_t sub_1001B0874(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of Sequence.makeIterator()(a1, *(_QWORD *)(v1 - 120));
}

uint64_t sub_1001B0880@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t sub_1001B0890(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1001B0898@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_1001B08BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 120))(a1, a2, v2);
}

uint64_t sub_1001B08C8(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedTypeWitness(a1, a2);
}

uint64_t sub_1001B08D4(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedTypeWitness(a1, a2);
}

uint64_t sub_1001B08E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

void *KeyboardReport.reportID.unsafeMutableAddressor()
{
  return &static KeyboardReport.reportID;
}

void *KeyboardReport.bitCount.unsafeMutableAddressor()
{
  return &static KeyboardReport.bitCount;
}

uint64_t static KeyboardReport.bitCount.getter()
{
  return 248;
}

void *KeyboardReport.usageMinimum.unsafeMutableAddressor()
{
  return &static KeyboardReport.usageMinimum;
}

void *KeyboardReport.usageMaximum.unsafeMutableAddressor()
{
  return &static KeyboardReport.usageMaximum;
}

uint64_t static KeyboardReport.usageMaximum.getter()
{
  return 231;
}

void sub_1001B092C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static KeyboardReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static KeyboardReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001B0984, v2);
}

uint64_t sub_1001B0984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  type metadata accessor for LogicalCollection();
  v1 = *(_QWORD *)(v0 - 8);
  v154 = v0;
  v155 = v1;
  __chkstk_darwin(v0);
  v151 = (char **)((char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Input.Bit8();
  v149 = v3;
  v148 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v147 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v146 = v5;
  v145 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v144 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v143 = v7;
  v142 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v141 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v140 = v9;
  v139 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v138 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v137 = v11;
  v136 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v135 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v134 = v13;
  v133 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v131 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v129 = v15;
  v128 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v22 = (unsigned __int8 *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v152 = v23;
  v153 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v132 = (char **)((char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for LogicalMaximum();
  v168 = v25;
  v150 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v130 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v28 = *(_QWORD *)(v27 - 8);
  v165 = v27;
  v166 = v28;
  __chkstk_darwin(v27);
  v161 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v162 = v30;
  v173 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v163 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportCount();
  v160 = v32;
  v172 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v164 = (char *)&v127 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v158 = v34;
  v171 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v159 = (char *)&v127 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMinimum();
  v157 = v36;
  v170 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v127 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsagePage();
  v156 = v39;
  v169 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v167 = (char *)&v127 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsagePage.init(_:)(7, v41, v42, v43, v44, v45, v46, v47);
  v127 = v38;
  UsageMinimum.init(_:)(0, v48, v49, v50, v51, v52, v53, v54);
  UsageMaximum.init(_:)(231, v55, v56, v57, v58, v59, v60, v61);
  ReportCount.init(_:)(232, v62, v63, v64, v65, v66, v67, v68);
  ReportSize.init(_:)(1, v69, v70, v71, v72, v73, v74, v75);
  LogicalMinimum.init(_:)(0, v76, v77, v78, v79, v80, v81, v82);
  LogicalMaximum.init(_:)(231, v83, v84, v85, v86, v87, v88, v89);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v20 + 104))(v22, 0, v19);
  v90 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 104))(v17, 1, v129);
  v91 = v131;
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v131, 0, v134);
  v92 = v135;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, 0, v137);
  v93 = v138;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v138, 0, v140);
  v94 = v141;
  (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v141, 0, v143);
  v95 = v144;
  (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v144, 0, v146);
  (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v147, 0, v149);
  v96 = v132;
  Input.init(_:_:_:_:_:_:_:_:)(v22, v90, v91, v92, v93, v94, v95, v132);
  v97 = v151;
  LogicalCollection.init(content:)(v151);
  v98 = sub_1000055B0(&qword_1002B5310);
  v99 = swift_allocObject(v98, 432, 7);
  *(_OWORD *)(v99 + 16) = xmmword_10022BE70;
  *(_QWORD *)(v99 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v99 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v99 + 32) = 1;
  v100 = v156;
  *(_QWORD *)(v99 + 96) = v156;
  *(_QWORD *)(v99 + 104) = &protocol witness table for UsagePage;
  v101 = sub_100005534((_QWORD *)(v99 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v169 + 16))(v101, v167, v100);
  v102 = v157;
  *(_QWORD *)(v99 + 136) = v157;
  *(_QWORD *)(v99 + 144) = &protocol witness table for UsageMinimum;
  v103 = sub_100005534((_QWORD *)(v99 + 112));
  (*(void (**)(_QWORD *, char *, uint64_t))(v170 + 16))(v103, v38, v102);
  v104 = v158;
  *(_QWORD *)(v99 + 176) = v158;
  *(_QWORD *)(v99 + 184) = &protocol witness table for UsageMaximum;
  v105 = sub_100005534((_QWORD *)(v99 + 152));
  (*(void (**)(_QWORD *, char *, uint64_t))(v171 + 16))(v105, v159, v104);
  v106 = v160;
  *(_QWORD *)(v99 + 216) = v160;
  *(_QWORD *)(v99 + 224) = &protocol witness table for ReportCount;
  v107 = sub_100005534((_QWORD *)(v99 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v172 + 16))(v107, v164, v106);
  v108 = v162;
  *(_QWORD *)(v99 + 256) = v162;
  *(_QWORD *)(v99 + 264) = &protocol witness table for ReportSize;
  v109 = sub_100005534((_QWORD *)(v99 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v173 + 16))(v109, v163, v108);
  v110 = v165;
  *(_QWORD *)(v99 + 296) = v165;
  *(_QWORD *)(v99 + 304) = &protocol witness table for LogicalMinimum;
  v111 = sub_100005534((_QWORD *)(v99 + 272));
  (*(void (**)(_QWORD *, char *, uint64_t))(v166 + 16))(v111, v161, v110);
  v112 = v168;
  *(_QWORD *)(v99 + 336) = v168;
  *(_QWORD *)(v99 + 344) = &protocol witness table for LogicalMaximum;
  v113 = sub_100005534((_QWORD *)(v99 + 312));
  v114 = v150;
  v115 = v130;
  (*(void (**)(_QWORD *, char *, uint64_t))(v150 + 16))(v113, v130, v112);
  v116 = v152;
  *(_QWORD *)(v99 + 376) = v152;
  *(_QWORD *)(v99 + 384) = &protocol witness table for Input;
  v117 = sub_100005534((_QWORD *)(v99 + 352));
  v118 = v153;
  v119 = v96;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v153 + 16))(v117, v96, v116);
  v120 = v154;
  *(_QWORD *)(v99 + 416) = v154;
  *(_QWORD *)(v99 + 424) = &protocol witness table for LogicalCollection;
  v121 = sub_100005534((_QWORD *)(v99 + 392));
  v122 = v155;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v155 + 16))(v121, v97, v120);
  v123 = static HIDReportDescriptor.Builder.buildBlock(_:)(v99);
  v149 = v124;
  v125 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v122 + 8))(v97, v120, v125);
  (*(void (**)(_QWORD *, uint64_t))(v118 + 8))(v119, v116);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v168);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v161, v165);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v163, v162);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v164, v160);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v159, v158);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v127, v157);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v167, v156);
  return v123;
}

uint64_t sub_1001B130C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  type metadata accessor for Input.Bit8();
  v139 = *(_QWORD *)(v0 - 8);
  v140 = v0;
  __chkstk_darwin(v0);
  v138 = (char *)&v114 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v136 = v2;
  v134 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v133 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v132 = v4;
  v131 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v130 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v129 = v6;
  v128 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v127 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v126 = v8;
  v125 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v124 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v123 = v10;
  v122 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v120 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v118 = v12;
  v116 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (unsigned __int8 *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v21 = *(_QWORD *)(v20 - 8);
  v141 = v20;
  v142 = v21;
  __chkstk_darwin(v20);
  v121 = (char **)((char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ReportCount();
  v135 = v23;
  v137 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v119 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v150 = v25;
  v154 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v117 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v148 = v27;
  v153 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v115 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMinimum();
  v145 = v29;
  v152 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v149 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Usage();
  v144 = v31;
  v151 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v146 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsagePage();
  v143 = v33;
  v147 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v35 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v35;
  UsagePage.init(_:)(65306, v36, v37, v38, v39, v40, v41, v42);
  Usage.init(_:)(57585, v43, v44, v45, v46, v47, v48, v49);
  UsageMinimum.init(_:)(0, v50, v51, v52, v53, v54, v55, v56);
  UsageMaximum.init(_:)(0, v57, v58, v59, v60, v61, v62, v63);
  ReportSize.init(_:)(8, v64, v65, v66, v67, v68, v69, v70);
  ReportCount.init(_:)(1, v71, v72, v73, v74, v75, v76, v77);
  v78 = v19;
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v17 + 104))(v19, 1, v16);
  v79 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v14, 0, v118);
  v80 = v120;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v120, 0, v123);
  v81 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, 0, v126);
  v82 = v127;
  (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v127, 0, v129);
  v83 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v130, 0, v132);
  v84 = v133;
  (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v133, 0, v136);
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v138, 0, v140);
  v85 = v121;
  Input.init(_:_:_:_:_:_:_:_:)(v78, v79, v80, v81, v82, v83, v84, v121);
  v86 = sub_1000055B0(&qword_1002B5310);
  v87 = swift_allocObject(v86, 312, 7);
  *(_OWORD *)(v87 + 16) = xmmword_10021F8C0;
  v88 = v143;
  *(_QWORD *)(v87 + 56) = v143;
  *(_QWORD *)(v87 + 64) = &protocol witness table for UsagePage;
  v89 = sub_100005534((_QWORD *)(v87 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v147 + 16))(v89, v35, v88);
  v90 = v144;
  *(_QWORD *)(v87 + 96) = v144;
  *(_QWORD *)(v87 + 104) = &protocol witness table for Usage;
  v91 = sub_100005534((_QWORD *)(v87 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v151 + 16))(v91, v146, v90);
  v92 = v145;
  *(_QWORD *)(v87 + 136) = v145;
  *(_QWORD *)(v87 + 144) = &protocol witness table for UsageMinimum;
  v93 = sub_100005534((_QWORD *)(v87 + 112));
  (*(void (**)(_QWORD *, char *, uint64_t))(v152 + 16))(v93, v149, v92);
  v94 = v148;
  *(_QWORD *)(v87 + 176) = v148;
  *(_QWORD *)(v87 + 184) = &protocol witness table for UsageMaximum;
  v95 = sub_100005534((_QWORD *)(v87 + 152));
  v96 = v115;
  (*(void (**)(_QWORD *, char *, uint64_t))(v153 + 16))(v95, v115, v94);
  v97 = v150;
  *(_QWORD *)(v87 + 216) = v150;
  *(_QWORD *)(v87 + 224) = &protocol witness table for ReportSize;
  v98 = sub_100005534((_QWORD *)(v87 + 192));
  v99 = v117;
  (*(void (**)(_QWORD *, char *, uint64_t))(v154 + 16))(v98, v117, v97);
  v100 = v135;
  *(_QWORD *)(v87 + 256) = v135;
  *(_QWORD *)(v87 + 264) = &protocol witness table for ReportCount;
  v101 = sub_100005534((_QWORD *)(v87 + 232));
  v102 = v137;
  v103 = v119;
  (*(void (**)(_QWORD *, char *, uint64_t))(v137 + 16))(v101, v119, v100);
  v104 = v141;
  *(_QWORD *)(v87 + 296) = v141;
  *(_QWORD *)(v87 + 304) = &protocol witness table for Input;
  v105 = sub_100005534((_QWORD *)(v87 + 272));
  v106 = v142;
  v107 = v85;
  v108 = v85;
  v109 = v104;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v142 + 16))(v105, v108, v104);
  v110 = static HIDReportDescriptor.Builder.buildBlock(_:)(v87);
  v140 = v111;
  v112 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v106 + 8))(v107, v109, v112);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v100);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v99, v150);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v96, v148);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v145);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v146, v144);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v114, v143);
  return v110;
}

uint64_t KeyboardReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B5168 != -1)
    swift_once(&qword_1002B5168, sub_1001B092C);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static KeyboardReport.descriptor);
}

uint64_t static KeyboardReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B5168 != -1)
    swift_once(&qword_1002B5168, sub_1001B092C);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static KeyboardReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001B1BF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = KeyboardReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t ReportID.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

void *KeyboardFlags.capsLockEngaged.unsafeMutableAddressor()
{
  return &static KeyboardFlags.capsLockEngaged;
}

_BYTE *sub_1001B1C48@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1001B1C54(_BYTE *a1@<X8>)
{
  *a1 = static UInt32.logicalMinimum.getter();
  sub_1000050D4();
}

BOOL sub_1001B1C74(unsigned __int8 *a1)
{
  char *v1;

  return sub_1001C2938(*a1, *v1);
}

uint64_t sub_1001B1C80@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_1001D43B8(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_1001B1CAC(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  *a2 = sub_1001C0324(*a1, *v2);
  sub_1000050D4();
}

void sub_1001B1CD4(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  *a2 = sub_1001C0328(*a1, *v2);
  sub_1000050D4();
}

BOOL sub_1001B1CFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D4234(a1, *a2);
}

uint64_t sub_1001B1D04@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D434C(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1001B1D34@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D4BE8(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1001B1D64(unsigned __int8 *a1)
{
  return sub_1001D432C(*a1);
}

uint64_t sub_1001B1D6C(unsigned __int8 *a1)
{
  return sub_1001C032C(*a1);
}

uint64_t sub_1001B1D74(unsigned __int8 *a1)
{
  return sub_1001C034C(*a1);
}

uint64_t sub_1001B1D7C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_1001D4C38(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1001B1DA8(char *a1)
{
  unsigned __int8 *v1;

  return sub_1001C2830(*a1, *v1);
}

BOOL sub_1001B1DB4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return sub_1001D4E8C(*a1, *v1);
}

BOOL sub_1001B1DC0()
{
  char *v0;

  return sub_1001D42A4(*v0);
}

uint64_t sub_1001B1DC8(unsigned __int8 *a1)
{
  return sub_1001D51F4(*a1);
}

unsigned __int8 *sub_1001B1DD0@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1001B1DE0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1001B1DEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1001D40F8();
  *a1 = result;
  return result;
}

uint64_t KeyboardReport.report.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1001B3530(a1, a2);
  return v2;
}

void KeyboardReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  v0 = sub_1001B3548();
  sub_10004113C(v0);
  v1 = sub_1001B34C4();
  sub_1001B345C(v1, COERCE_DOUBLE(0x1F00000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18,
    v19);
  sub_1001B3440();
  sub_10000B338();
}

void KeyboardReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = sub_1001B3548();
  sub_10004113C(v4);
  v5 = sub_1001B34C4();
  sub_1001B345C(v5, COERCE_DOUBLE(0x1F00000000), v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v22, v23, v24,
    v26);
  sub_1001B3440();
  HIDReport.initialize(from:)(a1, a2);
  v21 = v20;
  sub_100022AEC(a1, a2);
  if ((v21 & 1) == 0)
    sub_100022AEC(v25, v27);
  sub_10000B338();
}

uint64_t KeyboardReport.init<A>(usages:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unsigned int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v19 - v11;
  v13 = sub_1001B3548();
  sub_10004113C(v13);
  v14 = sub_1001B34C4();
  v22 = 0x1F00000000;
  v23 = v14;
  sub_1000E6A84((int *)&v22, 0);
  v23 |= 0x4000000000000000uLL;
  Data._Representation.subscript.setter(1, 0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v20 = a1;
  v15(v8, a1, a2);
  dispatch thunk of Sequence.makeIterator()(a2, a3);
  swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness);
  sub_1001B3488();
  while ((v21 & 1) == 0)
  {
    sub_1001B34D0();
    sub_1001B3474();
    sub_1001B34F0();
    sub_1001B34D0();
    v16 = sub_1001B3474();
    v17 = sub_1001B34F0();
    Data._Representation.subscript.setter(v17 | v16, v8);
    sub_1001B3488();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, a2);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v12, AssociatedTypeWitness);
  return v22;
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardReport.update(with:)(EnsembleHID::KeyboardUsage with)
{
  unsigned int v1;
  int v2;
  EnsembleHID::KeyboardUsage_optional v3;

  sub_1001B3500();
  sub_1001B349C();
  sub_1001B3510();
  sub_1001B3500();
  v1 = sub_1001B349C();
  v2 = sub_1001B3510();
  Data._Representation.subscript.setter(v2 | v1);
  sub_1001AB0A0();
  return v3;
}

Swift::Int __swiftcall KeyboardReport.index(for:)(EnsembleHID::KeyboardUsage a1)
{
  return a1.rawValue + 8;
}

uint64_t KeyboardReport.modifiers.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  sub_100127CC4(232, a1, a2);
  v2 = swift_allocObject(&unk_100290E40, 24, 7);
  *(_QWORD *)(v2 + 16) = &_swiftEmptySetSingleton;
  v3 = (uint64_t *)(v2 + 16);
  sub_1001B3424(227);
  sub_1001B3424(224);
  sub_1001B3424(226);
  sub_1001B3424(225);
  sub_1001B3424(231);
  sub_1001B3424(228);
  sub_1001B3424(230);
  sub_1001B3424(229);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain();
  swift_release();
  return v4;
}

uint64_t sub_1001B2224(uint64_t result, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 v6;
  _BYTE v7[31];
  _BYTE v8[25];
  uint64_t v9;

  if (((result - a3) & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }
  else if ((result - a3) <= 7u && ((a2 >> (result - a3)) & 1) != 0)
  {
    *(_QWORD *)&v8[17] = v4;
    v9 = v5;
    v6 = result;
    swift_beginAccess(a4 + 16, v7, 33, 0);
    sub_10011A130((uint64_t)v8, v6);
    return swift_endAccess(v7);
  }
  return result;
}

void KeyboardReport.keyboardState.getter(uint64_t a1, unint64_t a2)
{
  sub_1001E0D24(240, a1, a2);
}

void KeyboardReport.keyboardState.setter(uint64_t a1)
{
  sub_1000E70EC(a1, 240);
}

void (*KeyboardReport.keyboardState.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_1001E0D24(240, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_BYTE *)(a1 + 8) = v3;
  return sub_1001B22F4;
}

void sub_1001B22F4(uint64_t a1)
{
  sub_1000E70EC(*(unsigned __int8 *)(a1 + 8), 240);
  sub_1000050D4();
}

uint64_t HIDReportDescriptor.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10002517C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void sub_1001B2348(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  KeyboardReport.init()();
  *a1 = v2;
  a1[1] = v3;
  sub_1000050D4();
}

void sub_1001B2368(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  KeyboardReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

void KeyboardReport.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  char v3;
  unsigned __int8 v4;

  v2 = a2 >> 62;
  sub_10002517C(a1, a2);
  v3 = 0;
  do
  {
    v4 = v3;
    v3 = 1;
  }
  while (!v4);
  HIDReport.offset(for:)(v4 + 8);
  HIDReport.mask(for:)(v4 + 8);
  __asm { BR              X8 }
}

uint64_t KeyboardReport.makeIterator()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1001B3530(a1, a2);
  return v2;
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardReport.Iterator.next()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 <= 0xE7)
  {
    while (!v1)
    {
      v1 = 1;
      *(_BYTE *)(v0 + 16) = 1;
    }
    v2 = *(_QWORD *)(v0 + 8);
    HIDReport.offset(for:)(v1 + 8);
    HIDReport.mask(for:)(v1 + 8);
    __asm { BR              X9 }
  }
  return (EnsembleHID::KeyboardUsage_optional)256;
}

void sub_1001B2900()
{
  uint64_t v0;

  KeyboardReport.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1001B2908(Swift::UInt8 *a1@<X8>)
{
  EnsembleHID::KeyboardUsage_optional v2;

  v2 = KeyboardReport.Iterator.next()();
  *a1 = v2.value.rawValue;
  a1[1] = v2.is_nil;
  sub_1000050D4();
}

uint64_t sub_1001B2930@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = KeyboardReport.makeIterator()(v4, v3);
  v7 = v6;
  result = sub_100022AEC(v4, v3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1001B2988()
{
  _QWORD *v0;

  return variable initialization expression of PasteboardFileDataProvider.archiveSource(*v0, v0[1]);
}

void sub_1001B2990()
{
  sub_1001BD1BC();
}

uint64_t sub_1001B2998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1001BD248(a1, a2, a3, *v3, v3[1]);
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardReport.remove(_:)(EnsembleHID::KeyboardUsage a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  EnsembleHID::KeyboardUsage_optional v4;

  sub_1001B34E0();
  v1 = sub_1001B34B0();
  if ((sub_1001B3520() & v1) != 0)
  {
    sub_1001B34E0();
    v2 = sub_1001B34B0();
    v3 = sub_1001B3520();
    Data._Representation.subscript.setter(v3 & ~v2);
  }
  sub_1001AB0A0();
  return v4;
}

uint64_t KeyboardReport.formUnion(_:)()
{
  return sub_1001B2C10();
}

uint64_t sub_1001B2A30()
{
  return sub_1001B2C70();
}

char *sub_1001B2A4C(char *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v6;

  if (result)
  {
    v4 = 0;
    if (a2)
      goto LABEL_6;
LABEL_8:
    while (!__OFADD__(v4, 1))
    {
      v6 = *result++;
      v5 = v6;
      if (v4 > 0)
      {
        if (!a3 || v4 >= a4 - a3)
          goto LABEL_16;
        *(_BYTE *)(a3 + v4) |= v5;
      }
      ++v4;
      if (a2)
      {
LABEL_6:
        if (result == a2)
          return result;
      }
    }
    __break(1u);
LABEL_16:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 194, 0);
    __break(1u);
  }
  else if (a2)
  {
    v4 = 0;
    result = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t KeyboardReport.formIntersection(_:)()
{
  return sub_1001B2C10();
}

uint64_t sub_1001B2B20()
{
  return sub_1001B2C70();
}

char *sub_1001B2B3C(char *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v6;

  if (result)
  {
    v4 = 0;
    if (a2)
      goto LABEL_6;
LABEL_8:
    while (!__OFADD__(v4, 1))
    {
      v6 = *result++;
      v5 = v6;
      if (v4 > 0)
      {
        if (!a3 || v4 >= a4 - a3)
          goto LABEL_16;
        *(_BYTE *)(a3 + v4) &= v5;
      }
      ++v4;
      if (a2)
      {
LABEL_6:
        if (result == a2)
          return result;
      }
    }
    __break(1u);
LABEL_16:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 194, 0);
    __break(1u);
  }
  else if (a2)
  {
    v4 = 0;
    result = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t KeyboardReport.formSymmetricDifference(_:)()
{
  return sub_1001B2C10();
}

uint64_t sub_1001B2C10()
{
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

uint64_t sub_1001B2C54()
{
  return sub_1001B2C70();
}

uint64_t sub_1001B2C70()
{
  return HIDReport.withUnsafeBytes<A>(_:)();
}

char *sub_1001B2CA8(char *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v6;

  if (result)
  {
    v4 = 0;
    if (a2)
      goto LABEL_6;
LABEL_8:
    while (!__OFADD__(v4, 1))
    {
      v6 = *result++;
      v5 = v6;
      if (v4 > 0)
      {
        if (!a3 || v4 >= a4 - a3)
          goto LABEL_16;
        *(_BYTE *)(a3 + v4) ^= v5;
      }
      ++v4;
      if (a2)
      {
LABEL_6:
        if (result == a2)
          return result;
      }
    }
    __break(1u);
LABEL_16:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 194, 0);
    __break(1u);
  }
  else if (a2)
  {
    v4 = 0;
    result = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1001B2D74(char *a1)
{
  uint64_t *v1;

  return sub_1001BD254(*a1, *v1, v1[1]);
}

uint64_t sub_1001B2D80()
{
  return sub_1001B2DA4();
}

uint64_t sub_1001B2D8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001C2720);
}

uint64_t sub_1001B2D98()
{
  return sub_1001B2DA4();
}

uint64_t sub_1001B2DA4()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  unint64_t v6;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_100141354();
  v4(v3);
  sub_100022AEC(v2, v1);
  v5 = sub_100141354();
  return sub_1001B3434(v5, v6);
}

void sub_1001B2DE8(uint64_t a1, unsigned __int8 *a2)
{
  sub_1001D45CC(a1, *a2);
}

EnsembleHID::KeyboardUsage_optional sub_1001B2DF0@<W0>(EnsembleHID::KeyboardUsage *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::KeyboardUsage_optional result;

  result = KeyboardReport.remove(_:)((EnsembleHID::KeyboardUsage)a1->rawValue);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

void sub_1001B2E20(EnsembleHID::KeyboardUsage *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::KeyboardUsage_optional v3;

  v3 = KeyboardReport.update(with:)((EnsembleHID::KeyboardUsage)a1->rawValue);
  *a2 = v3.value.rawValue;
  a2[1] = v3.is_nil;
  sub_1000050D4();
}

uint64_t sub_1001B2E4C()
{
  uint64_t v0;
  unint64_t v1;

  sub_100141354();
  KeyboardReport.formUnion(_:)();
  v0 = sub_100141354();
  return sub_1001B3434(v0, v1);
}

uint64_t sub_1001B2E74()
{
  return KeyboardReport.formIntersection(_:)();
}

uint64_t sub_1001B2E80()
{
  uint64_t v0;
  unint64_t v1;

  sub_100141354();
  KeyboardReport.formSymmetricDifference(_:)();
  v0 = sub_100141354();
  return sub_1001B3434(v0, v1);
}

uint64_t sub_1001B2EA8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001D4C40);
}

uint64_t sub_1001B2EB4(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, uint64_t, unint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v5 = *v4;
  v6 = v4[1];
  a4(*a1, a1[1], v5, v6);
  return sub_100022AEC(v5, v6);
}

void sub_1001B2EF0(uint64_t *a1)
{
  uint64_t v1;

  sub_1001C27D8(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

void sub_1001B2F00(uint64_t *a1)
{
  uint64_t v1;

  sub_1001D4E9C(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

void sub_1001B2F10(uint64_t a1)
{
  sub_1001C28F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

void sub_1001B2F20()
{
  sub_1001D42C8();
}

void sub_1001B2F28()
{
  sub_1001B339C();
  EnsembleReportProtocol<>.init<A>(_:)();
}

void sub_1001B2F98()
{
  sub_1001D5158();
}

uint64_t sub_1001B2FA4(_QWORD *a1, _QWORD *a2)
{
  return static HIDReport.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1001B2FBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B2FE0()
{
  return sub_1001B2C70();
}

uint64_t sub_1001B3000()
{
  return sub_1001B2C70();
}

uint64_t sub_1001B3020()
{
  return sub_1001B2C70();
}

unint64_t sub_1001B3044()
{
  unint64_t result;

  result = qword_1002B5318;
  if (!qword_1002B5318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardFlags, &type metadata for KeyboardFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5318);
  }
  return result;
}

unint64_t sub_1001B3084()
{
  unint64_t result;

  result = qword_1002B5320;
  if (!qword_1002B5320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardFlags, &type metadata for KeyboardFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5320);
  }
  return result;
}

unint64_t sub_1001B30C4()
{
  unint64_t result;

  result = qword_1002B5328;
  if (!qword_1002B5328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardFlags, &type metadata for KeyboardFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5328);
  }
  return result;
}

unint64_t sub_1001B3104()
{
  unint64_t result;

  result = qword_1002B5330;
  if (!qword_1002B5330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardFlags, &type metadata for KeyboardFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5330);
  }
  return result;
}

unint64_t sub_1001B3144()
{
  unint64_t result;

  result = qword_1002B5338;
  if (!qword_1002B5338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardReport.Iterator, &type metadata for KeyboardReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_1002B5338);
  }
  return result;
}

unint64_t sub_1001B3184()
{
  unint64_t result;

  result = qword_1002B5340;
  if (!qword_1002B5340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardReport, &type metadata for KeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5340);
  }
  return result;
}

unint64_t sub_1001B31C4()
{
  unint64_t result;

  result = qword_1002B5348;
  if (!qword_1002B5348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardReport, &type metadata for KeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5348);
  }
  return result;
}

void type metadata accessor for KeyboardFlags()
{
  sub_10003B1DC();
}

void type metadata accessor for KeyboardReport()
{
  sub_10003B1DC();
}

uint64_t sub_1001B321C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10002517C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for KeyboardReport.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10002517C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100022AEC(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for KeyboardReport.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100022AEC(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyboardReport.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyboardReport.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for KeyboardReport.Iterator()
{
  sub_10003B1DC();
}

unint64_t sub_1001B339C()
{
  unint64_t result;

  result = qword_1002B5350;
  if (!qword_1002B5350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardReport, &type metadata for KeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5350);
  }
  return result;
}

char *sub_1001B33D8(char *a1, char *a2)
{
  uint64_t v2;

  return sub_1001B2CA8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

char *sub_1001B33F0(char *a1, char *a2)
{
  uint64_t v2;

  return sub_1001B2B3C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

char *sub_1001B3408(char *a1, char *a2)
{
  uint64_t v2;

  return sub_1001B2A4C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001B3424(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  return sub_1001B2224(a1, v2, 0xE0u, v1);
}

uint64_t sub_1001B3434(uint64_t result, unint64_t a2)
{
  return sub_100022AEC(result, a2);
}

uint64_t sub_1001B3440()
{
  return Data._Representation.subscript.setter(1, 0);
}

void sub_1001B345C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, uint64_t a20)
{
  a19 = a2;
  a20 = a1;
  sub_1000E6A84((int *)&a19, 0);
}

uint64_t sub_1001B3474()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

uint64_t sub_1001B3488()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of IteratorProtocol.next()(v1, v0);
}

uint64_t sub_1001B349C()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

uint64_t sub_1001B34B0()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

uint64_t sub_1001B34C4()
{
  return __DataStorage.init(length:)(31);
}

Swift::Int sub_1001B34D0()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

Swift::Int sub_1001B34E0()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

uint64_t sub_1001B34F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Data.subscript.getter(v2, v0, v1);
}

Swift::Int sub_1001B3500()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

uint64_t sub_1001B3510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Data.subscript.getter(v2, v0, v1);
}

uint64_t sub_1001B3520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return Data.subscript.getter(v2, v0, v1);
}

uint64_t sub_1001B3530(uint64_t result, unint64_t a2)
{
  return sub_10002517C(result, a2);
}

uint64_t sub_1001B353C()
{
  return __DataStorage._offset.getter();
}

uint64_t sub_1001B3548()
{
  return type metadata accessor for __DataStorage(0);
}

void ScrollReport.delta.getter()
{
  sub_1001B58A8();
  sub_1001B5894(24);
  sub_1001B5894(32);
  sub_1001A4570();
}

void ScrollReport.accelDelta.getter()
{
  sub_1001B58A8();
  sub_1001B5888(40);
  sub_1001B5834();
  sub_1001B5888(72);
  static HIDFixed.scale.getter();
  sub_1001A4570();
}

void *ScrollReport.reportID.unsafeMutableAddressor()
{
  return &static ScrollReport.reportID;
}

void *ScrollReport.bitCount.unsafeMutableAddressor()
{
  return &static ScrollReport.bitCount;
}

uint64_t static ScrollReport.bitCount.getter()
{
  return 104;
}

void sub_1001B35FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1001B58A0();
  v1 = v0;
  sub_10000897C(v0, static ScrollReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static ScrollReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001B364C, v2);
  sub_1000050D4();
}

uint64_t sub_1001B364C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v11;

  type metadata accessor for ApplicationCollection();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  ApplicationCollection.init(content:)(v4);
  v5 = sub_1000055B0(&qword_1002B5310);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v6 + 56) = v1;
  *(_QWORD *)(v6 + 64) = &protocol witness table for ApplicationCollection;
  v7 = sub_100005534((_QWORD *)(v6 + 32));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2 + 16))(v7, v4, v1);
  v8 = static HIDReportDescriptor.Builder.buildBlock(_:)(v6);
  v9 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v2 + 8))(v4, v1, v9);
  return v8;
}

uint64_t sub_1001B3740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  void (*v158)(_QWORD *, _BYTE *, uint64_t);
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  void (*v165)(_QWORD *, _BYTE *, uint64_t);
  _QWORD *v166;
  void (*v167)(_QWORD *, _BYTE *, uint64_t);
  _QWORD *v168;
  _QWORD *v169;
  void (*v170)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v171;
  _BYTE *v172;
  _QWORD *v173;
  _BYTE *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  void (*v178)(_QWORD *, _BYTE *, uint64_t);
  __n128 v179;
  void (*v180)(_QWORD *, uint64_t, __n128);
  void (*v181)(_BYTE *, uint64_t);
  void (*v182)(_BYTE *, uint64_t);
  void (*v183)(_BYTE *, uint64_t);
  uint64_t v184;
  _BYTE v186[4];
  unsigned int v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(_BYTE *);
  unsigned int v197;
  void (*v198)(unsigned __int8 *);
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  _BYTE *v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  void (*v210)(_BYTE *);
  void (*v211)(_QWORD);
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  void (*v217)(_QWORD, _QWORD, _QWORD);
  _BYTE *v218;
  _QWORD *v219;
  _BYTE *v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(_QWORD *, _BYTE *, uint64_t);
  void (*v236)(_QWORD *, _BYTE *, uint64_t);
  _BYTE *v237;
  _BYTE *v238;
  _QWORD *v239;
  _BYTE *v240;
  _BYTE *v241;
  _BYTE *v242;
  _BYTE *v243;
  _BYTE *v244;

  type metadata accessor for LogicalMaximum();
  v1 = *(_QWORD *)(v0 - 8);
  v230 = v0;
  v231 = v1;
  __chkstk_darwin(v0);
  v240 = &v186[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for LogicalMinimum();
  v229 = v3;
  v234 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v244 = &v186[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Usage();
  v228 = v5;
  v233 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v243 = &v186[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v242 = &v186[-v8];
  type metadata accessor for UsagePage();
  v223 = v9;
  v232 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v241 = &v186[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit8();
  v217 = v11;
  v194 = *((_QWORD *)v11 - 1);
  __chkstk_darwin(v11);
  v215 = &v186[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit6();
  v214 = v13;
  v201 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v213 = &v186[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit5();
  v235 = v15;
  v204 = *((_QWORD *)v15 - 1);
  __chkstk_darwin(v15);
  v212 = &v186[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit4();
  v216 = v17;
  v208 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v189 = &v186[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit3();
  v236 = v19;
  v20 = *((_QWORD *)v19 - 1);
  __chkstk_darwin(v19);
  v206 = &v186[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit2();
  v23 = v22;
  v24 = *(_QWORD *)(v22 - 8);
  v193 = v22;
  __chkstk_darwin(v22);
  v188 = &v186[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit1();
  v27 = *(_QWORD *)(v26 - 8);
  v195 = v26;
  __chkstk_darwin(v26);
  v29 = &v186[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit0();
  v31 = *(_QWORD *)(v30 - 8);
  v199 = v30;
  __chkstk_darwin(v30);
  v33 = &v186[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input();
  v192 = v34;
  v227 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v225 = &v186[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v36);
  v219 = &v186[-v37];
  __chkstk_darwin(v38);
  v239 = &v186[-v39];
  type metadata accessor for ReportCount();
  v191 = v40;
  v224 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v220 = &v186[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v42);
  v238 = &v186[-v43];
  __chkstk_darwin(v44);
  v222 = &v186[-v45];
  type metadata accessor for ReportSize();
  v190 = v46;
  v221 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v218 = &v186[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v48);
  v237 = &v186[-v49];
  __chkstk_darwin(v50);
  v226 = &v186[-v51];
  ReportSize.init(_:)(8, v52, v53, v54, v55, v56, v57, v58);
  ReportCount.init(_:)(2, v59, v60, v61, v62, v63, v64, v65);
  v197 = 0;
  v198 = *(void (**)(unsigned __int8 *))(v31 + 104);
  v66 = v33;
  v198(v33);
  v203 = 1;
  v196 = *(void (**)(_BYTE *))(v27 + 104);
  v196(v29);
  v211 = *(void (**)(_QWORD))(v24 + 104);
  v67 = v188;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v211)(v188, 0, v23);
  v209 = 0;
  v210 = *(void (**)(_BYTE *))(v20 + 104);
  v68 = v206;
  v210(v206);
  v207 = 0;
  v208 = *(_QWORD *)(v208 + 104);
  v69 = v189;
  ((void (*)(_BYTE *))v208)(v189);
  v205 = 0;
  v204 = *(_QWORD *)(v204 + 104);
  v70 = v212;
  ((void (*)(_BYTE *))v204)(v212);
  v202 = 0;
  v201 = *(_QWORD *)(v201 + 104);
  v71 = v213;
  v72 = v214;
  ((void (*)(_BYTE *))v201)(v213);
  v200 = 0;
  v194 = *(_QWORD *)(v194 + 104);
  ((void (*)(_BYTE *))v194)(v215);
  Input.init(_:_:_:_:_:_:_:_:)(v66, v29, v67, v68, v69, v70, v71, v239);
  UsagePage.init(_:)(1, v73, v74, v75, v76, v77, v78, v79);
  Usage.init(_:)(48, v80, v81, v82, v83, v84, v85, v86);
  Usage.init(_:)(49, v87, v88, v89, v90, v91, v92, v93);
  LogicalMinimum.init(_:)(-127, v94, v95, v96, v97, v98, v99, v100);
  LogicalMaximum.init(_:)(127, v101, v102, v103, v104, v105, v106, v107);
  ReportSize.init(_:)(8, v108, v109, v110, v111, v112, v113, v114);
  ReportCount.init(_:)(2, v115, v116, v117, v118, v119, v120, v121);
  v122 = v66;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v198)(v66, v197, v199);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v196)(v29, v203, v195);
  v187 = 1;
  v123 = v67;
  v211(v67);
  v124 = v206;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v210)(v206, v209, v236);
  v125 = v69;
  v126 = v69;
  v127 = v216;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v208)(v126, v207, v216);
  v128 = v212;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v204)(v212, v205, v235);
  v129 = v213;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v201)(v213, v202, v72);
  v130 = v215;
  v131 = v217;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v194)(v215, v200, v217);
  Input.init(_:_:_:_:_:_:_:_:)(v122, v29, v123, v124, v125, v128, v129, v219);
  ReportSize.init(_:)(32, v132, v133, v134, v135, v136, v137, v138);
  ReportCount.init(_:)(2, v139, v140, v141, v142, v143, v144, v145);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v198)(v122, v197, v199);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v196)(v29, v203, v195);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v211)(v123, v187, v193);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v210)(v124, v209, v236);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v208)(v125, v207, v127);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v204)(v128, v205, v235);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v201)(v129, v202, v214);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v194)(v130, v200, v131);
  Input.init(_:_:_:_:_:_:_:_:)(v122, v29, v123, v124, v125, v128, v129, v225);
  v146 = sub_1000055B0(&qword_1002B5310);
  v147 = swift_allocObject(v146, 632, 7);
  *(_OWORD *)(v147 + 16) = xmmword_10022C260;
  *(_QWORD *)(v147 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v147 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v147 + 32) = 7;
  v148 = v190;
  *(_QWORD *)(v147 + 96) = v190;
  *(_QWORD *)(v147 + 104) = &protocol witness table for ReportSize;
  v149 = sub_100005534((_QWORD *)(v147 + 72));
  v236 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v221 + 16);
  v236(v149, v226, v148);
  v150 = v191;
  *(_QWORD *)(v147 + 136) = v191;
  *(_QWORD *)(v147 + 144) = &protocol witness table for ReportCount;
  v151 = sub_100005534((_QWORD *)(v147 + 112));
  v235 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v224 + 16);
  v235(v151, v222, v150);
  v152 = v192;
  *(_QWORD *)(v147 + 176) = v192;
  *(_QWORD *)(v147 + 184) = &protocol witness table for Input;
  v153 = sub_100005534((_QWORD *)(v147 + 152));
  v217 = *(void (**)(_QWORD, _QWORD, _QWORD))(v227 + 16);
  v217(v153, v239, v152);
  v154 = v223;
  *(_QWORD *)(v147 + 216) = v223;
  *(_QWORD *)(v147 + 224) = &protocol witness table for UsagePage;
  v155 = sub_100005534((_QWORD *)(v147 + 192));
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v232 + 16))(v155, v241, v154);
  v156 = v228;
  *(_QWORD *)(v147 + 256) = v228;
  *(_QWORD *)(v147 + 264) = &protocol witness table for Usage;
  v157 = sub_100005534((_QWORD *)(v147 + 232));
  v158 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v233 + 16);
  v158(v157, v242, v156);
  *(_QWORD *)(v147 + 296) = v156;
  *(_QWORD *)(v147 + 304) = &protocol witness table for Usage;
  v159 = sub_100005534((_QWORD *)(v147 + 272));
  v158(v159, v243, v156);
  v160 = v229;
  *(_QWORD *)(v147 + 336) = v229;
  *(_QWORD *)(v147 + 344) = &protocol witness table for LogicalMinimum;
  v161 = sub_100005534((_QWORD *)(v147 + 312));
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v234 + 16))(v161, v244, v160);
  v162 = v230;
  *(_QWORD *)(v147 + 376) = v230;
  *(_QWORD *)(v147 + 384) = &protocol witness table for LogicalMaximum;
  v163 = sub_100005534((_QWORD *)(v147 + 352));
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v231 + 16))(v163, v240, v162);
  *(_QWORD *)(v147 + 416) = v148;
  *(_QWORD *)(v147 + 424) = &protocol witness table for ReportSize;
  v164 = sub_100005534((_QWORD *)(v147 + 392));
  v165 = v236;
  v236(v164, v237, v148);
  *(_QWORD *)(v147 + 456) = v150;
  *(_QWORD *)(v147 + 464) = &protocol witness table for ReportCount;
  v166 = sub_100005534((_QWORD *)(v147 + 432));
  v167 = v235;
  v235(v166, v238, v150);
  *(_QWORD *)(v147 + 496) = v152;
  *(_QWORD *)(v147 + 504) = &protocol witness table for Input;
  v168 = sub_100005534((_QWORD *)(v147 + 472));
  v169 = v219;
  v170 = (void (*)(_QWORD *, _QWORD *, uint64_t))v217;
  v217(v168, v219, v152);
  *(_QWORD *)(v147 + 536) = v148;
  *(_QWORD *)(v147 + 544) = &protocol witness table for ReportSize;
  v171 = sub_100005534((_QWORD *)(v147 + 512));
  v172 = v218;
  v165(v171, v218, v148);
  *(_QWORD *)(v147 + 576) = v150;
  *(_QWORD *)(v147 + 584) = &protocol witness table for ReportCount;
  v173 = sub_100005534((_QWORD *)(v147 + 552));
  v174 = v220;
  v167(v173, v220, v150);
  *(_QWORD *)(v147 + 616) = v152;
  *(_QWORD *)(v147 + 624) = &protocol witness table for Input;
  v175 = sub_100005534((_QWORD *)(v147 + 592));
  v176 = v225;
  v170(v175, v225, v152);
  v177 = static HIDReportDescriptor.Builder.buildBlock(_:)(v147);
  v236 = v178;
  v179 = swift_bridgeObjectRelease();
  v180 = *(void (**)(_QWORD *, uint64_t, __n128))(v227 + 8);
  v180(v176, v152, v179);
  v181 = *(void (**)(_BYTE *, uint64_t))(v224 + 8);
  v181(v174, v150);
  v182 = *(void (**)(_BYTE *, uint64_t))(v221 + 8);
  v182(v172, v148);
  ((void (*)(_QWORD *, uint64_t))v180)(v169, v152);
  v181(v238, v150);
  v182(v237, v148);
  (*(void (**)(_BYTE *, uint64_t))(v231 + 8))(v240, v230);
  (*(void (**)(_BYTE *, uint64_t))(v234 + 8))(v244, v229);
  v183 = *(void (**)(_BYTE *, uint64_t))(v233 + 8);
  v184 = v228;
  v183(v243, v228);
  v183(v242, v184);
  (*(void (**)(_BYTE *, uint64_t))(v232 + 8))(v241, v223);
  ((void (*)(_QWORD *, uint64_t))v180)(v239, v152);
  v181(v222, v150);
  v182(v226, v148);
  return v177;
}

uint64_t ScrollReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B5170 != -1)
    swift_once(&qword_1002B5170, sub_1001B35FC);
  sub_1001B58A0();
  return sub_100006FB4(v0, (uint64_t)static ScrollReport.descriptor);
}

uint64_t static ScrollReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B5170 != -1)
    swift_once(&qword_1002B5170, sub_1001B35FC);
  sub_1001B58A0();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static ScrollReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001B45B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = ScrollReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

void ScrollReport.report.getter()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_10002517C(v0, v1);
  sub_100026B88();
  sub_1000050D4();
}

uint64_t ScrollReport.init()()
{
  return 7;
}

void ScrollReport.init(_:)()
{
  sub_1001B58A8();
  __asm { BR              X10 }
}

uint64_t sub_1001B46A8()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 0xDuLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(7, 0xD000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

void sub_1001B4774(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ScrollReport.init()();
  a1[1] = v2;
  sub_1000050D4();
}

void sub_1001B4794(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ScrollReport.init(_:)();
  *a1 = v2;
  a1[1] = v3;
  sub_1000050D4();
}

uint64_t sub_1001B47B4()
{
  uint64_t v0;

  return sub_1001E2EC0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void ScrollReport.momentum.getter(uint64_t a1, unint64_t a2)
{
  sub_100127CC4(16, a1, a2);
}

void ScrollReport.momentum.setter(uint64_t a1)
{
  sub_1000E4D78(a1, 16);
}

void ScrollReport.momentum.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_100127CC4(16, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000050D4();
}

void sub_1001B480C(uint64_t a1)
{
  sub_1000E4D78(*(unsigned __int8 *)(a1 + 8), 16);
  sub_1000050D4();
}

uint64_t ScrollReport.x.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_1001E0D24(24, a1, a2);
  return (char)result;
}

void ScrollReport.x.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 127;
  if (a1 < 127)
    v1 = a1;
  if (v1 <= -128)
    v2 = -128;
  else
    v2 = v1;
  sub_1000E70EC(v2, 24);
}

void ScrollReport.x.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001B5824(a1);
  sub_1001E0D24(24, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001B48A8(uint64_t *a1, uint64_t a2)
{
  sub_1001B4930(a1, a2, 24);
}

uint64_t ScrollReport.y.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_1001E0D24(32, a1, a2);
  return (char)result;
}

void ScrollReport.y.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 127;
  if (a1 < 127)
    v1 = a1;
  if (v1 <= -128)
    v2 = -128;
  else
    v2 = v1;
  sub_1000E70EC(v2, 32);
}

void ScrollReport.y.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001B5824(a1);
  sub_1001E0D24(32, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001B4928(uint64_t *a1, uint64_t a2)
{
  sub_1001B4930(a1, a2, 32);
}

void sub_1001B4930(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  if (*a1 >= 127)
    v3 = 127;
  if (v3 <= -128)
    v4 = -128;
  else
    v4 = v3;
  sub_1000E70EC(v4, a3);
  sub_1000050D4();
}

double ScrollReport.accelX.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001B49C4(a1, a2, 40);
}

void ScrollReport.accelX.setter(Swift::Double a1)
{
  sub_1001B4A00(40, a1);
}

void ScrollReport.accelX.modify(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B5824(a1);
  sub_10013E758(40, v3, v4);
  *v1 = v2 / sub_1001B5834();
  sub_1001A4570();
}

void sub_1001B49B4(Swift::Double *a1, uint64_t a2)
{
  sub_1001B4A70(a1, a2, 40);
}

double ScrollReport.accelY.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001B49C4(a1, a2, 72);
}

double sub_1001B49C4(uint64_t a1, unint64_t a2, char a3)
{
  double v3;

  sub_10013E758(a3, a1, a2);
  return v3 / sub_1001B5834();
}

void ScrollReport.accelY.setter(Swift::Double a1)
{
  sub_1001B4A00(72, a1);
}

void sub_1001B4A00(char a1, Swift::Double a2)
{
  uint64_t v3;

  *(HIDUtils::HIDFixed_optional *)&v3 = HIDFixed.init(doubleValue:)(a2);
  if ((v3 & (unint64_t)&_mh_execute_header) != 0)
    v3 = 0;
  else
    v3 = v3;
  sub_1001B5188(v3, a1);
}

void ScrollReport.accelY.modify(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B5824(a1);
  sub_10013E758(72, v3, v4);
  *v1 = v2 / sub_1001B5834();
  sub_1001A4570();
}

void sub_1001B4A68(Swift::Double *a1, uint64_t a2)
{
  sub_1001B4A70(a1, a2, 72);
}

void sub_1001B4A70(Swift::Double *a1, uint64_t a2, char a3)
{
  uint64_t v4;

  *(HIDUtils::HIDFixed_optional *)&v4 = HIDFixed.init(doubleValue:)(*a1);
  if ((v4 & (unint64_t)&_mh_execute_header) != 0)
    v4 = 0;
  else
    v4 = v4;
  sub_1001B5188(v4, a3);
  sub_1000050D4();
}

void ScrollReport.delta.setter(double a1, double a2)
{
  double v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v2 = round(a1);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v4 = (uint64_t)v2;
  if ((uint64_t)v2 >= 127)
    v4 = 127;
  if (v4 <= -128)
    v5 = -128;
  else
    v5 = v4;
  sub_1000E70EC(v5, 24);
  v6 = round(a2);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
    goto LABEL_21;
  if (v6 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v7 = (uint64_t)v6;
  if ((uint64_t)v6 >= 127)
    v7 = 127;
  if (v7 <= -128)
    v8 = -128;
  else
    v8 = v7;
  sub_1000E70EC(v8, 32);
}

void ScrollReport.delta.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;
  double v4;
  char v5;

  *(_QWORD *)(a1 + 24) = v1;
  sub_1001B5868(24);
  v4 = (double)v3;
  sub_1001B5868(32);
  *(double *)a1 = v4;
  *(double *)(a1 + 8) = (double)v5;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B584C();
}

void sub_1001B4BD8(double *a1)
{
  ScrollReport.delta.setter(*a1, a1[1]);
  sub_1000050D4();
}

void ScrollReport.accelDelta.setter(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;

  *(HIDUtils::HIDFixed_optional *)&v1 = HIDFixed.init(doubleValue:)(a1);
  sub_1001B583C(v1);
  v2 = sub_1001B5874();
  if ((v2 & (unint64_t)&_mh_execute_header) != 0)
    v2 = 0;
  else
    v2 = v2;
  sub_1001B5188(v2, 72);
}

void ScrollReport.accelDelta.modify(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v4;
  int v5;
  double v6;
  double v7;

  *(_QWORD *)(a1 + 24) = v1;
  sub_1001B585C(40);
  v4 = v2 / sub_1001B5834();
  sub_1001B585C(72);
  v6 = (double)v5;
  v7 = static HIDFixed.scale.getter();
  *(double *)a1 = v4;
  *(double *)(a1 + 8) = v6 / v7;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1001B584C();
}

void sub_1001B4C8C(Swift::Double *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(HIDUtils::HIDFixed_optional *)&v1 = HIDFixed.init(doubleValue:)(*a1);
  sub_1001B583C(v1);
  v2 = sub_1001B5874();
  if ((v2 & (unint64_t)&_mh_execute_header) != 0)
    v2 = 0;
  else
    v2 = v2;
  sub_1001B5188(v2, 72);
}

void ScrollReport.init(scrollEvent:)(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t ScrollMomentum;
  id v5;

  v1 = a1;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
  v3 = v2;
  ScrollMomentum = IOHIDEventGetScrollMomentum();

  Data._Representation.subscript.setter(ScrollMomentum);
  v5 = v1;
  sub_1001B5138();

  sub_100127CC4(8, 7, 0xD000000000000uLL);
  JUMPOUT(0x1001B4DA4);
}

uint64_t sub_1001B50B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  sub_1001B5500(a1, (uint64_t)&v7);
  if (v8)
  {
    sub_100025A50(&v7, (uint64_t)v9);
    v1 = v10;
    v2 = v11;
    sub_10000DBE4(v9, v10);
    v3 = dispatch thunk of HIDEventProtocol.wrappedValue.getter(v1, v2);
    CGSize.init(_:)(v3);
    v5 = v4;
    sub_100005988(v9);
  }
  else
  {
    sub_1001B56A0((uint64_t)&v7);
    return 0;
  }
  return v5;
}

uint64_t sub_1001B5138()
{
  void *v0;
  void *v1;
  int Phase;

  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
  v1 = v0;
  Phase = IOHIDEventGetPhase();

  return Phase & 0xFFFFFF8F;
}

void sub_1001B5188(uint64_t a1, char a2)
{
  if ((a2 & 7) != 0)
    __asm { BR              X11 }
  __asm { BR              X11 }
}

void sub_1001B53A8()
{
  char v0;

  sub_1001B57FC();
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x1001B53C8);
  }
  JUMPOUT(0x1001B521CLL);
}

ValueMetadata *type metadata accessor for ScrollReport()
{
  return &type metadata for ScrollReport;
}

uint64_t sub_1001B5458(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  sub_10000DBE4(a1, v2);
  v4 = dispatch thunk of HIDUsageProtocol.usage.getter(v2, v3);
  v5 = static ReportID.button.getter();
  LOBYTE(v4) = static HIDUsage.== infix(_:_:)(v4, v5);
  sub_1000445C0((uint64_t)a1, (uint64_t)v10);
  if ((v4 & 1) != 0)
  {
    v6 = v11;
    v7 = v12;
    sub_10000DBE4(v10, v11);
    v8 = dispatch thunk of HIDEventProtocol.accelerated.getter(v6, v7);
  }
  else
  {
    v8 = 0;
  }
  sub_100005988(v10);
  return v8 & 1;
}

void sub_1001B5500(void *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  id v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17[2];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v14 = a1;
  v3 = sub_1001B56E0(v14);

  if (v3)
  {
    *(_QWORD *)(a2 + 24) = &type metadata for ScrollEvent;
    *(_QWORD *)(a2 + 32) = &protocol witness table for ScrollEvent;
    *(_QWORD *)a2 = v14;
    v4 = v14;
  }
  else
  {
    v5 = objc_msgSend(v14, "children");
    if (v5)
    {
      v6 = v5;
      v7 = sub_1001B57C0();
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

      v9 = sub_1001E6474(v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = _swiftEmptyArrayStorage;
    }
    v10 = v9[2];
    if (v10)
    {
      v11 = (uint64_t)(v9 + 4);
      while (1)
      {
        sub_1000445C0(v11, (uint64_t)v18);
        v12 = v19;
        v13 = v20;
        sub_10000DBE4(v18, v19);
        HIDEventProtocol.first(where:)(sub_1001B5458, 0, v12, v13, &v15);
        if (v16)
          break;
        sub_1001B56A0((uint64_t)&v15);
        sub_100005988(v18);
        v11 += 40;
        if (!--v10)
          goto LABEL_10;
      }
      swift_bridgeObjectRelease();
      sub_100025A50(&v15, (uint64_t)v17);
      sub_100025A50(v17, a2);
      sub_100005988(v18);
    }
    else
    {
LABEL_10:
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
}

uint64_t sub_1001B56A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002B5358);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_1001B56E0(void *a1)
{
  id v1;
  int v2;
  int v3;
  void *v4;
  void *v5;
  int EventFlags;
  _BOOL8 v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v10[3] = &type metadata for ScrollEvent;
  v10[4] = &protocol witness table for ScrollEvent;
  v10[0] = a1;
  v1 = a1;
  v2 = dispatch thunk of HIDUsageProtocol.usage.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
  v3 = static ReportID.button.getter();
  LOBYTE(v2) = static HIDUsage.== infix(_:_:)(v2, v3);
  sub_1000445C0((uint64_t)v10, (uint64_t)v9);
  if ((v2 & 1) != 0)
  {
    sub_10000DBE4(v9, v9[3]);
    HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
    v5 = v4;
    EventFlags = IOHIDEventGetEventFlags();

    v7 = (static HIDEventFlags.accelerated.getter() & ~EventFlags) == 0;
  }
  else
  {
    v7 = 0;
  }
  sub_100005988(v9);
  sub_100005988(v10);
  return v7;
}

unint64_t sub_1001B57C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B61E0;
  if (!qword_1002B61E0)
  {
    v1 = objc_opt_self(HIDEvent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B61E0);
  }
  return result;
}

uint64_t sub_1001B5808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Data._Representation.subscript.setter(a1, a2 >> 3);
}

uint64_t sub_1001B5824(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 8) = v1;
  return result;
}

double sub_1001B5834()
{
  return static HIDFixed.scale.getter();
}

void sub_1001B583C(uint64_t a1)
{
  if ((a1 & (unint64_t)&_mh_execute_header) != 0)
    a1 = 0;
  else
    a1 = a1;
  sub_1001B5188(a1, 40);
}

void sub_1001B585C(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_10013E758(a1, v2, v1);
}

void sub_1001B5868(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1001E0D24(a1, v2, v1);
}

uint64_t sub_1001B5874()
{
  Swift::Double v0;
  uint64_t result;

  *(HIDUtils::HIDFixed_optional *)&result = HIDFixed.init(doubleValue:)(v0);
  return result;
}

uint64_t sub_1001B587C@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return Data._Representation.subscript.setter(v1 | a1, v2);
}

void sub_1001B5888(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_10013E758(a1, v2, v1);
}

void sub_1001B5894(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1001E0D24(a1, v2, v1);
}

void sub_1001B58A0()
{
  type metadata accessor for HIDReportDescriptor();
}

void *AppleVendorKeyboardUsage.page.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.page;
}

uint64_t AppleVendorKeyboardUsage.usage.getter(uint64_t result)
{
  return result;
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardUsage.init(rawValue:)(Swift::UInt8 rawValue)
{
  char v1;

  if (rawValue > 0x21u)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  sub_1001B76C4();
  if (v1)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  else
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(0);
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardUsage.init(_:)(Swift::Int a1)
{
  char v2;

  if ((unint64_t)a1 > 0xFF)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  if (a1 > 0x21u)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  sub_1001B76C4();
  if (v2)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  else
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(0);
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  char v2;

  if (page != 65281)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  if (usage < 0)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  if (usage > 255)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  if (usage > 0x21u)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  sub_1001B76C4();
  if (v2)
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(1);
  else
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)sub_1001B7698(0);
}

uint64_t sub_1001B59A0()
{
  unsigned __int8 *v0;

  return AppleVendorKeyboardUsage.usage.getter(*v0);
}

EnsembleHID::AppleVendorKeyboardUsage_optional sub_1001B59A8@<W0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, Swift::UInt8 *a3@<X8>)
{
  EnsembleHID::AppleVendorKeyboardUsage_optional result;

  result = AppleVendorKeyboardUsage.init(page:usage:)(a1, a2);
  *a3 = result.value.rawValue;
  a3[1] = result.is_nil;
  return result;
}

EnsembleHID::AppleVendorKeyboardUsage_optional sub_1001B59D4@<W0>(Swift::UInt8 *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::AppleVendorKeyboardUsage_optional result;

  result = AppleVendorKeyboardUsage.init(rawValue:)(*a1);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

uint64_t sub_1001B5A04()
{
  unsigned __int8 *v0;

  return sub_1001DCBA4(*v0);
}

void sub_1001B5A0C(int a1)
{
  Swift::UInt8 *v1;

  sub_1001DCC20(a1, *v1);
}

uint64_t sub_1001B5A14(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1001DCC54(a1, *v1);
}

void *AppleVendorKeyboardUsage.spotlight.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.spotlight;
}

void *AppleVendorKeyboardUsage.dashboard.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.dashboard;
}

void *AppleVendorKeyboardUsage.function.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.function;
}

void *AppleVendorKeyboardUsage.launchpad.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.launchpad;
}

void *AppleVendorKeyboardUsage.exposeAll.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.exposeAll;
}

void *AppleVendorKeyboardUsage.exposeDesktop.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.exposeDesktop;
}

void *AppleVendorKeyboardUsage.brightnessUp.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.brightnessUp;
}

void *AppleVendorKeyboardUsage.brightnessDown.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardUsage.brightnessDown;
}

uint64_t static HIDEventType.motionActivity.getter()
{
  return 33;
}

void *AppleVendorKeyboardReport.reportID.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardReport.reportID;
}

void *AppleVendorKeyboardReport.bitCount.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardReport.bitCount;
}

uint64_t HIDEventFlags.momentumLowerMask.getter()
{
  return 24;
}

void *AppleVendorKeyboardReport.usageMinimum.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardReport.usageMinimum;
}

void *AppleVendorKeyboardReport.usageMaximum.unsafeMutableAddressor()
{
  return &static AppleVendorKeyboardReport.usageMaximum;
}

uint64_t static UInt8.logicalMaximum.getter()
{
  return 255;
}

void sub_1001B5AC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static AppleVendorKeyboardReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static AppleVendorKeyboardReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001B5B1C, v2);
}

uint64_t sub_1001B5B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  type metadata accessor for Input.Bit8();
  v137 = v0;
  v135 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v134 = (char *)&v109 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v133 = v2;
  v132 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v130 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v129 = v4;
  v128 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v127 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v126 = v6;
  v125 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v124 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v123 = v8;
  v122 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v121 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v120 = v10;
  v119 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v118 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v116 = v12;
  v114 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v113 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v112 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (unsigned __int8 *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v19 = *(_QWORD *)(v18 - 8);
  v139 = v18;
  v140 = v19;
  __chkstk_darwin(v18);
  v152 = (uint64_t *)((char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for LogicalMaximum();
  v136 = v21;
  v138 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v117 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v150 = v23;
  v131 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v115 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v147 = v25;
  v155 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v146 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportCount();
  v145 = v27;
  v154 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v148 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v143 = v29;
  v153 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = v31;
  type metadata accessor for UsageMinimum();
  v142 = v32;
  v151 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v109 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = v34;
  type metadata accessor for UsagePage();
  v141 = v35;
  v111 = *(_QWORD *)(v35 - 8);
  v36 = v111;
  __chkstk_darwin(v35);
  v38 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v38;
  UsagePage.init(_:)(65281, v39, v40, v41, v42, v43, v44, v45);
  UsageMinimum.init(_:)(0, v34);
  UsageMaximum.init(_:)(0xFFu, v31);
  ReportCount.init(_:)(2, v46, v47, v48, v49, v50, v51, v52);
  ReportSize.init(_:)(8, v53, v54, v55, v56, v57, v58, v59);
  LogicalMinimum.init(_:)(0, v60, v61, v62, v63, v64, v65, v66);
  LogicalMaximum.init(_:)(255, v67, v68, v69, v70, v71, v72, v73);
  v74 = v17;
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v15 + 104))(v17, 0, v112);
  v75 = v113;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, 0, v116);
  v76 = v118;
  (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, 0, v120);
  v77 = v121;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, 0, v123);
  v78 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, 0, v126);
  v79 = v127;
  (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v127, 0, v129);
  v80 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v130, 0, v133);
  (*(void (**)(char *, _QWORD, uint64_t))(v135 + 104))(v134, 0, v137);
  Input.init(_:_:_:_:_:_:_:_:)(v74, v75, v76, v77, v78, v79, v80, v152);
  v81 = sub_1000055B0(&qword_1002B5310);
  v82 = swift_allocObject(v81, 392, 7);
  *(_OWORD *)(v82 + 16) = xmmword_10021E830;
  *(_QWORD *)(v82 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v82 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v82 + 32) = 3;
  v83 = v141;
  *(_QWORD *)(v82 + 96) = v141;
  *(_QWORD *)(v82 + 104) = &protocol witness table for UsagePage;
  v84 = sub_100005534((_QWORD *)(v82 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v36 + 16))(v84, v38, v83);
  v85 = v142;
  *(_QWORD *)(v82 + 136) = v142;
  *(_QWORD *)(v82 + 144) = &protocol witness table for UsageMinimum;
  v86 = sub_100005534((_QWORD *)(v82 + 112));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v151 + 16))(v86, v144, v85);
  v87 = v143;
  *(_QWORD *)(v82 + 176) = v143;
  *(_QWORD *)(v82 + 184) = &protocol witness table for UsageMaximum;
  v88 = sub_100005534((_QWORD *)(v82 + 152));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v153 + 16))(v88, v149, v87);
  v89 = v145;
  *(_QWORD *)(v82 + 216) = v145;
  *(_QWORD *)(v82 + 224) = &protocol witness table for ReportCount;
  v90 = sub_100005534((_QWORD *)(v82 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v154 + 16))(v90, v148, v89);
  v91 = v147;
  *(_QWORD *)(v82 + 256) = v147;
  *(_QWORD *)(v82 + 264) = &protocol witness table for ReportSize;
  v92 = sub_100005534((_QWORD *)(v82 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v155 + 16))(v92, v146, v91);
  v93 = v150;
  *(_QWORD *)(v82 + 296) = v150;
  *(_QWORD *)(v82 + 304) = &protocol witness table for LogicalMinimum;
  v94 = sub_100005534((_QWORD *)(v82 + 272));
  v95 = v131;
  v96 = v115;
  (*(void (**)(_QWORD *, char *, uint64_t))(v131 + 16))(v94, v115, v93);
  v97 = v136;
  *(_QWORD *)(v82 + 336) = v136;
  *(_QWORD *)(v82 + 344) = &protocol witness table for LogicalMaximum;
  v98 = sub_100005534((_QWORD *)(v82 + 312));
  v99 = v138;
  v100 = v117;
  (*(void (**)(_QWORD *, char *, uint64_t))(v138 + 16))(v98, v117, v97);
  v101 = v139;
  *(_QWORD *)(v82 + 376) = v139;
  *(_QWORD *)(v82 + 384) = &protocol witness table for Input;
  v102 = sub_100005534((_QWORD *)(v82 + 352));
  v103 = v140;
  v104 = v152;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v140 + 16))(v102, v152, v101);
  v105 = static HIDReportDescriptor.Builder.buildBlock(_:)(v82);
  v137 = v106;
  v107 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v103 + 8))(v104, v101, v107);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v97);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v150);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v146, v147);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v148, v145);
  (*(void (**)(_QWORD *, uint64_t))(v153 + 8))(v149, v143);
  (*(void (**)(_QWORD *, uint64_t))(v151 + 8))(v144, v142);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v141);
  return v105;
}

uint64_t AppleVendorKeyboardReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B5178 != -1)
    swift_once(&qword_1002B5178, sub_1001B5AC4);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static AppleVendorKeyboardReport.descriptor);
}

uint64_t static AppleVendorKeyboardReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B5178 != -1)
    swift_once(&qword_1002B5178, sub_1001B5AC4);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static AppleVendorKeyboardReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001B64C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AppleVendorKeyboardReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t HIDReport.storage.getter(uint64_t a1, unint64_t a2)
{
  sub_1001B3530(a1, a2);
  return sub_100026B88();
}

uint64_t AppleVendorKeyboardReport.init()()
{
  return 3;
}

void AppleVendorKeyboardReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001B65BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;

  if (BYTE6(v0) < 3uLL)
    goto LABEL_2;
  v3 = sub_100026B88();
  sub_10002517C(v3, v4);
  v5 = sub_100026B88();
  sub_10013DE98(v5, v6);
  v8 = v7;
  sub_1001B76FC(v1);
  sub_10013DE98(3, 0x3000000000000);
  if ((v8 & 0x100) != 0)
  {
    if ((v9 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v9 & 0x100) != 0 || v8 != v9)
LABEL_2:
    sub_1001B76FC(v1);
  return sub_100026B88();
}

void sub_1001B6690(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = AppleVendorKeyboardReport.init()();
  a1[1] = v2;
  sub_1000050D4();
}

void sub_1001B66B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  AppleVendorKeyboardReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

uint64_t AppleVendorKeyboardReport.description.getter(uint64_t a1, unint64_t a2)
{
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v14;
  Swift::String v15;

  v15._countAndFlagsBits = 0xD00000000000001BLL;
  v15._object = (void *)0x8000000100259EF0;
  sub_10002517C(a1, a2);
  v4 = 8;
  v5 = 1;
  do
  {
    v6 = v5;
    sub_100127CC4(v4, a1, a2);
    if (v7 <= 0x21u && ((1 << v7) & 0x30003001ELL) != 0)
    {
      v14._countAndFlagsBits = v7;
      v9 = sub_10002C9FC();
      v14._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v14, 16, 0, &type metadata for Int, v9);
      v14._object = v10;
      v11._countAndFlagsBits = 32;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
    }
    v5 = 0;
    v4 = 16;
  }
  while ((v6 & 1) != 0);
  sub_1001B76FC(a1);
  v14 = v15;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14._countAndFlagsBits;
}

uint64_t AppleVendorKeyboardReport.makeIterator()(uint64_t a1, unint64_t a2)
{
  sub_1001B3530(a1, a2);
  return sub_100026B88();
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardReport.Iterator.next()()
{
  EnsembleHID::AppleVendorKeyboardUsage_optional v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;

  v2 = v1[2];
  if (v2 > 1)
  {
LABEL_8:
    v0.value.rawValue = 0;
    v6 = 1;
    return (EnsembleHID::AppleVendorKeyboardUsage_optional)(v0.value.rawValue | (unsigned __int16)(v6 << 8));
  }
  else
  {
    v3 = *v1;
    v4 = v1[1];
    v5 = 8 * v2;
    while ((unint64_t)(v2 - 0x1000000000000000) >> 61 == 7)
    {
      v0 = (EnsembleHID::AppleVendorKeyboardUsage_optional)(v5 + 8);
      if (__OFADD__(v5, 8))
        goto LABEL_12;
      sub_100127CC4(v0.value.rawValue, v3, v4);
      if (v0.value.rawValue <= 0x21u && ((1 << v0.value.rawValue) & 0x30003001ELL) != 0)
      {
        v6 = 0;
        v1[2] = v2 + 1;
        return (EnsembleHID::AppleVendorKeyboardUsage_optional)(v0.value.rawValue | (unsigned __int16)(v6 << 8));
      }
      v1[2] = ++v2;
      v5 += 8;
      if (v2 == 2)
        goto LABEL_8;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return v0;
}

uint64_t sub_1001B690C()
{
  uint64_t v0;

  return AppleVendorKeyboardReport.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1001B6914()
{
  uint64_t v0;

  LOWORD(v0) = AppleVendorKeyboardReport.Iterator.next()();
  sub_1001B76B4(v0);
  sub_1000050D4();
}

uint64_t sub_1001B6934@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = AppleVendorKeyboardReport.makeIterator()(v4, v3);
  v7 = v6;
  result = sub_100022AEC(v4, v3);
  *a1 = v5;
  a1[1] = v7;
  a1[2] = 0;
  return result;
}

void sub_1001B698C()
{
  sub_1001BD214();
}

uint64_t sub_1001B6994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1001BD250(a1, a2, a3, *v3, v3[1]);
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardReport.update(with:)(EnsembleHID::AppleVendorKeyboardUsage with)
{
  uint64_t v1;
  EnsembleHID::AppleVendorKeyboardUsage_optional result;

  v1 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v1);
  sub_1001B76E8();
  __asm { BR              X10 }
  return result;
}

uint64_t sub_1001B6A34(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char *v15;

  sub_1001B76E0(a1, a2);
  v6 = sub_1001B76E8();
  v8 = v7;
  v9 = v6;
  *(_QWORD *)(v5 - 240) = 0;
  v10 = sub_1001B6DA0(1, 2, v6, v7);
  v12 = v11;
  sub_100022AEC(v9, v8);
  sub_10002517C(v10, v12);
  ((void (*)(uint64_t, unint64_t))Data.makeIterator())(v10, v12);
  sub_1001B768C();
  v13 = sub_1001B7330();
  do
  {
    dispatch thunk of IteratorProtocol.next()(v3, v13);
    v14 = *(unsigned __int8 *)(v5 - 109);
    if ((v14 & 1) != 0)
    {
      sub_1001B76A4();
      *(_QWORD *)(v5 - 232) = 0;
      *(_QWORD *)(v5 - 248) = v4;
      v15 = (char *)&loc_1001B6B08 + *((int *)qword_1001B6D80 + (v12 >> 62));
      *(_QWORD *)(v5 - 128) = (int)v10;
      __asm { BR              X9 }
    }
  }
  while (*(unsigned __int8 *)(v5 - 110) != v2);
  sub_1001B76A4();
  sub_1001B768C();
  return v2 | (v14 << 8);
}

uint64_t sub_1001B6DA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1001B6DB0 + dword_1001B6E0C[a4 >> 62]))();
}

uint64_t sub_1001B6DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (BYTE6(a4) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 + 1 < a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x1001B6E0CLL);
  }
  return Data._Representation.subscript.getter();
}

EnsembleHID::AppleVendorKeyboardUsage_optional __swiftcall AppleVendorKeyboardReport.remove(_:)(EnsembleHID::AppleVendorKeyboardUsage a1)
{
  EnsembleHID::AppleVendorKeyboardUsage_optional result;

  sub_1001B7704();
  __asm { BR              X10 }
  return result;
}

void sub_1001B6E7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1001B76F4(a1, a2);
  v2 = sub_1001B7704();
  v4 = v3;
  v5 = v2;
  sub_1001B6DA0(1, 2, v2, v3);
  v7 = v6;
  sub_100022AEC(v5, v4);
  __asm { BR              X9 }
}

uint64_t sub_1001B7190(char *a1)
{
  uint64_t *v1;

  return sub_1001BD268(*a1, *v1, v1[1]);
}

uint64_t sub_1001B719C()
{
  return sub_1001B2DA4();
}

uint64_t sub_1001B71A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001C2708);
}

uint64_t sub_1001B71B4()
{
  return sub_1001B2DA4();
}

void sub_1001B71C0(uint64_t a1, unsigned __int8 *a2)
{
  sub_1001D4584(a1, *a2);
}

void sub_1001B71C8(EnsembleHID::AppleVendorKeyboardUsage *a1)
{
  uint64_t v1;

  LOWORD(v1) = AppleVendorKeyboardReport.remove(_:)((EnsembleHID::AppleVendorKeyboardUsage)a1->rawValue);
  sub_1001B76B4(v1);
  sub_1000050D4();
}

void sub_1001B71EC(EnsembleHID::AppleVendorKeyboardUsage *a1)
{
  uint64_t v1;

  LOWORD(v1) = AppleVendorKeyboardReport.update(with:)((EnsembleHID::AppleVendorKeyboardUsage)a1->rawValue);
  sub_1001B76B4(v1);
  sub_1000050D4();
}

uint64_t sub_1001B7210()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = sub_100141354();
  sub_1001BCCF4(v0, v1);
  v2 = sub_100141354();
  return sub_1001B3434(v2, v3);
}

uint64_t sub_1001B7238(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return sub_1001D4618(*a1, a1[1], a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1001B7244()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = sub_100141354();
  sub_1001D4834(v0, v1);
  v2 = sub_100141354();
  return sub_1001B3434(v2, v3);
}

uint64_t sub_1001B726C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001D4C54);
}

unint64_t sub_1001B7278(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001C2864(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001B7288(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001D4F14(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

unint64_t sub_1001B7298(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001C29A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *v1, v1[1]);
}

void sub_1001B72A8()
{
  sub_1001D42E0();
}

void sub_1001B72B0()
{
  sub_1001B764C();
  EnsembleReportProtocol<>.init<A>(_:)();
}

uint64_t sub_1001B7320()
{
  return sub_1001D5070();
}

unint64_t sub_1001B7330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5360;
  if (!qword_1002B5360)
  {
    v1 = type metadata accessor for Data.Iterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Data.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5360);
  }
  return result;
}

unint64_t sub_1001B7374()
{
  unint64_t result;

  result = qword_1002B5368;
  if (!qword_1002B5368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardUsage, &type metadata for AppleVendorKeyboardUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5368);
  }
  return result;
}

unint64_t sub_1001B73B4()
{
  unint64_t result;

  result = qword_1002B5370;
  if (!qword_1002B5370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardUsage, &type metadata for AppleVendorKeyboardUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5370);
  }
  return result;
}

unint64_t sub_1001B73F4()
{
  unint64_t result;

  result = qword_1002B5378;
  if (!qword_1002B5378)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardReport.Iterator, &type metadata for AppleVendorKeyboardReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_1002B5378);
  }
  return result;
}

unint64_t sub_1001B7434()
{
  unint64_t result;

  result = qword_1002B5380;
  if (!qword_1002B5380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardReport, &type metadata for AppleVendorKeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5380);
  }
  return result;
}

unint64_t sub_1001B7474()
{
  unint64_t result;

  result = qword_1002B5388;
  if (!qword_1002B5388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardReport, &type metadata for AppleVendorKeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5388);
  }
  return result;
}

void type metadata accessor for AppleVendorKeyboardUsage()
{
  sub_10003B1DC();
}

void type metadata accessor for AppleVendorKeyboardReport()
{
  sub_10003B1DC();
}

uint64_t *sub_1001B74CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_10002517C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for ServiceFilterReport(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_10002517C(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100022AEC(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for ServiceFilterReport(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100022AEC(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceFilterReport(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ServiceFilterReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for AppleVendorKeyboardReport.Iterator()
{
  sub_10003B1DC();
}

unint64_t sub_1001B764C()
{
  unint64_t result;

  result = qword_1002B5390;
  if (!qword_1002B5390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorKeyboardReport, &type metadata for AppleVendorKeyboardReport);
    atomic_store(result, (unint64_t *)&qword_1002B5390);
  }
  return result;
}

uint64_t sub_1001B768C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1001B7698@<X0>(int a1@<W8>)
{
  int v1;

  return v1 | (a1 << 8);
}

uint64_t sub_1001B76A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1001B76B4(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  v1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1001B76E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100022AEC(v2, a2);
}

uint64_t sub_1001B76E8()
{
  uint64_t v0;
  unint64_t v1;

  return HIDReport.storage.getter(v0, v1);
}

uint64_t sub_1001B76F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100022AEC(v2, a2);
}

uint64_t sub_1001B76FC(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001B7704()
{
  uint64_t v0;
  unint64_t v1;

  return HIDReport.storage.getter(v0, v1);
}

uint64_t _s11EnsembleHID24AppleVendorKeyboardUsageV4pageSivgZ_0()
{
  return 65281;
}

void sub_1001B7718(uint64_t a1)
{
  sub_1001B8D9C(a1, qword_1002B7228, sub_1001B772C);
}

uint64_t sub_1001B772C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  char *v108;
  unsigned __int8 *v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  void (*v149)(unsigned __int8 *);
  _BYTE *v150;
  _BYTE *v151;
  _BYTE *v152;
  char *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  void (*v173)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v174;
  _BYTE *v175;
  unsigned __int8 *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  _BYTE *v199;
  _BYTE *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  void (*v220)(_QWORD *, char *, uint64_t);
  uint64_t v221;
  _QWORD *v222;
  void (*v223)(_QWORD *, char *, uint64_t);
  uint64_t v224;
  _QWORD *v225;
  void (*v226)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  char *v244;
  _QWORD *v245;
  char *v246;
  _QWORD *v247;
  _QWORD *v248;
  __n128 v249;
  void (*v250)(_QWORD *, uint64_t, __n128);
  void (*v251)(char *, uint64_t);
  void (*v252)(char *, uint64_t);
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  unsigned __int8 *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _BYTE *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  _QWORD *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  char *v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  void (*v294)(unsigned __int8 *);
  void (*v295)(_BYTE *);
  uint64_t v296;
  uint64_t v297;
  void (*v298)(char *);
  void (*v299)(_BYTE *);
  uint64_t v300;
  void (*v301)(char *);
  unsigned int v302;
  uint64_t v303;
  void (*v304)(char *);
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;

  type metadata accessor for Input.Bit8();
  v1 = *(_QWORD *)(v0 - 8);
  v296 = v0;
  v297 = v1;
  __chkstk_darwin(v0);
  v290 = (char *)&v254 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v307 = *(_QWORD *)(v3 - 8);
  v300 = v3;
  __chkstk_darwin(v3);
  v261 = (char *)&v254 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v313 = v5;
  v303 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v273 = (char *)&v254 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v312 = v7;
  v310 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v272 = (char *)&v254 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v309 = v9;
  v305 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v271 = (char *)&v254 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v311 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v254 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (char *)&v254 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v21 = *(_QWORD *)(v20 - 8);
  v289 = v20;
  __chkstk_darwin(v20);
  v23 = (unsigned __int8 *)&v254 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v258 = v24;
  v270 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v269 = (uint64_t *)((char *)&v254 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v266 = (uint64_t *)((char *)&v254 - v27);
  __chkstk_darwin(v28);
  v276 = (uint64_t *)((char *)&v254 - v29);
  __chkstk_darwin(v30);
  v285 = (uint64_t *)((char *)&v254 - v31);
  __chkstk_darwin(v32);
  v286 = (uint64_t *)((char *)&v254 - v33);
  __chkstk_darwin(v34);
  v287 = (uint64_t *)((char *)&v254 - v35);
  __chkstk_darwin(v36);
  v288 = (uint64_t *)((char *)&v254 - v37);
  type metadata accessor for ReportCount();
  v257 = v38;
  v268 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v264 = (char *)&v254 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v275 = (char *)&v254 - v41;
  __chkstk_darwin(v42);
  v281 = (char *)&v254 - v43;
  __chkstk_darwin(v44);
  v282 = (char *)&v254 - v45;
  __chkstk_darwin(v46);
  v283 = (char *)&v254 - v47;
  __chkstk_darwin(v48);
  v284 = (char *)&v254 - v49;
  __chkstk_darwin(v50);
  v265 = (char *)&v254 - v51;
  type metadata accessor for ReportSize();
  v256 = v52;
  v263 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v262 = (char *)&v254 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v274 = (char *)&v254 - v55;
  __chkstk_darwin(v56);
  v278 = (char *)&v254 - v57;
  __chkstk_darwin(v58);
  v279 = (char *)&v254 - v59;
  __chkstk_darwin(v60);
  v280 = (char *)&v254 - v61;
  __chkstk_darwin(v62);
  v277 = (char *)&v254 - v63;
  __chkstk_darwin(v64);
  v267 = (char *)&v254 - v65;
  ReportSize.init(_:)(8, v66, v67, v68, v69, v70, v71, v72);
  ReportCount.init(_:)(1, v73, v74, v75, v76, v77, v78, v79);
  v292 = 0;
  v294 = *(void (**)(unsigned __int8 *))(v21 + 104);
  v80 = v23;
  v294(v23);
  v291 = 1;
  v304 = *(void (**)(char *))(v17 + 104);
  v81 = v19;
  v308 = v16;
  v304(v19);
  v306 = 0;
  v295 = *(void (**)(_BYTE *))(v12 + 104);
  v295(v14);
  v302 = 0;
  v299 = *(void (**)(_BYTE *))(v305 + 104);
  v82 = v271;
  v299(v271);
  LODWORD(v305) = 0;
  v310 = *(_QWORD *)(v310 + 104);
  v83 = v272;
  ((void (*)(char *))v310)(v272);
  v293 = 0;
  v298 = *(void (**)(char *))(v303 + 104);
  v84 = v273;
  v298(v273);
  LODWORD(v303) = 0;
  v301 = *(void (**)(char *))(v307 + 104);
  v85 = v261;
  v301(v261);
  LODWORD(v307) = 0;
  v86 = v296;
  v297 = *(_QWORD *)(v297 + 104);
  ((void (*)(char *))v297)(v290);
  v260 = v80;
  v255 = v81;
  v87 = v84;
  Input.init(_:_:_:_:_:_:_:_:)(v80, v81, v14, v82, v83, v84, v85, v288);
  ReportSize.init(_:)(8, v88, v89, v90, v91, v92, v93, v94);
  ReportCount.init(_:)(1, v95, v96, v97, v98, v99, v100, v101);
  v102 = v80;
  v103 = v292;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v294)(v102, v292, v289);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v304)(v81, v291, v308);
  v259 = v14;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v295)(v14, v306, v311);
  v104 = v82;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v82, v302, v309);
  v105 = v83;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v310)(v83, v305, v312);
  v106 = v293;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v298)(v84, v293, v313);
  v107 = v85;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v301)(v85, v303, v300);
  v108 = v290;
  ((void (*)(char *, _QWORD, uint64_t))v297)(v290, v307, v86);
  v109 = v260;
  v110 = v255;
  v111 = v259;
  Input.init(_:_:_:_:_:_:_:_:)(v260, v255, v259, v104, v105, v87, v107, v287);
  ReportSize.init(_:)(8, v112, v113, v114, v115, v116, v117, v118);
  ReportCount.init(_:)(1, v119, v120, v121, v122, v123, v124, v125);
  v126 = v289;
  ((void (*)(unsigned __int8 *, uint64_t, uint64_t))v294)(v109, v103, v289);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v304)(v110, v291, v308);
  v127 = v111;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v295)(v111, v306, v311);
  v128 = v104;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v104, v302, v309);
  v129 = v105;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v310)(v105, v305, v312);
  v130 = v273;
  ((void (*)(char *, uint64_t, uint64_t))v298)(v273, v106, v313);
  v131 = v261;
  ((void (*)(char *, _QWORD, uint64_t))v301)(v261, v303, v300);
  v132 = v296;
  ((void (*)(char *, _QWORD, uint64_t))v297)(v108, v307, v296);
  Input.init(_:_:_:_:_:_:_:_:)(v109, v110, v127, v128, v129, v130, v131, v286);
  ReportSize.init(_:)(8, v133, v134, v135, v136, v137, v138, v139);
  ReportCount.init(_:)(1, v140, v141, v142, v143, v144, v145, v146);
  v147 = v109;
  v148 = v126;
  v149 = v294;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v294)(v109, v292, v148);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v304)(v110, v291, v308);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v295)(v127, v306, v311);
  v150 = v128;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v128, v302, v309);
  v151 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v310)(v272, v305, v312);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v298)(v130, v293, v313);
  v152 = v131;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v301)(v131, v303, v300);
  v153 = v290;
  ((void (*)(char *, _QWORD, uint64_t))v297)(v290, v307, v132);
  v154 = v127;
  Input.init(_:_:_:_:_:_:_:_:)(v147, v110, v127, v150, v151, v130, v152, v285);
  ReportSize.init(_:)(16, v155, v156, v157, v158, v159, v160, v161);
  ReportCount.init(_:)(1, v162, v163, v164, v165, v166, v167, v168);
  v169 = v147;
  v170 = v289;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v149)(v169, v292, v289);
  v171 = v110;
  v172 = v291;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v304)(v110, v291, v308);
  v173 = (void (*)(_BYTE *, _QWORD, uint64_t))v295;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v295)(v154, v306, v311);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v271, v302, v309);
  v174 = v151;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v310)(v151, v305, v312);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v298)(v130, v293, v313);
  v175 = v152;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v301)(v152, v303, v300);
  ((void (*)(char *, _QWORD, uint64_t))v297)(v153, v307, v296);
  v176 = v260;
  v177 = v154;
  v178 = v271;
  v179 = v174;
  v180 = v175;
  Input.init(_:_:_:_:_:_:_:_:)(v260, v171, v177, v271, v179, v130, v175, v276);
  ReportSize.init(_:)(32, v181, v182, v183, v184, v185, v186, v187);
  ReportCount.init(_:)(2, v188, v189, v190, v191, v192, v193, v194);
  v195 = v176;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v294)(v176, v292, v170);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v304)(v171, v172, v308);
  v196 = v259;
  v173(v259, v306, v311);
  v197 = v309;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v178, v302, v309);
  v198 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v310)(v272, v305, v312);
  v199 = v273;
  ((void (*)(char *, _QWORD, uint64_t))v298)(v273, v293, v313);
  v200 = v180;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v301)(v180, v303, v300);
  v201 = v290;
  ((void (*)(char *, _QWORD, uint64_t))v297)(v290, v307, v296);
  Input.init(_:_:_:_:_:_:_:_:)(v195, v171, v196, v178, v198, v199, v200, v266);
  ReportSize.init(_:)(16, v202, v203, v204, v205, v206, v207, v208);
  ReportCount.init(_:)(2, v209, v210, v211, v212, v213, v214, v215);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v294)(v195, v292, v289);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v304)(v171, v291, v308);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v295)(v196, v306, v311);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v299)(v178, v302, v197);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v310)(v198, v305, v312);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v298)(v199, v293, v313);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v301)(v200, v303, v300);
  ((void (*)(char *, _QWORD, uint64_t))v297)(v201, v307, v296);
  Input.init(_:_:_:_:_:_:_:_:)(v195, v171, v196, v178, v198, v199, v200, v269);
  v216 = sub_1000055B0(&qword_1002B5310);
  v217 = swift_allocObject(v216, 872, 7);
  *(_OWORD *)(v217 + 16) = xmmword_10022C650;
  v218 = v256;
  *(_QWORD *)(v217 + 56) = v256;
  *(_QWORD *)(v217 + 64) = &protocol witness table for ReportSize;
  v219 = sub_100005534((_QWORD *)(v217 + 32));
  v220 = *(void (**)(_QWORD *, char *, uint64_t))(v263 + 16);
  v220(v219, v267, v218);
  v221 = v257;
  *(_QWORD *)(v217 + 96) = v257;
  *(_QWORD *)(v217 + 104) = &protocol witness table for ReportCount;
  v222 = sub_100005534((_QWORD *)(v217 + 72));
  v223 = *(void (**)(_QWORD *, char *, uint64_t))(v268 + 16);
  v223(v222, v265, v221);
  v224 = v258;
  *(_QWORD *)(v217 + 136) = v258;
  *(_QWORD *)(v217 + 144) = &protocol witness table for Input;
  v225 = sub_100005534((_QWORD *)(v217 + 112));
  v226 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 16);
  v226(v225, v288, v224);
  *(_QWORD *)(v217 + 176) = v218;
  *(_QWORD *)(v217 + 184) = &protocol witness table for ReportSize;
  v227 = sub_100005534((_QWORD *)(v217 + 152));
  v220(v227, v277, v218);
  *(_QWORD *)(v217 + 216) = v221;
  *(_QWORD *)(v217 + 224) = &protocol witness table for ReportCount;
  v228 = sub_100005534((_QWORD *)(v217 + 192));
  v223(v228, v284, v221);
  *(_QWORD *)(v217 + 256) = v224;
  *(_QWORD *)(v217 + 264) = &protocol witness table for Input;
  v229 = sub_100005534((_QWORD *)(v217 + 232));
  v226(v229, v287, v224);
  *(_QWORD *)(v217 + 296) = v218;
  *(_QWORD *)(v217 + 304) = &protocol witness table for ReportSize;
  v230 = sub_100005534((_QWORD *)(v217 + 272));
  v220(v230, v280, v218);
  *(_QWORD *)(v217 + 336) = v221;
  *(_QWORD *)(v217 + 344) = &protocol witness table for ReportCount;
  v231 = sub_100005534((_QWORD *)(v217 + 312));
  v223(v231, v283, v221);
  *(_QWORD *)(v217 + 376) = v224;
  *(_QWORD *)(v217 + 384) = &protocol witness table for Input;
  v232 = sub_100005534((_QWORD *)(v217 + 352));
  v226(v232, v286, v224);
  *(_QWORD *)(v217 + 416) = v218;
  *(_QWORD *)(v217 + 424) = &protocol witness table for ReportSize;
  v233 = sub_100005534((_QWORD *)(v217 + 392));
  v220(v233, v279, v218);
  *(_QWORD *)(v217 + 456) = v221;
  *(_QWORD *)(v217 + 464) = &protocol witness table for ReportCount;
  v234 = sub_100005534((_QWORD *)(v217 + 432));
  v223(v234, v282, v221);
  *(_QWORD *)(v217 + 496) = v224;
  *(_QWORD *)(v217 + 504) = &protocol witness table for Input;
  v235 = sub_100005534((_QWORD *)(v217 + 472));
  v226(v235, v285, v224);
  *(_QWORD *)(v217 + 536) = v218;
  *(_QWORD *)(v217 + 544) = &protocol witness table for ReportSize;
  v236 = sub_100005534((_QWORD *)(v217 + 512));
  v220(v236, v278, v218);
  *(_QWORD *)(v217 + 576) = v221;
  *(_QWORD *)(v217 + 584) = &protocol witness table for ReportCount;
  v237 = sub_100005534((_QWORD *)(v217 + 552));
  v223(v237, v281, v221);
  *(_QWORD *)(v217 + 616) = v224;
  *(_QWORD *)(v217 + 624) = &protocol witness table for Input;
  v238 = sub_100005534((_QWORD *)(v217 + 592));
  v226(v238, v276, v224);
  *(_QWORD *)(v217 + 656) = v218;
  *(_QWORD *)(v217 + 664) = &protocol witness table for ReportSize;
  v239 = sub_100005534((_QWORD *)(v217 + 632));
  v220(v239, v274, v218);
  *(_QWORD *)(v217 + 696) = v221;
  *(_QWORD *)(v217 + 704) = &protocol witness table for ReportCount;
  v240 = sub_100005534((_QWORD *)(v217 + 672));
  v223(v240, v275, v221);
  *(_QWORD *)(v217 + 736) = v224;
  *(_QWORD *)(v217 + 744) = &protocol witness table for Input;
  v241 = sub_100005534((_QWORD *)(v217 + 712));
  v242 = v266;
  v226(v241, v266, v224);
  *(_QWORD *)(v217 + 776) = v218;
  *(_QWORD *)(v217 + 784) = &protocol witness table for ReportSize;
  v243 = sub_100005534((_QWORD *)(v217 + 752));
  v244 = v262;
  v220(v243, v262, v218);
  *(_QWORD *)(v217 + 816) = v221;
  *(_QWORD *)(v217 + 824) = &protocol witness table for ReportCount;
  v245 = sub_100005534((_QWORD *)(v217 + 792));
  v246 = v264;
  v223(v245, v264, v221);
  *(_QWORD *)(v217 + 856) = v224;
  *(_QWORD *)(v217 + 864) = &protocol witness table for Input;
  v247 = sub_100005534((_QWORD *)(v217 + 832));
  v248 = v269;
  v226(v247, v269, v224);
  v313 = static HIDReportDescriptor.Builder.buildBlock(_:)(v217);
  v249 = swift_bridgeObjectRelease();
  v250 = *(void (**)(_QWORD *, uint64_t, __n128))(v270 + 8);
  v250(v248, v224, v249);
  v251 = *(void (**)(char *, uint64_t))(v268 + 8);
  v251(v246, v221);
  v252 = *(void (**)(char *, uint64_t))(v263 + 8);
  v252(v244, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v242, v224);
  v251(v275, v221);
  v252(v274, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v276, v224);
  v251(v281, v221);
  v252(v278, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v285, v224);
  v251(v282, v221);
  v252(v279, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v286, v224);
  v251(v283, v221);
  v252(v280, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v287, v224);
  v251(v284, v221);
  v252(v277, v218);
  ((void (*)(_QWORD *, uint64_t))v250)(v288, v224);
  v251(v265, v221);
  v252(v267, v218);
  return v313;
}

void *FluidTouchGestureReport.reportID.unsafeMutableAddressor()
{
  return &static FluidTouchGestureReport.reportID;
}

void *FluidTouchGestureReport.bitCount.unsafeMutableAddressor()
{
  return &static FluidTouchGestureReport.bitCount;
}

void sub_1001B89B0(uint64_t a1)
{
  sub_1001B8D9C(a1, static FluidTouchGestureReport.descriptor, (uint64_t (*)(void))sub_1001B89C4);
}

void sub_1001B89C4()
{
  sub_1001B8AA8(12);
}

uint64_t FluidTouchGestureReport.descriptor.unsafeMutableAddressor()
{
  return sub_1001B8BF8(&qword_1002B5188, (uint64_t)static FluidTouchGestureReport.descriptor, (uint64_t)sub_1001B89B0);
}

uint64_t static FluidTouchGestureReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8C50(&qword_1002B5188, (uint64_t)static FluidTouchGestureReport.descriptor, (uint64_t)sub_1001B89B0, a1);
}

uint64_t _s11EnsembleHID23FluidTouchGestureReportV8bitCountSivgZ_0()
{
  return 152;
}

uint64_t sub_1001B8A0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8E34(FluidTouchGestureReport.descriptor.unsafeMutableAddressor, a1);
}

uint64_t FluidTouchGestureReport.init()()
{
  return sub_1001B8E78(12);
}

uint64_t FluidTouchGestureReport.init(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1001B8EDC(a1, a2, 12);
}

uint64_t sub_1001B8A28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FluidTouchGestureReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001B8A4C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  *a3 = FluidTouchGestureReport.init(_:)(a1, a2);
  a3[1] = v4;
  sub_1000050D4();
}

uint64_t sub_1001B8A6C()
{
  uint64_t v0;

  return sub_1001E2ED0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void *DockSwipeReport.reportID.unsafeMutableAddressor()
{
  return &static DockSwipeReport.reportID;
}

void *DockSwipeReport.bitCount.unsafeMutableAddressor()
{
  return &static DockSwipeReport.bitCount;
}

void sub_1001B8A8C(uint64_t a1)
{
  sub_1001B8D9C(a1, static DockSwipeReport.descriptor, (uint64_t (*)(void))sub_1001B8AA0);
}

void sub_1001B8AA0()
{
  sub_1001B8AA8(11);
}

void sub_1001B8AA8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;

  sub_1001B58A0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B5180 != -1)
    swift_once(&qword_1002B5180, sub_1001B7718);
  v7 = sub_100006FB4(v3, (uint64_t)qword_1002B7228);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8(v6, v7, v3);
  v9 = sub_1000055B0(&qword_1002B5310);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10021DE60;
  *(_QWORD *)(v10 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v10 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 96) = v3;
  *(_QWORD *)(v10 + 104) = &protocol witness table for HIDReportDescriptor;
  v11 = (char *)sub_100005534((_QWORD *)(v10 + 72));
  v8(v11, (uint64_t)v6, v3);
  static HIDReportDescriptor.Builder.buildBlock(_:)(v10);
  v12 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v12);
  sub_10002644C();
}

uint64_t DockSwipeReport.descriptor.unsafeMutableAddressor()
{
  return sub_1001B8BF8(&qword_1002B5190, (uint64_t)static DockSwipeReport.descriptor, (uint64_t)sub_1001B8A8C);
}

uint64_t sub_1001B8BF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  sub_1001B58A0();
  return sub_100006FB4(v4, a2);
}

uint64_t static DockSwipeReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8C50(&qword_1002B5190, (uint64_t)static DockSwipeReport.descriptor, (uint64_t)sub_1001B8A8C, a1);
}

uint64_t sub_1001B8C50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once(a1, a3);
  sub_1001B58A0();
  v7 = v6;
  v8 = sub_100006FB4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t sub_1001B8CB4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8E34(DockSwipeReport.descriptor.unsafeMutableAddressor, a1);
}

void DockSwipeReport.report.getter(uint64_t a1, unint64_t a2)
{
  sub_10002517C(a1, a2);
  sub_1000050D4();
}

void ServiceFilterReport.report.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100022AEC(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  sub_10000B350();
}

uint64_t DockSwipeReport.init()()
{
  return sub_1001B8E78(11);
}

uint64_t DockSwipeReport.init(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1001B8EDC(a1, a2, 11);
}

uint64_t sub_1001B8D24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DockSwipeReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001B8D48(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  *a3 = DockSwipeReport.init(_:)(a1, a2);
  a3[1] = v4;
  sub_1000050D4();
}

uint64_t sub_1001B8D68()
{
  uint64_t v0;

  return sub_1001E2EE8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void *NavigationSwipeReport.reportID.unsafeMutableAddressor()
{
  return &static NavigationSwipeReport.reportID;
}

void *NavigationSwipeReport.bitCount.unsafeMutableAddressor()
{
  return &static NavigationSwipeReport.bitCount;
}

void sub_1001B8D88(uint64_t a1)
{
  sub_1001B8D9C(a1, static NavigationSwipeReport.descriptor, (uint64_t (*)(void))sub_1001B8DE8);
}

void sub_1001B8D9C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_1001B58A0();
  v6 = v5;
  sub_10000897C(v5, a2);
  v7 = (_QWORD *)sub_100006FB4(v6, (uint64_t)a2);
  HIDReportDescriptor.init(content:)(a3, v7);
  sub_10000B350();
}

void sub_1001B8DE8()
{
  sub_1001B8AA8(13);
}

uint64_t NavigationSwipeReport.descriptor.unsafeMutableAddressor()
{
  return sub_1001B8BF8(&qword_1002B5198, (uint64_t)static NavigationSwipeReport.descriptor, (uint64_t)sub_1001B8D88);
}

uint64_t static NavigationSwipeReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8C50(&qword_1002B5198, (uint64_t)static NavigationSwipeReport.descriptor, (uint64_t)sub_1001B8D88, a1);
}

uint64_t sub_1001B8E28@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8E34(NavigationSwipeReport.descriptor.unsafeMutableAddressor, a1);
}

uint64_t sub_1001B8E34@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1();
  sub_1001B58A0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t NavigationSwipeReport.init()()
{
  return sub_1001B8E78(13);
}

uint64_t sub_1001B8E78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v2);
  v3 = sub_1001B99C0();
  sub_1001B345C(v3, COERCE_DOUBLE(0x1300000000), v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21,
    v23);
  sub_1001B99A0();
  Data._Representation.subscript.setter(a1);
  return v22;
}

uint64_t NavigationSwipeReport.init(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1001B8EDC(a1, a2, 13);
}

uint64_t sub_1001B8EDC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v6);
  v7 = sub_1001B99C0();
  sub_1001B345C(v7, COERCE_DOUBLE(0x1300000000), v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25, v26, v27,
    v29);
  sub_1001B99A0();
  Data._Representation.subscript.setter(a3, 0);
  HIDReport.initialize(from:)(a1, a2);
  v23 = v22;
  sub_100022AEC(a1, a2);
  result = v28;
  if ((v23 & 1) == 0)
  {
    sub_100022AEC(v28, v30);
    return 0;
  }
  return result;
}

uint64_t sub_1001B8F80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NavigationSwipeReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001B8FA4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  *a3 = NavigationSwipeReport.init(_:)(a1, a2);
  a3[1] = v4;
  sub_1000050D4();
}

uint64_t sub_1001B8FC4()
{
  uint64_t v0;

  return sub_1001E2F00(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void FluidTouchGestureReportProtocol.flags.getter(uint64_t a1, uint64_t a2)
{
  sub_1001B9914(a1, a2);
  sub_1001B99B4(8);
  sub_1001B9990();
  sub_10000B350();
}

void FluidTouchGestureReportProtocol.flags.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1001B992C(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  sub_1000E4D78(a1, 8);
  sub_1001B9920(v9, v10, v11, v12, v13, v14, v15, v16, v18);
  sub_10000B338();
}

void FluidTouchGestureReportProtocol.flags.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = sub_1001B98D0(a1, a2, a3);
  FluidTouchGestureReportProtocol.flags.getter(v4, v5);
  *(_BYTE *)(v3 + 24) = v6;
  sub_1000050D4();
}

void sub_1001B9068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FluidTouchGestureReportProtocol.flags.setter(*(unsigned __int8 *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4, a5, a6, a7, a8);
  sub_1000050D4();
}

uint64_t FluidTouchGestureReportProtocol.phase.getter(uint64_t a1, uint64_t a2)
{
  int v2;

  FluidTouchGestureReportProtocol.flags.getter(a1, a2);
  return v2 & 0xFFFFFF8F;
}

void FluidTouchGestureReportProtocol.phase.setter(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  FluidTouchGestureReportProtocol.flags.getter(a2, a3);
  FluidTouchGestureReportProtocol.flags.setter(a1 & 0xFFFFFF8F | (16 * ((v6 >> 4) & 7)), a2, a3, v7, v8, v9, v10, v11);
}

void FluidTouchGestureReportProtocol.phase.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98D0(a1, a2, a3);
  *(_BYTE *)(v3 + 24) = FluidTouchGestureReportProtocol.phase.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B911C(uint64_t a1)
{
  FluidTouchGestureReportProtocol.phase.setter(*(unsigned __int8 *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1000050D4();
}

void FluidTouchGestureReportProtocol.swipeMask.getter(uint64_t a1, uint64_t a2)
{
  sub_1001B9914(a1, a2);
  sub_1001B99B4(16);
  sub_1001B9990();
  sub_10000B350();
}

void FluidTouchGestureReportProtocol.swipeMask.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 >= 0xFF)
    v8 = 255;
  else
    v8 = a1;
  sub_1001B992C(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  sub_1000E4D78(v8, 16);
  sub_1001B9920(v9, v10, v11, v12, v13, v14, v15, v16, v18);
  sub_10000B338();
}

void FluidTouchGestureReportProtocol.swipeMask.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = sub_1001B98D0(a1, a2, a3);
  FluidTouchGestureReportProtocol.swipeMask.getter(v4, v5);
  *(_DWORD *)(v3 + 24) = v6;
  sub_1000050D4();
}

void sub_1001B91E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FluidTouchGestureReportProtocol.swipeMask.setter(*(unsigned int *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4, a5, a6, a7, a8);
  sub_1000050D4();
}

void FluidTouchGestureReportProtocol.gestureMotion.getter(uint64_t a1, uint64_t a2)
{
  sub_1001B9270(a1, a2);
}

void FluidTouchGestureReportProtocol.gestureMotion.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001B92AC(a1, a2, a3, 24, a5, a6, a7, a8);
}

void FluidTouchGestureReportProtocol.gestureMotion.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v4 = sub_1001B98D0(a1, a2, a3);
  FluidTouchGestureReportProtocol.gestureMotion.getter(v4, v5);
  *(_WORD *)(v3 + 24) = v6;
  sub_1000050D4();
}

void sub_1001B9244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FluidTouchGestureReportProtocol.gestureMotion.setter(*(unsigned __int16 *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4, a5, a6, a7, a8);
  sub_1000050D4();
}

void FluidTouchGestureReportProtocol.flavor.getter(uint64_t a1, uint64_t a2)
{
  sub_1001B9270(a1, a2);
}

void sub_1001B9270(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B9914(a1, a2);
  v2 = sub_1001B9978();
  sub_100127CC4(v2, v3, v4);
  sub_1001B993C();
  sub_10000B350();
}

void FluidTouchGestureReportProtocol.flavor.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001B92AC(a1, a2, a3, 32, a5, a6, a7, a8);
}

void sub_1001B92AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  void (*v10)(uint64_t *, _QWORD);
  uint64_t v11[4];

  v8 = a4;
  if ((unsigned __int16)a1 >= 0xFFu)
    v9 = 255;
  else
    v9 = (unsigned __int16)a1;
  v10 = (void (*)(uint64_t *, _QWORD))sub_1001B992C(a1, a2, a3, a4, a5, a6, a7, a8, v11[0]);
  sub_1000E4D78(v9, v8);
  v10(v11, 0);
  sub_10000B338();
}

void FluidTouchGestureReportProtocol.flavor.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v4 = sub_1001B98D0(a1, a2, a3);
  FluidTouchGestureReportProtocol.flavor.getter(v4, v5);
  *(_WORD *)(v3 + 24) = v6;
  sub_1000050D4();
}

void sub_1001B932C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FluidTouchGestureReportProtocol.flavor.setter(*(unsigned __int16 *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4, a5, a6, a7, a8);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.progress.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9578(a1, a2, 40);
}

uint64_t FluidTouchGestureReportProtocol.progress.setter(uint64_t a1, uint64_t a2, double a3)
{
  return sub_1001B9624(a1, a2, 40, a3);
}

void FluidTouchGestureReportProtocol.progress.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98E8(a1, a2, a3);
  *v3 = FluidTouchGestureReportProtocol.progress.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B938C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = sub_1001B9900(a1);
  FluidTouchGestureReportProtocol.progress.setter(v1, v2, v3);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.velocityX.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9408(a1, a2);
}

uint64_t FluidTouchGestureReportProtocol.velocityX.setter(uint64_t a1, uint64_t a2, Swift::Double a3)
{
  return sub_1001B945C(a1, a2, 56, a3);
}

void FluidTouchGestureReportProtocol.velocityX.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98E8(a1, a2, a3);
  *v3 = FluidTouchGestureReportProtocol.velocityX.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B93E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Double v3;

  v1 = sub_1001B9900(a1);
  FluidTouchGestureReportProtocol.velocityX.setter(v1, v2, v3);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.velocityY.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9408(a1, a2);
}

double sub_1001B9408(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;

  sub_1001B9914(a1, a2);
  v2 = sub_1001B9978();
  sub_10013E758(v2, v3, v4);
  v6 = v5;
  sub_1001B993C();
  return (double)v6 / static HIDFixed.scale.getter();
}

uint64_t FluidTouchGestureReportProtocol.velocityY.setter(uint64_t a1, uint64_t a2, Swift::Double a3)
{
  return sub_1001B945C(a1, a2, 88, a3);
}

uint64_t sub_1001B945C(uint64_t a1, uint64_t a2, char a3, Swift::Double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[4];

  *(HIDUtils::HIDFixed_optional *)&v7 = HIDFixed.init(doubleValue:)(a4);
  if ((v7 & (unint64_t)&_mh_execute_header) != 0)
    v8 = 0;
  else
    v8 = v7;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a2 + 8) + 24))(v18, a1);
  sub_1001B5188(v8, a3);
  return sub_1001B9920(v9, v10, v11, v12, v13, v14, v15, v16, v18[0]);
}

void FluidTouchGestureReportProtocol.velocityY.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98E8(a1, a2, a3);
  *v3 = FluidTouchGestureReportProtocol.velocityY.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B94FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Double v3;

  v1 = sub_1001B9900(a1);
  FluidTouchGestureReportProtocol.velocityY.setter(v1, v2, v3);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.x.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9578(a1, a2, 120);
}

uint64_t FluidTouchGestureReportProtocol.x.setter(uint64_t a1, uint64_t a2, double a3)
{
  return sub_1001B9624(a1, a2, 120, a3);
}

void FluidTouchGestureReportProtocol.x.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98E8(a1, a2, a3);
  *v3 = FluidTouchGestureReportProtocol.x.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B9554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = sub_1001B9900(a1);
  FluidTouchGestureReportProtocol.x.setter(v1, v2, v3);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.y.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9578(a1, a2, 136);
}

double sub_1001B9578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;

  v4 = sub_1001B9914(a1, a2);
  v6 = v5;
  v7 = sub_1000E6BC4();
  v8 = sub_10013F740();
  v9 = sub_1000E6C3C();
  v10 = sub_1000E6C00();
  HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, a3, v4, v6, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v7, v8, v9, v10);
  v12 = v11;
  sub_1001B993C();
  return v12;
}

uint64_t FluidTouchGestureReportProtocol.y.setter(uint64_t a1, uint64_t a2, double a3)
{
  return sub_1001B9624(a1, a2, 136, a3);
}

uint64_t sub_1001B9624(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[4];

  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0)
    v5 = a4;
  else
    v5 = 0.0;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a2 + 8) + 24))(v15, a1);
  v6 = sub_1000E618C(a3, v5);
  return sub_1001B9920(v6, v7, v8, v9, v10, v11, v12, v13, v15[0]);
}

void FluidTouchGestureReportProtocol.y.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B98E8(a1, a2, a3);
  *v3 = FluidTouchGestureReportProtocol.y.getter(v4, v5);
  sub_1000050D4();
}

void sub_1001B96C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = sub_1001B9900(a1);
  FluidTouchGestureReportProtocol.y.setter(v1, v2, v3);
  sub_1000050D4();
}

double FluidTouchGestureReportProtocol.velocity.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9768(a1, a2, (double (*)(void))FluidTouchGestureReportProtocol.velocityX.getter, (void (*)(uint64_t, uint64_t))FluidTouchGestureReportProtocol.velocityY.getter);
}

uint64_t FluidTouchGestureReportProtocol.velocity.setter(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1001B97D0(a1, a2, (void (*)(void))FluidTouchGestureReportProtocol.velocityX.setter, FluidTouchGestureReportProtocol.velocityY.setter, a3, a4);
}

void FluidTouchGestureReportProtocol.velocity.modify()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1001B9948();
  v2 = sub_1001B995C(v1);
  *(double *)v0 = FluidTouchGestureReportProtocol.velocity.getter(v2, v3);
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = 0;
  sub_10002644C();
}

void sub_1001B9748(double **a1, uint64_t a2)
{
  sub_1001B986C(a1, a2, (void (*)(_QWORD, _QWORD, double, double))FluidTouchGestureReportProtocol.velocity.setter);
}

double FluidTouchGestureReportProtocol.delta.getter(uint64_t a1, uint64_t a2)
{
  return sub_1001B9768(a1, a2, (double (*)(void))FluidTouchGestureReportProtocol.x.getter, (void (*)(uint64_t, uint64_t))FluidTouchGestureReportProtocol.y.getter);
}

double sub_1001B9768(uint64_t a1, uint64_t a2, double (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  double v7;

  v7 = a3();
  a4(a1, a2);
  return v7;
}

uint64_t FluidTouchGestureReportProtocol.delta.setter(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1001B97D0(a1, a2, (void (*)(void))FluidTouchGestureReportProtocol.x.setter, FluidTouchGestureReportProtocol.y.setter, a3, a4);
}

uint64_t sub_1001B97D0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, double), double a5, double a6)
{
  a3();
  return a4(a1, a2, a6);
}

void FluidTouchGestureReportProtocol.delta.modify()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1001B9948();
  v2 = sub_1001B995C(v1);
  *(double *)v0 = FluidTouchGestureReportProtocol.delta.getter(v2, v3);
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = 0;
  sub_10002644C();
}

void sub_1001B9860(double **a1, uint64_t a2)
{
  sub_1001B986C(a1, a2, (void (*)(_QWORD, _QWORD, double, double))FluidTouchGestureReportProtocol.delta.setter);
}

void sub_1001B986C(double **a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, double, double))
{
  double *v3;

  v3 = *a1;
  a3(*((_QWORD *)*a1 + 3), *((_QWORD *)*a1 + 4), *v3, v3[1]);
  free(v3);
}

void type metadata accessor for FluidTouchGestureReport()
{
  sub_10003B1DC();
}

void type metadata accessor for DockSwipeReport()
{
  sub_10003B1DC();
}

void type metadata accessor for NavigationSwipeReport()
{
  sub_10003B1DC();
}

uint64_t sub_1001B98D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1[1] = a3;
  a1[2] = v3;
  *a1 = a2;
  return a2;
}

uint64_t sub_1001B98E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  return a2;
}

uint64_t sub_1001B9900(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1001B9914(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
}

uint64_t sub_1001B9920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *, _QWORD);

  return v9(&a9, 0);
}

uint64_t sub_1001B992C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)(a3 + 8) + 24))(&a9);
}

uint64_t sub_1001B993C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

void *sub_1001B9948()
{
  return malloc(0x30uLL);
}

uint64_t sub_1001B995C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *v4 = a1;
  a1[4] = v1;
  a1[5] = v2;
  a1[3] = v3;
  return v3;
}

uint64_t sub_1001B9978()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001B9990()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

void sub_1001B99B4(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100127CC4(a1, v1, v2);
}

uint64_t sub_1001B99C0()
{
  return __DataStorage.init(length:)(19);
}

void *AppleVendorTopCaseUsage.page.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.page;
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseUsage.init(rawValue:)(Swift::UInt8 rawValue)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseUsage.init(_:)(Swift::Int a1)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional v2;

  sub_1001ADD54();
  return v2;
}

EnsembleHID::AppleVendorTopCaseUsage_optional sub_1001B9A60@<W0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, Swift::UInt8 *a3@<X8>)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional result;

  result = AppleVendorTopCaseUsage.init(page:usage:)(a1, a2);
  *a3 = result.value.rawValue;
  a3[1] = result.is_nil;
  return result;
}

EnsembleHID::AppleVendorTopCaseUsage_optional sub_1001B9A8C@<W0>(Swift::UInt8 *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional result;

  result = AppleVendorTopCaseUsage.init(rawValue:)(*a1);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

void *AppleVendorTopCaseUsage.fnKey.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.fnKey;
}

void *AppleVendorTopCaseUsage.brightnessUp.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.brightnessUp;
}

void *AppleVendorTopCaseUsage.brightnessDown.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.brightnessDown;
}

void *AppleVendorTopCaseUsage.videoMirror.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.videoMirror;
}

void *AppleVendorTopCaseUsage.illuminationToggle.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.illuminationToggle;
}

void *AppleVendorTopCaseUsage.illuminationUp.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.illuminationUp;
}

void *AppleVendorTopCaseUsage.illuminationDown.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.illuminationDown;
}

void *AppleVendorTopCaseUsage.clamshellLatched.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseUsage.clamshellLatched;
}

void *AppleVendorTopCaseReport.reportID.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseReport.reportID;
}

void *AppleVendorTopCaseReport.bitCount.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseReport.bitCount;
}

uint64_t static AppleVendorTopCaseReport.bitCount.getter()
{
  return 40;
}

void *AppleVendorTopCaseReport.usageMinimum.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseReport.usageMinimum;
}

void *AppleVendorTopCaseReport.usageMaximum.unsafeMutableAddressor()
{
  return &static AppleVendorTopCaseReport.usageMaximum;
}

void sub_1001B9B54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static AppleVendorTopCaseReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static AppleVendorTopCaseReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001B9BAC, v2);
}

uint64_t sub_1001B9BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  type metadata accessor for Input.Bit8();
  v138 = v0;
  v136 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v134 = (char *)&v109 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v133 = v2;
  v132 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v130 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v129 = v4;
  v128 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v127 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v126 = v6;
  v125 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v124 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v123 = v8;
  v122 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v121 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v120 = v10;
  v119 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v118 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v116 = v12;
  v114 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v113 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v112 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (unsigned __int8 *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v19 = *(_QWORD *)(v18 - 8);
  v139 = v18;
  v140 = v19;
  __chkstk_darwin(v18);
  v152 = (uint64_t *)((char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for LogicalMaximum();
  v135 = v21;
  v137 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v117 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v150 = v23;
  v131 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v115 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v147 = v25;
  v155 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v146 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportCount();
  v145 = v27;
  v154 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v148 = (char *)&v109 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v143 = v29;
  v153 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = v31;
  type metadata accessor for UsageMinimum();
  v142 = v32;
  v151 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v109 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = v34;
  type metadata accessor for UsagePage();
  v141 = v35;
  v111 = *(_QWORD *)(v35 - 8);
  v36 = v111;
  __chkstk_darwin(v35);
  v38 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v38;
  UsagePage.init(_:)(255, v39, v40, v41, v42, v43, v44, v45);
  UsageMinimum.init(_:)(0, v34);
  UsageMaximum.init(_:)(0xFFu, v31);
  ReportCount.init(_:)(4, v46, v47, v48, v49, v50, v51, v52);
  ReportSize.init(_:)(8, v53, v54, v55, v56, v57, v58, v59);
  LogicalMinimum.init(_:)(0, v60, v61, v62, v63, v64, v65, v66);
  LogicalMaximum.init(_:)(255, v67, v68, v69, v70, v71, v72, v73);
  v74 = v17;
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v15 + 104))(v17, 0, v112);
  v75 = v113;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, 0, v116);
  v76 = v118;
  (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, 0, v120);
  v77 = v121;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, 0, v123);
  v78 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, 0, v126);
  v79 = v127;
  (*(void (**)(char *, _QWORD, uint64_t))(v128 + 104))(v127, 0, v129);
  v80 = v130;
  (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v130, 0, v133);
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v134, 0, v138);
  Input.init(_:_:_:_:_:_:_:_:)(v74, v75, v76, v77, v78, v79, v80, v152);
  v81 = sub_1000055B0(&qword_1002B5310);
  v82 = swift_allocObject(v81, 392, 7);
  *(_OWORD *)(v82 + 16) = xmmword_10021E830;
  *(_QWORD *)(v82 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v82 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v82 + 32) = 4;
  v83 = v141;
  *(_QWORD *)(v82 + 96) = v141;
  *(_QWORD *)(v82 + 104) = &protocol witness table for UsagePage;
  v84 = sub_100005534((_QWORD *)(v82 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v36 + 16))(v84, v38, v83);
  v85 = v142;
  *(_QWORD *)(v82 + 136) = v142;
  *(_QWORD *)(v82 + 144) = &protocol witness table for UsageMinimum;
  v86 = sub_100005534((_QWORD *)(v82 + 112));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v151 + 16))(v86, v144, v85);
  v87 = v143;
  *(_QWORD *)(v82 + 176) = v143;
  *(_QWORD *)(v82 + 184) = &protocol witness table for UsageMaximum;
  v88 = sub_100005534((_QWORD *)(v82 + 152));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v153 + 16))(v88, v149, v87);
  v89 = v145;
  *(_QWORD *)(v82 + 216) = v145;
  *(_QWORD *)(v82 + 224) = &protocol witness table for ReportCount;
  v90 = sub_100005534((_QWORD *)(v82 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v154 + 16))(v90, v148, v89);
  v91 = v147;
  *(_QWORD *)(v82 + 256) = v147;
  *(_QWORD *)(v82 + 264) = &protocol witness table for ReportSize;
  v92 = sub_100005534((_QWORD *)(v82 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v155 + 16))(v92, v146, v91);
  v93 = v150;
  *(_QWORD *)(v82 + 296) = v150;
  *(_QWORD *)(v82 + 304) = &protocol witness table for LogicalMinimum;
  v94 = sub_100005534((_QWORD *)(v82 + 272));
  v95 = v131;
  v96 = v115;
  (*(void (**)(_QWORD *, char *, uint64_t))(v131 + 16))(v94, v115, v93);
  v97 = v135;
  *(_QWORD *)(v82 + 336) = v135;
  *(_QWORD *)(v82 + 344) = &protocol witness table for LogicalMaximum;
  v98 = sub_100005534((_QWORD *)(v82 + 312));
  v99 = v137;
  v100 = v117;
  (*(void (**)(_QWORD *, char *, uint64_t))(v137 + 16))(v98, v117, v97);
  v101 = v139;
  *(_QWORD *)(v82 + 376) = v139;
  *(_QWORD *)(v82 + 384) = &protocol witness table for Input;
  v102 = sub_100005534((_QWORD *)(v82 + 352));
  v103 = v140;
  v104 = v152;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v140 + 16))(v102, v152, v101);
  v105 = static HIDReportDescriptor.Builder.buildBlock(_:)(v82);
  v138 = v106;
  v107 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v103 + 8))(v104, v101, v107);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v97);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v150);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v146, v147);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v148, v145);
  (*(void (**)(_QWORD *, uint64_t))(v153 + 8))(v149, v143);
  (*(void (**)(_QWORD *, uint64_t))(v151 + 8))(v144, v142);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v141);
  return v105;
}

uint64_t AppleVendorTopCaseReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51A0 != -1)
    swift_once(&qword_1002B51A0, sub_1001B9B54);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static AppleVendorTopCaseReport.descriptor);
}

uint64_t static AppleVendorTopCaseReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51A0 != -1)
    swift_once(&qword_1002B51A0, sub_1001B9B54);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static AppleVendorTopCaseReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001BA558@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AppleVendorTopCaseReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t AppleVendorTopCaseReport.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t i;
  unsigned __int8 v5;
  unint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v11;
  Swift::String v12;

  v12._countAndFlagsBits = 0xD00000000000001ALL;
  v12._object = (void *)0x8000000100259F10;
  sub_10002517C(a1, a2);
  for (i = 0; i < 4; ++i)
  {
    sub_100127CC4(8 * i + 8, a1, a2);
    if ((v5 - 3) < 3u)
    {
      v11._countAndFlagsBits = v5;
      v6 = sub_10002C9FC();
      v11._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v11, 16, 0, &type metadata for Int, v6);
      v11._object = v7;
      v8._countAndFlagsBits = 32;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
    }
  }
  sub_100022AEC(a1, a2);
  v11 = v12;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v11._countAndFlagsBits;
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseReport.Iterator.next()()
{
  EnsembleHID::AppleVendorTopCaseUsage_optional v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;

  v2 = v1[2];
  if (v2 > 3)
  {
    v0.value.rawValue = 0;
    v7 = 1;
    return (EnsembleHID::AppleVendorTopCaseUsage_optional)(v0.value.rawValue | (unsigned __int16)(v7 << 8));
  }
  else
  {
    v3 = *v1;
    v4 = v1[1];
    v5 = 8 * v2;
    while ((unint64_t)(v2 - 0x1000000000000000) >> 61 == 7)
    {
      v0 = (EnsembleHID::AppleVendorTopCaseUsage_optional)(v5 + 8);
      if (__OFADD__(v5, 8))
        goto LABEL_11;
      sub_100127CC4(v0.value.rawValue, v3, v4);
      v6 = (v0.value.rawValue - 6);
      v7 = v6 < 0xFD;
      v1[2] = ++v2;
      if (v6 > 0xFC)
        return (EnsembleHID::AppleVendorTopCaseUsage_optional)(v0.value.rawValue | (unsigned __int16)(v7 << 8));
      v5 += 8;
      if (v2 == 4)
      {
        v0.value.rawValue = 0;
        return (EnsembleHID::AppleVendorTopCaseUsage_optional)(v0.value.rawValue | (unsigned __int16)(v7 << 8));
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return v0;
}

uint64_t sub_1001BA774()
{
  uint64_t v0;

  return AppleVendorTopCaseReport.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t AppleVendorTopCaseReport.init()()
{
  return 4;
}

void AppleVendorTopCaseReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001BA810()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 5uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(4, 0x5000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

void sub_1001BA8DC(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = AppleVendorTopCaseReport.init()();
  a1[1] = v2;
  sub_1000050D4();
}

void sub_1001BA8FC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  AppleVendorTopCaseReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

void sub_1001BA91C()
{
  uint64_t v0;

  LOWORD(v0) = AppleVendorTopCaseReport.Iterator.next()();
  sub_1001B76B4(v0);
  sub_1000050D4();
}

void sub_1001BA93C()
{
  sub_1001BD1E8();
}

uint64_t sub_1001BA944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1001BD24C(a1, a2, a3, *v3, v3[1]);
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseReport.update(with:)(EnsembleHID::AppleVendorTopCaseUsage with)
{
  uint64_t v1;
  EnsembleHID::AppleVendorTopCaseUsage_optional result;

  v1 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v1);
  sub_1001B76E8();
  __asm { BR              X10 }
  return result;
}

uint64_t sub_1001BA9E4(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char *v15;

  sub_1001B76E0(a1, a2);
  v6 = sub_1001B76E8();
  v8 = v7;
  v9 = v6;
  *(_QWORD *)(v5 - 240) = 0;
  v10 = sub_1001B6DA0(1, 4, v6, v7);
  v12 = v11;
  sub_100022AEC(v9, v8);
  sub_10002517C(v10, v12);
  ((void (*)(uint64_t, unint64_t))Data.makeIterator())(v10, v12);
  sub_1001B768C();
  v13 = sub_1001B7330();
  do
  {
    dispatch thunk of IteratorProtocol.next()(v3, v13);
    v14 = *(unsigned __int8 *)(v5 - 109);
    if ((v14 & 1) != 0)
    {
      sub_1001B76A4();
      *(_QWORD *)(v5 - 232) = 0;
      *(_QWORD *)(v5 - 248) = v4;
      v15 = (char *)&loc_1001BAAB8 + *((int *)qword_1001BAD30 + (v12 >> 62));
      *(_QWORD *)(v5 - 128) = (int)v10;
      __asm { BR              X9 }
    }
  }
  while (*(unsigned __int8 *)(v5 - 110) != v2);
  sub_1001B76A4();
  sub_1001B768C();
  return v2 | (v14 << 8);
}

EnsembleHID::AppleVendorTopCaseUsage_optional __swiftcall AppleVendorTopCaseReport.remove(_:)(EnsembleHID::AppleVendorTopCaseUsage a1)
{
  EnsembleHID::AppleVendorTopCaseUsage_optional result;

  sub_1001B7704();
  __asm { BR              X10 }
  return result;
}

void sub_1001BADB0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1001B76F4(a1, a2);
  v2 = sub_1001B7704();
  v4 = v3;
  v5 = v2;
  sub_1001B6DA0(1, 4, v2, v3);
  v7 = v6;
  sub_100022AEC(v5, v4);
  __asm { BR              X9 }
}

uint64_t sub_1001BB0C4(char *a1)
{
  uint64_t *v1;

  return sub_1001BD27C(*a1, *v1, v1[1]);
}

uint64_t sub_1001BB0D0()
{
  return sub_1001B2DA4();
}

uint64_t sub_1001BB0DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001C2714);
}

uint64_t sub_1001BB0E8()
{
  return sub_1001B2DA4();
}

void sub_1001BB0F4(uint64_t a1, unsigned __int8 *a2)
{
  sub_1001D45A8(a1, *a2);
}

void sub_1001BB0FC(EnsembleHID::AppleVendorTopCaseUsage *a1)
{
  uint64_t v1;

  LOWORD(v1) = AppleVendorTopCaseReport.remove(_:)((EnsembleHID::AppleVendorTopCaseUsage)a1->rawValue);
  sub_1001B76B4(v1);
  sub_1000050D4();
}

void sub_1001BB120(EnsembleHID::AppleVendorTopCaseUsage *a1)
{
  uint64_t v1;

  LOWORD(v1) = AppleVendorTopCaseReport.update(with:)((EnsembleHID::AppleVendorTopCaseUsage)a1->rawValue);
  sub_1001B76B4(v1);
  sub_1000050D4();
}

uint64_t sub_1001BB144()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = sub_100141354();
  sub_1001BCD8C(v0, v1);
  v2 = sub_100141354();
  return sub_1001B3434(v2, v3);
}

uint64_t sub_1001BB16C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  return sub_1001D46AC(*a1, a1[1], a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1001BB178()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = sub_100141354();
  sub_1001D49C8(v0, v1);
  v2 = sub_100141354();
  return sub_1001B3434(v2, v3);
}

uint64_t sub_1001BB1A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001D4C68);
}

unint64_t sub_1001BB1AC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001C2858(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001BB1BC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001D4F28(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

unint64_t sub_1001BB1CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001C297C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *v1, v1[1]);
}

void sub_1001BB1DC()
{
  sub_1001D42D4();
}

void sub_1001BB1E4()
{
  sub_1001BB3C8();
  EnsembleReportProtocol<>.init<A>(_:)();
}

uint64_t sub_1001BB254(_QWORD *a1)
{
  return sub_1001D5084(*a1, a1[1]);
}

unint64_t sub_1001BB268()
{
  unint64_t result;

  result = qword_1002B5398;
  if (!qword_1002B5398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseUsage, &type metadata for AppleVendorTopCaseUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5398);
  }
  return result;
}

unint64_t sub_1001BB2A8()
{
  unint64_t result;

  result = qword_1002B53A0;
  if (!qword_1002B53A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseUsage, &type metadata for AppleVendorTopCaseUsage);
    atomic_store(result, (unint64_t *)&qword_1002B53A0);
  }
  return result;
}

unint64_t sub_1001BB2E8()
{
  unint64_t result;

  result = qword_1002B53A8;
  if (!qword_1002B53A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseReport.Iterator, &type metadata for AppleVendorTopCaseReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_1002B53A8);
  }
  return result;
}

unint64_t sub_1001BB328()
{
  unint64_t result;

  result = qword_1002B53B0;
  if (!qword_1002B53B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseReport, &type metadata for AppleVendorTopCaseReport);
    atomic_store(result, (unint64_t *)&qword_1002B53B0);
  }
  return result;
}

unint64_t sub_1001BB368()
{
  unint64_t result;

  result = qword_1002B53B8;
  if (!qword_1002B53B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseReport, &type metadata for AppleVendorTopCaseReport);
    atomic_store(result, (unint64_t *)&qword_1002B53B8);
  }
  return result;
}

void type metadata accessor for AppleVendorTopCaseUsage()
{
  sub_10003B1DC();
}

void type metadata accessor for AppleVendorTopCaseReport()
{
  sub_10003B1DC();
}

void type metadata accessor for AppleVendorTopCaseReport.Iterator()
{
  sub_10003B1DC();
}

unint64_t sub_1001BB3C8()
{
  unint64_t result;

  result = qword_1002B53C0;
  if (!qword_1002B53C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorTopCaseReport, &type metadata for AppleVendorTopCaseReport);
    atomic_store(result, (unint64_t *)&qword_1002B53C0);
  }
  return result;
}

BOOL HIDVirtualService.capsLockEngaged.getter()
{
  return BKSHIDServicesIsCapsLockLightOn() != 0;
}

void HIDVirtualService.setClientCapsLockEnaged(_:client:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v4;
  Class isa;
  NSString v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  _BYTE v12[24];

  v4 = sub_1001BB5F0();
  swift_beginAccess(v2 + 96, v12, 0, 0);
  if (v4 == *(id *)(v2 + 96))
  {
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "setProperty:forKey:", isa, v6);

  }
  else
  {
    sub_1000136A0();
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    sub_1001BB5F0();
    v7._countAndFlagsBits = sub_1001BB5E0();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x27203D212027;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = sub_1001BB5E0();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 39;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6708, 0xD000000000000018, 0x8000000100259F30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleHID/HIDCapsLock.swift", 88, 2, 35);
    swift_willThrow(v11);
  }
}

uint64_t sub_1001BB5E0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

id sub_1001BB5F0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 1088));
}

void *ButtonReport.reportID.unsafeMutableAddressor()
{
  return &static ButtonReport.reportID;
}

void *ButtonReport.bitCount.unsafeMutableAddressor()
{
  return &static ButtonReport.bitCount;
}

void *ButtonReport.buttonMinimum.unsafeMutableAddressor()
{
  return &static ButtonReport.buttonMinimum;
}

void *ButtonReport.buttonMaximum.unsafeMutableAddressor()
{
  return &static ButtonReport.buttonMaximum;
}

void sub_1001BB62C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static ButtonReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static ButtonReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001BB684, v2);
}

uint64_t sub_1001BB684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  type metadata accessor for PhysicalCollection();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Usage();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Usage.init(_:)(1, v10, v11, v12, v13, v14, v15, v16);
  PhysicalCollection.init(content:)(v4);
  v17 = sub_1000055B0(&qword_1002B5310);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021DE60;
  *(_QWORD *)(v18 + 56) = v6;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Usage;
  v19 = sub_100005534((_QWORD *)(v18 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v19, v9, v6);
  *(_QWORD *)(v18 + 96) = v1;
  *(_QWORD *)(v18 + 104) = &protocol witness table for PhysicalCollection;
  v20 = sub_100005534((_QWORD *)(v18 + 72));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2 + 16))(v20, v4, v1);
  v21 = static HIDReportDescriptor.Builder.buildBlock(_:)(v18);
  v22 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v2 + 8))(v4, v1, v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v21;
}

uint64_t sub_1001BB800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  char *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  void (*v98)(char *);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  void (*v129)(_QWORD *, char *, uint64_t);
  uint64_t v130;
  _QWORD *v131;
  void (*v132)(_QWORD *, char *, uint64_t);
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  void (*v136)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v137;
  _QWORD *v138;
  char *v139;
  _QWORD *v140;
  char *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  void (*v147)(_QWORD *, uint64_t, __n128);
  void (*v148)(char *, uint64_t);
  void (*v149)(char *, uint64_t);
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  void (*v157)(char *, uint64_t, uint64_t);
  void (*v158)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;

  type metadata accessor for Input.Bit8();
  v173 = v0;
  v172 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v171 = (char *)&v151 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v184 = v2;
  v170 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v169 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v190 = v4;
  v168 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v167 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v187 = v6;
  v166 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v165 = (char *)&v151 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v186 = v8;
  v164 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v163 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v182 = v10;
  v162 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v161 = (char *)&v151 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v179 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v160 = (char *)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v159 = v15;
  __chkstk_darwin(v15);
  v19 = (unsigned __int8 *)&v151 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v176 = v20;
  v177 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v206 = (_QWORD *)((char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v198 = (_QWORD *)((char *)&v151 - v23);
  type metadata accessor for ReportSize();
  v175 = v24;
  v203 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v200 = (char *)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v188 = (char *)&v151 - v27;
  type metadata accessor for ReportCount();
  v174 = v28;
  v205 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v195 = (char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v189 = (char *)&v151 - v31;
  type metadata accessor for LogicalMaximum();
  v185 = v32;
  v204 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v191 = (char *)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v183 = v34;
  v202 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v192 = (char *)&v151 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v181 = v36;
  v201 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v193 = (char *)&v151 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMinimum();
  v180 = v38;
  v199 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v194 = (char *)&v151 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsagePage();
  v178 = v40;
  v197 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v196 = (char *)&v151 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsagePage.init(_:)(9, v42, v43, v44, v45, v46, v47, v48);
  UsageMinimum.init(_:)(1, v49, v50, v51, v52, v53, v54, v55);
  UsageMaximum.init(_:)(3, v56, v57, v58, v59, v60, v61, v62);
  LogicalMinimum.init(_:)(0, v63, v64, v65, v66, v67, v68, v69);
  LogicalMaximum.init(_:)(1, v70, v71, v72, v73, v74, v75, v76);
  ReportCount.init(_:)(3, v77, v78, v79, v80, v81, v82, v83);
  ReportSize.init(_:)(1, v84, v85, v86, v87, v88, v89, v90);
  v158 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v17 + 104);
  v91 = v19;
  v158(v19, 0, v16);
  v157 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v92 = v160;
  v157(v160, 1, v179);
  v156 = 0;
  v162 = *(_QWORD *)(v162 + 104);
  v93 = v161;
  ((void (*)(char *))v162)(v161);
  v155 = 0;
  v164 = *(_QWORD *)(v164 + 104);
  v94 = v163;
  ((void (*)(char *))v164)(v163);
  v154 = 0;
  v166 = *(_QWORD *)(v166 + 104);
  v95 = v165;
  ((void (*)(char *))v166)(v165);
  v153 = 0;
  v168 = *(_QWORD *)(v168 + 104);
  v96 = v167;
  ((void (*)(char *))v168)(v167);
  v152 = 0;
  v170 = *(_QWORD *)(v170 + 104);
  v97 = v169;
  ((void (*)(char *))v170)(v169);
  v151 = 0;
  v98 = *(void (**)(char *))(v172 + 104);
  v99 = v171;
  v100 = v173;
  v98(v171);
  Input.init(_:_:_:_:_:_:_:_:)(v91, v92, v93, v94, v95, v96, v97, v198);
  ReportCount.init(_:)(1, v101, v102, v103, v104, v105, v106, v107);
  ReportSize.init(_:)(5, v108, v109, v110, v111, v112, v113, v114);
  v158(v91, 1, v159);
  v157(v92, 0, v179);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v162)(v93, v156, v182);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v164)(v94, v155, v186);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v166)(v95, v154, v187);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v168)(v96, v153, v190);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v170)(v97, v152, v184);
  ((void (*)(char *, _QWORD, uint64_t))v98)(v99, v151, v100);
  Input.init(_:_:_:_:_:_:_:_:)(v91, v92, v93, v94, v95, v96, v97, v206);
  v115 = sub_1000055B0(&qword_1002B5310);
  v116 = swift_allocObject(v115, 512, 7);
  *(_OWORD *)(v116 + 16) = xmmword_10021D0C0;
  *(_QWORD *)(v116 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v116 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v116 + 32) = 6;
  v117 = v178;
  *(_QWORD *)(v116 + 96) = v178;
  *(_QWORD *)(v116 + 104) = &protocol witness table for UsagePage;
  v118 = sub_100005534((_QWORD *)(v116 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v197 + 16))(v118, v196, v117);
  v119 = v180;
  *(_QWORD *)(v116 + 136) = v180;
  *(_QWORD *)(v116 + 144) = &protocol witness table for UsageMinimum;
  v120 = sub_100005534((_QWORD *)(v116 + 112));
  (*(void (**)(_QWORD *, char *, uint64_t))(v199 + 16))(v120, v194, v119);
  v121 = v181;
  *(_QWORD *)(v116 + 176) = v181;
  *(_QWORD *)(v116 + 184) = &protocol witness table for UsageMaximum;
  v122 = sub_100005534((_QWORD *)(v116 + 152));
  (*(void (**)(_QWORD *, char *, uint64_t))(v201 + 16))(v122, v193, v121);
  v123 = v183;
  *(_QWORD *)(v116 + 216) = v183;
  *(_QWORD *)(v116 + 224) = &protocol witness table for LogicalMinimum;
  v124 = sub_100005534((_QWORD *)(v116 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v202 + 16))(v124, v192, v123);
  v125 = v185;
  *(_QWORD *)(v116 + 256) = v185;
  *(_QWORD *)(v116 + 264) = &protocol witness table for LogicalMaximum;
  v126 = sub_100005534((_QWORD *)(v116 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v204 + 16))(v126, v191, v125);
  v127 = v174;
  *(_QWORD *)(v116 + 296) = v174;
  *(_QWORD *)(v116 + 304) = &protocol witness table for ReportCount;
  v128 = sub_100005534((_QWORD *)(v116 + 272));
  v129 = *(void (**)(_QWORD *, char *, uint64_t))(v205 + 16);
  v129(v128, v189, v127);
  v130 = v175;
  *(_QWORD *)(v116 + 336) = v175;
  *(_QWORD *)(v116 + 344) = &protocol witness table for ReportSize;
  v131 = sub_100005534((_QWORD *)(v116 + 312));
  v132 = *(void (**)(_QWORD *, char *, uint64_t))(v203 + 16);
  v132(v131, v188, v130);
  v133 = v176;
  *(_QWORD *)(v116 + 376) = v176;
  *(_QWORD *)(v116 + 384) = &protocol witness table for Input;
  v134 = sub_100005534((_QWORD *)(v116 + 352));
  v135 = v177;
  v136 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 16);
  v137 = v198;
  v136(v134, v198, v133);
  *(_QWORD *)(v116 + 416) = v127;
  *(_QWORD *)(v116 + 424) = &protocol witness table for ReportCount;
  v138 = sub_100005534((_QWORD *)(v116 + 392));
  v139 = v195;
  v129(v138, v195, v127);
  *(_QWORD *)(v116 + 456) = v130;
  *(_QWORD *)(v116 + 464) = &protocol witness table for ReportSize;
  v140 = sub_100005534((_QWORD *)(v116 + 432));
  v141 = v200;
  v132(v140, v200, v130);
  *(_QWORD *)(v116 + 496) = v133;
  *(_QWORD *)(v116 + 504) = &protocol witness table for Input;
  v142 = sub_100005534((_QWORD *)(v116 + 472));
  v143 = v206;
  v136(v142, v206, v133);
  v144 = static HIDReportDescriptor.Builder.buildBlock(_:)(v116);
  v190 = v145;
  v146 = swift_bridgeObjectRelease();
  v147 = *(void (**)(_QWORD *, uint64_t, __n128))(v135 + 8);
  v147(v143, v133, v146);
  v148 = *(void (**)(char *, uint64_t))(v203 + 8);
  v148(v141, v130);
  v149 = *(void (**)(char *, uint64_t))(v205 + 8);
  v149(v139, v127);
  ((void (*)(_QWORD *, uint64_t))v147)(v137, v133);
  v148(v188, v130);
  v149(v189, v127);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v191, v185);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v192, v183);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v193, v181);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v194, v180);
  (*(void (**)(char *, uint64_t))(v197 + 8))(v196, v178);
  return v144;
}

uint64_t ButtonReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51A8 != -1)
    swift_once(&qword_1002B51A8, sub_1001BB62C);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static ButtonReport.descriptor);
}

uint64_t static ButtonReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51A8 != -1)
    swift_once(&qword_1002B51A8, sub_1001BB62C);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static ButtonReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001BC450@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = ButtonReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

void ButtonReport.report.getter(uint64_t a1, unint64_t a2)
{
  sub_1001B3530(a1, a2);
  sub_100026B88();
  sub_1000050D4();
}

uint64_t ButtonReport.init()()
{
  return 6;
}

void ButtonReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001BC540()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 2uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(6, 0x2000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

uint64_t ButtonReport.init(_:)(char a1)
{
  Data._Representation.subscript.setter(a1 & 7, 1);
  return 6;
}

void ButtonReport.buttons.setter(char a1)
{
  sub_1000E4D78(a1 & 7, 8);
}

uint64_t ButtonReport.init(_:)()
{
  uint64_t v0;
  char v1;
  char v2;
  _BYTE v4[14];
  char v5;

  sub_1001BCCC8();
  sub_1001BCCB4();
  if (v0 > 1)
  {
    __break(1u);
    __break(1u);
  }
  sub_1001BCCC8();
  v1 = sub_1001BCCB4();
  v4[0] = 6;
  *(_QWORD *)&v4[1] = 0;
  *(_QWORD *)&v4[6] = 0;
  v2 = v4[v0] | v1;
  v4[0] = 6;
  *(_QWORD *)&v4[1] = 0;
  *(_QWORD *)&v4[6] = 0;
  v5 = 2;
  v4[v0] = v2;
  return *(_QWORD *)v4;
}

uint64_t sub_1001BC75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ButtonReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001BC780(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  ButtonReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
}

uint64_t sub_1001BC7A4()
{
  uint64_t v0;

  return sub_1001E2F18(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t ButtonReport.buttons.getter(uint64_t a1, unint64_t a2)
{
  char v2;

  sub_100127CC4(8, a1, a2);
  return v2 & 7;
}

void ButtonReport.buttons.modify(_QWORD *a1)
{
  uint64_t v1;
  char v3;

  a1[1] = v1;
  sub_100127CC4(8, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *a1 = v3 & 7;
  sub_1000050D4();
}

void sub_1001BC80C(_BYTE *a1)
{
  sub_1000E4D78(*a1 & 7, 8);
  sub_1000050D4();
}

uint64_t ButtonReport.makeIterator()(uint64_t a1, unint64_t a2)
{
  sub_1001B3530(a1, a2);
  return sub_100026B88();
}

EnsembleHID::ButtonUsage_optional __swiftcall ButtonReport.Iterator.next()()
{
  uint64_t v0;
  unsigned int v1;
  Swift::Int v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 <= 1)
  {
    v2 = v1 | 8;
    v3 = *(_QWORD *)(v0 + 8);
    HIDReport.offset(for:)(v2);
    HIDReport.mask(for:)(v2);
    __asm { BR              X9 }
  }
  return (EnsembleHID::ButtonUsage_optional)256;
}

void sub_1001BCA6C(Swift::UInt8 *a1@<X8>)
{
  EnsembleHID::ButtonUsage_optional v2;

  v2 = ButtonReport.Iterator.next()();
  *a1 = v2.value.rawValue;
  a1[1] = v2.is_nil;
  sub_1000050D4();
}

uint64_t sub_1001BCA94@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  v5 = ButtonReport.makeIterator()(v4, v3);
  v7 = v6;
  result = sub_100022AEC(v4, v3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_1001BCAEC()
{
  sub_1001BD150();
}

uint64_t sub_1001BCAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1001BD240(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_1001BCAFC(char *a1)
{
  uint64_t *v1;

  return sub_1001BD290(*a1, *v1, v1[1]);
}

void sub_1001BCB08(uint64_t *a1)
{
  uint64_t v1;

  sub_1001D4F3C(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

void sub_1001BCB18()
{
  sub_1001D4264();
}

void sub_1001BCB20()
{
  sub_1001BCC74();
  EnsembleReportProtocol<>.init<A>(_:)();
}

unint64_t sub_1001BCB98()
{
  unint64_t result;

  result = qword_1002B53C8;
  if (!qword_1002B53C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonReport.Iterator, &type metadata for ButtonReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_1002B53C8);
  }
  return result;
}

unint64_t sub_1001BCBD8()
{
  unint64_t result;

  result = qword_1002B53D0;
  if (!qword_1002B53D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonReport, &type metadata for ButtonReport);
    atomic_store(result, (unint64_t *)&qword_1002B53D0);
  }
  return result;
}

unint64_t sub_1001BCC18()
{
  unint64_t result;

  result = qword_1002B53D8;
  if (!qword_1002B53D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonReport, &type metadata for ButtonReport);
    atomic_store(result, (unint64_t *)&qword_1002B53D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonReport()
{
  return &type metadata for ButtonReport;
}

ValueMetadata *type metadata accessor for ButtonReport.Iterator()
{
  return &type metadata for ButtonReport.Iterator;
}

unint64_t sub_1001BCC74()
{
  unint64_t result;

  result = qword_1002B53E0;
  if (!qword_1002B53E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonReport, &type metadata for ButtonReport);
    atomic_store(result, (unint64_t *)&qword_1002B53E0);
  }
  return result;
}

uint64_t sub_1001BCCB4()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

Swift::Int sub_1001BCCC8()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

BOOL static HIDUsage.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

BOOL sub_1001BCCE4(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

uint64_t sub_1001BCCF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  EnsembleHID::AppleVendorKeyboardUsage v3;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;

  sub_1001C0318(a1, a2);
  v2 = 0;
  do
  {
    while (1)
    {
      sub_1001C029C(8 * v2 + 8);
      if (v3.rawValue > 0x21u || ((1 << v3.rawValue) & 0x30003001ELL) == 0)
        break;
      AppleVendorKeyboardReport.update(with:)(v3);
      v5 = v2++ < 1;
      if (!v5)
        goto LABEL_9;
    }
    v5 = v2 < 1;
    v2 = 1;
  }
  while (v5);
LABEL_9:
  v6 = sub_1000C2CD4();
  return sub_100022AEC(v6, v7);
}

void sub_1001BCD8C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  EnsembleHID::AppleVendorTopCaseUsage v3;
  uint64_t v6;
  unint64_t v7;

  sub_1001C0318(a1, a2);
  v2 = 0;
  while ((unint64_t)(v2 - 0x1000000000000000) >> 61 == 7)
  {
    if (__OFADD__(8 * v2, 8))
      goto LABEL_11;
    sub_1001C029C(8 * v2 + 8);
    if ((v3.rawValue - 3) > 2u)
    {
      if (__OFADD__(v2++, 1))
        goto LABEL_12;
      if (v2 >= 4)
      {
LABEL_9:
        v6 = sub_1000C2CD4();
        sub_1001C0280(v6, v7);
        return;
      }
    }
    else
    {
      AppleVendorTopCaseReport.update(with:)(v3);
      if (v2++ >= 3)
        goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_1001BCE1C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  EnsembleHID::ConsumerUsage v5;
  uint64_t v6;

  sub_10002517C(a1, a2);
  v4 = 0;
  while ((unint64_t)(v4 - 0x800000000000000) >> 60 == 15)
  {
    sub_100128154((16 * v4) | 8, a1, a2);
    if (!v5.rawValue)
    {
      while (1)
      {
        v6 = v4 + 1;
        if (__OFADD__(v4, 1))
          break;
        if (v6 > 3)
          goto LABEL_10;
        if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFLL) >> 60 != 15)
          goto LABEL_12;
        sub_100128154((16 * v6) | 8, a1, a2);
        ++v4;
        if (v5.rawValue)
        {
          v4 = v6;
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
      break;
    }
LABEL_9:
    ConsumerReport.update(with:)(v5);
    if (v4++ >= 3)
    {
LABEL_10:
      sub_100022AEC(a1, a2);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1001BCEF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001BCFDC(a1, a2, a3, a4, a5);
}

void sub_1001BCF00()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_1001B58A8();
  *v2 = v0;
  v2[1] = v1;
  sub_1001C02A8(v3, v4, v0, v1);
  v5 = sub_100026B88();
  sub_1001BCCF4(v5, v6);
  sub_10000B350();
}

void sub_1001BCF34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  EnsembleHID::AppleVendorTopCaseUsage v8;
  uint64_t v11;
  unint64_t v12;

  *a5 = a3;
  a5[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  v5 = sub_1000C2CD4();
  sub_10002517C(v5, v6);
  v7 = 0;
  while ((unint64_t)(v7 - 0x1000000000000000) >> 61 == 7)
  {
    if (__OFADD__(8 * v7, 8))
      goto LABEL_11;
    sub_1001C029C(8 * v7 + 8);
    if ((v8.rawValue - 3) > 2u)
    {
      if (__OFADD__(v7++, 1))
        goto LABEL_12;
      if (v7 >= 4)
      {
LABEL_9:
        v11 = sub_1000C2CD4();
        sub_1001C0280(v11, v12);
        return;
      }
    }
    else
    {
      AppleVendorTopCaseReport.update(with:)(v8);
      if (v7++ >= 3)
        goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t sub_1001BCFDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a3;
  a5[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  sub_10002517C(a1, a2);
  HIDReport.withUnsafeMutableBytes<A>(_:)();
  return sub_100022AEC(a1, a2);
}

void sub_1001BD05C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  EnsembleHID::ConsumerUsage v8;
  uint64_t v9;

  *a5 = a3;
  a5[1] = a4;
  sub_10002517C(a3, a4);
  sub_10002517C(a1, a2);
  v7 = 0;
  while ((unint64_t)(v7 - 0x800000000000000) >> 60 == 15)
  {
    sub_100128154((16 * v7) | 8, a1, a2);
    if (!v8.rawValue)
    {
      while (1)
      {
        v9 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v9 > 3)
          goto LABEL_10;
        if ((unint64_t)(v7 - 0x7FFFFFFFFFFFFFFLL) >> 60 != 15)
          goto LABEL_12;
        sub_100128154((16 * v9) | 8, a1, a2);
        ++v7;
        if (v8.rawValue)
        {
          v7 = v9;
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
      break;
    }
LABEL_9:
    ConsumerReport.update(with:)(v8);
    if (v7++ >= 3)
    {
LABEL_10:
      sub_100022AEC(a1, a2);
      return;
    }
  }
  __break(1u);
}

void sub_1001BD150()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_1001BE588(v0, v1);
  sub_1001AF030();
  sub_10000B350();
}

uint64_t sub_1001BD17C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1001BE8FC(a1, a2);
  v5 = v4;
  sub_100022AEC(a1, a2);
  return v5;
}

void sub_1001BD1BC()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_1001BEB08(v0, v1);
  sub_1001AF030();
  sub_10000B350();
}

void sub_1001BD1E8()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_1001BEE90(v0, v1);
  sub_1001AF030();
  sub_10000B350();
}

void sub_1001BD214()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_1001BF040(v0, v1);
  sub_1001AF030();
  sub_10000B350();
}

uint64_t sub_1001BD254(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BD2A4(a1, a2, a3, (uint64_t)sub_1001C0268, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1001C47BC);
}

uint64_t sub_1001BD268(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BD2A4(a1, a2, a3, (uint64_t)sub_1001C0268, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1001C4A54);
}

uint64_t sub_1001BD27C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BD2A4(a1, a2, a3, (uint64_t)sub_1001C0268, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1001C4B20);
}

uint64_t sub_1001BD290(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BD2A4(a1, a2, a3, (uint64_t)sub_1001C0200, (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))sub_1001C4BE8);
}

uint64_t sub_1001BD2A4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD *, uint64_t, uint64_t))
{
  _QWORD v6[5];
  char v7;

  v7 = a1;
  v6[2] = &v7;
  return a5(a4, v6, a2, a3) & 1;
}

uint64_t sub_1001BD2F0(__int16 a1, uint64_t a2, unint64_t a3)
{
  char v3;
  _QWORD v5[5];
  __int16 v6;

  v6 = a1;
  v5[2] = &v6;
  sub_1001C4E8C((uint64_t)sub_1001C01CC, (uint64_t)v5, a2, a3);
  return v3 & 1;
}

void *ConsumerUsage.page.unsafeMutableAddressor()
{
  return &static ConsumerUsage.page;
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerUsage.init(rawValue:)(Swift::UInt16 rawValue)
{
  int v1;

  sub_1001ADD54();
  return (EnsembleHID::ConsumerUsage_optional)v1;
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerUsage.init(_:)(Swift::Int a1)
{
  int v1;

  sub_1001ADD54();
  return (EnsembleHID::ConsumerUsage_optional)v1;
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  int v2;

  sub_1001ADD54();
  return (EnsembleHID::ConsumerUsage_optional)v2;
}

uint64_t sub_1001BD3C0@<X0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(EnsembleHID::ConsumerUsage_optional *)&result = ConsumerUsage.init(page:usage:)(a1, a2);
  *(_WORD *)a3 = result;
  *(_BYTE *)(a3 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_1001BD3EC@<X0>(Swift::UInt16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(EnsembleHID::ConsumerUsage_optional *)&result = ConsumerUsage.init(rawValue:)(*a1);
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

void *ConsumerReport.reportID.unsafeMutableAddressor()
{
  return &static ConsumerReport.reportID;
}

void *ConsumerReport.bitCount.unsafeMutableAddressor()
{
  return &static ConsumerReport.bitCount;
}

uint64_t static ConsumerReport.bitCount.getter()
{
  return 72;
}

void sub_1001BD43C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static ConsumerReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static ConsumerReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001BD494, v2);
}

uint64_t sub_1001BD494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  type metadata accessor for Input.Bit8();
  v148 = v0;
  v146 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v145 = (char *)&v120 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v144 = v2;
  v143 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v141 = (char *)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v140 = v4;
  v139 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v138 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v137 = v6;
  v136 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v135 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v134 = v8;
  v133 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v132 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v131 = v10;
  v130 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v129 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v127 = v12;
  v125 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v124 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v123 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (unsigned __int8 *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v19 = *(_QWORD *)(v18 - 8);
  v150 = v18;
  v151 = v19;
  __chkstk_darwin(v18);
  v163 = (uint64_t *)((char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for LogicalMaximum();
  v147 = v21;
  v149 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v128 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v161 = v23;
  v142 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v126 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v159 = v25;
  v166 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v157 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportCount();
  v156 = v27;
  v165 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v158 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMaximum();
  v154 = v29;
  v164 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v160 = (char *)&v120 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsageMinimum();
  v153 = v31;
  v162 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = (char *)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsagePage();
  v152 = v34;
  v155 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v36 = (char *)&v120 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = v36;
  UsagePage.init(_:)(12, v37, v38, v39, v40, v41, v42, v43);
  v121 = v33;
  UsageMinimum.init(_:)(1, v44, v45, v46, v47, v48, v49, v50);
  UsageMaximum.init(_:)(1300, v51, v52, v53, v54, v55, v56, v57);
  ReportCount.init(_:)(4, v58, v59, v60, v61, v62, v63, v64);
  ReportSize.init(_:)(16, v65, v66, v67, v68, v69, v70, v71);
  LogicalMinimum.init(_:)(1, v72, v73, v74, v75, v76, v77, v78);
  LogicalMaximum.init(_:)(1300, v79, v80, v81, v82, v83, v84, v85);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v15 + 104))(v17, 0, v123);
  v86 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, 0, v127);
  v87 = v129;
  (*(void (**)(char *, _QWORD, uint64_t))(v130 + 104))(v129, 0, v131);
  v88 = v132;
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v132, 0, v134);
  v89 = v135;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, 0, v137);
  v90 = v138;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v138, 0, v140);
  v91 = v141;
  (*(void (**)(char *, _QWORD, uint64_t))(v143 + 104))(v141, 0, v144);
  (*(void (**)(char *, _QWORD, uint64_t))(v146 + 104))(v145, 0, v148);
  Input.init(_:_:_:_:_:_:_:_:)(v17, v86, v87, v88, v89, v90, v91, v163);
  v92 = sub_1000055B0(&qword_1002B5310);
  v93 = swift_allocObject(v92, 392, 7);
  *(_OWORD *)(v93 + 16) = xmmword_10021E830;
  *(_QWORD *)(v93 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v93 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v93 + 32) = 2;
  v94 = v152;
  *(_QWORD *)(v93 + 96) = v152;
  *(_QWORD *)(v93 + 104) = &protocol witness table for UsagePage;
  v95 = sub_100005534((_QWORD *)(v93 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v155 + 16))(v95, v36, v94);
  v96 = v153;
  *(_QWORD *)(v93 + 136) = v153;
  *(_QWORD *)(v93 + 144) = &protocol witness table for UsageMinimum;
  v97 = sub_100005534((_QWORD *)(v93 + 112));
  (*(void (**)(_QWORD *, char *, uint64_t))(v162 + 16))(v97, v33, v96);
  v98 = v154;
  *(_QWORD *)(v93 + 176) = v154;
  *(_QWORD *)(v93 + 184) = &protocol witness table for UsageMaximum;
  v99 = sub_100005534((_QWORD *)(v93 + 152));
  (*(void (**)(_QWORD *, char *, uint64_t))(v164 + 16))(v99, v160, v98);
  v100 = v156;
  *(_QWORD *)(v93 + 216) = v156;
  *(_QWORD *)(v93 + 224) = &protocol witness table for ReportCount;
  v101 = sub_100005534((_QWORD *)(v93 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v165 + 16))(v101, v158, v100);
  v102 = v159;
  *(_QWORD *)(v93 + 256) = v159;
  *(_QWORD *)(v93 + 264) = &protocol witness table for ReportSize;
  v103 = sub_100005534((_QWORD *)(v93 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v166 + 16))(v103, v157, v102);
  v104 = v161;
  *(_QWORD *)(v93 + 296) = v161;
  *(_QWORD *)(v93 + 304) = &protocol witness table for LogicalMinimum;
  v105 = sub_100005534((_QWORD *)(v93 + 272));
  v106 = v142;
  v107 = v126;
  (*(void (**)(_QWORD *, char *, uint64_t))(v142 + 16))(v105, v126, v104);
  v108 = v147;
  *(_QWORD *)(v93 + 336) = v147;
  *(_QWORD *)(v93 + 344) = &protocol witness table for LogicalMaximum;
  v109 = sub_100005534((_QWORD *)(v93 + 312));
  v110 = v149;
  v111 = v128;
  (*(void (**)(_QWORD *, char *, uint64_t))(v149 + 16))(v109, v128, v108);
  v112 = v150;
  *(_QWORD *)(v93 + 376) = v150;
  *(_QWORD *)(v93 + 384) = &protocol witness table for Input;
  v113 = sub_100005534((_QWORD *)(v93 + 352));
  v114 = v151;
  v115 = v163;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v151 + 16))(v113, v163, v112);
  v116 = static HIDReportDescriptor.Builder.buildBlock(_:)(v93);
  v148 = v117;
  v118 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v114 + 8))(v115, v112, v118);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v108);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v161);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v157, v159);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v158, v156);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v160, v154);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v121, v153);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v122, v152);
  return v116;
}

uint64_t ConsumerReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51B0 != -1)
    swift_once(&qword_1002B51B0, sub_1001BD43C);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static ConsumerReport.descriptor);
}

uint64_t static ConsumerReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51B0 != -1)
    swift_once(&qword_1002B51B0, sub_1001BD43C);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static ConsumerReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001BDE40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = ConsumerReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t ConsumerReport.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v13;
  Swift::String v14;

  v14._countAndFlagsBits = 0xD000000000000010;
  v14._object = (void *)0x8000000100259FB0;
  sub_10002517C(a1, a2);
  v2 = 0;
  while (1)
  {
    sub_1001C0290((16 * v2) | 8);
    if (!v3)
      break;
    v4 = v2;
LABEL_9:
    v2 = v4 + 1;
    v13._countAndFlagsBits = v3;
    v6 = sub_10002C9FC();
    v13._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v13, 16, 0, &type metadata for Int, v6);
    v13._object = v7;
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    if (v4 + 1 >= 4)
      goto LABEL_10;
  }
  if (v2 > 2)
    goto LABEL_10;
  v4 = v2 + 1;
  sub_1001C0290((16 * (v2 + 1)) | 8);
  if (v3)
    goto LABEL_9;
  v5 = 16 * v2 + 40;
  while (v4 != 3)
  {
    ++v4;
    sub_1001C0290(v5);
    v5 += 16;
    if (v3)
      goto LABEL_9;
  }
LABEL_10:
  v9 = sub_1000C2CD4();
  sub_100022AEC(v9, v10);
  v13 = v14;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13._countAndFlagsBits;
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerReport.Iterator.next()()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v2 = *(_QWORD *)(v1 + 16);
  if (v2 > 3)
  {
    LOWORD(v0) = 0;
    v7 = 1;
  }
  else
  {
    if ((unint64_t)(v2 - 0x800000000000000) >> 60 != 15)
    {
LABEL_15:
      __break(1u);
      return (EnsembleHID::ConsumerUsage_optional)v0;
    }
    sub_1001C02F4((16 * v2) | 8);
    if (!(_WORD)v0)
    {
      v3 = 16 * v2 + 24;
      v4 = 4;
      while (1)
      {
        if (v2 == 3)
        {
          LOWORD(v0) = 0;
          v7 = 1;
          goto LABEL_10;
        }
        v5 = v2;
        v6 = v2 - 0x7FFFFFFFFFFFFFFLL;
        if (v6 >> 60 != 15)
          break;
        sub_1001C02F4(v3);
        v3 += 16;
        v2 = v6 + 0x800000000000000;
        if ((_WORD)v0)
        {
          v2 = v5 + 1;
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
LABEL_9:
    v7 = 0;
    v4 = v2 + 1;
LABEL_10:
    *(_QWORD *)(v1 + 16) = v4;
  }
  return (EnsembleHID::ConsumerUsage_optional)((unsigned __int16)v0 | (v7 << 16));
}

uint64_t sub_1001BE0D4()
{
  uint64_t v0;

  return ConsumerReport.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t ConsumerReport.init()()
{
  return 2;
}

void ConsumerReport.init(_:)()
{
  sub_1001B58A8();
  __asm { BR              X10 }
}

uint64_t sub_1001BE16C()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 9uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(2, 0x9000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

void sub_1001BE238(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ConsumerReport.init()();
  a1[1] = v2;
  sub_1000050D4();
}

void sub_1001BE258(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ConsumerReport.init(_:)();
  *a1 = v2;
  a1[1] = v3;
  sub_1000050D4();
}

void sub_1001BE278()
{
  uint64_t v0;

  *(EnsembleHID::ConsumerUsage_optional *)&v0 = ConsumerReport.Iterator.next()();
  sub_1001C02B4(v0);
  sub_1000050D4();
}

uint64_t sub_1001BE298()
{
  uint64_t v0;

  return sub_1001BD17C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1001BE2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_1001BD244(a1, a2, a3, *v3, v3[1]);
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerReport.update(with:)(EnsembleHID::ConsumerUsage with)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t i;
  unsigned __int16 v5;
  int v6;
  uint64_t v7;
  int v8;

  v1 = *(_QWORD *)&with;
  v2 = 0;
  v3 = 1;
  for (i = 24; i != 72; i += 16)
  {
    sub_1001C0300(i);
    v6 = v5 != (unsigned __int16)v1 || v5 == 0;
    if (v6 != 1)
    {
      v8 = (unsigned __int16)v1;
      return (EnsembleHID::ConsumerUsage_optional)(v8 | (v6 << 16));
    }
    if (v5)
      v7 = v2;
    else
      v7 = i;
    if ((v3 & 1) != 0)
      v2 = v7;
    v3 &= v5 != 0;
  }
  if ((v3 & 1) == 0)
    sub_1000E4F5C(v1, v2);
  v8 = 0;
  return (EnsembleHID::ConsumerUsage_optional)(v8 | (v6 << 16));
}

EnsembleHID::ConsumerUsage_optional __swiftcall ConsumerReport.remove(_:)(EnsembleHID::ConsumerUsage a1)
{
  uint64_t v2;
  __int16 v3;
  int v4;
  int rawValue;

  v2 = 24;
  while (1)
  {
    sub_1001C0300(v2);
    v4 = v3 != a1.rawValue || v3 == 0;
    if ((v4 & 1) == 0)
      break;
    v2 += 16;
    if (v2 == 72)
    {
      rawValue = 0;
      return (EnsembleHID::ConsumerUsage_optional)(rawValue | (v4 << 16));
    }
  }
  sub_1000E4F5C(0, v2);
  rawValue = a1.rawValue;
  return (EnsembleHID::ConsumerUsage_optional)(rawValue | (v4 << 16));
}

uint64_t sub_1001BE3D8(__int16 *a1)
{
  uint64_t v1;

  return sub_1001BD2F0(*a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001BE3E4()
{
  return sub_1001B2DA4();
}

uint64_t sub_1001BE3F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001C272C);
}

uint64_t sub_1001BE3FC()
{
  return sub_1001B2DA4();
}

void sub_1001BE408(uint64_t a1, unsigned __int16 *a2)
{
  sub_1001D45F0(a1, *a2);
}

void sub_1001BE410(EnsembleHID::ConsumerUsage *a1)
{
  uint64_t v1;

  *(EnsembleHID::ConsumerUsage_optional *)&v1 = ConsumerReport.remove(_:)((EnsembleHID::ConsumerUsage)a1->rawValue);
  sub_1001C02B4(v1);
  sub_1000050D4();
}

void sub_1001BE434(EnsembleHID::ConsumerUsage *a1)
{
  uint64_t v1;

  *(EnsembleHID::ConsumerUsage_optional *)&v1 = ConsumerReport.update(with:)((EnsembleHID::ConsumerUsage)a1->rawValue);
  sub_1001C02B4(v1);
  sub_1000050D4();
}

uint64_t sub_1001BE458(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_1001BCE1C(*a1, v2);
  return sub_100022AEC(v1, v2);
}

uint64_t sub_1001BE490(uint64_t a1)
{
  return sub_1001D4728(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1001BE49C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = sub_100141354();
  sub_1001D48BC(v0, v1);
  v2 = sub_100141354();
  return sub_1001B3434(v2, v3);
}

uint64_t sub_1001BE4C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2EB4(a1, a2, a3, (void (*)(_QWORD, _QWORD, uint64_t, unint64_t))sub_1001D4E04);
}

unint64_t sub_1001BE4D0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001C284C(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001BE4E0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001D4FB4(*a1, a1[1], *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

unint64_t sub_1001BE4F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001C2954(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *v1, v1[1]);
}

void sub_1001BE500()
{
  sub_1001D42BC();
}

void sub_1001BE508()
{
  sub_1001C0150();
  EnsembleReportProtocol<>.init<A>(_:)();
}

uint64_t sub_1001BE578()
{
  return sub_1001D516C();
}

void sub_1001BE588(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 >> 62;
  sub_10002517C(a1, a2);
  HIDReport.offset(for:)(8);
  HIDReport.mask(for:)(8);
  __asm { BR              X8 }
}

void sub_1001BE8FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _WORD *v7;
  __int16 v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;

  sub_10002517C(a1, a2);
  v4 = 0;
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  v7 = &_swiftEmptyArrayStorage[4];
  while (1)
  {
    if ((unint64_t)(v4 - 0x800000000000000) >> 60 != 15)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sub_100128154((16 * v4) | 8, a1, a2);
    if (!v8)
      break;
    v9 = v8;
    if (!v5)
    {
LABEL_11:
      v14 = v6[3];
      if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_33;
      v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      v17 = sub_1000055B0(&qword_1002B5418);
      v18 = (_QWORD *)swift_allocObject(v17, 2 * v16 + 32, 7);
      v19 = (uint64_t)(j__malloc_size(v18) - 32) / 2;
      v18[2] = v16;
      v18[3] = 2 * v19;
      v20 = (unint64_t)(v18 + 4);
      v21 = v6;
      v22 = v6[3];
      v23 = v22 >> 1;
      if (v21[2])
      {
        v30 = v21;
        if (v18 != v21 || v20 >= (unint64_t)v21 + 2 * v23 + 32)
          memmove(v18 + 4, v21 + 4, v22 & 0xFFFFFFFFFFFFFFFELL);
        v30[2] = 0;
      }
      v7 = (_WORD *)(v20 + 2 * v23);
      v5 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - (v22 >> 1);
      swift_release();
      v6 = v18;
    }
LABEL_24:
    v25 = __OFSUB__(v5--, 1);
    if (v25)
      goto LABEL_32;
    *v7++ = v9;
    if (v4++ >= 3)
      goto LABEL_26;
  }
  v10 = 16 * v4 + 24;
  while (v4 <= 2)
  {
    v11 = v4;
    v12 = v4 - 0x7FFFFFFFFFFFFFFLL;
    if (v12 >> 60 != 15)
    {
      __break(1u);
      goto LABEL_31;
    }
    sub_100128154(v10, a1, a2);
    v10 += 16;
    v4 = v12 + 0x800000000000000;
    if (v13)
    {
      v9 = v13;
      v4 = v11 + 1;
      if (v5)
        goto LABEL_24;
      goto LABEL_11;
    }
  }
LABEL_26:
  sub_100022AEC(a1, a2);
  v27 = v6[3];
  if (v27 < 2)
    return;
  v28 = v27 >> 1;
  v25 = __OFSUB__(v28, v5);
  v29 = v28 - v5;
  if (!v25)
  {
    v6[2] = v29;
    return;
  }
LABEL_34:
  __break(1u);
}

void sub_1001BEB08(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t i;

  v2 = a2 >> 62;
  sub_10002517C(a1, a2);
  for (i = 0; !i; i = 1)
    ;
  HIDReport.offset(for:)(i + 8);
  HIDReport.mask(for:)(i + 8);
  __asm { BR              X8 }
}

void sub_1001BEE90(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;

  sub_10002517C(a1, a2);
  v4 = 0;
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  v7 = &_swiftEmptyArrayStorage[4];
  while (2)
  {
    v8 = 8 * v4;
    while (1)
    {
      if ((unint64_t)(v4 - 0x1000000000000000) >> 61 != 7)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (__OFADD__(v8, 8))
        goto LABEL_29;
      sub_100127CC4(v8 + 8, a1, a2);
      v10 = v4 + 1;
      if ((v9 - 3) <= 2u)
        break;
      v8 += 8;
      ++v4;
      if (v10 - 1 >= 3)
        goto LABEL_24;
    }
    v11 = v9;
    if (!v5)
    {
      v12 = v6[3];
      if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_32;
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (v13 <= 1)
        v14 = 1;
      else
        v14 = v13;
      v15 = sub_1000055B0(&qword_1002B5428);
      v16 = (_QWORD *)swift_allocObject(v15, v14 + 32, 7);
      v17 = 2 * j__malloc_size(v16) - 64;
      v16[2] = v14;
      v16[3] = v17;
      v18 = (unint64_t)(v16 + 4);
      v19 = v6[3];
      if (v6[2])
      {
        if (v16 != v6 || v18 >= (unint64_t)v6 + (v19 >> 1) + 32)
        {
          v26 = v17;
          memmove(v16 + 4, v6 + 4, v19 >> 1);
          v17 = v26;
        }
        v6[2] = 0;
      }
      v7 = (_BYTE *)(v18 + (v19 >> 1));
      v5 = (v17 >> 1) - (v19 >> 1);
      swift_release();
      v6 = v16;
    }
    v21 = __OFSUB__(v5--, 1);
    if (v21)
      goto LABEL_30;
    *v7++ = v11;
    if (v4++ < 3)
      continue;
    break;
  }
LABEL_24:
  sub_100022AEC(a1, a2);
  v23 = v6[3];
  if (v23 < 2)
    return;
  v24 = v23 >> 1;
  v21 = __OFSUB__(v24, v5);
  v25 = v24 - v5;
  if (!v21)
  {
    v6[2] = v25;
    return;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

void sub_1001BF040(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  sub_10002517C(a1, a2);
  v4 = 0;
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  v7 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
  do
  {
    while (1)
    {
      sub_100127CC4(8 * v4 + 8, a1, a2);
      v9 = v8;
      if (v8 <= 0x21u && ((1 << v8) & 0x30003001ELL) != 0)
        break;
      v11 = v4 < 1;
      v4 = 1;
      if (!v11)
        goto LABEL_25;
    }
    if (!v5)
    {
      v12 = v6[3];
      if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_30;
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (v13 <= 1)
        v14 = 1;
      else
        v14 = v13;
      v15 = sub_1000055B0(&qword_1002B5430);
      v16 = (_QWORD *)swift_allocObject(v15, v14 + 32, 7);
      v17 = 2 * j__malloc_size(v16) - 64;
      v16[2] = v14;
      v16[3] = v17;
      v18 = (unint64_t)(v16 + 4);
      v19 = v6[3];
      if (v6[2])
      {
        if (v16 != v6 || v18 >= (unint64_t)v6 + (v19 >> 1) + 32)
          memmove(v16 + 4, v6 + 4, v19 >> 1);
        v6[2] = 0;
      }
      v7 = (unsigned __int8 *)(v18 + (v19 >> 1));
      v5 = (v17 >> 1) - (v19 >> 1);
      swift_release();
      v6 = v16;
    }
    v21 = __OFSUB__(v5--, 1);
    if (v21)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    *v7++ = v9;
    v11 = v4++ < 1;
  }
  while (v11);
LABEL_25:
  sub_100022AEC(a1, a2);
  v22 = v6[3];
  if (v22 < 2)
    return;
  v23 = v22 >> 1;
  v21 = __OFSUB__(v23, v5);
  v24 = v23 - v5;
  if (!v21)
  {
    v6[2] = v24;
    return;
  }
LABEL_31:
  __break(1u);
}

void sub_1001BF1E4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *(*v21)(uint64_t *__return_ptr, char *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *(*v33)(uint64_t *__return_ptr, char *);
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];
  __int128 v52;
  uint64_t v53;
  _BYTE v54[48];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v48 = a1;
  if (v2)
  {
    v3 = sub_1000055B0(&qword_1002AC0E0);
    v4 = (_QWORD *)sub_1001C030C(v3, 8 * v2);
    v5 = (uint64_t)(j__malloc_size(v4) - 32) / 8;
    v4[2] = v2;
    v4[3] = (2 * v5) | 1;
    v6 = v4 + 4;
    v7 = (v5 & 0x7FFFFFFFFFFFFFFFLL) - v2;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = 0;
    v9 = v2;
    while (1)
    {
      if (v8 == v2)
      {
        v18 = sub_1001C02E0();
      }
      else
      {
        if (v8 >= v2)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        v10 = sub_1000445C0(v1 + 32 + 40 * v8++, (uint64_t)v54);
      }
      sub_1001C02D4(v10, v11, v12, v13, v14, v15, v16, v17, v48, v18);
      if (!v53)
        goto LABEL_42;
      v19 = sub_100025A50(&v52, (uint64_t)v51);
      sub_1001C02C4(v19, v20, v21);
      sub_100005988(v51);
      *v6++ = v50;
      if (!--v9)
      {
        v1 = v48;
        goto LABEL_11;
      }
    }
  }
  v4 = _swiftEmptyArrayStorage;
  v7 = _swiftEmptyArrayStorage[3] >> 1;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = 0;
  v6 = &_swiftEmptyArrayStorage[4];
LABEL_11:
  v49 = v1 + 32;
  while (1)
  {
    if (v8 == v2)
    {
      v30 = sub_1001C02E0();
    }
    else
    {
      if (v8 >= v2)
        goto LABEL_38;
      v22 = sub_1000445C0(v49 + 40 * v8++, (uint64_t)v54);
    }
    sub_1001C02D4(v22, v23, v24, v25, v26, v27, v28, v29, v48, v30);
    if (!v53)
      break;
    v31 = sub_100025A50(&v52, (uint64_t)v51);
    sub_1001C02C4(v31, v32, v33);
    sub_100005988(v51);
    if (!v7)
    {
      v34 = v4[3];
      if ((uint64_t)((v34 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_39;
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      if (v35 <= 1)
        v36 = 1;
      else
        v36 = v35;
      v37 = sub_1000055B0(&qword_1002AC0E0);
      v38 = (_QWORD *)sub_1001C030C(v37, 8 * v36);
      v39 = (uint64_t)(j__malloc_size(v38) - 32) / 8;
      v38[2] = v36;
      v38[3] = (2 * v39) | 1;
      v40 = (unint64_t)(v38 + 4);
      v41 = v4[3];
      v42 = v41 >> 1;
      if (v4[2])
      {
        if (v38 != v4 || v40 >= (unint64_t)&v4[v42 + 4])
          memmove(v38 + 4, v4 + 4, 8 * v42);
        v4[2] = 0;
      }
      v6 = (_QWORD *)(v40 + 8 * v42);
      v7 = (v39 & 0x7FFFFFFFFFFFFFFFLL) - (v41 >> 1);
      swift_release();
      v4 = v38;
    }
    v44 = __OFSUB__(v7--, 1);
    if (v44)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    *v6++ = v50;
  }
  swift_release();
  swift_bridgeObjectRelease();
  v45 = v4[3];
  if (v45 < 2)
    return;
  v46 = v45 >> 1;
  v44 = __OFSUB__(v46, v7);
  v47 = v46 - v7;
  if (!v44)
  {
    v4[2] = v47;
    return;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_1001BF478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      HIDReport.offset(for:)(8);
      HIDReport.mask(for:)(8);
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x1001BF728);
  }
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_BYTE *)(a1 + 16) = 0;
  return 0;
}

void sub_1001BF748(uint64_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;

  v7 = a1;
  if (!a2)
  {
    v10 = 0;
LABEL_19:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v10;
    return;
  }
  v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_19;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v10 = 0;
    v11 = 1;
    while (1)
    {
      v12 = v11;
      if ((unint64_t)(v10 - 0x800000000000000) >> 60 != 15)
        break;
      sub_100128154((16 * v10) | 8, a4, a5);
      if (!v13)
      {
        v15 = 16 * v10 + 24;
        while (1)
        {
          if (v10 == 3)
          {
            v10 = 4;
            v7 = a1;
            goto LABEL_19;
          }
          v16 = v10;
          v17 = v10 - 0x7FFFFFFFFFFFFFFLL;
          if (v17 >> 60 != 15)
            break;
          sub_100128154(v15, a4, a5);
          v15 += 16;
          v10 = v17 + 0x800000000000000;
          if (v13)
          {
            v14 = v16 + 1;
            v8 = a3;
            v7 = a1;
            goto LABEL_13;
          }
        }
        __break(1u);
        break;
      }
      v14 = v10;
LABEL_13:
      v10 = v14 + 1;
      *v9 = v13;
      if (v12 != v8)
      {
        ++v9;
        v11 = v12 + 1;
        if (v14 <= 2)
          continue;
      }
      goto LABEL_19;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1001BF8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;

  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      for (i = 0; !i; i = 1)
        ;
      HIDReport.offset(for:)(i + 8);
      HIDReport.mask(for:)(i + 8);
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x1001BFB4CLL);
  }
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_BYTE *)(a1 + 16) = 0;
  return 0;
}

void sub_1001BFB6C(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (!a2)
  {
    v12 = 0;
LABEL_16:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = v12;
    return;
  }
  if (!a3)
  {
    v12 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v10 = 0;
    v11 = 1;
    v12 = 4;
LABEL_5:
    v13 = v11;
    v14 = 8 * v10;
    v15 = v10;
    while ((unint64_t)(v15 - 0x1000000000000000) >> 61 == 7)
    {
      if (__OFADD__(v14, 8))
        goto LABEL_19;
      sub_100127CC4(v14 + 8, a4, a5);
      v10 = v15 + 1;
      if ((v16 - 3) <= 2u)
      {
        *v9 = v16;
        if (v13 == a3 || (++v9, v11 = v13 + 1, v15 > 2))
        {
          v12 = v15 + 1;
          goto LABEL_16;
        }
        goto LABEL_5;
      }
      v14 += 8;
      ++v15;
      if (v10 == 4)
        goto LABEL_16;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
}

uint64_t *sub_1001BFC9C(uint64_t *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  BOOL v17;

  v7 = result;
  if (!a2)
  {
    v11 = 0;
    v8 = 0;
LABEL_18:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v11;
    return (uint64_t *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v10 = 0;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = v10;
      v10 = v12;
      v14 = v11;
      while (1)
      {
        sub_100127CC4(8 * v14 + 8, a4, a5);
        if (v15 <= 0x21u && ((1 << v15) & 0x30003001ELL) != 0)
          break;
        v17 = v14 < 1;
        v14 = 1;
        if (!v17)
        {
          v11 = 2;
          v8 = v13;
          goto LABEL_18;
        }
      }
      v11 = v14 + 1;
      *v9 = v15;
      if (v10 == v8)
        goto LABEL_18;
      ++v9;
      v12 = v10 + 1;
      if (v14 > 0)
      {
        v11 = 2;
        v8 = v10;
        goto LABEL_18;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BFDB4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1001BFFB0()
{
  unint64_t result;

  result = qword_1002B53E8;
  if (!qword_1002B53E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerUsage, &type metadata for ConsumerUsage);
    atomic_store(result, (unint64_t *)&qword_1002B53E8);
  }
  return result;
}

unint64_t sub_1001BFFF0()
{
  unint64_t result;

  result = qword_1002B53F0;
  if (!qword_1002B53F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerUsage, &type metadata for ConsumerUsage);
    atomic_store(result, (unint64_t *)&qword_1002B53F0);
  }
  return result;
}

unint64_t sub_1001C0030()
{
  unint64_t result;

  result = qword_1002B53F8;
  if (!qword_1002B53F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerReport.Iterator, &type metadata for ConsumerReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_1002B53F8);
  }
  return result;
}

unint64_t sub_1001C0070()
{
  unint64_t result;

  result = qword_1002B5400;
  if (!qword_1002B5400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerReport, &type metadata for ConsumerReport);
    atomic_store(result, (unint64_t *)&qword_1002B5400);
  }
  return result;
}

unint64_t sub_1001C00B0()
{
  unint64_t result;

  result = qword_1002B5408;
  if (!qword_1002B5408)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerReport, &type metadata for ConsumerReport);
    atomic_store(result, (unint64_t *)&qword_1002B5408);
  }
  return result;
}

void type metadata accessor for ConsumerUsage()
{
  sub_10003B1DC();
}

void type metadata accessor for ConsumerReport()
{
  sub_10003B1DC();
}

void sub_1001C0108()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B58A8();
  v3 = *v2;
  v4 = v2[1];
  sub_10002517C(*v2, v4);
  *v1 = v3;
  v1[1] = v4;
  v1[2] = *(_QWORD *)(v0 + 16);
  sub_10000B350();
}

void type metadata accessor for ConsumerReport.Iterator()
{
  sub_10003B1DC();
}

unint64_t sub_1001C0150()
{
  unint64_t result;

  result = qword_1002B5410;
  if (!qword_1002B5410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConsumerReport, &type metadata for ConsumerReport);
    atomic_store(result, (unint64_t *)&qword_1002B5410);
  }
  return result;
}

BOOL sub_1001C018C(char *a1, char *a2)
{
  return static ReportID.== infix(_:_:)(*a1, *a2);
}

BOOL sub_1001C01AC(__int16 *a1, __int16 *a2)
{
  return sub_1001BCCE4(*a1, *a2);
}

BOOL sub_1001C01CC(__int16 *a1)
{
  uint64_t v1;

  return sub_1001C01AC(a1, *(__int16 **)(v1 + 16));
}

uint64_t sub_1001C01E8()
{
  return sub_1001B2A30();
}

BOOL sub_1001C0200(char *a1)
{
  uint64_t v1;

  return sub_1001C018C(a1, *(char **)(v1 + 16));
}

uint64_t sub_1001C021C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B5358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL sub_1001C0268(char *a1)
{
  return sub_1001C0200(a1);
}

uint64_t sub_1001C0280(uint64_t result, unint64_t a2)
{
  return sub_100022AEC(result, a2);
}

void sub_1001C0290(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_100128154(a1, v2, v1);
}

void sub_1001C029C(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_100127CC4(a1, v2, v1);
}

uint64_t sub_1001C02A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10002517C(a3, a4);
}

uint64_t sub_1001C02B4(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)v1 = result;
  *(_BYTE *)(v1 + 2) = BYTE2(result) & 1;
  return result;
}

_QWORD *sub_1001C02C4(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *), ...)
{
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  return a3((uint64_t *)va, va1);
}

uint64_t sub_1001C02D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  return sub_1001C021C((uint64_t)va1, (uint64_t)va);
}

double sub_1001C02E0()
{
  return 0.0;
}

void sub_1001C02F4(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100128154(a1, v1, v2);
}

void sub_1001C0300(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100128154(a1, v1, v2);
}

uint64_t sub_1001C030C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7);
}

uint64_t sub_1001C0318(uint64_t result, unint64_t a2)
{
  return sub_10002517C(result, a2);
}

uint64_t sub_1001C032C(uint64_t result)
{
  _BYTE *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_1001C033C(uint64_t result)
{
  _DWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_1001C034C(uint64_t result)
{
  _BYTE *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_1001C035C(uint64_t result)
{
  _DWORD *v1;

  *v1 ^= result;
  return result;
}

void *PointerReport.reportID.unsafeMutableAddressor()
{
  return &static PointerReport.reportID;
}

void *PointerReport.Flags.accelerated.unsafeMutableAddressor()
{
  return &static PointerReport.Flags.accelerated;
}

_DWORD *sub_1001C0384@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1001C0390(_DWORD *a1@<X8>)
{
  *a1 = static UInt32.logicalMinimum.getter();
  sub_1000050D4();
}

BOOL sub_1001C03B0(int *a1)
{
  int *v1;

  return sub_1001C2948(*a1, *v1);
}

uint64_t sub_1001C03BC@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;

  result = sub_1001D43B8(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_1001C03E8(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  *a2 = sub_1001C0324(*a1, *v2);
  sub_1000050D4();
}

void sub_1001C0410(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;

  *a2 = sub_1001C0328(*a1, *v2);
  sub_1000050D4();
}

BOOL sub_1001C0438(_DWORD *a1, int *a2)
{
  return sub_1001D4208(a1, *a2);
}

unint64_t sub_1001C0440@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_1001D4350(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t sub_1001C0470@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_1001D4BEC(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1001C04A0(unsigned int *a1)
{
  return sub_1001D433C(*a1);
}

uint64_t sub_1001C04A8(unsigned int *a1)
{
  return sub_1001C033C(*a1);
}

uint64_t sub_1001C04B0(unsigned int *a1)
{
  return sub_1001C035C(*a1);
}

uint64_t sub_1001C04B8@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = sub_1001D4C38(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1001C04E4(int *a1)
{
  int *v1;

  return sub_1001C2840(*a1, *v1);
}

BOOL sub_1001C04F0(int *a1)
{
  int *v1;

  return sub_1001D5064(*a1, *v1);
}

BOOL sub_1001C04FC()
{
  int *v0;

  return sub_1001D42B0(*v0);
}

uint64_t sub_1001C0504(unsigned int *a1)
{
  return sub_1001D51E4(*a1);
}

_DWORD *sub_1001C050C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1001C051C(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1001C0528(int *a1, int *a2)
{
  return static HIDUsage.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_1001C0534@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D4180(a1);
  *a2 = result;
  return result;
}

void *PointerReport.bitCount.unsafeMutableAddressor()
{
  return &static PointerReport.bitCount;
}

uint64_t static PointerReport.bitCount.getter()
{
  return 136;
}

void sub_1001C056C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static PointerReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static PointerReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001C05C4, v2);
}

uint64_t sub_1001C05C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;

  type metadata accessor for PhysicalCollection();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Usage();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Usage.init(_:)(1, v10, v11, v12, v13, v14, v15, v16);
  PhysicalCollection.init(content:)(v4);
  v17 = sub_1000055B0(&qword_1002B5310);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021DE60;
  *(_QWORD *)(v18 + 56) = v6;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Usage;
  v19 = sub_100005534((_QWORD *)(v18 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v19, v9, v6);
  *(_QWORD *)(v18 + 96) = v1;
  *(_QWORD *)(v18 + 104) = &protocol witness table for PhysicalCollection;
  v20 = sub_100005534((_QWORD *)(v18 + 72));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2 + 16))(v20, v4, v1);
  v21 = static HIDReportDescriptor.Builder.buildBlock(_:)(v18);
  v22 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v2 + 8))(v4, v1, v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v21;
}

uint64_t sub_1001C0740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  unsigned __int8 *v143;
  _BYTE *v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(unsigned __int8 *);
  _BYTE *v167;
  _BYTE *v168;
  void (*v169)(char *, _QWORD, uint64_t);
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  _BYTE *v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;
  void (*v194)(char *);
  char *v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  void (*v219)(_QWORD *, char *, uint64_t);
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  void (*v227)(_QWORD *, char *, uint64_t);
  uint64_t v228;
  _QWORD *v229;
  void (*v230)(_QWORD *, char *, uint64_t);
  uint64_t v231;
  _QWORD *v232;
  void (*v233)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  char *v245;
  _QWORD *v246;
  char *v247;
  _QWORD *v248;
  _QWORD *v249;
  __n128 v250;
  void (*v251)(_QWORD *, uint64_t, __n128);
  void (*v252)(char *, uint64_t);
  void (*v253)(char *, uint64_t);
  void (*v254)(char *, uint64_t);
  uint64_t v255;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(unsigned __int8 *);
  void (*v291)(char *);
  _BYTE *v292;
  unsigned __int8 *v293;
  char *v294;
  char *v295;
  _QWORD *v296;
  _QWORD *v297;
  char *v298;
  _QWORD *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  unsigned int v305;
  void (*v306)(char *);
  unsigned int v307;
  void (*v308)(_BYTE *);
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;

  type metadata accessor for Input.Bit8();
  v319 = v0;
  v289 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v264 = (char *)&v257 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v318 = v2;
  v311 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v295 = (char *)&v257 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v323 = v4;
  v312 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v263 = (char *)&v257 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v322 = v6;
  v314 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v258 = (char *)&v257 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v321 = v8;
  v316 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v262 = (char *)&v257 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v320 = v10;
  v317 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v294 = (char *)&v257 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v13 = *(_QWORD *)(v12 - 8);
  v309 = v12;
  __chkstk_darwin(v12);
  v292 = (char *)&v257 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v16 = *(_QWORD *)(v15 - 8);
  v288 = v15;
  __chkstk_darwin(v15);
  v293 = (unsigned __int8 *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v261 = v18;
  v286 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v285 = (uint64_t *)((char *)&v257 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v281 = (uint64_t *)((char *)&v257 - v21);
  __chkstk_darwin(v22);
  v299 = (uint64_t *)((char *)&v257 - v23);
  __chkstk_darwin(v24);
  v297 = (uint64_t *)((char *)&v257 - v25);
  __chkstk_darwin(v26);
  v296 = (uint64_t *)((char *)&v257 - v27);
  type metadata accessor for ReportCount();
  v260 = v28;
  v284 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v278 = (char *)&v257 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v298 = (char *)&v257 - v31;
  __chkstk_darwin(v32);
  v303 = (char *)&v257 - v33;
  __chkstk_darwin(v34);
  v304 = (char *)&v257 - v35;
  __chkstk_darwin(v36);
  v269 = (char *)&v257 - v37;
  type metadata accessor for ReportSize();
  v259 = v38;
  v279 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v272 = (char *)&v257 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v300 = (char *)&v257 - v41;
  __chkstk_darwin(v42);
  v301 = (char *)&v257 - v43;
  __chkstk_darwin(v44);
  v302 = (char *)&v257 - v45;
  __chkstk_darwin(v46);
  v270 = (char *)&v257 - v47;
  type metadata accessor for LogicalMaximum();
  v268 = v48;
  v283 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v271 = (char *)&v257 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogicalMinimum();
  v267 = v50;
  v282 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v273 = (char *)&v257 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Usage();
  v266 = v52;
  v280 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v274 = (char *)&v257 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v275 = (char *)&v257 - v55;
  type metadata accessor for UsagePage();
  v265 = v56;
  v277 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v276 = (char *)&v257 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsagePage.init(_:)(1, v58, v59, v60, v61, v62, v63, v64);
  Usage.init(_:)(48, v65, v66, v67, v68, v69, v70, v71);
  Usage.init(_:)(49, v72, v73, v74, v75, v76, v77, v78);
  LogicalMinimum.init(_:)(-127, v79, v80, v81, v82, v83, v84, v85);
  LogicalMaximum.init(_:)(127, v86, v87, v88, v89, v90, v91, v92);
  ReportSize.init(_:)(8, v93, v94, v95, v96, v97, v98, v99);
  ReportCount.init(_:)(2, v100, v101, v102, v103, v104, v105, v106);
  v310 = 0;
  v290 = *(void (**)(unsigned __int8 *))(v16 + 104);
  v290(v293);
  v287 = 1;
  v308 = *(void (**)(_BYTE *))(v13 + 104);
  v107 = v292;
  v308(v292);
  v307 = 1;
  v306 = *(void (**)(char *))(v317 + 104);
  v108 = v294;
  v306(v294);
  LODWORD(v317) = 0;
  v316 = *(_QWORD *)(v316 + 104);
  v109 = v262;
  ((void (*)(_BYTE *))v316)(v262);
  v315 = 0;
  v314 = *(_QWORD *)(v314 + 104);
  v110 = v258;
  ((void (*)(char *))v314)(v258);
  v313 = 0;
  v312 = *(_QWORD *)(v312 + 104);
  v111 = v263;
  ((void (*)(char *))v312)(v263);
  v305 = 0;
  v291 = *(void (**)(char *))(v311 + 104);
  v112 = v295;
  v113 = v318;
  v291(v295);
  LODWORD(v311) = 0;
  v289 = *(_QWORD *)(v289 + 104);
  v114 = v264;
  v115 = v319;
  ((void (*)(char *))v289)(v264);
  v116 = v293;
  v117 = v108;
  v118 = v109;
  v119 = v109;
  v120 = v110;
  v121 = v110;
  v122 = v111;
  v123 = v111;
  v124 = v112;
  Input.init(_:_:_:_:_:_:_:_:)(v293, v107, v117, v119, v120, v122, v112, v296);
  ReportSize.init(_:)(32, v125, v126, v127, v128, v129, v130, v131);
  ReportCount.init(_:)(2, v132, v133, v134, v135, v136, v137, v138);
  v139 = v116;
  v140 = v288;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v290)(v139, v310, v288);
  v141 = v287;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v308)(v107, v287, v309);
  v142 = v294;
  ((void (*)(char *, _QWORD, uint64_t))v306)(v294, v307, v320);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v316)(v118, v317, v321);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v314)(v121, v315, v322);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v312)(v123, v313, v323);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v291)(v124, v305, v113);
  ((void (*)(char *, _QWORD, uint64_t))v289)(v114, v311, v115);
  v143 = v293;
  v144 = v292;
  v145 = v142;
  v146 = v118;
  v147 = v118;
  v148 = v123;
  v149 = v123;
  v150 = v114;
  Input.init(_:_:_:_:_:_:_:_:)(v293, v292, v145, v147, v121, v148, v124, v297);
  ReportSize.init(_:)(8, v151, v152, v153, v154, v155, v156, v157);
  ReportCount.init(_:)(1, v158, v159, v160, v161, v162, v163, v164);
  v165 = v140;
  v166 = v290;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v290)(v143, v310, v165);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v308)(v144, v141, v309);
  v167 = v294;
  ((void (*)(char *, _QWORD, uint64_t))v306)(v294, v307, v320);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v316)(v146, v317, v321);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v314)(v121, v315, v322);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v312)(v149, v313, v323);
  v168 = v295;
  ((void (*)(char *, _QWORD, uint64_t))v291)(v295, v305, v318);
  v169 = (void (*)(char *, _QWORD, uint64_t))v289;
  ((void (*)(char *, _QWORD, uint64_t))v289)(v150, v311, v319);
  v170 = v143;
  v171 = v143;
  v172 = v144;
  v173 = v144;
  v174 = v262;
  Input.init(_:_:_:_:_:_:_:_:)(v170, v172, v167, v262, v121, v149, v168, v299);
  ReportSize.init(_:)(8, v175, v176, v177, v178, v179, v180, v181);
  ReportCount.init(_:)(1, v182, v183, v184, v185, v186, v187, v188);
  v189 = v171;
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v166)(v171, v310, v288);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v308)(v173, v287, v309);
  v190 = v167;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v306)(v167, v307, v320);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v316)(v174, v317, v321);
  v191 = v121;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v314)(v121, v315, v322);
  v192 = v263;
  ((void (*)(char *, _QWORD, uint64_t))v312)(v263, v313, v323);
  v193 = v295;
  v194 = v291;
  ((void (*)(char *, _QWORD, uint64_t))v291)(v295, v305, v318);
  v195 = v264;
  v169(v264, v311, v319);
  v196 = v189;
  v197 = v189;
  v198 = v292;
  Input.init(_:_:_:_:_:_:_:_:)(v196, v292, v190, v174, v191, v192, v193, v281);
  ReportSize.init(_:)(32, v199, v200, v201, v202, v203, v204, v205);
  ReportCount.init(_:)(1, v206, v207, v208, v209, v210, v211, v212);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v290)(v197, v310, v288);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v308)(v198, v287, v309);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v306)(v190, v307, v320);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v316)(v174, v317, v321);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v314)(v191, v315, v322);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v312)(v192, v313, v323);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v194)(v193, v305, v318);
  ((void (*)(char *, _QWORD, uint64_t))v289)(v195, v311, v319);
  Input.init(_:_:_:_:_:_:_:_:)(v197, v198, v190, v174, v191, v192, v193, v285);
  v213 = sub_1000055B0(&qword_1002B5310);
  v214 = swift_allocObject(v213, 872, 7);
  *(_OWORD *)(v214 + 16) = xmmword_10022C650;
  *(_QWORD *)(v214 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v214 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v214 + 32) = 5;
  v215 = v265;
  *(_QWORD *)(v214 + 96) = v265;
  *(_QWORD *)(v214 + 104) = &protocol witness table for UsagePage;
  v216 = sub_100005534((_QWORD *)(v214 + 72));
  (*(void (**)(_QWORD *, char *, uint64_t))(v277 + 16))(v216, v276, v215);
  v217 = v266;
  *(_QWORD *)(v214 + 136) = v266;
  *(_QWORD *)(v214 + 144) = &protocol witness table for Usage;
  v218 = sub_100005534((_QWORD *)(v214 + 112));
  v219 = *(void (**)(_QWORD *, char *, uint64_t))(v280 + 16);
  v219(v218, v275, v217);
  *(_QWORD *)(v214 + 176) = v217;
  *(_QWORD *)(v214 + 184) = &protocol witness table for Usage;
  v220 = sub_100005534((_QWORD *)(v214 + 152));
  v219(v220, v274, v217);
  v221 = v267;
  *(_QWORD *)(v214 + 216) = v267;
  *(_QWORD *)(v214 + 224) = &protocol witness table for LogicalMinimum;
  v222 = sub_100005534((_QWORD *)(v214 + 192));
  (*(void (**)(_QWORD *, char *, uint64_t))(v282 + 16))(v222, v273, v221);
  v223 = v268;
  *(_QWORD *)(v214 + 256) = v268;
  *(_QWORD *)(v214 + 264) = &protocol witness table for LogicalMaximum;
  v224 = sub_100005534((_QWORD *)(v214 + 232));
  (*(void (**)(_QWORD *, char *, uint64_t))(v283 + 16))(v224, v271, v223);
  v225 = v259;
  *(_QWORD *)(v214 + 296) = v259;
  *(_QWORD *)(v214 + 304) = &protocol witness table for ReportSize;
  v226 = sub_100005534((_QWORD *)(v214 + 272));
  v227 = *(void (**)(_QWORD *, char *, uint64_t))(v279 + 16);
  v227(v226, v270, v225);
  v228 = v260;
  *(_QWORD *)(v214 + 336) = v260;
  *(_QWORD *)(v214 + 344) = &protocol witness table for ReportCount;
  v229 = sub_100005534((_QWORD *)(v214 + 312));
  v230 = *(void (**)(_QWORD *, char *, uint64_t))(v284 + 16);
  v230(v229, v269, v228);
  v231 = v261;
  *(_QWORD *)(v214 + 376) = v261;
  *(_QWORD *)(v214 + 384) = &protocol witness table for Input;
  v232 = sub_100005534((_QWORD *)(v214 + 352));
  v233 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v286 + 16);
  v233(v232, v296, v231);
  *(_QWORD *)(v214 + 416) = v225;
  *(_QWORD *)(v214 + 424) = &protocol witness table for ReportSize;
  v234 = sub_100005534((_QWORD *)(v214 + 392));
  v227(v234, v302, v225);
  *(_QWORD *)(v214 + 456) = v228;
  *(_QWORD *)(v214 + 464) = &protocol witness table for ReportCount;
  v235 = sub_100005534((_QWORD *)(v214 + 432));
  v230(v235, v304, v228);
  *(_QWORD *)(v214 + 496) = v231;
  *(_QWORD *)(v214 + 504) = &protocol witness table for Input;
  v236 = sub_100005534((_QWORD *)(v214 + 472));
  v233(v236, v297, v231);
  *(_QWORD *)(v214 + 536) = v225;
  *(_QWORD *)(v214 + 544) = &protocol witness table for ReportSize;
  v237 = sub_100005534((_QWORD *)(v214 + 512));
  v227(v237, v301, v225);
  *(_QWORD *)(v214 + 576) = v228;
  *(_QWORD *)(v214 + 584) = &protocol witness table for ReportCount;
  v238 = sub_100005534((_QWORD *)(v214 + 552));
  v230(v238, v303, v228);
  *(_QWORD *)(v214 + 616) = v231;
  *(_QWORD *)(v214 + 624) = &protocol witness table for Input;
  v239 = sub_100005534((_QWORD *)(v214 + 592));
  v233(v239, v299, v231);
  *(_QWORD *)(v214 + 656) = v225;
  *(_QWORD *)(v214 + 664) = &protocol witness table for ReportSize;
  v240 = sub_100005534((_QWORD *)(v214 + 632));
  v227(v240, v300, v225);
  *(_QWORD *)(v214 + 696) = v228;
  *(_QWORD *)(v214 + 704) = &protocol witness table for ReportCount;
  v241 = sub_100005534((_QWORD *)(v214 + 672));
  v230(v241, v298, v228);
  *(_QWORD *)(v214 + 736) = v231;
  *(_QWORD *)(v214 + 744) = &protocol witness table for Input;
  v242 = sub_100005534((_QWORD *)(v214 + 712));
  v243 = v281;
  v233(v242, v281, v231);
  *(_QWORD *)(v214 + 776) = v225;
  *(_QWORD *)(v214 + 784) = &protocol witness table for ReportSize;
  v244 = sub_100005534((_QWORD *)(v214 + 752));
  v245 = v272;
  v227(v244, v272, v225);
  *(_QWORD *)(v214 + 816) = v228;
  *(_QWORD *)(v214 + 824) = &protocol witness table for ReportCount;
  v246 = sub_100005534((_QWORD *)(v214 + 792));
  v247 = v278;
  v230(v246, v278, v228);
  *(_QWORD *)(v214 + 856) = v231;
  *(_QWORD *)(v214 + 864) = &protocol witness table for Input;
  v248 = sub_100005534((_QWORD *)(v214 + 832));
  v249 = v285;
  v233(v248, v285, v231);
  v323 = static HIDReportDescriptor.Builder.buildBlock(_:)(v214);
  v250 = swift_bridgeObjectRelease();
  v251 = *(void (**)(_QWORD *, uint64_t, __n128))(v286 + 8);
  v251(v249, v231, v250);
  v252 = *(void (**)(char *, uint64_t))(v284 + 8);
  v252(v247, v228);
  v253 = *(void (**)(char *, uint64_t))(v279 + 8);
  v253(v245, v225);
  ((void (*)(_QWORD *, uint64_t))v251)(v243, v231);
  v252(v298, v228);
  v253(v300, v225);
  ((void (*)(_QWORD *, uint64_t))v251)(v299, v231);
  v252(v303, v228);
  v253(v301, v225);
  ((void (*)(_QWORD *, uint64_t))v251)(v297, v231);
  v252(v304, v228);
  v253(v302, v225);
  ((void (*)(_QWORD *, uint64_t))v251)(v296, v231);
  v252(v269, v228);
  v253(v270, v225);
  (*(void (**)(char *, uint64_t))(v283 + 8))(v271, v268);
  (*(void (**)(char *, uint64_t))(v282 + 8))(v273, v267);
  v254 = *(void (**)(char *, uint64_t))(v280 + 8);
  v255 = v266;
  v254(v274, v266);
  v254(v275, v255);
  (*(void (**)(char *, uint64_t))(v277 + 8))(v276, v265);
  return v323;
}

uint64_t PointerReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51B8 != -1)
    swift_once(&qword_1002B51B8, sub_1001C056C);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static PointerReport.descriptor);
}

uint64_t static PointerReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51B8 != -1)
    swift_once(&qword_1002B51B8, sub_1001C056C);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static PointerReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001C19D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = PointerReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

double static PointerEvent.dispatch(report:)()
{
  char v0;
  double v1;
  char v2;
  double v3;
  uint64_t v4;
  void *RelativePointerEvent;
  id v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  sub_1001B5894(8);
  v1 = (double)v0;
  sub_1001B5894(16);
  v3 = (double)v2;
  v4 = mach_absolute_time();
  RelativePointerEvent = (void *)IOHIDEventCreateRelativePointerEvent(0, v4, 0, 0, 0, v1, v3, 0.0);
  v6 = IOHIDEventRef.__bridgedValue.getter();

  v7 = sub_1000055B0(&qword_1002B52F0);
  v8 = swift_allocObject(v7, 72, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v8 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v8 + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(v8 + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(v8 + 32) = v6;
  return result;
}

void PointerReport.delta.getter()
{
  sub_1001B5894(8);
  sub_1001B5894(16);
  sub_1001A4570();
}

void PointerReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  v0 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v0);
  v1 = sub_1001C26E0();
  sub_1001B345C(v1, COERCE_DOUBLE(0x1100000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18,
    v19);
  sub_1001C2698();
  sub_10000B338();
}

void PointerReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v4);
  v5 = sub_1001C26E0();
  sub_1001B345C(v5, COERCE_DOUBLE(0x1100000000), v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v22, v23, v24,
    v26);
  sub_1001C2698();
  HIDReport.initialize(from:)(a1, a2);
  v21 = v20;
  sub_100022AEC(a1, a2);
  if ((v21 & 1) == 0)
    sub_100022AEC(v25, v27);
  sub_10000B338();
}

void PointerReport.reportWithoutMovement.getter()
{
  uint64_t v0;
  uint64_t v1;

  PointerReport.init()();
  v1 = v0;
  sub_1001C26FC(88);
  __asm { BR              X11 }
}

void PointerReport.buttonMask.getter(uint64_t a1, unint64_t a2)
{
  sub_1001E0D24(88, a1, a2);
}

void PointerReport.buttonMask.setter(uint64_t a1)
{
  sub_1000E70EC(a1, 88);
}

void PointerReport.modifierMask.getter(uint64_t a1, unint64_t a2)
{
  sub_1001E0D24(96, a1, a2);
}

void PointerReport.modifierMask.setter(uint64_t a1)
{
  sub_1000E70EC(a1, 96);
}

void PointerReport.flags.getter(uint64_t a1, unint64_t a2)
{
  sub_10013E758(104, a1, a2);
}

void PointerReport.flags.setter(uint64_t a1)
{
  sub_1001B5188(a1, 104);
}

void sub_1001C1DE0(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  PointerReport.init()();
  *a1 = v2;
  a1[1] = v3;
  sub_1000050D4();
}

void sub_1001C1E00(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  PointerReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

uint64_t sub_1001C1E20()
{
  uint64_t v0;

  return sub_1001E2F28(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t PointerReport.x.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_1001E0D24(8, a1, a2);
  return (char)result;
}

void PointerReport.x.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 127;
  if (a1 < 127)
    v1 = a1;
  if (v1 <= -128)
    v2 = -128;
  else
    v2 = v1;
  sub_1000E70EC(v2, 8);
}

void PointerReport.x.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001B5824(a1);
  sub_1001E0D24(8, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001C1EA0(uint64_t *a1, uint64_t a2)
{
  sub_1001B4930(a1, a2, 8);
}

uint64_t PointerReport.y.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  sub_1001E0D24(16, a1, a2);
  return (char)result;
}

void PointerReport.y.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 127;
  if (a1 < 127)
    v1 = a1;
  if (v1 <= -128)
    v2 = -128;
  else
    v2 = v1;
  sub_1000E70EC(v2, 16);
}

void PointerReport.y.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001B5824(a1);
  sub_1001E0D24(16, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001C1F20(uint64_t *a1, uint64_t a2)
{
  sub_1001B4930(a1, a2, 16);
}

double PointerReport.accelX.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001B49C4(a1, a2, 24);
}

void PointerReport.accelX.setter(Swift::Double a1)
{
  sub_1001B4A00(24, a1);
}

void PointerReport.accelX.modify(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B5824(a1);
  sub_10013E758(24, v3, v4);
  *v1 = v2 / sub_1001B5834();
  sub_1001A4570();
}

void sub_1001C1F74(Swift::Double *a1, uint64_t a2)
{
  sub_1001B4A70(a1, a2, 24);
}

double PointerReport.accelY.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001B49C4(a1, a2, 56);
}

void PointerReport.accelY.setter(Swift::Double a1)
{
  sub_1001B4A00(56, a1);
}

void PointerReport.accelY.modify(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  unint64_t v4;

  sub_1001B5824(a1);
  sub_10013E758(56, v3, v4);
  *v1 = v2 / sub_1001B5834();
  sub_1001A4570();
}

void sub_1001C1FC8(Swift::Double *a1, uint64_t a2)
{
  sub_1001B4A70(a1, a2, 56);
}

void PointerReport.buttonMask.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001C26C0(a1);
  sub_1001E0D24(88, v2, v3);
  *(_BYTE *)(v1 + 8) = v4;
  sub_1000050D4();
}

void sub_1001C2000(uint64_t a1)
{
  sub_1000E70EC(*(unsigned __int8 *)(a1 + 8), 88);
  sub_1000050D4();
}

void PointerReport.modifierMask.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v2 = sub_1001C26C0(a1);
  sub_1001C26F4((uint64_t)v2, v3, v4);
  *(_BYTE *)(v1 + 8) = v5;
  sub_1000050D4();
}

void sub_1001C2050(uint64_t a1)
{
  PointerReport.modifierMask.setter(*(unsigned __int8 *)(a1 + 8));
  sub_1000050D4();
}

void PointerReport.flags.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  sub_1001C26C0(a1);
  sub_10013E758(104, v2, v3);
  *(_DWORD *)(v1 + 8) = v4;
  sub_1000050D4();
}

void sub_1001C20A0(uint64_t a1)
{
  sub_1001B5188(*(unsigned int *)(a1 + 8), 104);
  sub_1000050D4();
}

void PointerReport.accelDelta.getter(uint64_t a1)
{
  sub_1001C26EC(24, a1);
  sub_1001B5834();
  sub_1001C26EC(56, a1);
  static HIDFixed.scale.getter();
  sub_1001A4570();
}

void *PointerReport.modifiers.getter(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;

  sub_1001C26F4(a1, a1, a2);
  return KeyboardModifierMask.keyboardUsages()(v2);
}

void *KeyboardModifierMask.keyboardUsages()(unsigned __int8 a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  char v5;
  void *v6;

  v6 = &_swiftEmptySetSingleton;
  v1 = -9;
  v2 = a1;
  while (1)
  {
    v3 = v1 + 9;
    if (v1 >= 0xFFFFFFFFFFFFFFEFLL)
    {
      if (((v2 >> v3) & 1) != 0)
        sub_10011A130((uint64_t)&v5, v3 | 0xE0);
      if (v1 == -2)
        break;
    }
    ++v1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      return v6;
    }
  }
  return v6;
}

void PointerReport.modifiers.setter(uint64_t a1)
{
  uint64_t v1;

  v1 = KeyboardModifierMask.init(usages:)(a1);
  sub_1000E70EC(v1, 96);
}

uint64_t KeyboardModifierMask.init(usages:)(uint64_t result)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  unsigned int v14;
  int v15;

  v1 = 0;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v1 << 6); ; i = __clz(__rbit64(v11)) + (v1 << 6))
  {
    v13 = *(_BYTE *)(*(_QWORD *)(result + 48) + i);
    v14 = (v13 + 24);
    v15 = 1 << (v13 & 7);
    if (v14 < 0xF8)
      v15 = 0;
    v2 = v15 | v2;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v10 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v7)
      goto LABEL_27;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v1;
    if (!v11)
    {
      v1 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_27;
      v11 = *(_QWORD *)(v3 + 8 * v1);
      if (!v11)
      {
        v1 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_27;
        v11 = *(_QWORD *)(v3 + 8 * v1);
        if (!v11)
        {
          v1 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_27;
          v11 = *(_QWORD *)(v3 + 8 * v1);
          if (!v11)
          {
            v1 = v10 + 4;
            if (v10 + 4 >= v7)
              goto LABEL_27;
            v11 = *(_QWORD *)(v3 + 8 * v1);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
  }
  v12 = v10 + 5;
  if (v12 >= v7)
  {
LABEL_27:
    swift_release(result);
    return v2;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v1 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v1 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v1 >= v7)
      goto LABEL_27;
    v11 = *(_QWORD *)(v3 + 8 * v1);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

void PointerReport.modifiers.modify(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;

  v2 = sub_1001B5824(a1);
  sub_1001C26F4(v2, v3, v4);
  *v1 = KeyboardModifierMask.keyboardUsages()(v5);
  sub_1000050D4();
}

void sub_1001C2358(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = KeyboardModifierMask.init(usages:)(v2);
    PointerReport.modifierMask.setter(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = KeyboardModifierMask.init(usages:)(*a1);
    PointerReport.modifierMask.setter(v4);
    sub_1000050D4();
  }
}

_UNKNOWN **static KeyboardModifierMask.allCases.getter()
{
  return &off_1002907E8;
}

void sub_1001C23AC(_QWORD *a1@<X8>)
{
  *a1 = &off_1002907E8;
}

uint64_t sub_1001C23BC(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return sub_1001C54A0(*a1, *v1);
}

uint64_t sub_1001C23C8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1001D5E98(a1, *a2);
}

uint64_t sub_1001C23D0(unsigned __int8 *a1)
{
  return sub_1001D5EA4(*a1);
}

uint64_t sub_1001C23D8@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_1001D5E9C(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1001C2404(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return sub_1001C549C(*a1, *v1);
}

uint64_t sub_1001C2410(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return sub_1001D5EA0(*a1, *v1);
}

uint64_t sub_1001C241C(unsigned __int8 *a1)
{
  return sub_1001D5EA8(*a1);
}

unint64_t sub_1001C2428()
{
  unint64_t result;

  result = qword_1002B5438;
  if (!qword_1002B5438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PointerReport.Flags, &type metadata for PointerReport.Flags);
    atomic_store(result, (unint64_t *)&qword_1002B5438);
  }
  return result;
}

unint64_t sub_1001C2468()
{
  unint64_t result;

  result = qword_1002B5440;
  if (!qword_1002B5440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PointerReport.Flags, &type metadata for PointerReport.Flags);
    atomic_store(result, (unint64_t *)&qword_1002B5440);
  }
  return result;
}

unint64_t sub_1001C24A8()
{
  unint64_t result;

  result = qword_1002B5448;
  if (!qword_1002B5448)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PointerReport.Flags, &type metadata for PointerReport.Flags);
    atomic_store(result, (unint64_t *)&qword_1002B5448);
  }
  return result;
}

unint64_t sub_1001C24E8()
{
  unint64_t result;

  result = qword_1002B5450;
  if (!qword_1002B5450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PointerReport.Flags, &type metadata for PointerReport.Flags);
    atomic_store(result, (unint64_t *)&qword_1002B5450);
  }
  return result;
}

unint64_t sub_1001C2528()
{
  unint64_t result;

  result = qword_1002B5458;
  if (!qword_1002B5458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardModifierMask, &type metadata for KeyboardModifierMask);
    atomic_store(result, (unint64_t *)&qword_1002B5458);
  }
  return result;
}

unint64_t sub_1001C2568()
{
  unint64_t result;

  result = qword_1002B5460;
  if (!qword_1002B5460)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardModifierMask, &type metadata for KeyboardModifierMask);
    atomic_store(result, (unint64_t *)&qword_1002B5460);
  }
  return result;
}

unint64_t sub_1001C25A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5468;
  if (!qword_1002B5468)
  {
    v1 = sub_10000DCA0(&qword_1002B5470);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B5468);
  }
  return result;
}

unint64_t sub_1001C25F0()
{
  unint64_t result;

  result = qword_1002B5478;
  if (!qword_1002B5478)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardModifierMask, &type metadata for KeyboardModifierMask);
    atomic_store(result, (unint64_t *)&qword_1002B5478);
  }
  return result;
}

unint64_t sub_1001C2630()
{
  unint64_t result;

  result = qword_1002B5480;
  if (!qword_1002B5480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardModifierMask, &type metadata for KeyboardModifierMask);
    atomic_store(result, (unint64_t *)&qword_1002B5480);
  }
  return result;
}

void type metadata accessor for PointerReport.Flags()
{
  sub_10003B1DC();
}

void type metadata accessor for PointerReport()
{
  sub_10003B1DC();
}

void type metadata accessor for KeyboardModifierMask()
{
  sub_10003B1DC();
}

uint64_t sub_1001C2698()
{
  return Data._Representation.subscript.setter(5, 0);
}

uint64_t sub_1001C26B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Data._Representation.subscript.setter(a1, a2 >> 3);
}

_QWORD *sub_1001C26C0(_QWORD *result)
{
  uint64_t v1;

  *result = v1;
  return result;
}

uint64_t sub_1001C26D0(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

uint64_t sub_1001C26D8(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_1001C26E0()
{
  return __DataStorage.init(length:)(17);
}

void sub_1001C26EC(char a1, uint64_t a2)
{
  unint64_t v2;

  sub_10013E758(a1, a2, v2);
}

void sub_1001C26F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1001E0D24(96, a2, a3);
}

void sub_1001C26FC(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1001E0D24(a1, v2, v1);
}

uint64_t sub_1001C2708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001C2738(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D4618, a5);
}

uint64_t sub_1001C2714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001C2738(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D46AC, a5);
}

uint64_t sub_1001C2720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001C2780(a1, a2, a3, a4, a5);
}

uint64_t sub_1001C272C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001C2738(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D4728, a5);
}

uint64_t sub_1001C2738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  *a6 = a3;
  a6[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  return a5(a1, a2);
}

uint64_t sub_1001C2780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a3;
  a5[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

void sub_1001C27D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;

  sub_1001C02A8(a1, a2, a3, a4);
  v5 = sub_1001C54D8();
  sub_1001C54B8(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, a1, a2, v17, v18, a3, a4);
  sub_1001C54EC(v4);
  sub_100040384();
}

BOOL sub_1001C2830(char a1, unsigned __int8 a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1001C2840(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

unint64_t sub_1001C284C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001C2870(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D4728);
}

unint64_t sub_1001C2858(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001C2870(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D46AC);
}

unint64_t sub_1001C2864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001C2870(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D4618);
}

unint64_t sub_1001C2870(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  unint64_t v6;

  v6 = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  a5(a1, a2);
  LOBYTE(v6) = static Data.== infix(_:_:)(a3, a4, a3, v6);
  sub_1001C5774();
  return v6 & 1;
}

void sub_1001C28F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1001C5614(a1, a2);
  v3 = sub_1001C54D8();
  sub_1001C54B8(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  sub_1001C54EC(v2);
  sub_100040384();
}

BOOL sub_1001C2938(unsigned __int8 a1, char a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_1001C2948(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

unint64_t sub_1001C2954(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C551C(a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D4728, a2) & 1;
}

unint64_t sub_1001C297C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C551C(a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D46AC, a2) & 1;
}

unint64_t sub_1001C29A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C551C(a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D4618, a2) & 1;
}

uint64_t sub_1001C29CC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B5488);
  sub_100006FB4(v0, (uint64_t)qword_1002B5488);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1145653334, 0xE400000000000000);
}

uint64_t AppleVendorKeyboardGesture.__allocating_init()()
{
  return sub_1001C4524(AppleVendorKeyboardReport.init());
}

uint64_t AppleVendorKeyboardGesture.init()()
{
  return sub_1001C456C(AppleVendorKeyboardReport.init());
}

uint64_t _GenericKeyboardGesture.init()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 88) + 32))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), v6, v3);
  return v2;
}

uint64_t _GenericKeyboardGesture.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return v0;
}

uint64_t AppleVendorTopCaseGesture.__allocating_init()()
{
  return sub_1001C4524(AppleVendorTopCaseReport.init());
}

uint64_t AppleVendorTopCaseGesture.init()()
{
  return sub_1001C456C(AppleVendorTopCaseReport.init());
}

uint64_t ConsumerGesture.__allocating_init()()
{
  return sub_1001C4524(ConsumerReport.init());
}

uint64_t ConsumerGesture.init()()
{
  return sub_1001C456C(ConsumerReport.init());
}

uint64_t ConsumerGesture.deinit()
{
  uint64_t v0;

  sub_100022AEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t _GenericKeyboardGesture.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  _GenericKeyboardGesture.init()(v1);
  return v1;
}

uint64_t _GenericKeyboardGesture.__deallocating_deinit()
{
  uint64_t v0;

  _GenericKeyboardGesture.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t *sub_1001C2BB8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;

  sub_1001C02A8(a1, a2, a3, a4);
  sub_1001C5598();
  sub_1001C5598();
  sub_1001C54D0(a1);
  HIDReport.withUnsafeMutableBytes<A>(_:)();
  sub_1001B76FC(a1);
  sub_1001C5598();
  sub_1001C575C();
  sub_1000A3778(a3);
  sub_1001C5628(a3);
  sub_1000A3778(a3);
  sub_1001C375C(a3, a4);
  v9 = v8;
  sub_1001C5628(a3);
  sub_1001C54D0(a1);
  sub_1001C54D0(a1);
  sub_1001C5598();
  sub_1001C54D0(a1);
  HIDReport.withUnsafeMutableBytes<A>(_:)();
  sub_1000A3778(a3);
  sub_1001C54D0(a1);
  sub_1001C575C();
  sub_1001B76FC(a1);
  sub_100022AEC(a1, a2);
  sub_1001B76FC(a1);
  sub_1001C375C(a1, a2);
  v11 = v10;
  sub_1001C5774();
  sub_1001C4334(v11);
  sub_1001E3F9C(v9);
  sub_1000A37A4();
  return &v14;
}

#error "1001C2DC0: call analysis failed (funcsize=122)"

#error "1001C2FD8: call analysis failed (funcsize=181)"

#error "1001C328C: call analysis failed (funcsize=164)"

_QWORD *sub_1001C34D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, __n128);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v42 = a8;
  v33 = a7;
  v39 = a6;
  v38 = a5;
  v37 = a4;
  v43 = a2;
  v34 = a1;
  v14 = *v9;
  v15 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v32 - v20;
  v40 = *(void (**)(char *, __n128))(v15 + 16);
  v40(v17, v19);
  v22 = a1;
  v23 = v33;
  dispatch thunk of SetAlgebra.subtracting(_:)(v22, a3, v33);
  v35 = *(_QWORD *)(v14 + 80);
  v36 = *(_QWORD *)(v14 + 88);
  v55 = v35;
  v56 = a3;
  v57 = v36;
  v58 = a4;
  v59 = a5;
  v24 = v39;
  v60 = v39;
  v61 = v23;
  v25 = v42;
  v62 = v42;
  v63 = a9;
  v41 = sub_100085F50((void (*)(char *, char *))sub_1001C5400, (uint64_t)v54, a3, (uint64_t)&type metadata for KeyboardEvent, (uint64_t)&type metadata for Never, v39, (uint64_t)&protocol witness table for Never, v26);
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v21, a3);
  ((void (*)(char *, uint64_t, uint64_t))v40)(v17, v34, a3);
  dispatch thunk of SetAlgebra.subtracting(_:)(v43, a3, v23);
  v45 = v35;
  v46 = a3;
  v47 = v36;
  v48 = v37;
  v49 = v38;
  v50 = v24;
  v51 = v23;
  v52 = v25;
  v53 = a9;
  v29 = sub_100085F50((void (*)(char *, char *))sub_1001C5418, (uint64_t)v44, a3, (uint64_t)&type metadata for KeyboardEvent, (uint64_t)&type metadata for Never, v24, (uint64_t)&protocol witness table for Never, v28);
  v27(v21, a3);
  v64 = v41;
  sub_1001C4334(v29);
  v30 = sub_1001E3F9C(v64);
  swift_bridgeObjectRelease();
  return v30;
}

void sub_1001C375C(uint64_t a1, unint64_t a2)
{
  uint64_t i;

  specialized ContiguousArray.reserveCapacity(_:)(0);
  sub_10002517C(a1, a2);
  for (i = 0; !i; i = 1)
    ;
  HIDReport.offset(for:)(i + 8);
  HIDReport.mask(for:)(i + 8);
  __asm { BR              X8 }
}

void sub_1001C3A74(uint64_t a1@<X6>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t AssociatedTypeWitness;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  void *KeyboardEvent;
  id v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a1);
  v8 = dispatch thunk of HIDUsageProtocol.page.getter(AssociatedTypeWitness, a4);
  v9 = dispatch thunk of HIDUsageProtocol.usage.getter(AssociatedTypeWitness, a4);
  v10 = mach_absolute_time();
  KeyboardEvent = (void *)IOHIDEventCreateKeyboardEvent(0, v10, v8, v9, a6, 0);
  v12 = IOHIDEventRef.__bridgedValue.getter();

  *a2 = v12;
}

_QWORD *_GenericKeyboardGesture<>.dispatch(report:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE v15[24];
  _BYTE v16[24];

  sub_1001C5708();
  v4 = v3;
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v5);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v0 + *(_QWORD *)(v11 + 96);
  sub_10000B2F8(v12, (uint64_t)v16, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  v13 = sub_1001C34D4(v6, (uint64_t)v10, v7, v4, v2, v4, v2, v1, v1);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  sub_10000B2F8(v12, (uint64_t)v15, 33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v6, v7);
  swift_endAccess(v15);
  return v13;
}

_QWORD *sub_1001C3C48()
{
  return _GenericKeyboardGesture<>.dispatch(report:)();
}

_QWORD *KeyboardGesture.dispatch(keyboardReport:localCapsLockState:)(unint64_t a1, unint64_t a2, _BOOL4 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  os_log_type_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v26[8];
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD *v38;
  char v39[24];
  char v40;

  v4 = v3;
  v38 = _swiftEmptyArrayStorage;
  v37 = a3;
  sub_1001E0D24(240, a1, a2);
  if (((((v8 & 1) == 0) ^ a3) & 1) == 0)
  {
    v29 = v3;
    v40 = 57;
    __chkstk_darwin(v8);
    v26[2] = &v40;
    sub_1001C54D0(a1);
    sub_1001C4FC0((uint64_t)sub_1001C0200, (uint64_t)v26, a1, a2);
    v10 = v9;
    sub_1001B76FC(a1);
    if ((v10 & 1) == 0)
    {
      v27 = a3;
      sub_1001C54D0(a1);
      v28 = 0;
      v35 = BYTE6(a2);
      v36 = (uint64_t)a1 >> 32;
      v33 = a1 >> 16;
      v34 = a1 >> 8;
      v32 = a1 >> 24;
      v26[7] = v29 + 16;
      v31 = HIDWORD(a1);
      v30 = a1 >> 40;
      for (i = 0; !i; i = 1)
        ;
      HIDReport.offset(for:)(i + 8);
      HIDReport.mask(for:)(i + 8);
      __asm { BR              X8 }
    }
    v37 = !a3;
    if (qword_1002B51C0 != -1)
      swift_once(&qword_1002B51C0, sub_1001C29CC);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100006FB4(v11, (uint64_t)qword_1002B5488);
    v13 = (void *)sub_1001C57E8(v12);
    v15 = static os_log_type_t.default.getter(v13, v14);
    if (sub_100040394(v15))
    {
      v16 = (float *)sub_1001C57DC();
      sub_1001C54F4(v16, 1.5047e-36);
      sub_1001C5570();
      sub_1001C5670((void *)&_mh_execute_header, v17, v18, "Caps Lock pressed, toggle state: %{BOOL}d -> %{BOOL}d");
      sub_1001C56D4();
    }

    v4 = v29;
  }
  sub_10000B2F8(v4 + 16, (uint64_t)&v40, 1);
  v20 = *(_QWORD *)(v4 + 16);
  v21 = *(_QWORD *)(v4 + 24);
  sub_1001C54D0(a1);
  sub_10002517C(v20, v21);
  v22 = sub_1001C2BB8(a1, a2, v20, v21);
  sub_100022AEC(v20, v21);
  sub_1001B76FC(a1);
  sub_1001C4444((uint64_t)v22);
  v23 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_1001C54D0(a1);
  sub_1001C54EC(v23);
  v24 = v38;
  sub_10000B2F8((uint64_t)&v37, (uint64_t)v39, 0);
  return v24;
}

void sub_1001C4334(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *(_QWORD *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v4 += v2;
    swift_bridgeObjectRetain();
    *v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
    swift_bridgeObjectRelease();
    v3 = *v1;
    v8 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_13;
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v3 + 16);
  if (v8 - v9 < v2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_1001DAAE8(a1 + 32, v2, v3 + 8 * v9 + 32);
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    specialized Array._endMutation()(v13);
    return;
  }
  v10 = *(_QWORD *)(*v1 + 16);
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    *(_QWORD *)(*v1 + 16) = v12;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
}

void sub_1001C4444(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *((_QWORD *)v3 + 3) >> 1)
  {
    if (v4 <= v5)
      v8 = v4 + v2;
    else
      v8 = v4;
    v3 = sub_1001C55B0(isUniquelyReferenced_nonNull_native, v8);
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1001DAA18(a1 + 32, v2, (unint64_t)&v3[40 * v9 + 32]);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = __OFADD__(v10, v2);
  v12 = v10 + v2;
  if (!v11)
  {
    *((_QWORD *)v3 + 2) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t KeyboardGesture.__allocating_init()()
{
  return sub_1001C4524((uint64_t (*)(void))KeyboardReport.init());
}

uint64_t sub_1001C4524(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject(v1, 32, 7);
  *(_QWORD *)(v3 + 16) = a1();
  *(_QWORD *)(v3 + 24) = v4;
  return v3;
}

uint64_t KeyboardGesture.init()()
{
  return sub_1001C456C((uint64_t (*)(void))KeyboardReport.init());
}

uint64_t sub_1001C456C(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1();
  *(_QWORD *)(v1 + 24) = v2;
  return v1;
}

uint64_t _s11EnsembleHID26AppleVendorKeyboardGestureCfD_0()
{
  uint64_t v0;

  sub_100022AEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

char *sub_1001C45AC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0(&qword_1002B52F0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_1001DA778((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001C46A0(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

uint64_t sub_1001C46A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_1000055B0(&qword_1002B58A0);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1001C47BC()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  sub_1001C5708();
  v1 = v0 >> 62;
  sub_1001C02A8(v2, v3, v4, v0);
  for (i = 0; !i; i = 1)
    ;
  sub_1001C56C4();
  sub_1001C5600();
  __asm { BR              X8 }
}

void sub_1001C4A54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  _BYTE v19[7];

  sub_1001C02A8(a1, a2, a3, a4);
  v5 = 0;
  while (1)
  {
    while (1)
    {
      sub_1001C5720(8 * v5 + 8);
      if (v6 <= 0x21u && ((1 << v6) & 0x30003001ELL) != 0)
        break;
      v16 = v5 < 1;
      v5 = 1;
      if (!v16)
      {
LABEL_11:
        sub_1001B768C();
        v17 = 0;
        goto LABEL_14;
      }
    }
    v15 = sub_1001C56E4(v6, v7, v8, v9, v10, v11, v12, v13, v18, *(int *)v19, *(__int16 *)&v19[4], v19[6], v6);
    if (v4)
    {
      sub_1001B768C();
      goto LABEL_14;
    }
    if ((v15 & 1) != 0)
      break;
    v16 = v5++ < 1;
    if (!v16)
      goto LABEL_11;
  }
  sub_1001B768C();
  v17 = 1;
LABEL_14:
  sub_1001C5714(v17);
  sub_1001C55E8();
}

void sub_1001C4B20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v20[7];

  sub_1001C02A8(a1, a2, a3, a4);
  v5 = 0;
  for (i = 0; (i - 0x1000000000000000) >> 61 == 7; ++i)
  {
    if (__OFADD__(v5, 8))
      goto LABEL_16;
    sub_1001C5720(v5 + 8);
    sub_1001C56B4();
    if (!v16 & v15)
    {
      if (i > 2)
      {
LABEL_11:
        sub_1001B768C();
        v18 = 0;
LABEL_14:
        sub_1001C5714(v18);
        sub_1001C55E8();
        return;
      }
    }
    else
    {
      v17 = sub_1001C56E4(v7, v8, v9, v10, v11, v12, v13, v14, v19, *(int *)v20, *(__int16 *)&v20[4], v20[6], v7);
      if (v4)
      {
        sub_1001B768C();
        goto LABEL_14;
      }
      if ((v17 & 1) != 0)
      {
        sub_1001B768C();
        v18 = 1;
        goto LABEL_14;
      }
      if (i >= 3)
        goto LABEL_11;
    }
    v5 += 8;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_1001C4BE8()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1001C5708();
  v1 = v0 >> 62;
  sub_1001C02A8(v2, v3, v4, v0);
  sub_1001C56C4();
  sub_1001C5600();
  __asm { BR              X8 }
}

void sub_1001C4E8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  __int16 v7;
  uint64_t (*v8)(_QWORD);
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  __int16 v15;

  v5 = (uint64_t (*)(_QWORD))a1;
  sub_1001C02A8(a1, a2, a3, a4);
  v6 = 0;
  while ((unint64_t)(v6 - 0x800000000000000) >> 60 == 15)
  {
    sub_1001C572C((16 * v6) | 8);
    if (!v7)
    {
      v8 = v5;
      v9 = 16 * v6 + 24;
      while (v6 <= 2)
      {
        v10 = v6;
        v11 = v6 - 0x7FFFFFFFFFFFFFFLL;
        if (v11 >> 60 != 15)
        {
          __break(1u);
          goto LABEL_17;
        }
        sub_1001C572C(v9);
        v9 += 16;
        v6 = v11 + 0x800000000000000;
        if (v7)
        {
          v6 = v10 + 1;
          v5 = v8;
          goto LABEL_9;
        }
      }
LABEL_12:
      sub_1001B768C();
      v14 = 0;
LABEL_13:
      sub_1001C5714(v14);
      return;
    }
LABEL_9:
    v15 = v7;
    v12 = v5(&v15);
    if (v4)
    {
      sub_1001B768C();
      goto LABEL_13;
    }
    if ((v12 & 1) != 0)
    {
      sub_1001B768C();
      v14 = 1;
      goto LABEL_13;
    }
    if (v6++ >= 3)
      goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

void sub_1001C4FC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int8 i;

  v4 = a4 >> 62;
  sub_10002517C(a3, a4);
  for (i = 0; !i; i = 1)
    ;
  HIDReport.offset(for:)(i + 8);
  HIDReport.mask(for:)(i + 8);
  __asm { BR              X8 }
}

uint64_t sub_1001C52C4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t type metadata accessor for AppleVendorKeyboardGesture(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B54E8, (uint64_t)&nominal type descriptor for AppleVendorKeyboardGesture);
}

uint64_t type metadata accessor for AppleVendorTopCaseGesture(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B55C0, (uint64_t)&nominal type descriptor for AppleVendorTopCaseGesture);
}

uint64_t type metadata accessor for ConsumerGesture(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B5698, (uint64_t)&nominal type descriptor for ConsumerGesture);
}

uint64_t sub_1001C530C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for _GenericKeyboardGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GenericKeyboardGesture);
}

uint64_t type metadata accessor for KeyboardGesture(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B57F0, (uint64_t)&nominal type descriptor for KeyboardGesture);
}

uint64_t sub_1001C539C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 136);
}

uint64_t sub_1001C53D0()
{
  return sub_1001B2B20();
}

uint64_t sub_1001C53E8()
{
  return sub_1001B2C54();
}

void sub_1001C5400(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  sub_1001C5430(a1, 0, a2);
}

void sub_1001C5418(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  sub_1001C5430(a1, 1u, a2);
}

void sub_1001C5430(uint64_t a1@<X1>, unsigned int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t *v3;

  sub_1001C3A74(v3[7], a3, v3[9], v3[10], a1, a2);
}

uint64_t sub_1001C5474()
{
  return sub_1001C53D0();
}

uint64_t sub_1001C5488()
{
  return sub_1001C53E8();
}

uint64_t sub_1001C54A8()
{
  return specialized ContiguousArray.reserveCapacity(_:)(0);
}

uint64_t sub_1001C54B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  return static Data.== infix(_:_:)(a15, a16, v17, v16);
}

uint64_t sub_1001C54D0(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001C54D8()
{
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

uint64_t sub_1001C54EC(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001C54F4(float *a1, float a2)
{
  char v2;
  uint64_t v3;

  *a1 = a2;
  *(_DWORD *)(v3 - 136) = v2 & 1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v3 - 132, a1 + 1, a1 + 2);
}

unint64_t sub_1001C551C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void (*a3)(uint64_t, uint64_t)@<X4>, unint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1001C2870(a1, a2, v4, a4, a3);
}

uint64_t sub_1001C5530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

id sub_1001C5548()
{
  return IOHIDEventRef.__bridgedValue.getter();
}

uint64_t sub_1001C5550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 136) = v0;
  *(_QWORD *)(v1 + 16) = v3;
  return sub_100025A50((__int128 *)(v6 - 136), v1 + 40 * v5 + 32);
}

uint64_t sub_1001C5570()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + 8) = 1024;
  *(_DWORD *)(v3 - 136) = v0;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v1, v2 + 10, v2 + 14);
}

uint64_t sub_1001C5590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return IOHIDEventCreateKeyboardEvent(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_1001C5598()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

void sub_1001C55A4(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100128154(a1, v1, v2);
}

char *sub_1001C55B0(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_1001C45AC(a1, a2, 1, v2);
}

void sub_1001C55BC()
{
  uint64_t v0;

  sub_1001C4334(v0);
}

uint64_t sub_1001C55CC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1001C55D8(uint64_t a1)
{
  return specialized ContiguousArray._endMutation()(a1);
}

uint64_t sub_1001C55E0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_1001C5600()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

uint64_t sub_1001C5614(uint64_t result, unint64_t a2)
{
  return sub_10002517C(result, a2);
}

uint64_t sub_1001C5628(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

_QWORD *sub_1001C5630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_1001E3F9C(a13);
}

uint64_t sub_1001C563C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1001C5648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a11 + 16));
}

uint64_t sub_1001C565C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(a11 + 16));
}

void sub_1001C5670(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 0xEu);
}

uint64_t sub_1001C5684()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001C5694()
{
  uint64_t v0;
  uint64_t v1;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

uint64_t sub_1001C56A4()
{
  uint64_t v0;
  uint64_t v1;

  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

Swift::Int sub_1001C56C4()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

uint64_t sub_1001C56D4()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1001C56E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t (*v13)(char *);

  return v13(&a13);
}

uint64_t sub_1001C56F0()
{
  return __DataStorage._offset.getter();
}

EnsembleHID::AppleVendorTopCaseUsage_optional sub_1001C56FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  EnsembleHID::AppleVendorTopCaseUsage v11;

  return AppleVendorTopCaseReport.remove(_:)(v11);
}

uint64_t sub_1001C5714@<X0>(char a1@<W8>)
{
  return a1 & 1;
}

void sub_1001C5720(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_100127CC4(a1, v2, v1);
}

void sub_1001C572C(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_100128154(a1, v2, v1);
}

uint64_t sub_1001C5738()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1001C5744()
{
  return __DataStorage._offset.getter();
}

EnsembleHID::AppleVendorTopCaseUsage_optional sub_1001C5750(EnsembleHID::AppleVendorTopCaseUsage with)
{
  return AppleVendorTopCaseReport.update(with:)(with);
}

uint64_t sub_1001C575C()
{
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

void sub_1001C5768(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100127CC4(a1, v1, v2);
}

uint64_t sub_1001C5774()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1001C5780()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1001C578C()
{
  return 0;
}

uint64_t sub_1001C57A0()
{
  return 0;
}

uint64_t sub_1001C57B4()
{
  return 0;
}

uint64_t sub_1001C57C8()
{
  return 0;
}

uint64_t sub_1001C57DC()
{
  return swift_slowAlloc(14, -1);
}

uint64_t sub_1001C57E8(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

void sub_1001C57F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HIDUniversalSenderID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
    sub_1000E0E9C(a2, (uint64_t)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    v15 = *(unsigned __int8 *)(v12 + 80);
    v16 = (v15 + 24) & ~v15;
    v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = swift_allocObject(&unk_100292670, v17 + 8, v15 | 7);
    *(_QWORD *)(v18 + 16) = v2;
    sub_1000E0EE0((uint64_t)v14, v18 + v16);
    *(_QWORD *)(v18 + v17) = a1;
    aBlock[4] = sub_1001C806C;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E610;
    aBlock[3] = &unk_100292688;
    v19 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter(v20);
    v27 = _swiftEmptyArrayStorage;
    v21 = sub_10003224C();
    v22 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    v23 = sub_10003228C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v5, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
    swift_release();
  }
}

uint64_t sub_1001C5A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1001D6E24(a2);
  if (v10
    && (v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service),
        swift_retain(),
        swift_release(),
        v11))
  {
    swift_bridgeObjectRetain();
    sub_1001E4338(v12, (void (*)(void **__return_ptr, _QWORD *))sub_1001C5D80);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    sub_1001C7CA0(a1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, (uint64_t)v9);
    v14 = type metadata accessor for Logger(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v14) == 1)
    {
      return sub_1001C7CE8((uint64_t)v9);
    }
    else
    {
      v15 = sub_1000E0E9C(a2, (uint64_t)v6);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter();
      v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        v34 = v18;
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v33 = v20;
        v38 = v20;
        *(_DWORD *)v19 = 136315138;
        v32 = v19 + 4;
        v21 = UUID.uuidString.getter(v20);
        v23 = sub_1000599D0(8, v21, v22);
        v24 = static String._fromSubstring(_:)(v23);
        v26 = v25;
        swift_bridgeObjectRelease();
        v36 = v24;
        v37 = v26;
        v27._countAndFlagsBits = 58;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        v35 = *(_QWORD *)&v6[*(int *)(v4 + 20)];
        v28 = sub_100168584();
        v29._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v35, 16, 0, &type metadata for UInt64, v28);
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v36 = sub_100006FCC(v36, v37, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v32);
        swift_bridgeObjectRelease();
        sub_1000E0F24((uint64_t)v6);
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v34, "%s: virtual service has no active service; dropping events",
          v19,
          0xCu);
        v30 = v33;
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        sub_1000E0F24((uint64_t)v6);
      }
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v9, v14);
    }
  }
}

void sub_1001C5D84()
{
  sub_1001C5DBC();
}

void sub_1001C5DA0()
{
  sub_1001C5DBC();
}

void sub_1001C5DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[6];

  sub_10002626C();
  v39 = v3;
  v36 = v4;
  v37 = v5;
  v34 = v7;
  v35 = v6;
  v8 = v0;
  v10 = v9;
  v42 = *(_QWORD *)(type metadata accessor for DispatchWorkItemFlags(0) - 8);
  sub_1000262EC();
  __chkstk_darwin(v11);
  v12 = sub_1000D945C();
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  sub_1000262EC();
  __chkstk_darwin(v13);
  sub_10000E478();
  v14 = sub_1001C82B4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v8 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
  v18 = sub_1001C8330();
  sub_1000E0E9C(v18, v19);
  v20 = *(unsigned __int8 *)(v15 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(v34, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v8;
  sub_1000E0EE0((uint64_t)v17, v24 + v21);
  *(_QWORD *)(v24 + v22) = v35;
  v25 = (uint64_t *)(v24 + v23);
  v26 = v36;
  *v25 = v10;
  v25[1] = v26;
  v44[4] = v37;
  v44[5] = v24;
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 1107296256;
  v44[2] = sub_10000E610;
  v44[3] = v39;
  v27 = _Block_copy(v44);
  sub_10002517C(v10, v26);
  swift_retain();
  v28 = sub_1000088D0();
  static DispatchQoS.unspecified.getter(v28);
  v43 = _swiftEmptyArrayStorage;
  v29 = sub_10003224C();
  sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10003228C();
  v30 = sub_1001C82E0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v30, v31, v32, v33, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v27);
  _Block_release(v27);
  sub_10016AEF0(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v2, v41);
  swift_release();
  sub_10000E4E0();
}

void sub_1001C5FB4()
{
  sub_1001C5DBC();
}

void sub_1001C5FD0()
{
  sub_1001C5DBC();
}

void sub_1001C5FEC()
{
  sub_1001C5DBC();
}

void sub_1001C6008()
{
  sub_1001C5DBC();
}

void sub_1001C6024()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  unint64_t v37;
  Swift::String v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = sub_1001C82B4();
  sub_1000262EC();
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000055B0(&qword_1002AE160);
  sub_1000262EC();
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1001D6E24(v9);
  if (!v19)
  {
LABEL_9:
    sub_1001C7CA0(v11 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, (uint64_t)v18);
    v24 = type metadata accessor for Logger(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v24) == 1)
    {
      sub_1001C7CE8((uint64_t)v18);
    }
    else
    {
      v25 = sub_1000E0E9C(v9, (uint64_t)v15);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)sub_10000797C(12);
        v29 = sub_10000797C(32);
        v44 = (uint64_t (*)(uint64_t, uint64_t))v29;
        v48 = v29;
        *(_DWORD *)v28 = 136315138;
        v42 = v28 + 4;
        v43 = v28;
        v30 = UUID.uuidString.getter(v29);
        v32 = sub_1000599D0(8, v30, v31);
        v33 = static String._fromSubstring(_:)(v32);
        v35 = v34;
        swift_bridgeObjectRelease();
        v46 = v33;
        v47 = v35;
        v36._countAndFlagsBits = 58;
        v36._object = (void *)0xE100000000000000;
        String.append(_:)(v36);
        KeyPath = *(_QWORD *)&v15[*(int *)(v12 + 20)];
        v37 = sub_100168584();
        v38._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&KeyPath, 16, 0, &type metadata for UInt64, v37);
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v46 = sub_100006FCC(v46, v47, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v42);
        swift_bridgeObjectRelease();
        sub_1000E0F24((uint64_t)v15);
        v39 = v43;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: no virtual service; dropping events", v43, 0xCu);
        v40 = (uint64_t)v44;
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        sub_100007958(v40);
        sub_100007958((uint64_t)v39);

      }
      else
      {

        sub_1000E0F24((uint64_t)v15);
      }
      sub_1000850C0((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8));
    }
    goto LABEL_17;
  }
  v44 = v1;
  v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
  if (!v20)
  {
    sub_1000955CC();
    goto LABEL_9;
  }
  v48 = v19;
  swift_retain();
  swift_getAtKeyPath(&v48, v7);
  v48 = v7;
  KeyPath = swift_getKeyPath(&unk_10022D710);
  v21 = sub_1000055B0(&qword_1002B58A8);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(&v48, &KeyPath, v21, &protocol witness table for AnyKeyPath);
  swift_release();
  if ((v22 & 1) != 0 && (*(_BYTE *)(v20 + 136) & 1) == 0)
  {
    sub_1000955CC();
    swift_release();
  }
  else
  {
    v23 = v44(v5, v3);
    if (*(_QWORD *)(v23 + 16))
      sub_1001E4338(v23, (void (*)(void **__return_ptr, _QWORD *))sub_1001C5D80);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000955CC();
  }
  swift_release();
LABEL_17:
  sub_10000E4E0();
}

uint64_t sub_1001C63C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  unint64_t v40;
  Swift::String v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  unint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v10 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1001D6E24(a2);
  if (!v16)
  {
LABEL_8:
    sub_1001C7CA0(a1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, (uint64_t)v15);
    v26 = type metadata accessor for Logger(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v15, 1, v26) == 1)
      return sub_1001C7CE8((uint64_t)v15);
    v28 = sub_1000E0E9C(a2, (uint64_t)v12);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v47 = v32;
      v51 = v32;
      *(_DWORD *)v31 = 136315138;
      v45 = v31 + 4;
      v46 = v31;
      v33 = UUID.uuidString.getter(v32);
      v35 = sub_1000599D0(8, v33, v34);
      v36 = static String._fromSubstring(_:)(v35);
      v38 = v37;
      swift_bridgeObjectRelease();
      v49 = v36;
      v50 = v38;
      v39._countAndFlagsBits = 58;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      KeyPath = *(_QWORD *)&v12[*(int *)(v10 + 20)];
      v40 = sub_100168584();
      v41._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&KeyPath, 16, 0, &type metadata for UInt64, v40);
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v49 = sub_100006FCC(v49, v50, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v45);
      swift_bridgeObjectRelease();
      sub_1000E0F24((uint64_t)v12);
      v42 = v46;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: no virtual service; dropping events", v46, 0xCu);
      v43 = v47;
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      sub_1000E0F24((uint64_t)v12);
    }
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v15, v26);
  }
  v17 = v16;
  v47 = a5;
  v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
  if (!v18)
  {
    swift_release();
    goto LABEL_8;
  }
  v51 = v16;
  swift_retain();
  swift_getAtKeyPath(&v51, a3);
  v51 = a3;
  KeyPath = swift_getKeyPath(&unk_10022D710);
  v19 = sub_1000055B0(&qword_1002B58A8);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(&v51, &KeyPath, v19, &protocol witness table for AnyKeyPath);
  swift_release();
  if ((v20 & 1) != 0 && (*(_BYTE *)(v18 + 136) & 1) == 0)
  {
    swift_release();
    swift_release();
  }
  else
  {
    v21 = v49;
    v22 = *(void **)(v17 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client);
    if (v22)
    {
      v23 = v47;
      sub_10002517C(a4, v47);
      swift_retain();
      v24 = v22;
      v25 = sub_1001C6820(a4, v23, v24, v21, v18);
      sub_100022AEC(a4, v23);

      swift_release();
    }
    else
    {
      v25 = sub_1001E42A0(a4, v47);
    }
    if (*(_QWORD *)(v25 + 16))
      sub_1001E4338(v25, (void (*)(void **__return_ptr, _QWORD *))sub_1001C5D80);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1001C6820(unint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];
  unsigned __int8 v19;

  v17 = a3;
  v8 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v8);
  v19 = 0;
  v9 = *(NSObject **)(a5 + 144);
  v10 = swift_allocObject(&unk_100292760, 32, 7);
  *(_QWORD *)(v10 + 16) = &v19;
  *(_QWORD *)(v10 + 24) = a5;
  v11 = swift_allocObject(&unk_100292788, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001C80D8;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1000252CC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001C6AC4;
  aBlock[3] = &unk_1002927A0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v11, "", 106, 74, 28, 1);
  result = swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v14 = KeyboardGesture.dispatch(keyboardReport:localCapsLockState:)(a1, a2, v19);
    v16 = v15 & 1;
    if (v19 != (_DWORD)v16)
      HIDVirtualService.setClientCapsLockEnaged(_:client:)(v16, v17);
    swift_release();
    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_1001C6A98(BOOL *a1)
{
  uint64_t result;

  result = BKSHIDServicesIsCapsLockLightOn();
  *a1 = (_DWORD)result != 0;
  return result;
}

uint64_t sub_1001C6AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

unint64_t sub_1001C6AE4()
{
  return 0xD000000000000019;
}

uint64_t sub_1001C6B00(uint64_t a1, unint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, unint64_t))
{
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];

  v8 = HIDReport.storage.getter(a1, a2);
  result = a5(v8);
  if (v10 >> 60 != 15)
  {
    v11 = result;
    v12 = v10;
    v14[0] = result;
    v14[1] = v10;
    a3(v14);
    return a6(v11, v12);
  }
  return result;
}

void HIDVirtualServicePool.sendReport(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t (*v34)(uint64_t);
  uint64_t (*v35)(uint64_t, unint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  __int16 v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  sub_10002626C();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  sub_1000055B0(&qword_1002AE160);
  sub_1000262EC();
  __chkstk_darwin(v28);
  sub_10000E478();
  sub_100140EA0();
  sub_1001413A4();
  v30 = v29;
  sub_100048C38();
  if ((v30 & 0x100) != 0)
  {
LABEL_4:
    sub_1001C7CA0(v20 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, v21);
    v36 = type metadata accessor for Logger(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v21, 1, v36) == 1)
    {
      sub_1001C7CE8(v21);
    }
    else
    {
      sub_100140EA0();
      v37 = sub_100140EA0();
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)sub_10000797C(5);
        *(_DWORD *)v40 = 16777472;
        sub_100140EA0();
        sub_1001413A4();
        v42 = v41;
        sub_100048C38();
        sub_100048C38();
        if ((v42 & 0x100) != 0)
          v43 = 0;
        else
          v43 = v42;
        v57 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &a9, v40 + 4);
        sub_100048C38();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "unexpected report ID: 0x%hhx", v40, 5u);
        sub_100007958((uint64_t)v40);

      }
      else
      {
        sub_100048C38();

        sub_100048C38();
      }
      sub_1000850C0(v21, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8));
    }
  }
  else
  {
    switch((char)v30)
    {
      case 1:
        sub_1001C8228();
        __chkstk_darwin(v31);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7E1C;
        v34 = (uint64_t (*)(uint64_t))KeyboardReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 2:
        sub_1001C8228();
        __chkstk_darwin(v44);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7E54;
        v34 = (uint64_t (*)(uint64_t))ConsumerReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 3:
        sub_1001C8228();
        __chkstk_darwin(v45);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7EC4;
        v34 = (uint64_t (*)(uint64_t))AppleVendorKeyboardReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 4:
        sub_1001C8228();
        __chkstk_darwin(v46);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7E8C;
        v34 = (uint64_t (*)(uint64_t))AppleVendorTopCaseReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 5:
        sub_1001C8228();
        __chkstk_darwin(v47);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D80;
        v34 = (uint64_t (*)(uint64_t))PointerReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 7:
        sub_1001C8228();
        __chkstk_darwin(v48);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D38;
        v34 = (uint64_t (*)(uint64_t))ScrollReport.init(_:);
        v35 = sub_100022AD8;
        break;
      case 9:
        sub_1001C8228();
        __chkstk_darwin(v49);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7DE4;
        v34 = (uint64_t (*)(uint64_t))DigitizerReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 11:
        sub_1001C8228();
        __chkstk_darwin(v50);
        sub_1001C8214();
        v33 = sub_1001C7DB8;
        v34 = (uint64_t (*)(uint64_t))DockSwipeReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 12:
        sub_1001C8228();
        __chkstk_darwin(v51);
        sub_1001C8214();
        v33 = sub_1001C7DB8;
        v34 = (uint64_t (*)(uint64_t))FluidTouchGestureReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 13:
        sub_1001C8228();
        __chkstk_darwin(v52);
        sub_1001C8214();
        v33 = sub_1001C7DB8;
        v34 = (uint64_t (*)(uint64_t))NavigationSwipeReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 14:
        sub_1001C8228();
        __chkstk_darwin(v53);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D28;
        v34 = (uint64_t (*)(uint64_t))ZoomToggleReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 15:
        sub_1001C8228();
        __chkstk_darwin(v54);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D70;
        v34 = (uint64_t (*)(uint64_t))ScaleReport.init(_:);
        v35 = sub_100022AD8;
        break;
      case 16:
        sub_1001C8228();
        __chkstk_darwin(v55);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D78;
        v34 = (uint64_t (*)(uint64_t))RotationReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      case 17:
        sub_1001C8228();
        __chkstk_darwin(v56);
        sub_1001C8214();
        v33 = (uint64_t (*)())sub_1001C7D30;
        v34 = (uint64_t (*)(uint64_t))TranslationReport.init(_:);
        v35 = sub_1001C81C4;
        break;
      default:
        goto LABEL_4;
    }
    sub_1001C6B00(v27, v25, (void (*)(_QWORD *))v33, v32, v34, v35);
  }
  sub_10000E4E0();
}

uint64_t HIDVirtualServicePool.sendReport(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D650);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D670);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D690);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D6B0);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D6D0);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D6F0);
}

{
  return sub_1001C7384(a1, a2, a3, (uint64_t)&unk_10022D710);
}

void HIDVirtualServicePool.sendReport(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001C57F4((uint64_t)_swiftEmptyArrayStorage, a3);
}

void sub_1001C70C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIDVirtualServicePool.sendReport(_:from:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a3);
}

void HIDVirtualServicePool.sendReport(_:from:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1001C714C(a1, a2, a3, (void (*)(_QWORD, uint64_t, _QWORD, double, double, double))&_IOHIDEventCreateRotationEvent, (uint64_t)&type metadata for RotationEvent, (uint64_t)&protocol witness table for RotationEvent);
}

{
  sub_1001C714C(a1, a2, a3, (void (*)(_QWORD, uint64_t, _QWORD, double, double, double))&_IOHIDEventCreateScaleEvent, (uint64_t)&type metadata for ScaleEvent, (uint64_t)&protocol witness table for ScaleEvent);
}

void sub_1001C7108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIDVirtualServicePool.sendReport(_:from:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a3);
}

void sub_1001C714C(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, _QWORD, double, double, double), uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v12 = sub_1000E6BC4();
  v13 = sub_10013F740();
  v14 = sub_1000E6C3C();
  v15 = sub_1000E6C00();
  HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, a1, a2, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v12, v13, v14, v15);
  v17 = v16;
  sub_100127CC4(8, a1, a2);
  HIDEventFlags.phase.setter(v18 & 0xFFFFFF8F);
  v19 = mach_absolute_time();
  a4(0, v19, 0, 0.0, 0.0, v17);
  v20 = sub_1001C5548();

  v21 = sub_1000055B0(&qword_1002B52F0);
  v22 = sub_1001C82FC(v21);
  *(_OWORD *)(v22 + 16) = xmmword_10021BBA0;
  v23 = v20;
  v24 = mach_absolute_time();
  sub_1001C8234(v24);
  v25 = sub_1001C5548();

  v26 = sub_1001C8330();
  HIDEventProtocol.__bridgedValue.getter(v26, v27);
  v29 = v28;
  HIDEventProtocol.__bridgedValue.getter(a5, a6);
  v31 = v30;
  sub_1001C82D4((uint64_t)v29);

  *(_QWORD *)(v22 + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(v22 + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(v22 + 32) = v25;

  sub_1001C57F4(v22, a3);
  swift_bridgeObjectRelease();
}

uint64_t sub_1001C7304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(a4);
  sub_1001C8308();
  return sub_1001C8258(KeyPath);
}

uint64_t sub_1001C7384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(a4);
  sub_1001C8308();
  return sub_1001C8258(KeyPath);
}

void sub_1001C73DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *TranslationEvent;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *RelativePointerEvent;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = sub_1000E6BC4();
  v7 = sub_10013F740();
  v8 = sub_1000E6C3C();
  v9 = sub_1000E6C00();
  HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, v4, v5, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v6, v7, v8, v9);
  HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 32, v4, v5, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v6, v7, v8, v9);
  sub_100127CC4(8, v4, v5);
  HIDEventFlags.phase.setter(v10 & 0xFFFFFF8F);
  v11 = static ReportID.appleVendorTopCase.getter();
  v12 = mach_absolute_time();
  TranslationEvent = (void *)IOHIDEventCreateTranslationEvent(0, v12, v11);
  v14 = IOHIDEventRef.__bridgedValue.getter();

  v15 = sub_1000055B0(&qword_1002B52F0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021BBA0;
  v17 = v14;
  v18 = mach_absolute_time();
  RelativePointerEvent = (void *)IOHIDEventCreateRelativePointerEvent(0, v18, 0, 0, 0, 0.0, 0.0, 0.0);
  v20 = IOHIDEventRef.__bridgedValue.getter();

  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
  v22 = v21;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for TranslationEvent, (uint64_t)&protocol witness table for TranslationEvent);
  v24 = v23;
  IOHIDEventAppendEvent(v22, v23, 0);

  *(_QWORD *)(v16 + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(v16 + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(v16 + 32) = v20;

  sub_1001C57F4(v16, a3);
  swift_bridgeObjectRelease();
}

void HIDVirtualServicePool.sendReport(_:from:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  sub_1000E6BC4();
  v4 = sub_10013F740();
  v5 = sub_1000E6C3C();
  v6 = sub_1000E6C00();
  v7 = sub_1001C8330();
  sub_1001C82BC(v7, v8, 16, v9, v10, v11, v12, v13, v4, v5, v6);
  v14 = sub_1001C8330();
  sub_1001C82BC(v14, v15, 32, v16, v17, v18, v19, v20, v4, v5, v6);
  sub_100127CC4(8, a1, a2);
  HIDEventFlags.phase.setter(v21 & 0xFFFFFF8F);
  v22 = static ReportID.appleVendorTopCase.getter();
  v23 = mach_absolute_time();
  IOHIDEventCreateTranslationEvent(0, v23, v22);
  v24 = sub_1001C5548();

  v25 = sub_1000055B0(&qword_1002B52F0);
  v26 = sub_1001C82FC(v25);
  *(_OWORD *)(v26 + 16) = xmmword_10021BBA0;
  v27 = v24;
  v28 = mach_absolute_time();
  sub_1001C8234(v28);
  v29 = sub_1001C5548();

  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
  v31 = v30;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for TranslationEvent, (uint64_t)&protocol witness table for TranslationEvent);
  v33 = v32;
  sub_1001C82D4((uint64_t)v31);

  *(_QWORD *)(v26 + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(v26 + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(v26 + 32) = v29;

  sub_1001C8318(v26);
  swift_bridgeObjectRelease();
}

double sub_1001C77D0()
{
  return HIDVirtualServicePool.sendReport(_:from:)();
}

double HIDVirtualServicePool.sendReport(_:from:)()
{
  void *v0;
  uint64_t v1;
  id v2;
  int v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v1 = mach_absolute_time();
  IOHIDEventCreateZoomToggleEvent(0, v1, 0, 0);
  v2 = sub_1001C5548();

  v3 = static ReportID.appleVendorKeyboard.getter();
  v4 = mach_absolute_time();
  v5.n128_u64[0] = 0;
  v6.n128_u64[0] = 0;
  v7.n128_u64[0] = 0;
  v8 = DigitizerEvent.init(time:digitizerType:digitizerEventMask:generationCount:index:identity:point:range:touch:flags:)(v4, v3, 0, 0, 0, 0, 0, 0, v5, v6, v7, 0);
  v9 = v2;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
  v11 = v10;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ZoomToggleEvent, (uint64_t)&protocol witness table for ZoomToggleEvent);
  v13 = v12;
  sub_1001C82D4((uint64_t)v11);

  v14 = sub_1000055B0(&qword_1002B52F0);
  v15 = sub_1001C82FC(v14);
  *(_OWORD *)(v15 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v15 + 56) = &type metadata for DigitizerEvent;
  *(_QWORD *)(v15 + 64) = &protocol witness table for DigitizerEvent;
  *(_QWORD *)(v15 + 32) = v8;

  sub_1001C8318(v15);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001C7934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDVirtualServicePool.sendReport(_:from:)(a1, a2, a3);
}

uint64_t sub_1001C7954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDVirtualServicePool.sendReport(_:from:)(a1, a2, a3);
}

uint64_t sub_1001C7974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDVirtualServicePool.sendReport(_:from:)(a1, a2, a3);
}

uint64_t sub_1001C7994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDVirtualServicePool.sendReport(_:from:)(a1, a2, a3);
}

uint64_t sub_1001C79B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDVirtualServicePool.sendReport(_:from:)(a1, a2, a3);
}

#error "1001C79E4: call analysis failed (funcsize=8)"

Swift::Void __swiftcall HIDVirtualServicePool.resetGestureState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  sub_10002626C();
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = sub_1000D945C();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000E478();
  v13[4] = sub_1001C7EFC;
  v14 = v0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10000E610;
  v13[3] = &unk_100292560;
  v6 = _Block_copy(v13);
  v7 = sub_1000088D0();
  static DispatchQoS.unspecified.getter(v7);
  v8 = sub_10003224C();
  sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10003228C();
  v9 = sub_1001C82E0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v9, v10, v11, v12, v8);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1);
  _Block_release(v6);
  sub_10016AEF0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1000850C0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_1001C7B30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v2 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C7CA0(a1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, (uint64_t)v4);
  v5 = type metadata accessor for Logger(0);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v5);
  if ((_DWORD)v6 == 1)
  {
    sub_1001C7CE8((uint64_t)v4);
  }
  else
  {
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.default.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Gestures reset for each service", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  DigitizerReport.init()();
  v12 = v11;
  v14 = v13;
  swift_retain();
  sub_10002517C(v12, v14);
  sub_1001D6EA4();
  return sub_100022AEC(v12, v14);
}

uint64_t sub_1001C7CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AE160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C7CE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002AE160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1001C7D28()
{
  return sub_1001C77D0();
}

void sub_1001C7D30(uint64_t *a1)
{
  uint64_t v1;

  sub_1001C73DC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001C7D38(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D710);
}

void sub_1001C7D70(uint64_t a1)
{
  uint64_t v1;

  sub_1001C7108(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001C7D78(uint64_t a1)
{
  uint64_t v1;

  sub_1001C70C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001C7D80(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D6F0);
}

void sub_1001C7DBC()
{
  uint64_t v0;

  sub_1001C57F4((uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 24));
  sub_1000050D4();
}

uint64_t sub_1001C7DE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D6D0);
}

uint64_t sub_1001C7E1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D6B0);
}

uint64_t sub_1001C7E54(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D690);
}

uint64_t sub_1001C7E8C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D670);
}

uint64_t sub_1001C7EC4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C7304(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_10022D650);
}

uint64_t sub_1001C7EFC()
{
  uint64_t v0;

  return sub_1001C7B30(v0);
}

uint64_t sub_1001C7F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C7F14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001C7F1C()
{
  sub_1001C6024();
}

void sub_1001C7F40()
{
  sub_1001C6024();
}

void sub_1001C7F64()
{
  sub_1001C6024();
}

uint64_t sub_1001C7F88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return sub_1001C63C4(a1, a2, a3, *a4, a4[1]);
}

void sub_1001C7F94()
{
  sub_1001C6024();
}

void sub_1001C7FB8()
{
  sub_1001C6024();
}

void sub_1001C7FDC()
{
  sub_1001C6024();
}

uint64_t sub_1001C8004()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7FDC);
}

uint64_t sub_1001C8014()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7FB8);
}

uint64_t sub_1001C8020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001C82B4();
  sub_1001C826C();
  swift_release();
  v3 = sub_1001C8324();
  sub_1000C2408(v3);
  swift_bridgeObjectRelease();
  return sub_1000265A0(v1, v2 + 8, v0);
}

uint64_t sub_1001C806C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1001C82B4();
  sub_1001C8294();
  return sub_1001C5A40(*(_QWORD *)(v0 + 16), v0 + v1);
}

uint64_t sub_1001C8098()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7F94);
}

uint64_t sub_1001C80A8()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7F88);
}

uint64_t sub_1001C80B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C80D8()
{
  uint64_t v0;

  return sub_1001C6A98(*(BOOL **)(v0 + 16));
}

uint64_t sub_1001C80E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C80F4()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7F64);
}

uint64_t sub_1001C8104()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7F40);
}

uint64_t sub_1001C8114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001C82B4();
  sub_1001C826C();
  v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = sub_1001C8324();
  sub_1000C2408(v4);
  swift_release();
  sub_100022AEC(*(_QWORD *)(v1 + v3), *(_QWORD *)(v1 + v3 + 8));
  return sub_1000265A0(v1, v3 + 16, v0);
}

uint64_t sub_1001C8174()
{
  return sub_1001C8180((uint64_t (*)(_QWORD, uint64_t, _QWORD, unint64_t))sub_1001C7F1C);
}

uint64_t sub_1001C8180(uint64_t (*a1)(_QWORD, uint64_t, _QWORD, unint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001C82B4();
  sub_1001C8294();
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + (v2 & 0xFFFFFFFFFFFFFFF8)), v1 + (((v2 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1001C8234(uint64_t a1)
{
  return IOHIDEventCreateRelativePointerEvent(0, a1, 0, 0, 0, 0.0, 0.0, 0.0);
}

uint64_t sub_1001C8258(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1001C82B4()
{
  return type metadata accessor for HIDUniversalSenderID(0);
}

uint64_t sub_1001C82BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  return HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)(a1, a2, a3, v12, v11, v14, v15, v13, a9, a10, a11);
}

uint64_t sub_1001C82D4(uint64_t a1)
{
  uint64_t v1;

  return IOHIDEventAppendEvent(a1, v1, 0);
}

uint64_t sub_1001C82E0()
{
  uint64_t v0;

  return v0 - 136;
}

uint64_t sub_1001C82FC(uint64_t a1)
{
  return swift_allocObject(a1, 72, 7);
}

void sub_1001C8308()
{
  sub_1001C5DBC();
}

void sub_1001C8318(uint64_t a1)
{
  uint64_t v1;

  sub_1001C57F4(a1, v1);
}

uint64_t sub_1001C8324()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_1001C8330()
{
  uint64_t v0;

  return v0;
}

uint64_t HIDUniversalSenderID.deviceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_10000E440();
  return sub_100084F8C(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t HIDUniversalSenderID.deviceID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_10000E440();
  return sub_100084F8C(v1, a1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 40));
}

uint64_t HIDUniversalSenderID.serviceID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_1001C82B4() + 20));
}

uint64_t type metadata accessor for HIDUniversalSenderID(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B5928;
  if (!qword_1002B5928)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HIDUniversalSenderID);
  return result;
}

uint64_t HIDUniversalSenderID.serviceID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1001C82B4();
  *(_QWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

double (*HIDUniversalSenderID.serviceID.modify())(_QWORD)
{
  sub_1001C82B4();
  return CGSize.init(_:);
}

void HIDUniversalSenderID.init(deviceID:serviceID:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_10000E440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  *(_QWORD *)(a3 + *(int *)(sub_1001C82B4() + 20)) = a2;
  sub_10000B350();
}

void HIDUniversalSenderID.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10000E440();
  v4 = sub_100041014(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = sub_1001C82B4();
  Hasher._combine(_:)(*(_QWORD *)(v1 + *(int *)(v5 + 20)));
  sub_10000B350();
}

BOOL static HIDUniversalSenderID.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = sub_1001C82B4();
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

uint64_t sub_1001C8534(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656369766564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4965636976726573 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4965636976726573, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001C862C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4965636976726573;
  else
    return 0x4449656369766564;
}

uint64_t sub_1001C8668()
{
  char *v0;

  return sub_1001C862C(*v0);
}

uint64_t sub_1001C8670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001C8534(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C8694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C882C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C86BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001C882C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HIDUniversalSenderID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002B58B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_10000DBE4(a1, v10);
  v12 = sub_1001C882C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HIDUniversalSenderID.CodingKeys, &type metadata for HIDUniversalSenderID.CodingKeys, v12, v10, v11);
  v18 = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100041014(&qword_1002AF0D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v13, v14);
  if (!v2)
  {
    v15 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for HIDUniversalSenderID(0) + 20));
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v17, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_1001C882C()
{
  unint64_t result;

  result = qword_1002B58B8;
  if (!qword_1002B58B8)
  {
    result = swift_getWitnessTable(&unk_10022D908, &type metadata for HIDUniversalSenderID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58B8);
  }
  return result;
}

Swift::Int HIDUniversalSenderID.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = sub_10000E440();
  v1 = sub_100041014(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v0, v1);
  v2 = sub_1001C82B4();
  sub_1001C90BC(*(int *)(v2 + 20));
  return Hasher._finalize()();
}

uint64_t HIDUniversalSenderID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_10002641C();
  v16 = v5 - v4;
  v17 = sub_1000055B0(&qword_1002B58C0);
  __chkstk_darwin(v17);
  sub_10002641C();
  v6 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  v11 = a1[3];
  v10 = a1[4];
  sub_10000DBE4(a1, v11);
  v12 = sub_1001C882C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HIDUniversalSenderID.CodingKeys, &type metadata for HIDUniversalSenderID.CodingKeys, v12, v11, v10);
  if (v2)
    return sub_10003D6E4();
  v21 = 0;
  sub_100041014(&qword_1002AF0E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v21, v17, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v9, v16, v18);
  v20 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v17);
  sub_1001C90AC();
  *(_QWORD *)(v9 + *(int *)(v6 + 20)) = v13;
  sub_1000E0E9C(v9, a2);
  sub_10003D6E4();
  return sub_1000E0F24(v9);
}

uint64_t sub_1001C8AFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HIDUniversalSenderID.init(from:)(a1, a2);
}

uint64_t sub_1001C8B10(_QWORD *a1)
{
  return HIDUniversalSenderID.encode(to:)(a1);
}

Swift::Int sub_1001C8B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = sub_10000E440();
  v4 = sub_100041014(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  sub_1001C90BC(*(int *)(a2 + 20));
  return Hasher._finalize()();
}

uint64_t HIDUniversalSenderID.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  Swift::String v13;
  void *object;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v3 = UUID.uuidString.getter(a1);
  v5 = sub_1000599D0(8, v3, v4);
  v7 = v6;
  v8 = static String._fromSubstring(_:)(v5);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v17 = v8;
  v18 = v10;
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v16 = *(_QWORD *)(v2 + *(int *)(sub_1001C82B4() + 20));
  v12 = sub_100168584();
  v13._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v16, 16, 0, &type metadata for UInt64, v12);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  return v17;
}

uint64_t sub_1001C8C64()
{
  return sub_100041014(&qword_1002B58C8, type metadata accessor for HIDUniversalSenderID, (uint64_t)&protocol conformance descriptor for HIDUniversalSenderID);
}

uint64_t *initializeBufferWithCopyOfBuffer for HIDUniversalSenderID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for HIDUniversalSenderID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for HIDUniversalSenderID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for HIDUniversalSenderID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDUniversalSenderID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C8E3C);
}

uint64_t sub_1001C8E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HIDUniversalSenderID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C8E78);
}

uint64_t sub_1001C8E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a2, v4);
}

uint64_t sub_1001C8EAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HIDUniversalSenderID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001C8F6C + 4 * byte_10022D745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C8FA0 + 4 * byte_10022D740[v4]))();
}

uint64_t sub_1001C8FA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8FA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C8FB0);
  return result;
}

uint64_t sub_1001C8FBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C8FC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001C8FC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8FD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HIDUniversalSenderID.CodingKeys()
{
  return &type metadata for HIDUniversalSenderID.CodingKeys;
}

unint64_t sub_1001C8FF0()
{
  unint64_t result;

  result = qword_1002B5960;
  if (!qword_1002B5960)
  {
    result = swift_getWitnessTable(&unk_10022D8E0, &type metadata for HIDUniversalSenderID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5960);
  }
  return result;
}

unint64_t sub_1001C9030()
{
  unint64_t result;

  result = qword_1002B5968;
  if (!qword_1002B5968)
  {
    result = swift_getWitnessTable(&unk_10022D850, &type metadata for HIDUniversalSenderID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5968);
  }
  return result;
}

unint64_t sub_1001C9070()
{
  unint64_t result;

  result = qword_1002B5970;
  if (!qword_1002B5970)
  {
    result = swift_getWitnessTable(&unk_10022D878, &type metadata for HIDUniversalSenderID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5970);
  }
  return result;
}

uint64_t sub_1001C90AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void sub_1001C90BC(uint64_t a1@<X8>)
{
  uint64_t v1;

  Hasher._combine(_:)(*(_QWORD *)(v1 + a1));
}

uint64_t HIDReportDispatcherProtocol.sendReport(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

BOOL HIDReportAccumulator.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

Swift::Void __swiftcall HIDReportAccumulator.flush()()
{
  uint64_t v0;

  HIDReportAccumulator.flush(to:)(v0 + 8);
}

uint64_t HIDReportAccumulator.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000445C0(v1 + 8, a1);
}

void HIDReportAccumulator.target.setter(_QWORD *a1)
{
  uint64_t v1;

  sub_100021C68((_QWORD *)(v1 + 8), a1);
  HIDReportAccumulator.flush(to:)(v1 + 8);
  sub_100005988(a1);
  sub_10000B350();
}

void (*HIDReportAccumulator.target.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_1001C9148;
}

void sub_1001C9148(_QWORD *a1, char a2)
{
  if ((a2 & 1) == 0)
    HIDReportAccumulator.flush(to:)(*a1 + 8);
}

uint64_t HIDReportAccumulator.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1001C82B4();
  v3 = sub_100041014((unint64_t *)&qword_1002B09E8, type metadata accessor for HIDUniversalSenderID, (uint64_t)&protocol conformance descriptor for HIDUniversalSenderID);
  result = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, &type metadata for HIDReportAccumulator.Value, v3);
  *a1 = result;
  a1[4] = (uint64_t)&type metadata for NullTarget;
  a1[5] = (uint64_t)&off_100292B68;
  return result;
}

void HIDReportAccumulator.Value.keyboard.getter()
{
  uint64_t *v0;

  sub_1001D2ACC(*v0);
  sub_10000E4F8();
  sub_1000050D4();
}

void HIDReportAccumulator.Value.consumer.getter()
{
  uint64_t v0;

  sub_1001D2ACC(*(_QWORD *)(v0 + 16));
  sub_10000E4F8();
  sub_1000050D4();
}

void HIDReportAccumulator.Value.appleVendorKeyboard.getter()
{
  uint64_t v0;

  sub_1001D2ACC(*(_QWORD *)(v0 + 32));
  sub_10000E4F8();
  sub_1000050D4();
}

void HIDReportAccumulator.Value.appleVendorTopCase.getter()
{
  uint64_t v0;

  sub_1001D2ACC(*(_QWORD *)(v0 + 48));
  sub_10000E4F8();
  sub_1000050D4();
}

void HIDReportAccumulator.Value.pointer.getter()
{
  uint64_t v0;

  sub_1001D2ACC(*(_QWORD *)(v0 + 64));
  sub_10000E4F8();
  sub_1000050D4();
}

void sub_1001C9298(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (**v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = v3;
  v9 = sub_1001D2D90((uint64_t)a1, (uint64_t)a2, *a1, a1[1]);
  if ((v9 & 1) == 0)
  {
    sub_1001D2D2C();
    v9 = sub_1001D2B64(v4[4]);
  }
  v11 = sub_1001D2D90(v9, v10, a1[2], a1[3]);
  if ((v11 & 1) == 0)
  {
    sub_1001D2D2C();
    v11 = sub_1001D2B64(v4[3]);
  }
  v13 = sub_1001D2D90(v11, v12, a1[4], a1[5]);
  if ((v13 & 1) == 0)
  {
    sub_1001D2D2C();
    v13 = sub_1001D2B64(v4[1]);
  }
  if ((sub_1001D2D90(v13, v14, a1[6], a1[7]) & 1) == 0)
  {
    sub_1001D2D2C();
    sub_1001D2B64(v4[2]);
  }
  v15 = *(_QWORD *)(v3 + 64);
  v16 = *(_QWORD *)(v5 + 72);
  if ((static Data.== infix(_:_:)(v15, v16, a1[8], a1[9]) & 1) == 0)
  {
    v17 = a2[3];
    v18 = a2[4];
    sub_10000DBE4(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 40))(v15, v16, a3, v17, v18);
  }
  sub_10002D8A4();
}

uint64_t static HIDReportAccumulator.Value.__derived_struct_equals(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if ((static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) != 0
    && (static Data.== infix(_:_:)(a1[2], a1[3], a2[2], a2[3]) & 1) != 0
    && (static Data.== infix(_:_:)(a1[4], a1[5], a2[4], a2[5]) & 1) != 0
    && (static Data.== infix(_:_:)(a1[6], a1[7], a2[6], a2[7]) & 1) != 0)
  {
    return static Data.== infix(_:_:)(a1[8], a1[9], a2[8], a2[9]);
  }
  else
  {
    return 0;
  }
}

uint64_t HIDReportAccumulator.insert(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1001D2EA8();
  v31 = v1;
  v32 = v3;
  v4 = v2;
  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    sub_1001A90EC(v2);
    if ((v5 & 1) != 0)
      return 0;
  }
  KeyboardReport.init()();
  v8 = v7;
  v10 = v9;
  v11 = ConsumerReport.init()();
  v13 = v12;
  v14 = AppleVendorKeyboardReport.init()();
  v16 = v15;
  v17 = AppleVendorTopCaseReport.init()();
  v19 = v18;
  PointerReport.init()();
  *(_QWORD *)&v22 = v8;
  *((_QWORD *)&v22 + 1) = v10;
  v23 = v11;
  v24 = v13;
  v25 = v14;
  v26 = v16;
  v27 = v17;
  v28 = v19;
  v29 = v20;
  v30 = v21;
  sub_1001D11C0(&v22, v4);
  return 1;
}

void HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  __int128 v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  char v141[8];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  LODWORD(v119) = a4;
  *((_QWORD *)&v124 + 1) = a2;
  *(_QWORD *)&v124 = a1;
  v6 = sub_1001C82B4();
  __chkstk_darwin(v6);
  v120 = a3;
  v8 = a3;
  v9 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E0E9C(v8, (uint64_t)v9);
  v121 = v4;
  v10 = *v4;
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1001A90EC((uint64_t)v9), (v12 & 1) != 0))
  {
    v13 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 80 * v11);
    v15 = *v13;
    v14 = v13[1];
    v16 = v13[2];
    v17 = v13[3];
    v19 = v13[4];
    v18 = v13[5];
    v20 = v13[6];
    v21 = v13[7];
    v123 = v9;
    v23 = v13[8];
    v22 = v13[9];
    sub_1001D2C20(v15);
    sub_1001D2B5C(v16);
    sub_1001D2B38(v19);
    sub_1001D2C60(v20);
    sub_1001C54D0(v23);
    v24 = v22;
    v9 = v123;
  }
  else
  {
    KeyboardReport.init()();
    v15 = v25;
    v14 = v26;
    v16 = ConsumerReport.init()();
    v17 = v27;
    v19 = AppleVendorKeyboardReport.init()();
    v18 = v28;
    v20 = AppleVendorTopCaseReport.init()();
    v21 = v29;
    PointerReport.init()();
    v23 = v30;
  }
  v123 = (char *)v16;
  *(_QWORD *)&v122 = v15;
  *((_QWORD *)&v122 + 1) = v14;
  v125 = v15;
  v126 = v14;
  v127 = v16;
  v128 = v17;
  v129 = v19;
  v130 = v18;
  v131 = v20;
  v132 = v21;
  v133 = v23;
  v134 = v24;
  v31 = (uint64_t)v9;
  v32 = v24;
  sub_1000E0F24(v31);
  sub_1001D2C20(v15);
  sub_1001D2B5C(v16);
  sub_1001D2B38(v19);
  sub_1001D2C60(v20);
  sub_1001C54D0(v23);
  sub_1001D2C20(v15);
  sub_1001D2B5C(v16);
  sub_1001D2C60(v20);
  sub_1001C54D0(v23);
  sub_1001D2B38(v19);
  v33 = *((_QWORD *)&v124 + 1);
  v34 = v124;
  sub_1001D2C20(v124);
  sub_10013DE98(v34, v33);
  v36 = v35;
  sub_1001C54EC(v34);
  v37 = v20;
  v38 = v18;
  v39 = v19;
  if ((v36 & 0x100) != 0)
  {
    v119 = v23;
    sub_1001B76FC(v23);
    sub_1001D2C98(v37);
    sub_1000A3778(v19);
    v51 = (uint64_t)v123;
    sub_1001D2AA4((uint64_t)v123);
    v52 = v122;
    sub_1001D2CBC(v122);
    v19 = v32;
    v53 = v52;
  }
  else
  {
    v40 = v21;
    v117 = v32;
    v118 = v38;
    v116 = v19;
    switch((char)v36)
    {
      case 1:
        v41 = v122;
        sub_1001C5628(v122);
        v42 = sub_1001D2B40();
        sub_1001CA53C(v42, v43, v44);
        v45 = v135;
        sub_1001C54D0(v135);
        sub_1001C5628(v41);
        v135 = v45;
        v46 = (uint64_t)v123;
        *(_QWORD *)&v136 = v123;
        *((_QWORD *)&v136 + 1) = v17;
        v47 = v116;
        *(_QWORD *)&v137 = v116;
        *((_QWORD *)&v137 + 1) = v118;
        *(_QWORD *)&v138 = v37;
        *((_QWORD *)&v138 + 1) = v40;
        v48 = v117;
        v139 = v23;
        v140 = v117;
        sub_1001C54D0(v45);
        sub_1001D2D70(v46);
        sub_1001D2EC4(v47);
        sub_1001D2B38(v37);
        sub_1001D2B5C(v23);
        sub_1001D2AA4(v23);
        sub_1001D2AC0();
        sub_1001C5628(v47);
        sub_1001D2AD4(v46);
        sub_1001B76FC(v45);
        sub_1001D2A70();
        sub_1001D2BA0(v122, (uint64_t)&v145);
        sub_1001D2AD4(v46);
        sub_1001D2CBC(v47);
        sub_1001D2AC0();
        sub_1001D2AA4(v23);
        sub_1001B76FC(v45);
        sub_1001D2AD4(v46);
        sub_1001D2CBC(v47);
        sub_1001D2AC0();
        sub_1001D2AA4(v23);
        sub_1001B76FC(v45);
        sub_1001D2AD4(v46);
        sub_1001D2CBC(v47);
        v49 = v37;
        v50 = v40;
        goto LABEL_15;
      case 2:
        v56 = (uint64_t)v123;
        v19 = v17;
        v115 = v17;
        sub_100022AEC((uint64_t)v123, v17);
        v57 = sub_1001D2B40();
        sub_1001CA3D4(v57, v58, v59);
        v60 = v135;
        sub_1001D2AAC(v135);
        sub_1001D2AA4(v56);
        v61 = v122;
        v135 = v122;
        v136 = v60;
        *(_QWORD *)&v137 = v39;
        *((_QWORD *)&v137 + 1) = v118;
        sub_1001D2F3C();
        sub_1001D2D70(v61);
        *((_QWORD *)&v124 + 1) = *((_QWORD *)&v60 + 1);
        sub_10002517C(v60, *((unint64_t *)&v60 + 1));
        sub_1001D2B5C(v39);
        sub_1001D2B38(v37);
        sub_1001D2EC4(v23);
        sub_1001C5628(v23);
        sub_1001D2AC0();
        sub_1001D2AA4(v39);
        sub_1000A3778(v60);
        sub_1001D2AD4(v61);
        sub_1001D2A70();
        sub_1001D2AD4(v61);
        sub_1001D2BA0((uint64_t)v123, (uint64_t)v141);
        v62 = v116;
        sub_1001D2AA4(v116);
        sub_1001D2AC0();
        sub_1001C5628(v23);
        sub_1001D2AD4(v61);
        sub_1001D2AA4(v60);
        sub_1001D2CBC(v62);
        sub_1001D2AC0();
        sub_1001C5628(v23);
        sub_1001D2AD4(v61);
        sub_1001D2AA4(v60);
        v63 = v62;
        goto LABEL_12;
      case 3:
        sub_100022AEC(v19, v38);
        v64 = sub_1001D2B40();
        sub_1001CA104(v64, v65, v66);
        v67 = v135;
        sub_1001D2C60(v135);
        sub_1000A3778(v19);
        v68 = v122;
        sub_1001D2CF8();
        *(_QWORD *)&v135 = v68;
        *((_QWORD *)&v135 + 1) = v19;
        v69 = (uint64_t)v123;
        *(_QWORD *)&v136 = v123;
        *((_QWORD *)&v136 + 1) = v17;
        v137 = v67;
        sub_1001D2F3C();
        sub_1001C54D0(v68);
        sub_1001D2B5C(v69);
        *(_QWORD *)&v124 = *((_QWORD *)&v67 + 1);
        *((_QWORD *)&v124 + 1) = v67;
        sub_10002517C(v67, *((unint64_t *)&v67 + 1));
        sub_1001D2B38(v37);
        sub_1001D2EC4(v23);
        sub_1001C5628(v23);
        sub_1001D2AC0();
        sub_1001D2C98(v67);
        sub_1001D2AA4(v69);
        sub_1001B76FC(v68);
        sub_1001D2A70();
        sub_1001B76FC(v68);
        sub_1001D2AA4(v69);
        sub_1001D2BA0(v116, (uint64_t)&v143);
        sub_1001D2AC0();
        sub_1001C5628(v23);
        sub_1001B76FC(v68);
        sub_1001D2AA4(v69);
        v70 = *((_QWORD *)&v124 + 1);
        sub_1001D2CBC(*((uint64_t *)&v124 + 1));
        sub_1001D2AC0();
        sub_1001C5628(v23);
        sub_1001B76FC(v68);
        sub_1001D2AA4(v69);
        v63 = v70;
LABEL_12:
        sub_1001D2CBC(v63);
        sub_1001D2AC0();
        v55 = v23;
        goto LABEL_13;
      case 4:
        v114 = v37;
        v113 = v21;
        sub_100022AEC(v37, v21);
        v72 = sub_1001D2B40();
        sub_1001CA26C(v72, v73, v74);
        v75 = v135;
        sub_1001D2AAC(v135);
        sub_1001D2AC0();
        v76 = v122;
        sub_1001D2CF8();
        *(_QWORD *)&v135 = v76;
        *((_QWORD *)&v135 + 1) = v32;
        v77 = (uint64_t)v123;
        *(_QWORD *)&v136 = v123;
        *((_QWORD *)&v136 + 1) = v17;
        v78 = v116;
        v79 = v118;
        *(_QWORD *)&v137 = v116;
        *((_QWORD *)&v137 + 1) = v118;
        v138 = v75;
        v124 = v75;
        v139 = v23;
        v140 = v117;
        sub_1001C54D0(v76);
        sub_1001D2D70(v77);
        v80 = v78;
        sub_1001D2ACC(v78);
        sub_1001D2AAC(v75);
        v48 = v117;
        sub_1001D2B5C(v23);
        sub_1001D2AA4(v23);
        sub_1000A3778(v75);
        sub_100022AEC(v80, v79);
        v81 = sub_1001D2EE4((uint64_t)&v146);
        sub_1001D2AD4(v81);
        sub_1001B76FC(v76);
        sub_1001D2A70();
        sub_1001B76FC(v76);
        sub_1001D2AD4(*((uint64_t *)&v75 + 1));
        sub_1001D2C98(v80);
        sub_1001D2BA0(v114, (uint64_t)&v139);
        sub_1001D2AA4(v23);
        sub_1001B76FC(v76);
        sub_1001D2AD4(*((uint64_t *)&v75 + 1));
        sub_1001D2C98(v80);
        v82 = v124;
        sub_1001D2CBC(v124);
        sub_1001D2AA4(v23);
        sub_1001B76FC(v76);
        sub_1001D2AD4(*((uint64_t *)&v75 + 1));
        sub_1001D2C98(v80);
        v50 = *((_QWORD *)&v82 + 1);
        v49 = v82;
LABEL_15:
        sub_100022AEC(v49, v50);
        v55 = v23;
        v71 = v48;
        goto LABEL_16;
      default:
        v119 = v23;
        sub_1001B76FC(v23);
        if (v36 == 5)
        {
          v83 = sub_1001D2B40();
          sub_1001CA6A4(v83, v84, v85);
          v111 = *((_QWORD *)&v135 + 1);
          v112 = v135;
          PointerReport.reportWithoutMovement.getter();
          v86 = v17;
          v88 = v87;
          v90 = v89;
          sub_10002517C(v87, v89);
          sub_1001B76FC(v119);
          v91 = v122;
          sub_1001D2CF8();
          *(_QWORD *)&v135 = v91;
          *((_QWORD *)&v135 + 1) = v32;
          v92 = (uint64_t)v123;
          *(_QWORD *)&v136 = v123;
          *((_QWORD *)&v136 + 1) = v86;
          v93 = v116;
          *(_QWORD *)&v137 = v116;
          *((_QWORD *)&v137 + 1) = v118;
          *(_QWORD *)&v138 = v37;
          *((_QWORD *)&v138 + 1) = v40;
          v139 = v88;
          v140 = v90;
          sub_1001C54D0(v91);
          sub_1001D2EC4(v92);
          sub_1001D2AAC(v93);
          sub_1001D2B38(v37);
          sub_1001D2ACC(v88);
          *((_QWORD *)&v124 + 1) = v88;
          *(_QWORD *)&v124 = v90;
          sub_1001D2CBC(v88);
          sub_1001D2AC0();
          sub_1000A3778(v93);
          sub_1001C5628(v92);
          sub_1001B76FC(v91);
          v94 = v117;
          v95 = static Data.== infix(_:_:)(v91, v32, v91, v32);
          v115 = v86;
          v114 = v37;
          v113 = v40;
          if ((v95 & 1) != 0
            && (static Data.== infix(_:_:)(v92, v86, v92, v86) & 1) != 0
            && (static Data.== infix(_:_:)(v116, v118, v116, v118) & 1) != 0
            && (static Data.== infix(_:_:)(v37, v40, v37, v40) & 1) != 0
            && (static Data.== infix(_:_:)(*((_QWORD *)&v124 + 1), v124, v119, v94) & 1) != 0)
          {
            v96 = v122;
            sub_1001B76FC(v122);
            sub_1001D2AA4(v92);
            v97 = v116;
            sub_1001D2BA0(v116, (uint64_t)&v143);
            sub_1001D2AC0();
            sub_1001D2BA0(*((uint64_t *)&v124 + 1), (uint64_t)&v147);
            v98 = v120;
            v99 = v121;
          }
          else
          {
            v97 = v116;
            v98 = v120;
            v99 = v121;
            sub_1001D11C0(&v135, v120);
            v96 = v122;
          }
          v104 = v99[4];
          v103 = v99[5];
          sub_10000DBE4(v99 + 1, v104);
          v105 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 48);
          v106 = v112;
          v107 = v111;
          sub_1001D2B5C(v112);
          v105(v106, v107, v98, v104, v103);
          sub_1001D2C98(v96);
          v108 = (uint64_t)v123;
          sub_1000A3778((uint64_t)v123);
          sub_1001D2AD4(v97);
          v109 = sub_1001D2EE4((uint64_t)&v140);
          sub_1001D2CBC(v109);
          sub_1001D2BA0(v119, (uint64_t)&v142);
          sub_1001D2AA4(v106);
          sub_1001D2AA4(v106);
          sub_1001D2C98(v96);
          sub_1000A3778(v108);
          sub_1001D2AD4(v97);
          sub_1001D2CBC(v103);
          v55 = *((_QWORD *)&v124 + 1);
          v71 = v124;
          goto LABEL_16;
        }
        sub_1001D2B8C(v37);
        v39 = v116;
        sub_1000A3778(v116);
        v51 = (uint64_t)v123;
        sub_1001D2AA4((uint64_t)v123);
        v19 = v32;
        v53 = v122;
        sub_1001D2AA4(v122);
        if (v36 <= 0x11u && ((1 << v36) & 0x3FA80) != 0)
        {
          v100 = v121[4];
          v101 = v121[5];
          sub_10000DBE4(v121 + 1, v100);
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v101 + 48))(v124, *((_QWORD *)&v124 + 1), v120, v100, v101);
          sub_1001D2AA4(v53);
          sub_1001D2A5C(v51);
          sub_1001D2AD4(v39);
          sub_1001D2C98(v37);
          v102 = sub_1001D2EE4((uint64_t)&v144);
          v19 = v117;
          sub_1001C5628(v102);
          sub_1001D2AA4(v53);
          sub_1001D2A5C(v51);
          sub_1001D2AD4(v39);
          sub_1001D2C98(v37);
          v55 = v37;
          goto LABEL_13;
        }
        break;
    }
  }
  sub_1001D2AA4(v53);
  sub_1001D2A5C(v51);
  sub_1000A3778(v39);
  sub_1001D2C98(v37);
  v54 = v119;
  sub_1001C5628(v119);
  sub_1001D2AA4(v53);
  sub_1001D2A5C(v51);
  sub_1000A3778(v39);
  sub_1001D2C98(v37);
  v55 = v54;
LABEL_13:
  v71 = v19;
LABEL_16:
  sub_100022AEC(v55, v71);
  sub_10000E4E0();
}

void sub_1001CA104(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  ValueMetadata *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = HIDReport.storage.getter(a1, a2);
  AppleVendorKeyboardReport.init(_:)(v6, v7);
  if (v9 >> 60 == 15)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000001ELL;
    v16 = 0x800000010025A0B0;
    sub_10002517C(a1, a2);
    sub_10013DE98(a1, a2);
    sub_100022AEC(a1, a2);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544432416;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v14 = &type metadata for AppleVendorKeyboardReport;
    v12 = sub_1000055B0(&qword_1002B5990);
    v13._countAndFlagsBits = String.init<A>(describing:)(&v14, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "EnsembleHID/HIDReportAccumulator.swift", 38, 2, 206, 0);
    __break(1u);
  }
  else
  {
    *a3 = v8;
    a3[1] = v9;
  }
}

void sub_1001CA26C(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  ValueMetadata *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = HIDReport.storage.getter(a1, a2);
  AppleVendorTopCaseReport.init(_:)(v6, v7);
  if (v9 >> 60 == 15)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000001ELL;
    v16 = 0x800000010025A0B0;
    sub_10002517C(a1, a2);
    sub_10013DE98(a1, a2);
    sub_100022AEC(a1, a2);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544432416;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v14 = &type metadata for AppleVendorTopCaseReport;
    v12 = sub_1000055B0(&qword_1002B5998);
    v13._countAndFlagsBits = String.init<A>(describing:)(&v14, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "EnsembleHID/HIDReportAccumulator.swift", 38, 2, 206, 0);
    __break(1u);
  }
  else
  {
    *a3 = v8;
    a3[1] = v9;
  }
}

void sub_1001CA3D4(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  ValueMetadata *v12;
  unint64_t v13;
  unint64_t v14;

  HIDReport.storage.getter(a1, a2);
  ConsumerReport.init(_:)();
  if (v7 >> 60 == 15)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v13 = 0xD00000000000001ELL;
    v14 = 0x800000010025A0B0;
    sub_10002517C(a1, a2);
    sub_10013DE98(a1, a2);
    sub_100022AEC(a1, a2);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 544432416;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    v12 = &type metadata for ConsumerReport;
    v10 = sub_1000055B0(&qword_1002B59A0);
    v11._countAndFlagsBits = String.init<A>(describing:)(&v12, v10);
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v13, v14, "EnsembleHID/HIDReportAccumulator.swift", 38, 2, 206, 0);
    __break(1u);
  }
  else
  {
    *a3 = v6;
    a3[1] = v7;
  }
}

void sub_1001CA53C(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  ValueMetadata *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = HIDReport.storage.getter(a1, a2);
  KeyboardReport.init(_:)(v6, v7);
  if (v9 >> 60 == 15)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000001ELL;
    v16 = 0x800000010025A0B0;
    sub_10002517C(a1, a2);
    sub_10013DE98(a1, a2);
    sub_100022AEC(a1, a2);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544432416;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v14 = &type metadata for KeyboardReport;
    v12 = sub_1000055B0(&qword_1002B59A8);
    v13._countAndFlagsBits = String.init<A>(describing:)(&v14, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "EnsembleHID/HIDReportAccumulator.swift", 38, 2, 206, 0);
    __break(1u);
  }
  else
  {
    *a3 = v8;
    a3[1] = v9;
  }
}

void sub_1001CA6A4(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  ValueMetadata *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = HIDReport.storage.getter(a1, a2);
  PointerReport.init(_:)(v6, v7);
  if (v9 >> 60 == 15)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000001ELL;
    v16 = 0x800000010025A0B0;
    sub_10002517C(a1, a2);
    sub_10013DE98(a1, a2);
    sub_100022AEC(a1, a2);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544432416;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v14 = &type metadata for PointerReport;
    v12 = sub_1000055B0(&qword_1002B59B0);
    v13._countAndFlagsBits = String.init<A>(describing:)(&v14, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "EnsembleHID/HIDReportAccumulator.swift", 38, 2, 206, 0);
    __break(1u);
  }
  else
  {
    *a3 = v8;
    a3[1] = v9;
  }
}

void sub_1001CA80C(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;

  if ((static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0
    || (static Data.== infix(_:_:)(a1[2], a1[3], a2[2], a2[3]) & 1) == 0
    || (static Data.== infix(_:_:)(a1[4], a1[5], a2[4], a2[5]) & 1) == 0
    || (static Data.== infix(_:_:)(a1[6], a1[7], a2[6], a2[7]) & 1) == 0
    || (static Data.== infix(_:_:)(a1[8], a1[9], a2[8], a2[9]) & 1) == 0)
  {
    sub_1001D29CC(a1);
    sub_1001D11C0(a1, a3);
    if ((a4 & 1) != 0)
      sub_1001C9298(a2, (_QWORD *)(v4 + 8), a3);
  }
}

double HIDReportAccumulator.resetValues(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1001D2F1C();
  KeyboardReport.init()();
  v3 = v2;
  v5 = v4;
  v6 = ConsumerReport.init()();
  v8 = v7;
  v9 = AppleVendorKeyboardReport.init()();
  v11 = v10;
  v12 = AppleVendorTopCaseReport.init()();
  v14 = v13;
  PointerReport.init()();
  *(_QWORD *)&v19 = v3;
  *((_QWORD *)&v19 + 1) = v5;
  v20 = v6;
  v21 = v8;
  v22 = v9;
  v23 = v11;
  v24 = v12;
  v25 = v14;
  v26 = v15;
  v27 = v16;
  sub_1001D11C0(&v19, a1);
  sub_1001CA96C(v1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001CA96C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v78[112];
  _QWORD *v79;
  int64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t __s1;
  uint64_t v108;

  v3 = type metadata accessor for HIDUniversalSenderID(0);
  v83 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = &v78[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v78[-v8];
  __chkstk_darwin(v7);
  v82 = &v78[-v10];
  v11 = swift_bridgeObjectRetain(a1);
  v12 = sub_1001D03EC(v11);
  v13 = *v1;
  v97 = v1 + 1;
  v14 = swift_bridgeObjectRetain(v13);
  v15 = sub_1001D0970(v14, v12);
  v16 = 0;
  v101 = 0;
  v17 = *(_QWORD *)(v15 + 56);
  v79 = (_QWORD *)(v15 + 56);
  v84 = v15;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v80 = (unint64_t)(v18 + 63) >> 6;
  v103 = v1;
  v81 = a1;
  v88 = v6;
  v102 = v9;
  if ((v19 & v17) != 0)
  {
    v21 = __clz(__rbit64(v20));
    v22 = (v20 - 1) & v20;
LABEL_15:
    v25 = v82;
    sub_1000E0E9C(*(_QWORD *)(v84 + 48) + *(_QWORD *)(v83 + 72) * v21, (uint64_t)v82);
    sub_1000E0EE0((uint64_t)v25, (uint64_t)v9);
    sub_1000E0E9C((uint64_t)v9, (uint64_t)v6);
    v26 = *(_QWORD *)(a1 + 16);
    v87 = v16;
    v86 = v22;
    if (v26)
    {
      v27 = sub_1001A90EC((uint64_t)v6);
      if ((v28 & 1) != 0)
      {
        v29 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 80 * v27);
        v30 = v29[1];
        v32 = v29[2];
        v31 = v29[3];
        v34 = v29[4];
        v33 = v29[5];
        v35 = v9;
        v36 = v29[6];
        v37 = v29[7];
        v38 = v29[8];
        v39 = v29[9];
        v105 = *v29;
        sub_10002517C(v105, v30);
        sub_10002517C(v32, v31);
        v104 = v34;
        v94 = v33;
        v40 = v33;
        v41 = (uint64_t)v35;
        v42 = (uint64_t)v88;
        sub_10002517C(v34, v40);
        v96 = v36;
        v92 = v37;
        v43 = v37;
        v44 = v32;
        v45 = v31;
        sub_10002517C(v36, v43);
        v98 = v38;
        v85 = v39;
        sub_10002517C(v38, v39);
LABEL_25:
        sub_1000E0F24(v42);
        v59 = *v103;
        v60 = *(_QWORD *)(*v103 + 16);
        v99 = v30;
        v91 = v44;
        v90 = v45;
        if (v60 && (v61 = sub_1001A90EC(v41), (v62 & 1) != 0))
        {
          v63 = (uint64_t *)(*(_QWORD *)(v59 + 56) + 80 * v61);
          v64 = v63[1];
          v66 = v63[2];
          v65 = v63[3];
          v67 = v63[4];
          v68 = v63[5];
          v69 = v63[6];
          v70 = v63[7];
          v71 = v63[8];
          v72 = v63[9];
          v100 = *v63;
          sub_10002517C(v100, v64);
          sub_10002517C(v66, v65);
          v93 = v67;
          sub_10002517C(v67, v68);
          v106 = v69;
          v95 = v70;
          sub_10002517C(v69, v70);
          v89 = v71;
          sub_10002517C(v71, v72);
        }
        else
        {
          v73 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
          v74 = __DataStorage.init(length:)(31);
          __s1 = 0x1F00000000;
          v108 = v74;
          v75 = v101;
          sub_1000E6A84((int *)&__s1, 0);
          v108 |= 0x4000000000000000uLL;
          Data._Representation.subscript.setter(1, 0);
          v64 = v108;
          v100 = __s1;
          swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
          v76 = __DataStorage.init(length:)(17);
          __s1 = 0x1100000000;
          v108 = v76;
          sub_1000E6A84((int *)&__s1, 0);
          v101 = v75;
          v108 |= 0x4000000000000000uLL;
          Data._Representation.subscript.setter(5, 0);
          v95 = 0x5000000000000;
          v89 = __s1;
          v93 = 3;
          v106 = 4;
        }
        __asm { BR              X11 }
      }
    }
    v46 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    v47 = __DataStorage.init(length:)(31);
    __s1 = 0x1F00000000;
    v108 = v47;
    Data.InlineSlice.ensureUniqueReference()();
    v48 = (int)__s1;
    v49 = SHIDWORD(__s1);
    if (SHIDWORD(__s1) < (int)__s1)
    {
      __break(1u);
    }
    else
    {
      v50 = v108;
      v51 = __DataStorage._bytes.getter();
      if (!v51)
        __break(1u);
      v52 = v51;
      v53 = __DataStorage._offset.getter();
      v54 = v48 - v53;
      if (!__OFSUB__(v48, v53))
      {
        v55 = __DataStorage._length.getter();
        if (v55 >= v49 - v48)
          v56 = v49 - v48;
        else
          v56 = v55;
        bzero((void *)(v52 + v54), v56);
        __s1 = v48 | ((unint64_t)v49 << 32);
        v108 = v50 | 0x4000000000000000;
        Data._Representation.subscript.setter(1, 0);
        v30 = v108;
        v105 = __s1;
        swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
        v57 = __DataStorage.init(length:)(17);
        __s1 = 0x1100000000;
        v108 = v57;
        v58 = v101;
        sub_1000E6A84((int *)&__s1, 0);
        v101 = v58;
        v108 |= 0x4000000000000000uLL;
        Data._Representation.subscript.setter(5, 0);
        v92 = 0x5000000000000;
        v94 = 0x3000000000000;
        v98 = __s1;
        v85 = v108;
        v45 = 0x9000000000000;
        v44 = 2;
        v104 = 3;
        v96 = 4;
        v42 = (uint64_t)v88;
        v41 = (uint64_t)v102;
        goto LABEL_25;
      }
    }
    __break(1u);
    __break(1u);
    JUMPOUT(0x1001CD0E8);
  }
  v16 = 1;
  if (v80 > 1)
  {
    v23 = v79[1];
    if (v23)
    {
LABEL_14:
      v22 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v16 << 6);
      goto LABEL_15;
    }
    v24 = 2;
    if (v80 > 2)
    {
      v23 = v79[2];
      if (v23)
        goto LABEL_13;
      v24 = 3;
      if (v80 <= 3)
        return swift_release();
      v23 = v79[3];
      if (v23)
      {
LABEL_13:
        v16 = v24;
        goto LABEL_14;
      }
      v24 = 4;
      if (v80 > 4)
      {
        v23 = v79[4];
        if (v23)
          goto LABEL_13;
        while (1)
        {
          v16 = v24 + 1;
          if (__OFADD__(v24, 1))
          {
            __break(1u);
            JUMPOUT(0x1001CD13CLL);
          }
          if (v16 >= v80)
            break;
          v23 = v79[v16];
          ++v24;
          if (v23)
            goto LABEL_14;
        }
      }
    }
  }
  return swift_release();
}

uint64_t HIDReportAccumulator.resetValues(matching:)(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t i;
  BOOL v23;
  unint64_t v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  __int128 v56;
  _OWORD v57[5];

  v5 = sub_1001C82B4();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10003D69C();
  v55 = v7;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v46 - v12;
  v14 = *v2;
  v16 = (_QWORD *)(*v2 + 64);
  v15 = *v16;
  v51 = v2;
  v52 = v16;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v15;
  v53 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain_n(v14, 2);
  v20 = 0;
  v48 = xmmword_10022DA00;
  v47 = xmmword_10022DA10;
  v46 = xmmword_10022DA20;
  v50 = v6;
  v49 = v11;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    sub_1001D2F50(i);
    sub_1000E0EE0((uint64_t)v13, (uint64_t)v11);
    if ((a1(v11) & 1) != 0)
    {
      sub_1000E0E9C((uint64_t)v11, v55);
      v27 = type metadata accessor for __DataStorage(0);
      v54 = v20;
      v28 = v27;
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      v29 = __DataStorage.init(length:)(31);
      *(_QWORD *)&v56 = 0x1F00000000;
      sub_1001D2E98(v29);
      sub_1001D2F28();
      Data._Representation.subscript.setter(1, 0);
      v30 = a1;
      v31 = v13;
      v32 = v14;
      v33 = a2;
      v34 = *((_QWORD *)&v56 + 1);
      v35 = v56;
      v36 = *(unsigned int *)(v28 + 48);
      v37 = *(unsigned __int16 *)(v28 + 52);
      v38 = v28;
      v20 = v54;
      swift_allocObject(v38, v36, v37);
      v39 = __DataStorage.init(length:)(17);
      *(_QWORD *)&v56 = 0x1100000000;
      sub_1001D2E98(v39);
      sub_1001D2F28();
      Data._Representation.subscript.setter(5, 0);
      v57[0] = __PAIR128__(v34, v35);
      a1 = v30;
      a2 = v33;
      v14 = v32;
      v13 = v31;
      v57[1] = v48;
      v57[2] = v47;
      v57[3] = v46;
      v57[4] = v56;
      v40 = v51;
      v41 = sub_1001AAEF8();
      *(_QWORD *)&v56 = *v40;
      *v40 = 0x8000000000000000;
      v42 = v55;
      sub_1001D137C(v57, v55, v41);
      v43 = *v40;
      *v40 = v56;
      swift_bridgeObjectRelease(v43);
      v44 = v42;
      v11 = v49;
      sub_1000E0F24(v44);
    }
    sub_1000E0F24((uint64_t)v11);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v23 = __OFADD__(v20++, 1);
    if (v23)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v53)
      goto LABEL_33;
    v24 = v52[v20];
    if (!v24)
      break;
LABEL_24:
    v19 = (v24 - 1) & v24;
  }
  sub_1001D2E44();
  if (v25 == v23)
    goto LABEL_33;
  sub_1001D2E38();
  if (v24)
    goto LABEL_23;
  sub_1001D2E44();
  if (v25 == v23)
    goto LABEL_33;
  sub_1001D2E38();
  if (v24)
    goto LABEL_23;
  sub_1001D2E44();
  if (v25 == v23)
    goto LABEL_33;
  sub_1001D2E38();
  if (v24)
    goto LABEL_23;
  sub_1001D2E44();
  if (v25 == v23)
    goto LABEL_33;
  sub_1001D2E38();
  if (v24)
  {
LABEL_23:
    v20 = v26;
    goto LABEL_24;
  }
  sub_1001D2E44();
  if (v25 != v23)
  {
    sub_1001D2E38();
    if (!v24)
    {
      while (1)
      {
        v20 = v26 + 1;
        if (__OFADD__(v26, 1))
          break;
        if (v20 >= v53)
          goto LABEL_33;
        v24 = v52[v20];
        ++v26;
        if (v24)
          goto LABEL_24;
      }
LABEL_35:
      __break(1u);
    }
    goto LABEL_23;
  }
LABEL_33:
  sub_10005FF18();
  sub_1001CA96C(v14);
  return swift_bridgeObjectRelease(v14);
}

Swift::Void __swiftcall HIDReportAccumulator.resetAllValues()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = swift_bridgeObjectRetain(*v0);
  v3 = sub_1001D1A94(v2);
  swift_bridgeObjectRelease(v1);
  *v0 = v3;
  sub_1001CA96C(v1);
  sub_1001D2C88(v1);
}

uint64_t HIDReportAccumulator.removeValues(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  sub_1001D2F1C();
  sub_1001D0F90(a1, &v4);
  sub_1001D1F54(v4, *((unint64_t *)&v4 + 1), v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1001CA96C(v1);
  return swift_bridgeObjectRelease(v1);
}

uint64_t HIDReportAccumulator.removeValues(matching:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v2;
  v6 = swift_bridgeObjectRetain(*v2);
  v7 = sub_1001D1FE0(v6, a1, a2);
  swift_bridgeObjectRelease(v5);
  *v2 = v7;
  sub_1001CA96C(v5);
  return sub_1001D2C88(v5);
}

void HIDReportAccumulator.flush(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  unint64_t v33;
  _BOOL4 v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t i;
  unint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[35];
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v81 = a1;
  v2 = sub_1001C82B4();
  v78 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10003D69C();
  v93 = v3;
  __chkstk_darwin(v4);
  v77 = (char *)v48 - v5;
  KeyboardReport.init()();
  v7 = v6;
  v9 = v8;
  v66 = v8;
  v10 = ConsumerReport.init()();
  v12 = v11;
  v13 = AppleVendorKeyboardReport.init()();
  v15 = v14;
  v16 = AppleVendorTopCaseReport.init()();
  v18 = v17;
  PointerReport.init()();
  v21 = v19;
  v22 = *v1;
  v23 = 1 << *(_BYTE *)(*v1 + 32);
  v85 = (unint64_t)(v23 + 63) >> 6;
  v80 = v9 >> 62;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v48[19] = HIDWORD(v7);
  v25 = __OFSUB__(HIDWORD(v7), (_DWORD)v7);
  v58 = HIDWORD(v7) - (int)v7;
  v79 = BYTE6(v9);
  v48[33] = (int)v7;
  v26 = *(_QWORD *)(v22 + 64);
  v84 = v22 + 64;
  v65 = v7;
  v48[18] = v7 >> 32;
  v48[11] = (v7 >> 32) - (int)v7;
  v27 = v24 & v26;
  v72 = v12 >> 62;
  v28 = v25;
  v57 = v28;
  v48[13] = HIDWORD(v10);
  v56 = HIDWORD(v10) - (int)v10;
  v48[34] = v9 & 0x3FFFFFFFFFFFFFFFLL;
  v76 = BYTE6(v12);
  v29 = __OFSUB__(HIDWORD(v10), (_DWORD)v10);
  v55 = v29;
  v48[14] = (int)v10;
  v61 = v12;
  v48[32] = v12 & 0x3FFFFFFFFFFFFFFFLL;
  v30 = v22;
  v48[10] = HIDWORD(v13);
  v31 = __OFSUB__(HIDWORD(v13), (_DWORD)v13);
  v54 = v31;
  v53 = HIDWORD(v13) - (int)v13;
  v48[7] = HIDWORD(v16);
  v32 = __OFSUB__(HIDWORD(v16), (_DWORD)v16);
  v52 = v32;
  v51 = HIDWORD(v16) - (int)v16;
  v48[4] = HIDWORD(v19);
  v50 = HIDWORD(v19) - (int)v19;
  v82 = v15 >> 62;
  v75 = BYTE6(v15);
  v60 = v15;
  v48[31] = v15 & 0x3FFFFFFFFFFFFFFFLL;
  v48[9] = (int)v13;
  v48[8] = v13 >> 32;
  v71 = v18 >> 62;
  v74 = BYTE6(v18);
  v59 = v18;
  v48[17] = v18 & 0x3FFFFFFFFFFFFFFFLL;
  v33 = v20;
  v48[6] = (int)v16;
  v64 = v16;
  v48[5] = v16 >> 32;
  v70 = v20 >> 62;
  v34 = __OFSUB__(HIDWORD(v19), (_DWORD)v19);
  v49 = v34;
  v73 = BYTE6(v20);
  v48[30] = v20 & 0x3FFFFFFFFFFFFFFFLL;
  v48[3] = (int)v19;
  v48[2] = v19 >> 32;
  v67 = v10;
  v48[12] = v10 >> 32;
  v48[1] = (v10 >> 32) - (int)v10;
  swift_bridgeObjectRetain_n(v22, 2);
  v35 = 0;
  v83 = 0;
  v86 = v13;
  v63 = v21;
  v36 = v1;
  v69 = v1;
  v62 = v33;
  v37 = (uint64_t)v77;
  v68 = v30;
  if (!v27)
    goto LABEL_21;
LABEL_20:
  v38 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  for (i = v38 | (v35 << 6); ; i = __clz(__rbit64(v40)) + (v35 << 6))
  {
    sub_1001D2F50(i);
    sub_1000E0EE0(v37, v93);
    v43 = *v36;
    if (*(_QWORD *)(*v36 + 16))
    {
      v44 = sub_1001A90EC(v93);
      if ((v45 & 1) != 0)
      {
        v46 = *(_QWORD *)(v43 + 56) + 80 * v44;
        v47 = *(_QWORD *)(v46 + 56);
        v91 = *(_QWORD *)(v46 + 8);
        v92 = v47;
        __asm { BR              X11 }
      }
    }
    sub_1000E0F24(v93);
    if (v27)
      goto LABEL_20;
LABEL_21:
    v25 = __OFADD__(v35++, 1);
    if (v25)
    {
      __break(1u);
      JUMPOUT(0x1001D00B4);
    }
    if (v35 >= v85)
      goto LABEL_50;
    v40 = *(_QWORD *)(v84 + 8 * v35);
    if (!v40)
      break;
LABEL_40:
    v27 = (v40 - 1) & v40;
  }
  sub_1001D2E7C();
  if (v41 == v25)
    goto LABEL_50;
  sub_1001D2E70();
  if (v40)
    goto LABEL_39;
  sub_1001D2E7C();
  if (v41 == v25)
    goto LABEL_50;
  sub_1001D2E70();
  if (v40)
    goto LABEL_39;
  sub_1001D2E7C();
  if (v41 == v25)
    goto LABEL_50;
  sub_1001D2E70();
  if (v40)
    goto LABEL_39;
  sub_1001D2E7C();
  if (v41 == v25)
    goto LABEL_50;
  sub_1001D2E70();
  if (v40)
    goto LABEL_39;
  sub_1001D2E7C();
  if (v41 == v25)
    goto LABEL_50;
  sub_1001D2E70();
  if (v40)
  {
LABEL_39:
    v35 = v42;
    goto LABEL_40;
  }
  while (1)
  {
    v35 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      JUMPOUT(0x1001D0124);
    }
    if (v35 >= v85)
      break;
    v40 = *(_QWORD *)(v84 + 8 * v35);
    ++v42;
    if (v40)
      goto LABEL_40;
  }
LABEL_50:
  sub_1000955CC();
  swift_bridgeObjectRelease(v30);
  sub_1001D2BA0(v65, (uint64_t)&v93);
  sub_1001D2BA0(v67, (uint64_t)&v89);
  sub_1001D2BA0(v13, (uint64_t)&v88);
  sub_1001D2BA0(v64, (uint64_t)&v87);
  sub_1001D2BA0(v63, (uint64_t)&v90);
  sub_10000E4E0();
}

uint64_t sub_1001D03EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[9];
  _QWORD v61[4];
  unint64_t v62;

  v2 = type metadata accessor for HIDUniversalSenderID(0);
  v52 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v49 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v49 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v49 - v13;
  __chkstk_darwin(v12);
  v51 = (uint64_t)&v49 - v15;
  v16 = *(_QWORD *)(a1 + 16);
  sub_100041014((unint64_t *)&qword_1002B09E8, v17, (uint64_t)&protocol conformance descriptor for HIDUniversalSenderID);
  v58 = v2;
  v18 = Set.init(minimumCapacity:)(v16);
  sub_100043078(v61, a1);
  v53 = v61[0];
  v49 = v61[1];
  v56 = v61[3];
  v19 = v62;
  v50 = (unint64_t)(v61[2] + 64) >> 6;
  if (!v62)
    goto LABEL_3;
LABEL_2:
  v57 = (v19 - 1) & v19;
  for (i = __clz(__rbit64(v19)) | (v56 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v25 = *(_QWORD *)(v52 + 72);
    v26 = v51;
    sub_1000E0E9C(*(_QWORD *)(v53 + 48) + v25 * i, v51);
    sub_1000E0EE0(v26, (uint64_t)v14);
    Hasher.init(_seed:)(v60, *(_QWORD *)(v18 + 40));
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100041014(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v18);
    v54 = v28;
    v55 = v27;
    dispatch thunk of Hashable.hash(into:)(v60, v27, v28);
    v29 = *(int *)(v58 + 20);
    Hasher._combine(_:)(*(_QWORD *)&v14[v29]);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v18 + 32);
    v32 = v30 & ~v31;
    if (((*(_QWORD *)(v18 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
    {
      v33 = ~v31;
      while (1)
      {
        sub_1000E0E9C(*(_QWORD *)(v18 + 48) + v32 * v25, (uint64_t)v5);
        if ((static UUID.== infix(_:_:)(v5, v14) & 1) != 0
          && *(_QWORD *)&v5[*(int *)(v58 + 20)] == *(_QWORD *)&v14[v29])
        {
          break;
        }
        sub_1000E0F24((uint64_t)v5);
        v32 = (v32 + 1) & v33;
        if (((*(_QWORD *)(v18 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
          goto LABEL_24;
      }
      sub_1000E0F24((uint64_t)v5);
      v37 = v18;
      goto LABEL_38;
    }
LABEL_24:
    swift_bridgeObjectRelease(v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    sub_1000E0E9C((uint64_t)v14, (uint64_t)v11);
    v59 = v18;
    v35 = *(_QWORD *)(v18 + 16);
    if (*(_QWORD *)(v18 + 24) <= v35)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_10011F480();
LABEL_36:
    v18 = v59;
    *(_QWORD *)(v59 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v32;
    sub_1000E0EE0((uint64_t)v11, *(_QWORD *)(v18 + 48) + v32 * v25);
    v45 = *(_QWORD *)(v18 + 16);
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    if (v46)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    *(_QWORD *)(v18 + 16) = v47;
    v37 = 0x8000000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v37);
    sub_1000E0F24((uint64_t)v14);
    v19 = v57;
    if (v57)
      goto LABEL_2;
LABEL_3:
    v21 = v56 + 1;
    if (__OFADD__(v56, 1))
      goto LABEL_42;
    if (v21 >= v50)
      goto LABEL_40;
    v22 = *(_QWORD *)(v49 + 8 * v21);
    v23 = v56 + 1;
    if (!v22)
    {
      v23 = v56 + 2;
      if (v56 + 2 >= v50)
        goto LABEL_40;
      v22 = *(_QWORD *)(v49 + 8 * v23);
      if (!v22)
      {
        v23 = v56 + 3;
        if (v56 + 3 >= v50)
          goto LABEL_40;
        v22 = *(_QWORD *)(v49 + 8 * v23);
        if (!v22)
        {
          v23 = v56 + 4;
          if (v56 + 4 >= v50)
            goto LABEL_40;
          v22 = *(_QWORD *)(v49 + 8 * v23);
          if (!v22)
          {
            v23 = v56 + 5;
            if (v56 + 5 >= v50)
              goto LABEL_40;
            v22 = *(_QWORD *)(v49 + 8 * v23);
            if (!v22)
            {
              v24 = v56 + 6;
              while (v24 < v50)
              {
                v22 = *(_QWORD *)(v49 + 8 * v24++);
                if (v22)
                {
                  v23 = v24 - 1;
                  goto LABEL_18;
                }
              }
LABEL_40:
              swift_release();
              return v18;
            }
          }
        }
      }
    }
LABEL_18:
    v56 = v23;
    v57 = (v22 - 1) & v22;
  }
  v36 = v35 + 1;
  if (isUniquelyReferenced_nonNull_native)
    sub_10011BF3C(v36);
  else
    sub_100120C30(v36);
  v39 = v54;
  v38 = v55;
  v40 = v59;
  Hasher.init(_seed:)(v60, *(_QWORD *)(v59 + 40));
  dispatch thunk of Hashable.hash(into:)(v60, v38, v39);
  v41 = *(int *)(v58 + 20);
  Hasher._combine(_:)(*(_QWORD *)&v11[v41]);
  v42 = Hasher._finalize()();
  v43 = -1 << *(_BYTE *)(v40 + 32);
  v32 = v42 & ~v43;
  if (((*(_QWORD *)(v40 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    goto LABEL_36;
  v44 = ~v43;
  while (1)
  {
    sub_1000E0E9C(*(_QWORD *)(v40 + 48) + v32 * v25, (uint64_t)v8);
    if ((static UUID.== infix(_:_:)(v8, v11) & 1) != 0 && *(_QWORD *)&v8[*(int *)(v58 + 20)] == *(_QWORD *)&v11[v41])
      break;
    sub_1000E0F24((uint64_t)v8);
    v32 = (v32 + 1) & v44;
    if (((*(_QWORD *)(v40 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      goto LABEL_36;
  }
LABEL_43:
  sub_1000E0F24((uint64_t)v8);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v58);
  __break(1u);
  return result;
}

uint64_t sub_1001D0970(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[9];
  _QWORD v59[4];
  unint64_t v60;

  v56 = type metadata accessor for HIDUniversalSenderID(0);
  v50 = *(_QWORD *)(v56 - 8);
  v4 = __chkstk_darwin(v56);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v47 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v47 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v47 - v14;
  __chkstk_darwin(v13);
  v49 = (uint64_t)&v47 - v16;
  sub_100043078(v59, a1);
  v51 = v59[0];
  v47 = v59[1];
  v54 = v59[3];
  v17 = v60;
  v48 = (unint64_t)(v59[2] + 64) >> 6;
  if (!v60)
    goto LABEL_3;
LABEL_2:
  v55 = (v17 - 1) & v17;
  for (i = __clz(__rbit64(v17)) | (v54 << 6); ; i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    v23 = *(_QWORD *)(v50 + 72);
    v24 = v49;
    sub_1000E0E9C(*(_QWORD *)(v51 + 48) + v23 * i, v49);
    sub_1000E0EE0(v24, (uint64_t)v15);
    Hasher.init(_seed:)(v58, *(_QWORD *)(a2 + 40));
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100041014(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(a2);
    v52 = v26;
    v53 = v25;
    dispatch thunk of Hashable.hash(into:)(v58, v25, v26);
    v27 = *(int *)(v56 + 20);
    Hasher._combine(_:)(*(_QWORD *)&v15[v27]);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(a2 + 32);
    v30 = v28 & ~v29;
    if (((*(_QWORD *)(a2 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
    {
      v31 = ~v29;
      while (1)
      {
        sub_1000E0E9C(*(_QWORD *)(a2 + 48) + v30 * v23, (uint64_t)v6);
        if ((static UUID.== infix(_:_:)(v6, v15) & 1) != 0
          && *(_QWORD *)&v6[*(int *)(v56 + 20)] == *(_QWORD *)&v15[v27])
        {
          break;
        }
        sub_1000E0F24((uint64_t)v6);
        v30 = (v30 + 1) & v31;
        if (((*(_QWORD *)(a2 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          goto LABEL_24;
      }
      sub_1000E0F24((uint64_t)v6);
      v35 = a2;
      goto LABEL_38;
    }
LABEL_24:
    swift_bridgeObjectRelease(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
    sub_1000E0E9C((uint64_t)v15, (uint64_t)v12);
    v57 = a2;
    v33 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) <= v33)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_10011F480();
LABEL_36:
    a2 = v57;
    *(_QWORD *)(v57 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v30;
    sub_1000E0EE0((uint64_t)v12, *(_QWORD *)(a2 + 48) + v30 * v23);
    v43 = *(_QWORD *)(a2 + 16);
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    *(_QWORD *)(a2 + 16) = v45;
    v35 = 0x8000000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v35);
    sub_1000E0F24((uint64_t)v15);
    v17 = v55;
    if (v55)
      goto LABEL_2;
LABEL_3:
    v19 = v54 + 1;
    if (__OFADD__(v54, 1))
      goto LABEL_42;
    if (v19 >= v48)
      goto LABEL_40;
    v20 = *(_QWORD *)(v47 + 8 * v19);
    v21 = v54 + 1;
    if (!v20)
    {
      v21 = v54 + 2;
      if (v54 + 2 >= v48)
        goto LABEL_40;
      v20 = *(_QWORD *)(v47 + 8 * v21);
      if (!v20)
      {
        v21 = v54 + 3;
        if (v54 + 3 >= v48)
          goto LABEL_40;
        v20 = *(_QWORD *)(v47 + 8 * v21);
        if (!v20)
        {
          v21 = v54 + 4;
          if (v54 + 4 >= v48)
            goto LABEL_40;
          v20 = *(_QWORD *)(v47 + 8 * v21);
          if (!v20)
          {
            v21 = v54 + 5;
            if (v54 + 5 >= v48)
              goto LABEL_40;
            v20 = *(_QWORD *)(v47 + 8 * v21);
            if (!v20)
            {
              v22 = v54 + 6;
              while (v22 < v48)
              {
                v20 = *(_QWORD *)(v47 + 8 * v22++);
                if (v20)
                {
                  v21 = v22 - 1;
                  goto LABEL_18;
                }
              }
LABEL_40:
              swift_release();
              return a2;
            }
          }
        }
      }
    }
LABEL_18:
    v54 = v21;
    v55 = (v20 - 1) & v20;
  }
  v34 = v33 + 1;
  if (isUniquelyReferenced_nonNull_native)
    sub_10011BF3C(v34);
  else
    sub_100120C30(v34);
  v37 = v52;
  v36 = v53;
  v38 = v57;
  Hasher.init(_seed:)(v58, *(_QWORD *)(v57 + 40));
  dispatch thunk of Hashable.hash(into:)(v58, v36, v37);
  v39 = *(int *)(v56 + 20);
  Hasher._combine(_:)(*(_QWORD *)&v12[v39]);
  v40 = Hasher._finalize()();
  v41 = -1 << *(_BYTE *)(v38 + 32);
  v30 = v40 & ~v41;
  if (((*(_QWORD *)(v38 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    goto LABEL_36;
  v42 = ~v41;
  while (1)
  {
    sub_1000E0E9C(*(_QWORD *)(v38 + 48) + v30 * v23, (uint64_t)v9);
    if ((static UUID.== infix(_:_:)(v9, v12) & 1) != 0 && *(_QWORD *)&v9[*(int *)(v56 + 20)] == *(_QWORD *)&v12[v39])
      break;
    sub_1000E0F24((uint64_t)v9);
    v30 = (v30 + 1) & v42;
    if (((*(_QWORD *)(v38 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
      goto LABEL_36;
  }
LABEL_43:
  sub_1000E0F24((uint64_t)v9);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
  __break(1u);
  return result;
}

unint64_t sub_1001D0EC0(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 4);
  return sub_1001D0EF4(a1, v3);
}

unint64_t sub_1001D0EF4(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

double sub_1001D0F90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001A90EC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_1000055B0(&qword_1002B5980);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    v12 = *(_QWORD *)(v19 + 48);
    v13 = type metadata accessor for HIDUniversalSenderID(0);
    sub_1000E0F24(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v7);
    v14 = (_OWORD *)(*(_QWORD *)(v19 + 56) + 80 * v7);
    v15 = v14[1];
    *a2 = *v14;
    a2[1] = v15;
    v16 = v14[3];
    a2[2] = v14[2];
    a2[3] = v16;
    a2[4] = v14[4];
    sub_100041014((unint64_t *)&qword_1002B09E8, type metadata accessor for HIDUniversalSenderID, (uint64_t)&protocol conformance descriptor for HIDUniversalSenderID);
    _NativeDictionary._delete(at:)(v7, v19, v13, &type metadata for HIDReportAccumulator.Value);
    v17 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    result = 0.0;
    *a2 = xmmword_100222BC0;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
  }
  return result;
}

uint64_t sub_1001D1100(unsigned int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_1001D0EC0(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  v6 = sub_1001AAEF8();
  sub_1001D2F08();
  v8 = *(_QWORD *)(v7 + 24);
  sub_1000055B0(&qword_1002B5978);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(v6, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v5);
  type metadata accessor for AnyCancellable(0);
  _NativeDictionary._delete(at:)(v5, v11, &type metadata for Int32);
  *v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

double sub_1001D11C0(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_1001D137C(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001D122C(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  char v5;
  uint64_t v6;
  uint64_t v8;

  swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_1001AB17C();
  sub_1001D14D4(a1, a2, v5);
  v6 = *v2;
  *v2 = v8;
  return sub_1001D2C88(v6);
}

void sub_1001D127C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1001A8EC4(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000055B0(&qword_1002B52F8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_1001A8EC4(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7] + 56 * v14;
    v20 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v19 = *(_OWORD *)a1;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(v19 + 47) = *(_DWORD *)(a1 + 47);
    sub_10002D8A4();
  }
  else
  {
    sub_1001D15D0(v14, a2, a1, v18);
  }
}

uint64_t *sub_1001D137C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *result;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v12 = sub_1001A90EC(a2);
  v14 = v11[2];
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_9;
  }
  v17 = v12;
  v18 = v13;
  sub_1000055B0(&qword_1002B5980);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16))
    goto LABEL_5;
  v19 = sub_1001A90EC(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_9:
    result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v17 = v19;
LABEL_5:
  v21 = *v4;
  if ((v18 & 1) != 0)
    return sub_1001D2998(a1, (uint64_t *)(v21[7] + 80 * v17));
  sub_1000E0E9C(a2, (uint64_t)v10);
  return (uint64_t *)sub_1001D1630(v17, (uint64_t)v10, a1, v21);
}

unint64_t sub_1001D14D4(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1001D0EC0(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000055B0(&qword_1002B5978);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_1001D0EC0(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_1001D16D0(v14, a2, a1, v18);
  v19 = v18[7];
  result = swift_release();
  *(_QWORD *)(v19 + 8 * v14) = a1;
  return result;
}

unint64_t sub_1001D15D0(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = a4[7] + 56 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v4 + 47) = *(_DWORD *)(a3 + 47);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_1001D1630(unint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for HIDUniversalSenderID(0);
  sub_1000E0EE0(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  result = memcpy((void *)(a4[7] + 80 * a1), a3, 0x50uLL);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_1001D16D0(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

void sub_1001D1714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D1774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  BOOL *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  __int16 v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v40 = v37;
  v41 = v38;
  v42 = BYTE2(v38);
  v43 = BYTE3(v38);
  v44 = BYTE4(v38);
  v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x1001D18F8);
  }
  result = memcmp(v36, &v40, BYTE6(v38));
  *v35 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1001D1930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1001D1714(v11, v17, a4, a5);
  sub_100022AEC(a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_1001D19F8(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_1001D1A94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v2 = v1;
  v4 = type metadata accessor for HIDUniversalSenderID(0);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v70 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000055B0(&qword_1002B5988);
  v6 = static _DictionaryStorage.copy(original:)(a1);
  v7 = v6;
  v8 = 0;
  v57 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v49 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v50 = (unint64_t)(v10 + 63) >> 6;
  v54 = xmmword_10022DA00;
  v53 = xmmword_10022DA10;
  v52 = xmmword_10022DA20;
  v51 = v6 + 64;
  v55 = v6;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v67 = v2;
  v58 = (v12 - 1) & v12;
  v59 = v8;
  for (i = __clz(__rbit64(v12)) | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    v18 = v57;
    v19 = *(_QWORD *)(v57 + 48);
    v69 = *(_QWORD *)(v56 + 72) * i;
    v20 = i;
    v66 = i;
    sub_1000E0E9C(v19 + v69, v70);
    v21 = *(_QWORD *)(v18 + 56);
    v68 = 5 * v20;
    v22 = (uint64_t *)(v21 + 80 * v20);
    v23 = *v22;
    v62 = v22[1];
    v24 = v62;
    v63 = v23;
    v25 = v22[2];
    v61 = v22[3];
    v26 = v22[4];
    v27 = v22[5];
    v64 = v25;
    v65 = v26;
    v28 = v22[6];
    v29 = v22[7];
    v30 = v22[8];
    v71 = v22[9];
    v31 = type metadata accessor for __DataStorage(0);
    v60 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    sub_10002517C(v23, v24);
    v32 = v25;
    v33 = v61;
    sub_10002517C(v32, v61);
    v34 = v26;
    v35 = v27;
    sub_10002517C(v34, v27);
    sub_10002517C(v28, v29);
    sub_10002517C(v30, v71);
    v36 = __DataStorage.init(length:)(31);
    v72 = 0x1F00000000;
    v73 = v36;
    v37 = v67;
    sub_1000E6A84((int *)&v72, 0);
    v73 |= 0x4000000000000000uLL;
    Data._Representation.subscript.setter(1, 0);
    v38 = v72;
    v67 = v73;
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v39 = __DataStorage.init(length:)(17);
    v72 = 0x1100000000;
    v73 = v39;
    sub_1000E6A84((int *)&v72, 0);
    v2 = v37;
    v73 |= 0x4000000000000000uLL;
    Data._Representation.subscript.setter(5, 0);
    sub_100022AEC(v63, v62);
    sub_100022AEC(v64, v33);
    sub_100022AEC(v65, v35);
    sub_100022AEC(v28, v29);
    sub_100022AEC(v30, v71);
    v40 = v72;
    v41 = v73;
    *(_QWORD *)(v51 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
    v7 = v55;
    sub_1000E0EE0(v70, *(_QWORD *)(v55 + 48) + v69);
    v42 = *(_QWORD *)(v7 + 56) + 16 * v68;
    v43 = v67;
    *(_QWORD *)v42 = v38;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v53;
    *(_OWORD *)(v42 + 16) = v54;
    *(_OWORD *)(v42 + 32) = v44;
    *(_OWORD *)(v42 + 48) = v52;
    *(_QWORD *)(v42 + 64) = v40;
    *(_QWORD *)(v42 + 72) = v41;
    v45 = *(_QWORD *)(v7 + 16);
    v14 = __OFADD__(v45, 1);
    v46 = v45 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    *(_QWORD *)(v7 + 16) = v46;
    v12 = v58;
    v8 = v59;
    if (v58)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v8, 1);
    v15 = v8 + 1;
    if (v14)
      goto LABEL_25;
    if (v15 >= v50)
      break;
    v16 = *(_QWORD *)(v49 + 8 * v15);
    if (v16)
      goto LABEL_15;
    v17 = v15 + 1;
    if (v15 + 1 >= v50)
      return v7;
    v16 = *(_QWORD *)(v49 + 8 * v17);
    if (!v16)
    {
      v17 = v15 + 2;
      if (v15 + 2 >= v50)
        return v7;
      v16 = *(_QWORD *)(v49 + 8 * v17);
      if (!v16)
      {
        v17 = v15 + 3;
        if (v15 + 3 >= v50)
          return v7;
        v16 = *(_QWORD *)(v49 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            v15 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_26;
            if (v15 >= v50)
              return v7;
            v16 = *(_QWORD *)(v49 + 8 * v15);
            ++v17;
            if (v16)
              goto LABEL_15;
          }
        }
      }
    }
    v15 = v17;
LABEL_15:
    v67 = v2;
    v58 = (v16 - 1) & v16;
    v59 = v15;
  }
  return v7;
}

uint64_t sub_1001D1F54(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_100022AEC(result, a2);
    sub_100022AEC(a3, a4);
    sub_100022AEC(a5, a6);
    sub_100022AEC(a7, a8);
    return sub_100022AEC(a9, a10);
  }
  return result;
}

uint64_t sub_1001D1FE0(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v10, v12);
    sub_1001D257C((uint64_t)v12, v10, v6, a2, a3);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (_QWORD *)swift_slowAlloc(v11, -1);
    sub_1001194A8(0, v10, v14);
    sub_1001D257C((uint64_t)v14, v10, v6, a2, a3);
    a3 = v15;
    swift_slowDealloc(v14, -1, -1);
  }
  return a3;
}

uint64_t destroy for HIDReportAccumulator(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  return sub_100005988(v1);
}

uint64_t initializeWithCopy for HIDReportAccumulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *, uint64_t);

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain(v3);
  v7(a1 + 8, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for HIDReportAccumulator(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100021C68(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for HIDReportAccumulator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  sub_100005988((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for HIDReportAccumulator()
{
  return &type metadata for HIDReportAccumulator;
}

uint64_t destroy for HIDReportAccumulator.Value(uint64_t a1)
{
  sub_100022AEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100022AEC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_100022AEC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_100022AEC(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return sub_100022AEC(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t *initializeWithCopy for HIDReportAccumulator.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_10002517C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10002517C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10002517C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10002517C(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v13 = a2[8];
  v12 = a2[9];
  sub_10002517C(v13, v12);
  a1[8] = v13;
  a1[9] = v12;
  return a1;
}

uint64_t *assignWithCopy for HIDReportAccumulator.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *a2;
  v5 = a2[1];
  sub_10002517C(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100022AEC(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10002517C(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100022AEC(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10002517C(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100022AEC(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10002517C(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_100022AEC(v18, v19);
  v21 = a2[8];
  v20 = a2[9];
  sub_10002517C(v21, v20);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v21;
  a1[9] = v20;
  sub_100022AEC(v22, v23);
  return a1;
}

uint64_t *assignWithTake for HIDReportAccumulator.Value(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100022AEC(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100022AEC(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100022AEC(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100022AEC(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_100022AEC(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDReportAccumulator.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for HIDReportAccumulator.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDReportAccumulator.Value()
{
  return &type metadata for HIDReportAccumulator.Value;
}

ValueMetadata *type metadata accessor for NullTarget()
{
  return &type metadata for NullTarget;
}

void sub_1001D257C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;

  v54 = a4;
  v55 = a5;
  v46[0] = a2;
  v47 = a1;
  v53 = sub_1000055B0(&qword_1002B2978);
  __chkstk_darwin(v53);
  v52 = (uint64_t)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HIDUniversalSenderID(0);
  v51 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v66 = (uint64_t)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v57 = a3;
  v10 = *(_QWORD *)(a3 + 64);
  v48 = 0;
  v49 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v50 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v64 = (v13 - 1) & v13;
      v65 = v9;
      v14 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_20;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v50)
      goto LABEL_24;
    v16 = *(_QWORD *)(v49 + 8 * v15);
    v17 = v9 + 1;
    if (!v16)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v50)
        goto LABEL_24;
      v16 = *(_QWORD *)(v49 + 8 * v17);
      if (!v16)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v50)
          goto LABEL_24;
        v16 = *(_QWORD *)(v49 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_19:
    v64 = (v16 - 1) & v16;
    v65 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_20:
    v19 = v57;
    v20 = v66;
    sub_1000E0E9C(*(_QWORD *)(v57 + 48) + *(_QWORD *)(v51 + 72) * v14, v66);
    v21 = *(_QWORD *)(v19 + 56);
    v56 = v14;
    v22 = (uint64_t *)(v21 + 80 * v14);
    v23 = *v22;
    v67 = v22[1];
    v25 = v22[2];
    v24 = v22[3];
    v27 = v22[4];
    v26 = v22[5];
    v29 = v22[6];
    v28 = v22[7];
    v31 = v22[8];
    v30 = v22[9];
    v58 = v31;
    v68 = v30;
    v32 = v20;
    v33 = v52;
    sub_1000E0E9C(v32, v52);
    v34 = (uint64_t *)(v33 + *(int *)(v53 + 48));
    v60 = v27;
    v61 = v23;
    v35 = v67;
    *v34 = v23;
    v34[1] = v35;
    v34[2] = v25;
    v34[3] = v24;
    v34[4] = v27;
    v34[5] = v26;
    v59 = v29;
    v34[6] = v29;
    v34[7] = v28;
    v34[8] = v31;
    v36 = v68;
    v34[9] = v68;
    sub_10002517C(v23, v35);
    v37 = v25;
    v38 = v25;
    v62 = v25;
    v39 = v24;
    sub_10002517C(v37, v24);
    v63 = v26;
    sub_10002517C(v27, v26);
    sub_10002517C(v29, v28);
    v40 = v58;
    sub_10002517C(v58, v36);
    v41 = v61;
    v42 = v67;
    sub_10002517C(v61, v67);
    sub_10002517C(v38, v39);
    v43 = v60;
    sub_10002517C(v60, v26);
    v44 = v59;
    sub_10002517C(v59, v28);
    sub_10002517C(v40, v36);
    LOBYTE(v36) = v54(v33);
    sub_1001D2958(v33);
    sub_100022AEC(v41, v42);
    sub_100022AEC(v62, v39);
    sub_100022AEC(v43, v63);
    sub_100022AEC(v44, v28);
    sub_100022AEC(v40, v68);
    sub_1000E0F24(v66);
    v13 = v64;
    v9 = v65;
    if ((v36 & 1) == 0)
    {
      *(_QWORD *)(v47 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
      if (__OFADD__(v48++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1001DBAF4();
        return;
      }
    }
  }
  v18 = v9 + 4;
  if (v9 + 4 >= v50)
    goto LABEL_24;
  v16 = *(_QWORD *)(v49 + 8 * v18);
  if (v16)
  {
    v17 = v9 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v50)
      goto LABEL_24;
    v16 = *(_QWORD *)(v49 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1001D2958(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002B2978);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1001D2998(_OWORD *a1, uint64_t *a2)
{
  assignWithTake for HIDReportAccumulator.Value(a2, a1);
  return a2;
}

uint64_t *sub_1001D29CC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  sub_10002517C(*a1, a1[1]);
  sub_10002517C(v2, v3);
  sub_10002517C(v4, v5);
  sub_10002517C(v6, v7);
  sub_10002517C(v8, v9);
  return a1;
}

uint64_t sub_1001D2A5C(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001D2A64(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return sub_1001D19F8(a1, a2, a3, a4);
}

void sub_1001D2A70()
{
  uint64_t v0;

  sub_1001CA80C((uint64_t *)(v0 - 168), (uint64_t *)(v0 - 248), *(_QWORD *)(v0 - 304), (*(_DWORD *)(v0 - 312) & 1) == 0);
}

uint64_t sub_1001D2A9C(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2AA4(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001D2AAC(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2AB4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1001D2AC0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1001D2ACC(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2AD4(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

void sub_1001D2ADC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 119) = *(_QWORD *)(v0 - 656);
  *(_BYTE *)(v0 - 118) = *(_QWORD *)(v0 - 648);
  *(_BYTE *)(v0 - 117) = *(_QWORD *)(v0 - 640);
  *(_BYTE *)(v0 - 116) = *(_QWORD *)(v0 - 664);
  *(_BYTE *)(v0 - 115) = *(_QWORD *)(v0 - 632);
  *(_BYTE *)(v0 - 114) = *(_QWORD *)(v0 - 624);
  *(_BYTE *)(v0 - 113) = *(_QWORD *)(v0 - 616);
}

uint64_t sub_1001D2B38(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2B40()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 264);
}

uint64_t sub_1001D2B5C(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2B64@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return a1(v2, v3, v1, v4, v5);
}

void sub_1001D2B80()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = v0;
}

uint64_t sub_1001D2B8C(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001D2B94@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1001D2BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100022AEC(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1001D2BA8@<X0>(char a1@<W8>)
{
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;

  *(_BYTE *)(v7 - 128) = v6;
  *(_BYTE *)(v7 - 127) = v5;
  *(_BYTE *)(v7 - 126) = *(_QWORD *)(v7 - 456);
  *(_BYTE *)(v7 - 125) = v4;
  *(_BYTE *)(v7 - 124) = v3;
  *(_BYTE *)(v7 - 123) = v2;
  *(_BYTE *)(v7 - 122) = v1;
  *(_BYTE *)(v7 - 121) = a1;
  return memcmp((const void *)(v7 - 120), (const void *)(v7 - 134), *(_QWORD *)(v7 - 328));
}

uint64_t sub_1001D2BE4@<X0>(char a1@<W8>)
{
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;

  *(_BYTE *)(v7 - 128) = v6;
  *(_BYTE *)(v7 - 127) = v5;
  *(_BYTE *)(v7 - 126) = *(_QWORD *)(v7 - 440);
  *(_BYTE *)(v7 - 125) = v4;
  *(_BYTE *)(v7 - 124) = v3;
  *(_BYTE *)(v7 - 123) = v2;
  *(_BYTE *)(v7 - 122) = v1;
  *(_BYTE *)(v7 - 121) = a1;
  return memcmp((const void *)(v7 - 120), (const void *)(v7 - 134), *(_QWORD *)(v7 - 320));
}

uint64_t sub_1001D2C20(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

void sub_1001D2C28(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + a1;
  if (v1)
    v4 = v3;
  else
    v4 = 0;
  sub_1001D1714(v1, v4, *(_QWORD *)(v2 - 392), *(_QWORD *)(v2 - 440));
}

uint64_t sub_1001D2C60(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

_QWORD *sub_1001D2C68()
{
  _QWORD *v0;

  return sub_10000DBE4(v0, v0[3]);
}

uint64_t sub_1001D2C88(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1001D2C98(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

uint64_t sub_1001D2CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return a3(a1, a2, *(_QWORD *)(v5 - 144), v3, v4);
}

uint64_t sub_1001D2CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1001D1930(a1, a2, a3, a4, a5);
}

uint64_t sub_1001D2CBC(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

void sub_1001D2CC4()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 111) = *(_QWORD *)(v0 - 608);
  *(_BYTE *)(v0 - 110) = *(_QWORD *)(v0 - 600);
  *(_BYTE *)(v0 - 109) = *(_QWORD *)(v0 - 592);
  *(_BYTE *)(v0 - 108) = *(_QWORD *)(v0 - 584);
}

uint64_t sub_1001D2D04@<X0>(char a1@<W8>)
{
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 125) = v4;
  *(_BYTE *)(v5 - 124) = v3;
  *(_BYTE *)(v5 - 123) = v2;
  *(_BYTE *)(v5 - 122) = v1;
  *(_BYTE *)(v5 - 121) = a1;
  return memcmp((const void *)(v5 - 120), (const void *)(v5 - 134), *(_QWORD *)(v5 - 344));
}

_QWORD *sub_1001D2D2C()
{
  _QWORD *v0;

  return sub_10000DBE4(v0, v0[3]);
}

uint64_t sub_1001D2D4C@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  return memcmp(a1, a2, *(_QWORD *)(a3 - 256));
}

uint64_t sub_1001D2D70(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002517C(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1001D2D80()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1001D2D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return static Data.== infix(_:_:)(v4, v5, a3, a4);
}

uint64_t sub_1001D2D9C(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 120), v3, a3);
}

uint64_t sub_1001D2DA8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002517C(v0, *(_QWORD *)(v1 - 168));
}

uint64_t sub_1001D2DF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001D2E0C@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1001D2E18()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1001D2E2C(uint64_t result, unint64_t a2)
{
  return sub_10002517C(result, a2);
}

uint64_t sub_1001D2E50()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1001D2E60(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10002517C(v2, a2);
}

void sub_1001D2E98(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = a1;
  sub_1000E6A84((int *)(v1 - 208), 0);
}

uint64_t sub_1001D2EC4(uint64_t a1)
{
  unint64_t v1;

  return sub_10002517C(a1, v1);
}

uint64_t sub_1001D2ECC()
{
  return __DataStorage._bytes.getter();
}

uint64_t sub_1001D2ED8()
{
  return __DataStorage._length.getter();
}

uint64_t sub_1001D2EE4@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_1001D2EF0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_1001D2EFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 448) = v0;
  return __DataStorage._length.getter();
}

void sub_1001D2F08()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001D2F1C()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_1001D2F28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 200) | 0x4000000000000000;
  *(_QWORD *)(v0 - 208) = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 200) = v1;
}

void sub_1001D2F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 - 120) = v0;
  *(_QWORD *)(v3 - 112) = v2;
  v4 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v4;
}

uint64_t sub_1001D2F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_1000E0E9C(v1 + v2 * a1, v3);
}

EnsembleHID::ButtonUsage_optional __swiftcall ButtonUsage.init(rawValue:)(Swift::UInt8 rawValue)
{
  EnsembleHID::ButtonUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

void *ButtonUsage.page.unsafeMutableAddressor()
{
  return &static ButtonUsage.page;
}

EnsembleHID::ButtonUsage_optional __swiftcall ButtonUsage.init(_:)(Swift::Int a1)
{
  EnsembleHID::ButtonUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::ButtonUsage_optional __swiftcall ButtonUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  EnsembleHID::ButtonUsage_optional v2;

  sub_1001ADD54();
  return v2;
}

EnsembleHID::ButtonUsage_optional __swiftcall ButtonUsage.init(button:)(Swift::Int button)
{
  EnsembleHID::ButtonUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::ButtonUsage_optional sub_1001D2FF8@<W0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, Swift::UInt8 *a3@<X8>)
{
  EnsembleHID::ButtonUsage_optional result;

  result = ButtonUsage.init(page:usage:)(a1, a2);
  *a3 = result.value.rawValue;
  a3[1] = result.is_nil;
  return result;
}

EnsembleHID::ButtonUsage_optional sub_1001D3024@<W0>(Swift::UInt8 *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::ButtonUsage_optional result;

  result = ButtonUsage.init(rawValue:)(*a1);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

void *ButtonUsage.primary.unsafeMutableAddressor()
{
  return &static ButtonUsage.primary;
}

void *ButtonUsage.secondary.unsafeMutableAddressor()
{
  return &static ButtonUsage.secondary;
}

void *ButtonUsage.tertiary.unsafeMutableAddressor()
{
  return &static ButtonUsage.tertiary;
}

unint64_t sub_1001D307C()
{
  unint64_t result;

  result = qword_1002B59B8;
  if (!qword_1002B59B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonUsage, &type metadata for ButtonUsage);
    atomic_store(result, (unint64_t *)&qword_1002B59B8);
  }
  return result;
}

unint64_t sub_1001D30BC()
{
  unint64_t result;

  result = qword_1002B59C0;
  if (!qword_1002B59C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonUsage, &type metadata for ButtonUsage);
    atomic_store(result, (unint64_t *)&qword_1002B59C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonUsage()
{
  return &type metadata for ButtonUsage;
}

EnsembleHID::PointerButtonMode __swiftcall PointerButtonMode.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3)
    LOBYTE(rawValue) = 2;
  return (char)rawValue;
}

void sub_1001D3118()
{
  unsigned __int8 *v0;

  sub_1001DCBD0(*v0);
}

void sub_1001D3120(uint64_t a1)
{
  sub_1001DCC7C(a1);
}

uint64_t sub_1001D3128@<X0>(Swift::Int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = PointerButtonMode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D3150@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AppleVendorKeyboardUsage.usage.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1001D3178()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B59C8);
  sub_100006FB4(v0, (uint64_t)qword_1002B59C8);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1145653334, 0xE400000000000000);
}

uint64_t PointerGesture.buttonMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = sub_10000B2F8(v1 + 16, (uint64_t)v4, 1);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t PointerGesture.buttonMask.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 24, (uint64_t)v2, 0);
  return *(_QWORD *)(v0 + 24);
}

uint64_t PointerGesture.__allocating_init(useRemoteAcceleration:)(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 33, 7);
  *(_BYTE *)(result + 16) = 2;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 17) = a1;
  return result;
}

uint64_t PointerGesture.init(useRemoteAcceleration:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = 2;
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 17) = a1;
  return v1;
}

unint64_t sub_1001D32A4(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  _BYTE v5[24];

  sub_10000B2F8(v1 + 16, (uint64_t)v5, 0);
  if (*(_BYTE *)(v1 + 16) == 1)
    v3 = a1 & 0xFFFFFFFFFFFFFFFCLL | (a1 >> 1) & 1 | (2 * (a1 & 1));
  else
    v3 = a1;
  if (*(_BYTE *)(v1 + 16))
    return v3;
  else
    return a1 & 0xFFFFFFFFFFFFFFFCLL | (a1 >> 1) & 1;
}

char *PointerGesture.dispatch(report:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  id v13;
  uint64_t v14;
  uint64_t inited;
  unsigned __int8 v16;
  int v17;
  int v18;
  char v19;
  char v20;
  double v21;
  char v22;
  char v23;
  char v24;
  double v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  ValueMetadata *v99;
  void *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  char v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  id v116;
  id v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *result;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135[24];
  char v136[24];
  __int128 v137;
  ValueMetadata *v138;
  _UNKNOWN **v139;
  _QWORD v140[3];
  uint64_t v141;
  uint64_t v142;
  char v143[80];

  v3 = v2;
  sub_1001D3FC0(8);
  sub_1001D3FC0(16);
  mach_absolute_time();
  v6 = sub_1001D3FCC();
  IOHIDEventCreateRelativePointerEvent(v7, v8, v9, v10, 0, v6, v11, v12);
  v13 = sub_1001C5548();

  v14 = sub_1000055B0(&qword_1002B52F0);
  inited = swift_initStackObject(v14, v143);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 56) = &type metadata for PointerEvent;
  *(_QWORD *)(inited + 64) = &protocol witness table for PointerEvent;
  *(_QWORD *)(inited + 32) = v13;
  sub_1001D3D50(inited, (uint64_t)&v137);
  if (!v138)
  {
    swift_bridgeObjectRelease();
    sub_1001B56A0((uint64_t)&v137);
    return (char *)_swiftEmptyArrayStorage;
  }
  sub_100025A50(&v137, (uint64_t)v140);
  swift_bridgeObjectRelease();
  sub_1001D3FC0(88);
  v134 = sub_1001D32A4(v16);
  sub_1001D3FC0(96);
  v18 = v17;
  sub_1001D3FC0(8);
  if (!v19)
  {
    sub_1001D3FC0(16);
    if (!v20)
    {
      sub_1001D40B8(24);
      v21 = sub_1001B5834();
      sub_1001D401C(v21);
      if (v23 ^ v24 | v22)
      {
        sub_1001D40B8(56);
        v25 = sub_1001B5834();
        sub_1001D401C(v25);
        if (v23 ^ v24 | v22)
        {
          sub_10000B2F8(v2 + 24, (uint64_t)v135, 0);
          if (*(_QWORD *)(v2 + 24) == v134 && *(unsigned __int8 *)(v2 + 32) == v18)
          {
            sub_100005988(v140);
            return (char *)_swiftEmptyArrayStorage;
          }
        }
      }
    }
  }
  v26 = *(unsigned __int8 *)(v2 + 32);
  v27 = v18 & ~(_BYTE)v26;
  v130 = v18;
  v28 = v26 & ~v18;
  if (v27)
  {
    if (qword_1002B51C8 != -1)
      swift_once(&qword_1002B51C8, sub_1001D3178);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100006FB4(v29, (uint64_t)qword_1002B59C8);
    v2 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.debug.getter();
    if (sub_1001D400C(v31))
    {
      v32 = (_DWORD *)sub_1001D4084();
      *v32 = 16777472;
      LOBYTE(v137) = v27;
      sub_1001D4074((uint64_t)v32, v33, (uint64_t)(v32 + 1), (uint64_t)v32 + 5);
      sub_1001D3FEC((void *)&_mh_execute_header, v34, v35, "modifiers down: %hhx");
      sub_1001D404C();
    }

  }
  if ((_BYTE)v28)
  {
    if (qword_1002B51C8 != -1)
      swift_once(&qword_1002B51C8, sub_1001D3178);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100006FB4(v36, (uint64_t)qword_1002B59C8);
    v2 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.debug.getter();
    if (sub_1001D400C(v38))
    {
      v39 = (_DWORD *)sub_1001D4084();
      *v39 = 16777472;
      LOBYTE(v137) = v28;
      sub_1001D4074((uint64_t)v39, v40, (uint64_t)(v39 + 1), (uint64_t)v39 + 5);
      sub_1001D3FEC((void *)&_mh_execute_header, v41, v42, "modifiers up: %hhx");
      sub_1001D404C();
    }

  }
  LODWORD(v132) = v28;
  v131 = a1;
  v129 = a2;
  v133 = v3;
  v43 = KeyboardModifierMask.keyboardUsages()(v27);
  v44 = v43;
  v45 = 0;
  v46 = v43 + 56;
  v47 = 1 << v43[32];
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = (id)(v48 & *((_QWORD *)v43 + 7));
  v50 = (char *)_swiftEmptyArrayStorage;
  v51 = (unint64_t)(v47 + 63) >> 6;
  v52 = 40;
  if (!v49)
    goto LABEL_27;
LABEL_26:
  sub_1001D4034();
  while (1)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)v44 + 6) + v53);
    v56 = static DigitizerEventMask.attribute.getter();
    mach_absolute_time();
    v57 = sub_1001D409C();
    IOHIDEventCreateKeyboardEvent(v57, v58, v59, v60, 1, v56);
    v61 = sub_1001C5548();

    v62 = v61;
    if ((sub_1001D4090() & 1) == 0)
      v50 = sub_1001D3FB4(0, *((_QWORD *)v50 + 2) + 1);
    v64 = *((_QWORD *)v50 + 2);
    v63 = *((_QWORD *)v50 + 3);
    if (v64 >= v63 >> 1)
      v50 = sub_1001D3FB4((char *)(v63 > 1), v64 + 1);
    v139 = &protocol witness table for KeyboardEvent;
    v138 = &type metadata for KeyboardEvent;
    *(_QWORD *)&v137 = v2;
    *((_QWORD *)v50 + 2) = v64 + 1;
    sub_1001D40DC();
    if (v49)
      goto LABEL_26;
LABEL_27:
    v54 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      v50 = sub_1001D3FB4(0, *((_QWORD *)v50 + 2) + 1);
      goto LABEL_90;
    }
    if (v54 >= v51)
      goto LABEL_47;
    ++v45;
    if (!*(_QWORD *)&v46[8 * v54])
    {
      v45 = v54 + 1;
      if (v54 + 1 >= v51)
        goto LABEL_47;
      if (!*(_QWORD *)&v46[8 * v45])
      {
        v45 = v54 + 2;
        if (v54 + 2 >= v51)
          goto LABEL_47;
        if (!*(_QWORD *)&v46[8 * v45])
          break;
      }
    }
LABEL_40:
    sub_1001D405C();
  }
  v55 = v54 + 3;
  if (v55 < v51)
  {
    if (!*(_QWORD *)&v46[8 * v55])
    {
      while (1)
      {
        v45 = v55 + 1;
        if (__OFADD__(v55, 1))
          goto LABEL_96;
        if (v45 >= v51)
          goto LABEL_47;
        ++v55;
        if (*(_QWORD *)&v46[8 * v45])
          goto LABEL_40;
      }
    }
    v45 = v55;
    goto LABEL_40;
  }
LABEL_47:
  swift_release();
  v65 = KeyboardModifierMask.keyboardUsages()(v132);
  v66 = v65;
  v45 = 0;
  v67 = 1 << v65[32];
  v68 = -1;
  if (v67 < 64)
    v68 = ~(-1 << v67);
  v69 = v65 + 56;
  v49 = (id)(v68 & *((_QWORD *)v65 + 7));
  v70 = (unint64_t)(v67 + 63) >> 6;
  v52 = 40;
  if (!v49)
    goto LABEL_51;
LABEL_50:
  sub_1001D4034();
  while (1)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)v66 + 6) + v71);
    v74 = static DigitizerEventMask.attribute.getter();
    mach_absolute_time();
    v75 = sub_1001D409C();
    IOHIDEventCreateKeyboardEvent(v75, v76, v77, v78, 0, v74);
    v79 = sub_1001C5548();

    v80 = v79;
    if ((sub_1001D4090() & 1) == 0)
      v50 = sub_1001D3FB4(0, *((_QWORD *)v50 + 2) + 1);
    v82 = *((_QWORD *)v50 + 2);
    v81 = *((_QWORD *)v50 + 3);
    if (v82 >= v81 >> 1)
      v50 = sub_1001D3FB4((char *)(v81 > 1), v82 + 1);
    v139 = &protocol witness table for KeyboardEvent;
    v138 = &type metadata for KeyboardEvent;
    *(_QWORD *)&v137 = v2;
    *((_QWORD *)v50 + 2) = v82 + 1;
    sub_1001D40DC();
    if (v49)
      goto LABEL_50;
LABEL_51:
    v72 = v45 + 1;
    if (__OFADD__(v45, 1))
      goto LABEL_95;
    if (v72 >= v70)
      break;
    ++v45;
    if (!*(_QWORD *)&v69[8 * v72])
    {
      v45 = v72 + 1;
      if (v72 + 1 >= v70)
        break;
      if (!*(_QWORD *)&v69[8 * v45])
      {
        v45 = v72 + 2;
        if (v72 + 2 >= v70)
          break;
        if (!*(_QWORD *)&v69[8 * v45])
        {
          v73 = v72 + 3;
          if (v73 >= v70)
            break;
          if (!*(_QWORD *)&v69[8 * v73])
          {
            while (1)
            {
              v45 = v73 + 1;
              if (__OFADD__(v73, 1))
                goto LABEL_97;
              if (v45 >= v70)
                goto LABEL_71;
              ++v73;
              if (*(_QWORD *)&v69[8 * v45])
                goto LABEL_64;
            }
          }
          v45 = v73;
        }
      }
    }
LABEL_64:
    sub_1001D405C();
  }
LABEL_71:
  swift_release();
  sub_10000B2F8(v133 + 24, (uint64_t)v136, 1);
  v83 = *(_QWORD *)(v133 + 24);
  v132 = v83;
  v84 = v134 & ~v83;
  if (v84)
  {
    v85 = v134 & ~v83;
    do
    {
      if ((v85 & 1) != 0)
      {
        if (HIDWORD(v84))
          goto LABEL_100;
        v86 = mach_absolute_time();
        IOHIDEventCreateButtonEventWithPressure(0, v86, v84, 0, 1.0);
        v87 = sub_1001C5548();

        *(_QWORD *)&v137 = v87;
        HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ButtonEvent, (uint64_t)&protocol witness table for ButtonEvent);
        v89 = v88;
        IOHIDEventSetIntegerValue(v88, 131076, 1);

        v91 = v141;
        v90 = v142;
        v2 = (uint64_t)sub_10000DBE4(v140, v141);
        v138 = &type metadata for ButtonEvent;
        v139 = &protocol witness table for ButtonEvent;
        *(_QWORD *)&v137 = v87;
        dispatch thunk of HIDEventProtocol.append(_:)((uint64_t)&v137, v91, v90);
        sub_1001D40B0();
      }
      v92 = v85 > 1;
      v85 >>= 1;
    }
    while (v92);
  }
  v93 = v132 & ~v134;
  if (v93)
  {
    do
    {
      if ((v93 & 1) != 0)
      {
        v94 = v141;
        v95 = v142;
        v96 = sub_10000DBE4(v140, v141);
        v97 = mach_absolute_time();
        IOHIDEventCreateButtonEventWithPressure(0, v97, 0, 0, 0.0);
        v98 = sub_1001C5548();

        v138 = &type metadata for ButtonEvent;
        v139 = &protocol witness table for ButtonEvent;
        *(_QWORD *)&v137 = v98;
        v2 = (uint64_t)v96;
        dispatch thunk of HIDEventProtocol.append(_:)((uint64_t)&v137, v94, v95);
        sub_1001D40B0();
      }
      v92 = v93 > 1;
      v93 >>= 1;
    }
    while (v92);
  }
  sub_1000445C0((uint64_t)v140, (uint64_t)&v137);
  v99 = v138;
  v100 = v139;
  v101 = sub_10003FEF8((uint64_t)&v137, (uint64_t)v138);
  v102 = __chkstk_darwin(v101);
  v104 = (char *)&v129 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v105 + 16))(v104, v102);
  v106 = (void *)sub_1001D3DB4((uint64_t)v104, (uint64_t)v99, (uint64_t)v100);
  sub_1001D40B0();
  if (!v106)
  {
    __break(1u);
LABEL_100:
    result = (char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(v133 + 17) == 1)
  {
    sub_1001D4000(104);
    if ((v107 & 1) != 0)
    {
      sub_1001D4000(24);
      sub_1001B5834();
      sub_1001D4000(56);
      static HIDFixed.scale.getter();
    }
    else
    {
      sub_1001D40C4(8);
      sub_1001D40C4(16);
    }
    v108 = static HIDEventFlags.accelerated.getter();
    mach_absolute_time();
    v109 = sub_1001D3FCC();
    IOHIDEventCreateRelativePointerEvent(v110, v111, v112, v113, v108, v109, v114, v115);
    v116 = sub_1001C5548();

    *(_QWORD *)&v137 = v106;
    v117 = v116;
    sub_1001D40D0();
    v119 = v118;
    *(_QWORD *)&v137 = v117;
    sub_1001D40D0();
    v121 = v120;
    IOHIDEventAppendEvent(v119, v120, 0);

  }
  *(_QWORD *)&v137 = v106;
  v52 = (uint64_t)&type metadata for PointerEvent;
  v45 = (int64_t)&protocol witness table for PointerEvent;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
  v123 = v122;
  v124 = v134;
  IOHIDEventSetIntegerValue(v122, 1114115, v134);

  v125 = v133;
  *(_QWORD *)(v133 + 24) = v124;
  *(_BYTE *)(v125 + 32) = v130;
  v49 = v106;
  if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
    goto LABEL_98;
LABEL_90:
  v127 = *((_QWORD *)v50 + 2);
  v126 = *((_QWORD *)v50 + 3);
  if (v127 >= v126 >> 1)
    v50 = sub_1001D3FB4((char *)(v126 > 1), v127 + 1);
  v138 = (ValueMetadata *)v52;
  v139 = (_UNKNOWN **)v45;
  *(_QWORD *)&v137 = v49;
  *((_QWORD *)v50 + 2) = v127 + 1;
  sub_100025A50(&v137, (uint64_t)&v50[40 * v127 + 32]);

  sub_100005988(v140);
  return v50;
}

double sub_1001D3D50@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000445C0(a1 + 40 * v2 - 8, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t PointerGesture.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 33, 7);
}

char *sub_1001D3D8C(uint64_t *a1)
{
  return PointerGesture.dispatch(report:)(*a1, a1[1]);
}

uint64_t sub_1001D3DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 32))(v8, v6);
  v9 = dispatch thunk of HIDUsageProtocol.usage.getter(a2, a3);
  v10 = static ReportID.translation.getter();
  if (static HIDUsage.== infix(_:_:)(v9, v10))
  {
    v12 = dispatch thunk of HIDEventProtocol.wrappedValue.getter(a2, a3);
    v11.n128_f64[0] = CGSize.init(_:)(v12);
    v14 = v13;
  }
  else
  {
    v14 = 0;
  }
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, a2, v11);
  return v14;
}

unint64_t sub_1001D3E80()
{
  unint64_t result;

  result = qword_1002B59E0;
  if (!qword_1002B59E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PointerButtonMode, &type metadata for PointerButtonMode);
    atomic_store(result, (unint64_t *)&qword_1002B59E0);
  }
  return result;
}

_UNKNOWN **sub_1001D3EBC()
{
  return &protocol witness table for PointerReport;
}

uint64_t storeEnumTagSinglePayload for PointerButtonMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001D3F14 + 4 * byte_10022DB45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001D3F48 + 4 * asc_10022DB40[v4]))();
}

uint64_t sub_1001D3F48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D3F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D3F58);
  return result;
}

uint64_t sub_1001D3F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D3F6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001D3F70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D3F78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointerButtonMode()
{
  return &type metadata for PointerButtonMode;
}

uint64_t type metadata accessor for PointerGesture()
{
  return objc_opt_self(_TtC11EnsembleHID14PointerGesture);
}

char *sub_1001D3FB4(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_1001C45AC(a1, a2, 1, v2);
}

void sub_1001D3FC0(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1001E0D24(a1, v2, v1);
}

double sub_1001D3FCC()
{
  double v0;

  return v0;
}

void sub_1001D3FEC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 5u);
}

void sub_1001D4000(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_10013E758(a1, v2, v1);
}

BOOL sub_1001D400C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

double sub_1001D401C(double a1)
{
  double v1;

  return fabs(v1 / a1);
}

uint64_t sub_1001D404C()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1001D4074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 256, v4 - 255, a3, a4);
}

uint64_t sub_1001D4084()
{
  return swift_slowAlloc(5, -1);
}

uint64_t sub_1001D4090()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1001D409C()
{
  return 0;
}

uint64_t sub_1001D40B0()
{
  uint64_t v0;

  return sub_100005988((_QWORD *)(v0 - 256));
}

void sub_1001D40B8(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_10013E758(a1, v2, v1);
}

void sub_1001D40C4(char a1)
{
  unint64_t v1;
  uint64_t v2;

  sub_1001E0D24(a1, v2, v1);
}

void sub_1001D40D0()
{
  uint64_t v0;
  uint64_t v1;

  HIDEventProtocol.__bridgedValue.getter(v0, v1);
}

void sub_1001D40DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100025A50((__int128 *)(v4 - 256), v3 + v1 * v2 + 32);

}

void sub_1001D40FC()
{
  sub_1001D443C();
}

void sub_1001D4118()
{
  sub_1001D43BC();
}

void sub_1001D413C()
{
  sub_1001D43BC();
}

void sub_1001D4160()
{
  sub_1001D443C();
}

uint64_t sub_1001D4180(uint64_t a1)
{
  char v1;

  if (*(_QWORD *)(a1 + 16))
  {
    do
      sub_1001D6060();
    while (!v1);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001D41C4(uint64_t a1)
{
  char v1;

  if (*(_QWORD *)(a1 + 16))
  {
    do
      sub_1001D6060();
    while (!v1);
  }
  swift_bridgeObjectRelease();
  return 0;
}

BOOL sub_1001D4208(_DWORD *a1, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

BOOL sub_1001D4234(unsigned __int8 *a1, unsigned __int8 a2)
{
  _BYTE *v2;
  int v3;

  v3 = (*v2 & a2);
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

void sub_1001D4264()
{
  uint64_t v0;
  uint64_t v1;

  sub_1001B58A8();
  ButtonReport.init()();
  sub_1001D5F54(v1, v0);
  sub_1000E14DC();
  sub_10000B350();
}

BOOL sub_1001D42A4(char a1)
{
  return a1 == 0;
}

BOOL sub_1001D42B0(int a1)
{
  return a1 == 0;
}

void sub_1001D42BC()
{
  sub_1001D42EC();
}

void sub_1001D42C8()
{
  sub_1001D42EC();
}

void sub_1001D42D4()
{
  sub_1001D42EC();
}

void sub_1001D42E0()
{
  sub_1001D42EC();
}

void sub_1001D42EC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);

  sub_1001B58A8();
  v2();
  sub_1001D5F54(v1, v0);
  sub_1000E14DC();
  sub_10000B350();
}

uint64_t sub_1001D432C(uint64_t result)
{
  _BYTE *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_1001D433C(uint64_t result)
{
  _DWORD *v1;

  *v1 |= result;
  return result;
}

unint64_t sub_1001D4350(unsigned int a1)
{
  int *v1;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *v1 & a1;
  if (v3)
  {
    *v1 = v2 & ~a1;
    v4 = v2 & a1;
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((unint64_t)(v3 == 0) << 32);
}

uint64_t sub_1001D4390(unsigned __int8 a1)
{
  char *v1;
  char v2;

  v2 = *v1;
  if ((*v1 & a1) != 0)
    *v1 = v2 & ~a1;
  return sub_1001D6054((v2 & a1));
}

void sub_1001D43BC()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(_QWORD, __n128);
  void (*v3)(_QWORD, __n128);
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_1001D5F08();
  v3 = v2;
  v6 = sub_1001D601C(v4, v5);
  v8 = v7;
  v13 = v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = swift_bridgeObjectRetain();
  if (v9)
  {
    v11 = 0;
    while (v11 < v9)
    {
      v12 = v11 + 1;
      v3(*(unsigned __int8 *)(v1 + 32 + v11), v10);
      v9 = *(_QWORD *)(v1 + 16);
      v11 = v12;
      if (v12 == v9)
      {
        v8 = v13;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    sub_1000E49F0();
    *v0 = v6;
    v0[1] = v8;
    sub_1001AB0A0();
  }
}

void sub_1001D443C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1001D5F08();
  v4 = sub_1001D601C(v2, v3);
  v6 = v5;
  v12 = v4;
  v13 = v5;
  v7 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = 0;
    while (v8 < v7)
    {
      v9 = v8 + 1;
      sub_1001D5FD4();
      sub_1001D5FC0();
      sub_1001B3510();
      sub_1001D5FD4();
      v10 = sub_1001D5FC0();
      v11 = sub_1001B3510() | v10;
      Data._Representation.subscript.setter(v11);
      v7 = *(_QWORD *)(v1 + 16);
      v8 = v9;
      if (v9 == v7)
      {
        v4 = v12;
        v6 = v13;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    sub_1000E49F0();
    *v0 = v4;
    v0[1] = v6;
    sub_1001AB0A0();
  }
}

void sub_1001D44E4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = ConsumerReport.init()();
  v6 = v5;
  v10 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = 0;
    while (v8 < v7)
    {
      v9 = v8 + 1;
      ConsumerReport.update(with:)(*(EnsembleHID::ConsumerUsage *)(a1 + 32 + 2 * v8));
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v9;
      if (v9 == v7)
      {
        v6 = v10;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease_n(a1, 2);
    *a2 = v4;
    a2[1] = v6;
  }
}

void sub_1001D4584(uint64_t a1, uint64_t a2)
{
  EnsembleHID::AppleVendorKeyboardUsage v2;
  unsigned int v3;

  v2.rawValue = sub_1001D5F20(a1, a2);
  LOWORD(v3) = AppleVendorKeyboardReport.update(with:)(v2);
  sub_1001D6040(v3);
  sub_10000B350();
}

void sub_1001D45A8(uint64_t a1, uint64_t a2)
{
  EnsembleHID::AppleVendorTopCaseUsage v2;
  unsigned int v3;

  v2.rawValue = sub_1001D5F20(a1, a2);
  LOWORD(v3) = AppleVendorTopCaseReport.update(with:)(v2);
  sub_1001D6040(v3);
  sub_10000B350();
}

void sub_1001D45CC(uint64_t a1, uint64_t a2)
{
  EnsembleHID::KeyboardUsage v2;
  unsigned int v3;

  v2.rawValue = sub_1001D5F20(a1, a2);
  LOWORD(v3) = KeyboardReport.update(with:)(v2);
  sub_1001D6040(v3);
  sub_10000B350();
}

void sub_1001D45F0(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  _WORD *v3;
  EnsembleHID::ConsumerUsage v4;

  v4.rawValue = sub_1001D5F20(a1, a2);
  ConsumerReport.update(with:)(v4);
  *v3 = v2;
  sub_10000B350();
}

uint64_t sub_1001D4618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  EnsembleHID::AppleVendorKeyboardUsage v15;
  EnsembleHID::AppleVendorKeyboardUsage v16;
  BOOL v17;

  sub_1001D5F08();
  sub_1001D5F60(v10, v11);
  sub_1000E1580();
  v12 = 8;
  v13 = 1;
  do
  {
    v14 = v13;
    sub_1001D6010(v12);
    v16.rawValue = v15.rawValue;
    v17 = v15.rawValue > 0x21u || ((1 << v15.rawValue) & 0x30003001ELL) == 0;
    if (!v17 && (*(_WORD *)&AppleVendorKeyboardReport.update(with:)(v15) & 0x100) != 0)
      AppleVendorKeyboardReport.remove(_:)(v16);
    v13 = 0;
    v12 = 16;
  }
  while ((v14 & 1) != 0);
  sub_1000E14DC();
  return sub_1001D5EAC(a9, a10);
}

uint64_t sub_1001D46AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t i;
  EnsembleHID::AppleVendorTopCaseUsage v14;
  char v15;
  char v16;
  Swift::UInt8 rawValue;

  sub_1001D5F08();
  sub_1001D5F60(v10, v11);
  sub_1000E1580();
  v12 = 8;
  for (i = 1; ; ++i)
  {
    sub_1001D6010(v12);
    sub_1001C56B4();
    if (!(!v16 & v15))
      break;
    if (i > 3)
      goto LABEL_9;
LABEL_8:
    v12 += 8;
  }
  rawValue = v14.rawValue;
  if ((*(_WORD *)&sub_1001D6008(v14) & 0x100) != 0)
    AppleVendorTopCaseReport.remove(_:)((EnsembleHID::AppleVendorTopCaseUsage)rawValue);
  if (i < 4)
    goto LABEL_8;
LABEL_9:
  sub_1000E14DC();
  return sub_1001D5EAC(a9, a10);
}

uint64_t sub_1001D4728(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  Swift::UInt16 v4;
  EnsembleHID::ConsumerUsage v5;
  uint64_t v6;
  Swift::UInt16 v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  unint64_t v16;

  sub_1001D5F60(a1, a2);
  sub_1000E1580();
  v3 = 0;
  while (1)
  {
    sub_1001D5F8C((16 * v3) | 8);
    if (!v4)
      break;
    v5.rawValue = v4;
    v6 = v3;
LABEL_10:
    *(EnsembleHID::ConsumerUsage_optional *)&v9 = ConsumerReport.update(with:)(v5);
    if ((v9 & 0x10000) != 0)
    {
      v10 = *v2;
      v11 = v2[1];
      v12 = 24;
      while (1)
      {
        sub_100128154(v12, v10, v11);
        if (v13)
        {
          if (v13 == v5.rawValue)
            break;
        }
        v12 += 16;
        if (v12 == 72)
          goto LABEL_17;
      }
      sub_1000E4F5C(0, v12);
    }
LABEL_17:
    v3 = v6 + 1;
    if (v6 + 1 >= 4)
      goto LABEL_18;
  }
  if (v3 > 2)
    goto LABEL_18;
  v6 = v3 + 1;
  sub_1001D5F8C((16 * (v3 + 1)) | 8);
  if (v7)
  {
LABEL_9:
    v5.rawValue = v7;
    goto LABEL_10;
  }
  v8 = 16 * v3 + 40;
  while (v6 != 3)
  {
    ++v6;
    sub_1001D5F8C(v8);
    v8 += 16;
    if (v7)
      goto LABEL_9;
  }
LABEL_18:
  sub_1000E14DC();
  return sub_1001D5EE0(v15, v16);
}

uint64_t sub_1001D4834(uint64_t a1, unint64_t a2)
{
  char v2;
  char v3;
  char v4;
  EnsembleHID::AppleVendorKeyboardUsage v5;
  EnsembleHID::AppleVendorKeyboardUsage v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;

  sub_1001C0318(a1, a2);
  v2 = 8;
  v3 = 1;
  do
  {
    v4 = v3;
    sub_1001C029C(v2);
    v6.rawValue = v5.rawValue;
    v7 = v5.rawValue > 0x21u || ((1 << v5.rawValue) & 0x30003001ELL) == 0;
    if (!v7 && (*(_WORD *)&AppleVendorKeyboardReport.update(with:)(v5) & 0x100) == 0)
      AppleVendorKeyboardReport.remove(_:)(v6);
    v3 = 0;
    v2 = 16;
  }
  while ((v4 & 1) != 0);
  v8 = sub_1000C2CD4();
  return sub_1001D5F30(v8, v9);
}

uint64_t sub_1001D48BC(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  Swift::UInt16 v4;
  EnsembleHID::ConsumerUsage v5;
  uint64_t v6;
  Swift::UInt16 v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;

  sub_1001C0318(a1, a2);
  v3 = 0;
  while (1)
  {
    sub_1001C0290((16 * v3) | 8);
    if (!v4)
      break;
    v5.rawValue = v4;
    v6 = v3;
LABEL_10:
    *(EnsembleHID::ConsumerUsage_optional *)&v9 = ConsumerReport.update(with:)(v5);
    if ((v9 & 0x10000) == 0)
    {
      v10 = *v2;
      v11 = v2[1];
      v12 = 24;
      while (1)
      {
        sub_100128154(v12, v10, v11);
        if (v13)
        {
          if (v13 == v5.rawValue)
            break;
        }
        v12 += 16;
        if (v12 == 72)
          goto LABEL_17;
      }
      sub_1000E4F5C(0, v12);
    }
LABEL_17:
    v3 = v6 + 1;
    if (v6 >= 3)
      goto LABEL_18;
  }
  if (v3 > 2)
    goto LABEL_18;
  v6 = v3 + 1;
  sub_1001C0290((16 * (v3 + 1)) | 8);
  if (v7)
  {
LABEL_9:
    v5.rawValue = v7;
    goto LABEL_10;
  }
  v8 = 16 * v3 + 40;
  while (v6 != 3)
  {
    ++v6;
    sub_1001C0290(v8);
    v8 += 16;
    if (v7)
      goto LABEL_9;
  }
LABEL_18:
  v14 = sub_1000C2CD4();
  return sub_100022AEC(v14, v15);
}

void sub_1001D49C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t i;
  char v4;
  EnsembleHID::AppleVendorTopCaseUsage v5;
  char v6;
  EnsembleHID::AppleVendorTopCaseUsage v7;
  uint64_t v8;
  unint64_t v9;

  sub_1001C0318(a1, a2);
  v2 = 0;
  for (i = 0; ; ++i)
  {
    sub_1001D6028();
    if (!v4)
      break;
    if (__OFADD__(v2, 8))
      goto LABEL_13;
    sub_1001C029C(v2 + 8);
    sub_1001C56B4();
    if (!v6 & v4)
    {
      if (i > 2)
        goto LABEL_12;
    }
    else
    {
      v7.rawValue = v5.rawValue;
      if ((*(_WORD *)&AppleVendorTopCaseReport.update(with:)(v5) & 0x100) == 0)
        AppleVendorTopCaseReport.remove(_:)(v7);
      if (i >= 3)
      {
LABEL_12:
        v8 = sub_1000C2CD4();
        sub_1001D5F30(v8, v9);
        return;
      }
    }
    v2 += 8;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_1001D4A58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  sub_1001D4B34(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D4834, a5);
}

void sub_1001D4A64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  EnsembleHID::AppleVendorTopCaseUsage v9;
  char v10;
  EnsembleHID::AppleVendorTopCaseUsage v11;
  uint64_t v14;
  unint64_t v15;

  *a5 = a3;
  a5[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  v5 = sub_1000C2CD4();
  sub_10002517C(v5, v6);
  v7 = 0;
  while (1)
  {
    sub_1001D6028();
    if (!v8)
      break;
    if (__OFADD__(8 * v7, 8))
      goto LABEL_13;
    sub_1001C029C(8 * v7 + 8);
    sub_1001C56B4();
    if (!v10 & v8)
    {
      if (__OFADD__(v7++, 1))
        goto LABEL_14;
      if (v7 >= 4)
      {
LABEL_12:
        v14 = sub_1000C2CD4();
        sub_100022AEC(v14, v15);
        return;
      }
    }
    else
    {
      v11.rawValue = v9.rawValue;
      if ((*(_WORD *)&AppleVendorTopCaseReport.update(with:)(v9) & 0x100) == 0)
        AppleVendorTopCaseReport.remove(_:)(v11);
      if (v7++ >= 3)
        goto LABEL_12;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t sub_1001D4B1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_1001D4B74(a1, a2, a3, a4, a5);
}

void sub_1001D4B28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  sub_1001D4B34(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001D48BC, a5);
}

void sub_1001D4B34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t)@<X4>, uint64_t *a6@<X8>)
{
  *a6 = a3;
  a6[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  a5(a1, a2);
  sub_10000B350();
}

uint64_t sub_1001D4B74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = a3;
  a5[1] = a4;
  sub_1001C02A8(a1, a2, a3, a4);
  sub_10014142C();
  sub_1001D5FB8();
  return sub_100022AEC(a1, a2);
}

unint64_t sub_1001D4BEC(unsigned int a1)
{
  int *v1;
  int v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1 | ((unint64_t)((v2 & a1) == 0) << 32);
}

uint64_t sub_1001D4C18(char a1)
{
  char *v1;
  char v2;

  v2 = *v1;
  *v1 |= a1;
  return sub_1001D6054((v2 & a1));
}

uint64_t sub_1001D4C38(int a1, int a2)
{
  return a2 & ~a1;
}

void sub_1001D4C40(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  sub_1001D4D5C(a1, a2, a3, a4, a5);
}

uint64_t sub_1001D4C54()
{
  return sub_1001D4E18();
}

void sub_1001D4C68(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  char v11;
  EnsembleHID::AppleVendorTopCaseUsage v12;
  char v13;
  Swift::UInt8 rawValue;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1001C02A8(a1, a2, a3, a4);
  sub_1001D6034();
  sub_1001D2AAC(a1);
  v10 = 0;
  while (1)
  {
    sub_1001D6028();
    if (!v11)
      break;
    if (__OFADD__(8 * v10, 8))
      goto LABEL_13;
    sub_100127CC4(8 * v10 + 8, a1, a2);
    sub_1001C56B4();
    if (!v13 & v11)
    {
      if (__OFADD__(v10++, 1))
        goto LABEL_14;
      if (v10 >= 4)
      {
LABEL_12:
        sub_1000A3778(a1);
        v17 = a3;
        v18 = a4;
        *a5 = a3;
        a5[1] = a4;
        sub_1001D46AC(a3, a4, v19, v20, v21, v22, v23, v24, a3, a4);
        sub_1001D5EE0(v17, v18);
        return;
      }
    }
    else
    {
      rawValue = v12.rawValue;
      if ((*(_WORD *)&sub_1001D6008(v12) & 0x100) == 0)
        AppleVendorTopCaseReport.remove(_:)((EnsembleHID::AppleVendorTopCaseUsage)rawValue);
      if (v10++ >= 3)
        goto LABEL_12;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_1001D4D5C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;

  sub_1001C02A8(a1, a2, a3, a4);
  sub_1000E73BC();
  sub_10002517C(a1, a2);
  sub_1001D5F70();
  sub_100022AEC(a1, a2);
  *a5 = a3;
  a5[1] = a4;
  sub_1000E73BC();
  HIDReport.withUnsafeMutableBytes<A>(_:)();
  v10 = sub_1000269D4();
  sub_100022AEC(v10, v11);
  sub_1000E71F0();
  sub_100123F40();
}

uint64_t sub_1001D4E04()
{
  return sub_1001D4E18();
}

uint64_t sub_1001D4E18()
{
  void (*v0)(uint64_t, unint64_t);
  void (*v1)(uint64_t, unint64_t);
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v15;
  unint64_t v16;

  sub_1001D5F08();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v6;
  v16 = v4;
  sub_1001C02A8(v10, v8, v6, v4);
  sub_10014142C();
  v3(v11, v9);
  *v13 = v7;
  v13[1] = v5;
  v1(v15, v16);
  return sub_1001D5EAC(v15, v16);
}

BOOL sub_1001D4E8C(unsigned __int8 a1, unsigned __int8 a2)
{
  return (a2 & a1) == 0;
}

void sub_1001D4E9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1001C02A8(a1, a2, a3, a4);
  sub_1001D5FB8();
  KeyboardReport.init()();
  sub_1001D5F54(a3, a4);
  sub_1000E14DC();
  sub_1001C5774();
  sub_1001D5F98();
}

uint64_t sub_1001D4F14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001D4FC8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D4618, (uint64_t (*)(uint64_t))AppleVendorKeyboardReport.init());
}

uint64_t sub_1001D4F28(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001D4FC8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D46AC, (uint64_t (*)(uint64_t))AppleVendorTopCaseReport.init());
}

void sub_1001D4F3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1001C02A8(a1, a2, a3, a4);
  sub_1001D5FB8();
  ButtonReport.init()();
  sub_1001D5F54(a3, a4);
  sub_1000E14DC();
  sub_1001C5774();
  sub_1001D5F98();
}

uint64_t sub_1001D4FB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001D4FC8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1001D4728, (uint64_t (*)(uint64_t))ConsumerReport.init());
}

uint64_t sub_1001D4FC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v9 = a1;
  sub_1001C02A8(a1, a2, a3, a4);
  v10 = a5(v9, a2);
  v11 = a6(v10);
  v13 = v12;
  LOBYTE(v9) = static Data.== infix(_:_:)(a3, a4, v11, v12);
  sub_100022AEC(v11, v13);
  sub_100022AEC(a3, a4);
  return v9 & 1;
}

BOOL sub_1001D5064(int a1, int a2)
{
  return (a2 & a1) == 0;
}

uint64_t sub_1001D5070()
{
  return sub_1001D5180();
}

#error "1001D5138: call analysis failed (funcsize=53)"

void sub_1001D5158()
{
  sub_1001D5204();
}

uint64_t sub_1001D516C()
{
  return sub_1001D5180();
}

uint64_t sub_1001D5180()
{
  void (*v0)();
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  sub_1001D5FF0();
  sub_1001D6080();
  v1(v3, v2);
  v0();
  return sub_100022AEC(v5, v6);
}

uint64_t sub_1001D51E4(uint64_t result)
{
  _DWORD *v1;

  *v1 &= ~(_DWORD)result;
  return result;
}

uint64_t sub_1001D51F4(uint64_t result)
{
  _BYTE *v1;

  *v1 &= ~(_BYTE)result;
  return result;
}

void sub_1001D5204()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001D5FF0();
  v2 = *v0;
  v3 = v0[1];
  v4 = *v0;
  sub_1000E152C();
  sub_1000E152C();
  sub_1001D2AAC(v1);
  sub_1001D5F70();
  sub_100022AEC(v2, v3);
  sub_1000A3778(v1);
  HIDReport.withUnsafeMutableBytes<A>(_:)();
  sub_100022AEC(v4, v3);
  sub_100123F40();
}

void *ServiceFilterFlags.interrupt.unsafeMutableAddressor()
{
  return &static ServiceFilterFlags.interrupt;
}

void *ServiceFilterFlags.maskChanged.unsafeMutableAddressor()
{
  return &static ServiceFilterFlags.maskChanged;
}

void *ServiceFilterFlags.activity.unsafeMutableAddressor()
{
  return &static ServiceFilterFlags.activity;
}

void *ServiceFilterFlags.capsLockEngaged.unsafeMutableAddressor()
{
  return &static ServiceFilterFlags.capsLockEngaged;
}

void *ServiceFilterFlags.propertiesChanged.unsafeMutableAddressor()
{
  return &static ServiceFilterFlags.propertiesChanged;
}

uint64_t sub_1001D52D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static UInt32.logicalMinimum.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001D52F4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t result;

  result = sub_1001C0328(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1001D5320@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D4390(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1001D5350@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D4C18(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1001D5380(unsigned __int8 *a1)
{
  return sub_1001C2690(*a1);
}

uint64_t sub_1001D5388(unsigned __int8 *a1)
{
  return sub_1001C2694(*a1);
}

uint64_t sub_1001D5390@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001D41C4(a1);
  *a2 = result;
  return result;
}

void *ServiceFilterReport.reportID.unsafeMutableAddressor()
{
  return &static ServiceFilterReport.reportID;
}

void *ServiceFilterReport.bitCount.unsafeMutableAddressor()
{
  return &static ServiceFilterReport.bitCount;
}

uint64_t static ServiceFilterReport.bitCount.getter()
{
  return 224;
}

void *ServiceFilterReport.version.unsafeMutableAddressor()
{
  return &static ServiceFilterReport.version;
}

void ServiceFilterReport.report.getter()
{
  uint64_t v0;
  unint64_t v1;

  sub_1001B58A8();
  sub_10002517C(v0, v1);
  sub_1000050D4();
}

uint64_t ServiceFilterReport.timestamp.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void ServiceFilterReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;

  v0 = sub_1001B3548();
  sub_10004113C(v0);
  v1 = sub_1001D5FAC();
  sub_1001B345C(v1, COERCE_DOUBLE(0x1C00000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v17, v18, v19,
    v20);
  sub_1001D5EC4();
  sub_1001D6074();
  sub_1001D5F44();
  __asm { BR              X12 }
}

void ServiceFilterReport.version.setter(uint64_t a1)
{
  sub_1000E4F5C(a1, 8);
}

uint64_t ServiceFilterReport.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = 0x1C00000000;
  v20 = __DataStorage.init(length:)(28);
  sub_1000E6A84((int *)&v19, 0);
  v20 |= 0x4000000000000000uLL;
  Data._Representation.subscript.setter(10, 0);
  mach_absolute_time();
  v5 = sub_1000269D4();
  if (Data.count.getter(v5, v6) == 28 && Data.subscript.getter(0, a1, a2) == 10)
  {
    sub_1000E14F4();
  }
  else
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v9 = v8;
    v10 = sub_1000055B0(&qword_1002AA680);
    inited = swift_initStackObject(v10, &v18);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    *(_QWORD *)(inited + 40) = v12;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 56) = 0x800000010025A170;
    v13 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    objc_allocWithZone((Class)NSError);
    v14 = sub_100087344(v7, v9, -6742, v13);
    swift_willThrow(v14);
    v15 = sub_1000269D4();
    sub_100022AEC(v15, v16);
    sub_1000E14F4();
  }
  return sub_1000269D4();
}

uint64_t ServiceFilterReport.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  uint64_t IntegerValue;
  uint64_t DataValue;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;

  v3 = sub_1001B3548();
  sub_10004113C(v3);
  v4 = sub_1001D5FAC();
  sub_1001B345C(v4, COERCE_DOUBLE(0x1C00000000), v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v31, v32, v33,
    v34);
  sub_1001D5EC4();
  mach_absolute_time();
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for VendorDefinedEvent, (uint64_t)&protocol witness table for VendorDefinedEvent);
  v20 = v19;
  IntegerValue = IOHIDEventGetIntegerValue(v19, 65539);
  DataValue = IOHIDEventGetDataValue(v20, 65540);
  v23 = sub_10004091C(DataValue, DataValue + IntegerValue);
  v25 = ServiceFilterReport.init(_:)(v23, v24);
  if (v1)
  {
    swift_errorRelease(v1);

    sub_1000E71F0();
    v26 = 0;
  }
  else
  {
    v26 = v25;

    sub_1000E71F0();
    sub_1001D2AAC(v26);
    v27 = a1;
    HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for VendorDefinedEvent, (uint64_t)&protocol witness table for VendorDefinedEvent);
    v29 = v28;
    IOHIDEventGetTimeStamp();

    sub_1000A3778(v26);
  }

  return v26;
}

void ServiceFilterReport.init(_:filterMask:copyMask:notifyMask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;

  v0 = sub_1001B3548();
  sub_10004113C(v0);
  v1 = sub_1001D5FAC();
  sub_1001B345C(v1, COERCE_DOUBLE(0x1C00000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v17, v18, v19,
    v20);
  sub_1001D5EC4();
  sub_1001D6074();
  sub_1001D5F44();
  __asm { BR              X12 }
}

void ServiceFilterReport.flags.setter(uint64_t a1)
{
  sub_1000E4D78(a1, 24);
}

void ServiceFilterReport.filterMask.setter(uint64_t a1)
{
  sub_1001AE9C4(a1, 32);
}

void ServiceFilterReport.copyMask.setter(uint64_t a1)
{
  sub_1001AE9C4(a1, 96);
}

void ServiceFilterReport.notifyMask.setter(uint64_t a1)
{
  sub_1001AE9C4(a1, 160);
}

void ServiceFilterReport.version.getter(uint64_t a1, unint64_t a2)
{
  sub_100128154(8, a1, a2);
}

void ServiceFilterReport.version.modify(uint64_t a1)
{
  uint64_t v1;
  __int16 v3;

  *(_QWORD *)a1 = v1;
  sub_100128154(8, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_WORD *)(a1 + 8) = v3;
  sub_1000050D4();
}

void sub_1001D5B88(uint64_t a1)
{
  sub_1000E4F5C(*(unsigned __int16 *)(a1 + 8), 8);
  sub_1000050D4();
}

void ServiceFilterReport.flags.getter(uint64_t a1, unint64_t a2)
{
  sub_100127CC4(24, a1, a2);
}

void ServiceFilterReport.flags.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_100127CC4(24, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000050D4();
}

void sub_1001D5BF4(uint64_t a1)
{
  sub_1000E4D78(*(unsigned __int8 *)(a1 + 8), 24);
  sub_1000050D4();
}

void ServiceFilterReport.filterMask.getter(uint64_t a1, unint64_t a2)
{
  sub_100128714(32, a1, a2);
}

void ServiceFilterReport.filterMask.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001B5824(a1);
  sub_100128714(32, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001D5C58(uint64_t *a1)
{
  sub_1001AE9C4(*a1, 32);
  sub_1000050D4();
}

void ServiceFilterReport.copyMask.getter(uint64_t a1, unint64_t a2)
{
  sub_100128714(96, a1, a2);
}

void ServiceFilterReport.copyMask.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001B5824(a1);
  sub_100128714(96, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001D5CB8(uint64_t *a1)
{
  sub_1001AE9C4(*a1, 96);
  sub_1000050D4();
}

void ServiceFilterReport.notifyMask.getter(uint64_t a1, unint64_t a2)
{
  sub_100128714(160, a1, a2);
}

void ServiceFilterReport.notifyMask.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001B5824(a1);
  sub_100128714(160, v2, v3);
  *v1 = v4;
  sub_1000050D4();
}

void sub_1001D5D18(uint64_t *a1)
{
  sub_1001AE9C4(*a1, 160);
  sub_1000050D4();
}

unint64_t sub_1001D5D3C()
{
  unint64_t result;

  result = qword_1002B5AC0;
  if (!qword_1002B5AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceFilterFlags, &type metadata for ServiceFilterFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5AC0);
  }
  return result;
}

unint64_t sub_1001D5D7C()
{
  unint64_t result;

  result = qword_1002B5AC8;
  if (!qword_1002B5AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceFilterFlags, &type metadata for ServiceFilterFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5AC8);
  }
  return result;
}

unint64_t sub_1001D5DBC()
{
  unint64_t result;

  result = qword_1002B5AD0;
  if (!qword_1002B5AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceFilterFlags, &type metadata for ServiceFilterFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5AD0);
  }
  return result;
}

unint64_t sub_1001D5DFC()
{
  unint64_t result;

  result = qword_1002B5AD8;
  if (!qword_1002B5AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceFilterFlags, &type metadata for ServiceFilterFlags);
    atomic_store(result, (unint64_t *)&qword_1002B5AD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceFilterFlags()
{
  return &type metadata for ServiceFilterFlags;
}

_QWORD *sub_1001D5E4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1001B58A8();
  v3 = *v2;
  v4 = v2[1];
  sub_1000E1580();
  *v1 = v3;
  v1[1] = v4;
  v1[2] = *(_QWORD *)(v0 + 16);
  return v1;
}

ValueMetadata *type metadata accessor for ServiceFilterReport()
{
  return &type metadata for ServiceFilterReport;
}

uint64_t sub_1001D5EAC(uint64_t result, unint64_t a2)
{
  return sub_100022AEC(result, a2);
}

uint64_t sub_1001D5EC4()
{
  return Data._Representation.subscript.setter(10, 0);
}

uint64_t sub_1001D5EE0(uint64_t result, unint64_t a2)
{
  return sub_100022AEC(result, a2);
}

uint64_t sub_1001D5EFC(uint64_t a1)
{
  uint64_t v1;

  return Data._Representation.subscript.setter(a1, v1 >> 3);
}

uint64_t sub_1001D5F20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001D5F30(uint64_t result, unint64_t a2)
{
  return sub_100022AEC(result, a2);
}

uint64_t sub_1001D5F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static Data.== infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_1001D5F60(uint64_t result, unint64_t a2)
{
  return sub_10002517C(result, a2);
}

uint64_t sub_1001D5F70()
{
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

void sub_1001D5F8C(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100128154(a1, v1, v2);
}

uint64_t sub_1001D5FAC()
{
  return __DataStorage.init(length:)(28);
}

uint64_t sub_1001D5FB8()
{
  return HIDReport.withUnsafeMutableBytes<A>(_:)();
}

uint64_t sub_1001D5FC0()
{
  Swift::Int v0;

  return HIDReport.mask(for:)(v0);
}

Swift::Int sub_1001D5FD4()
{
  Swift::Int v0;

  return HIDReport.offset(for:)(v0);
}

EnsembleHID::AppleVendorTopCaseUsage_optional sub_1001D6008(EnsembleHID::AppleVendorTopCaseUsage with)
{
  return AppleVendorTopCaseReport.update(with:)(with);
}

void sub_1001D6010(char a1)
{
  uint64_t v1;
  unint64_t v2;

  sub_100127CC4(a1, v1, v2);
}

uint64_t sub_1001D601C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1001D6034()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1001D6040(unsigned int a1)
{
  char v1;
  _BYTE *v2;
  uint64_t result;

  result = (a1 >> 8) & 1;
  *v2 = v1;
  return result;
}

uint64_t sub_1001D604C(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_1001D6054@<X0>(int a1@<W8>)
{
  int v1;

  return a1 | (v1 << 8);
}

uint64_t sub_1001D6074()
{
  return mach_absolute_time();
}

uint64_t sub_1001D6080()
{
  uint64_t v0;

  return sub_10002517C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void *KeyboardUsage.leftControl.unsafeMutableAddressor()
{
  return &static KeyboardUsage.leftControl;
}

void *KeyboardUsage.leftCommand.unsafeMutableAddressor()
{
  return &static KeyboardUsage.leftCommand;
}

void *KeyboardUsage.leftOption.unsafeMutableAddressor()
{
  return &static KeyboardUsage.leftOption;
}

void *KeyboardUsage.leftShift.unsafeMutableAddressor()
{
  return &static KeyboardUsage.leftShift;
}

void *KeyboardUsage.rightCommand.unsafeMutableAddressor()
{
  return &static KeyboardUsage.rightCommand;
}

void *KeyboardUsage.rightControl.unsafeMutableAddressor()
{
  return &static KeyboardUsage.rightControl;
}

void *KeyboardUsage.rightOption.unsafeMutableAddressor()
{
  return &static KeyboardUsage.rightOption;
}

void *KeyboardUsage.rightShift.unsafeMutableAddressor()
{
  return &static KeyboardUsage.rightShift;
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardUsage.init(rawValue:)(Swift::UInt8 rawValue)
{
  return (EnsembleHID::KeyboardUsage_optional)sub_1001B7698((rawValue + 24) < 0x19u);
}

BOOL KeyboardUsage.isModifier.getter(char a1)
{
  return (a1 & 0xF8) == 224;
}

void *KeyboardUsage.capsLock.unsafeMutableAddressor()
{
  return &static KeyboardUsage.capsLock;
}

const char *KeyboardUsage.page.unsafeMutableAddressor()
{
  return "\a";
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardUsage.init(_:)(Swift::Int a1)
{
  if ((unint64_t)a1 <= 0xFF && (a1 + 24) >= 0x19u)
    return (EnsembleHID::KeyboardUsage_optional)sub_1001B7698(0);
  else
    return (EnsembleHID::KeyboardUsage_optional)sub_1001B7698(1);
}

EnsembleHID::KeyboardUsage_optional __swiftcall KeyboardUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  if (page == 7 && usage >= 0 && usage <= 255 && (usage + 24) >= 0x19u)
    return (EnsembleHID::KeyboardUsage_optional)sub_1001B7698(0);
  else
    return (EnsembleHID::KeyboardUsage_optional)sub_1001B7698(1);
}

EnsembleHID::KeyboardUsage_optional sub_1001D6194@<W0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, Swift::UInt8 *a3@<X8>)
{
  EnsembleHID::KeyboardUsage_optional result;

  result = KeyboardUsage.init(page:usage:)(a1, a2);
  *a3 = result.value.rawValue;
  a3[1] = result.is_nil;
  return result;
}

EnsembleHID::KeyboardUsage_optional sub_1001D61C0@<W0>(Swift::UInt8 *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::KeyboardUsage_optional result;

  result = KeyboardUsage.init(rawValue:)(*a1);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

void *KeyboardUsage.backtick.unsafeMutableAddressor()
{
  return &static KeyboardUsage.backtick;
}

uint64_t static KeyboardUsage.backtick.getter()
{
  return 53;
}

void *KeyboardUsage.delete.unsafeMutableAddressor()
{
  return &static KeyboardUsage.delete;
}

uint64_t static KeyboardUsage.delete.getter()
{
  return 42;
}

void *KeyboardUsage.escape.unsafeMutableAddressor()
{
  return &static KeyboardUsage.escape;
}

uint64_t static DigitizerReport.version1ByteCount.getter()
{
  return 41;
}

uint64_t static KeyboardUsage.capsLock.getter()
{
  return 57;
}

uint64_t static KeyboardUsage.leftCommand.getter()
{
  return 227;
}

uint64_t static KeyboardUsage.leftOption.getter()
{
  return 226;
}

uint64_t static KeyboardUsage.leftShift.getter()
{
  return 225;
}

uint64_t static KeyboardUsage.rightControl.getter()
{
  return 228;
}

uint64_t static KeyboardUsage.rightOption.getter()
{
  return 230;
}

uint64_t static KeyboardUsage.rightShift.getter()
{
  return 229;
}

void sub_1001D6264()
{
  static KeyboardUsage.modifiers = (uint64_t)&off_100290810;
}

uint64_t *KeyboardUsage.modifiers.unsafeMutableAddressor()
{
  if (qword_1002B51D0 != -1)
    swift_once(&qword_1002B51D0, sub_1001D6264);
  return &static KeyboardUsage.modifiers;
}

double static KeyboardUsage.modifiers.getter()
{
  double result;

  if (qword_1002B51D0 != -1)
    swift_once(&qword_1002B51D0, sub_1001D6264);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

unint64_t sub_1001D62FC()
{
  unint64_t result;

  result = qword_1002B5AE0;
  if (!qword_1002B5AE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardUsage, &type metadata for KeyboardUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5AE0);
  }
  return result;
}

unint64_t sub_1001D633C()
{
  unint64_t result;

  result = qword_1002B5AE8;
  if (!qword_1002B5AE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardUsage, &type metadata for KeyboardUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5AE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardUsage()
{
  return &type metadata for KeyboardUsage;
}

_BYTE *ScrollGesture.__allocating_init(useRemoteAcceleration:)(char a1)
{
  _BYTE *result;

  result = (_BYTE *)sub_1001D6E14();
  result[18] = 0;
  result[16] = 1;
  result[17] = a1;
  return result;
}

_BYTE *ScrollGesture.__allocating_init(style:useRemoteAcceleration:)(char a1, char a2)
{
  char v3;
  _BYTE *result;

  v3 = a1 & 1;
  result = (_BYTE *)sub_1001D6E14();
  result[18] = 0;
  result[16] = v3;
  result[17] = a2;
  return result;
}

_BYTE *ScrollGesture.init(style:useRemoteAcceleration:)(char a1, char a2)
{
  _BYTE *v2;

  v2[18] = 0;
  v2[16] = a1 & 1;
  v2[17] = a2;
  return v2;
}

uint64_t ScrollGesture.dispatch(report:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
    v3 = sub_1001D66F0(a1, a2);
  else
    v3 = sub_1001D6434(a1, a2);
  *(_BYTE *)(v2 + 18) = v3;
  return v4;
}

uint64_t sub_1001D6434(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  sub_100127CC4(8, a1, a2);
  if ((v5 & 0x8F) != 0 || (sub_100127CC4(16, a1, a2), v6))
  {
    sub_100127CC4(8, a1, a2);
    sub_100127CC4(16, a1, a2);
    __asm { BR              X10 }
  }
  v7 = *(unsigned __int8 *)(v2 + 18);
  v8 = sub_1001D68FC(0, a1, a2, (void (*)(void))HIDEventFlags.phase.setter);
  sub_1001E4178((uint64_t)v8);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1001D66F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *RelativePointerEvent;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1001D6434(a1, a2);
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = mach_absolute_time();
    RelativePointerEvent = (void *)IOHIDEventCreateRelativePointerEvent(0, v6, 0, 0, 0, 0.0, 0.0, 0.0);
    v8 = IOHIDEventRef.__bridgedValue.getter();

    v9 = v4 + 32;
    do
    {
      sub_1000445C0(v9, (uint64_t)v18);
      HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
      v11 = v10;
      v12 = v19;
      v13 = v20;
      sub_10000DBE4(v18, v19);
      v14 = (void *)HIDEventProtocol.bridgedValue.getter(v12, v13);
      IOHIDEventAppendEvent(v11, v14, 0);

      sub_100005988(v18);
      v9 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v15 = sub_1000055B0(&qword_1002B52F0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10021BBA0;
    *(_QWORD *)(v16 + 56) = &type metadata for PointerEvent;
    *(_QWORD *)(v16 + 64) = &protocol witness table for PointerEvent;
    *(_QWORD *)(v16 + 32) = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1001D6858(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *ScrollEvent;
  id v6;
  uint64_t v7;

  a2();
  v2 = sub_1000055B0(&qword_1002B5BD0);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10021BBA0;
  v4 = mach_absolute_time();
  ScrollEvent = (void *)IOHIDEventCreateScrollEvent(0, v4, 0);
  v6 = IOHIDEventRef.__bridgedValue.getter();

  *(_QWORD *)(v3 + 32) = v6;
  specialized Array._endMutation()(v7);
  return v3;
}

_QWORD *sub_1001D68FC(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  a4();
  return sub_1001D6948(0, a2, a3);
}

_QWORD *sub_1001D6948(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  char v11;
  void *ScrollEvent;
  id v13;
  int v14;
  double v15;
  int v16;
  double v17;
  int v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = v3;
  v8 = mach_absolute_time();
  sub_1001E0D24(24, a2, a3);
  v10 = v9;
  sub_1001E0D24(32, a2, a3);
  if (v10 || (sub_1001E0D24(24, a2, a3), sub_1001E0D24(32, a2, a3), v11))
  {
    sub_1001E0D24(24, a2, a3);
    sub_1001E0D24(32, a2, a3);
    ScrollEvent = (void *)IOHIDEventCreateScrollEvent(0, v8, a1);
    v13 = IOHIDEventRef.__bridgedValue.getter();

    if (*(_BYTE *)(v4 + 17) == 1)
    {
      sub_10013E758(40, a2, a3);
      v15 = (double)v14 / static HIDFixed.scale.getter();
      sub_10013E758(72, a2, a3);
      v17 = (double)v16 / static HIDFixed.scale.getter();
      if (v15 != 0.0 || v17 != 0.0)
      {
        v18 = static HIDEventFlags.accelerated.getter();
        v19 = (void *)IOHIDEventCreateScrollEvent(0, v8, v18 | a1);
        v20 = IOHIDEventRef.__bridgedValue.getter();

        v21 = v20;
        HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
        v23 = v22;
        HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
        v25 = v24;
        IOHIDEventAppendEvent(v23, v24, 0);

      }
    }
    v26 = sub_1000055B0(&qword_1002B5BD0);
    v27 = swift_allocObject(v26, 40, 7);
    *(_OWORD *)(v27 + 16) = xmmword_10021BBA0;
    *(_QWORD *)(v27 + 32) = v13;
    v29 = v27;
    specialized Array._endMutation()(v27);
    return (_QWORD *)v29;
  }
  else
  {
    sub_1001E0D24(24, a2, a3);
    sub_1001E0D24(32, a2, a3);
    return _swiftEmptyArrayStorage;
  }
}

uint64_t ScrollGesture.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 19, 7);
}

unint64_t sub_1001D6BAC()
{
  unint64_t result;

  result = qword_1002B5AF0;
  if (!qword_1002B5AF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScrollGesture.Style, &type metadata for ScrollGesture.Style);
    atomic_store(result, (unint64_t *)&qword_1002B5AF0);
  }
  return result;
}

_UNKNOWN **sub_1001D6BE8()
{
  return &protocol witness table for ScrollReport;
}

uint64_t sub_1001D6BF4(uint64_t a1)
{
  return ScrollGesture.dispatch(report:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t type metadata accessor for ScrollGesture()
{
  return objc_opt_self(_TtC11EnsembleHID13ScrollGesture);
}

uint64_t storeEnumTagSinglePayload for ScrollGesture.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001D6C88 + 4 * byte_10022DF59[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001D6CBC + 4 * byte_10022DF54[v4]))();
}

uint64_t sub_1001D6CBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6CC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D6CCCLL);
  return result;
}

uint64_t sub_1001D6CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D6CE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001D6CE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6CEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture.Style()
{
  return &type metadata for ScrollGesture.Style;
}

uint64_t storeEnumTagSinglePayload for ScrollGesture.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001D6D54 + 4 * byte_10022DF63[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001D6D88 + 4 * byte_10022DF5E[v4]))();
}

uint64_t sub_1001D6D88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6D90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D6D98);
  return result;
}

uint64_t sub_1001D6DA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D6DACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001D6DB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D6DB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture.State()
{
  return &type metadata for ScrollGesture.State;
}

unint64_t sub_1001D6DD8()
{
  unint64_t result;

  result = qword_1002B5BC8;
  if (!qword_1002B5BC8)
  {
    result = swift_getWitnessTable(&unk_10022E060, &type metadata for ScrollGesture.State);
    atomic_store(result, (unint64_t *)&qword_1002B5BC8);
  }
  return result;
}

uint64_t sub_1001D6E14()
{
  uint64_t v0;

  return swift_allocObject(v0, 19, 7);
}

uint64_t sub_1001D6E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  swift_beginAccess(v3, v9, 32, 0);
  v4 = *v3;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1001A90EC(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_retain();
  }
  else
  {
    v7 = 0;
  }
  swift_endAccess(v9);
  return v7;
}

void sub_1001D6EA4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;

  sub_10002626C();
  v36 = v1;
  v37 = v2;
  v4 = v3;
  v38 = *(_QWORD *)(sub_1001C82B4() - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_10002641C();
  v8 = v7 - v6;
  sub_1000055B0(&qword_1002B5BF0);
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_10016AA74();
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  v13 = (_QWORD *)(v4 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  sub_10005FE28((uint64_t)v13, (uint64_t)&v41);
  v33 = *v13 + 64;
  sub_100084F48();
  v16 = v15 & v14;
  v34 = (unint64_t)(v17 + 63) >> 6;
  v32 = v34 - 1;
  v39 = v18;
  swift_bridgeObjectRetain();
  v40 = 0;
  v35 = v0;
  if (!v16)
    goto LABEL_4;
LABEL_2:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v20 = v19 | (v40 << 6);
  while (2)
  {
    v21 = v39;
    sub_1000E0E9C(*(_QWORD *)(v39 + 48) + *(_QWORD *)(v38 + 72) * v20, v0);
    v22 = *(_QWORD *)(v21 + 56);
    v23 = sub_1001DCB78();
    *(_QWORD *)(v0 + *(int *)(v23 + 48)) = *(_QWORD *)(v22 + 8 * v20);
    sub_1001DCB08(v0, 0, v24, v23);
    sub_100026AE4();
    while (1)
    {
      sub_10005FA70(v0, (uint64_t)v12, &qword_1002B5BF0);
      v30 = sub_1001DCB78();
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v30) == 1)
      {
        sub_10000B348();
        swift_release();
        sub_100022AEC(v36, v37);
        sub_10000E4E0();
        return;
      }
      v31 = *(_QWORD *)&v12[*(int *)(v30 + 48)];
      sub_1000E0EE0((uint64_t)v12, v8);
      if (*(_QWORD *)(v31 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service))
      {
        swift_getKeyPath(&unk_10022E170);
        sub_100026AE4();
        sub_1001C5FEC();
        swift_release();
        PointerReport.init()();
        sub_1001DCB58();
        swift_getKeyPath(&unk_10022E190);
        sub_1001DCAAC();
        sub_1001C6008();
        sub_10005FF18();
        sub_1001DCAC0();
        KeyboardReport.init()();
        sub_1001DCB58();
        swift_getKeyPath(&unk_10022E1B0);
        sub_1001DCAAC();
        sub_1001C5FD0();
        sub_10005FF18();
        sub_1001DCAC0();
        AppleVendorTopCaseReport.init()();
        sub_1001DCB58();
        swift_getKeyPath(&unk_10022E1D0);
        sub_1001DCAAC();
        sub_1001C5DA0();
        sub_10005FF18();
        sub_1001DCAC0();
        AppleVendorKeyboardReport.init()();
        sub_1001DCB58();
        swift_getKeyPath(&unk_10022E1F0);
        sub_1001DCAAC();
        sub_1001C5D84();
        sub_10005FF18();
        sub_1001DCAC0();
        ConsumerReport.init()();
        sub_1001DCB58();
        swift_getKeyPath(&unk_10022E210);
        sub_1001DCAAC();
        sub_1001C5FB4();
        v0 = v35;
        swift_release();
        sub_1001DCAC0();
        sub_100041108();
      }
      sub_100041108();
      sub_1000E0F24(v8);
      if (v16)
        goto LABEL_2;
LABEL_4:
      v25 = v40 + 1;
      if (__OFADD__(v40, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v25 < v34)
      {
        v26 = *(_QWORD *)(v33 + 8 * v25);
        if (v26)
          goto LABEL_7;
        v27 = v40 + 2;
        ++v40;
        if (v25 + 1 < v34)
        {
          v26 = *(_QWORD *)(v33 + 8 * v27);
          if (v26)
            goto LABEL_10;
          v40 = v25 + 1;
          if (v25 + 2 < v34)
          {
            v26 = *(_QWORD *)(v33 + 8 * (v25 + 2));
            if (v26)
            {
              v25 += 2;
              goto LABEL_7;
            }
            v27 = v25 + 3;
            v40 = v25 + 2;
            if (v25 + 3 < v34)
              break;
          }
        }
      }
LABEL_21:
      v28 = sub_1001DCB78();
      sub_1001DCB08(v0, 1, v29, v28);
      v16 = 0;
    }
    v26 = *(_QWORD *)(v33 + 8 * v27);
    if (v26)
    {
LABEL_10:
      v25 = v27;
LABEL_7:
      v16 = (v26 - 1) & v26;
      v20 = __clz(__rbit64(v26)) + (v25 << 6);
      v40 = v25;
      continue;
    }
    break;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v34)
    {
      v40 = v32;
      goto LABEL_21;
    }
    v26 = *(_QWORD *)(v33 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_7;
  }
LABEL_29:
  __break(1u);
}

void HIDVirtualServicePool.__allocating_init(logger:queue:workloop:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  HIDVirtualServicePool.init(logger:queue:workloop:)(a1, a2, a3);
  sub_10000B350();
}

uint64_t HIDVirtualServicePool.init(logger:queue:workloop:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v7 = OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices;
  v8 = sub_1001C82B4();
  v9 = sub_1001DC964();
  sub_10013FC28((unint64_t *)&qword_1002B09E8, type metadata accessor for HIDUniversalSenderID);
  *(_QWORD *)(v3 + v7) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v8, v9, v10);
  v11 = OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock;
  v12 = type metadata accessor for UnfairLock();
  v13 = sub_1000088D8(v12, 24);
  v14 = (_DWORD *)sub_10000797C(4);
  *v14 = 0;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v3 + v11) = v13;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes) = &_swiftEmptySetSingleton;
  sub_10005FA70(a1, v3 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, &qword_1002AE160);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue) = a2;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_workloop) = a3;
  return v3;
}

uint64_t type metadata accessor for HIDVirtualServicePool.VirtualService(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B5D18, (uint64_t)&nominal type descriptor for HIDVirtualServicePool.VirtualService);
}

void sub_1001D73DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  sub_10002626C();
  v1 = v0;
  v48 = v2;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10002641C();
  v45 = v10 - v9;
  v44 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10002641C();
  v14 = v13 - v12;
  type metadata accessor for DispatchQoS(0);
  sub_1000262EC();
  __chkstk_darwin(v15);
  sub_10002641C();
  v18 = v17 - v16;
  v19 = (_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties);
  *v19 = 0;
  v19[1] = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service) = 0;
  v20 = type metadata accessor for AppleVendorKeyboardGesture(0);
  sub_1000088D8(v20, 32);
  v21 = AppleVendorKeyboardReport.init()();
  sub_1001DCB88(v21, v22);
  v23 = type metadata accessor for AppleVendorTopCaseGesture(0);
  sub_1000088D8(v23, 32);
  v24 = AppleVendorTopCaseReport.init()();
  sub_1001DCB88(v24, v25);
  v26 = type metadata accessor for ConsumerGesture(0);
  sub_1000088D8(v26, 32);
  v27 = ConsumerReport.init()();
  sub_1001DCB88(v27, v28);
  v29 = type metadata accessor for KeyboardGesture(0);
  sub_1000088D8(v29, 32);
  KeyboardReport.init()();
  sub_1001DCB88(v30, v31);
  v32 = OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_digitizerGesture;
  v33 = type metadata accessor for DigitizerGesture();
  sub_1000088D8(v33, 72);
  DigitizerGesture.init(style:useRemoteAcceleration:)(1, 1);
  *(_QWORD *)(v0 + v32) = v34;
  v35 = OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointerGesture;
  v36 = type metadata accessor for PointerGesture();
  sub_1000088D8(v36, 33);
  *(_QWORD *)(v0 + v35) = PointerGesture.init(useRemoteAcceleration:)(1);
  v37 = OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture;
  v38 = type metadata accessor for ScrollGesture();
  sub_1000088D8(v38, 19);
  *(_QWORD *)(v0 + v37) = ScrollGesture.init(style:useRemoteAcceleration:)(1, 1);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasKeyboardUsage) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasPointingUsage) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_keyboardEnabled) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointingEnabled) = 0;
  sub_1000E0E9C(v6, v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_id);
  sub_10005FAFC(v4, v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_logger, &qword_1002AE160);
  sub_10000B0EC();
  static DispatchQoS.userInteractive.getter();
  v49 = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&unk_1002AC980, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v40 = v39;
  v41 = sub_10003B038();
  sub_100179800((unint64_t *)&unk_1002AC990);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v41, v42, v44, v40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v45, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v47);
  v43 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ALL, 0x800000010025A3C0, v18, v14, v45, v48);
  sub_10000E36C(v4, &qword_1002AE160);
  sub_1000E0F24(v6);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_queue) = v43;
  sub_10000E4E0();
}

uint64_t sub_1001D772C()
{
  uint64_t v0;

  sub_1000E0F24(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_id);
  sub_10000E36C(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_logger, &qword_1002AE160);
  sub_1001DCB10(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_queue);

  sub_1001DCB10(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_appleVendorKeyboardGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_appleVendorTopCaseGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_consumerGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_keyboardGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_digitizerGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointerGesture);
  sub_10005FED8(OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture);
  return v0;
}

uint64_t sub_1001D77F4()
{
  return sub_1000936C8((void (*)(void))sub_1001D772C);
}

uint64_t sub_1001D7804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0(&qword_1002AE160);
  result = __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
  if (v14)
  {
    v46 = v6;
    *(_QWORD *)(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service) = 0;
    sub_10005FAFC(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_logger, (uint64_t)v13, &qword_1002AE160);
    v15 = type metadata accessor for Logger(0);
    v16 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, v15);
    v45 = v7;
    if (v16 == 1)
    {
      sub_10000E36C((uint64_t)v13, &qword_1002AE160);
    }
    else
    {
      swift_retain_n(v14, 2);
      v17 = swift_retain_n(v1, 2);
      v18 = Logger.logObject.getter(v17);
      v20 = static os_log_type_t.default.getter(v18, v19);
      v44 = v20;
      if (os_log_type_enabled(v18, v20))
      {
        v21 = swift_slowAlloc(22, -1);
        v43 = v3;
        v22 = v21;
        v23 = swift_slowAlloc(64, -1);
        v42 = v23;
        aBlock[0] = v23;
        *(_DWORD *)v22 = 136446466;
        v41 = v18;
        v24 = HIDUniversalSenderID.description.getter(v23);
        v26 = v25;
        v47 = (_QWORD *)sub_100006FCC(v24, v25, aBlock);
        v40 = aBlock;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v22 + 4, v22 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v22 + 12) = 2082;
        v39 = v22 + 14;
        swift_retain(v14);
        v27 = HIDVirtualService.description.getter();
        v29 = v28;
        swift_release();
        v47 = (_QWORD *)sub_100006FCC(v27, v29, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v40, v39, v22 + 22);
        swift_release_n(v14, 2);
        swift_bridgeObjectRelease(v29);
        v18 = v41;
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v44, "IDS %{public}s: Canceling Service: %{public}s", (uint8_t *)v22, 0x16u);
        v30 = v42;
        swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        v31 = v22;
        v3 = v43;
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {
        swift_release_n(v14, 2);
        swift_release_n(v1, 2);
      }

      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
    }
    aBlock[4] = (uint64_t)j___s11EnsembleHID17HIDVirtualServiceC6cancelyyF_0;
    aBlock[5] = v14;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E610;
    aBlock[3] = (uint64_t)&unk_1002931C0;
    v32 = _Block_copy(aBlock);
    v33 = swift_retain(v14);
    static DispatchQoS.unspecified.getter(v33);
    v47 = _swiftEmptyArrayStorage;
    sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v35 = v34;
    v36 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v36, v37, v2, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v32);
    _Block_release(v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v46);
    return swift_release();
  }
  return result;
}

void sub_1001D7C54(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::OpaquePointer v11;
  HIDUtils::HIDServiceProperties v12;
  uint64_t v13;
  Class isa;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  objc_class *v18;
  id v19;
  objc_class *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  Class v37;

  v4 = v3;
  v7 = a3 & 1;
  v8 = v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture;
  sub_1001DCB6C(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture, (uint64_t)v36);
  if (*(unsigned __int8 *)(*(_QWORD *)v8 + 17) != v7)
  {
    v9 = type metadata accessor for ScrollGesture();
    swift_allocObject(v9, 19, 7);
    *(_QWORD *)v8 = ScrollGesture.init(style:useRemoteAcceleration:)(1, v7);
    swift_release();
  }
  v10 = CGSize.init(_:)(a1);
  HIDServiceProperties.dictionaryRepresentation.getter(a1, a2);
  v12 = HIDServiceProperties.init(serviceID:properties:)(v10, v11);
  if (!v13)
  {
    isa = v12.storage.super.super.isa;
    v15 = (uint64_t *)(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties);
    sub_1001DCB6C(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties, (uint64_t)&v35);
    v16 = (void *)v15[1];
    if (v16)
    {
      v17 = *v15;
      v18 = v12.storage.super.super.isa;
      v19 = v16;
      LOBYTE(v17) = static HIDServiceProperties.== infix(_:_:)(v17, (uint64_t)v19, v12.serviceID, (uint64_t)v18);

      if ((v17 & 1) != 0)
      {
LABEL_34:

        return;
      }
      v16 = (void *)v15[1];
    }
    *(HIDUtils::HIDServiceProperties *)v15 = v12;
    v20 = v12.storage.super.super.isa;

    HIDServiceProperties.deviceUsagePairs.getter();
    v22 = v21;
    v23 = *(_QWORD *)(v21 + 16);
    if (!v23)
    {
      v26 = 0;
LABEL_29:
      sub_10000E420();
      if (v26 != *(_BYTE *)(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasKeyboardUsage))
        *(_BYTE *)(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasKeyboardUsage) = v26;
      if ((v23 & 1) != *(_BYTE *)(v4
                                 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasPointingUsage))
        *(_BYTE *)(v4 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasPointingUsage) = v23 & 1;
      sub_1001D7F14();
      sub_1001D7FC0();
      sub_1001D8048();
      goto LABEL_34;
    }
    v24 = *(_DWORD *)(v21 + 32);
    sub_10003AFBC();
    v25 = static HIDUsage.== infix(_:_:)(v24, 393217);
    v37 = v12.storage.super.super.isa;
    if (v25)
    {
      v26 = 1;
    }
    else
    {
      if (v23 != 1)
      {
        v27 = v22 + 38;
        v28 = 1;
        while (1)
        {
          v29 = v28 + 1;
          if (__OFADD__(v28, 1))
            break;
          v26 = static HIDUsage.== infix(_:_:)(*(_DWORD *)(v27 - 2), 393217);
          if (!v26)
          {
            v27 += 4;
            ++v28;
            if (v29 != v23)
              continue;
          }
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_37;
      }
      v26 = 0;
    }
LABEL_17:
    sub_10000E420();
    v30 = *(_QWORD *)(v22 + 16);
    if (!v30)
    {
      LOBYTE(v23) = 0;
LABEL_28:
      isa = v37;
      goto LABEL_29;
    }
    v31 = *(_DWORD *)(v22 + 32);
    sub_10003AFBC();
    if (sub_1001DCB94(v31))
    {
      LOBYTE(v23) = 1;
LABEL_27:
      sub_10000E420();
      goto LABEL_28;
    }
    if (v30 == 1)
    {
      LOBYTE(v23) = 0;
      goto LABEL_27;
    }
    v32 = v22 + 38;
    v33 = 1;
    while (1)
    {
      v34 = v33 + 1;
      if (__OFADD__(v33, 1))
        break;
      LOBYTE(v23) = sub_1001DCB94(*(_DWORD *)(v32 - 2));
      if ((v23 & 1) == 0)
      {
        v32 += 4;
        ++v33;
        if (v34 != v30)
          continue;
      }
      goto LABEL_27;
    }
LABEL_37:
    __break(1u);
  }
}

void sub_1001D7F14()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;
  Swift::Int v3;
  char v4;
  char v5;
  EnsembleHID::PointerButtonMode v6;
  uint64_t v7;
  _BYTE v8[24];

  v1 = v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties;
  swift_beginAccess(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties, v8, 32, 0);
  if (!*(_QWORD *)(v1 + 8))
  {
    swift_endAccess(v8);
    goto LABEL_5;
  }
  HIDServiceProperties.pointerButtonMode.getter();
  v3 = v2;
  v5 = v4;
  swift_endAccess(v8);
  if ((v5 & 1) != 0)
  {
LABEL_5:
    v6 = EnsembleHID_PointerButtonMode_enableRightClick;
    goto LABEL_6;
  }
  v6 = PointerButtonMode.init(rawValue:)(v3);
LABEL_6:
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointerGesture);
  swift_beginAccess(v7 + 16, v8, 1, 0);
  *(_BYTE *)(v7 + 16) = v6;
}

void sub_1001D7FC0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointingEnabled) == 1
    && *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasPointingUsage) == 1)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
    goto LABEL_6;
  }
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_keyboardEnabled) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasKeyboardUsage) == 1)
    {
LABEL_6:
      if (!v1)
        sub_1001D811C();
      return;
    }
  }
  else
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
  }
  if (v1)
    sub_1001D7804();
}

void sub_1001D8048()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = *(void **)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client);
  if (v1)
  {
    v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties);
    swift_beginAccess(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties, v15, 0, 0);
    v3 = (void *)v2[1];
    if (v3)
    {
      v4 = *v2;
      v5 = v1;
      v6 = v3;
      HIDServiceProperties.mouseAcceleration.getter();
      HIDServiceClient.mouseAcceleration.setter(v8, v7 & 1);
      HIDServiceProperties.mouseScrollAcceleration.getter();
      HIDServiceClient.mouseScrollAcceleration.setter(v10, v9 & 1);
      HIDServiceProperties.trackpadAcceleration.getter(v4, (uint64_t)v6);
      HIDServiceClient.trackpadAcceleration.setter(v12, v11 & 1);
      HIDServiceProperties.trackpadScrollAcceleration.getter(v4, (uint64_t)v6);
      HIDServiceClient.trackpadScrollAcceleration.setter(v14, v13 & 1);

    }
  }
}

void sub_1001D811C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE v43[24];

  v1 = v0;
  v2 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v2);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasPointingUsage) & 1) != 0
    || *(_BYTE *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_hasKeyboardUsage) == 1)
  {
    v5 = OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service;
    if (!*(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service))
    {
      v6 = (uint64_t *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties);
      swift_beginAccess(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_properties, v43, 0, 0);
      v7 = (void *)v6[1];
      if (v7)
      {
        v36 = *(id *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_queue);
        v8 = *(_QWORD *)(v0
                       + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_appleVendorKeyboardGesture);
        v9 = *(_QWORD *)(v0
                       + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_appleVendorTopCaseGesture);
        v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_consumerGesture);
        v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_keyboardGesture);
        v12 = *v6;
        v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_digitizerGesture);
        v14 = (uint64_t *)(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture);
        v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointerGesture);
        v38 = v12;
        swift_beginAccess(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_scrollGesture, v42, 0, 0);
        v15 = *v14;
        v16 = type metadata accessor for HIDVirtualService();
        v35[1] = swift_allocObject(v16, 160, 7);
        v39 = v7;
        v36 = v36;
        swift_retain(v8);
        swift_retain(v9);
        swift_retain(v10);
        swift_retain(v11);
        swift_retain(v13);
        v17 = v37;
        swift_retain(v37);
        swift_retain(v15);
        v34 = v15;
        v18 = v39;
        v19 = HIDVirtualService.init(properties:queue:appleVendorKeyboardGesture:appleVendorTopCaseGesture:consumerGesture:keyboardGesture:digitizerGesture:pointerGesture:scrollGesture:)(v38, v39, (uint64_t)v36, v8, v9, v10, v11, v13, v17, v34);
        *(_QWORD *)(v1 + v5) = v19;
        swift_retain(v19);
        swift_release();
        HIDVirtualService.activate()();
        sub_10005FAFC(v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_logger, (uint64_t)v4, &qword_1002AE160);
        v20 = type metadata accessor for Logger(0);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v20) == 1)
        {
          swift_release();

          sub_10000E36C((uint64_t)v4, &qword_1002AE160);
        }
        else
        {
          swift_retain_n(v19, 2);
          v21 = swift_retain_n(v1, 2);
          v22 = Logger.logObject.getter(v21);
          v24 = static os_log_type_t.default.getter(v22, v23);
          if (os_log_type_enabled(v22, v24))
          {
            v25 = swift_slowAlloc(22, -1);
            v26 = swift_slowAlloc(64, -1);
            v38 = v26;
            v41 = v26;
            *(_DWORD *)v25 = 136446466;
            v27 = HIDUniversalSenderID.description.getter(v26);
            v29 = v28;
            v40 = sub_100006FCC(v27, v28, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 4, v25 + 12);
            swift_release_n(v1, 2);
            swift_bridgeObjectRelease(v29);
            *(_WORD *)(v25 + 12) = 2082;
            swift_retain(v19);
            v30 = HIDVirtualService.description.getter();
            v32 = v31;
            swift_release();
            v40 = sub_100006FCC(v30, v32, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 14, v25 + 22);
            swift_release_n(v19, 2);
            swift_bridgeObjectRelease(v32);
            _os_log_impl((void *)&_mh_execute_header, v22, v24, "IDS %{public}s: Activated Service: %{public}s", (uint8_t *)v25, 0x16u);
            v33 = v38;
            swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v33, -1, -1);
            swift_slowDealloc(v25, -1, -1);

            swift_release();
          }
          else
          {
            swift_release_n(v1, 2);

            swift_release_n(v19, 3);
          }
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v4, v20);
        }
      }
    }
  }
}

uint64_t sub_1001D8574()
{
  return sub_1001D7800();
}

uint64_t sub_1001D8594@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000E0E9C(*v1 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_id, a1);
}

uint64_t sub_1001D85AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void HIDVirtualServicePool.enabledDeviceTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  sub_1000088D0();
  os_unfair_lock_lock(v2);
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  sub_10000B348();
  sub_10000B350();
}

void HIDVirtualServicePool.enabledDeviceTypes.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  int v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  uint64_t v47;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  sub_1000055B0(&qword_1002AE160);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  v9 = *(os_unfair_lock_s **)(v8 + 16);
  sub_1000432E0();
  swift_retain(v1);
  os_unfair_lock_lock(v9);
  v10 = OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes);
  sub_10003AFBC();
  sub_100198DA4(v3, v11);
  v13 = v12;
  sub_10000E420();
  if ((v13 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    sub_10006005C();
    sub_1000FD408();
LABEL_20:
    sub_10000E4E0();
    return;
  }
  *(_QWORD *)(v1 + v10) = v3;
  sub_1000432E0();
  sub_10000E420();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
  sub_10006005C();
  sub_10000E50C();
  sub_10005FAFC(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, v7, &qword_1002AE160);
  v14 = type metadata accessor for Logger(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v7, 1, v14) == 1)
  {
    sub_10000E50C();
    sub_10000E36C(v7, &qword_1002AE160);
LABEL_19:
    sub_1001D8A48();
    goto LABEL_20;
  }
  v15 = sub_1000432E0();
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.default.getter(v16, v17);
  if (!os_log_type_enabled(v16, v18))
  {
    sub_1000FD408();
LABEL_18:

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v7, v14);
    goto LABEL_19;
  }
  v44 = v18;
  v19 = (uint8_t *)sub_10000797C(12);
  v43 = sub_10000797C(32);
  v47 = v43;
  v45 = v19;
  *(_DWORD *)v19 = 136446210;
  v20 = *(_QWORD *)(v3 + 16);
  v21 = _swiftEmptyArrayStorage;
  if (!v20)
  {
LABEL_17:
    v46 = v21;
    sub_10003AFBC();
    sub_100063410((uint64_t *)&v46);
    sub_10000E420();
    v35 = sub_10003B038();
    sub_100179800((unint64_t *)&qword_1002AB150);
    v37 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v35, v36);
    v39 = v38;
    swift_release();
    v46 = (_QWORD *)sub_100006FCC(v37, v39, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v45 + 4, v45 + 12);
    sub_1000FD408();
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v16, v44, "Enabled Device Types: %{public}s", v45, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v43);
    sub_100007958((uint64_t)v45);
    goto LABEL_18;
  }
  v40 = v16;
  v41 = v14;
  v42 = v7;
  v46 = _swiftEmptyArrayStorage;
  sub_100058678();
  v21 = _swiftEmptyArrayStorage;
  v22 = sub_10019D1C8(v3);
  v24 = v23;
  v26 = v25 & 1;
  while ((v22 & 0x8000000000000000) == 0 && v22 < 1 << *(_BYTE *)(v3 + 32))
  {
    if (((*(_QWORD *)(v3 + 56 + (((unint64_t)v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_22;
    if (*(_DWORD *)(v3 + 36) != v24)
      goto LABEL_23;
    v27 = HIDDeviceType.description.getter(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v22));
    v29 = v28;
    v46 = v21;
    v30 = v21[2];
    if (v30 >= v21[3] >> 1)
    {
      sub_100058678();
      v21 = v46;
    }
    v21[2] = v30 + 1;
    v31 = &v21[2 * v30];
    v31[4] = v27;
    v31[5] = v29;
    v32 = sub_10019D078(v22, v24, v26 & 1, v3);
    v22 = v32;
    v24 = v33;
    v26 = v34 & 1;
    if (!--v20)
    {
      sub_100025618(v32, v33, v34 & 1);
      v7 = v42;
      v16 = v40;
      v14 = v41;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  sub_10000E50C();
  swift_release();
  __break(1u);
}

uint64_t sub_1001D8A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
  aBlock[4] = sub_1001DCA90;
  v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_1002931E8;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v12 = v11;
  v13 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void (*HIDVirtualServicePool.enabledDeviceTypes.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  a1[1] = v1;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  v4 = *(os_unfair_lock_s **)(v3 + 16);
  sub_1000088D0();
  os_unfair_lock_lock(v4);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes);
  v6 = *(os_unfair_lock_s **)(v3 + 16);
  sub_100043360();
  os_unfair_lock_unlock(v6);
  sub_10000B348();
  *a1 = v5;
  return sub_1001D8C98;
}

void sub_1001D8C98(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    HIDVirtualServicePool.enabledDeviceTypes.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    HIDVirtualServicePool.enabledDeviceTypes.setter();
  }
}

BOOL sub_1001D8CDC()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain(v0);
  os_unfair_lock_lock(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes);
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_bridgeObjectRetain(v3);
  os_unfair_lock_unlock(v4);
  swift_release();
  v5 = sub_1001DC258((uint64_t)&off_100290870, v3);
  swift_bridgeObjectRelease(v3);
  return (v5 & 1) == 0;
}

BOOL sub_1001D8D68()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  BOOL v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain(v0);
  os_unfair_lock_lock(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool__enabledDeviceTypes);
  v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_bridgeObjectRetain(v3);
  os_unfair_lock_unlock(v4);
  swift_release();
  v5 = sub_1001E4940(0, v3);
  swift_bridgeObjectRelease(v3);
  return v5;
}

void sub_1001D8DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  unint64_t v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  char v57;
  Swift::Bool v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::Int v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;

  sub_10002626C();
  v75 = v0;
  v3 = v2;
  LODWORD(v86) = v4;
  v83 = v5;
  v7 = v6;
  sub_1000055B0(&qword_1002AE160);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10016AA74();
  __chkstk_darwin(v9);
  v73 = (uint64_t)&v68 - v10;
  v11 = (void **)sub_1001C82B4();
  v74 = (uint64_t)*(v11 - 1);
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_1001DCACC(v13, v68);
  v15 = __chkstk_darwin(v14);
  v72 = (char *)&v68 - v16;
  v17 = __chkstk_darwin(v15);
  v84 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  v87 = (uint64_t)&v68 - v19;
  v20 = sub_1000055B0(&qword_1002B5E30);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10002641C();
  v24 = (_QWORD *)(v23 - v22);
  if ((unint64_t)v3 >> 62)
    goto LABEL_33;
  v25 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v26 = _swiftEmptyArrayStorage;
    v76 = v1;
    v81 = v11;
    v69 = v7;
    if (!v25)
      goto LABEL_13;
    v89 = _swiftEmptyArrayStorage;
    sub_1001DB230(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
      break;
    v27 = 0;
    v26 = v89;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v3);
      }
      else
      {
        v28 = *(_QWORD *)(v3 + 8 * v27 + 32);
        swift_retain(v28);
      }
      v29 = *(int *)(v20 + 48);
      sub_1000E0E9C(v28 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_id, (uint64_t)v24);
      *(_QWORD *)((char *)v24 + v29) = v28;
      v89 = v26;
      v31 = v26[2];
      v30 = v26[3];
      if (v31 >= v30 >> 1)
      {
        sub_1001DB230(v30 > 1, v31 + 1, 1);
        v26 = v89;
      }
      ++v27;
      v26[2] = v31 + 1;
      sub_10005FA70((uint64_t)v24, (uint64_t)v26+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v31, &qword_1002B5E30);
    }
    while (v25 != v27);
    v7 = v69;
LABEL_13:
    v24 = sub_1001D94DC((uint64_t)v26);
    v32 = *(_QWORD *)(v7 + 16);
    if (!v32)
    {
LABEL_30:
      v66 = swift_bridgeObjectRetain(v24);
      sub_1001DAD64(v66);
      swift_bridgeObjectRelease_n(v24, 2);
      sub_10000E4E0();
      return;
    }
    v80 = v75 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger;
    v71 = OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_workloop;
    v33 = v75 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices;
    swift_bridgeObjectRetain(v7);
    v70 = (_QWORD *)v33;
    sub_10005FE28(v33, (uint64_t)&v89);
    v34 = sub_10000E440();
    v3 = 0;
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    v79 = v34;
    v11 = (void **)(v7 + 40);
    v77 = v86 & 1;
    while (1)
    {
      v85 = v32;
      v20 = (unint64_t)*(v11 - 1);
      v35 = *v11;
      v36 = v87;
      v78(v87, v83, v79);
      v86 = v35;
      v37 = CGSize.init(_:)(v20);
      v38 = v81;
      *(_QWORD *)(v36 + *((int *)v81 + 5)) = v37;
      swift_bridgeObjectRetain(v24);
      v39 = sub_1001A90EC(v36);
      LOBYTE(v35) = v40;
      swift_bridgeObjectRelease(v24);
      if ((v35 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
        v88 = v24;
        v42 = v24[3];
        sub_1000055B0(&qword_1002B5E38);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
        v24 = v88;
        sub_1000E0F24(v88[6] + *(_QWORD *)(v74 + 72) * v39);
        v43 = *(_QWORD *)(v24[7] + 8 * v39);
        v44 = sub_1001DC964();
        sub_10013FC28((unint64_t *)&qword_1002B09E8, type metadata accessor for HIDUniversalSenderID);
        _NativeDictionary._delete(at:)(v39, v24, v38, v44);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        v43 = 0;
      }
      v45 = (uint64_t)v84;
      sub_1001DCB80(v87);
      v46 = v86;
      v47 = v45;
      if (!v43)
      {
        sub_1001DCB80(v45);
        sub_10005FAFC(v80, v73, &qword_1002AE160);
        v48 = *(void **)(v75 + v71);
        v49 = sub_1001DC964();
        v43 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
        v50 = v48;
        sub_1001D73DC();
        v47 = (uint64_t)v84;
      }
      sub_1000E0F24(v47);
      sub_1001D7C54(v20, v46, v77);
      v21 = v82;
      sub_1001DCB80(v43 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_id);
      v51 = (_QWORD *)*v70;
      swift_retain(v43);
      v52 = sub_10003AFBC();
      v1 = swift_isUniquelyReferenced_nonNull_native(v52);
      v88 = v51;
      v53 = sub_1001A90EC(v21);
      v55 = v51[2];
      v56 = (v54 & 1) == 0;
      v7 = v55 + v56;
      if (__OFADD__(v55, v56))
        break;
      v20 = v53;
      v57 = v54;
      sub_1000055B0(&qword_1002B5E38);
      v58 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v7);
      v1 = v76;
      if (v58)
      {
        v59 = sub_1001A90EC(v82);
        if ((v57 & 1) != (v60 & 1))
          goto LABEL_38;
        v20 = v59;
      }
      v61 = v88;
      if ((v57 & 1) != 0)
      {
        v62 = v88[7];
        swift_release();
        *(_QWORD *)(v62 + 8 * v20) = v43;
      }
      else
      {
        v88[(v20 >> 6) + 8] |= 1 << v20;
        sub_1000E0E9C(v82, v61[6] + *(_QWORD *)(v74 + 72) * v20);
        *(_QWORD *)(v61[7] + 8 * v20) = v43;
        v63 = v61[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_32;
        v61[2] = v65;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1000E0F24(v82);
      sub_1001D85AC((uint64_t)v61);
      sub_100041108();

      sub_1000E0F24(v87);
      v11 += 2;
      v32 = v85 - 1;
      if (v85 == 1)
      {
        swift_bridgeObjectRelease(v69);
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (v3 < 0)
      v67 = v3;
    else
      v67 = v3 & 0xFFFFFFFFFFFFFF8;
    sub_100043360();
    v25 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease(v3);
  }
  __break(1u);
LABEL_38:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v81);
  __break(1u);
}

void *sub_1001D94DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000055B0(&qword_1002B5E28);
    v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v6 = v3;
  v4 = swift_bridgeObjectRetain(a1);
  sub_1001DC388(v4, 1, &v6);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_1001D9584()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  v13 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(39, 1);
  v0._countAndFlagsBits = 542327881;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v2 = UUID.uuidString.getter(v1);
  v4 = sub_1000599D0(8, v2, v3);
  v6 = v5;
  v7 = static String._fromSubstring(_:)(v4);
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._object = (void *)0x800000010025A390;
  v11._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v11);
  return v13;
}

void HIDVirtualServicePool.updateInputDevices(inputDevices:for:useRemoteAcceleration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[7];

  sub_10002626C();
  v2 = v0;
  v30 = v3;
  v5 = v4;
  v29 = v6;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v7 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  v9 = sub_1000D945C();
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  sub_1000262EC();
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000E440();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_100293130, v19 + 9, v17 | 7);
  *(_QWORD *)(v20 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  v21 = v20 + v19;
  *(_QWORD *)v21 = v29;
  *(_BYTE *)(v21 + 8) = v30;
  v35[5] = sub_1001DC780;
  v35[6] = v20;
  v35[1] = _NSConcreteStackBlock;
  v35[2] = 1107296256;
  v22 = sub_1000D9558((uint64_t)sub_10000E610);
  swift_retain(v2);
  v23 = sub_10003AFBC();
  static DispatchQoS.unspecified.getter(v23);
  v35[0] = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v25 = v24;
  v26 = sub_10003B038();
  sub_100179800((unint64_t *)&qword_1002AA6D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v35, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v1, v22);
  _Block_release(v22);
  sub_1000D9488();
  sub_1001DCB28();
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_1001D9874(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v2 = sub_1001D9984(a2);
  sub_1001D8DEC();
  v4 = v3;
  result = swift_bridgeObjectRelease(v2);
  if (!((unint64_t)v4 >> 62))
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease(v4);
    return sub_1001D9A20();
  }
  if (v4 < 0)
    v8 = v4;
  else
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = _CocoaArrayWrapper.endIndex.getter(v8);
  result = swift_bridgeObjectRelease(v4);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        swift_retain(*(_QWORD *)(v4 + 8 * i + 32));
      sub_1001D7804();
      swift_release();
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001D9984(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];
  _BYTE v8[24];
  _QWORD *v9;

  v9 = _swiftEmptyArrayStorage;
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices, v8, 0, 0);
  v4 = *v3;
  v7[2] = a1;
  v7[3] = &v9;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1001DB728((uint64_t)sub_1001DCA6C, (uint64_t)v7, v4);
  swift_bridgeObjectRelease(v4);
  sub_1001D85AC(v5);
  return v9;
}

uint64_t sub_1001D9A20()
{
  uint64_t v0;
  BOOL v1;
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _BYTE v20[24];

  v1 = sub_1001D8D68();
  v2 = sub_1001D8CDC();
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices, v20, 0, 0);
  v4 = *v3;
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v1;
  v11 = v2;
  result = swift_bridgeObjectRetain(v4);
  v13 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * i);
    *(_BYTE *)(v19 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_keyboardEnabled) = v10;
    swift_retain(v19);
    sub_1001D7FC0();
    *(_BYTE *)(v19 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_pointingEnabled) = v11;
    sub_1001D7FC0();
    result = swift_release();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9)
      return swift_release();
    v17 = *(_QWORD *)(v5 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v9)
        return swift_release();
      v17 = *(_QWORD *)(v5 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v9)
          return swift_release();
        v17 = *(_QWORD *)(v5 + 8 * v13);
        if (!v17)
        {
          v13 = v16 + 3;
          if (v16 + 3 >= v9)
            return swift_release();
          v17 = *(_QWORD *)(v5 + 8 * v13);
          if (!v17)
            break;
        }
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v9)
    return swift_release();
  v17 = *(_QWORD *)(v5 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v9)
      return swift_release();
    v17 = *(_QWORD *)(v5 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL sub_1001D9BE8(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;

  v28 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000055B0(&qword_1002B5BF8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v27 - v15;
  v17 = *a2;
  sub_1000E0E9C(a1, (uint64_t)&v27 - v15);
  v18 = *(int *)(v11 + 48);
  *(_QWORD *)&v16[v18] = v17;
  sub_1000E0E9C((uint64_t)v16, (uint64_t)v14);
  *(_QWORD *)&v14[v18] = v17;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v14, v7);
  swift_retain_n(v17, 2);
  sub_1000E0F24((uint64_t)v14);
  sub_10013FC28((unint64_t *)&qword_1002A9370, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)(v10, a3, v7, v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v20 & 1) != 0)
  {
    v21 = *(int *)(v11 + 48);
    v22 = sub_1000E0E9C((uint64_t)v16, (uint64_t)v14);
    *(_QWORD *)&v14[v21] = v17;
    v23 = v28;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    v24 = *(_QWORD *)((*v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA7AC(v24);
    v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v17);
    specialized Array._endMutation()(v25);
    sub_10000E36C((uint64_t)v16, &qword_1002B5BF8);
    sub_1000E0F24((uint64_t)v14);
  }
  else
  {
    sub_10000E36C((uint64_t)v16, &qword_1002B5BF8);
    swift_release();
  }
  return (v20 & 1) == 0;
}

void HIDVirtualServicePool.removeInputDevices(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[7];

  sub_10002626C();
  v3 = v2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22[4] = *(_QWORD *)(v4 - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  v6 = sub_1000D945C();
  v22[2] = *(_QWORD *)(v6 - 8);
  v22[3] = v6;
  sub_1000262EC();
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000E440();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v10);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_100293180, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = v0;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v23[5] = sub_1001DC830;
  v23[6] = v15;
  v23[1] = _NSConcreteStackBlock;
  v23[2] = 1107296256;
  v16 = sub_1000D9558((uint64_t)sub_10000E610);
  v17 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v17);
  v23[0] = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v19 = v18;
  v20 = sub_10003B038();
  sub_100179800((unint64_t *)&qword_1002AA6D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v1, v16);
  _Block_release(v16);
  sub_1000D9488();
  sub_1001DCB28();
  swift_release();
  sub_10000E4E0();
}

char *sub_1001D9FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *result;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FAFC(a1 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, (uint64_t)v10, &qword_1002AE160);
  v11 = type metadata accessor for Logger(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_10000E36C((uint64_t)v10, &qword_1002AE160);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.default.getter(v13, v14);
    v16 = v15;
    if (os_log_type_enabled(v13, v15))
    {
      v45 = a2;
      v17 = swift_slowAlloc(12, -1);
      v43 = v16;
      v18 = (uint8_t *)v17;
      v19 = (_QWORD *)swift_slowAlloc(32, -1);
      v44 = v19;
      v48 = v19;
      v46 = a1;
      *(_DWORD *)v18 = 136446210;
      v20 = v18 + 12;
      v41 = v18 + 4;
      v42 = v18;
      v21 = UUID.uuidString.getter(v19);
      v23 = sub_1000599D0(8, v21, v22);
      v25 = v24;
      v26 = static String._fromSubstring(_:)(v23);
      v28 = v27;
      swift_bridgeObjectRelease(v25);
      v47 = sub_100006FCC(v26, v28, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v41, v20);
      v29 = v28;
      a2 = v45;
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v30 = v42;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v43, "IDS %{public}s: Remove Input Devices", v42, 0xCu);
      v31 = v44;
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v32 = (uint64_t)sub_1001D9984(a2);
  v33 = v32;
  if (!((unint64_t)v32 >> 62))
  {
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v34)
      goto LABEL_9;
LABEL_21:
    swift_bridgeObjectRelease(v33);
    return (char *)sub_1001D9A20();
  }
  if (v32 >= 0)
    v32 &= 0xFFFFFFFFFFFFFF8uLL;
  v34 = _CocoaArrayWrapper.endIndex.getter(v32);
  if (!v34)
    goto LABEL_21;
LABEL_9:
  v48 = _swiftEmptyArrayStorage;
  result = sub_1001DB24C(0, v34 & ~(v34 >> 63), 0);
  if ((v34 & 0x8000000000000000) == 0)
  {
    v36 = 0;
    v37 = v48;
    do
    {
      if ((v33 & 0xC000000000000001) != 0)
        specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
      else
        swift_retain(*(_QWORD *)(v33 + 8 * v36 + 32));
      sub_1001D7804();
      swift_release();
      v48 = v37;
      v39 = v37[2];
      v38 = v37[3];
      v40 = v39 + 1;
      if (v39 >= v38 >> 1)
      {
        sub_1001DB24C((char *)(v38 > 1), v39 + 1, 1);
        v37 = v48;
      }
      ++v36;
      v37[2] = v40;
    }
    while (v34 != v36);
    swift_bridgeObjectRelease(v33);
    swift_release();
    return (char *)sub_1001D9A20();
  }
  __break(1u);
  return result;
}

void HIDVirtualServicePool.addServiceClient(_:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_10002626C();
  v2 = v1;
  sub_1000055B0(&qword_1002B5BF0);
  sub_1000262EC();
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_virtualServices);
  sub_10005FE28((uint64_t)v9, (uint64_t)&v38);
  v10 = *v9;
  v36 = *v9 + 64;
  sub_100084F48();
  v13 = v12 & v11;
  v15 = (unint64_t)(v14 + 63) >> 6;
  v35 = v15 - 1;
  sub_1000432E0();
  v16 = 0;
  if (!v13)
    goto LABEL_4;
LABEL_2:
  v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v18 = v17 | (v16 << 6);
LABEL_3:
  v19 = *(_QWORD *)(v10 + 48);
  v20 = sub_1001C82B4();
  sub_1000E0E9C(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, (uint64_t)v6);
  v21 = *(_QWORD *)(v10 + 56);
  v22 = sub_1001DCB64();
  *(_QWORD *)&v6[*(int *)(v22 + 48)] = *(_QWORD *)(v21 + 8 * v18);
  sub_1001DCB08((uint64_t)v6, 0, v23, v22);
  sub_1000088D0();
  while (1)
  {
    sub_10005FA70((uint64_t)v6, (uint64_t)v8, &qword_1002B5BF0);
    v29 = sub_1001DCB64();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v29) == 1)
    {
      swift_release();
      goto LABEL_29;
    }
    v30 = *(_QWORD *)&v8[*(int *)(v29 + 48)];
    v31 = *(_QWORD *)(v30 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_service);
    if (v31)
    {
      sub_10005FE28(v31 + 96, (uint64_t)&v37);
      v32 = *(id *)(v31 + 96);
      if (v32 == objc_msgSend(v2, "serviceID"))
        break;
    }
    sub_10006005C();
    sub_1000E0F24((uint64_t)v8);
    if (v13)
      goto LABEL_2;
LABEL_4:
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v24 < v15)
    {
      v25 = *(_QWORD *)(v36 + 8 * v24);
      if (v25)
        goto LABEL_7;
      v26 = v16 + 2;
      ++v16;
      if (v24 + 1 < v15)
      {
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (v25)
          goto LABEL_10;
        v16 = v24 + 1;
        if (v24 + 2 < v15)
        {
          v25 = *(_QWORD *)(v36 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_7;
          }
          v26 = v24 + 3;
          v16 = v24 + 2;
          if (v24 + 3 < v15)
          {
            v25 = *(_QWORD *)(v36 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                v24 = v26 + 1;
                if (__OFADD__(v26, 1))
                  break;
                if (v24 >= v15)
                {
                  v16 = v35;
                  goto LABEL_21;
                }
                v25 = *(_QWORD *)(v36 + 8 * v24);
                ++v26;
                if (v25)
                  goto LABEL_7;
              }
LABEL_31:
              __break(1u);
              return;
            }
LABEL_10:
            v24 = v26;
LABEL_7:
            v13 = (v25 - 1) & v25;
            v18 = __clz(__rbit64(v25)) + (v24 << 6);
            v16 = v24;
            goto LABEL_3;
          }
        }
      }
    }
LABEL_21:
    v27 = sub_1001DCB64();
    sub_1001DCB08((uint64_t)v6, 1, v28, v27);
    v13 = 0;
  }
  swift_release();
  v33 = *(void **)(v30 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client);
  *(_QWORD *)(v30 + OBJC_IVAR____TtCC11EnsembleHID21HIDVirtualServicePool14VirtualService_client) = v2;

  v34 = v2;
  sub_10006005C();
  sub_1000E0F24((uint64_t)v8);
LABEL_29:
  sub_10000E4E0();
}

uint64_t HIDVirtualServicePool.deinit()
{
  uint64_t v0;

  sub_10000E36C(v0 + OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_logger, &qword_1002AE160);
  sub_1001DCB10(OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_queue);
  sub_1001DCB10(OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool_workloop);
  swift_bridgeObjectRelease();
  sub_10005FED8(OBJC_IVAR____TtC11EnsembleHID21HIDVirtualServicePool___enabledDeviceTypesLock);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HIDVirtualServicePool.__deallocating_deinit()
{
  return sub_1000936C8((void (*)(void))HIDVirtualServicePool.deinit);
}

_QWORD *sub_1001DA6E8(uint64_t a1)
{
  return sub_1001DA6F4(a1, (uint64_t)&type metadata for Int);
}

_QWORD *sub_1001DA6F4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (a1 < 0)
  {
    sub_10006D098();
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else if (a1)
  {
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_1001DA778(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2 < 0)
  {
    sub_10006D098();
    result = (char *)sub_10006D0DC((uint64_t)"Fatal error", 11, 2, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", 55, v4, (uint64_t)"Swift/UnsafePointer.swift", v5, v6, v7, v8);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_1001DA7E4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2 < 0)
  {
    sub_10006D098();
    result = (char *)sub_10006D0DC((uint64_t)"Fatal error", 11, 2, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", 55, v4, (uint64_t)"Swift/UnsafePointer.swift", v5, v6, v7, v8);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

uint64_t sub_1001DA848(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  if (a2 < 0)
  {
    v8 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v8, 1046, 0);
    __break(1u);
  }
  else if (a3 < a1
         || (result = sub_1000055B0(&qword_1002B5E30), a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    v7 = sub_1000055B0(&qword_1002B5E30);
    return swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v7);
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront(a3, a1, a2, result);
  }
  return result;
}

uint64_t sub_1001DA94C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001DAA18(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a2 < 0)
  {
    sub_10006D098();
    v9 = "UnsafeMutablePointer.initialize with negative count";
    v10 = 51;
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002B58A0);
      return swift_arrayInitWithCopy(a3, a1);
    }
    sub_10006D098();
    v9 = "UnsafeMutablePointer.initialize overlapping range";
    v10 = 49;
  }
  result = sub_10006D0DC((uint64_t)"Fatal error", 11, 2, (uint64_t)v9, v10, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v11, v12, v13);
  __break(1u);
  return result;
}

uint64_t sub_1001DAAE8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10006D098();
    v7 = "UnsafeMutablePointer.initialize with negative count";
    v8 = 51;
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    sub_10006D098();
    v7 = "UnsafeMutablePointer.initialize overlapping range";
    v8 = 49;
  }
  result = sub_10006D0DC((uint64_t)"Fatal error", 11, 2, (uint64_t)v7, v8, v5, (uint64_t)"Swift/UnsafePointer.swift", v6, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_1001DAB94(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(sub_1000055B0(&qword_1002B5E30) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001DAC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000055B0(&qword_1002ACA10);
  v4 = (_QWORD *)sub_1000088D8(v3, 8 * v1 + 32);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 8);
  v6 = sub_10005C9C4(&v9, v4 + 4, v1, a1);
  v7 = v9;
  sub_100043360();
  sub_10005E1F4(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001DAD64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000055B0(&qword_1002AC0E0);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
  v6 = sub_1001BFDB4((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10005E1F4(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Int sub_1001DAE48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[9];

  v3 = v2;
  v6 = type metadata accessor for HIDUniversalSenderID(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002B5E28);
  v45 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_42;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v2;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  if (!v15)
    goto LABEL_9;
LABEL_8:
  v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v23)) + (v18 << 6))
  {
    v25 = *(_QWORD *)(v43 + 72);
    v26 = *(_QWORD *)(v9 + 48) + v25 * i;
    if ((v45 & 1) != 0)
    {
      sub_1000E0EE0(v26, (uint64_t)v8);
      v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * i);
    }
    else
    {
      sub_1000E0E9C(v26, (uint64_t)v8);
      v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * i);
      swift_retain(v27);
    }
    Hasher.init(_seed:)(v46, *(_QWORD *)(v11 + 40));
    v28 = type metadata accessor for UUID(0);
    sub_10013FC28(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)(v46, v28, v29);
    Hasher._combine(_:)(*(_QWORD *)&v8[*(int *)(v44 + 20)]);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) == 0)
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v35 || (v34 & 1) == 0)
      {
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v32);
        if (v37 != -1)
        {
          v33 = __clz(__rbit64(~v37)) + (v32 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v16 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    result = sub_1000E0EE0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v25 * v33);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v33) = v27;
    ++*(_QWORD *)(v11 + 16);
    if (v15)
      goto LABEL_8;
LABEL_9:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_44;
    if (v21 >= v41)
    {
      swift_release();
      v3 = v40;
      v22 = v42;
      goto LABEL_37;
    }
    v22 = v42;
    v23 = v42[v21];
    ++v18;
    if (!v23)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v41)
        goto LABEL_35;
      v23 = v42[v18];
      if (!v23)
        break;
    }
LABEL_20:
    v15 = (v23 - 1) & v23;
  }
  v24 = v21 + 2;
  if (v24 < v41)
  {
    v23 = v42[v24];
    if (!v23)
    {
      while (1)
      {
        v18 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_45;
        if (v18 >= v41)
          goto LABEL_35;
        v23 = v42[v18];
        ++v24;
        if (v23)
          goto LABEL_20;
      }
    }
    v18 = v24;
    goto LABEL_20;
  }
LABEL_35:
  swift_release();
  v3 = v40;
LABEL_37:
  if ((v45 & 1) != 0)
  {
    v38 = 1 << *(_BYTE *)(v9 + 32);
    if (v38 >= 64)
      sub_1001194A8(0, (unint64_t)(v38 + 63) >> 6, v22);
    else
      *v22 = -1 << v38;
    *(_QWORD *)(v9 + 16) = 0;
  }
LABEL_42:
  result = swift_release();
  *v3 = v11;
  return result;
}

_QWORD *sub_1001DB1E0(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_1001DB430(a1, a2, a3, *v3, &qword_1002B5E48, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100078E4C, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1001DA94C);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1001DB214(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1001DB348(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_1001DB230(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_1001DB50C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1001DB24C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1001DB654(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1001DB268(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0(&qword_1002ACA10);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001DA7E4(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10006A408(v14, v8, v13);
  }
  swift_release();
  return v11;
}

char *sub_1001DB348(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0(&qword_1002B52F0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001DA778(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DAA18((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release();
  return v11;
}

_QWORD *sub_1001DB430(_QWORD *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v12 <= v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    v15 = sub_1000055B0(a5);
    v16 = (_QWORD *)sub_1000088D8(v15, 16 * v14 + 32);
    j__malloc_size(v16);
    sub_100079960();
    v16[2] = v13;
    v16[3] = v17;
  }
  else
  {
    v16 = _swiftEmptyArrayStorage;
  }
  v18 = v16 + 4;
  v19 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v19, v13, v18);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v19, v13, v18);
  }
  swift_release();
  return v16;
}

size_t sub_1001DB50C(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000055B0(&qword_1002B5E40);
  v11 = *(_QWORD *)(sub_1000055B0(&qword_1002B5E30) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_24;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000055B0(&qword_1002B5E30) - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (unint64_t)v15 + v18;
  v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_1001DA848(v20, v8, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001DAB94(v20, v8, v19);
  }
  swift_release();
  return (size_t)v15;
}

char *sub_1001DB654(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0(&qword_1002B5E20);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000076B4(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000075F0(v14, v8, v13);
  }
  swift_release();
  return v11;
}

uint64_t sub_1001DB728(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(char *, uint64_t *);
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v16;

  v6 = (uint64_t (*)(char *, uint64_t *))isStackAllocationSafe;
  v7 = *(_BYTE *)(a3 + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v10, v12);
    v13 = sub_1001DB8A4(v12, v10, a3, v6);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (unint64_t *)swift_slowAlloc(v11, -1);
    sub_1001194A8(0, v10, v14);
    a2 = sub_1001DB8A4(v14, v10, a3, v6);
    swift_slowDealloc(v14, -1, -1);
  }
  return a2;
}

uint64_t sub_1001DB8A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t *);
  uint64_t v29;

  v28 = a4;
  v22 = a2;
  v23 = a1;
  v6 = type metadata accessor for HIDUniversalSenderID(0);
  v27 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 64);
  v24 = 0;
  v25 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v16 = v15 | (v10 << 6);
LABEL_17:
    sub_1000E0E9C(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v27 + 72) * v16, (uint64_t)v9);
    v29 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16);
    swift_retain(v29);
    v20 = v28(v9, &v29);
    swift_release();
    result = sub_1000E0F24((uint64_t)v9);
    if (v4)
      return result;
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = __OFADD__(v24++, 1);
      if (v17)
        goto LABEL_30;
    }
  }
  v17 = __OFADD__(v10++, 1);
  if (v17)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v26)
    return sub_1001DBF04(v23, v22, v24, (_QWORD *)a3);
  v18 = *(_QWORD *)(v25 + 8 * v10);
  if (v18)
  {
LABEL_16:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_17;
  }
  v19 = v10 + 1;
  if (v10 + 1 >= v26)
    return sub_1001DBF04(v23, v22, v24, (_QWORD *)a3);
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v10 + 2;
  if (v10 + 2 >= v26)
    return sub_1001DBF04(v23, v22, v24, (_QWORD *)a3);
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
    goto LABEL_15;
  v19 = v10 + 3;
  if (v10 + 3 >= v26)
    return sub_1001DBF04(v23, v22, v24, (_QWORD *)a3);
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
  {
LABEL_15:
    v10 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v26)
      return sub_1001DBF04(v23, v22, v24, (_QWORD *)a3);
    v18 = *(_QWORD *)(v25 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void sub_1001DBAF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[10];

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v56 = v4;
  v55 = v5;
  v60 = sub_1001C82B4();
  v59 = *(_QWORD *)(v60 - 8);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1001DCACC(v7, (uint64_t)v55);
  __chkstk_darwin(v8);
  v58 = (uint64_t)&v55 - v9;
  if (!v3)
    goto LABEL_39;
  if (v1[2] == v3)
  {
    sub_100026AE4();
LABEL_39:
    sub_10000E4E0();
    return;
  }
  sub_1000055B0(&qword_1002B5988);
  v72 = static _DictionaryStorage.allocate(capacity:)(v3);
  if (v56 < 1)
    v10 = 0;
  else
    v10 = *v55;
  v11 = 0;
  v12 = v72 + 64;
  v57 = v1;
  while (1)
  {
    v70 = v3;
    if (v10)
    {
      v61 = (v10 - 1) & v10;
      v62 = v11;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
      goto LABEL_28;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_42;
    if (v14 >= v56)
      goto LABEL_39;
    v15 = v55[v14];
    v16 = v11 + 1;
    if (!v15)
    {
      sub_1001DCB48();
      if (v17 == v18)
        goto LABEL_39;
      sub_1001DCB38();
      if (!v15)
      {
        sub_1001DCB48();
        if (v17 == v18)
          goto LABEL_39;
        sub_1001DCB38();
        if (!v15)
          break;
      }
    }
LABEL_27:
    v61 = (v15 - 1) & v15;
    v62 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_28:
    v22 = v1[6];
    v63 = *(_QWORD *)(v59 + 72);
    v23 = v58;
    sub_1000E0E9C(v22 + v63 * v13, v58);
    v24 = (uint64_t *)(v1[7] + 80 * v13);
    v26 = *v24;
    v25 = v24[1];
    v27 = v24[2];
    v28 = v24[3];
    v29 = v24[4];
    v30 = v24[5];
    v31 = v24[6];
    v32 = v24[8];
    v68 = v24[7];
    v69 = v31;
    v33 = v24[9];
    v34 = v23;
    v35 = v71;
    sub_1000E0EE0(v34, v71);
    Hasher.init(_seed:)(v73, *(_QWORD *)(v72 + 40));
    v64 = v26;
    v65 = v25;
    v36 = v26;
    v37 = v33;
    sub_10002517C(v36, v25);
    v67 = v27;
    sub_10002517C(v27, v28);
    v66 = v29;
    v38 = v29;
    v39 = v68;
    v40 = v69;
    sub_10002517C(v38, v30);
    sub_10002517C(v40, v39);
    sub_10002517C(v32, v37);
    v41 = sub_10000E440();
    sub_10013FC28(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)(v73, v41, v42);
    Hasher._combine(_:)(*(_QWORD *)(v35 + *(int *)(v60 + 20)));
    v43 = Hasher._finalize()();
    v44 = -1 << *(_BYTE *)(v72 + 32);
    v45 = v43 & ~v44;
    v46 = v45 >> 6;
    if (((-1 << v45) & ~*(_QWORD *)(v12 + 8 * (v45 >> 6))) == 0)
    {
      v48 = 0;
      v49 = (unint64_t)(63 - v44) >> 6;
      while (++v46 != v49 || (v48 & 1) == 0)
      {
        v50 = v46 == v49;
        if (v46 == v49)
          v46 = 0;
        v48 |= v50;
        v51 = *(_QWORD *)(v12 + 8 * v46);
        if (v51 != -1)
        {
          v47 = __clz(__rbit64(~v51)) + (v46 << 6);
          goto LABEL_37;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v47 = __clz(__rbit64((-1 << v45) & ~*(_QWORD *)(v12 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
    *(_QWORD *)(v12 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    v52 = v72;
    sub_1000E0EE0(v71, *(_QWORD *)(v72 + 48) + v47 * v63);
    v53 = (uint64_t *)(*(_QWORD *)(v52 + 56) + 80 * v47);
    v54 = v65;
    *v53 = v64;
    v53[1] = v54;
    v53[2] = v67;
    v53[3] = v28;
    v53[4] = v66;
    v53[5] = v30;
    v53[6] = v40;
    v53[7] = v39;
    v53[8] = v32;
    v53[9] = v37;
    ++*(_QWORD *)(v52 + 16);
    v3 = v70 - 1;
    if (__OFSUB__(v70, 1))
      goto LABEL_41;
    v1 = v57;
    v10 = v61;
    v11 = v62;
    if (v70 == 1)
      goto LABEL_39;
  }
  v20 = v19 + 3;
  if (v20 >= v56)
    goto LABEL_39;
  v15 = v55[v20];
  if (v15)
  {
    v16 = v20;
    goto LABEL_27;
  }
  while (!__OFADD__(v20, 1))
  {
    sub_1001DCB48();
    if (v17 == v18)
      goto LABEL_39;
    sub_1001DCB38();
    v20 = v21 + 1;
    if (v15)
      goto LABEL_27;
  }
LABEL_43:
  __break(1u);
}

Swift::Int sub_1001DBF04(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::Int result;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[9];

  v8 = type metadata accessor for HIDUniversalSenderID(0);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v42 = (uint64_t)&v39 - v12;
  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (Swift::Int)a4;
  }
  sub_1000055B0(&qword_1002B5E28);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v14 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  v41 = a4;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v45 = v16;
      v19 = v18 | (v16 << 6);
    }
    else
    {
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v20 >= v40)
        return v14;
      v21 = v39[v20];
      v22 = v16 + 1;
      if (!v21)
      {
        v22 = v16 + 2;
        if (v16 + 2 >= v40)
          return v14;
        v21 = v39[v22];
        if (!v21)
        {
          v22 = v16 + 3;
          if (v16 + 3 >= v40)
            return v14;
          v21 = v39[v22];
          if (!v21)
          {
            v23 = v16 + 4;
            if (v16 + 4 >= v40)
              return v14;
            v21 = v39[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v40)
                  return v14;
                v21 = v39[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v16 + 4;
          }
        }
      }
LABEL_24:
      v15 = (v21 - 1) & v21;
      v45 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = *(_QWORD *)(v43 + 72);
    sub_1000E0E9C(a4[6] + v25 * v19, v42);
    v26 = *(_QWORD *)(a4[7] + 8 * v19);
    sub_1000E0EE0(v24, (uint64_t)v11);
    Hasher.init(_seed:)(v46, *(_QWORD *)(v14 + 40));
    v27 = type metadata accessor for UUID(0);
    sub_10013FC28(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v29 = v28;
    swift_retain(v26);
    dispatch thunk of Hashable.hash(into:)(v46, v27, v29);
    Hasher._combine(_:)(*(_QWORD *)&v11[*(int *)(v44 + 20)]);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v14 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) == 0)
      break;
    v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v17 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    result = sub_1000E0EE0((uint64_t)v11, *(_QWORD *)(v14 + 48) + v33 * v25);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v33) = v26;
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      goto LABEL_39;
    a4 = v41;
    v16 = v45;
    if (!a3)
      return v14;
  }
  v34 = 0;
  v35 = (unint64_t)(63 - v30) >> 6;
  while (++v32 != v35 || (v34 & 1) == 0)
  {
    v36 = v32 == v35;
    if (v32 == v35)
      v32 = 0;
    v34 |= v36;
    v37 = *(_QWORD *)(v17 + 8 * v32);
    if (v37 != -1)
    {
      v33 = __clz(__rbit64(~v37)) + (v32 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001DC258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  v5 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = *(unsigned __int8 *)(a1 + 32 + v6);
      Hasher.init(_seed:)(v13, *(_QWORD *)(a2 + 40));
      HIDDeviceType.hash(into:)(v13, v7);
      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(a2 + 32);
      v10 = v8 & ~v9;
      if (((*(_QWORD *)(v5 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        break;
    }
LABEL_11:
    if (++v6 == v3)
    {
      swift_bridgeObjectRelease(a1);
      return 1;
    }
  }
  if (!static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(a2 + 48) + v10), v7))
  {
    v11 = ~v9;
    do
    {
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v5 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_11;
    }
    while (!static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(a2 + 48) + v10), v7));
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1001DC388(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v7 = type metadata accessor for HIDUniversalSenderID(0);
  v44 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v45 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000055B0(&qword_1002B5E30);
  v10 = __chkstk_darwin(v9);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return swift_bridgeObjectRelease(a1);
  v39 = v7;
  v40 = v3;
  v15 = *(int *)(v10 + 48);
  v16 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v42 = *(_QWORD *)(v11 + 72);
  v43 = v15;
  v41 = a1;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    sub_10005FAFC(v16, (uint64_t)v13, &qword_1002B5E30);
    v17 = v45;
    sub_1000E0EE0((uint64_t)v13, v45);
    v18 = *(_QWORD *)&v13[v43];
    v19 = (_QWORD *)*a3;
    v21 = sub_1001A90EC(v17);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
      __break(1u);
      goto LABEL_20;
    }
    v25 = v20;
    if (v19[3] < v24)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v20 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000055B0(&qword_1002B5E38);
      _NativeDictionary.copy()();
      if ((v25 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v28 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    sub_1000E0EE0(v45, v28[6] + *(_QWORD *)(v44 + 72) * v21);
    *(_QWORD *)(v28[7] + 8 * v21) = v18;
    v29 = v28[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_18;
    v28[2] = v31;
    v16 += v42;
    a2 = 1;
    if (!--v14)
      return swift_bridgeObjectRelease_n(v41, 2);
  }
  sub_1001DAE48(v24, a2 & 1);
  v26 = sub_1001A90EC(v45);
  if ((v25 & 1) != (v27 & 1))
    goto LABEL_19;
  v21 = v26;
  if ((v25 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v32);
  v48 = v32;
  swift_errorRetain(v32);
  v33 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v33, &v48, v33, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_release();
    v34 = v41;
    swift_bridgeObjectRelease(v41);
    sub_1000E0F24(v45);
    swift_bridgeObjectRelease(v34);
    return swift_errorRelease(v48);
  }
LABEL_20:
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v36._object = (void *)0x8000000100254120;
  v36._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v36);
  _print_unlocked<A, B>(_:_:)(v45, &v46, v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v37._countAndFlagsBits = 39;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v46, v47, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

char *sub_1001DC700(uint64_t a1)
{
  return sub_1001DB268(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001DC714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_10000E440();
  sub_1001DCAEC();
  v3 = v2 | 7;
  v5 = ((v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  swift_release();
  sub_1001DCB18();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v3);
}

uint64_t sub_1001DC780()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000E440() - 8) + 80);
  return sub_1001D9874(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001DC7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DC7D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001DC7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000E440();
  sub_1001DCAEC();
  v3 = v1 + v2;
  v5 = v4 | 7;
  swift_release();
  sub_1001DCB18();
  return swift_deallocObject(v0, v3, v5);
}

char *sub_1001DC830()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000E440() - 8) + 80);
  return sub_1001D9FE4(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001DC85C()
{
  return type metadata accessor for HIDVirtualServicePool(0);
}

uint64_t type metadata accessor for HIDVirtualServicePool(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B5C28, (uint64_t)&nominal type descriptor for HIDVirtualServicePool);
}

void sub_1001DC878(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_1001DC910(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1001DC910(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B5C38)
  {
    v2 = type metadata accessor for Logger(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B5C38);
  }
}

uint64_t sub_1001DC964()
{
  return type metadata accessor for HIDVirtualServicePool.VirtualService(0);
}

void sub_1001DC96C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[17];

  v2 = type metadata accessor for HIDUniversalSenderID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001DC910(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = &unk_10022E0C8;
      v6[4] = &unk_10022E0E0;
      v6[5] = &unk_10022E0E0;
      v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[11] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[12] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[13] = &unk_10022E0F8;
      v6[14] = &unk_10022E0F8;
      v6[15] = &unk_10022E0F8;
      v6[16] = &unk_10022E0F8;
      swift_updateClassMetadata2(a1, 256, 17, v6, a1 + 80);
    }
  }
}

void sub_1001DCA3C()
{
  sub_10013FC28((unint64_t *)&qword_1002B09E8, type metadata accessor for HIDUniversalSenderID);
}

BOOL sub_1001DCA6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1001D9BE8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24));
}

uint64_t sub_1001DCA88()
{
  return sub_1001D9584();
}

uint64_t sub_1001DCAC0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

void sub_1001DCACC(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1001DCB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, a4);
}

void sub_1001DCB10(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t sub_1001DCB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_1001DCB28()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t sub_1001DCB64()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

uint64_t sub_1001DCB6C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1, 0);
}

uint64_t sub_1001DCB78()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

uint64_t sub_1001DCB80(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E0E9C(a1, v1);
}

uint64_t sub_1001DCB88(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 16) = result;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v2 + v4) = v3;
  return result;
}

BOOL sub_1001DCB94(int a1)
{
  return static HIDUsage.== infix(_:_:)(a1, 131073);
}

void sub_1001DCBA8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_10000E5C0(a1);
  sub_1001DCEA4(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001DCBD0(uint64_t a1)
{
  sub_10000E5C0(a1);
  sub_1001DCE8C();
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001DCBF8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_10000E5C0(a1);
  sub_1001DCE98(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001DCC20(int a1, Swift::UInt8 a2)
{
  sub_1001DCE80(a1, a2);
  sub_1000050D4();
}

void sub_1001DCC38(int a1, Swift::UInt16 a2)
{
  sub_1001DCEB0(a1, a2);
  sub_1000050D4();
}

void sub_1001DCC58(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  v2 = sub_1001DCEBC(a1, a2);
  sub_1001DCEA4(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001DCC7C(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_1001DCE8C();
  sub_10004740C();
  sub_10000E59C();
}

void sub_1001DCCA8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  v2 = sub_1001DCEBC(a1, a2);
  sub_1001DCE98(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10004740C();
  sub_10000E59C();
}

void *AppleVendorUsage.page.unsafeMutableAddressor()
{
  return &static AppleVendorUsage.page;
}

uint64_t static AppleVendorUsage.page.getter()
{
  return 65280;
}

EnsembleHID::AppleVendorUsage_optional __swiftcall AppleVendorUsage.init(rawValue:)(Swift::UInt8 rawValue)
{
  EnsembleHID::AppleVendorUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::AppleVendorUsage_optional __swiftcall AppleVendorUsage.init(_:)(Swift::Int a1)
{
  EnsembleHID::AppleVendorUsage_optional v1;

  sub_1001ADD54();
  return v1;
}

EnsembleHID::AppleVendorUsage_optional __swiftcall AppleVendorUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  EnsembleHID::AppleVendorUsage_optional v2;

  sub_1001ADD54();
  return v2;
}

EnsembleHID::AppleVendorUsage_optional sub_1001DCD58@<W0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, Swift::UInt8 *a3@<X8>)
{
  EnsembleHID::AppleVendorUsage_optional result;

  result = AppleVendorUsage.init(page:usage:)(a1, a2);
  *a3 = result.value.rawValue;
  a3[1] = result.is_nil;
  return result;
}

EnsembleHID::AppleVendorUsage_optional sub_1001DCD84@<W0>(Swift::UInt8 *a1@<X0>, Swift::UInt8 *a2@<X8>)
{
  EnsembleHID::AppleVendorUsage_optional result;

  result = AppleVendorUsage.init(rawValue:)(*a1);
  *a2 = result.value.rawValue;
  a2[1] = result.is_nil;
  return result;
}

void sub_1001DCDB4()
{
  unsigned __int8 *v0;

  sub_1001DCBF8(*v0);
}

void sub_1001DCDCC(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001DCCA8(a1, *v1);
}

void *AppleVendorUsage.nxTranslated.unsafeMutableAddressor()
{
  return &static AppleVendorUsage.nxTranslated;
}

unint64_t sub_1001DCDF4()
{
  unint64_t result;

  result = qword_1002B5E50;
  if (!qword_1002B5E50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorUsage, &type metadata for AppleVendorUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5E50);
  }
  return result;
}

unint64_t sub_1001DCE34()
{
  unint64_t result;

  result = qword_1002B5E58;
  if (!qword_1002B5E58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppleVendorUsage, &type metadata for AppleVendorUsage);
    atomic_store(result, (unint64_t *)&qword_1002B5E58);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleVendorUsage()
{
  return &type metadata for AppleVendorUsage;
}

void sub_1001DCE80(int a1, Swift::UInt8 a2)
{
  Hasher._combine(_:)(a2);
}

void sub_1001DCE8C()
{
  unsigned __int8 v0;

  Hasher._combine(_:)(v0);
}

void sub_1001DCE98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt8 v10;

  Hasher._combine(_:)(v10);
}

void sub_1001DCEA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt16 v10;

  Hasher._combine(_:)(v10);
}

void sub_1001DCEB0(int a1, Swift::UInt16 a2)
{
  Hasher._combine(_:)(a2);
}

_QWORD *sub_1001DCEBC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

uint64_t DigitizerContact.index.getter(uint64_t a1, unint64_t a2)
{
  char v2;

  sub_1001E1A94(a1, a1, a2);
  return v2 & 0x1F;
}

double DigitizerContact.point.getter()
{
  unint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  double v5;

  v2 = sub_1001E19D8();
  v5 = sub_1001E053C(v2, v3, v4);
  sub_1001E053C(24, v1, v0);
  return v5;
}

void DigitizerContact.range.getter(uint64_t a1, uint64_t a2)
{
  HIDReport.subscript.getter(7, a1, a2);
}

void DigitizerContact.touch.getter(uint64_t a1, uint64_t a2)
{
  HIDReport.subscript.getter(6, a1, a2);
}

void DigitizerContact.resting.getter(uint64_t a1, uint64_t a2)
{
  HIDReport.subscript.getter(8, a1, a2);
}

_QWORD *DigitizerReport.contacts.getter()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v0 = sub_1001E19D8();
  sub_1001E0D24(v0, v1, v2);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v4 = v3;
  sub_1001E19B8();
  return sub_1001DD3F0(0, v4);
}

Swift::UInt8_optional __swiftcall DigitizerReport.contactIdentity(atIndex:)(Swift::Int atIndex)
{
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8_optional result;

  sub_1001E1A88(atIndex, v1, v2);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_1001DD058()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;

  sub_1001B768C();
  if (BYTE6(v3) < 0x2EuLL)
  {
    v4 = 0;
    v5 = 1;
  }
  else
  {
    if (__OFADD__(v2, 41))
    {
      __break(1u);
      JUMPOUT(0x1001DD0E8);
    }
    sub_1001E0D24(8 * (v2 + 41), v1, v0);
    v5 = 0;
  }
  return v4 | (v5 << 8);
}

void DigitizerReport.scrollReport.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  HIDReport.storage.getter(a1, a2);
  DigitizerReport.contactRange(forIndex:)(5, a1, a2);
  v5 = v4 + 13;
  if (__OFADD__(v4, 13))
  {
    __break(1u);
  }
  else if (v5 >= v4)
  {
    sub_1001E1A44(v4, v5);
    sub_1001E19C4();
    sub_1001DD170(a2, a1);
    ScrollReport.init(_:)();
    return;
  }
  __break(1u);
}

void sub_1001DD170(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1001DD1C4
     + *((int *)qword_1001DD2D8 + (sub_10000DBE4(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1001DD1D4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1001E19B8();
  sub_1001E1264(v2, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3), &v6);
  sub_100022AEC(v1, v0);
  v4 = v6;
  sub_100005988(&v7);
  return v4;
}

void DigitizerReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = 0x2E00000000;
  v2 = __DataStorage.init(length:)(46);
  sub_1000E6A84((int *)&v1, 0);
  v2 |= 0x4000000000000000uLL;
  Data._Representation.subscript.setter(9, 0);
  __asm { BR              X11 }
}

uint64_t sub_1001DD3B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  a1 = (int)a1;
  if ((unint64_t)((int)a1 - 0x1000000000000000) >> 61 == 7)
    goto LABEL_4;
  __break(1u);
  do
  {
    __break(1u);
LABEL_4:
    v2 = 8 * a1;
    a1 = 8 * a1 + 16;
  }
  while (__OFADD__(v2, 16));
  Data._Representation.subscript.setter(5, a1 >> 3);
  return v3;
}

_QWORD *sub_1001DD3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v2)
  {
    sub_1001DB1E0(0, v2 & ~(v2 >> 63), 0);
    if (a2 >= a1 && (v2 & 0x8000000000000000) == 0)
    {
      if (a2 != a1)
      {
        sub_1001E1A64();
        __asm { BR              X9 }
      }
      __break(1u);
      JUMPOUT(0x1001DD5B4);
    }
LABEL_10:
    __break(1u);
    JUMPOUT(0x1001DD5D0);
  }
  sub_1001B768C();
  return _swiftEmptyArrayStorage;
}

void *DigitizerReport.reportID.unsafeMutableAddressor()
{
  return &static DigitizerReport.reportID;
}

void *DigitizerContact.bitCount.unsafeMutableAddressor()
{
  return &static DigitizerContact.bitCount;
}

void *DigitizerReport.bitCount.unsafeMutableAddressor()
{
  return &static DigitizerReport.bitCount;
}

uint64_t static DigitizerReport.bitCount.getter()
{
  return 368;
}

void sub_1001DD60C(uint64_t a1)
{
  sub_1001B8D9C(a1, static DigitizerReport.descriptor, (uint64_t (*)(void))sub_1001DD620);
}

void sub_1001DD620()
{
  sub_1001DEA04((uint64_t (*)(_QWORD))type metadata accessor for ApplicationCollection, (uint64_t)sub_1001DD644, (void (*)(uint64_t, _QWORD, __n128))ApplicationCollection.init(content:), (uint64_t)&protocol witness table for ApplicationCollection);
}

void (*sub_1001DD644())(_QWORD *, char *, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, char *, uint64_t);
  uint64_t v17;
  void (*v18)(_QWORD *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  char *v110;
  _BYTE *v111;
  _BYTE *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  _BYTE *v145;
  unsigned __int8 *v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  void (*v197)(_QWORD *, char *, uint64_t);
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  void (*v202)(_QWORD *, char *, uint64_t);
  uint64_t v203;
  _QWORD *v204;
  void (*v205)(char *, uint64_t);
  uint64_t v206;
  _QWORD *v207;
  void (*v208)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  void (*v220)(_QWORD *, char *, uint64_t);
  char *v221;
  void (*v222)(char *, uint64_t, uint64_t);
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  char *v231;
  uint64_t v232;
  _QWORD *v233;
  char *v234;
  uint64_t v235;
  _QWORD *v236;
  char *v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  void (*v242)(_QWORD *, char *, uint64_t);
  __n128 v243;
  void (*v244)(_QWORD *, uint64_t, __n128);
  void (*v245)(char *, uint64_t);
  void (*v246)(char *, uint64_t);
  uint64_t v247;
  void (*v248)(char *, uint64_t);
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void (*v254)(char *, uint64_t);
  uint64_t v255;
  uint64_t v257;
  unsigned __int8 *v258;
  char *v259;
  char *v260;
  unsigned int v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  void (*v273)(char *);
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  void (*v283)(char *, uint64_t, uint64_t);
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void (*v306)(_QWORD *, _QWORD *, uint64_t);
  void (*v307)(char *, uint64_t);
  void (*v308)(_QWORD *, char *, uint64_t);
  void (*v309)(_QWORD *, char *, uint64_t);
  _QWORD *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  _QWORD *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;

  type metadata accessor for HIDReportDescriptor();
  v262 = v0;
  v305 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v324 = (char *)&v257 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v323 = (char *)&v257 - v3;
  __chkstk_darwin(v4);
  v319 = (char *)&v257 - v5;
  __chkstk_darwin(v6);
  v322 = (char *)&v257 - v7;
  __chkstk_darwin(v8);
  v321 = (char *)&v257 - v9;
  __chkstk_darwin(v10);
  v320 = (char *)&v257 - v11;
  type metadata accessor for Input.Bit8();
  v307 = (void (*)(char *, uint64_t))v12;
  v265 = *((_QWORD *)v12 - 1);
  __chkstk_darwin((void (*)(char *, uint64_t))v12);
  v280 = (char *)&v257 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v284 = v14;
  v267 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v260 = (char *)&v257 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v309 = v16;
  v269 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v16);
  v264 = (char *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v308 = v18;
  v271 = *((_QWORD *)v18 - 1);
  __chkstk_darwin(v18);
  v286 = (char *)&v257 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v306 = v20;
  v274 = *((_QWORD *)v20 - 1);
  __chkstk_darwin(v20);
  v285 = (char *)&v257 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v276 = *((_QWORD *)v22 - 1);
  v283 = v22;
  __chkstk_darwin(v22);
  v263 = (char *)&v257 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v275 = *(_QWORD *)(v24 - 8);
  v282 = v24;
  __chkstk_darwin(v24);
  v259 = (char *)&v257 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v279 = *(_QWORD *)(v26 - 8);
  v281 = v26;
  __chkstk_darwin(v26);
  v28 = (unsigned __int8 *)&v257 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v304 = v29;
  v298 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v297 = (uint64_t *)((char *)&v257 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v310 = (uint64_t *)((char *)&v257 - v32);
  __chkstk_darwin(v33);
  v318 = (uint64_t *)((char *)&v257 - v34);
  type metadata accessor for ReportCount();
  v303 = v35;
  v295 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v293 = (char *)&v257 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v316 = (char *)&v257 - v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v257 - v40;
  type metadata accessor for ReportSize();
  v317 = v42;
  v291 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v290 = (char *)&v257 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v315 = (char *)&v257 - v45;
  __chkstk_darwin(v46);
  v48 = (char *)&v257 - v47;
  type metadata accessor for LogicalMaximum();
  v300 = v49;
  v296 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v314 = (char *)&v257 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v53 = (char *)&v257 - v52;
  type metadata accessor for Usage();
  v326 = v54;
  v289 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v288 = (char *)&v257 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v312 = (char *)&v257 - v57;
  __chkstk_darwin(v58);
  v313 = (char *)&v257 - v59;
  __chkstk_darwin(v60);
  v62 = (char *)&v257 - v61;
  type metadata accessor for UsagePage();
  v325 = v63;
  v287 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v311 = (char *)&v257 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v292 = (char *)&v257 - v66;
  UsagePage.init(_:)(13, v67, v68, v69, v70, v71, v72, v73);
  v294 = v62;
  v74 = v264;
  Usage.init(_:)(84, v75, v76, v77, v78, v79, v80, v81);
  v299 = v53;
  LogicalMaximum.init(_:)(5, v82, v83, v84, v85, v86, v87, v88);
  v301 = v48;
  v89 = v260;
  ReportSize.init(_:)(8, v90, v91, v92, v93, v94, v95, v96);
  v302 = v41;
  ReportCount.init(_:)(1, v97, v98, v99, v100, v101, v102, v103);
  v278 = 0;
  v279 = *(_QWORD *)(v279 + 104);
  ((void (*)(unsigned __int8 *))v279)(v28);
  v277 = 1;
  v273 = *(void (**)(char *))(v275 + 104);
  v104 = v259;
  v273(v259);
  LODWORD(v275) = 0;
  v276 = *(_QWORD *)(v276 + 104);
  v105 = v263;
  ((void (*)(char *))v276)(v263);
  v272 = 0;
  v274 = *(_QWORD *)(v274 + 104);
  v106 = v285;
  ((void (*)(char *))v274)(v285);
  v270 = 0;
  v271 = *(_QWORD *)(v271 + 104);
  v107 = v286;
  ((void (*)(char *))v271)(v286);
  v268 = 0;
  v269 = *(_QWORD *)(v269 + 104);
  ((void (*)(_BYTE *))v269)(v74);
  v266 = 0;
  v267 = *(_QWORD *)(v267 + 104);
  v108 = v89;
  v109 = v284;
  ((void (*)(_BYTE *))v267)(v89);
  v265 = *(_QWORD *)(v265 + 104);
  v110 = v280;
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v265)(v280, 0, v307);
  v258 = v28;
  v111 = v105;
  v112 = v108;
  v113 = v110;
  Input.init(_:_:_:_:_:_:_:_:)(v28, v104, v111, v106, v107, v74, v108, v318);
  Usage.init(_:)(85, v114, v115, v116, v117, v118, v119, v120);
  LogicalMaximum.init(_:)(5, v121, v122, v123, v124, v125, v126, v127);
  ReportSize.init(_:)(8, v128, v129, v130, v131, v132, v133, v134);
  ReportCount.init(_:)(1, v135, v136, v137, v138, v139, v140, v141);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v279)(v28, v278, v281);
  v142 = v104;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v273)(v104, v277, v282);
  v143 = v263;
  ((void (*)(char *, _QWORD, _QWORD))v276)(v263, v275, v283);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v274)(v106, v272, v306);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v271)(v107, v270, v308);
  v144 = v264;
  ((void (*)(char *, _QWORD, _QWORD))v269)(v264, v268, v309);
  v145 = v112;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v267)(v112, v266, v109);
  v261 = 0;
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v265)(v113, 0, v307);
  v146 = v258;
  v147 = v142;
  v148 = v106;
  v149 = v145;
  Input.init(_:_:_:_:_:_:_:_:)(v258, v142, v143, v148, v107, v144, v145, v310);
  Usage.init(_:)(34, v150, v151, v152, v153, v154, v155, v156);
  if (qword_1002B51E0 != -1)
    swift_once(&qword_1002B51E0, sub_1001DE9CC);
  v157 = v262;
  v158 = sub_100006FB4(v262, (uint64_t)static DigitizerContact.descriptor);
  v159 = *(void (**)(char *, uint64_t, uint64_t))(v305 + 16);
  v159(v320, v158, v157);
  v159(v321, v158, v157);
  v159(v322, v158, v157);
  v159(v319, v158, v157);
  v159(v323, v158, v157);
  if (qword_1002B5170 != -1)
    swift_once(&qword_1002B5170, sub_1001B35FC);
  v160 = sub_100006FB4(v157, (uint64_t)static ScrollReport.descriptor);
  v159(v324, v160, v157);
  UsagePage.init(_:)(65306, v161, v162, v163, v164, v165, v166, v167);
  Usage.init(_:)(57588, v168, v169, v170, v171, v172, v173, v174);
  ReportSize.init(_:)(8, v175, v176, v177, v178, v179, v180, v181);
  ReportCount.init(_:)(5, v182, v183, v184, v185, v186, v187, v188);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v279)(v146, v278, v281);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v273)(v147, v277, v282);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v276)(v143, v275, v283);
  v283 = v159;
  v189 = v285;
  ((void (*)(char *, _QWORD, _QWORD))v274)(v285, v272, v306);
  v190 = v286;
  ((void (*)(char *, _QWORD, _QWORD))v271)(v286, v270, v308);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v269)(v144, v268, v309);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v267)(v149, v266, v284);
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v265)(v280, v261, v307);
  Input.init(_:_:_:_:_:_:_:_:)(v146, v147, v143, v189, v190, v144, v149, v297);
  v191 = sub_1000055B0(&qword_1002B5310);
  v192 = swift_allocObject(v191, 992, 7);
  *(_OWORD *)(v192 + 16) = xmmword_10022E3A0;
  *(_QWORD *)(v192 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v192 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v192 + 32) = 9;
  v193 = v325;
  *(_QWORD *)(v192 + 96) = v325;
  *(_QWORD *)(v192 + 104) = &protocol witness table for UsagePage;
  v194 = sub_100005534((_QWORD *)(v192 + 72));
  v309 = *(void (**)(_QWORD *, char *, uint64_t))(v287 + 16);
  v309(v194, v292, v193);
  v195 = v326;
  *(_QWORD *)(v192 + 136) = v326;
  *(_QWORD *)(v192 + 144) = &protocol witness table for Usage;
  v196 = sub_100005534((_QWORD *)(v192 + 112));
  v197 = *(void (**)(_QWORD *, char *, uint64_t))(v289 + 16);
  v197(v196, v294, v195);
  v198 = v300;
  *(_QWORD *)(v192 + 176) = v300;
  *(_QWORD *)(v192 + 184) = &protocol witness table for LogicalMaximum;
  v199 = sub_100005534((_QWORD *)(v192 + 152));
  v286 = *(char **)(v296 + 16);
  ((void (*)(_QWORD *, char *, uint64_t))v286)(v199, v299, v198);
  v200 = v317;
  *(_QWORD *)(v192 + 216) = v317;
  *(_QWORD *)(v192 + 224) = &protocol witness table for ReportSize;
  v201 = sub_100005534((_QWORD *)(v192 + 192));
  v202 = *(void (**)(_QWORD *, char *, uint64_t))(v291 + 16);
  v202(v201, v301, v200);
  v308 = v202;
  v203 = v303;
  *(_QWORD *)(v192 + 256) = v303;
  *(_QWORD *)(v192 + 264) = &protocol witness table for ReportCount;
  v204 = sub_100005534((_QWORD *)(v192 + 232));
  v205 = *(void (**)(_QWORD *, char *, uint64_t))(v295 + 16);
  v205(v204, v302, v203);
  v307 = (void (*)(char *, uint64_t))v205;
  v206 = v304;
  *(_QWORD *)(v192 + 296) = v304;
  *(_QWORD *)(v192 + 304) = &protocol witness table for Input;
  v207 = sub_100005534((_QWORD *)(v192 + 272));
  v208 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v298 + 16);
  v208(v207, v318, v206);
  v306 = v208;
  v209 = v326;
  *(_QWORD *)(v192 + 336) = v326;
  *(_QWORD *)(v192 + 344) = &protocol witness table for Usage;
  v210 = sub_100005534((_QWORD *)(v192 + 312));
  v197(v210, v313, v209);
  *(_QWORD *)(v192 + 376) = v198;
  *(_QWORD *)(v192 + 384) = &protocol witness table for LogicalMaximum;
  v211 = sub_100005534((_QWORD *)(v192 + 352));
  ((void (*)(_QWORD *, char *, uint64_t))v286)(v211, v314, v198);
  v212 = v317;
  *(_QWORD *)(v192 + 416) = v317;
  *(_QWORD *)(v192 + 424) = &protocol witness table for ReportSize;
  v213 = sub_100005534((_QWORD *)(v192 + 392));
  v202(v213, v315, v212);
  *(_QWORD *)(v192 + 456) = v203;
  *(_QWORD *)(v192 + 464) = &protocol witness table for ReportCount;
  v214 = sub_100005534((_QWORD *)(v192 + 432));
  v215 = v203;
  v205(v214, v316, v203);
  *(_QWORD *)(v192 + 496) = v206;
  *(_QWORD *)(v192 + 504) = &protocol witness table for Input;
  v216 = sub_100005534((_QWORD *)(v192 + 472));
  v208(v216, v310, v206);
  v217 = v326;
  *(_QWORD *)(v192 + 536) = v326;
  *(_QWORD *)(v192 + 544) = &protocol witness table for Usage;
  v218 = sub_100005534((_QWORD *)(v192 + 512));
  v219 = v217;
  v197(v218, v312, v217);
  v220 = v197;
  *(_QWORD *)(v192 + 576) = v157;
  *(_QWORD *)(v192 + 584) = &protocol witness table for HIDReportDescriptor;
  v221 = (char *)sub_100005534((_QWORD *)(v192 + 552));
  v222 = v283;
  v283(v221, (uint64_t)v320, v157);
  *(_QWORD *)(v192 + 616) = v157;
  *(_QWORD *)(v192 + 624) = &protocol witness table for HIDReportDescriptor;
  v223 = (char *)sub_100005534((_QWORD *)(v192 + 592));
  v222(v223, (uint64_t)v321, v157);
  *(_QWORD *)(v192 + 656) = v157;
  *(_QWORD *)(v192 + 664) = &protocol witness table for HIDReportDescriptor;
  v224 = (char *)sub_100005534((_QWORD *)(v192 + 632));
  v222(v224, (uint64_t)v322, v157);
  *(_QWORD *)(v192 + 696) = v157;
  *(_QWORD *)(v192 + 704) = &protocol witness table for HIDReportDescriptor;
  v225 = (char *)sub_100005534((_QWORD *)(v192 + 672));
  v222(v225, (uint64_t)v319, v157);
  *(_QWORD *)(v192 + 736) = v157;
  *(_QWORD *)(v192 + 744) = &protocol witness table for HIDReportDescriptor;
  v226 = (char *)sub_100005534((_QWORD *)(v192 + 712));
  v222(v226, (uint64_t)v323, v157);
  *(_QWORD *)(v192 + 776) = v157;
  *(_QWORD *)(v192 + 784) = &protocol witness table for HIDReportDescriptor;
  v227 = (char *)sub_100005534((_QWORD *)(v192 + 752));
  v222(v227, (uint64_t)v324, v157);
  v228 = v325;
  *(_QWORD *)(v192 + 816) = v325;
  *(_QWORD *)(v192 + 824) = &protocol witness table for UsagePage;
  v229 = sub_100005534((_QWORD *)(v192 + 792));
  v309(v229, v311, v228);
  *(_QWORD *)(v192 + 856) = v217;
  *(_QWORD *)(v192 + 864) = &protocol witness table for Usage;
  v230 = sub_100005534((_QWORD *)(v192 + 832));
  v231 = v288;
  v220(v230, v288, v219);
  v232 = v317;
  *(_QWORD *)(v192 + 896) = v317;
  *(_QWORD *)(v192 + 904) = &protocol witness table for ReportSize;
  v233 = sub_100005534((_QWORD *)(v192 + 872));
  v234 = v290;
  v308(v233, v290, v232);
  v235 = v215;
  *(_QWORD *)(v192 + 936) = v215;
  *(_QWORD *)(v192 + 944) = &protocol witness table for ReportCount;
  v236 = sub_100005534((_QWORD *)(v192 + 912));
  v237 = v293;
  ((void (*)(_QWORD *, char *, uint64_t))v307)(v236, v293, v235);
  v238 = v304;
  *(_QWORD *)(v192 + 976) = v304;
  *(_QWORD *)(v192 + 984) = &protocol witness table for Input;
  v239 = sub_100005534((_QWORD *)(v192 + 952));
  v240 = v297;
  v306(v239, v297, v238);
  v241 = static HIDReportDescriptor.Builder.buildBlock(_:)(v192);
  v308 = v242;
  v309 = (void (*)(_QWORD *, char *, uint64_t))v241;
  v243 = swift_bridgeObjectRelease();
  v244 = *(void (**)(_QWORD *, uint64_t, __n128))(v298 + 8);
  v244(v240, v238, v243);
  v245 = *(void (**)(char *, uint64_t))(v295 + 8);
  v245(v237, v235);
  v246 = *(void (**)(char *, uint64_t))(v291 + 8);
  v247 = v232;
  v246(v234, v232);
  v248 = *(void (**)(char *, uint64_t))(v289 + 8);
  v249 = v326;
  v248(v231, v326);
  v307 = *(void (**)(char *, uint64_t))(v287 + 8);
  v307(v311, v325);
  v250 = *(void (**)(char *, uint64_t))(v305 + 8);
  v250(v324, v157);
  v250(v323, v157);
  v250(v319, v157);
  v250(v322, v157);
  v250(v321, v157);
  v250(v320, v157);
  v251 = v249;
  v248(v312, v249);
  ((void (*)(_QWORD *, uint64_t))v244)(v310, v238);
  v252 = v303;
  v245(v316, v303);
  v253 = v247;
  v246(v315, v247);
  v254 = *(void (**)(char *, uint64_t))(v296 + 8);
  v255 = v300;
  v254(v314, v300);
  v248(v313, v251);
  ((void (*)(_QWORD *, uint64_t))v244)(v318, v238);
  v245(v302, v252);
  v246(v301, v253);
  v254(v299, v255);
  v248(v294, v251);
  v307(v292, v325);
  return v309;
}

uint64_t DigitizerContact.descriptor.unsafeMutableAddressor()
{
  return sub_1001B8BF8(&qword_1002B51E0, (uint64_t)static DigitizerContact.descriptor, (uint64_t)sub_1001DE9CC);
}

uint64_t DigitizerReport.descriptor.unsafeMutableAddressor()
{
  return sub_1001B8BF8(&qword_1002B51D8, (uint64_t)static DigitizerReport.descriptor, (uint64_t)sub_1001DD60C);
}

uint64_t static DigitizerReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8C50(&qword_1002B51D8, (uint64_t)static DigitizerReport.descriptor, (uint64_t)sub_1001DD60C, a1);
}

void *DigitizerReport.version1ByteCount.unsafeMutableAddressor()
{
  return &static DigitizerReport.version1ByteCount;
}

void *DigitizerReport.version2ByteCount.unsafeMutableAddressor()
{
  return &static DigitizerReport.version2ByteCount;
}

uint64_t static DigitizerReport.version2ByteCount.getter()
{
  return 46;
}

uint64_t sub_1001DE98C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = DigitizerReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

void sub_1001DE9CC(uint64_t a1)
{
  sub_1001B8D9C(a1, static DigitizerContact.descriptor, (uint64_t (*)(void))sub_1001DE9E0);
}

void sub_1001DE9E0()
{
  sub_1001DEA04((uint64_t (*)(_QWORD))type metadata accessor for LogicalCollection, (uint64_t)sub_1001DEAEC, (void (*)(uint64_t, _QWORD, __n128))LogicalCollection.init(content:), (uint64_t)&protocol witness table for LogicalCollection);
}

void sub_1001DEA04(uint64_t (*a1)(_QWORD), uint64_t a2, void (*a3)(uint64_t, _QWORD, __n128), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;

  v7 = a1(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v16 - v10;
  a3(a2, 0, v9);
  v12 = sub_1000055B0(&qword_1002B5310);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v13 + 56) = v7;
  *(_QWORD *)(v13 + 64) = a4;
  v14 = sub_100005534((_QWORD *)(v13 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v14, v11, v7);
  static HIDReportDescriptor.Builder.buildBlock(_:)(v13);
  v15 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, v15);
  sub_10002644C();
}

void (*sub_1001DEAEC())(_QWORD *, char *, uint64_t)
{
  void (*v0)(_QWORD, _QWORD, _QWORD);
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, char *, uint64_t);
  uint64_t v7;
  void (*v8)(_QWORD *, char *, uint64_t);
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  void (*v12)(_QWORD *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  void (*v128)(_QWORD, _QWORD, _QWORD);
  char *v129;
  void (*v130)(_QWORD, _QWORD, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  _BYTE *v148;
  void (*v149)(_QWORD, _QWORD, _QWORD);
  void (*v150)(char *);
  unsigned __int8 *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *);
  _BYTE *v200;
  char *v201;
  unsigned __int8 *v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 *v232;
  _BYTE *v233;
  void (*v234)(char *);
  _BYTE *v235;
  _BYTE *v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  void (*v300)(_QWORD *, char *, uint64_t);
  uint64_t v301;
  _QWORD *v302;
  void (*v303)(_QWORD *, char *, uint64_t);
  void (*v304)(_QWORD *, char *, uint64_t);
  uint64_t v305;
  _QWORD *v306;
  void (*v307)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  void (*v313)(char *, uint64_t);
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  void (*v320)(_QWORD *, char *, uint64_t);
  _QWORD *v321;
  void (*v322)(_QWORD *, char *, uint64_t);
  _QWORD *v323;
  void (*v324)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v325;
  _QWORD *v326;
  void (*v327)(_QWORD *, char *, uint64_t);
  _QWORD *v328;
  void (*v329)(char *, uint64_t);
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  _QWORD *v346;
  char *v347;
  uint64_t v348;
  _QWORD *v349;
  _QWORD *v350;
  uint64_t v351;
  void (*v352)(_QWORD *, char *, uint64_t);
  __n128 v353;
  void (*v354)(_QWORD *, uint64_t, __n128);
  void (*v355)(_QWORD *, uint64_t);
  uint64_t v356;
  void (*v357)(char *, uint64_t);
  uint64_t v358;
  void (*v359)(char *, uint64_t);
  uint64_t v360;
  void (*v361)(char *, uint64_t);
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void (*v365)(char *, uint64_t);
  uint64_t v366;
  void (*v367)(char *, uint64_t);
  void (*v368)(char *, uint64_t);
  uint64_t v369;
  void (*v370)(char *, uint64_t);
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v375;
  char *v376;
  _BYTE *v377;
  unsigned __int8 *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  void (*v401)(char *);
  void (*v402)(char *);
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  uint64_t v407;
  void (*v408)(char *);
  char *v409;
  uint64_t v410;
  char *v411;
  char *v412;
  _QWORD *v413;
  uint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  void (*v432)(unsigned __int8 *);
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  void (*v438)(_BYTE *);
  uint64_t v439;
  uint64_t v440;
  void (*v441)(_QWORD, _QWORD, _QWORD);
  void (*v442)(_QWORD, _QWORD, _QWORD);
  uint64_t v443;
  void (*v444)(_QWORD *, _QWORD *, uint64_t);
  void (*v445)(_QWORD *, char *, uint64_t);
  void (*v446)(char *, uint64_t);
  void (*v447)(_QWORD *, char *, uint64_t);
  void (*v448)(_QWORD *, char *, uint64_t);
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  type metadata accessor for Input.Bit8();
  v442 = v0;
  v439 = *((_QWORD *)v0 - 1);
  __chkstk_darwin(v0);
  v382 = (char *)&v375 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v440 = *(v2 - 1);
  v441 = (void (*)(_QWORD, _QWORD, _QWORD))v2;
  __chkstk_darwin(v2);
  v409 = (char *)&v375 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v407 = *(_QWORD *)(v4 - 8);
  v433 = v4;
  __chkstk_darwin(v4);
  v381 = (char *)&v375 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v448 = v6;
  v435 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v380 = (char *)&v375 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v447 = v8;
  v436 = *((_QWORD *)v8 - 1);
  __chkstk_darwin(v8);
  v379 = (char *)&v375 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v446 = v10;
  v437 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v376 = (char *)&v375 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v445 = v12;
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12);
  v15 = (char *)&v375 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v444 = v16;
  v17 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v16);
  v19 = (unsigned __int8 *)&v375 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v414 = v20;
  v400 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v399 = (uint64_t *)((char *)&v375 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v429 = (uint64_t *)((char *)&v375 - v23);
  __chkstk_darwin(v24);
  v430 = (uint64_t *)((char *)&v375 - v25);
  __chkstk_darwin(v26);
  v413 = (uint64_t *)((char *)&v375 - v27);
  __chkstk_darwin(v28);
  v431 = (uint64_t *)((char *)&v375 - v29);
  type metadata accessor for ReportCount();
  v383 = v30;
  v398 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v396 = (char *)&v375 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v427 = (char *)&v375 - v33;
  __chkstk_darwin(v34);
  v428 = (char *)&v375 - v35;
  __chkstk_darwin(v36);
  v415 = (char *)&v375 - v37;
  __chkstk_darwin(v38);
  v386 = (char *)&v375 - v39;
  type metadata accessor for ReportSize();
  v410 = v40;
  v397 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v391 = (char *)&v375 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v425 = (char *)&v375 - v43;
  __chkstk_darwin(v44);
  v426 = (char *)&v375 - v45;
  __chkstk_darwin(v46);
  v416 = (char *)&v375 - v47;
  __chkstk_darwin(v48);
  v387 = (char *)&v375 - v49;
  type metadata accessor for LogicalMaximum();
  v451 = v50;
  v395 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v385 = (char *)&v375 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v424 = (char *)&v375 - v53;
  __chkstk_darwin(v54);
  v389 = (char *)&v375 - v55;
  type metadata accessor for LogicalMinimum();
  v450 = v56;
  v392 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v417 = (char *)&v375 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  v423 = (char *)&v375 - v59;
  __chkstk_darwin(v60);
  v390 = (char *)&v375 - v61;
  type metadata accessor for Usage();
  v449 = v62;
  v388 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v421 = (char *)&v375 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  v420 = (char *)&v375 - v65;
  __chkstk_darwin(v66);
  v422 = (char *)&v375 - v67;
  __chkstk_darwin(v68);
  v411 = (char *)&v375 - v69;
  __chkstk_darwin(v70);
  v412 = (char *)&v375 - v71;
  __chkstk_darwin(v72);
  v393 = (char *)&v375 - v73;
  type metadata accessor for UsagePage();
  v443 = v74;
  v384 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v418 = (char *)&v375 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v76);
  v419 = (char *)&v375 - v77;
  __chkstk_darwin(v78);
  v394 = (char *)&v375 - v79;
  UsagePage.init(_:)(13, v80, v81, v82, v83, v84, v85, v86);
  Usage.init(_:)(81, v87, v88, v89, v90, v91, v92, v93);
  LogicalMinimum.init(_:)(0, v94, v95, v96, v97, v98, v99, v100);
  LogicalMaximum.init(_:)(4, v101, v102, v103, v104, v105, v106, v107);
  ReportSize.init(_:)(5, v108, v109, v110, v111, v112, v113, v114);
  ReportCount.init(_:)(1, v115, v116, v117, v118, v119, v120, v121);
  v406 = 0;
  v432 = *(void (**)(unsigned __int8 *))(v17 + 104);
  v122 = v19;
  v432(v19);
  v405 = 1;
  v438 = *(void (**)(_BYTE *))(v13 + 104);
  v438(v15);
  v404 = 0;
  v437 = *(_QWORD *)(v437 + 104);
  v123 = v376;
  ((void (*)(char *))v437)(v376);
  v403 = 0;
  v436 = *(_QWORD *)(v436 + 104);
  v124 = v379;
  ((void (*)(char *))v436)(v379);
  v434 = 0;
  v408 = *(void (**)(char *))(v435 + 104);
  v125 = v380;
  v408(v380);
  LODWORD(v435) = 0;
  v402 = *(void (**)(char *))(v407 + 104);
  v126 = v381;
  v402(v381);
  LODWORD(v407) = 0;
  v401 = *(void (**)(char *))(v440 + 104);
  v127 = v409;
  v128 = v441;
  v401(v409);
  LODWORD(v440) = 0;
  v439 = *(_QWORD *)(v439 + 104);
  v129 = v382;
  v130 = v442;
  ((void (*)(char *))v439)(v382);
  v378 = v122;
  Input.init(_:_:_:_:_:_:_:_:)(v122, v15, v123, v124, v125, v126, v127, v431);
  ReportSize.init(_:)(1, v131, v132, v133, v134, v135, v136, v137);
  ReportCount.init(_:)(1, v138, v139, v140, v141, v142, v143, v144);
  ((void (*)(unsigned __int8 *, uint64_t, _QWORD))v432)(v122, 1, v444);
  v145 = v15;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v438)(v15, 0, v445);
  v146 = v123;
  ((void (*)(_BYTE *, _QWORD, void (*)(char *, uint64_t)))v437)(v123, v404, v446);
  v147 = v379;
  ((void (*)(char *, _QWORD, _QWORD))v436)(v379, v403, v447);
  v148 = v380;
  ((void (*)(char *, _QWORD, _QWORD))v408)(v380, v434, v448);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v402)(v126, v435, v433);
  v149 = v128;
  v150 = v401;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v401)(v127, v407, v149);
  ((void (*)(char *, _QWORD, _QWORD))v439)(v129, v440, v130);
  v151 = v378;
  v377 = v145;
  v152 = v148;
  v153 = v148;
  v154 = v126;
  Input.init(_:_:_:_:_:_:_:_:)(v378, v145, v146, v147, v152, v126, v127, v413);
  Usage.init(_:)(51, v155, v156, v157, v158, v159, v160, v161);
  Usage.init(_:)(50, v162, v163, v164, v165, v166, v167, v168);
  LogicalMinimum.init(_:)(0, v169, v170, v171, v172, v173, v174, v175);
  LogicalMaximum.init(_:)(1, v176, v177, v178, v179, v180, v181, v182);
  ReportSize.init(_:)(1, v183, v184, v185, v186, v187, v188, v189);
  ReportCount.init(_:)(2, v190, v191, v192, v193, v194, v195, v196);
  ((void (*)(unsigned __int8 *, _QWORD, _QWORD))v432)(v151, v406, v444);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v438)(v145, v405, v445);
  v197 = v404;
  ((void (*)(_BYTE *, _QWORD, void (*)(char *, uint64_t)))v437)(v146, v404, v446);
  v198 = v403;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v436)(v147, v403, v447);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v408)(v153, v434, v448);
  v199 = v402;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v402)(v126, v435, v433);
  v200 = v409;
  ((void (*)(char *, _QWORD, _QWORD))v150)(v409, v407, v441);
  v201 = v382;
  ((void (*)(char *, _QWORD, _QWORD))v439)(v382, v440, v442);
  v202 = v151;
  v203 = v377;
  Input.init(_:_:_:_:_:_:_:_:)(v202, v377, v146, v147, v153, v154, v200, v430);
  UsagePage.init(_:)(65306, v204, v205, v206, v207, v208, v209, v210);
  Usage.init(_:)(57586, v211, v212, v213, v214, v215, v216, v217);
  ReportSize.init(_:)(1, v218, v219, v220, v221, v222, v223, v224);
  ReportCount.init(_:)(1, v225, v226, v227, v228, v229, v230, v231);
  v232 = v378;
  ((void (*)(unsigned __int8 *, _QWORD, _QWORD))v432)(v378, v406, v444);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v438)(v203, v405, v445);
  ((void (*)(_BYTE *, uint64_t, void (*)(char *, uint64_t)))v437)(v146, v197, v446);
  v233 = v147;
  ((void (*)(_BYTE *, uint64_t, _QWORD))v436)(v147, v198, v447);
  v234 = v408;
  ((void (*)(_BYTE *, _QWORD, _QWORD))v408)(v153, v434, v448);
  v235 = v381;
  ((void (*)(char *, _QWORD, uint64_t))v199)(v381, v435, v433);
  v236 = v409;
  v237 = v407;
  ((void (*)(char *, _QWORD, _QWORD))v401)(v409, v407, v441);
  ((void (*)(char *, _QWORD, _QWORD))v439)(v201, v440, v442);
  v238 = v377;
  Input.init(_:_:_:_:_:_:_:_:)(v232, v377, v146, v233, v153, v235, v236, v429);
  UsagePage.init(_:)(1, v239, v240, v241, v242, v243, v244, v245);
  Usage.init(_:)(48, v246, v247, v248, v249, v250, v251, v252);
  Usage.init(_:)(49, v253, v254, v255, v256, v257, v258, v259);
  LogicalMinimum.init(_:)(0, v260, v261, v262, v263, v264, v265, v266);
  LogicalMaximum.init(_:)(0xFFFFLL, v267, v268, v269, v270, v271, v272, v273);
  ReportSize.init(_:)(16, v274, v275, v276, v277, v278, v279, v280);
  ReportCount.init(_:)(2, v281, v282, v283, v284, v285, v286, v287);
  ((void (*)(unsigned __int8 *, _QWORD, _QWORD))v432)(v232, v406, v444);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v438)(v238, v405, v445);
  ((void (*)(_BYTE *, _QWORD, void (*)(char *, uint64_t)))v437)(v146, v404, v446);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v436)(v233, v403, v447);
  ((void (*)(_BYTE *, _QWORD, _QWORD))v234)(v153, v434, v448);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v402)(v235, v435, v433);
  ((void (*)(_BYTE *, uint64_t, _QWORD))v401)(v236, v237, v441);
  ((void (*)(char *, _QWORD, _QWORD))v439)(v201, v440, v442);
  Input.init(_:_:_:_:_:_:_:_:)(v232, v238, v146, v233, v153, v235, v236, v399);
  v288 = sub_1000055B0(&qword_1002B5310);
  v289 = swift_allocObject(v288, 1232, 7);
  *(_OWORD *)(v289 + 16) = xmmword_10022E3B0;
  v290 = v443;
  *(_QWORD *)(v289 + 56) = v443;
  *(_QWORD *)(v289 + 64) = &protocol witness table for UsagePage;
  v291 = sub_100005534((_QWORD *)(v289 + 32));
  v442 = *(void (**)(_QWORD, _QWORD, _QWORD))(v384 + 16);
  v442(v291, v394, v290);
  v292 = v449;
  *(_QWORD *)(v289 + 96) = v449;
  *(_QWORD *)(v289 + 104) = &protocol witness table for Usage;
  v293 = sub_100005534((_QWORD *)(v289 + 72));
  v446 = *(void (**)(char *, uint64_t))(v388 + 16);
  ((void (*)(_QWORD *, char *, uint64_t))v446)(v293, v393, v292);
  v294 = v450;
  *(_QWORD *)(v289 + 136) = v450;
  *(_QWORD *)(v289 + 144) = &protocol witness table for LogicalMinimum;
  v295 = sub_100005534((_QWORD *)(v289 + 112));
  v448 = *(void (**)(_QWORD *, char *, uint64_t))(v392 + 16);
  v448(v295, v390, v294);
  v296 = v451;
  *(_QWORD *)(v289 + 176) = v451;
  *(_QWORD *)(v289 + 184) = &protocol witness table for LogicalMaximum;
  v297 = sub_100005534((_QWORD *)(v289 + 152));
  v447 = *(void (**)(_QWORD *, char *, uint64_t))(v395 + 16);
  v447(v297, v389, v296);
  v298 = v410;
  *(_QWORD *)(v289 + 216) = v410;
  *(_QWORD *)(v289 + 224) = &protocol witness table for ReportSize;
  v299 = sub_100005534((_QWORD *)(v289 + 192));
  v300 = *(void (**)(_QWORD *, char *, uint64_t))(v397 + 16);
  v300(v299, v387, v298);
  v445 = v300;
  v301 = v383;
  *(_QWORD *)(v289 + 256) = v383;
  *(_QWORD *)(v289 + 264) = &protocol witness table for ReportCount;
  v302 = sub_100005534((_QWORD *)(v289 + 232));
  v303 = *(void (**)(_QWORD *, char *, uint64_t))(v398 + 16);
  v303(v302, v386, v301);
  v304 = v303;
  v441 = (void (*)(_QWORD, _QWORD, _QWORD))v303;
  v305 = v414;
  *(_QWORD *)(v289 + 296) = v414;
  *(_QWORD *)(v289 + 304) = &protocol witness table for Input;
  v306 = sub_100005534((_QWORD *)(v289 + 272));
  v307 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v400 + 16);
  v307(v306, v431, v305);
  v444 = v307;
  *(_QWORD *)(v289 + 336) = v298;
  *(_QWORD *)(v289 + 344) = &protocol witness table for ReportSize;
  v308 = sub_100005534((_QWORD *)(v289 + 312));
  v300(v308, v416, v298);
  *(_QWORD *)(v289 + 376) = v301;
  *(_QWORD *)(v289 + 384) = &protocol witness table for ReportCount;
  v309 = sub_100005534((_QWORD *)(v289 + 352));
  v304(v309, v415, v301);
  *(_QWORD *)(v289 + 416) = v305;
  *(_QWORD *)(v289 + 424) = &protocol witness table for Input;
  v310 = sub_100005534((_QWORD *)(v289 + 392));
  v307(v310, v413, v305);
  v311 = v449;
  *(_QWORD *)(v289 + 456) = v449;
  *(_QWORD *)(v289 + 464) = &protocol witness table for Usage;
  v312 = sub_100005534((_QWORD *)(v289 + 432));
  v313 = v446;
  ((void (*)(_QWORD *, char *, uint64_t))v446)(v312, v412, v311);
  *(_QWORD *)(v289 + 496) = v311;
  *(_QWORD *)(v289 + 504) = &protocol witness table for Usage;
  v314 = sub_100005534((_QWORD *)(v289 + 472));
  ((void (*)(_QWORD *, char *, uint64_t))v313)(v314, v411, v311);
  v315 = v450;
  *(_QWORD *)(v289 + 536) = v450;
  *(_QWORD *)(v289 + 544) = &protocol witness table for LogicalMinimum;
  v316 = sub_100005534((_QWORD *)(v289 + 512));
  v448(v316, v423, v315);
  v317 = v451;
  *(_QWORD *)(v289 + 576) = v451;
  *(_QWORD *)(v289 + 584) = &protocol witness table for LogicalMaximum;
  v318 = sub_100005534((_QWORD *)(v289 + 552));
  v447(v318, v424, v317);
  *(_QWORD *)(v289 + 616) = v298;
  *(_QWORD *)(v289 + 624) = &protocol witness table for ReportSize;
  v319 = sub_100005534((_QWORD *)(v289 + 592));
  v320 = v445;
  v445(v319, v426, v298);
  *(_QWORD *)(v289 + 656) = v301;
  *(_QWORD *)(v289 + 664) = &protocol witness table for ReportCount;
  v321 = sub_100005534((_QWORD *)(v289 + 632));
  v322 = (void (*)(_QWORD *, char *, uint64_t))v441;
  v441(v321, v428, v301);
  *(_QWORD *)(v289 + 696) = v305;
  *(_QWORD *)(v289 + 704) = &protocol witness table for Input;
  v323 = sub_100005534((_QWORD *)(v289 + 672));
  v324 = v444;
  v444(v323, v430, v305);
  v325 = v443;
  *(_QWORD *)(v289 + 736) = v443;
  *(_QWORD *)(v289 + 744) = &protocol witness table for UsagePage;
  v326 = sub_100005534((_QWORD *)(v289 + 712));
  v327 = (void (*)(_QWORD *, char *, uint64_t))v442;
  v442(v326, v419, v325);
  *(_QWORD *)(v289 + 776) = v311;
  *(_QWORD *)(v289 + 784) = &protocol witness table for Usage;
  v328 = sub_100005534((_QWORD *)(v289 + 752));
  v329 = v446;
  ((void (*)(_QWORD *, char *, uint64_t))v446)(v328, v422, v311);
  *(_QWORD *)(v289 + 816) = v298;
  *(_QWORD *)(v289 + 824) = &protocol witness table for ReportSize;
  v330 = sub_100005534((_QWORD *)(v289 + 792));
  v320(v330, v425, v298);
  v331 = v301;
  *(_QWORD *)(v289 + 856) = v301;
  *(_QWORD *)(v289 + 864) = &protocol witness table for ReportCount;
  v332 = sub_100005534((_QWORD *)(v289 + 832));
  v322(v332, v427, v301);
  v333 = v414;
  *(_QWORD *)(v289 + 896) = v414;
  *(_QWORD *)(v289 + 904) = &protocol witness table for Input;
  v334 = sub_100005534((_QWORD *)(v289 + 872));
  v324(v334, v429, v333);
  *(_QWORD *)(v289 + 936) = v325;
  *(_QWORD *)(v289 + 944) = &protocol witness table for UsagePage;
  v335 = sub_100005534((_QWORD *)(v289 + 912));
  v327(v335, v418, v325);
  *(_QWORD *)(v289 + 976) = v311;
  *(_QWORD *)(v289 + 984) = &protocol witness table for Usage;
  v336 = sub_100005534((_QWORD *)(v289 + 952));
  ((void (*)(_QWORD *, char *, uint64_t))v329)(v336, v420, v311);
  *(_QWORD *)(v289 + 1016) = v311;
  *(_QWORD *)(v289 + 1024) = &protocol witness table for Usage;
  v337 = sub_100005534((_QWORD *)(v289 + 992));
  ((void (*)(_QWORD *, char *, uint64_t))v329)(v337, v421, v311);
  v338 = v450;
  *(_QWORD *)(v289 + 1056) = v450;
  *(_QWORD *)(v289 + 1064) = &protocol witness table for LogicalMinimum;
  v339 = sub_100005534((_QWORD *)(v289 + 1032));
  v448(v339, v417, v338);
  v340 = v451;
  *(_QWORD *)(v289 + 1096) = v451;
  *(_QWORD *)(v289 + 1104) = &protocol witness table for LogicalMaximum;
  v341 = sub_100005534((_QWORD *)(v289 + 1072));
  v342 = v385;
  v447(v341, v385, v340);
  v343 = v410;
  *(_QWORD *)(v289 + 1136) = v410;
  *(_QWORD *)(v289 + 1144) = &protocol witness table for ReportSize;
  v344 = sub_100005534((_QWORD *)(v289 + 1112));
  v345 = v391;
  v445(v344, v391, v343);
  *(_QWORD *)(v289 + 1176) = v301;
  *(_QWORD *)(v289 + 1184) = &protocol witness table for ReportCount;
  v346 = sub_100005534((_QWORD *)(v289 + 1152));
  v347 = v396;
  v322(v346, v396, v301);
  v348 = v414;
  *(_QWORD *)(v289 + 1216) = v414;
  *(_QWORD *)(v289 + 1224) = &protocol witness table for Input;
  v349 = sub_100005534((_QWORD *)(v289 + 1192));
  v350 = v399;
  v444(v349, v399, v348);
  v351 = static HIDReportDescriptor.Builder.buildBlock(_:)(v289);
  v447 = v352;
  v448 = (void (*)(_QWORD *, char *, uint64_t))v351;
  v353 = swift_bridgeObjectRelease();
  v354 = *(void (**)(_QWORD *, uint64_t, __n128))(v400 + 8);
  v354(v350, v348, v353);
  v355 = (void (*)(_QWORD *, uint64_t))v354;
  v442 = *(void (**)(_QWORD, _QWORD, _QWORD))(v398 + 8);
  v356 = v331;
  ((void (*)(char *, uint64_t))v442)(v347, v331);
  v441 = *(void (**)(_QWORD, _QWORD, _QWORD))(v397 + 8);
  ((void (*)(char *, uint64_t))v441)(v345, v343);
  v445 = *(void (**)(_QWORD *, char *, uint64_t))(v395 + 8);
  ((void (*)(char *, uint64_t))v445)(v342, v451);
  v444 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v392 + 8);
  ((void (*)(char *, uint64_t))v444)(v417, v450);
  v357 = *(void (**)(char *, uint64_t))(v388 + 8);
  v358 = v449;
  v357(v421, v449);
  v357(v420, v358);
  v359 = *(void (**)(char *, uint64_t))(v384 + 8);
  v360 = v443;
  v359(v418, v443);
  v361 = v359;
  v446 = v359;
  v362 = v348;
  v355(v429, v348);
  v363 = v356;
  v364 = v356;
  v365 = (void (*)(char *, uint64_t))v442;
  ((void (*)(char *, uint64_t))v442)(v427, v363);
  v366 = v410;
  v367 = (void (*)(char *, uint64_t))v441;
  ((void (*)(char *, uint64_t))v441)(v425, v410);
  v357(v422, v358);
  v361(v419, v360);
  v355(v430, v362);
  v365(v428, v364);
  v367(v426, v366);
  v368 = (void (*)(char *, uint64_t))v445;
  ((void (*)(char *, uint64_t))v445)(v424, v451);
  v369 = v450;
  v370 = (void (*)(char *, uint64_t))v444;
  ((void (*)(char *, uint64_t))v444)(v423, v450);
  v371 = v449;
  v357(v411, v449);
  v357(v412, v371);
  v372 = v362;
  v355(v413, v362);
  v373 = v383;
  v365(v415, v383);
  v367(v416, v366);
  v355(v431, v372);
  v365(v386, v373);
  v367(v387, v366);
  v368(v389, v451);
  v370(v390, v369);
  v357(v393, v449);
  v446(v394, v443);
  return v448;
}

uint64_t static DigitizerContact.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001B8C50(&qword_1002B51E0, (uint64_t)static DigitizerContact.descriptor, (uint64_t)sub_1001DE9CC, a1);
}

void DigitizerReport.contactCountMaximum.setter(uint64_t a1)
{
  sub_1000E70EC(a1, 16);
}

uint64_t DigitizerReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  if (Data.count.getter(a1, a2) == 41)
    v4 = 328;
  else
    v4 = 368;
  v9 = HIDReport.init(bitCount:id:)(v4, 9);
  v10 = v5;
  HIDReport.initialize(from:)(a1, a2);
  v7 = v6;
  sub_100022AEC(a1, a2);
  result = v9;
  if ((v7 & 1) == 0)
  {
    sub_100022AEC(v9, v10);
    return 0;
  }
  return result;
}

void sub_1001E0284(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  DigitizerReport.init()();
  *a1 = v2;
  a1[1] = v3;
  sub_1000050D4();
}

void sub_1001E02A4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  *a3 = DigitizerReport.init(_:)(a1, a2);
  a3[1] = v4;
  sub_1000050D4();
}

uint64_t sub_1001E02C4()
{
  uint64_t v0;

  return sub_1001E2F4C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t DigitizerContact.init()()
{
  return 0;
}

void DigitizerContact.index.setter(unint64_t a1)
{
  uint64_t v1;
  int v3;
  const char *v4;
  uint64_t v5;

  sub_1001E1A94(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10006D098();
    v4 = "Negative value is not representable";
    v5 = 35;
  }
  else
  {
    if (a1 < 0x100)
    {
      sub_1000E70EC(v3 & 0xFFFFFFE0 | a1 & 0x1F, 0);
      return;
    }
    sub_10006D098();
    v4 = "Not enough bits to represent the passed value";
    v5 = 45;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v4, v5, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

void DigitizerContact.index.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v2 = sub_1001B5824(a1);
  sub_1001E1A94(v2, v3, v4);
  *v1 = v5 & 0x1F;
  sub_1000050D4();
}

void sub_1001E03F4(unint64_t *a1)
{
  DigitizerContact.index.setter(*a1);
  sub_1000050D4();
}

void DigitizerContact.touch.setter()
{
  HIDReport.subscript.setter();
}

void DigitizerContact.touch.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1001C26C0(a1);
  HIDReport.subscript.getter(6, v2, v3);
  *(_BYTE *)(v1 + 8) = v4 & 1;
  sub_1000050D4();
}

void sub_1001E044C()
{
  HIDReport.subscript.setter();
  sub_1000050D4();
}

void DigitizerContact.range.setter()
{
  HIDReport.subscript.setter();
}

void DigitizerContact.range.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1001C26C0(a1);
  HIDReport.subscript.getter(7, v2, v3);
  *(_BYTE *)(v1 + 8) = v4 & 1;
  sub_1000050D4();
}

void sub_1001E04AC()
{
  HIDReport.subscript.setter();
  sub_1000050D4();
}

void DigitizerContact.resting.setter()
{
  HIDReport.subscript.setter();
}

void DigitizerContact.resting.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = sub_1001E1A1C(a1);
  HIDReport.subscript.getter(v2, v3, v4);
  *(_BYTE *)(v1 + 8) = v5 & 1;
  sub_1000050D4();
}

void sub_1001E0508()
{
  HIDReport.subscript.setter();
  sub_1000050D4();
}

double DigitizerContact.x.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001E053C(8, a1, a2);
}

double sub_1001E053C(char a1, uint64_t a2, unint64_t a3)
{
  unsigned __int16 v3;
  unsigned int v4;
  double v5;

  sub_1001E13C0(a1, a2, a3);
  v4 = v3;
  v5 = (double)(unsigned __int16)static UInt32.logicalMinimum.getter();
  return ((double)v4 - v5) / ((double)(unsigned __int16)static UInt16.logicalMaximum.getter() - v5);
}

void DigitizerContact.x.setter(double a1)
{
  sub_1000E6B04(a1, (uint64_t)&type metadata for UInt16, 8);
}

void DigitizerContact.x.modify(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;

  sub_1001B5824(a1);
  *v1 = sub_1001E053C(8, v2, v3);
  sub_1000050D4();
}

void sub_1001E05CC(double *a1, uint64_t a2)
{
  sub_1001E062C(a1, a2, 8);
}

double DigitizerContact.y.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001E053C(24, a1, a2);
}

void DigitizerContact.y.setter(double a1)
{
  sub_1000E6B04(a1, (uint64_t)&type metadata for UInt16, 24);
}

void DigitizerContact.y.modify(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  unint64_t v3;

  sub_1001B5824(a1);
  *v1 = sub_1001E053C(24, v2, v3);
  sub_1000050D4();
}

void sub_1001E0624(double *a1, uint64_t a2)
{
  sub_1001E062C(a1, a2, 24);
}

void sub_1001E062C(double *a1, uint64_t a2, char a3)
{
  sub_1000E6B04(*a1, (uint64_t)&type metadata for UInt16, a3);
  sub_1000050D4();
}

void DigitizerReport.contactCount.getter(uint64_t a1, unint64_t a2)
{
  sub_1001E0D24(8, a1, a2);
}

void DigitizerReport.contact(atIndex:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DigitizerReport.contactRange(forIndex:)(a1, a2, a3);
  v6 = v5;
  v8 = v7;
  HIDReport.storage.getter(a2, a3);
  sub_1001E1A44(v6, v8);
  sub_1001E19C4();
  sub_1001DD170(v6, v8);
}

void DigitizerReport.contactCount.setter(uint64_t a1)
{
  sub_1000E70EC(a1, 8);
}

void DigitizerReport.contactCount.modify(_QWORD *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v2 = sub_1001E1A1C(a1);
  sub_1001E0D24(v2, v3, v4);
  *(_BYTE *)(v1 + 8) = v5;
  sub_1000050D4();
}

void sub_1001E06FC(uint64_t a1)
{
  sub_1000E70EC(*(unsigned __int8 *)(a1 + 8), 8);
  sub_1000050D4();
}

void DigitizerReport.contactCountMaximum.getter(uint64_t a1, unint64_t a2)
{
  sub_1001E0D24(16, a1, a2);
}

void DigitizerReport.contactCountMaximum.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  sub_1001C26C0(a1);
  sub_1001E0D24(16, v2, v3);
  *(_BYTE *)(v1 + 8) = v4;
  sub_1000050D4();
}

void sub_1001E0760(uint64_t a1)
{
  sub_1000E70EC(*(unsigned __int8 *)(a1 + 8), 16);
  sub_1000050D4();
}

void DigitizerReport.contactRange(forIndex:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1001E1A88(a1, a2, a3);
  __asm { BR              X10 }
}

uint64_t sub_1001E07BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  sub_1001E1A30(a1, a2);
  v3 = 5 * v2;
  if ((unsigned __int128)(v2 * (__int128)5) >> 64 != (5 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  result = v3 + 3;
  if (__OFADD__(3, v3))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (__OFADD__(result, 5))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 + 8 < v3 + 3)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1001E0834);
  }
  return result;
}

double DigitizerReport.setContact(_:atIndex:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double result;
  __int128 v12;

  v6 = *v3;
  sub_1001E1A58(a3);
  *(_QWORD *)&v12 = sub_1001E1A50(v6);
  *((_QWORD *)&v12 + 1) = v7;
  v8 = HIDReport.storage.getter(a1, a2);
  v10 = v9;
  sub_1001E1A7C(v8, v9);
  sub_100022AEC(v8, v10);
  sub_1001E1A70();
  result = *(double *)&v12;
  *(_OWORD *)v3 = v12;
  return result;
}

Swift::Int __swiftcall DigitizerReport.contactIdentityOffset(forIndex:)(Swift::Int forIndex)
{
  if (!__OFADD__(forIndex, 41))
    return 8 * (forIndex + 41);
  __break(1u);
  return forIndex;
}

Swift::Void __swiftcall DigitizerReport.setContactIdentity(_:atIndex:)(Swift::UInt8 _, Swift::Int atIndex)
{
  uint64_t v2;

  HIDReport.storage.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  __asm { BR              X10 }
}

void sub_1001E093C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001B768C();
  if (BYTE6(v2) >= 0x2EuLL)
  {
    if (__OFADD__(v1, 41))
    {
      __break(1u);
      JUMPOUT(0x1001E09DCLL);
    }
    sub_1000E70EC(v0, 8 * (v1 + 41));
  }
}

void DigitizerReport.scrollReportRange.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  DigitizerReport.contactRange(forIndex:)(5, a1, a2);
  if (__OFADD__(v2, 13))
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v2 + 13 < v2)
LABEL_5:
    __break(1u);
}

void DigitizerReport.scrollReport.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v5 = *v2;
  v6 = v2[1];
  *(_QWORD *)&v17 = HIDReport.storage.getter(*v2, v6);
  *((_QWORD *)&v17 + 1) = v7;
  DigitizerReport.contactRange(forIndex:)(5, v5, v6);
  if (__OFADD__(v8, 13))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v8 + 13 < v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (a2 >> 60 != 15)
  {
    sub_10002517C(a1, a2);
    v12 = sub_1001E1A50(a1);
    v14 = v13;
    sub_1001E1A7C(v12, v13);
    sub_100022AEC(v12, v14);
    sub_1001E1A38();
    sub_1001E1A38();
    goto LABEL_7;
  }
  if (v8 + 13 > v8)
  {
    v15 = Data.init(count:)(13);
    v16 = v9;
    sub_1001AEDEC((uint64_t)&v15);
    v10 = v15;
    v11 = v16;
    sub_1000E6CB8(v15, v16);
    sub_100022AEC(v10, v11);
LABEL_7:
    sub_100022AEC(v5, v6);
    *(_OWORD *)v2 = v17;
    return;
  }
LABEL_10:
  __break(1u);
}

void DigitizerReport.scrollReport.modify(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a1[2] = v1;
  v3 = sub_1001E1A50(*v1);
  v5 = v4;
  sub_1001E1A58(5);
  v7 = v6 + 13;
  if (__OFADD__(v6, 13))
  {
    __break(1u);
  }
  else if (v7 >= v6)
  {
    v8 = Data._Representation.subscript.getter(v6, v7, v3, v5);
    v10 = v9;
    sub_100022AEC(v3, v5);
    sub_1001DD170(v8, v10);
    ScrollReport.init(_:)();
    *a1 = v11;
    a1[1] = v12;
    sub_10002644C();
    return;
  }
  __break(1u);
}

void sub_1001E0BF8(uint64_t *a1, char a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    sub_100025168(*a1, v3);
    sub_1001E19FC();
    sub_100022AD8(v2, v3);
  }
  else
  {
    sub_1001E19FC();
    sub_10000B350();
  }
}

void DigitizerContact.point.setter(double a1, double a2)
{
  sub_1001E19F0(a1);
  sub_1000E6B04(a2, (uint64_t)&type metadata for UInt16, 24);
}

void (*DigitizerContact.point.modify(uint64_t a1))(double *a1)
{
  uint64_t v1;
  double v3;
  double v4;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = sub_1001E1A10(8);
  v4 = sub_1001E1A10(24);
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  return sub_1001E0CE0;
}

void sub_1001E0CE0(double *a1)
{
  double v1;

  v1 = a1[1];
  sub_1001E19F0(*a1);
  sub_1000E6B04(v1, (uint64_t)&type metadata for UInt16, 24);
}

void sub_1001E0D24(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X13 }
  __asm { BR              X12 }
}

uint64_t sub_1001E1048@<X0>(int a1@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)(v4 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x1001E1064);
  }
  if (__OFADD__(8 * v4, v2))
  {
    __break(1u);
    JUMPOUT(0x1001E1100);
  }
  return ((uint64_t (*)(void))((char *)&loc_1001E0EC4 + dword_1001E11A4[a1]))();
}

ValueMetadata *type metadata accessor for DigitizerReport()
{
  return &type metadata for DigitizerReport;
}

ValueMetadata *type metadata accessor for DigitizerContact()
{
  return &type metadata for DigitizerContact;
}

uint64_t sub_1001E11D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v7 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  v8 = __OFSUB__(a2, a1);
  v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7 + v11;
  if (v7)
    v13 = v12;
  else
    v13 = 0;
  return sub_100040F5C(v7, v13, a3);
}

uint64_t sub_1001E1264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v12 = a1;
  v13 = a2;
  v14 = BYTE2(a2);
  v15 = BYTE3(a2);
  v16 = BYTE4(a2);
  v17 = BYTE5(a2);
  if (a3)
  {
    if (a3 <= 14)
    {
      result = Data.InlineData.init(_:)(&v12, (char *)&v12 + a3);
      v9 = v10 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      v7 = __DataStorage.init(bytes:length:)(&v12, a3);
      if ((unint64_t)a3 >= 0x7FFFFFFF)
      {
        v11 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v11, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = a3;
        v9 = v7 | 0x8000000000000000;
      }
      else
      {
        result = a3 << 32;
        v9 = v7 | 0x4000000000000000;
      }
    }
  }
  else
  {
    result = 0;
    v9 = 0xC000000000000000;
  }
  *a4 = result;
  a4[1] = v9;
  return result;
}

void sub_1001E13C0(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

uint64_t sub_1001E19B8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1001E19C4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1001E19D8()
{
  return 8;
}

void sub_1001E19F0(double a1)
{
  uint64_t v1;

  sub_1000E6B04(a1, v1, 8);
}

void sub_1001E19FC()
{
  uint64_t v0;
  unint64_t v1;

  DigitizerReport.scrollReport.setter(v0, v1);
}

uint64_t sub_1001E1A08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100022AEC(v2, a2);
}

double sub_1001E1A10(char a1)
{
  unint64_t v1;
  uint64_t v2;

  return sub_1001E053C(a1, v2, v1);
}

uint64_t sub_1001E1A1C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return 8;
}

uint64_t sub_1001E1A30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100022AEC(v2, a2);
}

uint64_t sub_1001E1A38()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AD8(v1, v0);
}

uint64_t sub_1001E1A44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Data._Representation.subscript.getter(a1, a2, v2, v3);
}

uint64_t sub_1001E1A50(uint64_t a1)
{
  unint64_t v1;

  return HIDReport.storage.getter(a1, v1);
}

void sub_1001E1A58(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  DigitizerReport.contactRange(forIndex:)(a1, v1, v2);
}

uint64_t sub_1001E1A64()
{
  unint64_t v0;
  uint64_t v1;

  return HIDReport.storage.getter(v1, v0);
}

uint64_t sub_1001E1A70()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

void sub_1001E1A7C(uint64_t a1, uint64_t a2)
{
  sub_1000E6CB8(a1, a2);
}

uint64_t sub_1001E1A88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIDReport.storage.getter(a2, a3);
}

void sub_1001E1A94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1001E0D24(0, a2, a3);
}

uint64_t static ZoomToggleEvent.dispatch(report:)()
{
  uint64_t v0;
  void *ZoomToggleEvent;
  id v2;
  int v3;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v0 = mach_absolute_time();
  ZoomToggleEvent = (void *)IOHIDEventCreateZoomToggleEvent(0, v0, 0, 0);
  v2 = IOHIDEventRef.__bridgedValue.getter();

  v3 = static ReportID.appleVendorKeyboard.getter();
  v4 = mach_absolute_time();
  v5.n128_u64[0] = 0;
  v6.n128_u64[0] = 0;
  v7.n128_u64[0] = 0;
  v8 = DigitizerEvent.init(time:digitizerType:digitizerEventMask:generationCount:index:identity:point:range:touch:flags:)(v4, v3, 0, 0, 0, 0, 0, 0, v5, v6, v7, 0);
  v9 = v2;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for DigitizerEvent, (uint64_t)&protocol witness table for DigitizerEvent);
  v11 = v10;
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for ZoomToggleEvent, (uint64_t)&protocol witness table for ZoomToggleEvent);
  v13 = v12;
  IOHIDEventAppendEvent(v11, v12, 0);

  v14 = sub_1000055B0(&qword_1002B52F0);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v15 + 56) = &type metadata for DigitizerEvent;
  *(_QWORD *)(v15 + 64) = &protocol witness table for DigitizerEvent;
  *(_QWORD *)(v15 + 32) = v8;

  return v15;
}

void *ZoomToggleReport.reportID.unsafeMutableAddressor()
{
  return &static ZoomToggleReport.reportID;
}

void *ZoomToggleReport.bitCount.unsafeMutableAddressor()
{
  return &static ZoomToggleReport.bitCount;
}

void sub_1001E1BF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static ZoomToggleReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static ZoomToggleReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001E1C48, v2);
}

uint64_t sub_1001E1C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v11;

  type metadata accessor for ApplicationCollection();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  ApplicationCollection.init(content:)(v4);
  v5 = sub_1000055B0(&qword_1002B5310);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v6 + 56) = v1;
  *(_QWORD *)(v6 + 64) = &protocol witness table for ApplicationCollection;
  v7 = sub_100005534((_QWORD *)(v6 + 32));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2 + 16))(v7, v4, v1);
  v8 = static HIDReportDescriptor.Builder.buildBlock(_:)(v6);
  v9 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v2 + 8))(v4, v1, v9);
  return v8;
}

uint64_t sub_1001E1D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  type metadata accessor for Input.Bit8();
  v86 = *(_QWORD *)(v0 - 8);
  v87 = v0;
  __chkstk_darwin(v0);
  v85 = (char *)&v64 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit6();
  v83 = *(_QWORD *)(v2 - 8);
  v84 = v2;
  __chkstk_darwin(v2);
  v82 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit5();
  v80 = v4;
  v74 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v78 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit4();
  v77 = v6;
  v75 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v72 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit3();
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit2();
  v67 = v11;
  v66 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit1();
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input.Bit0();
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v23 = (unsigned __int8 *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Input();
  v79 = v24;
  v81 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v65 = (char **)((char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ReportCount();
  v73 = v26;
  v76 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v68 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReportSize();
  v88 = v28;
  v69 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v30;
  ReportSize.init(_:)(8, v31, v32, v33, v34, v35, v36, v37);
  ReportCount.init(_:)(1, v38, v39, v40, v41, v42, v43, v44);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t))(v21 + 104))(v23, 0, v20);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 104))(v18, 1, v15);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v66 + 104))(v13, 0, v67);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v70 + 104))(v10, 0, v71);
  v45 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v72, 0, v77);
  v46 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v78, 0, v80);
  v47 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, 0, v84);
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, 0, v87);
  v48 = v65;
  Input.init(_:_:_:_:_:_:_:_:)(v23, v18, v13, v10, v45, v46, v47, v65);
  v49 = sub_1000055B0(&qword_1002B5310);
  v50 = swift_allocObject(v49, 192, 7);
  *(_OWORD *)(v50 + 16) = xmmword_10022E470;
  *(_QWORD *)(v50 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v50 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v50 + 32) = 14;
  v51 = v88;
  *(_QWORD *)(v50 + 96) = v88;
  *(_QWORD *)(v50 + 104) = &protocol witness table for ReportSize;
  v52 = sub_100005534((_QWORD *)(v50 + 72));
  v53 = v69;
  (*(void (**)(_QWORD *, char *, uint64_t))(v69 + 16))(v52, v30, v51);
  v54 = v73;
  *(_QWORD *)(v50 + 136) = v73;
  *(_QWORD *)(v50 + 144) = &protocol witness table for ReportCount;
  v55 = sub_100005534((_QWORD *)(v50 + 112));
  v56 = v76;
  v57 = v68;
  (*(void (**)(_QWORD *, char *, uint64_t))(v76 + 16))(v55, v68, v54);
  v58 = v79;
  *(_QWORD *)(v50 + 176) = v79;
  *(_QWORD *)(v50 + 184) = &protocol witness table for Input;
  v59 = sub_100005534((_QWORD *)(v50 + 152));
  v60 = v81;
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v81 + 16))(v59, v48, v58);
  v61 = static HIDReportDescriptor.Builder.buildBlock(_:)(v50);
  v62 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *, uint64_t, __n128))(v60 + 8))(v48, v58, v62);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v54);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v64, v88);
  return v61;
}

uint64_t ZoomToggleReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51E8 != -1)
    swift_once(&qword_1002B51E8, sub_1001E1BF0);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static ZoomToggleReport.descriptor);
}

uint64_t static ZoomToggleReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51E8 != -1)
    swift_once(&qword_1002B51E8, sub_1001E1BF0);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static ZoomToggleReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001E234C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = ZoomToggleReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t ZoomToggleReport.init()()
{
  return 14;
}

void ZoomToggleReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001E2420()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 2uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(14, 0x2000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

uint64_t sub_1001E24EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ZoomToggleReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001E2510(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  ZoomToggleReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
}

uint64_t sub_1001E2534()
{
  uint64_t v0;

  return sub_1001E2F64(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void ZoomToggleReport.flags.modify(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  sub_100127CC4(8, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000050D4();
}

void sub_1001E2574(uint64_t a1)
{
  sub_1000E4D78(*(unsigned __int8 *)(a1 + 8), 8);
}

ValueMetadata *type metadata accessor for ZoomToggleReport()
{
  return &type metadata for ZoomToggleReport;
}

uint64_t sub_1001E25AC(uint64_t (*a1)(void), uint64_t a2, NSObject *a3, uint64_t a4)
{
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v7 = (void *)_convertErrorToNSError(_:)(a4);
  v8 = objc_msgSend(v7, "localizedDescription");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  v11 = a1();
  if (v12)
  {
    v13 = v11;
    v14 = v12;
    v15 = v7;
    swift_bridgeObjectRetain(v14);
    v16 = sub_100043360();
    v17 = a3;
    Logger.logObject.getter(v16);
    v18 = sub_1000E4BA8();
    if (sub_10002D948(v18))
    {
      v19 = sub_10000797C(42);
      v93 = sub_10000797C(96);
      v100 = v93;
      *(_DWORD *)v19 = 136446979;
      swift_bridgeObjectRetain(v14);
      v95 = sub_100006FCC(v13, v14, &v100);
      sub_1001E2DBC(v95, v20, v21, v19 + 12, v22, v23, v24, v25);
      v26 = sub_1000103C8(v14);
      *(_WORD *)(v19 + 12) = 2082;
      v27 = sub_100043374(v26, "domain");
      v94 = a4;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v96 = sub_100006FCC(v28, v30, &v100);
      sub_1001E2DBC(v96, v31, v32, v19 + 22, v33, v34, v35, v36);

      v37 = swift_bridgeObjectRelease(v30);
      *(_WORD *)(v19 + 22) = 2048;
      sub_100043374(v37, "code");

      sub_1001E2DCC(v38, v39, v40, v19 + 32, v41, v42, v43, v44);
      *(_WORD *)(v19 + 32) = 2081;
      v45 = sub_100043360();
      v97 = sub_1001E2DDC(v45, v46, v47, v48, v49);
      sub_1001E2DCC(v97, v50, v51, v19 + 42, v52, v53, v54, v55);
      sub_1000103C8(v10);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)a1, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v19, 0x2Au);
      sub_1001E2DEC(v56, v57, (uint64_t)&type metadata for Any + 8);
      v58 = v93;
LABEL_6:
      sub_100007958(v58);
      sub_100007958(v19);

      return swift_errorRelease(v94);
    }
    sub_100026AF4(v10);
    v92 = v14;
  }
  else
  {
    v15 = v7;
    v59 = sub_100043360();
    v17 = a3;
    Logger.logObject.getter(v59);
    v60 = sub_1000E4BA8();
    if (sub_10002D948(v60))
    {
      v19 = sub_10000797C(32);
      v61 = sub_10000797C(64);
      v100 = v61;
      *(_DWORD *)v19 = 136446723;
      v94 = a4;
      v62 = sub_100043374(v61, "domain");
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      v98 = sub_100006FCC(v63, v65, &v100);
      sub_1001E2DAC(v98, v66, v67, v19 + 12, v68, v69, v70, v71);

      v72 = swift_bridgeObjectRelease(v65);
      *(_WORD *)(v19 + 12) = 2048;
      sub_100043374(v72, "code");

      sub_1001E2DAC(v73, v74, v75, v19 + 22, v76, v77, v78, v79);
      *(_WORD *)(v19 + 22) = 2081;
      v80 = sub_100043360();
      v99 = sub_1001E2DDC(v80, v81, v82, v83, v84);
      sub_1001E2DAC(v99, v85, v86, v19 + 32, v87, v88, v89, v90);
      sub_1000103C8(v10);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)a1, "%{public}s (%ld) %{private}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      v58 = v61;
      goto LABEL_6;
    }
    v92 = v10;
  }
  sub_100026AF4(v92);

  return swift_errorRelease(a4);
}

void sub_1001E2998(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  id v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  uint64_t v221;
  uint64_t v222;

  v4 = v3;
  v6 = a3();
  v7 = (void *)_convertErrorToNSError(_:)(v6);
  v8 = swift_errorRelease(v6);
  v9 = sub_100043374(v8, "localizedDescription");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = a1();
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    v205 = v7;
    swift_bridgeObjectRetain();
    v17 = sub_1000103C0();
    v18 = v4;
    Logger.logObject.getter(v17);
    v19 = sub_1000E4BA8();
    if (sub_1000103A0(v19))
    {
      v20 = sub_10000797C(42);
      v190 = sub_10000797C(96);
      v222 = v190;
      *(_DWORD *)v20 = 136446979;
      swift_bridgeObjectRetain();
      v221 = sub_100006FCC(v15, v16, &v222);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v221, &v222, v20 + 4);
      v21 = sub_1000103C8(v16);
      *(_WORD *)(v20 + 12) = 2082;
      v28 = sub_100010398(v21, "domain", v22, v23, v24, v25, v26, v27, v190, v205);
      v29 = v10;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v32 = v31;

      v221 = sub_100006FCC(v30, v32, &v222);
      v33 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v221, &v222, v20 + 14);
      sub_1000088C8(v33, v34, v35, v36, v37, v38, v39, v40, v191, v206);
      sub_1000088C8(v41, v42, v43, v44, v45, v46, v47, v48, v192, v207);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2048;
      v56 = sub_100010398(v49, "code", v50, v51, v52, v53, v54, v55, v193, v208);
      sub_1000088C8((int)v56, v57, v58, v59, v60, v61, v62, v63, v194, v209);
      v221 = (uint64_t)v56;
      v69 = sub_1000103B0(v64, v65, v66, v20 + 32, v67, v68);
      sub_1000088C8(v69, v70, v71, v72, v73, v74, v75, v76, v195, v210);
      *(_WORD *)(v20 + 32) = 2081;
      sub_1000103C0();
      v221 = sub_100006FCC(v29, v12, &v222);
      sub_1000103B0(v221, v77, v78, v20 + 42, v79, v80);
      sub_1000103C8(v12);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v7, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v20, 0x2Au);
      sub_1001E2DEC(v81, v82, (uint64_t)&type metadata for Any + 8);
      v83 = v196;
LABEL_6:
      sub_100007958(v83);
      sub_100007958(v20);

      sub_1000088C8(v148, v149, v150, v151, v152, v153, v154, v155, v196, v211);
      return;
    }
    sub_100026AF4(v12);
    v156 = v16;
  }
  else
  {
    v205 = v7;
    v84 = sub_1000103C0();
    v18 = v4;
    Logger.logObject.getter(v84);
    v85 = sub_1000E4BA8();
    if (sub_1000103A0(v85))
    {
      v20 = sub_10000797C(32);
      v86 = sub_10000797C(64);
      v222 = v86;
      *(_DWORD *)v20 = 136446723;
      v93 = sub_100010398(v86, "domain", v87, v88, v89, v90, v91, v92, v189, v205);
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      v96 = v95;

      v221 = sub_100006FCC(v94, v96, &v222);
      v101 = sub_100010388(v221, v97, v98, v20 + 12, v99, v100);
      sub_1000088C8(v101, v102, v103, v104, v105, v106, v107, v108, v197, v212);
      sub_1000088C8(v109, v110, v111, v112, v113, v114, v115, v116, v198, v213);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2048;
      LODWORD(v94) = sub_100010398(v117, "code", v118, v119, v120, v121, v122, v123, v199, v214);
      sub_1000088C8(v94, v124, v125, v126, v127, v128, v129, v130, v200, v215);
      v136 = sub_100010388(v131, v132, v133, v20 + 22, v134, v135);
      sub_1000088C8(v136, v137, v138, v139, v140, v141, v142, v143, v201, v216);
      *(_WORD *)(v20 + 22) = 2081;
      sub_1000103C0();
      v221 = sub_100006FCC(v10, v12, &v222);
      sub_100010388(v221, v144, v145, v20 + 32, v146, v147);
      sub_1000103C8(v12);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v7, "%{public}s (%ld) %{private}s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      v83 = v86;
      goto LABEL_6;
    }
    v156 = v12;
  }
  sub_100026AF4(v156);

  sub_1000088C8(v157, v158, v159, v160, v161, v162, v163, v164, v189, v205);
  sub_1000088C8(v165, v166, v167, v168, v169, v170, v171, v172, v202, v217);
  sub_1000088C8(v173, v174, v175, v176, v177, v178, v179, v180, v203, v218);
  sub_1000088C8(v181, v182, v183, v184, v185, v186, v187, v188, v204, v219);

}

uint64_t sub_1001E2DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, v8, a4);
}

uint64_t sub_1001E2DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, v8, a4);
}

uint64_t sub_1001E2DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v9, v8, a4);
}

uint64_t sub_1001E2DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unint64_t v5;
  va_list va;

  va_start(va, a5);
  return sub_100006FCC(a3, v5, (uint64_t *)va);
}

uint64_t sub_1001E2DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 3, a3);
}

uint64_t TranslationReport.x.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001E2E08(a1, a2, 16);
}

uint64_t TranslationReport.y.getter(uint64_t a1, unint64_t a2)
{
  return sub_1001E2E08(a1, a2, 32);
}

uint64_t sub_1001E2E08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000E6BC4();
  sub_1001E3E78();
  sub_1001E3E70();
  v8 = sub_1001E3E68();
  return sub_1001E3E30((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, a3, a1, a2, v9, v10, v11, v3, v4, v8);
}

uint64_t sub_1001E2E7C(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x6E6F697461746F52;
  v3._object = (void *)0xEE0074726F706552;
  return sub_1001E2F7C(a1, a2, v3);
}

uint64_t sub_1001E2EA0(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x706552656C616353;
  v3._object = (void *)0xEB0000000074726FLL;
  return sub_1001E2F7C(a1, a2, v3);
}

uint64_t sub_1001E2EC0(uint64_t a1, unint64_t a2)
{
  return sub_1001E3E0C(a1, a2, 0x6C6C6F726353);
}

uint64_t sub_1001E2ED0(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._object = (void *)0x800000010025A480;
  v3._countAndFlagsBits = 23;
  return sub_1001E3E04(a1, a2, v3);
}

uint64_t sub_1001E2EE8(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x706977536B636F44;
  v3._object = (void *)21093;
  return sub_1001E3E20(a1, a2, v3);
}

uint64_t sub_1001E2F00(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._object = (void *)0x800000010025A460;
  v3._countAndFlagsBits = 21;
  return sub_1001E3E04(a1, a2, v3);
}

uint64_t sub_1001E2F18(uint64_t a1, unint64_t a2)
{
  return sub_1001E3E0C(a1, a2, 0x6E6F74747542);
}

uint64_t sub_1001E2F28(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x527265746E696F50;
  v3._object = (void *)0xED000074726F7065;
  return sub_1001E2F7C(a1, a2, v3);
}

uint64_t sub_1001E2F4C(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x657A697469676944;
  v3._object = (void *)21106;
  return sub_1001E3E20(a1, a2, v3);
}

uint64_t sub_1001E2F64(uint64_t a1, unint64_t a2)
{
  Swift::String v3;

  v3._object = (void *)0x800000010025A440;
  v3._countAndFlagsBits = 16;
  return sub_1001E3E04(a1, a2, v3);
}

uint64_t sub_1001E2F7C(uint64_t a1, unint64_t a2, Swift::String a3)
{
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;

  String.append(_:)(a3);
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  sub_10002517C(a1, a2);
  HIDReport.description.getter(a1, a2);
  v7 = v6;
  v9 = v8;
  sub_100022AEC(a1, a2);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 60;
}

void *TranslationReport.reportID.unsafeMutableAddressor()
{
  return &static TranslationReport.reportID;
}

void *TranslationReport.bitCount.unsafeMutableAddressor()
{
  return &static TranslationReport.bitCount;
}

uint64_t static TranslationReport.bitCount.getter()
{
  return 48;
}

void sub_1001E3058()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for HIDReportDescriptor();
  v1 = v0;
  sub_10000897C(v0, static TranslationReport.descriptor);
  v2 = (_QWORD *)sub_100006FB4(v1, (uint64_t)static TranslationReport.descriptor);
  HIDReportDescriptor.init(content:)(sub_1001E30B0, v2);
}

uint64_t sub_1001E30B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void (*v75)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(_QWORD *, _BYTE *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v83;
  _BYTE *v84;
  _QWORD *v85;
  _BYTE *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  __n128 v90;
  void (*v91)(_QWORD *, uint64_t, __n128);
  void (*v92)(_BYTE *, uint64_t);
  void (*v93)(_BYTE *, uint64_t);
  _BYTE v95[12];
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  void (*v101)(_BYTE *);
  uint64_t v102;
  void (*v103)(_BYTE *, uint64_t, uint64_t);
  uint64_t v104;
  unsigned int v105;
  void (*v106)(_BYTE *);
  uint64_t v107;
  unsigned int v108;
  void (*v109)(unsigned __int8 *);
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;

  type metadata accessor for Input.Bit8();
  v123 = *(_QWORD *)(v0 - 8);
  v124 = v0;
  __chkstk_darwin(v0);
  v122 = &v95[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit6();
  v130 = v2;
  v120 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v119 = &v95[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit5();
  v128 = v4;
  v117 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v116 = &v95[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit4();
  v127 = v6;
  v115 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v114 = &v95[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit3();
  v9 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  __chkstk_darwin(v8);
  v113 = &v95[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit2();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  __chkstk_darwin(v11);
  v112 = &v95[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit1();
  v16 = *(_QWORD *)(v15 - 8);
  v107 = v15;
  __chkstk_darwin(v15);
  v111 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input.Bit0();
  v19 = *(_QWORD *)(v18 - 8);
  v110 = v18;
  __chkstk_darwin(v18);
  v21 = &v95[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Input();
  v23 = *(_QWORD *)(v22 - 8);
  v125 = v22;
  v126 = v23;
  __chkstk_darwin(v22);
  v135 = &v95[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v137 = &v95[-v26];
  type metadata accessor for ReportCount();
  v121 = v27;
  v136 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v131 = &v95[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v29);
  v132 = &v95[-v30];
  type metadata accessor for ReportSize();
  v118 = v31;
  v134 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v129 = &v95[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v33);
  v133 = &v95[-v34];
  ReportSize.init(_:)(8, v35, v36, v37, v38, v39, v40, v41);
  ReportCount.init(_:)(1, v42, v43, v44, v45, v46, v47, v48);
  v108 = 0;
  v109 = *(void (**)(unsigned __int8 *))(v19 + 104);
  v109(v21);
  v105 = 1;
  v106 = *(void (**)(_BYTE *))(v16 + 104);
  v49 = v111;
  v106(v111);
  v103 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 104);
  v50 = v112;
  v103(v112, 0, v12);
  v100 = 0;
  v101 = *(void (**)(_BYTE *))(v9 + 104);
  v51 = v113;
  v101(v113);
  v99 = 0;
  v115 = *(_QWORD *)(v115 + 104);
  v52 = v114;
  ((void (*)(_BYTE *))v115)(v114);
  v98 = 0;
  v117 = *(_QWORD *)(v117 + 104);
  v53 = v116;
  ((void (*)(_BYTE *))v117)(v116);
  v97 = 0;
  v54 = v119;
  v120 = *(_QWORD *)(v120 + 104);
  ((void (*)(_BYTE *))v120)(v119);
  v96 = 0;
  v55 = v122;
  v123 = *(_QWORD *)(v123 + 104);
  v56 = v124;
  ((void (*)(_BYTE *))v123)(v122);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v137);
  ReportSize.init(_:)(16, v57, v58, v59, v60, v61, v62, v63);
  ReportCount.init(_:)(2, v64, v65, v66, v67, v68, v69, v70);
  ((void (*)(unsigned __int8 *, _QWORD, uint64_t))v109)(v21, v108, v110);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v106)(v49, v105, v107);
  v103(v50, 1, v104);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v101)(v51, v100, v102);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v115)(v52, v99, v127);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v117)(v53, v98, v128);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v120)(v54, v97, v130);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v123)(v55, v96, v56);
  Input.init(_:_:_:_:_:_:_:_:)(v21, v49, v50, v51, v52, v53, v54, v135);
  v71 = sub_1000055B0(&qword_1002B5310);
  v72 = swift_allocObject(v71, 312, 7);
  *(_OWORD *)(v72 + 16) = xmmword_10021F8C0;
  *(_QWORD *)(v72 + 56) = &type metadata for ReportID;
  *(_QWORD *)(v72 + 64) = &protocol witness table for ReportID;
  *(_BYTE *)(v72 + 32) = 17;
  v73 = v118;
  *(_QWORD *)(v72 + 96) = v118;
  *(_QWORD *)(v72 + 104) = &protocol witness table for ReportSize;
  v74 = sub_100005534((_QWORD *)(v72 + 72));
  v75 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v134 + 16);
  v75(v74, v133, v73);
  v76 = v121;
  *(_QWORD *)(v72 + 136) = v121;
  *(_QWORD *)(v72 + 144) = &protocol witness table for ReportCount;
  v77 = sub_100005534((_QWORD *)(v72 + 112));
  v78 = *(void (**)(_QWORD *, _BYTE *, uint64_t))(v136 + 16);
  v78(v77, v132, v76);
  v79 = v125;
  *(_QWORD *)(v72 + 176) = v125;
  *(_QWORD *)(v72 + 184) = &protocol witness table for Input;
  v80 = sub_100005534((_QWORD *)(v72 + 152));
  v81 = v126;
  v82 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v126 + 16);
  v82(v80, v137, v79);
  *(_QWORD *)(v72 + 216) = v73;
  *(_QWORD *)(v72 + 224) = &protocol witness table for ReportSize;
  v83 = sub_100005534((_QWORD *)(v72 + 192));
  v84 = v129;
  v75(v83, v129, v73);
  *(_QWORD *)(v72 + 256) = v76;
  *(_QWORD *)(v72 + 264) = &protocol witness table for ReportCount;
  v85 = sub_100005534((_QWORD *)(v72 + 232));
  v86 = v131;
  v78(v85, v131, v76);
  *(_QWORD *)(v72 + 296) = v79;
  *(_QWORD *)(v72 + 304) = &protocol witness table for Input;
  v87 = sub_100005534((_QWORD *)(v72 + 272));
  v88 = v135;
  v82(v87, v135, v79);
  v89 = static HIDReportDescriptor.Builder.buildBlock(_:)(v72);
  v90 = swift_bridgeObjectRelease();
  v91 = *(void (**)(_QWORD *, uint64_t, __n128))(v81 + 8);
  v91(v88, v79, v90);
  v92 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
  v92(v86, v76);
  v93 = *(void (**)(_BYTE *, uint64_t))(v134 + 8);
  v93(v84, v73);
  ((void (*)(_QWORD *, uint64_t))v91)(v137, v79);
  v92(v132, v76);
  v93(v133, v73);
  return v89;
}

uint64_t TranslationReport.descriptor.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1002B51F0 != -1)
    swift_once(&qword_1002B51F0, sub_1001E3058);
  type metadata accessor for HIDReportDescriptor();
  return sub_100006FB4(v0, (uint64_t)static TranslationReport.descriptor);
}

uint64_t static TranslationReport.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1002B51F0 != -1)
    swift_once(&qword_1002B51F0, sub_1001E3058);
  type metadata accessor for HIDReportDescriptor();
  v3 = v2;
  v4 = sub_100006FB4(v2, (uint64_t)static TranslationReport.descriptor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_1001E3974@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = TranslationReport.descriptor.unsafeMutableAddressor();
  type metadata accessor for HIDReportDescriptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v2, v3);
}

uint64_t TranslationReport.init()()
{
  return 17;
}

void TranslationReport.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001E3A48()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (BYTE6(v0) < 6uLL)
    goto LABEL_2;
  v2 = sub_100026B88();
  sub_10002517C(v2, v3);
  v4 = sub_100026B88();
  sub_10013DE98(v4, v5);
  v7 = v6;
  sub_1001AF030();
  sub_10013DE98(17, 0x6000000000000);
  if ((v7 & 0x100) != 0)
  {
    if ((v8 & 0x100) != 0)
      return sub_100026B88();
    goto LABEL_2;
  }
  if ((v8 & 0x100) != 0 || v7 != v8)
LABEL_2:
    sub_1001AF030();
  return sub_100026B88();
}

uint64_t sub_1001E3B14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TranslationReport.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1001E3B38(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  TranslationReport.init(_:)(a1, a2);
  *a3 = v4;
  a3[1] = v5;
  sub_1000050D4();
}

uint64_t sub_1001E3B58()
{
  uint64_t v0;
  Swift::String v2;

  v2._object = (void *)0x800000010022E540;
  v2._countAndFlagsBits = 0xD000000000000011;
  return sub_1001E2F7C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), v2);
}

void TranslationReport.x.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1001E3E58(a1);
  sub_1001E3E78();
  sub_1001E3E70();
  v6 = sub_1001E3E68();
  sub_1001E3E30((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, v2, v3, v7, v8, v9, v4, v5, v6);
  *v1 = v10;
  sub_1000797D8();
}

void sub_1001E3BF0(double *a1)
{
  TranslationReport.x.setter(*a1);
  sub_1000050D4();
}

uint64_t TranslationReport.y.setter(double a1)
{
  return sub_1000E618C(32, a1);
}

void TranslationReport.y.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1001E3E58(a1);
  sub_1001E3E78();
  sub_1001E3E70();
  v6 = sub_1001E3E68();
  sub_1001E3E30((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 32, v2, v3, v7, v8, v9, v4, v5, v6);
  *v1 = v10;
  sub_1000797D8();
}

void sub_1001E3C80(double *a1)
{
  sub_1000E618C(32, *a1);
  sub_1000050D4();
}

double TranslationReport.delta.getter()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000E6BC4();
  v0 = sub_10013F740();
  v1 = sub_1000E6C3C();
  v2 = sub_1000E6C00();
  sub_1001E3E40((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, v3, v4, v5, v6, v7, v0, v1, v2);
  v9 = v8;
  sub_1001E3E40((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 32, v10, v11, v12, v13, v14, v0, v1, v2);
  return v9;
}

uint64_t TranslationReport.delta.setter(double a1, double a2)
{
  TranslationReport.x.setter(a1);
  return sub_1000E618C(32, a2);
}

void TranslationReport.delta.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 24) = v1;
  *(double *)a1 = TranslationReport.delta.getter();
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1000050D4();
}

uint64_t sub_1001E3DBC(double *a1)
{
  double v1;

  v1 = a1[1];
  TranslationReport.x.setter(*a1);
  return sub_1000E618C(32, v1);
}

ValueMetadata *type metadata accessor for TranslationReport()
{
  return &type metadata for TranslationReport;
}

uint64_t sub_1001E3E04(uint64_t a1, unint64_t a2, Swift::String a3)
{
  a3._countAndFlagsBits = a3._countAndFlagsBits & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return sub_1001E2F7C(a1, a2, a3);
}

uint64_t sub_1001E3E0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::String v4;

  v4._countAndFlagsBits = a3 & 0xFFFFFFFFFFFFLL | 0x6552000000000000;
  v4._object = (void *)0xEC00000074726F70;
  return sub_1001E2F7C(a1, a2, v4);
}

uint64_t sub_1001E3E20(uint64_t a1, unint64_t a2, Swift::String a3)
{
  a3._object = (void *)(LOWORD(a3._object) | 0xEF74726F70650000);
  return sub_1001E2F7C(a1, a2, a3);
}

uint64_t sub_1001E3E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;

  return HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)(a1, a2, a3, a4, a5, a1, a2, v11, a9, a10, a11);
}

uint64_t sub_1001E3E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  return HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)(a1, a2, a3, v12, v11, v14, v15, v13, a9, a10, a11);
}

unint64_t sub_1001E3E58(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  return sub_1000E6BC4();
}

unint64_t sub_1001E3E68()
{
  return sub_1000E6C00();
}

unint64_t sub_1001E3E70()
{
  return sub_1000E6C3C();
}

unint64_t sub_1001E3E78()
{
  return sub_10013F740();
}

void sub_1001E3E80(unsigned int a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1001D0EC0(a1);
    if ((v2 & 1) != 0)
      swift_retain();
  }
}

void HIDVirtualService.property(forKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  id v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];

  sub_10000B2F8(v3 + 120, (uint64_t)v11, 32);
  v7 = *(_QWORD *)(v3 + 120);
  sub_100040544();
  sub_100041C44(a1, a2, v7, &v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    sub_100005778(&v9, a3);
    swift_endAccess(v11);
  }
  else
  {
    sub_1000C2C88((uint64_t)&v9, &qword_1002B34C0);
    swift_endAccess(v11);
    sub_10005FE28(v3 + 104, (uint64_t)&v9);
    v8 = *(id *)(v3 + 112);
    HIDServiceProperties.property(forKey:)(a1, a2, v8, a3);

  }
}

_QWORD *sub_1001E3F9C(uint64_t a1)
{
  return sub_1001E418C(a1, (uint64_t)&type metadata for KeyboardEvent, (uint64_t)&protocol witness table for KeyboardEvent);
}

char *sub_1001E3FB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *result;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;
  _QWORD *v22;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (char *)v3;
  v22 = _swiftEmptyArrayStorage;
  result = sub_1001DB214(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v3 = v22;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = sub_1000078E0(0, (unint64_t *)&qword_1002B61E0, HIDEvent_ptr);
      v20 = v8;
      v21 = &protocol witness table for HIDEvent;
      v19[0] = v7;
      v22 = v3;
      v10 = v3[2];
      v9 = v3[3];
      if (v10 >= v9 >> 1)
      {
        sub_1001DB214((char *)(v9 > 1), v10 + 1, 1);
        v11 = v20;
        v12 = v21;
      }
      else
      {
        v11 = v8;
        v12 = &protocol witness table for HIDEvent;
      }
      ++v5;
      v13 = sub_10003FEF8((uint64_t)v19, v11);
      v14 = __chkstk_darwin(v13);
      v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v17 + 16))(v16, v14);
      sub_1001E6B30(v10, (uint64_t)v16, (uint64_t *)&v22, v11, (uint64_t)v12);
      sub_100005988(v19);
      v3 = v22;
    }
    while (v2 != v5);
    return (char *)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001E4178(uint64_t a1)
{
  return sub_1001E418C(a1, (uint64_t)&type metadata for ScrollEvent, (uint64_t)&protocol witness table for ScrollEvent);
}

_QWORD *sub_1001E418C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v4;
  void **v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_1001DB214(0, v3, 0);
    v4 = _swiftEmptyArrayStorage;
    v8 = (void **)(a1 + 32);
    do
    {
      v9 = *v8;
      v17 = v4;
      v10 = v4[2];
      v11 = v4[3];
      v12 = v9;
      if (v10 >= v11 >> 1)
      {
        sub_1001DB214((char *)(v11 > 1), v10 + 1, 1);
        v4 = v17;
      }
      v15 = a2;
      v16 = a3;
      *(_QWORD *)&v14 = v12;
      v4[2] = v10 + 1;
      sub_100025A50(&v14, (uint64_t)&v4[5 * v10 + 4]);
      ++v8;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1001E427C(uint64_t a1, uint64_t a2)
{
  return sub_1001E42AC(a1, a2, (uint64_t (*)(uint64_t))sub_1001C2D78);
}

uint64_t sub_1001E4288(uint64_t a1, uint64_t a2)
{
  return sub_1001E42AC(a1, a2, (uint64_t (*)(uint64_t))sub_1001C2F70);
}

uint64_t sub_1001E4294(uint64_t a1, uint64_t a2)
{
  return sub_1001E42AC(a1, a2, (uint64_t (*)(uint64_t))sub_1001C3244);
}

uint64_t sub_1001E42A0(uint64_t a1, uint64_t a2)
{
  return sub_1001E42AC(a1, a2, (uint64_t (*)(uint64_t))sub_1001C2BB8);
}

uint64_t sub_1001E42AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[24];

  sub_10000B2F8(v3 + 16, (uint64_t)v12, 1);
  sub_10002517C(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  v7 = sub_1000269E0();
  v8 = a3(v7);
  sub_1000E14F4();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v9 = sub_1000269E0();
  sub_10002517C(v9, v10);
  sub_1000E14F4();
  return v8;
}

void sub_1001E4338(uint64_t a1, void (*a2)(void **__return_ptr, _QWORD *))
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v5 = v2[19];
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1001BF1E4(a1);
    v7 = v6;
    swift_release();
    sub_10000E594();
    v8 = sub_1001E3FB0(v7);
    swift_release();
    sub_1001C4444((uint64_t)v8);
    v2[19] = v5;
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v10 == v9)
    {
      v17 = 0;
      v10 = v9;
      memset(v16, 0, sizeof(v16));
      goto LABEL_8;
    }
    if (v10 >= v9)
      break;
    sub_1000445C0(a1 + 32 + 40 * v10++, (uint64_t)v16);
LABEL_8:
    sub_1001C021C((uint64_t)v16, (uint64_t)&v14);
    if (!v15)
    {
      swift_release();
      sub_10000E594();
      return;
    }
    sub_100025A50(&v14, (uint64_t)v13);
    a2(&v12, v13);
    v11 = v12;
    sub_100005988(v13);
    sub_1001E6BA8(v11, v2);

  }
  __break(1u);
}

