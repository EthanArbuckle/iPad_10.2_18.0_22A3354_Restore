uint64_t sub_1000743DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  _QWORD v25[5];
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v31 = a3;
  v32 = a4;
  v29 = a1 >> 16;
  v30 = a1 >> 8;
  v27 = HIDWORD(a1);
  v28 = a1 >> 24;
  v25[4] = HIWORD(a1);
  v26 = a1 >> 40;
  v25[2] = a2 >> 8;
  v25[3] = HIBYTE(a1);
  v25[1] = a2 >> 16;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0x5B7265646E6553;
  v34 = 0xE700000000000000;
  v9 = UUID.init(uuid:)(a1, v30, v29, v28, v27, v26);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = sub_1000599D0(8, v10, v12);
  v14 = static String._fromSubstring(_:)(v13);
  v16 = v15;
  sub_10000E410();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  sub_10000E50C();
  v18._countAndFlagsBits = 2112093;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRetain(v31);
  sub_100043360();
  sub_10016F6B8();
  v20 = v19;
  v22 = v21;
  sub_10000E594();
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  sub_10000E568();
  return v33;
}

uint64_t sub_1000745C4()
{
  uint64_t v0;

  return sub_1000743DC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

BOOL sub_1000745D0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v12;
  unint64_t v13;

  if (!static UniversalControlUUID.compare(lhs:rhs:)(a1, a2))
    return 1;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  sub_1000F42D8(a1, a2, a6);
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 >= a3;
}

uint64_t sub_10007466C(uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[5];

  sub_100043078(v22, a3);
  v6 = v22[0];
  v7 = v22[1];
  v8 = v22[3];
  v9 = v22[4];
  v10 = (unint64_t)(v22[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a3);
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v8 << 6);
      goto LABEL_15;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v14 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    if (!v15)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_13;
      v16 = v8 + 3;
      if (v8 + 3 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
        goto LABEL_13;
      v16 = v8 + 4;
      if (v8 + 4 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_13:
        v14 = v16;
      }
      else
      {
        v14 = v8 + 5;
        if (v8 + 5 >= v10)
          goto LABEL_25;
        v15 = *(_QWORD *)(v7 + 8 * v14);
        if (!v15)
        {
          v18 = v8 + 6;
          while (v18 < v10)
          {
            v15 = *(_QWORD *)(v7 + 8 * v18++);
            if (v15)
            {
              v14 = v18 - 1;
              goto LABEL_14;
            }
          }
LABEL_25:
          swift_release(v6);
          v19 = 1;
          return v19 & 1;
        }
      }
    }
LABEL_14:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v8 = v14;
LABEL_15:
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v13);
    v20 = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    v21 = v17;
    result = a1(&v20);
    if (v3)
    {
      swift_release(v6);
      return v19 & 1;
    }
    if ((result & 1) == 0)
    {
      swift_release(v6);
      v19 = 0;
      return v19 & 1;
    }
  }
  __break(1u);
  return result;
}

void sub_100074808(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CB24();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100074870(v5);
  *a1 = v2;
}

void sub_100074870(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  Swift::Int v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  Swift::Int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        sub_100075028(0, v4, 1, a1);
      return;
    }
    goto LABEL_130;
  }
  v6 = v5;
  sub_100022220(v4 / 2);
  v115 = v7;
  v120 = v4;
  v121 = v8;
  v113 = a1;
  if (v4 <= 0)
  {
LABEL_93:
    v11 = _swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage[2];
LABEL_94:
    if (v53 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease();
      if (v120 >= -1)
        goto LABEL_106;
      goto LABEL_134;
    }
    v104 = *v113;
    while (1)
    {
      v105 = v53 - 2;
      if (v53 < 2)
        break;
      if (!v104)
        goto LABEL_138;
      v106 = v2;
      v107 = v11[2 * v105 + 4];
      v108 = v11[2 * v53 + 3];
      sub_10007515C((char *)(v104 + 32 * v107), (char *)(v104 + 32 * v11[2 * v53 + 2]), v104 + 32 * v108, v121);
      if (v106)
      {
        v2 = v106;
        goto LABEL_91;
      }
      if (v108 < v107)
        goto LABEL_125;
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_10006CA50();
        v11 = v111;
      }
      if (v105 >= v11[2])
        goto LABEL_126;
      v109 = &v11[2 * v105 + 4];
      *v109 = v107;
      v109[1] = v108;
      v110 = v11[2];
      if (v53 > v110)
        goto LABEL_127;
      memmove(&v11[2 * v53 + 2], &v11[2 * v53 + 4], 16 * (v110 - v53));
      v11[2] = v110 - 1;
      v53 = v110 - 1;
      v2 = 0;
      if (v110 <= 2)
        goto LABEL_105;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    return;
  }
  v114 = v6;
  v9 = 0;
  v10 = *a1;
  v112 = *a1 + 88;
  v11 = _swiftEmptyArrayStorage;
  v125 = *a1;
  while (1)
  {
    v12 = v9++;
    v119 = v12;
    if (v9 < v4)
    {
      v116 = v11;
      v13 = v10 + 32 * v9;
      v15 = *(_QWORD *)(v13 + 16);
      v14 = *(_QWORD *)(v13 + 24);
      v16 = v10 + 32 * v12;
      v17 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain_n(v15, 2);
      swift_bridgeObjectRetain_n(v14, 2);
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRetain_n(v18, 2);
      sub_1000F0380();
      v122 = v19;
      v20 = v14;
      v4 = v120;
      swift_bridgeObjectRelease_n(v20, 2);
      swift_bridgeObjectRelease_n(v15, 2);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v17, 2);
      v9 = v12 + 2;
      if (v12 + 2 < v120)
      {
        v21 = v12;
        v22 = v2;
        v23 = (uint64_t *)(v112 + 32 * v21);
        while (1)
        {
          v24 = *(v23 - 1);
          v25 = *v23;
          v26 = *(v23 - 5);
          v27 = *(v23 - 4);
          swift_bridgeObjectRetain_n(v24, 2);
          swift_bridgeObjectRetain_n(v25, 2);
          swift_bridgeObjectRetain_n(v26, 2);
          swift_bridgeObjectRetain_n(v27, 2);
          sub_1000F0380();
          v29 = v28;
          swift_bridgeObjectRelease_n(v25, 2);
          swift_bridgeObjectRelease_n(v24, 2);
          swift_bridgeObjectRelease_n(v27, 2);
          swift_bridgeObjectRelease_n(v26, 2);
          if ((v122 == 0) == (v29 != 0))
            break;
          ++v9;
          v23 += 4;
          v4 = v120;
          if (v9 >= v120)
          {
            v9 = v120;
            goto LABEL_11;
          }
        }
        v4 = v120;
LABEL_11:
        v2 = v22;
        v12 = v119;
      }
      v11 = v116;
      v10 = v125;
      if (!v122)
      {
        if (v9 < v12)
          goto LABEL_133;
        if (v12 < v9)
        {
          v30 = 32 * v9;
          v31 = 32 * v12;
          v32 = v9;
          v33 = v12;
          do
          {
            if (v33 != --v32)
            {
              if (!v125)
                goto LABEL_137;
              v34 = (_OWORD *)(v125 + v31);
              v35 = v125 + v30;
              v37 = *(_OWORD *)(v125 + v31);
              v36 = *(_OWORD *)(v125 + v31 + 16);
              v38 = *(_OWORD *)(v125 + v30 - 16);
              *v34 = *(_OWORD *)(v125 + v30 - 32);
              v34[1] = v38;
              *(_OWORD *)(v35 - 32) = v37;
              *(_OWORD *)(v35 - 16) = v36;
            }
            ++v33;
            v30 -= 32;
            v31 += 32;
          }
          while (v33 < v32);
        }
      }
    }
    if (v9 < v4)
    {
      if (__OFSUB__(v9, v12))
        goto LABEL_129;
      if (v9 - v12 < v114)
      {
        v39 = v12 + v114;
        if (__OFADD__(v12, v114))
          goto LABEL_131;
        if (v39 >= v4)
          v39 = v4;
        if (v39 < v12)
          goto LABEL_132;
        if (v9 != v39)
        {
          v117 = v11;
          v118 = v39;
          v123 = v2;
          v40 = v10 + 32 * v9;
          do
          {
            v41 = v10 + 32 * v9;
            v42 = *(_QWORD *)(v41 + 16);
            v43 = *(_QWORD *)(v41 + 24);
            v44 = v12;
            v45 = v40;
            while (1)
            {
              v46 = *(_QWORD *)(v45 - 16);
              v47 = *(_QWORD *)(v45 - 8);
              swift_bridgeObjectRetain_n(v42, 2);
              swift_bridgeObjectRetain_n(v43, 2);
              swift_bridgeObjectRetain_n(v46, 2);
              swift_bridgeObjectRetain_n(v47, 2);
              sub_1000F0380();
              v49 = v48;
              swift_bridgeObjectRelease_n(v43, 2);
              swift_bridgeObjectRelease_n(v42, 2);
              swift_bridgeObjectRelease_n(v47, 2);
              swift_bridgeObjectRelease_n(v46, 2);
              if (v49)
                break;
              v10 = v125;
              if (!v125)
                goto LABEL_135;
              v42 = *(_QWORD *)(v45 + 16);
              v43 = *(_QWORD *)(v45 + 24);
              v50 = *(_OWORD *)v45;
              v51 = *(_OWORD *)(v45 - 16);
              *(_OWORD *)v45 = *(_OWORD *)(v45 - 32);
              *(_OWORD *)(v45 + 16) = v51;
              *(_QWORD *)(v45 - 16) = v42;
              *(_QWORD *)(v45 - 8) = v43;
              *(_OWORD *)(v45 - 32) = v50;
              v45 -= 32;
              if (v9 == ++v44)
                goto LABEL_35;
            }
            v10 = v125;
LABEL_35:
            ++v9;
            v40 += 32;
            v12 = v119;
          }
          while (v9 != v118);
          v9 = v118;
          v2 = v123;
          v11 = v117;
        }
      }
    }
    if (v9 < v12)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    {
      sub_10006C984();
      v11 = v102;
    }
    v52 = v11[2];
    v53 = v52 + 1;
    v10 = v125;
    if (v52 >= v11[3] >> 1)
    {
      sub_10006C984();
      v10 = v125;
      v11 = v103;
    }
    v124 = v2;
    v11[2] = v53;
    v54 = v11 + 4;
    v55 = &v11[2 * v52 + 4];
    *v55 = v12;
    v55[1] = v9;
    if (v52)
      break;
    v53 = 1;
LABEL_85:
    v4 = v120;
    v2 = v124;
    if (v9 >= v120)
      goto LABEL_94;
  }
  while (1)
  {
    v56 = v53 - 1;
    if (v53 >= 4)
    {
      v61 = &v54[2 * v53];
      v62 = *(v61 - 8);
      v63 = *(v61 - 7);
      v67 = __OFSUB__(v63, v62);
      v64 = v63 - v62;
      if (v67)
        goto LABEL_113;
      v66 = *(v61 - 6);
      v65 = *(v61 - 5);
      v67 = __OFSUB__(v65, v66);
      v59 = v65 - v66;
      v60 = v67;
      if (v67)
        goto LABEL_114;
      v68 = v53 - 2;
      v69 = &v54[2 * v53 - 4];
      v71 = *v69;
      v70 = v69[1];
      v67 = __OFSUB__(v70, v71);
      v72 = v70 - v71;
      if (v67)
        goto LABEL_115;
      v67 = __OFADD__(v59, v72);
      v73 = v59 + v72;
      if (v67)
        goto LABEL_117;
      if (v73 >= v64)
      {
        v91 = &v54[2 * v56];
        v93 = *v91;
        v92 = v91[1];
        v67 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v67)
          goto LABEL_123;
        v84 = v59 < v94;
        goto LABEL_74;
      }
    }
    else
    {
      if (v53 != 3)
      {
        v85 = v11[4];
        v86 = v11[5];
        v67 = __OFSUB__(v86, v85);
        v78 = v86 - v85;
        v79 = v67;
        goto LABEL_68;
      }
      v58 = v11[4];
      v57 = v11[5];
      v67 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      v60 = v67;
    }
    if ((v60 & 1) != 0)
      goto LABEL_116;
    v68 = v53 - 2;
    v74 = &v54[2 * v53 - 4];
    v76 = *v74;
    v75 = v74[1];
    v77 = __OFSUB__(v75, v76);
    v78 = v75 - v76;
    v79 = v77;
    if (v77)
      goto LABEL_118;
    v80 = &v54[2 * v56];
    v82 = *v80;
    v81 = v80[1];
    v67 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if (v67)
      goto LABEL_120;
    if (__OFADD__(v78, v83))
      goto LABEL_122;
    if (v78 + v83 >= v59)
    {
      v84 = v59 < v83;
LABEL_74:
      if (v84)
        v56 = v68;
      goto LABEL_76;
    }
LABEL_68:
    if ((v79 & 1) != 0)
      goto LABEL_119;
    v87 = &v54[2 * v56];
    v89 = *v87;
    v88 = v87[1];
    v67 = __OFSUB__(v88, v89);
    v90 = v88 - v89;
    if (v67)
      goto LABEL_121;
    if (v90 < v78)
      goto LABEL_85;
LABEL_76:
    v95 = v56 - 1;
    if (v56 - 1 >= v53)
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    if (!v10)
      goto LABEL_136;
    v96 = v11;
    v97 = &v54[2 * v95];
    v98 = *v97;
    v99 = &v54[2 * v56];
    v100 = v99[1];
    sub_10007515C((char *)(v10 + 32 * *v97), (char *)(v10 + 32 * *v99), v10 + 32 * v100, v121);
    if (v124)
      break;
    if (v100 < v98)
      goto LABEL_110;
    if (v56 > v96[2])
      goto LABEL_111;
    *v97 = v98;
    v54[2 * v95 + 1] = v100;
    v101 = v96[2];
    if (v56 >= v101)
      goto LABEL_112;
    v11 = v96;
    v53 = v101 - 1;
    memmove(&v54[2 * v56], v99 + 2, 16 * (v101 - 1 - v56));
    v96[2] = v101 - 1;
    v10 = v125;
    if (v101 <= 2)
      goto LABEL_85;
  }
  v2 = v124;
LABEL_91:
  swift_bridgeObjectRelease();
  if (v120 < -1)
  {
    __break(1u);
    goto LABEL_93;
  }
LABEL_106:
  *(_QWORD *)(v115 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_100075028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 32 * a3;
    while (2)
    {
      v7 = v5 + 32 * v4;
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      v10 = a1;
      v19 = v6;
      do
      {
        v11 = *(_QWORD *)(v6 - 16);
        v12 = *(_QWORD *)(v6 - 8);
        swift_bridgeObjectRetain_n(v8, 2);
        swift_bridgeObjectRetain_n(v9, 2);
        swift_bridgeObjectRetain_n(v11, 2);
        swift_bridgeObjectRetain_n(v12, 2);
        sub_1000F0380();
        v14 = v13;
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease_n(v8, 2);
        swift_bridgeObjectRelease_n(v12, 2);
        swift_bridgeObjectRelease_n(v11, 2);
        if (v14)
          break;
        if (!v5)
        {
          __break(1u);
          return;
        }
        v8 = *(_QWORD *)(v6 + 16);
        v9 = *(_QWORD *)(v6 + 24);
        v15 = *(_OWORD *)v6;
        v16 = *(_OWORD *)(v6 - 16);
        *(_OWORD *)v6 = *(_OWORD *)(v6 - 32);
        *(_OWORD *)(v6 + 16) = v16;
        *(_QWORD *)(v6 - 16) = v8;
        *(_QWORD *)(v6 - 8) = v9;
        *(_OWORD *)(v6 - 32) = v15;
        v6 -= 32;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v6 = v19 + 32;
      if (v4 != a2)
        continue;
      break;
    }
  }
}

uint64_t sub_10007515C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  __int128 v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  char *v32;
  BOOL v33;
  __int128 v34;
  BOOL v36;
  char *v38;
  unint64_t v39;
  char *v40;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    sub_100078D8C(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_42;
    v38 = v4;
    v25 = (char *)(a3 - 32);
    while (1)
    {
      v40 = v25 + 32;
      v26 = *(_QWORD *)(v12 - 16);
      v27 = *(_QWORD *)(v12 - 8);
      v28 = *((_QWORD *)v6 - 2);
      v29 = *((_QWORD *)v6 - 1);
      swift_bridgeObjectRetain_n(v26, 2);
      swift_bridgeObjectRetain_n(v27, 2);
      swift_bridgeObjectRetain_n(v28, 2);
      swift_bridgeObjectRetain_n(v29, 2);
      sub_1000F0380();
      v31 = v30;
      swift_bridgeObjectRelease_n(v27, 2);
      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease_n(v29, 2);
      swift_bridgeObjectRelease_n(v28, 2);
      if (v31)
      {
        v32 = (char *)(v12 - 32);
        v33 = v40 != (char *)v12 || (unint64_t)v25 >= v12;
        v12 -= 32;
        if (!v33)
          goto LABEL_32;
      }
      else
      {
        v32 = v6 - 32;
        v36 = v40 != v6 || v25 >= v6;
        v6 -= 32;
        if (!v36)
          goto LABEL_32;
      }
      v34 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v25 = *(_OWORD *)v32;
      *((_OWORD *)v25 + 1) = v34;
LABEL_32:
      v25 -= 32;
      if (v12 <= (unint64_t)v38 || v6 <= v7)
      {
        v4 = v38;
        goto LABEL_42;
      }
    }
  }
  sub_100078D8C(a1, (a2 - a1) / 32, a4);
  v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    v39 = a3;
    do
    {
      v13 = *((_QWORD *)v6 + 2);
      v14 = *((_QWORD *)v6 + 3);
      v15 = v4;
      v16 = *((_QWORD *)v4 + 2);
      v17 = *((_QWORD *)v4 + 3);
      swift_bridgeObjectRetain_n(v13, 2);
      swift_bridgeObjectRetain_n(v14, 2);
      swift_bridgeObjectRetain_n(v16, 2);
      swift_bridgeObjectRetain_n(v17, 2);
      sub_1000F0380();
      v19 = v18;
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease_n(v16, 2);
      if (v19)
      {
        v20 = v15;
        v4 = v15 + 32;
        v21 = v7 != v15 || v7 >= v4;
      }
      else
      {
        v22 = v7 == v6;
        v20 = v6;
        v6 += 32;
        v21 = !v22 || v7 >= v6;
        v4 = v15;
      }
      if (v21)
      {
        v23 = *((_OWORD *)v20 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v20;
        *((_OWORD *)v7 + 1) = v23;
      }
      v7 += 32;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < v39);
  }
  v6 = v7;
LABEL_42:
  sub_100078D8C(v4, (uint64_t)(v12 - (_QWORD)v4) / 32, v6);
  return 1;
}

BOOL sub_100075404(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_1000745D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *a2, a2[1], *a3, a3[1]);
}

BOOL sub_100075438(uint64_t a1)
{
  uint64_t v1;

  return sub_100075404(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_100075454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectedDevices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075498(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConnectedDevices(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for ConnectionMessage(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ConnectionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ConnectionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for ConnectionMessage(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMessage()
{
  return &type metadata for ConnectionMessage;
}

uint64_t sub_1000756E8(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 152) = a1;
  *v1 = *(_OWORD *)(v3 - 352);
  return swift_bridgeObjectRetain(*(_QWORD *)(v2 + 8));
}

uint64_t sub_10007573C()
{
  uint64_t v0;
  uint64_t v1;

  *(_WORD *)(v0 + 12) = 2082;
  *(_QWORD *)(v1 - 200) = v0 + 14;
  return swift_beginAccess(v1 - 120, v1 - 176, 0, 0);
}

uint64_t sub_1000757B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 176, v3 - 168, v2, v1 + 12);
}

uint64_t sub_1000757CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 296));
}

uint64_t sub_1000757DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 184, v2 - 176, *(_QWORD *)(v2 - 200), v1 + 22);
}

uint64_t sub_1000757F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 152));
}

uint64_t sub_10007580C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return sub_10007318C(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_100075820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ArraySlice.description.getter(a1, v2, v3, v1);
}

uint64_t sub_100075830()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 152));
}

BOOL sub_100075840(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100075850()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100075858()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100075868()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100075878()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 - 120));
}

uint64_t sub_100075888()
{
  uint64_t v0;

  return sub_100075498(v0);
}

uint64_t sub_100075890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100075454(a1, *(_QWORD *)(a2 - 256));
}

void sub_10007589C(char *key, int a2, char a3, xpc_object_t xdict, uint64_t (*a5)(void))
{
  xpc_type_t v6;

  if ((a3 & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!key)
  {
LABEL_8:
    __break(1u);
    return;
  }
  if (xpc_dictionary_get_value(xdict, key))
  {
    sub_100008904();
    v6 = OS_xpc_object.type.getter();
    if (v6 != (xpc_type_t)a5())
      sub_10000F718();
  }
  sub_10000B350();
}

void *ECXPCDictionaryRepresentable.subscript.getter@<X0>(const char *a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  void *result;
  xpc_object_t v13;

  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  if ((a2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v13 = xpc_dictionary_get_value(result, a1);
  sub_10000F718();
  if (v13)
    return (void *)(*(uint64_t (**)(xpc_object_t, uint64_t, uint64_t))(a6 + 8))(v13, a4, a6);
  else
    return (void *)_s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a7, 1, 1, a4);
}

uint64_t ECXPCDictionaryRepresentable.subscript.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_10002626C();
  v24 = v0;
  v25 = v1;
  v23 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = type metadata accessor for Optional(0, v5);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - v17;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!v12)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v20 = (void *)result;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v14, v15);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v21 = 0;
  }
  else
  {
    v21 = (void *)(*(uint64_t (**)(uint64_t))(v23 + 16))(v6);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v18, v6);
  }
  xpc_dictionary_set_value(v20, v12, v21);
  swift_unknownObjectRelease(v20);
  sub_10000F718();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
}

void ECXPCDictionaryRepresentable.subscript.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  sub_10002626C();
  v9 = sub_10007955C();
  *v8 = v9;
  v9[5] = v0;
  v9[6] = v1;
  v9[3] = v3;
  v9[4] = v2;
  v9[1] = v6;
  v9[2] = v4;
  *((_BYTE *)v9 + 88) = v5;
  *v9 = v7;
  v10 = type metadata accessor for Optional(0, v3);
  v9[9] = sub_1000795B0(v10);
  v11 = sub_1000797D0();
  v9[10] = v11;
  ECXPCDictionaryRepresentable.subscript.getter(v7, v5, v4, v3, v2, v0, (uint64_t)v11);
  sub_10000E4E0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = sub_100079584();
  *v6 = v7;
  v7[4] = v0;
  v7[5] = v1;
  v7[2] = v4;
  v7[3] = v2;
  *((_BYTE *)v7 + 48) = v3;
  v7[1] = v5;
  ECXPCDictionaryRepresentable.subscript.getter(v5, v8, v3, v2, v0);
  *v7 = v9;
  sub_10002D8A4();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100079584();
  v2 = sub_1000795C8((uint64_t)v1);
  ECXPCDictionaryRepresentable.subscript.getter(v2, v3, v4, v5, v6);
  *v0 = v7;
  sub_10002D8A4();
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100079584();
  v2 = sub_1000795C8((uint64_t)v1);
  *v0 = ECXPCDictionaryRepresentable.subscript.getter(v2, v3, v4, v5, v6);
  sub_10002D8A4();
}

void sub_100075B98(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    sub_1000798B4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    ECXPCDictionaryRepresentable.subscript.setter();
    sub_10007991C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  }
  else
  {
    sub_10007987C();
  }
  free(v4);
  free(v3);
  sub_100079620(v2);
}

const char *sub_100075C40(const char *key, int a2, char a3, xpc_object_t xdict)
{
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else if (key)
  {
    return (const char *)xpc_dictionary_get_value(xdict, key);
  }
  __break(1u);
  return key;
}

void ECXPCDictionaryRepresentable.subscript.getter(const char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  id v8;

  v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else if (a1)
  {
    v8 = xpc_dictionary_get_value(v7, a1);
    sub_100012644();
    sub_10000B350();
    return;
  }
  __break(1u);
}

uint64_t sub_100075CD0(uint64_t result, const char *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;

  if ((a4 & 1) != 0)
  {
    __break(1u);
  }
  else if (a2)
  {
    v6 = result;
    v7 = (void *)swift_unknownObjectRetain(a5);
    sub_100079844(v7, a2);
    sub_10000F718();
    return sub_1000797C4(v6);
  }
  __break(1u);
  return result;
}

void *ECXPCDictionaryRepresentable.subscript.setter(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  void *result;

  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a5, a6);
  if ((a4 & 1) != 0)
  {
    __break(1u);
  }
  else if (a2)
  {
    sub_100079844(result, a2);
    sub_10000F718();
    return (void *)sub_1000797C4(a1);
  }
  __break(1u);
  return result;
}

void sub_100075DD4(uint64_t **a1, uint64_t a2)
{
  sub_100077070(a1, a2, (uint64_t)ECXPCDictionaryRepresentable.subscript.setter, (uint64_t (*)(uint64_t))&_swift_unknownObjectRetain, (void (*)(uint64_t))&_swift_unknownObjectRelease);
}

void sub_100075DF0(char *a1, int a2, char a3, void *a4, uint64_t a5, void (*a6)(char *__return_ptr, __n128))
{
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t inited;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[40];
  _BYTE v38[32];

  sub_10007589C(a1, a2, a3, a4, (uint64_t (*)(void))&XPC_TYPE_ARRAY.getter);
  if (v8)
  {
    v9 = v8;
    xpc_array_get_count(v8);
    sub_100079988();
    v11 = v10;
    v12 = sub_1000798EC();
    v13 = sub_1000088D8((uint64_t)&unk_100285460, 24);
    *(_QWORD *)(v13 + 16) = 0;
    v14 = (_QWORD *)sub_1000088D8(a5, 40);
    v14[2] = v13;
    v14[3] = v12;
    v14[4] = v9;
    v15 = sub_1000055B0(&qword_1002ACD70);
    inited = swift_initStackObject(v15, v38);
    *(_QWORD *)(inited + 16) = a6;
    *(_QWORD *)(inited + 24) = v14;
    swift_unknownObjectRetain(v9);
    v17 = swift_retain();
    a6(v37, v17);
    if (*(_QWORD *)v37)
    {
      while (1)
      {
        sub_100008904();
        OS_xpc_object.xpcconstructable.getter((uint64_t)&v33);
        if (!v35)
          break;
        v18 = sub_100025A50(&v33, (uint64_t)v37);
        sub_100079934(v18, v19, v20, v21, v22, v23, v24, v25, v33, *((uint64_t *)&v33 + 1), v34, v35, v36, v37[0]);
        v26 = *(_QWORD *)(v11 + 16);
        if (v26 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          sub_1000797AC();
          v11 = v32;
        }
        *(_QWORD *)(v11 + 16) = v26 + 1;
        sub_100025A50(&v33, v11 + 40 * v26 + 32);
        sub_10000F718();
        v27 = sub_100005988(v37);
        sub_100079928(v27, v28, v29, v30, v31);
        if (!*(_QWORD *)v37)
          goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      sub_100043368();
      sub_100012644();
      sub_10000F718();
      sub_100079384((uint64_t)&v33);
    }
    else
    {
LABEL_7:
      sub_100012644();
      swift_release();
      swift_setDeallocating(inited);
      swift_release();
    }
  }
  sub_10007975C();
}

void ECXPCDictionaryRepresentable.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32[40];
  _BYTE v33[32];

  (*(void (**)(char *__return_ptr, uint64_t, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a5 + 16))(v32, a1, a2, a3, &type metadata for ECXPCArray, &protocol witness table for ECXPCArray, a4, a5);
  v5 = *(_QWORD *)v32;
  if (*(_QWORD *)v32)
  {
    sub_1000798EC();
    sub_100079988();
    v7 = v6;
    v8 = sub_1000798EC();
    v9 = sub_1000088D8((uint64_t)&unk_100285460, 24);
    *(_QWORD *)(v9 + 16) = 0;
    v10 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100285488, 40);
    v10[2] = v9;
    v10[3] = v8;
    v10[4] = v5;
    v11 = sub_1000055B0(&qword_1002ACD70);
    inited = swift_initStackObject(v11, v33);
    *(_QWORD *)(inited + 16) = sub_100077E4C;
    *(_QWORD *)(inited + 24) = v10;
    swift_unknownObjectRetain(v5);
    swift_retain();
    sub_100077E4C(v32);
    if (*(_QWORD *)v32)
    {
      while (1)
      {
        sub_100008904();
        OS_xpc_object.xpcconstructable.getter((uint64_t)&v28);
        if (!v30)
          break;
        v13 = sub_100025A50(&v28, (uint64_t)v32);
        sub_100079934(v13, v14, v15, v16, v17, v18, v19, v20, v28, *((uint64_t *)&v28 + 1), v29, v30, v31, v32[0]);
        v21 = *(_QWORD *)(v7 + 16);
        if (v21 >= *(_QWORD *)(v7 + 24) >> 1)
        {
          sub_1000797AC();
          v7 = v27;
        }
        *(_QWORD *)(v7 + 16) = v21 + 1;
        sub_100025A50(&v28, v7 + 40 * v21 + 32);
        sub_10000F718();
        v22 = sub_100005988(v32);
        sub_100079928(v22, v23, v24, v25, v26);
        if (!*(_QWORD *)v32)
          goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      sub_100043368();
      sub_100012644();
      sub_10000F718();
      sub_100079384((uint64_t)&v28);
    }
    else
    {
LABEL_7:
      sub_100012644();
      swift_release();
      swift_setDeallocating(inited);
      swift_release();
    }
  }
  sub_10007975C();
}

void OS_xpc_object.xpcconstructable.getter(uint64_t a1@<X8>)
{
  void *v1;
  xpc_type_t v3;
  BOOL value;
  uint64_t v5;
  void *v6;
  _UNKNOWN **v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  xpc_type_t v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;

  v3 = OS_xpc_object.type.getter();
  if ((xpc_type_t)XPC_TYPE_NULL.getter() == v3)
  {
    *(_QWORD *)(a1 + 24) = &type metadata for ECXPCNull;
    *(_QWORD *)(a1 + 32) = &protocol witness table for ECXPCNull;
    return;
  }
  if ((xpc_type_t)XPC_TYPE_BOOL.getter() == v3)
  {
    value = xpc_BOOL_get_value(v1);
    *(_QWORD *)(a1 + 24) = &type metadata for Bool;
    *(_QWORD *)(a1 + 32) = &protocol witness table for Bool;
    *(_BYTE *)a1 = value;
    return;
  }
  if ((xpc_type_t)XPC_TYPE_INT64.getter() == v3)
  {
    v5 = xpc_int64_get_value(v1);
    v6 = &type metadata for Int64;
    v7 = &protocol witness table for Int64;
LABEL_17:
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)a1 = v5;
    return;
  }
  if ((xpc_type_t)XPC_TYPE_UINT64.getter() == v3)
  {
    v5 = xpc_uint64_get_value(v1);
    v6 = &type metadata for UInt64;
    v7 = &protocol witness table for UInt64;
    goto LABEL_17;
  }
  if ((xpc_type_t)XPC_TYPE_DOUBLE.getter() == v3)
  {
    v8 = xpc_double_get_value(v1);
    *(_QWORD *)(a1 + 24) = &type metadata for Double;
    *(_QWORD *)(a1 + 32) = &protocol witness table for Double;
    *(double *)a1 = v8;
    return;
  }
  if ((xpc_type_t)XPC_TYPE_STRING.getter() == v3)
  {
    if (xpc_string_get_string_ptr(v1))
    {
      v9 = String.init(validatingUTF8:)();
      if (v10)
      {
        *(_QWORD *)(a1 + 24) = &type metadata for String;
        *(_QWORD *)(a1 + 32) = &protocol witness table for String;
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = v10;
        return;
      }
    }
    goto LABEL_24;
  }
  if ((xpc_type_t)XPC_TYPE_ARRAY.getter() == v3)
  {
    swift_unknownObjectRetain(v1);
    v11 = OS_xpc_object.type.getter();
    if (v11 != (xpc_type_t)XPC_TYPE_ARRAY.getter())
    {
      sub_10000F718();
LABEL_24:
      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    *(_QWORD *)(a1 + 24) = &type metadata for ECXPCArray;
    *(_QWORD *)(a1 + 32) = &protocol witness table for ECXPCArray;
    *(_QWORD *)a1 = v1;
  }
  else
  {
    if ((xpc_type_t)XPC_TYPE_DICTIONARY.getter() == v3)
    {
      v12 = &type metadata for ECXPCDictionary;
      v13 = &protocol witness table for ECXPCDictionary;
    }
    else
    {
      if ((xpc_type_t)XPC_TYPE_DATA.getter() != v3)
      {
        if ((xpc_type_t)XPC_TYPE_ERROR.getter() != v3 && (xpc_type_t)XPC_TYPE_CONNECTION.getter() != v3)
          XPC_TYPE_ENDPOINT.getter();
        goto LABEL_24;
      }
      v12 = &type metadata for ECXPCData;
      v13 = &protocol witness table for ECXPCData;
    }
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)a1 = v1;
    swift_unknownObjectRetain(v1);
  }
}

void sub_10007638C(uint64_t a1, const char *a2, uint64_t a3, char a4, void *a5)
{
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v9 = ECXPCArray.init()();
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = a1 + 32;
      do
      {
        sub_1000445C0(v11, (uint64_t)v15);
        v12 = v16;
        v13 = v17;
        sub_10000DBE4(v15, v16);
        v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
        xpc_array_append_value(v9, v14);
        sub_10000F718();
        sub_100005988(v15);
        v11 += 40;
        --v10;
      }
      while (v10);
    }
    swift_bridgeObjectRelease();
    if ((a4 & 1) != 0)
    {
      __break(1u);
    }
    else if (a2)
    {
      xpc_dictionary_set_value(a5, a2, v9);
      sub_100079914();
      return;
    }
    __break(1u);
  }
}

_QWORD *ECXPCDictionaryRepresentable.subscript.setter(_QWORD *result, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  char v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  if (result)
  {
    v10 = result;
    v11 = ECXPCArray.init()();
    v12 = v10[2];
    if (v12)
    {
      v18 = a4;
      v13 = (uint64_t)(v10 + 4);
      do
      {
        sub_1000445C0(v13, (uint64_t)v19);
        v15 = v20;
        v14 = v21;
        sub_10000DBE4(v19, v20);
        v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
        xpc_array_append_value(v11, v16);
        sub_10000F718();
        sub_100005988(v19);
        v13 += 40;
        --v12;
      }
      while (v12);
      v17 = swift_bridgeObjectRelease();
      a4 = v18;
    }
    else
    {
      v17 = swift_bridgeObjectRelease();
    }
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 8))(a5, a6, v17);
    if ((a4 & 1) != 0)
    {
      __break(1u);
    }
    else if (a2)
    {
      xpc_dictionary_set_value(result, a2, v11);
      swift_unknownObjectRelease(v11);
      return (_QWORD *)sub_10000F718();
    }
    __break(1u);
  }
  return result;
}

void sub_1000765D8(uint64_t **a1, uint64_t a2)
{
  sub_100077070(a1, a2, (uint64_t)ECXPCDictionaryRepresentable.subscript.setter, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000765F4(char *a1, int a2, char a3, void *a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  void *v12;

  sub_10007589C(a1, a2, a3, a4, (uint64_t (*)(void))&XPC_TYPE_DICTIONARY.getter);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v12 = &_swiftEmptyDictionarySingleton;
  v6 = swift_allocObject(&unk_1002855F0, 24, 7);
  *(_QWORD *)(v6 + 16) = &v12;
  v7 = swift_allocObject(&unk_100285618, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000794D4;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000794F8;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076A70;
  aBlock[3] = &unk_100285630;
  v8 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v5);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  swift_unknownObjectRelease_n(v5, 2);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 102, 74, 51, 1);
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v5 = v12;
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007674C(char *a1, int a2, char a3, void *a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  void *v12;

  sub_10007589C(a1, a2, a3, a4, (uint64_t (*)(void))&XPC_TYPE_DICTIONARY.getter);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v12 = &_swiftEmptyDictionarySingleton;
  v6 = swift_allocObject(&unk_100285550, 24, 7);
  *(_QWORD *)(v6 + 16) = &v12;
  v7 = swift_allocObject(&unk_100285578, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1000794D4;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000794F8;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076A70;
  aBlock[3] = &unk_100285590;
  v8 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v5);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  swift_unknownObjectRelease_n(v5, 2);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 102, 74, 51, 1);
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v5 = v12;
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t ECXPCDictionaryRepresentable.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  void *v12;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a5 + 16))(aBlock, a1, a2, a3, &type metadata for ECXPCDictionary, &protocol witness table for ECXPCDictionary, a4, a5);
  v5 = (void *)aBlock[0];
  if (!aBlock[0])
    return (uint64_t)v5;
  v12 = &_swiftEmptyDictionarySingleton;
  v6 = sub_1000088D8((uint64_t)&unk_1002854B0, 24);
  *(_QWORD *)(v6 + 16) = &v12;
  v7 = sub_1000088D8((uint64_t)&unk_1002854D8, 32);
  *(_QWORD *)(v7 + 16) = sub_1000793D0;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1000793E4;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076A70;
  aBlock[3] = &unk_1002854F0;
  v8 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v5);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v5, v8);
  sub_10007990C((uint64_t)v5);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 102, 74, 51, 1);
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v5 = v12;
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100076A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[40];

  String.init(validatingUTF8:)();
  if (v3)
  {
    swift_getObjectType(a2);
    OS_xpc_object.xpcconstructable.getter((uint64_t)v5);
    sub_1000C29F0((uint64_t)v5);
  }
  return 1;
}

uint64_t sub_100076A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

void sub_100076AC0(uint64_t a1, const char *a2, uint64_t a3, char a4, void *a5)
{
  xpc_object_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36[3];

  if (!a1)
    return;
  v6 = ECXPCDictionary.init()();
  v7 = 0;
  v28 = a1 + 64;
  sub_100079778();
  v10 = v9 & v8;
  v29 = (unint64_t)(v11 + 63) >> 6;
  if ((v9 & v8) == 0)
    goto LABEL_5;
LABEL_3:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v13 = v12 | (v7 << 6);
LABEL_4:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v30 = *v15;
  *((_QWORD *)&v30 + 1) = v16;
  sub_1000445C0(v14 + 40 * v13, (uint64_t)&v31);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100079420((uint64_t)&v30, (uint64_t)&v34);
    v20 = v35;
    if (!v35)
      break;
    v21 = v34;
    sub_100025A50(v36, (uint64_t)&v30);
    v22 = *((_QWORD *)&v31 + 1);
    v23 = v32;
    sub_10000DBE4(&v30, *((uint64_t *)&v31 + 1));
    (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    v24 = String.utf8CString.getter(v21, v20);
    swift_bridgeObjectRelease();
    sub_100079844(v6, (const char *)(v24 + 32));
    sub_100012644();
    swift_release();
    sub_100005988(&v30);
    if (v10)
      goto LABEL_3;
LABEL_5:
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v17 < v29)
    {
      v18 = *(_QWORD *)(v28 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v7 + 2;
      ++v7;
      if (v17 + 1 < v29)
      {
        v18 = *(_QWORD *)(v28 + 8 * v19);
        if (v18)
          goto LABEL_11;
        v7 = v17 + 1;
        if (v17 + 2 < v29)
        {
          v18 = *(_QWORD *)(v28 + 8 * (v17 + 2));
          if (v18)
          {
            v17 += 2;
            goto LABEL_8;
          }
          v7 = v17 + 2;
          if (v17 + 3 < v29)
          {
            v18 = *(_QWORD *)(v28 + 8 * (v17 + 3));
            if (v18)
            {
              v17 += 3;
              goto LABEL_8;
            }
            v19 = v17 + 4;
            v7 = v17 + 3;
            if (v17 + 4 < v29)
            {
              v18 = *(_QWORD *)(v28 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v17 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    break;
                  if (v17 >= v29)
                  {
                    v7 = v29 - 1;
                    goto LABEL_25;
                  }
                  v18 = *(_QWORD *)(v28 + 8 * v17);
                  ++v19;
                  if (v18)
                    goto LABEL_8;
                }
LABEL_36:
                __break(1u);
                return;
              }
LABEL_11:
              v17 = v19;
LABEL_8:
              v10 = (v18 - 1) & v18;
              v13 = __clz(__rbit64(v18)) + (v17 << 6);
              v7 = v17;
              goto LABEL_4;
            }
          }
        }
      }
    }
LABEL_25:
    v10 = 0;
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
  }
  sub_10000B364();
  if ((a4 & 1) != 0)
    goto LABEL_34;
  if (!a2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  xpc_dictionary_set_value(a5, a2, v6);
  swift_unknownObjectRelease(v6);
}

void ECXPCDictionaryRepresentable.subscript.setter(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v31;
  int64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39[3];

  if (!a1)
    return;
  v7 = ECXPCDictionary.init()();
  v8 = 0;
  v31 = a1 + 64;
  sub_100079778();
  v11 = v10 & v9;
  v32 = (unint64_t)(v12 + 63) >> 6;
  if ((v10 & v9) == 0)
    goto LABEL_5;
LABEL_3:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v14 = v13 | (v8 << 6);
LABEL_4:
  v15 = *(_QWORD *)(a1 + 56);
  v16 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14);
  v17 = v16[1];
  *(_QWORD *)&v33 = *v16;
  *((_QWORD *)&v33 + 1) = v17;
  sub_1000445C0(v15 + 40 * v14, (uint64_t)&v34);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100079420((uint64_t)&v33, (uint64_t)&v37);
    v21 = v38;
    if (!v38)
      break;
    v22 = v37;
    sub_100025A50(v39, (uint64_t)&v33);
    v24 = *((_QWORD *)&v34 + 1);
    v23 = v35;
    sub_10000DBE4(&v33, *((uint64_t *)&v34 + 1));
    (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
    v25 = String.utf8CString.getter(v22, v21);
    swift_bridgeObjectRelease();
    sub_100079844(v7, (const char *)(v25 + 32));
    sub_100012644();
    swift_release();
    sub_100005988(&v33);
    if (v11)
      goto LABEL_3;
LABEL_5:
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v18 < v32)
    {
      v19 = *(_QWORD *)(v31 + 8 * v18);
      if (v19)
        goto LABEL_8;
      v20 = v8 + 2;
      ++v8;
      if (v18 + 1 < v32)
      {
        v19 = *(_QWORD *)(v31 + 8 * v20);
        if (v19)
          goto LABEL_11;
        v8 = v18 + 1;
        if (v18 + 2 < v32)
        {
          v19 = *(_QWORD *)(v31 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_8;
          }
          v20 = v18 + 3;
          v8 = v18 + 2;
          if (v18 + 3 < v32)
          {
            v19 = *(_QWORD *)(v31 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v18 = v20 + 1;
                if (__OFADD__(v20, 1))
                  break;
                if (v18 >= v32)
                {
                  v8 = v32 - 1;
                  goto LABEL_22;
                }
                v19 = *(_QWORD *)(v31 + 8 * v18);
                ++v20;
                if (v19)
                  goto LABEL_8;
              }
LABEL_33:
              __break(1u);
              return;
            }
LABEL_11:
            v18 = v20;
LABEL_8:
            v11 = (v19 - 1) & v19;
            v14 = __clz(__rbit64(v19)) + (v18 << 6);
            v8 = v18;
            goto LABEL_4;
          }
        }
      }
    }
LABEL_22:
    v11 = 0;
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
  }
  swift_release();
  v26 = (void *)(*(uint64_t (**)(uint64_t))(a6 + 8))(a5);
  if ((a4 & 1) != 0)
    goto LABEL_31;
  if (!a2)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  xpc_dictionary_set_value(v26, a2, v7);
  swift_unknownObjectRelease(v7);
  sub_10000F718();
}

void sub_100077054(uint64_t **a1, uint64_t a2)
{
  sub_100077070(a1, a2, (uint64_t)ECXPCDictionaryRepresentable.subscript.setter, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

void sub_100077070(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v6 = **a1;
  if ((a2 & 1) != 0)
  {
    v8 = a4(v6);
    sub_1000797EC(v8, v9, v10);
    a5(*v5);
  }
  else
  {
    sub_1000797EC(v6, a2, a3);
  }
  sub_100079700(v5);
}

uint64_t ECXPCDictionaryRepresentable.array<A>(forKey:)()
{
  void (*v0)(uint64_t *__return_ptr);
  uint64_t v1;
  uint64_t v3;

  sub_1000798C4();
  v0(&v3);
  if (!v3)
    return 0;
  v1 = sub_1000798F4(v3);
  sub_10000F718();
  return v1;
}

uint64_t ECXPCDictionaryRepresentable.arrayOfArray<A>(forKey:)()
{
  void (*v0)(void **__return_ptr);
  void *v1;
  size_t count;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  xpc_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  sub_1000798C4();
  v0(&v16);
  v1 = v16;
  if (v16)
  {
    type metadata accessor for Array(0);
    v15 = Array.init()();
    count = xpc_array_get_count(v1);
    v3 = type metadata accessor for Array(0);
    Array.reserveCapacity(_:)(count);
    v4 = xpc_array_get_count(v1);
    v5 = sub_1000088D8((uint64_t)&unk_100285460, 24);
    *(_QWORD *)(v5 + 16) = 0;
    v6 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100285528, 40);
    v6[2] = v5;
    v6[3] = v4;
    v6[4] = v1;
    v7 = sub_1000055B0(&qword_1002ACD70);
    inited = swift_initStackObject(v7, &v14);
    *(_QWORD *)(inited + 16) = sub_1000794D8;
    *(_QWORD *)(inited + 24) = v6;
    swift_unknownObjectRetain(v1);
    swift_retain();
    sub_100077E4C(&v16);
    while (1)
    {
      v9 = (uint64_t)v16;
      if (!v16)
      {
        sub_100079914();
        sub_10000B364();
        swift_setDeallocating(inited);
        swift_release();
        return v15;
      }
      swift_getObjectType(v16);
      swift_unknownObjectRetain(v9);
      v10 = OS_xpc_object.type.getter();
      if (v10 != (xpc_type_t)XPC_TYPE_ARRAY.getter())
        break;
      v11 = sub_1000798F4(v9);
      if (!v11)
        break;
      v16 = (void *)v11;
      Array.append(_:)(&v16, v3);
      v12 = sub_10007990C(v9);
      (*(void (**)(void **__return_ptr, uint64_t))(inited + 16))(&v16, v12);
    }
    sub_10000B364();
    sub_100079914();
    sub_10007990C(v9);
    swift_setDeallocating(inited);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return 0;
}

void sub_100077318()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  sub_10002626C();
  v1 = sub_10007955C();
  v2 = sub_100079664((uint64_t)v1);
  *(_QWORD *)(v0 + 72) = sub_1000795B0(v2);
  v3 = sub_1000797D0();
  sub_10007963C((uint64_t)v3);
  sub_10000E4E0();
}

void sub_10007735C()
{
  const char **v0;
  void *v1;

  v1 = sub_10007953C();
  *v0 = sub_1000795F8((uint64_t)v1);
  sub_10002644C();
}

void sub_100077390(uint64_t **a1, char a2)
{
  sub_100077438(a1, a2, (uint64_t)sub_100075CD0, (uint64_t (*)(uint64_t))&_swift_unknownObjectRetain, (void (*)(uint64_t))&_swift_unknownObjectRelease);
}

void sub_1000773AC(char *a1, int a2, char a3)
{
  void **v3;

  sub_100075DF0(a1, a2, a3, *v3, (uint64_t)&unk_100285668, (void (*)(char *__return_ptr, __n128))sub_1000794D8);
}

void sub_1000773D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = sub_10007953C();
  v2 = sub_100079800((uint64_t)v1);
  sub_1000798A4(v2, v3, v4, v5, (uint64_t)&unk_100285668, (void (*)(char *__return_ptr, __n128))sub_1000794D8);
  *v0 = v6;
  sub_10002644C();
}

void sub_10007741C(uint64_t **a1, char a2)
{
  sub_100077438(a1, a2, (uint64_t)sub_10007638C, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

void sub_100077438(uint64_t **a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *a1;
  v6 = **a1;
  if ((a2 & 1) != 0)
  {
    v8 = a4(v6);
    sub_10007981C(v8);
    a5(*v5);
  }
  else
  {
    sub_10007981C(v6);
  }
  sub_100079700(v5);
}

uint64_t sub_100077490(char *a1, int a2, char a3)
{
  void **v3;

  return sub_1000765F4(a1, a2, a3, *v3);
}

void sub_100077498()
{
  uint64_t *v0;
  void *v1;
  char *v2;
  int v3;
  char v4;
  void *v5;

  v1 = sub_10007953C();
  v2 = (char *)sub_100079714((uint64_t)v1);
  *v0 = sub_1000765F4(v2, v3, v4, v5);
  sub_10002644C();
}

void sub_1000774D0(uint64_t **a1, char a2)
{
  sub_100077438(a1, a2, (uint64_t)sub_100076AC0, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
}

void sub_1000774F4(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    sub_1000798B4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    ECXPCDictionaryRepresentable.subscript.setter();
    sub_10007991C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  }
  else
  {
    sub_10007987C();
  }
  free(v4);
  free(v3);
  sub_100079620(v2);
}

const char *sub_10007759C(const char *a1, int a2, char a3)
{
  xpc_object_t *v3;

  return sub_100075C40(a1, a2, a3, *v3);
}

uint64_t sub_1000775B4(uint64_t a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t *v4;

  return sub_100075CD0(a1, a2, a3, a4, *v4);
}

void sub_1000775CC(char *a1, int a2, char a3)
{
  void **v3;

  sub_100075DF0(a1, a2, a3, *v3, (uint64_t)&unk_1002855C8, (void (*)(char *__return_ptr, __n128))sub_1000794D8);
}

void sub_1000775F4(uint64_t a1, const char *a2, uint64_t a3, char a4)
{
  void **v4;

  sub_10007638C(a1, a2, a3, a4, *v4);
}

void sub_10007760C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = sub_10007953C();
  v2 = sub_100079800((uint64_t)v1);
  sub_1000798A4(v2, v3, v4, v5, (uint64_t)&unk_1002855C8, (void (*)(char *__return_ptr, __n128))sub_1000794D8);
  *v0 = v6;
  sub_10002644C();
}

uint64_t sub_100077654(char *a1, int a2, char a3)
{
  void **v3;

  return sub_10007674C(a1, a2, a3, *v3);
}

void sub_10007765C(uint64_t a1, const char *a2, uint64_t a3, char a4)
{
  void **v4;

  sub_100076AC0(a1, a2, a3, a4, *v4);
}

void sub_100077674()
{
  uint64_t *v0;
  void *v1;
  char *v2;
  int v3;
  char v4;
  void *v5;

  v1 = sub_10007953C();
  v2 = (char *)sub_100079714((uint64_t)v1);
  *v0 = sub_10007674C(v2, v3, v4, v5);
  sub_10002644C();
}

void sub_1000776AC()
{
  sub_1000776E4();
}

void sub_1000776C8()
{
  sub_1000776E4();
}

void sub_1000776E4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  sub_100079940();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10006D248(v2, v3, v4, v5, v6);
    v13 = (_QWORD *)sub_1000088D8(v12, 16 * v11 + 32);
    j__malloc_size(v13);
    sub_100079960();
    v13[2] = v10;
    v13[3] = v14;
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_100079954();
    sub_1000795A4();
  }
  else
  {
    sub_10007984C(v2, v3, (uint64_t)(v13 + 4));
  }
  sub_10002644C();
}

void sub_100077780()
{
  sub_100077794();
}

void sub_100077794()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  sub_1000798DC();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10006D248(v2, v3, v4, v5, v6);
    v13 = (char *)sub_1000088D8(v12, 16 * v11 + 32);
    j__malloc_size(v13);
    sub_100079960();
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = v14;
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_100078BF0((char *)(v0 + 32), v10, v13 + 32);
    sub_1000795A4();
  }
  else
  {
    v15 = sub_100079798();
    sub_100078A78(v15, v16, v17, v18, v19);
  }
  sub_10002644C();
}

void sub_10007783C()
{
  sub_10007789C();
}

uint64_t sub_100077858()
{
  return sub_100077BB0();
}

void sub_10007786C()
{
  sub_100077794();
}

void sub_100077880()
{
  sub_10007789C();
}

void sub_10007789C()
{
  uint64_t v0;
  char v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_100079940();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10006D248(v2, v3, v4, v5, v6);
    v13 = (_QWORD *)sub_1000088D8(v12, 32 * v11 + 32);
    v2 = j__malloc_size(v13);
    v13[2] = v10;
    v13[3] = 2 * ((uint64_t)(v2 - 32) / 32);
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_100079954();
    sub_1000795A4();
  }
  else
  {
    sub_10007984C(v2, v3, (uint64_t)(v13 + 4));
  }
  sub_10002644C();
}

void sub_100077944()
{
  sub_1000776E4();
}

void sub_100077960(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v5)
  {
    v10 = sub_1000055B0(&qword_1002AC8F8);
    v11 = (char *)sub_1000088D8(v10, 8 * v5 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_100078D38((char *)(a4 + 32), v4, v11 + 32);
    sub_1000795A4();
  }
  else
  {
    v13 = sub_10007986C();
    sub_100078350(v13, v14, v15, v16);
  }
  sub_10000B350();
}

void sub_100077A14(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v5)
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002AC110);
    v11 = (char *)sub_1000088D8(v10, 24 * v5 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_100078ED0((char *)(a4 + 32), v4, v11 + 32);
    sub_1000795A4();
  }
  else
  {
    v13 = sub_10007986C();
    sub_100078464(v13, v14, v15, v16);
  }
  sub_10002644C();
}

void sub_100077ACC()
{
  sub_1000776E4();
}

void sub_100077AE8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v5)
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002ACD90);
    v11 = (char *)sub_1000088D8(v10, 17 * v5 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 17);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  if ((a1 & 1) != 0)
  {
    sub_100078DE0((char *)(a4 + 32), v4, v11 + 32);
    sub_1000795A4();
  }
  else
  {
    v13 = sub_10007986C();
    sub_100078670(v13, v14, v15, v16);
  }
  sub_10000B350();
}

uint64_t sub_100077B9C()
{
  return sub_100077BB0();
}

uint64_t sub_100077BB0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t result;
  const char *v29;
  uint64_t v30;

  sub_1000798DC();
  if ((v5 & 1) != 0)
  {
    sub_10006D0CC();
    if (v9 != v10)
    {
      sub_10006D164();
      if (v9)
      {
        __break(1u);
LABEL_23:
        sub_10006D098();
        v29 = "Division by zero";
        v30 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v13 = sub_10006D248(v3, v4, v5, v6, v7);
  v14 = *(_QWORD *)(v1(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_23;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    sub_10006D098();
    v29 = "Division results in an overflow";
    v30 = 31;
    goto LABEL_25;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_18:
  v21 = *(unsigned __int8 *)(*(_QWORD *)(v1(0) - 8) + 80);
  v22 = (v21 + 32) & ~v21;
  if ((v2 & 1) != 0)
  {
    sub_100078FA4(v0 + v22, v11);
    sub_1000795A4();
  }
  else
  {
    v23 = sub_100079798();
    sub_100078764(v23, v24, v25, v26, v27);
  }
  return (uint64_t)v18;
}

void sub_100077D3C()
{
  sub_100077D88();
}

void sub_100077D50()
{
  sub_1000776E4();
}

void sub_100077D6C()
{
  sub_1000776E4();
}

void sub_100077D88()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  sub_1000798DC();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v8 != v9)
    {
      sub_10006D164();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_10006D248(v2, v3, v4, v5, v6);
    v13 = (char *)sub_1000088D8(v12, 40 * v11 + 32);
    v14 = j__malloc_size(v13);
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  if ((v1 & 1) != 0)
  {
    sub_1000792F8((char *)(v0 + 32), v10, v13 + 32);
    sub_1000795A4();
  }
  else
  {
    v15 = sub_100079798();
    sub_100078B30(v15, v16, v17, v18, v19);
  }
  sub_10002644C();
}

uint64_t sub_100077E3C()
{
  uint64_t v0;

  return sub_100079554(v0, 24);
}

uint64_t sub_100077E4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000869AC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_100077E58()
{
  sub_100077D88();
}

uint64_t sub_100077E6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100077F60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    sub_1000055B0(&qword_1002ACDD8);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078074(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078168(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10007825C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078350(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    sub_1000055B0(&qword_1002AA570);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078464(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1000055B0((uint64_t *)&unk_1002ACDC0);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100078580(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 16 * a1 + 32);
  v7 = &__dst[16 * v4];
  if (v6 >= v7 || &v6[16 * v4] <= __dst)
  {
    memcpy(__dst, v6, 16 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100078670(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  size_t v7;
  char *v8;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 17 * a1 + 32);
  v7 = 17 * v4;
  v8 = &__dst[v7];
  if (v6 >= &__dst[v7] || &v6[v7] <= __dst)
  {
    memcpy(__dst, v6, v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10006D098();
    sub_10006D0F8();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3, v12);
    sub_10000E410();
    return v14;
  }
  sub_10006D098();
  sub_10006D0E8();
LABEL_11:
  result = sub_10006D0DC(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

uint64_t sub_100078850(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    sub_1000055B0((uint64_t *)&unk_1002ACDA0);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100078964(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    sub_1000055B0(&qword_1002AC898);
    swift_arrayInitWithCopy(a3, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100078A78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10006D098();
    sub_10006D0F8();
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  if (v6 >= a3 + 16 * v5 || v6 + 16 * v5 <= a3)
  {
    sub_10006D248(a1, a2, a3, a4, a5);
    sub_100079830();
    sub_10000E410();
    sub_1000797D8();
    return;
  }
  sub_10006D098();
  sub_10006D0E8();
LABEL_11:
  sub_10006D0DC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
}

void sub_100078B30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10006D098();
    sub_10006D0F8();
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  if (v6 >= a3 + 40 * v5 || v6 + 40 * v5 <= a3)
  {
    sub_10006D248(a1, a2, a3, a4, a5);
    sub_100079830();
    sub_10000E410();
    sub_1000797D8();
    return;
  }
  sub_10006D098();
  sub_10006D0E8();
LABEL_11:
  sub_10006D0DC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
}

char *sub_100078BF0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

void sub_100078C44(uint64_t a1, uint64_t a2)
{
  sub_100078FA4(a1, a2);
}

char *sub_100078C50(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100078CAC(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_100078D38(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100078D8C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100078DE0(char *__src, uint64_t a2, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    __src = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (__dst != __src || &__src[17 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 17 * a2);
  }
  return __src;
}

void sub_100078E40(uint64_t a1, uint64_t a2)
{
  sub_100078FA4(a1, a2);
}

char *sub_100078E4C(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100078ED0(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100078F2C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

void sub_100078F80(uint64_t a1, uint64_t a2)
{
  sub_1000790A8(a1, a2);
}

void sub_100078F8C(uint64_t a1, uint64_t a2)
{
  sub_100078FA4(a1, a2);
}

void sub_100078F98(uint64_t a1, uint64_t a2)
{
  sub_100078FA4(a1, a2);
}

void sub_100078FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_100079524();
    sub_10007950C((uint64_t)"Fatal error", v11, v12, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v13, v14, (uint64_t)"Swift/UnsafePointer.swift", v15, v16, v17, v18);
    __break(1u);
  }
  else
  {
    sub_10007988C();
    if (v5 && (v4(0), sub_100079974(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10000B338();
      }
      else
      {
        sub_1000796EC();
        sub_10007973C();
      }
    }
    else
    {
      v4(0);
      v7 = sub_1000796EC();
      sub_10007974C(v7, v8, v9, v10);
    }
  }
}

void sub_100079028(uint64_t a1, uint64_t a2)
{
  sub_1000790A8(a1, a2);
}

void sub_100079034(uint64_t a1, uint64_t a2)
{
  sub_1000790A8(a1, a2);
}

char *sub_100079040(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[72 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

void sub_10007909C(uint64_t a1, uint64_t a2)
{
  sub_1000790A8(a1, a2);
}

void sub_1000790A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_100079524();
    sub_10007950C((uint64_t)"Fatal error", v11, v12, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v13, v14, (uint64_t)"Swift/UnsafePointer.swift", v15, v16, v17, v18);
    __break(1u);
  }
  else
  {
    sub_10007988C();
    if (v5 && (sub_1000055B0(v4), sub_100079974(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_10000B338();
      }
      else
      {
        sub_1000796EC();
        sub_10007973C();
      }
    }
    else
    {
      sub_1000055B0(v4);
      v7 = sub_1000796EC();
      sub_10007974C(v7, v8, v9, v10);
    }
  }
}

char *sub_10007912C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[144 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100079188(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[96 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_1000791E4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[80 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_100079240(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[368 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_10007929C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

char *sub_1000792F8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_100079524();
    result = (char *)sub_10007950C((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000794FC(a3, result);
  }
  return result;
}

uint64_t sub_100079354()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_100079384(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002ACD78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000793C4()
{
  uint64_t v0;

  return sub_100079554(v0, 24);
}

uint64_t sub_1000793D0(uint64_t a1, uint64_t a2)
{
  return sub_100076A08(a1, a2);
}

uint64_t sub_1000793D8()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_1000793E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100079408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079418(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100079420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002ACD80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007946C()
{
  uint64_t v0;

  return sub_100079554(v0, 24);
}

uint64_t sub_100079478()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_100079488()
{
  uint64_t v0;

  return sub_100079554(v0, 24);
}

uint64_t sub_100079494()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_1000794A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void *sub_1000794FC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_10007950C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

void *sub_10007953C()
{
  return malloc(0x28uLL);
}

uint64_t sub_100079554(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7);
}

void *sub_10007955C()
{
  return malloc(0x60uLL);
}

void *sub_100079584()
{
  return malloc(0x38uLL);
}

uint64_t sub_1000795A4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000795B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 + 64) = v2;
  return malloc(*(_QWORD *)(v2 + 64));
}

uint64_t sub_1000795C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *v7 = a1;
  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 8) = v6;
  return v6;
}

const char *sub_1000795F8(uint64_t a1)
{
  char v1;
  void **v2;
  uint64_t v3;
  const char *v4;
  _QWORD *v5;
  void *v6;

  *v5 = a1;
  *(_BYTE *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  v6 = *v2;
  *(_QWORD *)(a1 + 24) = *v2;
  return sub_100075C40(v4, v3, v1, v6);
}

void sub_100079620(void *a1)
{
  free(a1);
}

void *sub_10007963C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  const char *v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 80) = a1;
  return ECXPCDictionaryRepresentable.subscript.getter(v6, v5, v2, v4, v1, v3, a1);
}

uint64_t sub_100079664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *v9 = a1;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v1;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 88) = v6;
  *(_QWORD *)a1 = v8;
  return type metadata accessor for Optional(0, v5);
}

uint64_t sub_10007968C()
{
  return ECXPCDictionaryRepresentable.array<A>(forKey:)();
}

uint64_t sub_1000796A4()
{
  return ECXPCDictionaryRepresentable.arrayOfArray<A>(forKey:)();
}

uint64_t sub_1000796BC()
{
  return ECXPCDictionaryRepresentable.subscript.setter();
}

void *sub_1000796D4@<X0>(const char *a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return ECXPCDictionaryRepresentable.subscript.getter(a1, a2, a5, a3, a6, a4, a7);
}

uint64_t sub_1000796EC()
{
  uint64_t v0;

  return v0;
}

void sub_100079700(void *a1)
{
  free(a1);
}

uint64_t sub_100079714(uint64_t a1)
{
  char v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *v5 = a1;
  *(_BYTE *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *v2;
  return v4;
}

uint64_t sub_10007973C()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_10007974C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_arrayInitWithTakeFrontToBack(a1, a2, a3, a4);
}

uint64_t sub_100079798()
{
  return 0;
}

void sub_1000797AC()
{
  sub_100077D88();
}

uint64_t sub_1000797C4(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

void *sub_1000797D0()
{
  size_t v0;

  return malloc(v0);
}

uint64_t sub_1000797EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return v3(a1, v7, a3, v6, v5, v4);
}

uint64_t sub_100079800(uint64_t result)
{
  char v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *v5 = result;
  *(_BYTE *)(result + 32) = v1;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = *v2;
  return result;
}

uint64_t sub_10007981C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return v1(a1, v5, v4, v3, v2);
}

uint64_t sub_100079830()
{
  uint64_t v0;
  uint64_t v1;

  return swift_arrayInitWithCopy(v0, v1);
}

void sub_100079844(void *a1, const char *a2)
{
  void *v2;

  xpc_dictionary_set_value(a1, a2, v2);
}

uint64_t sub_10007984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

xpc_object_t ECXPCDictionary.init()()
{
  return xpc_dictionary_create(0, 0, 0);
}

uint64_t sub_10007986C()
{
  return 0;
}

uint64_t sub_10007987C()
{
  return ECXPCDictionaryRepresentable.subscript.setter();
}

void sub_1000798A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(char *__return_ptr, __n128))
{
  char v6;
  int v7;
  char *v8;

  sub_100075DF0(v8, v7, v6, a4, a5, a6);
}

uint64_t sub_1000798B4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

size_t sub_1000798EC()
{
  void *v0;

  return xpc_array_get_count(v0);
}

uint64_t sub_1000798F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return ECXPCArray.typedArray<A>()(a1, v2, v1);
}

xpc_object_t ECXPCArray.init()()
{
  return xpc_array_create(0, 0);
}

uint64_t sub_10007990C(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2);
}

uint64_t sub_100079914()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10007991C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

_QWORD *sub_100079928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(v5 + 16))((uint64_t *)va);
}

uint64_t sub_100079934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_1000445C0((uint64_t)&a14, (uint64_t)&a9);
}

uint64_t sub_100079954()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

void sub_100079988()
{
  sub_100077D88();
}

uint64_t sub_100079994@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  unsigned __int8 v24;
  char v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  char v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  char v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[7];
  char v118;
  int v119;
  __int16 v120;
  _QWORD *v121;
  uint64_t v122;

  v2 = v1;
  v91 = a1;
  v115 = sub_1000055B0(&qword_1002ACDB0);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10003D69C();
  sub_100084E68();
  v5 = __chkstk_darwin(v4);
  v114 = (_OWORD *)((char *)&v89 - v6);
  __chkstk_darwin(v5);
  sub_100084E68();
  __chkstk_darwin(v7);
  sub_100026A8C();
  v94 = v8;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v1 + 120), 2);
  sub_100057E2C();
  v10 = v9;
  sub_10000E410();
  v122 = v10;
  sub_100036DCC(&v122);
  sub_10000E410();
  v90 = v122;
  sub_10000B2F8(v2 + 104, (uint64_t)&v122, 0);
  v11 = *(_QWORD *)(v2 + 104);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    v121 = _swiftEmptyArrayStorage;
    sub_1000103C0();
    sub_100058870();
    v14 = sub_100071A78(v11);
    if (v14 < 0 || (v17 = v14, v14 >= 1 << *(_BYTE *)(v11 + 32)))
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      v93 = v11 + 64;
      v18 = v16 & 1;
      v89 = v2;
      v92 = v11;
      while (((*(_QWORD *)(v93 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      {
        if (*(_DWORD *)(v11 + 36) != (_DWORD)v15)
          goto LABEL_33;
        v100 = v18;
        v102 = v15;
        v103 = v12;
        v19 = v94;
        v20 = (uint64_t)&v94[*(int *)(v115 + 48)];
        v21 = *(_QWORD *)(v11 + 48);
        v116 = *(_QWORD *)(v11 + 56);
        v22 = (char *)(v21 + 16 * v17);
        v23 = *v22;
        v24 = v22[1];
        LODWORD(v106) = v24;
        v25 = v22[2];
        v26 = v22[3];
        v27 = v22[4];
        LODWORD(v105) = v27;
        v28 = v22[5];
        LODWORD(v104) = v28;
        v29 = v22[6];
        v30 = v22[7];
        v31 = v22[8];
        v32 = v22[9];
        LODWORD(v112) = v32;
        v33 = v22[10];
        LODWORD(v111) = v33;
        v34 = v22[11];
        LODWORD(v110) = v34;
        v35 = v22[12];
        LODWORD(v109) = v35;
        v36 = v22[13];
        LODWORD(v108) = v36;
        v37 = v22[14];
        LODWORD(v107) = v37;
        LODWORD(v22) = v22[15];
        LODWORD(v113) = (_DWORD)v22;
        *v94 = v23;
        v19[1] = v24;
        v19[2] = v25;
        v19[3] = v26;
        v19[4] = v27;
        v19[5] = v28;
        v19[6] = v29;
        v19[7] = v30;
        v19[8] = v31;
        v19[9] = v32;
        v19[10] = v33;
        v19[11] = v34;
        v19[12] = v35;
        v19[13] = v36;
        v19[14] = v37;
        v19[15] = (_BYTE)v22;
        v38 = v17;
        v39 = (int *)type metadata accessor for DeviceSnapshot(0);
        v40 = *(_QWORD *)(*((_QWORD *)v39 - 1) + 72);
        v101 = v38;
        sub_10007F284(v116 + v40 * v38, v20);
        v41 = v95;
        *v95 = v23;
        v41[1] = v106;
        v41[2] = v25;
        v41[3] = v26;
        v41[4] = v105;
        v41[5] = v104;
        v41[6] = v29;
        v41[7] = v30;
        v41[8] = v31;
        v41[9] = v112;
        v41[10] = v111;
        v41[11] = v110;
        v41[12] = v109;
        v41[13] = v108;
        v41[14] = v107;
        v43 = v114;
        v42 = v115;
        v44 = (uint64_t)&v41[*(int *)(v115 + 48)];
        v41[15] = v113;
        sub_10007F284(v20, v44);
        sub_100084074((uint64_t)v41, (uint64_t)v43, &qword_1002ACDB0);
        sub_10000E36C((uint64_t)v19, &qword_1002ACDB0);
        v45 = *(int *)(v42 + 48);
        v46 = v96;
        v47 = (uint64_t)v96 + v45;
        *v96 = *v43;
        sub_10007F284((uint64_t)v43 + v45, (uint64_t)v46 + v45);
        v48 = UniversalControlDeviceID.description.getter(*(_QWORD *)v47, *(_QWORD *)(v47 + 8));
        v50 = *(_QWORD *)(v47 + v39[13]);
        if (v50 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_34;
        if (v50 > 0x7FFFFFFF)
          goto LABEL_35;
        v51 = v49;
        v112 = *(_QWORD *)(v47 + 24);
        v113 = v48;
        v52 = *(_QWORD *)(v47 + 32);
        v110 = *(_QWORD *)(v47 + 40);
        v111 = v52;
        v53 = *(_QWORD *)(v47 + 48);
        v54 = v39[12];
        v55 = v47 + v39[11];
        v56 = *(_QWORD *)v55;
        v57 = *(unsigned __int8 *)(v55 + 8);
        LODWORD(v116) = *(unsigned __int8 *)(v47 + 56);
        v58 = *(_QWORD *)(v47 + v54);
        v107 = *(_QWORD *)(v47 + 64);
        v108 = v58;
        swift_bridgeObjectRetain(v52);
        v109 = v53;
        sub_1000103C0();
        v59 = RPActivityLevelCopyDescription(v50);
        v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v105 = v60;

        v61 = RPStatusFlagsCopyDescription(*(_QWORD *)(v47 + v39[14]));
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v104 = v63;

        v64 = 2.0;
        if ((RapportActivityLevel.isUserActive.getter() & 1) == 0)
        {
          v65 = RapportActivityLevel.isScreenOn.getter();
          if ((_DWORD)v116)
            v66 = 1.0;
          else
            v66 = *(float *)"fff?";
          if ((v65 & 1) != 0)
            v64 = v66;
          else
            v64 = 0.0;
        }
        if (v57)
          v67 = 0;
        else
          v67 = v56;
        v97 = v67;
        v68 = sub_10007D9BC(v56, v57);
        v98 = v69;
        sub_10007F30C(v47);
        sub_10000E36C((uint64_t)v114, &qword_1002ACDB0);
        v13 = v121;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
        v11 = v92;
        v99 = v68;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100058870();
          v13 = v121;
        }
        v71 = v112;
        v72 = v13[2];
        if (v72 >= v13[3] >> 1)
        {
          sub_100058870();
          v13 = v121;
        }
        v73 = v57 ^ 1;
        if (!v56)
          v73 = 1;
        v118 = v57;
        v13[2] = v72 + 1;
        v74 = &v13[18 * v72];
        v74[4] = v113;
        v74[5] = v51;
        v75 = v111;
        v74[6] = v71;
        v74[7] = v75;
        v76 = v109;
        v74[8] = v110;
        v74[9] = v76;
        *((_BYTE *)v74 + 80) = v73;
        *((_BYTE *)v74 + 81) = v116;
        v77 = v120;
        *(_DWORD *)((char *)v74 + 82) = v119;
        *((_WORD *)v74 + 43) = v77;
        v78 = v108;
        v74[11] = v107;
        v74[12] = v78;
        v79 = v105;
        v74[13] = v106;
        v74[14] = v79;
        v80 = v104;
        v74[15] = v62;
        v74[16] = v80;
        *((float *)v74 + 34) = v64;
        v74[18] = v97;
        *((_BYTE *)v74 + 152) = v118;
        LODWORD(v80) = *(_DWORD *)v117;
        *((_DWORD *)v74 + 39) = *(_DWORD *)&v117[3];
        *(_DWORD *)((char *)v74 + 153) = v80;
        v81 = v98;
        v74[20] = v99;
        v74[21] = v81;
        v82 = sub_1000840F0(v101, v102, v100 & 1, v11);
        v17 = v82;
        v18 = v83 & 1;
        v12 = v103 - 1;
        if (v103 == 1)
        {
          sub_100025618(v82, v15, v18);
          sub_10000E410();
          v2 = v89;
          goto LABEL_30;
        }
        if (v82 < 0 || v82 >= 1 << *(_BYTE *)(v11 + 32))
          goto LABEL_31;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    result = swift_release(v122);
    __break(1u);
  }
  else
  {
LABEL_30:
    v84 = mach_continuous_time();
    v85 = *(_QWORD *)(v2 + 112);
    sub_100040544();
    v86 = sub_100105798();
    result = UniversalControlPreferences.disableNearbyInteraction.getter(v86);
    v88 = v91;
    *v91 = v90;
    v88[1] = v13;
    v88[2] = v84;
    v88[3] = v85;
    v88[4] = v86;
    *((_BYTE *)v88 + 40) = (result & 1) == 0;
  }
  return result;
}

void sub_10007A0A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)(v3 + 128);
  v5 = *(_QWORD *)(v3 + 136);
  v6 = *(_BYTE *)(v3 + 144);
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = a2;
  *(_BYTE *)(v3 + 144) = a3 & 1;
  sub_10007A290(v4, v5, v6);
}

uint64_t sub_10007A0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for DispatchTimeInterval(0);
  v0 = sub_100085024();
  return sub_100084F8C(v0, v1, v2, v3);
}

uint64_t sub_10007A0F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  *a1 = 0;
  type metadata accessor for DispatchTimeInterval(0);
  v1 = sub_100085024();
  return sub_100084F8C(v1, v2, v3, v4);
}

uint64_t sub_10007A128()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10000897C(v0, qword_1002ACE30);
  sub_100006FB4(v0, (uint64_t)qword_1002ACE30);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1129531716, 0xE400000000000000);
}

uint64_t sub_10007A190(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 112);
  sub_100040544();
  sub_100071340(a1, v4);
  sub_100085118();
  if ((v2 & 1) == 0)
  {
    sub_1000840B4((unint64_t *)&unk_1002B2960, v5, (uint64_t (*)(uint64_t))type metadata accessor for DiscoveryController, (uint64_t)&unk_10021F534);
    sub_100084FE4();
    ObservableObjectPublisher.send()();
    sub_10000B348();
    v6 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = a1;
    a1 = v6;
  }
  return sub_100084EF8(a1);
}

uint64_t sub_10007A210(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 120);
  sub_100040544();
  sub_100198A54(a1, v4);
  sub_100085118();
  if ((v2 & 1) == 0)
  {
    sub_1000840B4((unint64_t *)&unk_1002B2960, v5, (uint64_t (*)(uint64_t))type metadata accessor for DiscoveryController, (uint64_t)&unk_10021F534);
    sub_100084FE4();
    ObservableObjectPublisher.send()();
    sub_10000B348();
    v6 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = a1;
    a1 = v6;
  }
  return sub_100084EF8(a1);
}

void sub_10007A290(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((*(_BYTE *)(v3 + 144) & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return;
LABEL_6:
    sub_10007A2D4();
    return;
  }
  if ((a3 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v3 + 128), *(_QWORD *)(v3 + 136)))
    goto LABEL_6;
}

unint64_t sub_10007A2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  unint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  _BOOL8 v129;
  Swift::Int v130;
  char v131;
  Swift::Bool v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  double v138;
  unint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  uint64_t v167;
  os_log_type_t v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  char v220;
  int v221;
  char v222;
  char v223;
  char v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  unint64_t v234;
  _BYTE *v235;
  unint64_t result;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  _QWORD *v281;
  int *v282;
  uint64_t v283;
  _QWORD *v284;
  char v285[8];

  v2 = v0;
  v248 = sub_1000055B0(&qword_1002ACDB0);
  v238 = *(_QWORD *)(v248 - 8);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v4);
  sub_100026A8C();
  v246 = (char *)v5;
  v244 = type metadata accessor for UUID(0);
  v243 = *(_QWORD *)(v244 - 8);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10002641C();
  v242 = v8 - v7;
  v254 = sub_1000055B0(&qword_1002AD020);
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_1000432FC();
  sub_1000055B0(&qword_1002AD028);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v11);
  sub_100026A8C();
  v259 = v12;
  v13 = type metadata accessor for DeviceSnapshot(0);
  v261 = *(_QWORD *)(v13 - 8);
  sub_1000262EC();
  __chkstk_darwin(v14);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v15);
  sub_100084E68();
  __chkstk_darwin(v16);
  v18 = (char *)&v237 - v17;
  v19 = mach_continuous_time();
  v239 = *(_QWORD *)(v0 + 56);
  v20 = UniversalControlPreferences.deviceRemovalDebounceTime.getter();
  v21 = sub_1001243F0();
  sub_10004F610(v21, (void (*)(__int128 *__return_ptr, __int128 *))sub_10007BD84, 0);
  v23 = v22;
  v24 = swift_bridgeObjectRetain(v22);
  sub_1000DFA24(v24);
  v26 = v25;
  v27 = v0 + 104;
  sub_10000B2F8(v27, (uint64_t)v285, 0);
  v257 = v2;
  v28 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + 104));
  sub_10006808C(v28, v26);
  v29 = 0;
  v249 = v30 + 56;
  v255 = v30;
  sub_100084F48();
  v262 = v32 & v31;
  v258 = v19;
  v34 = (double)v19;
  v250 = (unint64_t)(v33 + 63) >> 6;
  *(_QWORD *)&v35 = 136446210;
  v241 = v35;
  v240 = (uint64_t)&type metadata for Any + 8;
  v282 = (int *)v13;
  v265 = (uint64_t *)v27;
  v253 = v1;
  v280 = v18;
  v251 = v23;
  while (1)
  {
    if (v262)
    {
      v36 = (v262 - 1) & v262;
      v37 = __clz(__rbit64(v262)) | (v29 << 6);
      goto LABEL_21;
    }
    v38 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_141;
    if (v38 >= v250)
      goto LABEL_98;
    v39 = *(_QWORD *)(v249 + 8 * v38);
    ++v29;
    if (!v39)
    {
      v29 = v38 + 1;
      sub_100085014();
      if (v40 == v41)
        goto LABEL_98;
      sub_100085004();
      if (!v39)
      {
        v29 = v42 + 2;
        sub_100085014();
        if (v40 == v41)
          goto LABEL_98;
        sub_100085004();
        if (!v39)
          break;
      }
    }
LABEL_20:
    v36 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v29 << 6);
LABEL_21:
    v46 = (unsigned __int8 *)(*(_QWORD *)(v255 + 48) + 16 * v37);
    v47 = *v46;
    v48 = v46[1];
    v49 = v46[2];
    v50 = v46[3];
    v51 = v46[4];
    v52 = v46[5];
    v53 = v46[6];
    v54 = v46[7];
    v55 = v46[8];
    v56 = v46[9];
    v57 = v46[10];
    v58 = v46[11];
    v59 = v46[12];
    v60 = v46[13];
    v61 = v46[14];
    v62 = v46[15];
    v63 = *(_QWORD *)(v23 + 16);
    v262 = v36;
    v278 = v50;
    v279 = v49;
    v269 = v52;
    v268 = v53;
    v267 = v54;
    v276 = v56;
    v277 = v55;
    v275 = v57;
    v274 = v58;
    v273 = v59;
    v272 = v60;
    v271 = v61;
    v270 = (_QWORD *)v62;
    if (v63
      && (v64 = sub_1001A8C70(v47 | (v48 << 8) | (v49 << 16) | (v50 << 24) | (v51 << 32) | (v52 << 40) | (v53 << 48) | (v54 << 56), v55 | (v56 << 8) | (v57 << 16) | (v58 << 24) | (v59 << 32) | (v60 << 40) | (v61 << 48) | (v62 << 56)), (v65 & 1) != 0))
    {
      v66 = (_QWORD *)(*(_QWORD *)(v23 + 56) + 16 * v64);
      v19 = v66[1];
      v67 = (_QWORD *)*v66;
      swift_unknownObjectRetain(*v66);
    }
    else
    {
      v67 = 0;
      v19 = 0;
    }
    v68 = (uint64_t)v265;
    sub_10000B2F8((uint64_t)v265, (uint64_t)&v284, 32);
    v69 = *(_QWORD *)(*(_QWORD *)v68 + 16);
    v263 = v48;
    if (v69 && (sub_100084E30(), sub_100084DA0(), sub_1001A8C70(v72, v70 | (v71 << 56)), (v73 & 1) != 0))
    {
      sub_100085060();
      sub_10007F284(v75 + v76 * v74, v259);
      v77 = 0;
    }
    else
    {
      v77 = 1;
    }
    v78 = v259;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v259, v77, 1, v13);
    sub_100085044();
    v26 = v1 + *(int *)(v254 + 48);
    sub_100084074(v78, v1, &qword_1002AD028);
    *(_QWORD *)v26 = v67;
    *(_QWORD *)(v26 + 8) = v19;
    v79 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v1, 1, v13);
    v266 = v51;
    v264 = v47;
    if (v79 == 1)
    {
      if (v67)
      {
        v80 = swift_unknownObjectRetain(v67);
        sub_10007BE40(v80, v19, (uint64_t)v280);
LABEL_33:
        ObjectType = swift_getObjectType(v67);
        v82 = sub_1000850C0(ObjectType, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 40));
        v83 = swift_getObjectType(v67);
        v84 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 32);
        v281 = v67;
        v85 = sub_1000850C0(v83, v84);
        goto LABEL_35;
      }
    }
    else
    {
      sub_10007F2C8(v1, (uint64_t)v280);
      if (v67)
        goto LABEL_33;
      v86 = RapportActivityLevel.unknown.unsafeMutableAddressor();
      v281 = 0;
      v85 = 0;
      v82 = *v86;
LABEL_35:
      v87 = &v280[*(int *)(v13 + 44)];
      v88 = *(_QWORD *)v87;
      v89 = v87[8];
      if (*(_QWORD *)v87)
        v26 = v87[8];
      else
        v26 = 0;
      v90 = RapportStatusFlags.BLE.unsafeMutableAddressor();
      v91 = *v90;
      v92 = *(_QWORD *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
      v260 = v29;
      if (!v91)
      {
        if (!v92)
          goto LABEL_44;
LABEL_42:
        v91 |= v92;
        goto LABEL_43;
      }
      if ((v92 & ~v91) != 0)
        goto LABEL_42;
LABEL_43:
      if ((v91 & ~v85) == 0)
      {
LABEL_44:
        v93 = RapportActivityLevel.isScreenOn.getter();
        goto LABEL_46;
      }
      v93 = 0;
LABEL_46:
      v94 = (uint64_t)v280;
      *(_QWORD *)&v280[v282[13]] = v82;
      v95 = v94;
      v96 = v258;
      if (v281)
      {
        v97 = swift_getObjectType(v281);
        v96 = sub_1000850C0(v97, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16));
      }
      v98 = v282;
      *(_QWORD *)(v95 + v282[12]) = v96;
      *(_QWORD *)(v95 + v98[14]) = v85;
      if ((v93 & 1) != 0)
        v99 = 0;
      else
        v99 = v88;
      if (((v26 | v93) & 1) != 0)
      {
        v100 = v89 | v93;
        v88 = v99;
LABEL_55:
        sub_100085124();
        goto LABEL_56;
      }
      if ((*v90 & ~v85) == 0)
      {
        v88 = 1;
        v100 = 1;
        goto LABEL_55;
      }
      if (!v89)
      {
        v90 = (_QWORD *)v264;
        if (v258 < v88)
        {
          v100 = 0;
          goto LABEL_56;
        }
LABEL_91:
        v100 = 1;
        v88 = 2;
        goto LABEL_56;
      }
      sub_100085124();
      if (v88)
        goto LABEL_91;
      if (qword_1002A9938 != -1)
        swift_once(&qword_1002A9938, sub_100189738);
      v138 = round(v34* (double)(unint64_t)static ContinuousTime.timebase/ (double)*((unint64_t *)&static ContinuousTime.timebase + 1));
      if (v138 >= 1.84467441e19)
      {
        v139 = -1;
      }
      else
      {
        if ((~*(_QWORD *)&v138 & 0x7FF0000000000000) == 0)
          goto LABEL_145;
        if (v138 <= -1.0)
          goto LABEL_146;
        v139 = (unint64_t)v138;
      }
      v158 = round((v20 + (double)v139 * 0.000000001)* 1000000000.0* (double)*((unint64_t *)&static ContinuousTime.timebase + 1)/ (double)(unint64_t)static ContinuousTime.timebase);
      if (v158 >= 1.84467441e19)
      {
        v100 = 0;
        v88 = -1;
      }
      else
      {
        if ((~*(_QWORD *)&v158 & 0x7FF0000000000000) == 0)
          goto LABEL_147;
        if (v158 <= -1.0)
          goto LABEL_148;
        v100 = 0;
        v88 = (unint64_t)v158;
      }
LABEL_56:
      sub_10007DB3C(v88, v100 & 1);
      *(_QWORD *)v87 = v88;
      v87[8] = v100 & 1;
      if ((v100 & 1) != 0)
      {
        v26 = (uint64_t)v265;
        if (!v281 && v88 >= 2)
          goto LABEL_62;
      }
      else
      {
        v26 = (uint64_t)v265;
        if (!v281 && v88 < v258)
        {
LABEL_62:
          if (qword_1002A9868 != -1)
            swift_once(&qword_1002A9868, sub_10007A128);
          v101 = sub_10000F6E4();
          sub_100006FB4(v101, (uint64_t)qword_1002ACE30);
          v102 = sub_1000850FC();
          v104 = static os_log_type_t.default.getter(v102, v103);
          if (os_log_type_enabled(v102, v104))
          {
            v105 = sub_10000797C(12);
            v281 = (_QWORD *)sub_10000797C(32);
            v284 = v281;
            *(_DWORD *)v105 = v241;
            v106 = v242;
            v107 = v90;
            v19 = v266;
            v108 = v269;
            v109 = v268;
            v110 = v267;
            v111 = UUID.init(uuid:)(v107, v263, v279, v278, v266, v269, v268, v267);
            v112 = UUID.uuidString.getter(v111);
            v114 = v113;
            (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v106, v244);
            v115 = sub_1000599D0(8, v112, v114);
            v116 = static String._fromSubstring(_:)(v115);
            v118 = v117;
            sub_10000E420();
            v119 = v116;
            v120 = v270;
            *(_QWORD *)(v105 + 4) = sub_100006FCC(v119, v118, (uint64_t *)&v284);
            swift_bridgeObjectRelease(v118);
            _os_log_impl((void *)&_mh_execute_header, v102, v104, "IDS %{public}s: Device Expired", (uint8_t *)v105, 0xCu);
            v121 = (uint64_t)v281;
            swift_arrayDestroy(v281, 1, v240);
            sub_100007958(v121);
            sub_100007958(v105);

            v122 = v263;
            v13 = (uint64_t)v282;
            v1 = v253;
          }
          else
          {

            v13 = (uint64_t)v282;
            v1 = v253;
            v122 = v263;
            v19 = v266;
            v108 = v269;
            v109 = v268;
            v110 = v267;
            v120 = v270;
          }
          v140 = v265;
          sub_10000B2F8((uint64_t)v265, (uint64_t)&v284, 33);
          v141 = v264 | (v122 << 8) | (v279 << 16) | (v278 << 24) | (v19 << 32) | (v108 << 40) | (v109 << 48) | (v110 << 56);
          v142 = v277 | (v276 << 8) | (v275 << 16) | (v274 << 24) | (v273 << 32) | (v272 << 40) | (v271 << 48) | ((_QWORD)v120 << 56);
          sub_10003AFBC();
          v26 = sub_1001A8C70(v141, v142);
          LOBYTE(v142) = v143;
          sub_10000E420();
          if ((v142 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v140);
            v283 = *v140;
            v145 = v283;
            *v140 = 0x8000000000000000;
            v19 = *(_QWORD *)(v145 + 24);
            sub_1000055B0((uint64_t *)&unk_1002AD030);
            _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19);
            v146 = v283;
            sub_100085060();
            v149 = v245;
            sub_10007F2C8(v147 + v148 * v26, v245);
            sub_100033B3C();
            _NativeDictionary._delete(at:)(v26, v146, &type metadata for UniversalControlDeviceID, v13);
            v150 = *v140;
            *v140 = v146;
            swift_bridgeObjectRelease(v150);
            v151 = 0;
          }
          else
          {
            v151 = 1;
            v149 = v245;
          }
          v23 = v251;
          _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v149, v151, 1, v13);
          sub_100085044();
          sub_10000E36C(v149, &qword_1002AD028);
          v29 = v260;
          goto LABEL_88;
        }
      }
      sub_10000B2F8(v26, (uint64_t)&v284, 33);
      sub_10007F284(v95, v252);
      v123 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v26);
      v283 = *(_QWORD *)v26;
      v124 = v283;
      v125 = (uint64_t *)v26;
      *(_QWORD *)v26 = 0x8000000000000000;
      sub_100084E30();
      sub_100084DA0();
      v126 = sub_1000850DC();
      v128 = *(_QWORD *)(v124 + 16);
      v129 = (v127 & 1) == 0;
      v130 = v128 + v129;
      if (__OFADD__(v128, v129))
        goto LABEL_140;
      v19 = v126;
      v131 = v127;
      sub_1000055B0((uint64_t *)&unk_1002AD030);
      v132 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v123, v130);
      v29 = v260;
      if (v132)
      {
        v133 = sub_1000850DC();
        if ((v131 & 1) == (v134 & 1))
        {
          v19 = v133;
          goto LABEL_70;
        }
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
        __break(1u);
LABEL_151:
        result = swift_release(v284);
        __break(1u);
        return result;
      }
LABEL_70:
      v26 = v283;
      if ((v131 & 1) != 0)
      {
        v135 = sub_100084F28();
        sub_10007F348(v135, v136);
        v1 = v253;
        v137 = v281;
      }
      else
      {
        *(_QWORD *)(v283 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        v152 = (_BYTE *)(*(_QWORD *)(v26 + 48) + 16 * v19);
        *v152 = (_BYTE)v90;
        v152[1] = v263;
        v152[2] = v279;
        v152[3] = v278;
        v152[4] = v266;
        v152[5] = v269;
        v152[6] = v268;
        v152[7] = v267;
        v152[8] = v277;
        v152[9] = v276;
        v152[10] = v275;
        v152[11] = v274;
        v152[12] = v273;
        v152[13] = v272;
        v152[14] = v271;
        v152[15] = (_BYTE)v270;
        v153 = sub_100084F28();
        sub_10007F2C8(v153, v154);
        v155 = *(_QWORD *)(v26 + 16);
        v41 = __OFADD__(v155, 1);
        v156 = v155 + 1;
        v1 = v253;
        v137 = v281;
        if (v41)
          goto LABEL_142;
        *(_QWORD *)(v26 + 16) = v156;
      }
      v157 = *v125;
      *v125 = v26;
      swift_bridgeObjectRelease(v157);
      sub_100085044();
      swift_unknownObjectRelease(v137);
      v13 = (uint64_t)v282;
      v23 = v251;
LABEL_88:
      sub_10007F30C((uint64_t)v280);
    }
  }
  v44 = v43 + 3;
  if (v44 >= v250)
    goto LABEL_98;
  v39 = *(_QWORD *)(v249 + 8 * v44);
  if (v39)
  {
    v29 = v44;
    goto LABEL_20;
  }
  while (1)
  {
    v29 = v44 + 1;
    if (__OFADD__(v44, 1))
      goto LABEL_143;
    sub_100085014();
    if (v40 == v41)
      break;
    sub_100085004();
    v44 = v45 + 1;
    if (v39)
      goto LABEL_20;
  }
LABEL_98:
  swift_bridgeObjectRelease(v23);
  v159 = swift_release(v255);
  v160 = UniversalControlPreferences.disableNearbyInteraction.getter(v159);
  v161 = v257;
  if ((*(_BYTE *)(v257 + 144) & 1) == 0)
  {
    v19 = *(_QWORD *)(v257 + 128);
    v26 = *(_QWORD *)(v257 + 136);
    if (qword_1002A9868 == -1)
      goto LABEL_101;
    goto LABEL_149;
  }
  v162 = v160;
  v163 = *(_QWORD *)(*(_QWORD *)(v257 + 72) + 16);
  swift_bridgeObjectRetain_n(v163, 2);
  v164 = sub_10003AFBC();
  v279 = sub_10008128C(v164, v162 & 1, v163);
  swift_bridgeObjectRelease(v163);
  while (2)
  {
    sub_10000E420();
    swift_retain(v161);
    v175 = sub_10003AFBC();
    v19 = sub_10008145C(v175, v161);
    v278 = 0;
    sub_10000E420();
    v26 = 0;
    v280 = (char *)(v19 + 64);
    sub_100084F48();
    v178 = v177 & v176;
    v281 = (_QWORD *)((unint64_t)(v179 + 63) >> 6);
    v180 = v256;
    if ((v177 & v176) != 0)
    {
LABEL_105:
      v181 = __clz(__rbit64(v178));
      v178 &= v178 - 1;
      v182 = v181 | (v26 << 6);
      goto LABEL_126;
    }
    while (2)
    {
      v183 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
      if (v183 >= (uint64_t)v281)
        goto LABEL_128;
      v184 = *(_QWORD *)&v280[8 * v183];
      ++v26;
      if (v184)
        goto LABEL_125;
      v26 = v183 + 1;
      sub_100085098();
      if (v40 == v41)
        goto LABEL_128;
      sub_10008514C();
      if (v184)
        goto LABEL_125;
      v26 = v185 + 2;
      sub_100085098();
      if (v40 == v41)
        goto LABEL_128;
      sub_10008514C();
      if (v184)
        goto LABEL_125;
      v26 = v186 + 3;
      sub_100085098();
      if (v40 == v41)
        goto LABEL_128;
      sub_10008514C();
      if (v184)
      {
LABEL_125:
        v178 = (v184 - 1) & v184;
        v182 = __clz(__rbit64(v184)) + (v26 << 6);
LABEL_126:
        sub_10007F284(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v261 + 72) * v182, (uint64_t)v180);
        v190 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 16);
        v191 = *v180;
        v192 = v180[1];
        v193 = *(uint64_t *)((char *)v180 + v282[13]);
        v194 = *(uint64_t *)((char *)v180 + v282[14]);
        swift_retain(*(_QWORD *)(v257 + 24));
        sub_10007F30C((uint64_t)v180);
        v190(v191, v192, v193, v194);
        sub_10000B348();
        if (v178)
          goto LABEL_105;
        continue;
      }
      break;
    }
    v188 = v187 + 4;
    if (v188 < (uint64_t)v281)
    {
      v184 = *(_QWORD *)&v280[8 * v188];
      if (!v184)
      {
        while (1)
        {
          v26 = v188 + 1;
          if (__OFADD__(v188, 1))
            break;
          sub_100085098();
          if (v40 == v41)
            goto LABEL_128;
          sub_10008514C();
          v188 = v189 + 1;
          if (v184)
            goto LABEL_125;
        }
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        swift_once(&qword_1002A9868, sub_10007A128);
LABEL_101:
        v165 = sub_10000F6E4();
        sub_100006FB4(v165, (uint64_t)qword_1002ACE30);
        v166 = sub_1000850FC();
        v168 = static os_log_type_t.default.getter(v166, v167);
        if (os_log_type_enabled(v166, v168))
        {
          v169 = (uint8_t *)sub_10000797C(12);
          v170 = sub_10000797C(32);
          v284 = (_QWORD *)v170;
          *(_DWORD *)v169 = 136315138;
          v171 = UniversalControlDeviceID.description.getter(v19, v26);
          v173 = v172;
          v283 = sub_100006FCC(v171, v172, (uint64_t *)&v284);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, &v284, v169 + 4, v169 + 12);
          swift_bridgeObjectRelease(v173);
          _os_log_impl((void *)&_mh_execute_header, v166, v168, "Discovery will be limited to device %s because Single Device mode is enabled.", v169, 0xCu);
          swift_arrayDestroy(v170, 1, (char *)&type metadata for Any + 8);
          sub_100007958(v170);
          sub_100007958((uint64_t)v169);
        }

        v174 = sub_10003AFBC();
        v279 = (uint64_t)sub_100081110(v174, v19, (_QWORD *)v26);
        v161 = v257;
        continue;
      }
      v26 = v188;
      goto LABEL_125;
    }
    break;
  }
LABEL_128:
  swift_release(v19);
  v195 = v279;
  v196 = sub_1000103C0();
  sub_1000DFA24(v196);
  sub_10007A210(v197);
  v198 = v278;
  sub_100081618(v195);
  sub_10000E410();
  v199 = sub_10003AFBC();
  sub_1000583F0(v199, v200, v201, v202, v203, v204, v205, v206, v237, v238, v239, v240, v241, *((uint64_t *)&v241 + 1), v242, v243, v244, v245, (uint64_t)v246,
    (uint64_t)v247,
    v248,
    v249,
    v250,
    v251,
    v252,
    v253);
  v208 = v207;
  sub_10000B348();
  v284 = v208;
  sub_10007F38C(&v284);
  if (v198)
    goto LABEL_151;
  sub_10000B348();
  v209 = v284;
  v210 = v284[2];
  if (v210)
  {
    v284 = _swiftEmptyArrayStorage;
    sub_1000586CC();
    v211 = (*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80);
    v270 = v209;
    v212 = (uint64_t)v209 + v211;
    v271 = *(_QWORD *)(v238 + 72);
    v213 = v284;
    do
    {
      v214 = v246;
      sub_100081774(v212, (uint64_t)v246);
      v215 = *(int *)(v248 + 48);
      v216 = v247;
      v217 = (uint64_t)&v247[v215];
      v218 = (uint64_t)&v214[v215];
      v219 = *v214;
      v220 = v214[1];
      v221 = v214[2];
      v222 = v214[3];
      v223 = v214[4];
      v224 = v214[5];
      v225 = v214[6];
      v226 = v214[7];
      v227 = v214[8];
      v228 = v214[9];
      v229 = v214[10];
      v230 = v214[11];
      v231 = v214[12];
      v232 = v214[13];
      v233 = v214[14];
      LODWORD(v215) = v214[15];
      *v247 = *v214;
      v216[1] = v220;
      LODWORD(v281) = v221;
      v216[2] = v221;
      v216[3] = v222;
      v216[4] = v223;
      v216[5] = v224;
      LODWORD(v280) = v225;
      v216[6] = v225;
      LODWORD(v279) = v226;
      v216[7] = v226;
      LODWORD(v278) = v227;
      v216[8] = v227;
      LODWORD(v277) = v228;
      v216[9] = v228;
      LODWORD(v276) = v229;
      v216[10] = v229;
      LODWORD(v275) = v230;
      v216[11] = v230;
      LODWORD(v274) = v231;
      v216[12] = v231;
      LODWORD(v273) = v232;
      v216[13] = v232;
      LODWORD(v272) = v233;
      v216[14] = v233;
      LODWORD(v282) = v215;
      v216[15] = v215;
      sub_10007F284(v218, v217);
      sub_10007F30C(v217);
      sub_10000E36C((uint64_t)v214, &qword_1002ACDB0);
      if ((swift_isUniquelyReferenced_nonNull_native(v213) & 1) == 0)
      {
        sub_1000586CC();
        v213 = v284;
      }
      v234 = v213[2];
      if (v234 >= v213[3] >> 1)
      {
        sub_1000586CC();
        v213 = v284;
      }
      v213[2] = v234 + 1;
      v235 = &v213[2 * v234];
      v235[32] = v219;
      v235[33] = v220;
      v235[34] = (_BYTE)v281;
      v235[35] = v222;
      v235[36] = v223;
      v235[37] = v224;
      v235[38] = (_BYTE)v280;
      v235[39] = v279;
      v235[40] = v278;
      v235[41] = v277;
      v235[42] = v276;
      v235[43] = v275;
      v235[44] = v274;
      v235[45] = v273;
      v235[46] = v272;
      v212 += v271;
      v235[47] = (_BYTE)v282;
      --v210;
    }
    while (v210);
    swift_release(v270);
  }
  else
  {
    swift_release(v284);
    v213 = _swiftEmptyArrayStorage;
  }
  sub_10007A190((uint64_t)v213);
  return sub_10007B858(v258);
}

uint64_t sub_10007B7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  _BYTE v7[24];

  v2 = a2 + 16;
  v3 = sub_1000850FC();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Device Snapshot Update Timer", v5, 2u);
    sub_100007958((uint64_t)v5);
  }

  sub_10000B2F8(v2, (uint64_t)v7, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10007A2D4();
    return sub_10000B348();
  }
  return result;
}

unint64_t sub_10007B858(unint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t result;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  _BYTE v64[24];
  _QWORD v65[6];

  v62 = a1;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v59 = *(_QWORD *)(v4 - 8);
  v60 = v4;
  v5 = __chkstk_darwin(v4);
  v58 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v57 = (char *)&v51 - v7;
  v56 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v56 - 8);
  v8 = __chkstk_darwin(v56);
  v52 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v54 = (char *)&v51 - v10;
  v11 = type metadata accessor for DeviceSnapshot(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v51 - v16;
  swift_beginAccess(v1 + 104, v64, 0, 0);
  v55 = v1;
  v18 = *(_QWORD *)(v1 + 104);
  sub_100043078(v65, v18);
  v20 = v65[0];
  v19 = v65[1];
  v21 = v65[3];
  v22 = v65[4];
  v23 = (unint64_t)(v65[2] + 64) >> 6;
  v61 = v18;
  swift_bridgeObjectRetain_n(v18, 2);
  v24 = -1;
  if (!v22)
    goto LABEL_3;
LABEL_2:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v26 = v25 | (v21 << 6);
  while (1)
  {
    sub_10007F284(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v12 + 72) * v26, (uint64_t)v17);
    sub_10007F2C8((uint64_t)v17, (uint64_t)v15);
    v31 = &v15[*(int *)(v11 + 44)];
    if ((v31[8] & 1) == 0)
    {
      v32 = *(_QWORD *)v31;
      if (v32 < v24)
        v24 = v32;
    }
    sub_10007F30C((uint64_t)v15);
    if (v22)
      goto LABEL_2;
LABEL_3:
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v27 >= v23)
      goto LABEL_26;
    v28 = *(_QWORD *)(v19 + 8 * v27);
    v29 = v21 + 1;
    if (!v28)
    {
      v29 = v21 + 2;
      if (v21 + 2 >= v23)
        goto LABEL_26;
      v28 = *(_QWORD *)(v19 + 8 * v29);
      if (!v28)
      {
        v29 = v21 + 3;
        if (v21 + 3 >= v23)
          goto LABEL_26;
        v28 = *(_QWORD *)(v19 + 8 * v29);
        if (!v28)
        {
          v29 = v21 + 4;
          if (v21 + 4 >= v23)
            goto LABEL_26;
          v28 = *(_QWORD *)(v19 + 8 * v29);
          if (!v28)
          {
            v29 = v21 + 5;
            if (v21 + 5 >= v23)
              goto LABEL_26;
            v28 = *(_QWORD *)(v19 + 8 * v29);
            if (!v28)
            {
              v29 = v21 + 6;
              if (v21 + 6 >= v23)
                goto LABEL_26;
              v28 = *(_QWORD *)(v19 + 8 * v29);
              if (!v28)
                break;
            }
          }
        }
      }
    }
LABEL_20:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v21 = v29;
  }
  v30 = v21 + 7;
  while (v30 < v23)
  {
    v28 = *(_QWORD *)(v19 + 8 * v30++);
    if (v28)
    {
      v29 = v30 - 1;
      goto LABEL_20;
    }
  }
LABEL_26:
  swift_bridgeObjectRelease(v61);
  swift_release(v20);
  result = v24 - v62;
  if (v24 > v62 && v24 != -1)
  {
    ContinuousTime.nanoseconds.getter(result);
    v2 = (double)v35;
    v3 = 0.000000001;
    if (qword_1002A9868 == -1)
    {
LABEL_31:
      v36 = v2 * v3;
      v37 = type metadata accessor for Logger(0);
      sub_100006FB4(v37, (uint64_t)qword_1002ACE30);
      static HIDFixed.zero.getter();
      v38 = static HIDFixed.zero.getter();
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(18, -1);
        *(_DWORD *)v41 = 68157952;
        LODWORD(v63) = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, (char *)&v63 + 4, v41 + 4, v41 + 8);
        *(_WORD *)(v41 + 8) = 2048;
        v63 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v41 + 10, v41 + 18);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Scheduling Device Snapshot Timer in %.*fs", (uint8_t *)v41, 0x12u);
        swift_slowDealloc(v41, -1, -1);
      }

      ObjectType = swift_getObjectType(*(_QWORD *)(v55 + 48));
      v43 = v52;
      static DispatchTime.now()();
      v44 = v54;
      + infix(_:_:)(v43, v36);
      v45 = *(void (**)(char *, uint64_t))(v53 + 8);
      v46 = v56;
      v45(v43, v56);
      v47 = v57;
      sub_10007A0C4();
      v48 = v58;
      sub_10007A0F4(v58);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v44, v47, v48, ObjectType);
      v49 = v60;
      v50 = *(void (**)(char *, uint64_t))(v59 + 8);
      v50(v48, v60);
      v50(v47, v49);
      return ((uint64_t (*)(char *, uint64_t))v45)(v44, v46);
    }
LABEL_36:
    swift_once(&qword_1002A9868, sub_10007A128);
    goto LABEL_31;
  }
  return result;
}

_QWORD *sub_10007BD08()
{
  _QWORD *v0;

  swift_release();
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[6]);
  swift_unknownObjectRelease(v0[7]);
  swift_unknownObjectRelease(v0[9]);
  sub_10002D108(v0[11], v0[12]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10007BD64()
{
  uint64_t v0;

  sub_10007BD08();
  return swift_deallocClassInstance(v0, 145, 7);
}

uint64_t sub_10007BD84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = *a1;
  v4 = a1[1];
  ObjectType = swift_getObjectType(*a1);
  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);
  *(_BYTE *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 9) = v7;
  *(_BYTE *)(a2 + 10) = v8;
  *(_BYTE *)(a2 + 11) = v9;
  *(_BYTE *)(a2 + 12) = v10;
  *(_BYTE *)(a2 + 13) = v11;
  *(_BYTE *)(a2 + 14) = v12;
  *(_BYTE *)(a2 + 15) = v13;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  return swift_unknownObjectRetain(v3);
}

uint64_t sub_10007BE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t result;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t);
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;

  v53 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v6 = *(_QWORD *)(v53 - 8);
  v7 = __chkstk_darwin(v53);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v53 - v10;
  v12 = type metadata accessor for DeviceSnapshot(0);
  v13 = *(int *)(v12 + 52);
  *(_QWORD *)(a3 + v13) = *RapportActivityLevel.unknown.unsafeMutableAddressor();
  v56 = *(int *)(v12 + 56);
  v57 = v13;
  *(_QWORD *)(a3 + v56) = 0;
  ObjectType = swift_getObjectType(a1);
  *(_QWORD *)a3 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(ObjectType, a2);
  *(_BYTE *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 9) = v16;
  *(_BYTE *)(a3 + 10) = v17;
  *(_BYTE *)(a3 + 11) = v18;
  *(_BYTE *)(a3 + 12) = v19;
  *(_BYTE *)(a3 + 13) = v20;
  *(_BYTE *)(a3 + 14) = v21;
  *(_BYTE *)(a3 + 15) = v22;
  *(_QWORD *)(a3 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(ObjectType, a2);
  *(_QWORD *)(a3 + 32) = v23;
  *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(ObjectType, a2);
  *(_QWORD *)(a3 + 48) = v24;
  v25 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  v60 = v12;
  v25(ObjectType, a2);
  v58 = a1;
  v25(ObjectType, a2);
  v26 = v6;
  v27 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v28 = v53;
  v27(v9, enum case for UniversalControlDevice.DeviceType.iPad(_:), v53);
  LOBYTE(a1) = static UniversalControlDevice.DeviceType.== infix(_:_:)(v11, v9);
  v29 = *(void (**)(char *, uint64_t))(v26 + 8);
  v59 = v9;
  v29(v9, v28);
  v30 = v11;
  v31 = v11;
  v32 = v28;
  v29(v31, v28);
  v54 = v27;
  v55 = v25;
  if ((a1 & 1) != 0)
  {
    v33 = 1;
    v34 = v29;
    v35 = v30;
  }
  else
  {
    v36 = v30;
    v25(ObjectType, a2);
    v37 = v59;
    v27(v59, enum case for UniversalControlDevice.DeviceType.realityDevice(_:), v32);
    v33 = static UniversalControlDevice.DeviceType.== infix(_:_:)(v36, v37);
    v29(v37, v32);
    v29(v36, v32);
    v38 = v29;
    v35 = v36;
    v34 = v38;
  }
  v39 = v32;
  *(_BYTE *)(a3 + 56) = v33 & 1;
  v40 = v58;
  *(_QWORD *)(a3 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  *(_QWORD *)(a3 + *(int *)(v60 + 48)) = v41;
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(ObjectType, a2);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  v44 = *(_QWORD *)RapportStatusFlags.BLE.unsafeMutableAddressor();
  v45 = *(_QWORD *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor();
  if (!v44)
  {
    if (!v45)
      goto LABEL_10;
    goto LABEL_8;
  }
  if ((v45 & ~v44) != 0)
LABEL_8:
    v44 |= v45;
  if ((v44 & ~v43) != 0)
  {
LABEL_12:
    v46 = 1;
    goto LABEL_13;
  }
LABEL_10:
  if ((RapportActivityLevel.isScreenOn.getter() & 1) == 0)
    goto LABEL_12;
  v46 = 0;
LABEL_13:
  v47 = a3 + *(int *)(v60 + 44);
  *(_QWORD *)v47 = v46;
  *(_BYTE *)(v47 + 8) = 1;
  *(_QWORD *)(a3 + v57) = v42;
  v48 = v55;
  *(_QWORD *)(a3 + v56) = v43;
  v48(ObjectType, a2);
  v49 = v59;
  v54(v59, enum case for UniversalControlDevice.DeviceType.realityDevice(_:), v39);
  sub_1000840B4((unint64_t *)&unk_1002AC870, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice.DeviceType, (uint64_t)&protocol conformance descriptor for UniversalControlDevice.DeviceType);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v49, v39, v50);
  swift_unknownObjectRelease(v40);
  v34(v49, v39);
  result = ((uint64_t (*)(char *, uint64_t))v34)(v35, v39);
  *(_BYTE *)(a3 + 16) = (v51 & 1) == 0;
  return result;
}

uint64_t sub_10007C24C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  char v12;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001002547B0;
    if (a2 == 0x80000001002547B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002547B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001002547D0)
  {
    v6 = 0x80000001002547D0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002547D0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 7827310 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7827310, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x80000001002547F0;
    if (a2 == 0x80000001002547F0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002547F0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x74696D69786F7270 && a2 == 0xE900000000000079)
  {
    v11 = 0xE900000000000079;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74696D69786F7270, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100254810)
  {
    swift_bridgeObjectRelease(0x8000000100254810);
    return 5;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100254810, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10007C49C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007C4D4 + 4 * byte_10021F360[a1]))(0xD000000000000010, 0x80000001002547B0);
}

uint64_t sub_10007C4D4(uint64_t a1)
{
  return a1 + 1;
}

void sub_10007C530(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002AD048);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  sub_10000DBE4(a1, a1[3]);
  v10 = sub_100083FFC();
  sub_100084FF4((uint64_t)&type metadata for DiscoveryController.DiagnosticState.CodingKeys, v11, v10);
  v30 = *v3;
  sub_10003B038();
  sub_1000850B8((unint64_t *)&qword_1002AD060, v12, (void (*)(void))sub_10003668C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_100084EB4();
  if (!v2)
  {
    v30 = v3[1];
    v13 = sub_10003B038();
    sub_1000850B8(&qword_1002AD078, v14, (void (*)(void))sub_100084038, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v15 = sub_100085084();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v16, v17, v13, v18);
    sub_100084FCC(2);
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v21);
    v30 = v3[3];
    sub_100084EB4();
    sub_100084074((uint64_t)(v3 + 4), (uint64_t)v31, &qword_1002B29A0);
    sub_100084074((uint64_t)v31, (uint64_t)&v30, &qword_1002B29A0);
    v22 = sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100084B28((unint64_t *)&qword_1002B2910, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v23 = sub_100085084();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, v24, v25, v22, v26);
    sub_100084FCC(5);
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, v29);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_10003AF60();
}

void sub_10007C73C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = sub_1000055B0(&qword_1002AD0E8);
  __chkstk_darwin(v5);
  sub_1000432FC();
  v6 = a1[3];
  v7 = a1[4];
  sub_10000DBE4(a1, v6);
  v8 = sub_100083FFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiscoveryController.DiagnosticState.CodingKeys, &type metadata for DiscoveryController.DiagnosticState.CodingKeys, v8, v6, v7);
  if (v2)
  {
    sub_10008503C();
  }
  else
  {
    v23 = a2;
    sub_10003B038();
    sub_1000850B8((unint64_t *)&unk_1002AD0F0, v9, (void (*)(void))sub_10003A380, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100084E78();
    v10 = sub_1000055B0(&qword_1002AD070);
    v24 = 1;
    sub_100084A94(&qword_1002AD100, &qword_1002AD070, (void (*)(void))sub_100084AEC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v22 = v25;
    sub_10003AFBC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, &v24, v5, v10);
    v11 = v25;
    LOBYTE(v25) = 2;
    swift_bridgeObjectRetain();
    v12 = sub_1000850E8();
    v21 = KeyedDecodingContainer.decode(_:forKey:)(v12, v13);
    v24 = 3;
    sub_100084E78();
    v14 = v25;
    v15 = sub_1000055B0((uint64_t *)&unk_1002AC160);
    v24 = 4;
    sub_100084B28(&qword_1002AD110, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v17 = v16;
    v18 = swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v25, v15, &v24, v5, v15, v17, v18);
    v19 = v25;
    LOBYTE(v25) = 5;
    swift_bridgeObjectRetain();
    v20 = sub_1000850E8();
    LOBYTE(v15) = KeyedDecodingContainer.decode(_:forKey:)(v20);
    sub_100084E20();
    sub_100005988(a1);
    sub_100075850();
    sub_10002D860();
    sub_10000E50C();
    sub_10000E4A0();
    *(_QWORD *)v23 = v22;
    *(_QWORD *)(v23 + 8) = v11;
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = v14;
    *(_QWORD *)(v23 + 32) = v19;
    *(_BYTE *)(v23 + 40) = v15 & 1;
  }
  sub_10003AF60();
}

void sub_10007CA38()
{
  unsigned __int8 *v0;

  sub_10007D034(*v0);
}

uint64_t sub_10007CA50()
{
  unsigned __int8 *v0;

  return sub_10007C49C(*v0);
}

uint64_t sub_10007CA58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007C24C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007CA7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.button.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007CAA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083FFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007CAC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100083FFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10007CAF0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_10007C73C(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

void sub_10007CB30(_QWORD *a1)
{
  sub_10007C530(a1);
}

uint64_t sub_10007CB68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v21;
  char v23;

  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x616C696176417369 && a2 == 0xEB00000000656C62)
  {
    v12 = 0xEB00000000656C62;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616C696176417369, 0xEB00000000656C62, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x8000000100254830)
  {
    v13 = 0x8000000100254830;
LABEL_38:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100254830, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000012)
  {
    v14 = 0x8000000100254860;
    if (a2 == 0x8000000100254860)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100254860, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v14);
    return 5;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100254880)
  {
    v15 = 0x8000000100254880;
LABEL_49:
    swift_bridgeObjectRelease(v15);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100254880, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001002548A0)
  {
    v16 = 0x80000001002548A0;
LABEL_55:
    swift_bridgeObjectRelease(v16);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001002548A0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000012)
  {
    v17 = 0x80000001002548C0;
    if (a2 == 0x80000001002548C0)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001002548C0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v17);
    return 8;
  }
  if (a1 == 0x636E6176656C6572 && a2 == 0xEE0065726F635365)
  {
    v19 = 0xEE0065726F635365;
    goto LABEL_68;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6176656C6572, 0xEE0065726F635365, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_68:
    swift_bridgeObjectRelease(v19);
    return 9;
  }
  if (a1 == 0x746F687370616E73 && a2 == 0xEE00797269707845)
  {
    v21 = 0xEE00797269707845;
    goto LABEL_76;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746F687370616E73, 0xEE00797269707845, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_76:
    swift_bridgeObjectRelease(v21);
    return 10;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 11;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v23 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t static ReportID.fluidTouchGesture.getter()
{
  return 12;
}

void sub_10007D034(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1);
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_10007D06C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007D09C + 4 * byte_10021F366[a1]))(0x656369766564, 0xE600000000000000);
}

uint64_t sub_10007D09C()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_10007D0B0()
{
  return 1701667182;
}

uint64_t sub_10007D0C0()
{
  return 0x616C696176417369;
}

unint64_t sub_10007D0E0()
{
  return 0xD000000000000024;
}

uint64_t sub_10007D158()
{
  return 0x636E6176656C6572;
}

uint64_t sub_10007D17C()
{
  return 0x746F687370616E73;
}

uint64_t sub_10007D1A0()
{
  return 0x6574617473;
}

uint64_t sub_10007D1B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002AD0D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  sub_10000DBE4(a1, a1[3]);
  v10 = sub_100084970();
  sub_100084FF4((uint64_t)&type metadata for DeviceSnapshotDiagnosticState.CodingKeys, v11, v10);
  v12 = *(_QWORD *)v3;
  v13 = *(_QWORD *)(v3 + 8);
  v43 = 0;
  sub_100084E04(v12, v13, (uint64_t)&v43);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + 16);
    v15 = *(_QWORD *)(v3 + 24);
    v42 = 1;
    sub_100084E04(v14, v15, (uint64_t)&v42);
    v16 = *(_QWORD *)(v3 + 32);
    v17 = *(_QWORD *)(v3 + 40);
    v41 = 2;
    sub_100084E04(v16, v17, (uint64_t)&v41);
    v18 = *(unsigned __int8 *)(v3 + 48);
    v40 = 3;
    sub_100084FAC(v18, (uint64_t)&v40);
    v19 = *(unsigned __int8 *)(v3 + 49);
    v39 = 4;
    sub_100084FAC(v19, (uint64_t)&v39);
    v20 = *(_QWORD *)(v3 + 56);
    v38 = 5;
    sub_100084FBC(v20, (uint64_t)&v38);
    v21 = *(_QWORD *)(v3 + 64);
    v37 = 6;
    sub_100084FBC(v21, (uint64_t)&v37);
    v22 = *(_QWORD *)(v3 + 72);
    v23 = *(_QWORD *)(v3 + 80);
    v36 = 7;
    sub_100084E04(v22, v23, (uint64_t)&v36);
    v24 = *(_QWORD *)(v3 + 88);
    v25 = *(_QWORD *)(v3 + 96);
    v35 = 8;
    sub_100084E04(v24, v25, (uint64_t)&v35);
    v26 = *(float *)(v3 + 104);
    v34 = 9;
    KeyedEncodingContainer.encode(_:forKey:)(&v34, v5, v26);
    v27 = *(_QWORD *)(v3 + 112);
    v28 = *(unsigned __int8 *)(v3 + 120);
    v33 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v33, v5);
    v29 = *(_QWORD *)(v3 + 128);
    v30 = *(_QWORD *)(v3 + 136);
    v32 = 11;
    sub_100084E04(v29, v30, (uint64_t)&v32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_10007D3D0(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[18];
  _QWORD v47[6];
  char v48;
  char v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char v60;
  _BYTE v61[7];
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[7];
  char v66;
  int v67;
  __int16 v68;

  v5 = sub_1000055B0(&qword_1002AD0E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v66 = 1;
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_100084970();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceSnapshotDiagnosticState.CodingKeys, &type metadata for DeviceSnapshotDiagnosticState.CodingKeys, v9, v7, v8);
  if (v2)
  {
    sub_10008507C();
  }
  else
  {
    v10 = v6;
    v41 = a2;
    v11 = sub_100084DF0();
    LOBYTE(v47[0]) = 1;
    v13 = v12;
    swift_bridgeObjectRetain();
    v45 = v13;
    v39 = sub_100084DF0();
    v40 = v11;
    sub_100084F94(v14, 2);
    v44 = v11;
    v15 = sub_100084DF0();
    sub_100084F94(v16, 3);
    v43 = v11;
    v38 = KeyedDecodingContainer.decode(_:forKey:)(v47);
    v17 = sub_100084E9C(4);
    v37 = KeyedDecodingContainer.decode(_:forKey:)(v17);
    v18 = sub_100084F08(5);
    v35 = sub_100084F08(6);
    LOBYTE(v47[0]) = 7;
    v34 = sub_100084DF0();
    LOBYTE(v47[0]) = 8;
    v42 = v19;
    swift_bridgeObjectRetain();
    v33 = sub_100084DF0();
    v36 = v20;
    v21 = v15;
    LOBYTE(v47[0]) = 9;
    v22 = swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(v47, v5, v22);
    v24 = v23;
    v25 = sub_100084E9C(10);
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v25);
    v30 = v27 & 1;
    v66 = v27 & 1;
    v64 = 11;
    v28 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    v31 = v29;
    v32 = v28;
    sub_100084E14(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    v46[0] = v40;
    v46[1] = v45;
    v46[2] = v39;
    v46[3] = v44;
    v46[4] = v21;
    v46[5] = v43;
    LOBYTE(v46[6]) = v38 & 1;
    BYTE1(v46[6]) = v37 & 1;
    v46[7] = v18;
    v46[8] = v35;
    v46[9] = v34;
    v46[10] = v42;
    v46[11] = v33;
    v46[12] = v36;
    LODWORD(v46[13]) = v24;
    v46[14] = v26;
    LOBYTE(v46[15]) = v30;
    v46[16] = v32;
    v46[17] = v31;
    sub_1000849AC(v46);
    swift_bridgeObjectRelease();
    sub_10000E4A0();
    swift_bridgeObjectRelease();
    sub_10002D860();
    sub_100075850();
    sub_10008507C();
    v47[0] = v40;
    v47[1] = v45;
    v47[2] = v39;
    v47[3] = v44;
    v47[4] = v21;
    v47[5] = v43;
    v48 = v38 & 1;
    v49 = v37 & 1;
    v50 = v67;
    v51 = v68;
    v52 = v18;
    v53 = v35;
    v54 = v34;
    v55 = v42;
    v56 = v33;
    v57 = v36;
    v58 = v24;
    v59 = v26;
    v60 = v66;
    *(_DWORD *)&v61[3] = *(_DWORD *)&v65[3];
    *(_DWORD *)v61 = *(_DWORD *)v65;
    v62 = v32;
    v63 = v31;
    sub_100084A20(v47);
    memcpy(v41, v46, 0x90uLL);
  }
}

uint64_t sub_10007D8C0()
{
  unsigned __int8 *v0;

  return sub_10007D06C(*v0);
}

uint64_t sub_10007D8C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007CB68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007D8EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.fluidTouchGesture.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007D910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100084970();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D938(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100084970();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10007D960(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[144];

  sub_10007D3D0(a1, v4);
  if (!v2)
    memcpy(a2, v4, 0x90uLL);
}

uint64_t sub_10007D9A8(_QWORD *a1)
{
  return sub_10007D1B4(a1);
}

uint64_t sub_10007D9BC(uint64_t a1, char a2)
{
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v6;

  if ((a2 & 1) != 0)
  {
    v6 = 0x616C696176616E75;
    if (a1 != 1)
      v6 = 1953722220;
    if (a1)
      return v6;
    else
      return 0x6C62616C69617661;
  }
  else
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(0xE000000000000000);
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0x6C62616C69617661;
  }
}

BOOL sub_10007DABC(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0)
      return a1 == a3;
    return 0;
  }
  if (!a1)
    return (a4 & 1) != 0 && !a3;
  if (a1 != 1)
    return (a4 & 1) != 0 && a3 > 1;
  return (a4 & 1) != 0 && a3 == 1;
}

uint64_t sub_10007DB14()
{
  uint64_t v0;

  return sub_10007D9BC(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

BOOL sub_10007DB20(uint64_t a1, uint64_t a2)
{
  return sub_10007DABC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void sub_10007DB3C(unint64_t a1, char a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[*(int *)(type metadata accessor for DeviceSnapshot(0) + 44)];
  v10 = *(_QWORD *)v9;
  v11 = v9[8];
  if (v11 != 1)
  {
    if ((a2 & 1) == 0 && v10 == a1)
      return;
LABEL_15:
    v12 = UUID.init(uuid:)(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
    v13 = UUID.uuidString.getter(v12);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = sub_1000599D0(8, v13, v15);
    v18 = v17;
    v19 = static String._fromSubstring(_:)(v16);
    v21 = v20;
    swift_bridgeObjectRelease(v18);
    if ((v11 & 1) != 0)
    {
      if ((a2 & 1) == 0)
      {
        if (qword_1002A9868 != -1)
          swift_once(&qword_1002A9868, sub_10007A128);
        v22 = type metadata accessor for Logger(0);
        sub_100006FB4(v22, (uint64_t)qword_1002ACE30);
        swift_bridgeObjectRetain_n(v21, 2);
        static HIDFixed.zero.getter();
        v23 = static HIDFixed.zero.getter();
        v24 = Logger.logObject.getter(v23);
        v26 = static os_log_type_t.default.getter(v24, v25);
        if (os_log_type_enabled(v24, v26))
        {
          v27 = swift_slowAlloc(28, -1);
          v28 = swift_slowAlloc(32, -1);
          v64 = v28;
          *(_DWORD *)v27 = 136446722;
          swift_bridgeObjectRetain(v21);
          v63 = COERCE_DOUBLE(sub_100006FCC(v19, v21, &v64));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v27 + 4, v27 + 12);
          swift_bridgeObjectRelease_n(v21, 3);
          *(_WORD *)(v27 + 12) = 1040;
          LODWORD(v63) = 3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, (char *)&v63 + 4, v27 + 14, v27 + 18);
          *(_WORD *)(v27 + 18) = 2048;
          ContinuousTime.nanoseconds.getter(a1);
          v30 = (double)v29 * 0.000000001;
          v31 = mach_continuous_time();
          ContinuousTime.nanoseconds.getter(v31);
          v63 = v30 - (double)v32 * 0.000000001;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v27 + 20, v27 + 28);
          _os_log_impl((void *)&_mh_execute_header, v24, v26, "IDS %{public}s: Scheduling Device Expiration in %.*fs", (uint8_t *)v27, 0x1Cu);
          swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
          v33 = v28;
LABEL_27:
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v27, -1, -1);
          swift_bridgeObjectRelease(v21);
LABEL_47:

          return;
        }
LABEL_40:

        v58 = v21;
        v59 = 3;
LABEL_49:
        swift_bridgeObjectRelease_n(v58, v59);
        return;
      }
    }
    else
    {
      if ((a2 & 1) == 0)
      {
        if (v10 != a1)
        {
          ContinuousTime.nanoseconds.getter(a1);
          v35 = v34;
          ContinuousTime.nanoseconds.getter(v10);
          v37 = v36;
          if (qword_1002A9868 != -1)
            swift_once(&qword_1002A9868, sub_10007A128);
          v38 = type metadata accessor for Logger(0);
          sub_100006FB4(v38, (uint64_t)qword_1002ACE30);
          swift_bridgeObjectRetain_n(v21, 2);
          static HIDFixed.zero.getter();
          v39 = static HIDFixed.zero.getter();
          v24 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.default.getter(v24, v40);
          if (os_log_type_enabled(v24, v41))
          {
            v42 = (double)v35 * 0.000000001 - (double)v37 * 0.000000001;
            v27 = swift_slowAlloc(28, -1);
            v43 = swift_slowAlloc(32, -1);
            v64 = v43;
            *(_DWORD *)v27 = 136446722;
            swift_bridgeObjectRetain(v21);
            v63 = COERCE_DOUBLE(sub_100006FCC(v19, v21, &v64));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v27 + 4, v27 + 12);
            swift_bridgeObjectRelease_n(v21, 3);
            *(_WORD *)(v27 + 12) = 1040;
            LODWORD(v63) = 3;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, (char *)&v63 + 4, v27 + 14, v27 + 18);
            *(_WORD *)(v27 + 18) = 2048;
            v63 = v42;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v27 + 20, v27 + 28);
            _os_log_impl((void *)&_mh_execute_header, v24, v41, "IDS %{public}s: Adjusted Device Expiration %.*fs", (uint8_t *)v27, 0x1Cu);
            swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
            v33 = v43;
            goto LABEL_27;
          }
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (mach_continuous_time() < v10)
      {
        if (qword_1002A9868 != -1)
          swift_once(&qword_1002A9868, sub_10007A128);
        v44 = type metadata accessor for Logger(0);
        sub_100006FB4(v44, (uint64_t)qword_1002ACE30);
        v45 = swift_bridgeObjectRetain_n(v21, 2);
        v46 = Logger.logObject.getter(v45);
        v48 = static os_log_type_t.default.getter(v46, v47);
        if (!os_log_type_enabled(v46, v48))
        {

          swift_bridgeObjectRelease_n(v21, 2);
          if (a1)
          {
LABEL_34:
            if (a1 == 1)
            {
              if (qword_1002A9868 != -1)
                swift_once(&qword_1002A9868, sub_10007A128);
              v51 = type metadata accessor for Logger(0);
              sub_100006FB4(v51, (uint64_t)qword_1002ACE30);
              v52 = swift_bridgeObjectRetain(v21);
              v24 = Logger.logObject.getter(v52);
              v54 = static os_log_type_t.default.getter(v24, v53);
              if (os_log_type_enabled(v24, v54))
              {
                v55 = (uint8_t *)swift_slowAlloc(12, -1);
                v56 = swift_slowAlloc(32, -1);
                v64 = v56;
                *(_DWORD *)v55 = 136446210;
                swift_bridgeObjectRetain(v21);
                v63 = COERCE_DOUBLE(sub_100006FCC(v19, v21, &v64));
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v55 + 4, v55 + 12);
                swift_bridgeObjectRelease_n(v21, 3);
                v57 = "IDS %{public}s: Device Unavailable";
LABEL_46:
                _os_log_impl((void *)&_mh_execute_header, v24, v54, v57, v55, 0xCu);
                swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v56, -1, -1);
                swift_slowDealloc(v55, -1, -1);
                goto LABEL_47;
              }
              goto LABEL_48;
            }
LABEL_39:
            swift_bridgeObjectRelease(v21);
            return;
          }
LABEL_42:
          if (qword_1002A9868 != -1)
            swift_once(&qword_1002A9868, sub_10007A128);
          v60 = type metadata accessor for Logger(0);
          sub_100006FB4(v60, (uint64_t)qword_1002ACE30);
          v61 = swift_bridgeObjectRetain(v21);
          v24 = Logger.logObject.getter(v61);
          v54 = static os_log_type_t.default.getter(v24, v62);
          if (os_log_type_enabled(v24, v54))
          {
            v55 = (uint8_t *)swift_slowAlloc(12, -1);
            v56 = swift_slowAlloc(32, -1);
            v64 = v56;
            *(_DWORD *)v55 = 136446210;
            swift_bridgeObjectRetain(v21);
            v63 = COERCE_DOUBLE(sub_100006FCC(v19, v21, &v64));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v55 + 4, v55 + 12);
            swift_bridgeObjectRelease_n(v21, 3);
            v57 = "IDS %{public}s: Device Available";
            goto LABEL_46;
          }
LABEL_48:

          v58 = v21;
          v59 = 2;
          goto LABEL_49;
        }
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v64 = v50;
        *(_DWORD *)v49 = 136446210;
        swift_bridgeObjectRetain(v21);
        v63 = COERCE_DOUBLE(sub_100006FCC(v19, v21, &v64));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease_n(v21, 3);
        _os_log_impl((void *)&_mh_execute_header, v46, v48, "IDS %{public}s: Canceled Device Expiration", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
    }
    if (a1)
      goto LABEL_34;
    goto LABEL_42;
  }
  if (!v10)
  {
    if ((a2 & 1) != 0 && !a1)
      return;
    goto LABEL_15;
  }
  if (v10 != 1)
  {
    if ((a2 & 1) != 0 && a1 > 1)
      return;
    goto LABEL_15;
  }
  if ((a2 & 1) == 0 || a1 != 1)
    goto LABEL_15;
}

uint64_t RapportActivityLevel.isScreenOn.getter()
{
  char v1;

  RapportActivityLevel.unknown.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.disabled.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.coverClosed.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.idle.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.background.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.audio.unsafeMutableAddressor();
  sub_100084D94();
  if (v1)
    return 0;
  RapportActivityLevel.screen.unsafeMutableAddressor();
  sub_100084D94();
  if (!v1)
  {
    RapportActivityLevel.video.unsafeMutableAddressor();
    sub_100084D94();
    if (!v1)
    {
      RapportActivityLevel.watch.unsafeMutableAddressor();
      sub_100084D94();
      if (v1)
        return 0;
      RapportActivityLevel.user.unsafeMutableAddressor();
      sub_100084D94();
      if (v1)
        return 1;
      RapportActivityLevel.driving.unsafeMutableAddressor();
      sub_100084D94();
      if (v1)
        return 0;
      RapportActivityLevel.phoneCall.unsafeMutableAddressor();
      sub_100084D94();
      if (!v1)
      {
        RapportActivityLevel.incorrect.unsafeMutableAddressor();
        return 0;
      }
    }
  }
  return 1;
}

uint64_t RapportActivityLevel.isUserActive.getter()
{
  char v1;

  RapportActivityLevel.unknown.unsafeMutableAddressor();
  sub_100084D94();
  if (!v1)
  {
    RapportActivityLevel.disabled.unsafeMutableAddressor();
    sub_100084D94();
    if (!v1)
    {
      RapportActivityLevel.coverClosed.unsafeMutableAddressor();
      sub_100084D94();
      if (!v1)
      {
        RapportActivityLevel.idle.unsafeMutableAddressor();
        sub_100084D94();
        if (!v1)
        {
          RapportActivityLevel.background.unsafeMutableAddressor();
          sub_100084D94();
          if (!v1)
          {
            RapportActivityLevel.audio.unsafeMutableAddressor();
            sub_100084D94();
            if (!v1)
            {
              RapportActivityLevel.screen.unsafeMutableAddressor();
              sub_100084D94();
              if (!v1)
              {
                RapportActivityLevel.video.unsafeMutableAddressor();
                sub_100084D94();
                if (!v1)
                {
                  RapportActivityLevel.watch.unsafeMutableAddressor();
                  sub_100084D94();
                  if (!v1)
                  {
                    RapportActivityLevel.user.unsafeMutableAddressor();
                    sub_100084D94();
                    if (v1)
                      return 1;
                    RapportActivityLevel.driving.unsafeMutableAddressor();
                    sub_100084D94();
                    if (!v1)
                    {
                      RapportActivityLevel.phoneCall.unsafeMutableAddressor();
                      sub_100084D94();
                      if (!v1)
                        RapportActivityLevel.incorrect.unsafeMutableAddressor();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for DiscoveryController()
{
  return objc_opt_self(_TtC13EnsembleAgent19DiscoveryController);
}

_QWORD *sub_10007E588(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[5];
    v9 = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 64) = a2[8];
    v10 = a3[10];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v13 = type metadata accessor for UniversalControlDevice.DeviceType(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = a3[11];
    v16 = a3[12];
    v17 = (char *)v4 + v15;
    v18 = (uint64_t)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *(_QWORD *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v19 = a3[14];
    *(_QWORD *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(_QWORD *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
  }
  return v4;
}

uint64_t sub_10007E6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10007E6F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = a3[10];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v12 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = a3[11];
  v15 = a3[12];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  return a1;
}

uint64_t sub_10007E7E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = a3[10];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[11];
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 8) = *((_BYTE *)v16 + 8);
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10007E960(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = a3[10];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 40) = v6;
  v10 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[11];
  v12 = a3[12];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v15 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  return a1;
}

uint64_t sub_10007EA2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = a3[10];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[11];
  v15 = a3[12];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  return a1;
}

uint64_t sub_10007EB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007EB14);
}

uint64_t sub_10007EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UniversalControlDevice.DeviceType(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_10007EB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007EB94);
}

uint64_t sub_10007EB94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UniversalControlDevice.DeviceType(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DeviceSnapshot(uint64_t a1)
{
  uint64_t result;

  result = qword_1002ACF88;
  if (!qword_1002ACF88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceSnapshot);
  return result;
}

uint64_t sub_10007EC38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_10021F410;
  v4[1] = &unk_10021F428;
  v4[2] = &unk_10021F440;
  v4[3] = &unk_10021F440;
  v4[4] = &unk_10021F428;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for UniversalControlDevice.DeviceType(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_10021F458;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_10007ECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  BOOL v19;
  char v20;
  _BOOL8 v21;
  uint64_t v23;

  v4 = type metadata accessor for DeviceSnapshot(0);
  sub_1000262EC();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v23 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v23 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  sub_10007F284(a1, (uint64_t)&v23 - v15);
  sub_10007F284(a2, (uint64_t)v14);
  v17 = 2.0;
  if ((RapportActivityLevel.isUserActive.getter() & 1) == 0)
  {
    v17 = 0.0;
    if ((RapportActivityLevel.isScreenOn.getter() & 1) != 0)
    {
      if (v16[56])
        v17 = 1.0;
      else
        v17 = *(float *)"fff?";
    }
  }
  if ((RapportActivityLevel.isUserActive.getter() & 1) != 0)
  {
    if (v17 >= 2.0)
      goto LABEL_18;
LABEL_15:
    v20 = 0;
    v21 = 1;
    goto LABEL_19;
  }
  if ((RapportActivityLevel.isScreenOn.getter() & 1) != 0)
  {
    if ((v14[56] & 1) != 0)
      v18 = 1.0;
    else
      v18 = *(float *)"fff?";
    v19 = v17 <= v18;
    if (v17 < v18)
      goto LABEL_15;
  }
  else
  {
    v19 = v17 <= 0.0;
  }
  if (!v19)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v21 = 0;
  v20 = 1;
LABEL_19:
  sub_10007F284((uint64_t)v16, (uint64_t)v11);
  sub_10007F284((uint64_t)v14, (uint64_t)v8);
  if ((v20 & 1) != 0)
    v21 = *(_QWORD *)&v11[*(int *)(v4 + 48)] < *(_QWORD *)&v8[*(int *)(v4 + 48)];
  sub_10007F30C((uint64_t)v8);
  sub_10007F30C((uint64_t)v11);
  sub_10007F30C((uint64_t)v14);
  sub_10007F30C((uint64_t)v16);
  return v21;
}

BOOL sub_10007EED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  int *v17;

  if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8))
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = v11 == v13 && v12 == v14;
    if (v15
      || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0), result = 0, (v16 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
        && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64))
      {
        v17 = (int *)type metadata accessor for DeviceSnapshot(0);
        if ((static UniversalControlDevice.DeviceType.== infix(_:_:)(a1 + v17[10], a2 + v17[10]) & 1) != 0
          && sub_10007DABC(*(_QWORD *)(a1 + v17[11]), *(_BYTE *)(a1 + v17[11] + 8), *(_QWORD *)(a2 + v17[11]), *(_BYTE *)(a2 + v17[11] + 8))&& *(_QWORD *)(a1 + v17[12]) == *(_QWORD *)(a2 + v17[12])&& *(_QWORD *)(a1 + v17[13]) == *(_QWORD *)(a2 + v17[13]))
        {
          return *(_QWORD *)(a1 + v17[14]) == *(_QWORD *)(a2 + v17[14]);
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_10007F01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v14;

  if (static UniversalControlUUID.compare(lhs:rhs:)(a7, a8) != -1
    && static UniversalControlUUID.compare(lhs:rhs:)(a3, a4) != -1)
  {
    v14 = a5 == a1 && a6 == a2;
    if (!v14 && (sub_100084FA4(a5, a6, a1, a2) & 1) == 0)
      sub_100084FA4(a1, a2, a5, a6);
  }
  sub_10002D8A4();
}

BOOL sub_10007F0DC(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_10007F0E8(uint64_t a1, uint64_t a2)
{
  return !sub_10007ECE0(a2, a1);
}

BOOL sub_10007F110(uint64_t a1, uint64_t a2)
{
  return (static UniversalControlLink.< infix(_:_:)(a2, a1) & 1) == 0;
}

void sub_10007F13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v14;

  if (static UniversalControlUUID.compare(lhs:rhs:)(a3, a4) != -1
    && static UniversalControlUUID.compare(lhs:rhs:)(a7, a8) != -1)
  {
    v14 = a1 == a5 && a2 == a6;
    if (!v14 && (sub_100084FA4(a1, a2, a5, a6) & 1) == 0)
      sub_100084FA4(a5, a6, a1, a2);
  }
  sub_10002D8A4();
}

BOOL sub_10007F204(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_10007F210(uint64_t a1, uint64_t a2)
{
  return !sub_10007ECE0(a1, a2);
}

BOOL sub_10007F22C(uint64_t a1, uint64_t a2)
{
  return (static UniversalControlLink.< infix(_:_:)(a1, a2) & 1) == 0;
}

void sub_10007F250()
{
  sub_1000840B4(&qword_1002ACFE8, 255, type metadata accessor for DeviceSnapshot, (uint64_t)&unk_10021F470);
}

uint64_t sub_10007F284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F30C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DeviceSnapshot(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007F348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceSnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10007F38C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_1000055B0(&qword_1002ACDB0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CC98();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_10007F410(v6);
  *a1 = v3;
}

void sub_10007F410(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  float v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  float v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  Swift::Int v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;

  v199 = type metadata accessor for DeviceSnapshot(0);
  v2 = __chkstk_darwin(v199);
  v190 = (uint64_t)&v170 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v170 - v5;
  v7 = __chkstk_darwin(v4);
  v201 = (uint64_t)&v170 - v8;
  v9 = __chkstk_darwin(v7);
  v200 = (uint64_t)&v170 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v170 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v170 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v170 - v18;
  __chkstk_darwin(v17);
  v188 = (uint64_t)&v170 - v20;
  v193 = sub_1000055B0(&qword_1002ACDB0);
  v187 = *(_QWORD *)(v193 - 8);
  v21 = __chkstk_darwin(v193);
  v181 = (uint64_t)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v194 = (uint64_t)&v170 - v24;
  v25 = __chkstk_darwin(v23);
  v196 = (uint64_t)&v170 - v26;
  v27 = __chkstk_darwin(v25);
  v195 = (uint64_t)&v170 - v28;
  v29 = __chkstk_darwin(v27);
  v184 = (uint64_t)&v170 - v30;
  v31 = __chkstk_darwin(v29);
  v183 = (uint64_t)&v170 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v170 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v170 - v36;
  v198 = a1;
  v38 = a1[1];
  v177 = _minimumMergeRunLength(_:)(v38);
  if (v177 >= v38)
  {
    if ((v38 & 0x8000000000000000) == 0)
    {
      if (v38)
        sub_100080638(0, v38, 1, v198);
      return;
    }
    goto LABEL_253;
  }
  sub_1000223D8(v38 / 2);
  v174 = v39;
  v186 = v40;
  v175 = v38;
  if (v38 <= 0)
  {
LABEL_217:
    v42 = _swiftEmptyArrayStorage;
    v108 = _swiftEmptyArrayStorage[2];
LABEL_218:
    if (v108 >= 2)
    {
      v161 = *v198;
      while (1)
      {
        v162 = v108 - 2;
        if (v108 < 2)
          break;
        if (!v161)
          goto LABEL_261;
        v163 = v42[2 * v162 + 4];
        v164 = v42[2 * v108 + 3];
        v165 = v189;
        sub_100080D20(v161 + *(_QWORD *)(v187 + 72) * v163, v161 + *(_QWORD *)(v187 + 72) * v42[2 * v108 + 2], v161 + *(_QWORD *)(v187 + 72) * v164, v186);
        v189 = v165;
        if (v165)
          goto LABEL_215;
        if (v164 < v163)
          goto LABEL_248;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10006CA50();
          v42 = v168;
        }
        if (v162 >= v42[2])
          goto LABEL_249;
        v166 = &v42[2 * v162 + 4];
        *v166 = v163;
        v166[1] = v164;
        v167 = v42[2];
        if (v108 > v167)
          goto LABEL_250;
        memmove(&v42[2 * v108 + 2], &v42[2 * v108 + 4], 16 * (v167 - v108));
        v42[2] = v167 - 1;
        v108 = v167 - 1;
        if (v167 <= 2)
          goto LABEL_229;
      }
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
      goto LABEL_254;
    }
LABEL_229:
    swift_bridgeObjectRelease(v42);
    if (v175 >= -1)
      goto LABEL_230;
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
    return;
  }
  v172 = v37;
  v173 = v35;
  v180 = v16;
  v41 = 0;
  v42 = _swiftEmptyArrayStorage;
  v43 = v38;
  v171 = v13;
  v185 = v19;
  while (2)
  {
    v44 = v41 + 1;
    v182 = v41;
    if (v41 + 1 >= v43)
    {
      v49 = v41 + 1;
      v68 = v177;
      goto LABEL_75;
    }
    v45 = *v198;
    v179 = v43;
    v46 = *(_QWORD *)(v187 + 72);
    v47 = (uint64_t)v172;
    sub_100081774(v45 + v46 * v44, (uint64_t)v172);
    v48 = (uint64_t)v173;
    sub_100081774(v45 + v46 * v41, (uint64_t)v173);
    LODWORD(v192) = sub_10007ECE0(v48 + *(int *)(v193 + 48), v47 + *(int *)(v193 + 48));
    sub_10000E36C(v48, &qword_1002ACDB0);
    sub_10000E36C(v47, &qword_1002ACDB0);
    v49 = v41 + 2;
    v178 = v45;
    v197 = v46;
    if (v41 + 2 >= v179)
    {
      v43 = v179;
      goto LABEL_58;
    }
    v176 = v42;
    v191 = v46 * v44;
    v50 = v45;
    v51 = v46 * v49;
    v52 = (uint64_t)v171;
    v43 = v179;
    while (1)
    {
      v53 = v49;
      v54 = v183;
      sub_100081774(v50 + v51, v183);
      v55 = v184;
      sub_100081774(v50 + v191, v184);
      v56 = *(int *)(v193 + 48);
      v57 = v54 + v56;
      v58 = v55 + v56;
      v59 = v188;
      sub_10007F284(v58, v188);
      sub_10007F284(v57, (uint64_t)v19);
      v60 = *(_QWORD *)(v59 + *(int *)(v199 + 52));
      v61 = RapportActivityLevel.unknown.unsafeMutableAddressor();
      if (*v61 != v60
        && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.idle.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.background.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.audio.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.screen.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.video.unsafeMutableAddressor() != v60
        && *RapportActivityLevel.watch.unsafeMutableAddressor() != v60)
      {
        v62 = 2.0;
        if (*RapportActivityLevel.user.unsafeMutableAddressor() == v60)
          goto LABEL_20;
        if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v60
          && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v60)
        {
          RapportActivityLevel.incorrect.unsafeMutableAddressor();
        }
      }
      v62 = 0.0;
      if ((RapportActivityLevel.isScreenOn.getter() & 1) != 0)
      {
        if (*(_BYTE *)(v188 + 56))
          v62 = 1.0;
        else
          v62 = *(float *)"fff?";
      }
LABEL_20:
      v63 = *(_QWORD *)&v19[*(int *)(v199 + 52)];
      if (*v61 == v63
        || *RapportActivityLevel.disabled.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.coverClosed.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.idle.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.background.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.audio.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.screen.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.video.unsafeMutableAddressor() == v63
        || *RapportActivityLevel.watch.unsafeMutableAddressor() == v63)
      {
        goto LABEL_29;
      }
      if (*RapportActivityLevel.user.unsafeMutableAddressor() != v63)
      {
        if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v63
          && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v63)
        {
          RapportActivityLevel.incorrect.unsafeMutableAddressor();
        }
LABEL_29:
        if ((RapportActivityLevel.isScreenOn.getter() & 1) != 0)
        {
          if (v19[56] == 1)
          {
            v64 = v62 <= 1.0;
            if (v62 < 1.0)
              goto LABEL_38;
          }
          else
          {
            v64 = v62 <= 0.9;
            if (v62 < 0.9)
              goto LABEL_38;
          }
          if (!v64)
            goto LABEL_36;
        }
        else if (v62 > 0.0)
        {
LABEL_36:
          v65 = 0;
          v66 = 0;
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      if (v62 < 2.0)
      {
LABEL_38:
        v65 = 0;
        v66 = 1;
        goto LABEL_46;
      }
LABEL_45:
      v66 = 0;
      v65 = 1;
LABEL_46:
      v67 = (uint64_t)v180;
      sub_10007F284(v188, (uint64_t)v180);
      sub_10007F284((uint64_t)v185, v52);
      if (v65)
        v66 = *(_QWORD *)(v67 + *(int *)(v199 + 48)) < *(_QWORD *)(v52 + *(int *)(v199 + 48));
      sub_10007F30C(v52);
      sub_10007F30C(v67);
      v19 = v185;
      sub_10007F30C((uint64_t)v185);
      sub_10007F30C(v188);
      sub_10000E36C(v184, &qword_1002ACDB0);
      sub_10000E36C(v183, &qword_1002ACDB0);
      if (((v192 ^ v66) & 1) != 0)
        break;
      v49 = v53 + 1;
      v50 += v197;
      if (v53 + 1 >= v43)
      {
        v49 = v43;
        v42 = v176;
        goto LABEL_57;
      }
    }
    v42 = v176;
    v49 = v53;
LABEL_57:
    v41 = v182;
LABEL_58:
    v68 = v177;
    if ((v192 & 1) != 0)
    {
      if (v49 >= v41)
      {
        if (v41 < v49)
        {
          v176 = v42;
          v69 = 0;
          v70 = v197;
          v71 = v197 * (v49 - 1);
          v72 = v41;
          v73 = v49 * v197;
          v74 = v72;
          v75 = v72 * v197;
          do
          {
            if (v74 != v49 + v69 - 1)
            {
              v76 = v178;
              if (!v178)
                goto LABEL_260;
              v77 = v49;
              v78 = v178 + v75;
              v192 = v178 + v71;
              sub_100084074(v178 + v75, v181, &qword_1002ACDB0);
              if (v75 < v71 || v78 >= v76 + v73)
              {
                v80 = v76 + v75;
                v81 = v192;
                swift_arrayInitWithTakeFrontToBack(v80, v192, 1, v193);
              }
              else
              {
                v81 = v192;
                if (v75 != v71)
                  swift_arrayInitWithTakeBackToFront(v78, v192, 1, v193);
              }
              sub_100084074(v181, v81, &qword_1002ACDB0);
              v49 = v77;
              v43 = v179;
              v70 = v197;
            }
            ++v74;
            --v69;
            v71 -= v70;
            v73 -= v70;
            v75 += v70;
          }
          while (v74 < v49 + v69);
          v42 = v176;
          v68 = v177;
          v41 = v182;
        }
        goto LABEL_75;
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
      goto LABEL_256;
    }
LABEL_75:
    if (v49 >= v43)
      goto LABEL_161;
    if (__OFSUB__(v49, v41))
      goto LABEL_252;
    if (v49 - v41 >= v68)
      goto LABEL_161;
    if (__OFADD__(v41, v68))
      goto LABEL_255;
    if (v41 + v68 >= v43)
      v82 = v43;
    else
      v82 = v41 + v68;
    if (v82 < v41)
    {
LABEL_256:
      __break(1u);
      goto LABEL_257;
    }
    if (v49 == v82)
      goto LABEL_161;
    v176 = v42;
    v83 = *(_QWORD *)(v187 + 72);
    v197 = v83 * (v49 - 1);
    v191 = v83;
    v84 = v49 * v83;
    v179 = v82;
    while (2)
    {
      v85 = 0;
      v192 = v49;
      while (2)
      {
        v86 = *v198;
        v87 = v195;
        sub_100081774(v84 + v85 + *v198, v195);
        v88 = v196;
        sub_100081774(v197 + v85 + v86, v196);
        v89 = *(int *)(v193 + 48);
        v90 = v87 + v89;
        v91 = v88 + v89;
        v92 = v200;
        sub_10007F284(v91, v200);
        sub_10007F284(v90, v201);
        v93 = *(_QWORD *)(v92 + *(int *)(v199 + 52));
        v94 = RapportActivityLevel.unknown.unsafeMutableAddressor();
        if (*v94 == v93
          || *RapportActivityLevel.disabled.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.coverClosed.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.idle.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.background.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.audio.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.screen.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.video.unsafeMutableAddressor() == v93
          || *RapportActivityLevel.watch.unsafeMutableAddressor() == v93)
        {
LABEL_99:
          v95 = 0.0;
          if (*v94 != v93
            && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v93
            && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v93
            && *RapportActivityLevel.idle.unsafeMutableAddressor() != v93
            && *RapportActivityLevel.background.unsafeMutableAddressor() != v93
            && *RapportActivityLevel.audio.unsafeMutableAddressor() != v93)
          {
            if (*RapportActivityLevel.screen.unsafeMutableAddressor() != v93
              && *RapportActivityLevel.video.unsafeMutableAddressor() != v93)
            {
              if (*RapportActivityLevel.watch.unsafeMutableAddressor() == v93)
                goto LABEL_110;
              if (*RapportActivityLevel.user.unsafeMutableAddressor() != v93)
              {
                if (*RapportActivityLevel.driving.unsafeMutableAddressor() == v93)
                  goto LABEL_110;
                if (*RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v93)
                {
                  RapportActivityLevel.incorrect.unsafeMutableAddressor();
                  goto LABEL_110;
                }
              }
            }
            if (*(_BYTE *)(v200 + 56))
              v95 = 1.0;
            else
              v95 = *(float *)"fff?";
          }
        }
        else
        {
          v95 = 2.0;
          if (*RapportActivityLevel.user.unsafeMutableAddressor() != v93)
          {
            if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v93
              && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v93)
            {
              RapportActivityLevel.incorrect.unsafeMutableAddressor();
            }
            goto LABEL_99;
          }
        }
LABEL_110:
        v96 = *(_QWORD *)(v201 + *(int *)(v199 + 52));
        if (*v94 != v96
          && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.idle.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.background.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.audio.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.screen.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.video.unsafeMutableAddressor() != v96
          && *RapportActivityLevel.watch.unsafeMutableAddressor() != v96)
        {
          if (*RapportActivityLevel.user.unsafeMutableAddressor() == v96)
          {
            if (v95 < 2.0)
              goto LABEL_152;
LABEL_139:
            v99 = 0;
            v98 = 1;
            goto LABEL_140;
          }
          if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v96
            && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v96)
          {
            RapportActivityLevel.incorrect.unsafeMutableAddressor();
          }
        }
        if (*v94 == v96
          || *RapportActivityLevel.disabled.unsafeMutableAddressor() == v96
          || *RapportActivityLevel.coverClosed.unsafeMutableAddressor() == v96
          || *RapportActivityLevel.idle.unsafeMutableAddressor() == v96
          || *RapportActivityLevel.background.unsafeMutableAddressor() == v96
          || *RapportActivityLevel.audio.unsafeMutableAddressor() == v96)
        {
LABEL_136:
          v97 = v95 <= 0.0;
        }
        else
        {
          if (*RapportActivityLevel.screen.unsafeMutableAddressor() != v96
            && *RapportActivityLevel.video.unsafeMutableAddressor() != v96)
          {
            if (*RapportActivityLevel.watch.unsafeMutableAddressor() == v96)
              goto LABEL_136;
            if (*RapportActivityLevel.user.unsafeMutableAddressor() != v96)
            {
              if (*RapportActivityLevel.driving.unsafeMutableAddressor() == v96)
                goto LABEL_136;
              if (*RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v96)
              {
                RapportActivityLevel.incorrect.unsafeMutableAddressor();
                goto LABEL_136;
              }
            }
          }
          if (*(_BYTE *)(v201 + 56) == 1)
          {
            v97 = v95 <= 1.0;
            if (v95 < 1.0)
            {
LABEL_152:
              v98 = 0;
              v99 = 1;
              goto LABEL_140;
            }
          }
          else
          {
            v97 = v95 <= 0.9;
            if (v95 < 0.9)
              goto LABEL_152;
          }
        }
        if (v97)
          goto LABEL_139;
        v98 = 0;
        v99 = 0;
LABEL_140:
        sub_10007F284(v200, (uint64_t)v6);
        v100 = (uint64_t)v6;
        v101 = v190;
        sub_10007F284(v201, v190);
        if (v98)
          v99 = *(_QWORD *)(v100 + *(int *)(v199 + 48)) < *(_QWORD *)(v101 + *(int *)(v199 + 48));
        sub_10007F30C(v101);
        sub_10007F30C(v100);
        sub_10007F30C(v201);
        sub_10007F30C(v200);
        sub_10000E36C(v196, &qword_1002ACDB0);
        sub_10000E36C(v195, &qword_1002ACDB0);
        v6 = (char *)v100;
        if (v99)
        {
          v102 = *v198;
          if (!*v198)
            goto LABEL_258;
          v103 = v102 + v84 + v85;
          v104 = v102 + v197 + v85;
          sub_100084074(v103, v194, &qword_1002ACDB0);
          swift_arrayInitWithTakeFrontToBack(v103, v104, 1, v193);
          sub_100084074(v194, v104, &qword_1002ACDB0);
          v105 = v192;
          v85 -= v191;
          if (v192 == ++v41)
            goto LABEL_159;
          continue;
        }
        break;
      }
      v105 = v192;
LABEL_159:
      v49 = v105 + 1;
      v197 += v191;
      v84 += v191;
      v41 = v182;
      if (v49 != v179)
        continue;
      break;
    }
    v49 = v179;
    v42 = v176;
LABEL_161:
    if (v49 < v41)
      goto LABEL_251;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
    v192 = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10006C984();
      v42 = v159;
    }
    v107 = v42[2];
    v108 = v107 + 1;
    if (v107 >= v42[3] >> 1)
    {
      sub_10006C984();
      v42 = v160;
    }
    v42[2] = v108;
    v109 = v42 + 4;
    v110 = &v42[2 * v107 + 4];
    v111 = v192;
    *v110 = v41;
    v110[1] = v111;
    if (!v107)
    {
      v108 = 1;
LABEL_209:
      v43 = v198[1];
      v41 = v192;
      v19 = v185;
      if (v192 >= v43)
        goto LABEL_218;
      continue;
    }
    break;
  }
  while (1)
  {
    v112 = v108 - 1;
    if (v108 >= 4)
    {
      v117 = &v109[2 * v108];
      v118 = *(v117 - 8);
      v119 = *(v117 - 7);
      v123 = __OFSUB__(v119, v118);
      v120 = v119 - v118;
      if (v123)
        goto LABEL_236;
      v122 = *(v117 - 6);
      v121 = *(v117 - 5);
      v123 = __OFSUB__(v121, v122);
      v115 = v121 - v122;
      v116 = v123;
      if (v123)
        goto LABEL_237;
      v124 = v108 - 2;
      v125 = &v109[2 * v108 - 4];
      v127 = *v125;
      v126 = v125[1];
      v123 = __OFSUB__(v126, v127);
      v128 = v126 - v127;
      if (v123)
        goto LABEL_238;
      v123 = __OFADD__(v115, v128);
      v129 = v115 + v128;
      if (v123)
        goto LABEL_240;
      if (v129 >= v120)
      {
        v147 = &v109[2 * v112];
        v149 = *v147;
        v148 = v147[1];
        v123 = __OFSUB__(v148, v149);
        v150 = v148 - v149;
        if (v123)
          goto LABEL_246;
        v140 = v115 < v150;
        goto LABEL_198;
      }
    }
    else
    {
      if (v108 != 3)
      {
        v141 = v42[4];
        v142 = v42[5];
        v123 = __OFSUB__(v142, v141);
        v134 = v142 - v141;
        v135 = v123;
        goto LABEL_192;
      }
      v114 = v42[4];
      v113 = v42[5];
      v123 = __OFSUB__(v113, v114);
      v115 = v113 - v114;
      v116 = v123;
    }
    if ((v116 & 1) != 0)
      goto LABEL_239;
    v124 = v108 - 2;
    v130 = &v109[2 * v108 - 4];
    v132 = *v130;
    v131 = v130[1];
    v133 = __OFSUB__(v131, v132);
    v134 = v131 - v132;
    v135 = v133;
    if (v133)
      goto LABEL_241;
    v136 = &v109[2 * v112];
    v138 = *v136;
    v137 = v136[1];
    v123 = __OFSUB__(v137, v138);
    v139 = v137 - v138;
    if (v123)
      goto LABEL_243;
    if (__OFADD__(v134, v139))
      goto LABEL_245;
    if (v134 + v139 >= v115)
    {
      v140 = v115 < v139;
LABEL_198:
      if (v140)
        v112 = v124;
      goto LABEL_200;
    }
LABEL_192:
    if ((v135 & 1) != 0)
      goto LABEL_242;
    v143 = &v109[2 * v112];
    v145 = *v143;
    v144 = v143[1];
    v123 = __OFSUB__(v144, v145);
    v146 = v144 - v145;
    if (v123)
      goto LABEL_244;
    if (v146 < v134)
      goto LABEL_209;
LABEL_200:
    v151 = v112 - 1;
    if (v112 - 1 >= v108)
    {
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      __break(1u);
LABEL_237:
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      __break(1u);
LABEL_240:
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
      goto LABEL_247;
    }
    if (!*v198)
      goto LABEL_259;
    v152 = v42;
    v153 = &v109[2 * v151];
    v154 = *v153;
    v155 = &v109[2 * v112];
    v156 = v155[1];
    v157 = v189;
    sub_100080D20(*v198 + *(_QWORD *)(v187 + 72) * *v153, *v198 + *(_QWORD *)(v187 + 72) * *v155, *v198 + *(_QWORD *)(v187 + 72) * v156, v186);
    v189 = v157;
    if (v157)
      break;
    if (v156 < v154)
      goto LABEL_233;
    if (v112 > v152[2])
      goto LABEL_234;
    *v153 = v154;
    v109[2 * v151 + 1] = v156;
    v158 = v152[2];
    if (v112 >= v158)
      goto LABEL_235;
    v42 = v152;
    v108 = v158 - 1;
    memmove(&v109[2 * v112], v155 + 2, 16 * (v158 - 1 - v112));
    v152[2] = v158 - 1;
    if (v158 <= 2)
      goto LABEL_209;
  }
  v42 = v152;
LABEL_215:
  swift_bridgeObjectRelease(v42);
  if (v175 < -1)
  {
    __break(1u);
    goto LABEL_217;
  }
LABEL_230:
  v169 = v174;
  *(_QWORD *)(v174 + 16) = 0;
  swift_bridgeObjectRelease(v169);
}

void sub_100080638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  float v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a4;
  v46 = a1;
  v58 = type metadata accessor for DeviceSnapshot(0);
  v6 = __chkstk_darwin(v58);
  v47 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v44 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v44 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v44 - v14;
  v51 = sub_1000055B0(&qword_1002ACDB0);
  v16 = __chkstk_darwin(v51);
  v52 = (uint64_t)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v56 = (uint64_t)&v44 - v19;
  __chkstk_darwin(v18);
  v55 = (uint64_t)&v44 - v21;
  v50 = a3;
  v45 = a2;
  if (a3 == a2)
    return;
  v22 = *(_QWORD *)(v20 + 72);
  v57 = v22 * (v50 - 1);
  v48 = v22;
  v23 = v22 * v50;
  while (2)
  {
    v24 = 0;
    v25 = v46;
    v49 = v23;
    do
    {
      v26 = *v54;
      v53 = v23 + v24;
      v27 = v23 + v24 + v26;
      v28 = v55;
      sub_100081774(v27, v55);
      v29 = v56;
      sub_100081774(v57 + v24 + v26, v56);
      v30 = *(int *)(v51 + 48);
      v31 = v28 + v30;
      sub_10007F284(v29 + v30, (uint64_t)v15);
      sub_10007F284(v31, (uint64_t)v13);
      v32 = *(_QWORD *)&v15[*(int *)(v58 + 52)];
      v33 = RapportActivityLevel.unknown.unsafeMutableAddressor();
      if (*v33 != v32
        && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.idle.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.background.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.audio.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.screen.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.video.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.watch.unsafeMutableAddressor() != v32)
      {
        v34 = 2.0;
        if (*RapportActivityLevel.user.unsafeMutableAddressor() == v32)
          goto LABEL_32;
        if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v32
          && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v32)
        {
          RapportActivityLevel.incorrect.unsafeMutableAddressor();
        }
      }
      v34 = 0.0;
      if (*v33 != v32
        && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.idle.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.background.unsafeMutableAddressor() != v32
        && *RapportActivityLevel.audio.unsafeMutableAddressor() != v32)
      {
        if (*RapportActivityLevel.screen.unsafeMutableAddressor() != v32
          && *RapportActivityLevel.video.unsafeMutableAddressor() != v32)
        {
          if (*RapportActivityLevel.watch.unsafeMutableAddressor() == v32)
            goto LABEL_32;
          if (*RapportActivityLevel.user.unsafeMutableAddressor() != v32)
          {
            if (*RapportActivityLevel.driving.unsafeMutableAddressor() == v32)
              goto LABEL_32;
            if (*RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v32)
            {
              RapportActivityLevel.incorrect.unsafeMutableAddressor();
              goto LABEL_32;
            }
          }
        }
        if (v15[56])
          v34 = 1.0;
        else
          v34 = *(float *)"fff?";
      }
LABEL_32:
      v35 = *(_QWORD *)&v13[*(int *)(v58 + 52)];
      if (*v33 != v35
        && *RapportActivityLevel.disabled.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.coverClosed.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.idle.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.background.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.audio.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.screen.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.video.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.watch.unsafeMutableAddressor() != v35)
      {
        if (*RapportActivityLevel.user.unsafeMutableAddressor() == v35)
        {
          if (v34 < 2.0)
            goto LABEL_73;
LABEL_56:
          v38 = 0;
          v37 = 1;
          goto LABEL_57;
        }
        if (*RapportActivityLevel.driving.unsafeMutableAddressor() != v35
          && *RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v35)
        {
          RapportActivityLevel.incorrect.unsafeMutableAddressor();
        }
      }
      if (*v33 == v35
        || *RapportActivityLevel.disabled.unsafeMutableAddressor() == v35
        || *RapportActivityLevel.coverClosed.unsafeMutableAddressor() == v35
        || *RapportActivityLevel.idle.unsafeMutableAddressor() == v35
        || *RapportActivityLevel.background.unsafeMutableAddressor() == v35
        || *RapportActivityLevel.audio.unsafeMutableAddressor() == v35)
      {
        goto LABEL_53;
      }
      if (*RapportActivityLevel.screen.unsafeMutableAddressor() != v35
        && *RapportActivityLevel.video.unsafeMutableAddressor() != v35)
      {
        if (*RapportActivityLevel.watch.unsafeMutableAddressor() == v35)
          goto LABEL_53;
        if (*RapportActivityLevel.user.unsafeMutableAddressor() != v35)
        {
          if (*RapportActivityLevel.driving.unsafeMutableAddressor() == v35)
            goto LABEL_53;
          if (*RapportActivityLevel.phoneCall.unsafeMutableAddressor() != v35)
          {
            RapportActivityLevel.incorrect.unsafeMutableAddressor();
LABEL_53:
            v36 = v34 <= 0.0;
            goto LABEL_54;
          }
        }
      }
      if (v13[56] == 1)
      {
        v36 = v34 <= 1.0;
        if (v34 < 1.0)
          goto LABEL_73;
      }
      else
      {
        v36 = v34 <= 0.9;
        if (v34 < 0.9)
        {
LABEL_73:
          v37 = 0;
          v38 = 1;
          goto LABEL_57;
        }
      }
LABEL_54:
      if (v36)
        goto LABEL_56;
      v37 = 0;
      v38 = 0;
LABEL_57:
      sub_10007F284((uint64_t)v15, (uint64_t)v10);
      v39 = (uint64_t)v10;
      v40 = v47;
      sub_10007F284((uint64_t)v13, v47);
      if (v37)
        v38 = *(_QWORD *)(v39 + *(int *)(v58 + 48)) < *(_QWORD *)(v40 + *(int *)(v58 + 48));
      sub_10007F30C(v40);
      sub_10007F30C(v39);
      sub_10007F30C((uint64_t)v13);
      sub_10007F30C((uint64_t)v15);
      sub_10000E36C(v56, &qword_1002ACDB0);
      sub_10000E36C(v55, &qword_1002ACDB0);
      v10 = (char *)v39;
      v23 = v49;
      if (!v38)
        break;
      v41 = *v54;
      if (!*v54)
      {
        __break(1u);
        return;
      }
      v42 = v41 + v49 + v24;
      v43 = v41 + v57 + v24;
      sub_100084074(v42, v52, &qword_1002ACDB0);
      swift_arrayInitWithTakeFrontToBack(v42, v43, 1, v51);
      sub_100084074(v52, v43, &qword_1002ACDB0);
      v24 -= v48;
      ++v25;
    }
    while (v50 != v25);
    v57 += v48;
    v23 += v48;
    if (++v50 != v45)
      continue;
    break;
  }
}

void sub_100080D20(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = sub_1000055B0(&qword_1002ACDB0);
  v8 = __chkstk_darwin(v51);
  v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (uint64_t)&v44 - v10;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v12 == -1)
    goto LABEL_76;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1)
    goto LABEL_77;
  v17 = v13 / v12;
  v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    sub_100079028(a2, v15 / v12);
    v19 = a4 + v18 * v12;
    if (v18 * v12 < 1 || a1 >= a2)
      goto LABEL_70;
    v47 = a4;
    v48 = -v12;
    v45 = a1;
    v46 = v12;
    while (1)
    {
      v30 = v48;
      v31 = v49;
      v32 = a3 + v48;
      v33 = v19 + v48;
      v34 = v19;
      sub_100081774(v19 + v48, v49);
      v35 = a2 + v30;
      v36 = a2 + v30;
      v37 = v50;
      sub_100081774(v36, v50);
      v38 = sub_10007ECE0(v37 + *(int *)(v51 + 48), v31 + *(int *)(v51 + 48));
      sub_10000E36C(v37, &qword_1002ACDB0);
      sub_10000E36C(v31, &qword_1002ACDB0);
      if (v38)
        break;
      if (a3 < v34 || v32 >= v34)
      {
        swift_arrayInitWithTakeFrontToBack(v32, v33, 1, v51);
        v19 = v33;
        a4 = v47;
LABEL_65:
        v12 = v46;
        a3 = v32;
        goto LABEL_66;
      }
      a4 = v47;
      if (a3 == v34)
      {
        v19 = v33;
        goto LABEL_65;
      }
      a3 = v32;
      swift_arrayInitWithTakeBackToFront(v32, v33, 1, v51);
      v19 = v33;
      v12 = v46;
LABEL_66:
      if (v19 <= a4 || a2 <= v45)
        goto LABEL_70;
    }
    if (a3 < a2 || v32 >= a2)
    {
      swift_arrayInitWithTakeFrontToBack(v32, v35, 1, v51);
      a2 = v35;
      a4 = v47;
    }
    else
    {
      a4 = v47;
      if (a3 != a2)
      {
        a3 = v32;
        swift_arrayInitWithTakeBackToFront(v32, v35, 1, v51);
        a2 = v35;
        v12 = v46;
LABEL_63:
        v19 = v34;
        goto LABEL_66;
      }
      a2 = v35;
    }
    v12 = v46;
    a3 = v32;
    goto LABEL_63;
  }
  sub_100079028(a1, v13 / v12);
  v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    do
    {
      v21 = v19;
      v22 = v49;
      sub_100081774(a2, v49);
      v23 = v50;
      sub_100081774(a4, v50);
      v24 = sub_10007ECE0(v23 + *(int *)(v51 + 48), v22 + *(int *)(v51 + 48));
      sub_10000E36C(v23, &qword_1002ACDB0);
      sub_10000E36C(v22, &qword_1002ACDB0);
      if (v24)
      {
        v25 = a2 + v12;
        if (a1 < a2 || a1 >= v25)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v51);
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1, v51);
        }
        v25 = a2;
        a4 += v12;
      }
      v19 = v21;
      a1 += v12;
      v28 = a4 >= v21 || v25 >= a3;
      a2 = v25;
    }
    while (!v28);
  }
LABEL_70:
  v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000)
  {
    sub_100079028(a4, v42 / v12);
    return;
  }
LABEL_78:
  __break(1u);
}

_QWORD *sub_100081110(uint64_t isStackAllocationSafe, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v16;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v10, v12);
    v13 = sub_1000829A0(v12, v10, v6, a2, (uint64_t)a3);
    if (v3)
      swift_willThrow(v13);
    else
      return v13;
  }
  else
  {
    v14 = (unint64_t *)swift_slowAlloc(v11, -1);
    sub_1001194A8(0, v10, v14);
    a3 = sub_1000829A0(v14, v10, v6, a2, (uint64_t)a3);
    swift_slowDealloc(v14, -1, -1);
  }
  return a3;
}

uint64_t sub_10008128C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v16;

  v6 = a1;
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v12 = (unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v9, v12);
    swift_bridgeObjectRetain(a3);
    v13 = sub_10008221C(v12, v9, v6, a2 & 1, a3);
    if (v3)
      swift_willThrow(v13);
    else
      v6 = v13;
    swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    v14 = (unint64_t *)swift_slowAlloc(v10, -1);
    sub_1001194A8(0, v9, v14);
    swift_bridgeObjectRetain(a3);
    v6 = sub_10008221C(v14, v9, v6, a2 & 1, a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  swift_bridgeObjectRelease(a3);
  return v6;
}

uint64_t sub_10008145C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t isStackAllocationSafe;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v15;

  v3 = v2;
  v5 = a1;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v11 = (unint64_t *)((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v8, v11);
    swift_retain(a2);
    v12 = sub_100081BBC(v11, v8, v5, a2);
    if (v3)
      swift_willThrow(v12);
    else
      v5 = v12;
    swift_release_n(a2, 2);
  }
  else
  {
    v13 = (unint64_t *)swift_slowAlloc(v9, -1);
    sub_1001194A8(0, v8, v13);
    swift_retain(a2);
    v5 = sub_100081BBC(v13, v8, v5, a2);
    swift_slowDealloc(v13, -1, -1);
    swift_release_n(a2, 2);
  }
  swift_release(a2);
  return v5;
}

_QWORD *sub_100081618(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v12;

  v2 = (_QWORD *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v6, v8);
    v9 = sub_1000817BC(v8, v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_1001194A8(0, v6, v10);
    v2 = sub_1000817BC(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

uint64_t sub_100081774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002ACDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000817BC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v40 = a2;
  v41 = a1;
  v55 = sub_1000055B0(&qword_1002ACDB0);
  v4 = __chkstk_darwin(v55);
  v46 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v45 = (char *)&v39 - v6;
  v7 = type metadata accessor for DeviceSnapshot(0);
  v48 = *(_QWORD *)(v7 - 8);
  result = (_QWORD *)__chkstk_darwin(v7);
  v47 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v50 = (_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 64);
  v42 = 0;
  v43 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v15 = (uint64_t)v47;
  while (1)
  {
    if (v14)
    {
      v53 = (v14 - 1) & v14;
      v54 = v10;
      v16 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_20;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v44)
      return sub_100082FEC(v41, v40, v42, v50);
    v18 = *(_QWORD *)(v43 + 8 * v17);
    v19 = v10 + 1;
    if (!v18)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v44)
        return sub_100082FEC(v41, v40, v42, v50);
      v18 = *(_QWORD *)(v43 + 8 * v19);
      if (!v18)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v44)
          return sub_100082FEC(v41, v40, v42, v50);
        v18 = *(_QWORD *)(v43 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_19:
    v53 = (v18 - 1) & v18;
    v54 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_20:
    v21 = v50[7];
    v22 = (unsigned __int8 *)(v50[6] + 16 * v16);
    v56 = *v22;
    v57 = v22[1];
    v58 = v22[2];
    v59 = v22[3];
    v60 = v22[4];
    v61 = v22[5];
    v62 = v22[6];
    v23 = v22[7];
    v24 = v22[8];
    v51 = v23;
    v52 = v24;
    v25 = v22[9];
    v26 = v22[10];
    v27 = v22[11];
    v28 = v22[12];
    v29 = v22[13];
    v63 = v22[14];
    v30 = *(_QWORD *)(v48 + 72);
    v49 = v16;
    v31 = v22[15];
    sub_10007F284(v21 + v30 * v16, v15);
    v32 = v45;
    v33 = (uint64_t)&v45[*(int *)(v55 + 48)];
    *v45 = v56;
    v32[1] = v57;
    v32[2] = v58;
    v32[3] = v59;
    v32[4] = v60;
    v32[5] = v61;
    v32[6] = v62;
    v32[7] = v23;
    v32[8] = v24;
    v32[9] = v25;
    v32[10] = v26;
    v32[11] = v27;
    v32[12] = v28;
    v32[13] = v29;
    v32[14] = v63;
    v32[15] = v31;
    v34 = v33;
    sub_10007F284(v15, v33);
    v35 = v46;
    v36 = (uint64_t)&v46[*(int *)(v55 + 48)];
    *v46 = v56;
    v35[1] = v57;
    v35[2] = v58;
    v35[3] = v59;
    v35[4] = v60;
    v35[5] = v61;
    v35[6] = v62;
    v35[7] = v51;
    v35[8] = v52;
    v35[9] = v25;
    v35[10] = v26;
    v35[11] = v27;
    v35[12] = v28;
    v35[13] = v29;
    v35[14] = v63;
    v35[15] = v31;
    sub_10007F2C8(v34, v36);
    v37 = *(unsigned __int8 *)(v36 + 16);
    sub_10007F30C(v36);
    result = (_QWORD *)sub_10007F30C(v15);
    v14 = v53;
    v10 = v54;
    if (v37 == 1)
    {
      *(unint64_t *)((char *)v41 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
      if (__OFADD__(v42++, 1))
      {
        __break(1u);
        return sub_100082FEC(v41, v40, v42, v50);
      }
    }
  }
  v20 = v10 + 4;
  if (v10 + 4 >= v44)
    return sub_100082FEC(v41, v40, v42, v50);
  v18 = *(_QWORD *)(v43 + 8 * v20);
  if (v18)
  {
    v19 = v10 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v44)
      return sub_100082FEC(v41, v40, v42, v50);
    v18 = *(_QWORD *)(v43 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100081BBC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v68 = a4;
  v56 = a2;
  v57 = a1;
  v5 = sub_1000055B0(&qword_1002ACDB0);
  v6 = __chkstk_darwin(v5);
  v60 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v64 = (char *)&v55 - v9;
  __chkstk_darwin(v8);
  v65 = (char *)&v55 - v10;
  v59 = type metadata accessor for DeviceSnapshot(0);
  v66 = *(_QWORD *)(v59 - 8);
  result = __chkstk_darwin(v59);
  v75 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = 0;
  v13 = 0;
  v67 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v61 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v62 = (unint64_t)(v15 + 63) >> 6;
  v74 = v5;
  while (1)
  {
    if (v17)
    {
      v71 = (v17 - 1) & v17;
      v72 = v13;
      v18 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_17;
    }
    v19 = __OFADD__(v13, 1);
    v20 = v13 + 1;
    if (v19)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v62)
      goto LABEL_30;
    v21 = *(_QWORD *)(v61 + 8 * v20);
    if (!v21)
      break;
LABEL_16:
    v71 = (v21 - 1) & v21;
    v72 = v20;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_17:
    v23 = v67[7];
    v24 = (unsigned __int8 *)(v67[6] + 16 * v18);
    v25 = *v24;
    v26 = v24[1];
    v86 = v24[2];
    v27 = v24[3];
    v81 = v25;
    v82 = v27;
    v87 = v24[4];
    v88 = v24[5];
    v28 = v24[6];
    v79 = v24[7];
    v29 = v24[8];
    v83 = v28;
    v84 = v29;
    v30 = v24[9];
    v31 = v24[10];
    v32 = v24[11];
    v89 = v24[12];
    v33 = v24[13];
    v85 = v24[14];
    v34 = *(_QWORD *)(v66 + 72);
    v63 = v18;
    v80 = v24[15];
    v35 = v75;
    sub_10007F284(v23 + v34 * v18, v75);
    v36 = v65;
    v73 = &v65[*(int *)(v74 + 48)];
    v37 = (uint64_t)v73;
    *v65 = v25;
    v76 = v26;
    v77 = v31;
    v36[1] = v26;
    v36[2] = v86;
    v36[3] = v27;
    v36[4] = v87;
    v36[5] = v88;
    v36[6] = v28;
    v38 = v79;
    v36[7] = v79;
    v39 = v85;
    v36[8] = v84;
    v36[9] = v30;
    v36[10] = v31;
    v36[11] = v32;
    v78 = v32;
    v36[12] = v89;
    v36[13] = v33;
    v36[14] = v39;
    v36[15] = v80;
    sub_10007F284(v35, v37);
    v40 = *(_QWORD *)(v68 + 120);
    v41 = v81 | (v26 << 8) | (v86 << 16) | (v82 << 24) | (v87 << 32) | (v88 << 40) | (v83 << 48) | (v38 << 56);
    LOBYTE(v38) = v84;
    v42 = v80;
    v43 = v84 | (v30 << 8) | (v31 << 16) | (v32 << 24) | (v89 << 32) | (v33 << 40) | (v39 << 48) | (v80 << 56);
    swift_bridgeObjectRetain(v40);
    sub_10018F420(v41, v43, v40);
    LOBYTE(v43) = v44;
    swift_bridgeObjectRelease(v40);
    v45 = v74;
    v46 = v64;
    v47 = (uint64_t)&v64[*(int *)(v74 + 48)];
    *v64 = v81;
    v46[1] = v76;
    v46[2] = v86;
    v46[3] = v82;
    v46[4] = v87;
    v48 = v79;
    v46[5] = v88;
    v46[6] = v83;
    v46[7] = v48;
    v46[8] = v38;
    v69 = v30;
    v70 = v33;
    v46[9] = v30;
    v46[10] = v77;
    v46[11] = v78;
    v49 = (uint64_t)v46;
    v46[12] = v89;
    v46[13] = v33;
    v46[14] = v85;
    v46[15] = v42;
    sub_10007F2C8((uint64_t)v73, v47);
    if ((v43 & 1) == 0)
    {
      sub_10000E36C(v49, &qword_1002ACDB0);
      goto LABEL_25;
    }
    v50 = v60;
    v51 = (uint64_t)&v60[*(int *)(v45 + 48)];
    *v60 = v81;
    v50[1] = v76;
    v50[2] = v86;
    v50[3] = v82;
    v50[4] = v87;
    v50[5] = v88;
    v50[6] = v83;
    v50[7] = v48;
    v50[8] = v84;
    v50[9] = v69;
    v50[10] = v77;
    v50[11] = v78;
    v50[12] = v89;
    v50[13] = v70;
    v50[14] = v85;
    v50[15] = v42;
    sub_10007F2C8(v47, v51);
    v52 = v51 + *(int *)(v59 + 44);
    if (*(_BYTE *)(v52 + 8) == 1)
    {
      v53 = *(_QWORD *)v52;
      sub_10007F30C(v51);
      result = sub_10007F30C(v75);
      v17 = v71;
      v13 = v72;
      if (v53)
      {
        *(unint64_t *)((char *)v57 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
        v19 = __OFADD__(v58++, 1);
        if (v19)
          goto LABEL_33;
      }
    }
    else
    {
      sub_10007F30C(v51);
LABEL_25:
      v17 = v71;
      v13 = v72;
      result = sub_10007F30C(v75);
    }
  }
  v22 = v20 + 1;
  if (v20 + 1 >= v62)
    goto LABEL_30;
  v21 = *(_QWORD *)(v61 + 8 * v22);
  if (v21)
    goto LABEL_15;
  v22 = v20 + 2;
  if (v20 + 2 >= v62)
    goto LABEL_30;
  v21 = *(_QWORD *)(v61 + 8 * v22);
  if (v21)
    goto LABEL_15;
  v22 = v20 + 3;
  if (v20 + 3 >= v62)
  {
LABEL_30:
    v54 = sub_100082FEC(v57, v56, v58, v67);
    swift_release(v68);
    return (uint64_t)v54;
  }
  v21 = *(_QWORD *)(v61 + 8 * v22);
  if (v21)
  {
LABEL_15:
    v20 = v22;
    goto LABEL_16;
  }
  while (1)
  {
    v20 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v20 >= v62)
      goto LABEL_30;
    v21 = *(_QWORD *)(v61 + 8 * v20);
    ++v22;
    if (v21)
      goto LABEL_16;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10008221C(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  _BOOL4 v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  int64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v82 = a5;
  v81 = a4;
  v77 = a2;
  v78 = a1;
  v6 = sub_1000055B0(&qword_1002ACDB0);
  v7 = __chkstk_darwin(v6);
  v80 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v91 = (char *)&v76 - v10;
  v11 = __chkstk_darwin(v9);
  v86 = (char *)&v76 - v12;
  __chkstk_darwin(v11);
  v96 = (char *)&v76 - v13;
  v88 = type metadata accessor for DeviceSnapshot(0);
  v87 = *(_QWORD *)(v88 - 8);
  result = __chkstk_darwin(v88);
  v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = 0;
  v17 = 0;
  v90 = (_QWORD *)a3;
  v18 = *(_QWORD *)(a3 + 64);
  v83 = a3 + 64;
  v19 = 1 << *(_BYTE *)(a3 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v84 = (unint64_t)(v19 + 63) >> 6;
  v106 = v6;
  v85 = v16;
  while (v21)
  {
    v92 = (v21 - 1) & v21;
    v93 = v17;
    v22 = __clz(__rbit64(v21)) | (v17 << 6);
LABEL_20:
    v27 = v90[7];
    v28 = (char *)(v90[6] + 16 * v22);
    v29 = *v28;
    v30 = v28[1];
    v31 = v28[2];
    v32 = v28[3];
    v108 = *v28;
    v109 = v32;
    v33 = v28[4];
    v34 = v28[5];
    v110 = v33;
    v111 = v34;
    v35 = v28[6];
    v97 = v31;
    v98 = v35;
    v36 = v28[7];
    v100 = v28[8];
    v37 = v28[9];
    v104 = v30;
    v105 = v37;
    v38 = v28[10];
    v99 = v28[11];
    v102 = v28[12];
    v103 = v28[13];
    v112 = v28[14];
    v39 = *(_QWORD *)(v87 + 72);
    v89 = v22;
    v107 = v28[15];
    sub_10007F284(v27 + v39 * v22, (uint64_t)v16);
    v40 = v96;
    v101 = &v96[*(int *)(v106 + 48)];
    v41 = (uint64_t)v101;
    *v96 = v29;
    v40[1] = v30;
    v40[2] = v31;
    v40[3] = v32;
    v40[4] = v33;
    v40[5] = v34;
    LOBYTE(v31) = v98;
    LOBYTE(v30) = v99;
    v40[6] = v98;
    v40[7] = v36;
    v42 = v36;
    LOBYTE(v32) = v100;
    v40[8] = v100;
    LOBYTE(v36) = v105;
    v40[9] = v105;
    v40[10] = v38;
    v40[11] = v30;
    v43 = v102;
    LOBYTE(v34) = v103;
    v40[12] = v102;
    v40[13] = v34;
    v40[14] = v112;
    v44 = v107;
    v40[15] = v107;
    v45 = (uint64_t)v16;
    v46 = v43;
    sub_10007F284(v45, v41);
    v47 = v36;
    v48 = v38;
    v49 = v31;
    v50 = v42;
    v51 = v86;
    v52 = (uint64_t)&v86[*(int *)(v106 + 48)];
    *v86 = v108;
    v53 = v97;
    v51[1] = v104;
    v51[2] = v53;
    v51[3] = v109;
    v51[4] = v110;
    v54 = v49;
    v51[5] = v111;
    v51[6] = v49;
    v51[7] = v50;
    v51[8] = v32;
    v51[9] = v47;
    v95 = v48;
    v51[10] = v48;
    v51[11] = v30;
    v51[12] = v46;
    v51[13] = v34;
    v51[14] = v112;
    v51[15] = v44;
    sub_10007F284((uint64_t)v101, v52);
    v55 = v52 + *(int *)(v88 + 44);
    v56 = *(_BYTE *)(v55 + 8) != 1 || *(_QWORD *)v55 == 0;
    v94 = v56;
    v57 = v91;
    sub_10007F30C(v52);
    v58 = (uint64_t)&v57[*(int *)(v106 + 48)];
    *v57 = v108;
    v59 = v104;
    v57[1] = v104;
    v57[2] = v53;
    v57[3] = v109;
    v57[4] = v110;
    v57[5] = v111;
    v57[6] = v54;
    v60 = v50;
    v57[7] = v50;
    v62 = v99;
    v61 = v100;
    v57[8] = v100;
    v63 = v105;
    v57[9] = v105;
    v64 = v95;
    v57[10] = v95;
    v57[11] = v62;
    v65 = v102;
    v66 = v103;
    v57[12] = v102;
    v57[13] = v66;
    v57[14] = v112;
    v57[15] = v107;
    v67 = (uint64_t)v101;
    v101 = (_BYTE *)v58;
    sub_10007F284(v67, v58);
    if (v94)
    {
      v68 = v61;
      v69 = v80;
      v70 = (uint64_t)&v80[*(int *)(v106 + 48)];
      *v80 = v108;
      v69[1] = v59;
      v69[2] = v97;
      v69[3] = v109;
      v69[4] = v110;
      v69[5] = v111;
      v69[6] = v98;
      v69[7] = v60;
      v69[8] = v68;
      v69[9] = v63;
      v69[10] = v64;
      v69[11] = v62;
      v69[12] = v65;
      v69[13] = v66;
      v69[14] = v112;
      v69[15] = v107;
      sub_10007F284((uint64_t)v101, v70);
      if ((v81 & 1) != 0)
      {
        sub_10000E36C((uint64_t)v69, &qword_1002ACDB0);
        sub_10000E36C((uint64_t)v91, &qword_1002ACDB0);
        sub_10000E36C((uint64_t)v96, &qword_1002ACDB0);
        v16 = v85;
        result = sub_10007F30C((uint64_t)v85);
        v21 = v92;
        v17 = v93;
LABEL_29:
        *(unint64_t *)((char *)v78 + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v89;
        if (__OFADD__(v79++, 1))
        {
          __break(1u);
LABEL_32:
          v75 = sub_100082FEC(v78, v77, v79, v90);
          swift_bridgeObjectRelease(v82);
          return (uint64_t)v75;
        }
      }
      else
      {
        sub_10018F420(v108 | (v59 << 8) | (v97 << 16) | (v109 << 24) | (v110 << 32) | (v111 << 40) | (v98 << 48) | (v60 << 56), v68 | (v63 << 8) | (v64 << 16) | (v62 << 24) | (v65 << 32) | (v66 << 40) | (v112 << 48) | (v107 << 56), v82);
        v71 = (uint64_t)v69;
        v73 = v72;
        sub_10000E36C(v71, &qword_1002ACDB0);
        sub_10000E36C((uint64_t)v91, &qword_1002ACDB0);
        sub_10000E36C((uint64_t)v96, &qword_1002ACDB0);
        v16 = v85;
        result = sub_10007F30C((uint64_t)v85);
        v21 = v92;
        v17 = v93;
        if ((v73 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {
      sub_10000E36C((uint64_t)v57, &qword_1002ACDB0);
      sub_10000E36C((uint64_t)v96, &qword_1002ACDB0);
      v16 = v85;
      result = sub_10007F30C((uint64_t)v85);
      v21 = v92;
      v17 = v93;
    }
  }
  v23 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v23 >= v84)
    goto LABEL_32;
  v24 = *(_QWORD *)(v83 + 8 * v23);
  v25 = v17 + 1;
  if (v24)
    goto LABEL_19;
  v25 = v17 + 2;
  if (v17 + 2 >= v84)
    goto LABEL_32;
  v24 = *(_QWORD *)(v83 + 8 * v25);
  if (v24)
    goto LABEL_19;
  v25 = v17 + 3;
  if (v17 + 3 >= v84)
    goto LABEL_32;
  v24 = *(_QWORD *)(v83 + 8 * v25);
  if (v24)
  {
LABEL_19:
    v92 = (v24 - 1) & v24;
    v93 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_20;
  }
  v26 = v17 + 4;
  if (v17 + 4 >= v84)
    goto LABEL_32;
  v24 = *(_QWORD *)(v83 + 8 * v26);
  if (v24)
  {
    v25 = v17 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v84)
      goto LABEL_32;
    v24 = *(_QWORD *)(v83 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_19;
  }
LABEL_34:
  __break(1u);
  return result;
}

_QWORD *sub_1000829A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v48 = a4;
  v49 = a5;
  v41 = a2;
  v42 = a1;
  v47 = sub_1000055B0(&qword_1002ACDB0);
  __chkstk_darwin(v47);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DeviceSnapshot(0);
  v46 = *(_QWORD *)(v8 - 8);
  result = (_QWORD *)__chkstk_darwin(v8);
  v61 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = 0;
  v11 = 0;
  v51 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v44 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v45 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v59 = (v15 - 1) & v15;
      v60 = v11;
      v16 = __clz(__rbit64(v15)) | (v11 << 6);
      goto LABEL_20;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v45)
      return sub_100082FEC(v42, v41, v43, v51);
    v18 = *(_QWORD *)(v44 + 8 * v17);
    v19 = v11 + 1;
    if (!v18)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v45)
        return sub_100082FEC(v42, v41, v43, v51);
      v18 = *(_QWORD *)(v44 + 8 * v19);
      if (!v18)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v45)
          return sub_100082FEC(v42, v41, v43, v51);
        v18 = *(_QWORD *)(v44 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_19:
    v59 = (v18 - 1) & v18;
    v60 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_20:
    v21 = v51[7];
    v22 = (unsigned __int8 *)(v51[6] + 16 * v16);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    v26 = v22[3];
    v27 = v22[4];
    v28 = v22[5];
    v56 = v28;
    v57 = v23;
    v29 = v22[6];
    v55 = v29;
    v30 = v22[8];
    v53 = v25;
    v54 = v30;
    v31 = v22[9];
    v62 = v22[10];
    v63 = v22[11];
    v64 = v22[12];
    v65 = v22[13];
    v66 = v22[14];
    v32 = *(_QWORD *)(v46 + 72);
    v50 = v16;
    v52 = v22[7];
    v58 = v22[15];
    sub_10007F284(v21 + v32 * v16, v61);
    *v7 = v23;
    v7[1] = v24;
    v33 = v53;
    v7[2] = v53;
    v7[3] = v26;
    v7[4] = v27;
    v7[5] = v28;
    v7[6] = v29;
    v34 = v52;
    v7[7] = v52;
    v7[8] = v30;
    v7[9] = v31;
    v35 = v61;
    v7[10] = v62;
    v7[11] = v63;
    v7[12] = v64;
    v7[13] = v65;
    v7[14] = v66;
    v36 = (uint64_t)&v7[*(int *)(v47 + 48)];
    v37 = v58;
    v7[15] = v58;
    sub_10007F284(v35, v36);
    v38 = static UniversalControlUUID.compare(lhs:rhs:)(v57 | (v24 << 8) | (v33 << 16) | (v26 << 24) | (v27 << 32) | (v56 << 40) | (v55 << 48) | (v34 << 56), v54 | (v31 << 8) | (v62 << 16) | (v63 << 24) | (v64 << 32) | (v65 << 40) | (v66 << 48) | (v37 << 56), v48, v49);
    sub_10000E36C((uint64_t)v7, &qword_1002ACDB0);
    result = (_QWORD *)sub_10007F30C(v35);
    v15 = v59;
    v11 = v60;
    if (!v38)
    {
      *(unint64_t *)((char *)v42 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
      if (__OFADD__(v43++, 1))
      {
        __break(1u);
        return sub_100082FEC(v42, v41, v43, v51);
      }
    }
  }
  v20 = v11 + 4;
  if (v11 + 4 >= v45)
    return sub_100082FEC(v42, v41, v43, v51);
  v18 = *(_QWORD *)(v44 + 8 * v20);
  if (v18)
  {
    v19 = v11 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v45)
      return sub_100082FEC(v42, v41, v43, v51);
    v18 = *(_QWORD *)(v44 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *sub_100082DA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100084F78(a1, a2, a3);
}

unint64_t sub_100082DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t *v24;
  __int128 v25[4];

  if (!a3)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10008504C();
  if (v7)
  {
    swift_retain(v3);
    return v3;
  }
  v8 = v6;
  v9 = v5;
  sub_1000055B0(&qword_1002AD098);
  result = sub_100084F80();
  v11 = result;
  v24 = v9;
  if (v8 < 1)
    v12 = 0;
  else
    v12 = *v9;
  v13 = 0;
  v14 = result + 64;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v13 << 6);
    }
    else
    {
      v17 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_31;
      if (v17 >= v8)
        return v11;
      v18 = v24[v17];
      ++v13;
      if (!v18)
      {
        v13 = v17 + 1;
        if (v17 + 1 >= v8)
          return v11;
        v18 = v24[v13];
        if (!v18)
        {
          v13 = v17 + 2;
          if (v17 + 2 >= v8)
            return v11;
          v18 = v24[v13];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v8)
              return v11;
            v18 = v24[v19];
            if (!v18)
            {
              while (1)
              {
                v13 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_32;
                if (v13 >= v8)
                  return v11;
                v18 = v24[v13];
                ++v19;
                if (v18)
                  goto LABEL_25;
              }
            }
            v13 = v19;
          }
        }
      }
LABEL_25:
      v12 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    Hasher.init(_seed:)(v25, *(_QWORD *)(v11 + 40));
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    sub_100083E80(v25, v20);
    v22 = sub_10004740C();
    result = _HashTable.nextHole(atOrAfter:)(v22 & ~(-1 << *(_BYTE *)(v11 + 32)), v11 + 64, ~(-1 << *(_BYTE *)(v11 + 32)));
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * result) = v20;
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * result) = v21;
    ++*(_QWORD *)(v11 + 16);
    if (__OFSUB__(v4--, 1))
      break;
    if (!v4)
      return v11;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

_QWORD *sub_100082FEC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  _BYTE v73[16];
  _QWORD v74[8];

  v45 = a2;
  v44 = a1;
  v6 = type metadata accessor for DeviceSnapshot(0);
  v50 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v49 = (uint64_t)&v43 - v9;
  if (!a3)
    return &_swiftEmptyDictionarySingleton;
  if (a4[2] != a3)
  {
    v65 = v8;
    sub_1000055B0(&qword_1002AD040);
    v72 = static _DictionaryStorage.allocate(capacity:)(a3);
    if (v45 < 1)
      v10 = 0;
    else
      v10 = *v44;
    v11 = 0;
    v48 = v74;
    v47 = v72 + 64;
    v46 = a4;
    while (1)
    {
      v64 = a3;
      if (v10)
      {
        v51 = (v10 - 1) & v10;
        v52 = v11;
        v12 = __clz(__rbit64(v10)) | (v11 << 6);
      }
      else
      {
        v13 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_40;
        if (v13 >= v45)
          return (_QWORD *)v72;
        v14 = v44[v13];
        v15 = v11 + 1;
        if (!v14)
        {
          v15 = v11 + 2;
          if (v11 + 2 >= v45)
            return (_QWORD *)v72;
          v14 = v44[v15];
          if (!v14)
          {
            v15 = v11 + 3;
            if (v11 + 3 >= v45)
              return (_QWORD *)v72;
            v14 = v44[v15];
            if (!v14)
            {
              v16 = v11 + 4;
              if (v11 + 4 >= v45)
                return (_QWORD *)v72;
              v14 = v44[v16];
              if (!v14)
              {
                while (1)
                {
                  v15 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_41;
                  if (v15 >= v45)
                    return (_QWORD *)v72;
                  v14 = v44[v15];
                  ++v16;
                  if (v14)
                    goto LABEL_24;
                }
              }
              v15 = v11 + 4;
            }
          }
        }
LABEL_24:
        v51 = (v14 - 1) & v14;
        v52 = v15;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      v17 = a4[7];
      v18 = (unsigned __int8 *)(a4[6] + 16 * v12);
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      v22 = v18[3];
      v23 = v18[4];
      v24 = v18[5];
      v25 = v18[6];
      v26 = v18[7];
      v27 = v18[8];
      v66 = v18[9];
      v67 = v18[10];
      v68 = v18[11];
      v69 = v18[12];
      v70 = v18[13];
      v71 = v18[14];
      v62 = *(_QWORD *)(v50 + 72);
      v63 = v18[15];
      v28 = v49;
      sub_10007F284(v17 + v62 * v12, v49);
      sub_10007F2C8(v28, v65);
      Hasher.init(_seed:)(v74, *(_QWORD *)(v72 + 40));
      v53 = v19;
      v73[0] = v19;
      v54 = v20;
      v73[1] = v20;
      v55 = v21;
      v73[2] = v21;
      v56 = v22;
      v73[3] = v22;
      v57 = v23;
      v73[4] = v23;
      v58 = v24;
      v73[5] = v24;
      v59 = v25;
      v73[6] = v25;
      v60 = v26;
      v61 = v27;
      v73[7] = v26;
      v73[8] = v27;
      v73[9] = v66;
      v73[10] = v67;
      v73[11] = v68;
      v73[12] = v69;
      v73[13] = v70;
      v29 = v63;
      v73[14] = v71;
      v73[15] = v63;
      Hasher.combine(bytes:)(v73, v48);
      v30 = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v72 + 32);
      v32 = v30 & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v47 + 8 * (v32 >> 6))) != 0)
      {
        v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v47 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
        v35 = v65;
        goto LABEL_34;
      }
      v36 = 0;
      v37 = (unint64_t)(63 - v31) >> 6;
      v35 = v65;
      do
      {
        if (++v33 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
        }
        v38 = v33 == v37;
        if (v33 == v37)
          v33 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v47 + 8 * v33);
      }
      while (v39 == -1);
      v34 = __clz(__rbit64(~v39)) + (v33 << 6);
LABEL_34:
      *(_QWORD *)(v47 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      v40 = v72;
      v41 = (_BYTE *)(*(_QWORD *)(v72 + 48) + 16 * v34);
      *v41 = v53;
      v41[1] = v54;
      v41[2] = v55;
      v41[3] = v56;
      v41[4] = v57;
      v41[5] = v58;
      v41[6] = v59;
      v41[7] = v60;
      v41[8] = v61;
      v41[9] = v66;
      v41[10] = v67;
      v41[11] = v68;
      v41[12] = v69;
      v41[13] = v70;
      v41[14] = v71;
      v41[15] = v29;
      sub_10007F2C8(v35, *(_QWORD *)(v40 + 56) + v34 * v62);
      ++*(_QWORD *)(v40 + 16);
      a3 = v64 - 1;
      if (__OFSUB__(v64, 1))
        goto LABEL_39;
      a4 = v46;
      v11 = v52;
      v10 = v51;
      if (v64 == 1)
        return (_QWORD *)v72;
    }
  }
  swift_retain(a4);
  return a4;
}

_QWORD *sub_100083594(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100084F78(a1, a2, a3);
}

_QWORD *sub_1000835DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _BYTE *v44;
  BOOL v45;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD *v62;
  _BYTE v63[16];
  _QWORD v64[9];

  if (!a3)
    return &_swiftEmptyDictionarySingleton;
  sub_10008504C();
  if (!v6)
  {
    sub_1000055B0(v5);
    v7 = sub_100084F80();
    v62 = (_QWORD *)v7;
    if (a2 < 1)
      v8 = 0;
    else
      v8 = *a1;
    v9 = 0;
    v50 = v7 + 64;
    v49 = v3;
    while (1)
    {
      v55 = v4;
      if (v8)
      {
        sub_1000850C8();
        v51 = v11;
        v52 = v10;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v9 + 1;
        if (__OFADD__(v9, 1))
          goto LABEL_40;
        if (v14 >= a2)
          return v62;
        if (!a1[v14])
        {
          if (v9 + 2 >= a2)
            return v62;
          if (!a1[v9 + 2])
          {
            if (v9 + 3 >= a2)
              return v62;
            if (!a1[v9 + 3])
            {
              v15 = v9 + 4;
              if (v9 + 4 >= a2)
                return v62;
              if (!a1[v15])
              {
                do
                {
                  v16 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_41;
                  if (v16 >= a2)
                    return v62;
                  ++v15;
                }
                while (!a1[v16]);
              }
            }
          }
        }
        sub_100085158();
        v51 = v17;
        v52 = v18;
        v13 = v19 + (v18 << 6);
      }
      v20 = *(_QWORD *)(v3 + 56);
      v21 = (char *)(*(_QWORD *)(v3 + 48) + 16 * v13);
      v56 = *v21;
      v22 = v21[1];
      v23 = v21[2];
      v24 = v21[3];
      v25 = v21[4];
      v26 = v21[5];
      v27 = v21[6];
      v28 = v21[7];
      v29 = v21[8];
      v30 = v21[9];
      v31 = v21[10];
      v57 = v21[11];
      v58 = v21[12];
      v59 = v21[13];
      v60 = v21[14];
      v61 = v21[15];
      v54 = *(_QWORD *)(v20 + 8 * v13);
      Hasher.init(_seed:)(v64, v62[5]);
      v63[0] = v56;
      v63[1] = v22;
      v63[2] = v23;
      v63[3] = v24;
      v63[4] = v25;
      v63[5] = v26;
      v63[6] = v27;
      v53 = v29;
      v63[7] = v28;
      v63[8] = v29;
      v63[9] = v30;
      v63[10] = v31;
      v63[11] = v57;
      v63[12] = v58;
      v63[13] = v59;
      v63[14] = v60;
      v63[15] = v61;
      Hasher.combine(bytes:)(v63, v64);
      Hasher._finalize()();
      sub_100085138();
      v33 = v50;
      v36 = (v35 << v32) & ~*(_QWORD *)(v50 + 8 * v34);
      if (v36)
      {
        v37 = __clz(__rbit64(v36)) | v32 & 0x7FFFFFFFFFFFFFC0;
        v38 = v55;
        goto LABEL_34;
      }
      sub_100060314();
      v38 = v55;
      do
      {
        if (++v40 == v41 && (v39 & 1) != 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
        }
        v42 = v40 == v41;
        if (v40 == v41)
          v40 = 0;
        v39 |= v42;
        v43 = *(_QWORD *)(v33 + 8 * v40);
      }
      while (v43 == -1);
      v37 = __clz(__rbit64(~v43)) + (v40 << 6);
LABEL_34:
      *(_QWORD *)(v33 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
      v44 = (_BYTE *)(v62[6] + 16 * v37);
      *v44 = v56;
      v44[1] = v22;
      v44[2] = v23;
      v44[3] = v24;
      v44[4] = v25;
      v44[5] = v26;
      v44[6] = v27;
      v44[7] = v28;
      v44[8] = v53;
      v44[9] = v30;
      v44[10] = v31;
      v44[11] = v57;
      v44[12] = v58;
      v44[13] = v59;
      v44[14] = v60;
      v44[15] = v61;
      *(_QWORD *)(v62[7] + 8 * v37) = v54;
      ++v62[2];
      v45 = __OFSUB__(v38, 1);
      v4 = v38 - 1;
      if (v45)
        goto LABEL_39;
      swift_retain();
      v3 = v49;
      v8 = v51;
      v9 = v52;
      if (!v4)
        return v62;
    }
  }
  swift_retain();
  return (_QWORD *)v3;
}

void sub_1000839E4(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v59 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10003D69C();
  v58 = v9;
  __chkstk_darwin(v10);
  sub_100026A8C();
  v50 = v11;
  if (!a3)
    return;
  if (a4[2] == a3)
  {
    swift_retain();
    return;
  }
  sub_1000055B0(&qword_1002AD0A8);
  v12 = sub_100084F80();
  v13 = (_QWORD *)v12;
  v47 = a1;
  v48 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = v12 + 64;
  v49 = a4;
  while (1)
  {
    if (v14)
    {
      sub_1000850C8();
      v52 = v18;
      v53 = v17;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_38;
    if (v21 >= v48)
      return;
    if (!v47[v21])
    {
      if (v15 + 2 >= v48)
        return;
      if (!v47[v15 + 2])
      {
        if (v15 + 3 >= v48)
          return;
        if (!v47[v15 + 3])
        {
          v22 = v15 + 4;
          if (v15 + 4 >= v48)
            return;
          if (!v47[v22])
            break;
        }
      }
    }
LABEL_23:
    sub_100085158();
    v52 = v24;
    v53 = v25;
    v20 = v26 + (v25 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v51 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, a4[6] + v27 * v20, v59);
    v28 = a4[7] + 40 * v20;
    v29 = *(void **)(v28 + 8);
    v56 = *(_QWORD *)(v28 + 16);
    v57 = *(_QWORD *)v28;
    v55 = *(_QWORD *)(v28 + 24);
    v54 = *(_BYTE *)(v28 + 32);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
    v30(v58, v50, v59);
    v31 = v13[5];
    sub_1000840B4(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = v32;
    v34 = v29;
    dispatch thunk of Hashable._rawHashValue(seed:)(v31, v59, v33);
    sub_100085138();
    v38 = (v37 << v35) & ~*(_QWORD *)(v16 + 8 * v36);
    if (!v38)
    {
      sub_100060314();
      while (++v41 != v42 || (v40 & 1) == 0)
      {
        v43 = v41 == v42;
        if (v41 == v42)
          v41 = 0;
        v40 |= v43;
        v44 = *(_QWORD *)(v16 + 8 * v41);
        if (v44 != -1)
        {
          v39 = __clz(__rbit64(~v44)) + (v41 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v39 = __clz(__rbit64(v38)) | v35 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v16 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v30(v13[6] + v39 * v27, v58, v59);
    v45 = v13[7] + 40 * v39;
    *(_QWORD *)v45 = v57;
    *(_QWORD *)(v45 + 8) = v34;
    *(_QWORD *)(v45 + 16) = v56;
    *(_QWORD *)(v45 + 24) = v55;
    *(_BYTE *)(v45 + 32) = v54;
    ++v13[2];
    if (__OFSUB__(a3--, 1))
      goto LABEL_37;
    a4 = v49;
    v14 = v52;
    v15 = v53;
    if (!a3)
      return;
  }
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v23 >= v48)
      return;
    ++v22;
    if (v47[v23])
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
}

void sub_100083D20(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  _QWORD v22[9];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = *((_QWORD *)a1 + 8);
  v5 = a1[1];
  v23 = *a1;
  v24 = v5;
  v6 = a1[3];
  v25 = a1[2];
  v26 = v6;
  v27 = v4;
  v7 = Hasher._finalize()();
  v8 = a2 + 56;
  sub_100084ED4();
  v10 = v9 >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = 0;
  if (!v2)
    goto LABEL_3;
LABEL_2:
  sub_1000850A4();
  for (i = v13 | (v12 << 6); ; i = v17 + (v12 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    Hasher.init(_seed:)(v22, v7);
    swift_bridgeObjectRetain();
    String.hash(into:)(v22, v19, v20);
    v21 = sub_10004740C();
    swift_bridgeObjectRelease();
    v11 ^= v21;
    if (v2)
      goto LABEL_2;
LABEL_3:
    if (__OFADD__(v12++, 1))
      goto LABEL_17;
    if (v12 >= v10)
    {
LABEL_15:
      swift_release();
      Hasher._combine(_:)(v11);
      return;
    }
    if (!*(_QWORD *)(v8 + 8 * v12))
      break;
LABEL_12:
    sub_100085104();
  }
  v16 = v12 + 1;
  if (v12 + 1 >= v10)
    goto LABEL_15;
  if (*(_QWORD *)(v8 + 8 * v16))
  {
    ++v12;
    goto LABEL_12;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v10)
      goto LABEL_15;
    ++v16;
    if (*(_QWORD *)(v8 + 8 * v12))
      goto LABEL_12;
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_100083E80(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  Swift::Int v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[9];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v4 = *((_QWORD *)a1 + 8);
  v5 = a1[1];
  v22 = *a1;
  v23 = v5;
  v6 = a1[3];
  v24 = a1[2];
  v25 = v6;
  v26 = v4;
  v7 = Hasher._finalize()();
  v8 = 0;
  v9 = 0;
  v10 = a2 + 56;
  sub_100084ED4();
  v12 = v11 >> 6;
  if (!v2)
    goto LABEL_3;
LABEL_2:
  sub_1000850A4();
  for (i = v13 | (v9 << 6); ; i = v17 + (v9 << 6))
  {
    v18 = *(_OWORD *)(*(_QWORD *)(a2 + 48) + 16 * i);
    Hasher.init(_seed:)(v21, v7);
    v19 = v18;
    Hasher.combine(bytes:)(&v19, &v20);
    v8 ^= Hasher._finalize()();
    if (v2)
      goto LABEL_2;
LABEL_3:
    if (__OFADD__(v9++, 1))
      goto LABEL_17;
    if (v9 >= v12)
      break;
    if (!*(_QWORD *)(v10 + 8 * v9))
    {
      v16 = v9 + 1;
      if (v9 + 1 >= v12)
        break;
      if (!*(_QWORD *)(v10 + 8 * v16))
      {
        while (1)
        {
          v9 = v16 + 1;
          if (__OFADD__(v16, 1))
            break;
          if (v9 >= v12)
            goto LABEL_15;
          ++v16;
          if (*(_QWORD *)(v10 + 8 * v9))
            goto LABEL_12;
        }
        __break(1u);
LABEL_17:
        __break(1u);
      }
      ++v9;
    }
LABEL_12:
    sub_100085104();
  }
LABEL_15:
  Hasher._combine(_:)(v8);
}

unint64_t sub_100083FFC()
{
  unint64_t result;

  result = qword_1002AD050;
  if (!qword_1002AD050)
  {
    result = swift_getWitnessTable(&unk_10021F730, &type metadata for DiscoveryController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD050);
  }
  return result;
}

unint64_t sub_100084038()
{
  unint64_t result;

  result = qword_1002AD080;
  if (!qword_1002AD080)
  {
    result = swift_getWitnessTable(&unk_10021F708, &type metadata for DeviceSnapshotDiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AD080);
  }
  return result;
}

void sub_100084074(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000055B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_1000050D4();
}

void sub_1000840B4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_1000050D4();
}

uint64_t sub_1000840F0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return _HashTable.occupiedBucket(after:)();
LABEL_8:
  __break(1u);
  return result;
}

uint64_t destroy for DeviceSnapshotDiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t initializeWithCopy for DeviceSnapshotDiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for DeviceSnapshotDiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

void *initializeWithTake for DeviceSnapshotDiagnosticState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for DeviceSnapshotDiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 136);
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceSnapshotDiagnosticState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceSnapshotDiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceSnapshotDiagnosticState()
{
  return &type metadata for DeviceSnapshotDiagnosticState;
}

uint64_t storeEnumTagSinglePayload for DiscoveryController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100084548 + 4 * byte_10021F377[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10008457C + 4 * byte_10021F372[v4]))();
}

uint64_t sub_10008457C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008458CLL);
  return result;
}

uint64_t sub_100084598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000845A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000845A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000845AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiscoveryController.DiagnosticState.CodingKeys()
{
  return &type metadata for DiscoveryController.DiagnosticState.CodingKeys;
}

uint64_t destroy for DiscoveryController.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for DiscoveryController.DiagnosticState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for DiscoveryController.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

__n128 initializeWithTake for DiscoveryController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DiscoveryController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiscoveryController.DiagnosticState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiscoveryController.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiscoveryController.DiagnosticState()
{
  return &type metadata for DiscoveryController.DiagnosticState;
}

uint64_t getEnumTagSinglePayload for DeviceSnapshot.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceSnapshot.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100084864(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100084880(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSnapshot.State()
{
  return &type metadata for DeviceSnapshot.State;
}

unint64_t sub_1000848B4()
{
  unint64_t result;

  result = qword_1002AD0B8;
  if (!qword_1002AD0B8)
  {
    result = swift_getWitnessTable(&unk_10021F6B8, &type metadata for DiscoveryController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD0B8);
  }
  return result;
}

unint64_t sub_1000848F4()
{
  unint64_t result;

  result = qword_1002AD0C0;
  if (!qword_1002AD0C0)
  {
    result = swift_getWitnessTable(&unk_10021F628, &type metadata for DiscoveryController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD0C0);
  }
  return result;
}

unint64_t sub_100084934()
{
  unint64_t result;

  result = qword_1002AD0C8;
  if (!qword_1002AD0C8)
  {
    result = swift_getWitnessTable(&unk_10021F650, &type metadata for DiscoveryController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD0C8);
  }
  return result;
}

unint64_t sub_100084970()
{
  unint64_t result;

  result = qword_1002AD0D8;
  if (!qword_1002AD0D8)
  {
    result = swift_getWitnessTable(&unk_10021F838, &type metadata for DeviceSnapshotDiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD0D8);
  }
  return result;
}

_QWORD *sub_1000849AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[10];
  v5 = a1[12];
  v6 = a1[17];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_100084A20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[10];
  v6 = a1[12];
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_100084A94(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v7;

  if (!*a1)
  {
    v7 = sub_10000DCA0(a2);
    a3();
    atomic_store(swift_getWitnessTable(a4, v7), a1);
  }
  sub_100026914();
}

unint64_t sub_100084AEC()
{
  unint64_t result;

  result = qword_1002AD108;
  if (!qword_1002AD108)
  {
    result = swift_getWitnessTable(&unk_10021F6E0, &type metadata for DeviceSnapshotDiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AD108);
  }
  return result;
}

void sub_100084B28(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_10000DCA0((uint64_t *)&unk_1002AC160);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100026914();
}

uint64_t getEnumTagSinglePayload for DeviceSnapshotDiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 11) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v5 = v6 - 12;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceSnapshotDiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100084C50 + 4 * byte_10021F381[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100084C84 + 4 * byte_10021F37C[v4]))();
}

uint64_t sub_100084C84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084C8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100084C94);
  return result;
}

uint64_t sub_100084CA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100084CA8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100084CAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084CB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSnapshotDiagnosticState.CodingKeys()
{
  return &type metadata for DeviceSnapshotDiagnosticState.CodingKeys;
}

unint64_t sub_100084CD4()
{
  unint64_t result;

  result = qword_1002AD118;
  if (!qword_1002AD118)
  {
    result = swift_getWitnessTable(&unk_10021F810, &type metadata for DeviceSnapshotDiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD118);
  }
  return result;
}

unint64_t sub_100084D14()
{
  unint64_t result;

  result = qword_1002AD120;
  if (!qword_1002AD120)
  {
    result = swift_getWitnessTable(&unk_10021F780, &type metadata for DeviceSnapshotDiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD120);
  }
  return result;
}

unint64_t sub_100084D54()
{
  unint64_t result;

  result = qword_1002AD128;
  if (!qword_1002AD128)
  {
    result = swift_getWitnessTable(&unk_10021F7A8, &type metadata for DeviceSnapshotDiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD128);
  }
  return result;
}

uint64_t sub_100084DF0()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 248, v0);
}

uint64_t sub_100084E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100084E14@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100084E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_100084E68()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_100084E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v1, v2 - 81, v0, v1);
}

uint64_t sub_100084E9C@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 248) = a1;
  return v1 - 248;
}

uint64_t sub_100084EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 88, v3 - 89, v0, v1, v2);
}

uint64_t sub_100084EF8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100084F08@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 248) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 248, v1);
}

uint64_t sub_100084F20()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
}

uint64_t sub_100084F28()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 448);
}

uint64_t sub_100084F64()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100084F6C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104));
}

_QWORD *sub_100084F78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000835DC(a1, a2, a3);
}

uint64_t sub_100084F80()
{
  uint64_t v0;

  return static _DictionaryStorage.allocate(capacity:)(v0);
}

uint64_t sub_100084F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100084F94@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 248) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100084FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 1);
}

uint64_t sub_100084FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_100084FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

void sub_100084FCC(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 88) = a1;
}

uint64_t sub_100084FE4()
{
  uint64_t v0;

  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t sub_100084FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100085024()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10008503C()
{
  _QWORD *v0;

  return sub_100005988(v0);
}

uint64_t sub_100085044()
{
  uint64_t v0;

  return swift_endAccess(v0 - 184);
}

uint64_t sub_100085074()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10008507C()
{
  uint64_t v0;

  return sub_100005988(*(_QWORD **)(v0 + 144));
}

uint64_t sub_100085084()
{
  uint64_t v0;

  return v0 - 88;
}

void sub_1000850B8(unint64_t *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t *v4;

  sub_100084A94(a1, v4, a3, a4);
}

uint64_t sub_1000850C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1000850DC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1001A8C70(v0, v1);
}

uint64_t sub_1000850E8()
{
  uint64_t v0;

  return v0 - 72;
}

uint64_t sub_1000850FC()
{
  return Logger.logObject.getter();
}

uint64_t sub_100085118()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void *sub_10008516C(void *a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;
  void *v11;

  objc_msgSend(a1, "bounds");
  v8 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", v4, v5, v6, v7);
  v9 = objc_msgSend(v8, "layer");
  objc_msgSend(v9, "addSublayer:", a1);

  if (a2)
    v10 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", a2);
  else
    v10 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "init");
  v11 = v10;
  objc_msgSend(v10, "setWindowLevel:", -1000.0);
  objc_msgSend(v11, "addSubview:", v8);
  objc_msgSend(v11, "setAlpha:", 0.0);
  objc_msgSend(v11, "setHidden:", 0);
  return v11;
}

id static CALayer.snapshot(forSlot:outputSize:bounds:offset:mask:windowScene:)(uint64_t a1, const CGPath *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  CGAffineTransform *v14;
  CGSize v15;
  CGAffineTransform *v16;
  void *v17;
  CGFloat m12;
  CGFloat m11;
  id v20;
  uint64_t v21;
  uint64_t inited;
  CGFloat v23;
  id v24;
  Class isa;
  void *v26;
  unsigned int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CGFloat v46;
  CGFloat v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  CGFloat m43;
  CGFloat m44;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Class v59;
  __n128 v60;
  int v61;
  id v62;
  id result;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  CGSize v101;
  __int128 size;
  CGSize v105;
  uint64_t v106;
  CGFloat v108;
  CATransform3D v109;
  CATransform3D v110;
  CGSize v111;
  CGAffineTransform v112;
  __int128 v113[3];
  _BYTE v114[368];
  _BYTE v115[104];
  CGSize v116;
  CGSize v117;

  CGAffineTransformMakeScale((CGAffineTransform *)&v110, 2.0, 2.0);
  v112.a = v110.m11;
  v112.b = v110.m12;
  v112.c = v110.m13;
  v112.d = v110.m14;
  v112.tx = v110.m21;
  v112.ty = v110.m22;
  CGAffineTransformMakeTranslation((CGAffineTransform *)&v110, a8 + a8, a9 + a9);
  v113[0] = *(_OWORD *)&v110.m11;
  v113[1] = *(_OWORD *)&v110.m13;
  v113[2] = *(_OWORD *)&v110.m21;
  sub_100085F3C();
  v116.width = a4;
  v116.height = a5;
  v15 = CGSizeApplyAffineTransform(v116, v14);
  sub_100085F3C();
  v117.width = a6;
  v117.height = a7;
  v111 = CGSizeApplyAffineTransform(v117, v16);
  v17 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v17, "begin");
  sub_10008594C(&v111.width, a1, v113, a2, &v112, a3, &v110);
  objc_msgSend(v17, "commit");
  m11 = v110.m11;
  m12 = v110.m12;
  v20 = objc_msgSend(*(id *)&v110.m11, "screen");
  v21 = sub_1000055B0(&qword_1002AD130);
  inited = swift_initStackObject(v21, v115);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)&v110.m11 = static String._unconditionallyBridgeFromObjectiveC(_:)(kUIRenderingDestinationGamut);
  v110.m12 = v23;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v110);
  v24 = objc_msgSend(v20, "gamut");
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 72) = v24;
  Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26 = (void *)_UIRenderingBufferCreate(isa, v15.width, v15.height);

  if (!v26)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v27 = objc_msgSend(*(id *)&m11, "_contextId");
  v108 = m12;
  v28 = objc_msgSend(*(id *)&m12, "layer");

  v29 = sub_1000055B0(&qword_1002AA680);
  v30 = swift_initStackObject(v29, v114);
  *(_OWORD *)(v30 + 16) = xmmword_10021F8C0;
  *(_QWORD *)(v30 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotMode);
  *(_QWORD *)(v30 + 40) = v31;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotModeLayer);
  *(_QWORD *)(v30 + 72) = &type metadata for String;
  *(_QWORD *)(v30 + 48) = v32;
  *(_QWORD *)(v30 + 56) = v33;
  *(_QWORD *)(v30 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotDisplayName);
  *(_QWORD *)(v30 + 88) = v34;
  v35 = objc_msgSend(v20, "displayConfiguration");
  if (!v35)
    goto LABEL_14;
  v36 = v35;
  v37 = objc_msgSend(v35, "name");

  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  *(_QWORD *)(v30 + 120) = &type metadata for String;
  *(_QWORD *)(v30 + 96) = v38;
  *(_QWORD *)(v30 + 104) = v40;
  *(_QWORD *)(v30 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotContextId);
  *(_QWORD *)(v30 + 136) = v41;
  *(_QWORD *)(v30 + 168) = &type metadata for UInt32;
  *(_DWORD *)(v30 + 144) = v27;
  *(_QWORD *)(v30 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotLayerId);
  *(_QWORD *)(v30 + 184) = v42;
  *(_QWORD *)(v30 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v30 + 192) = v28;
  *(_QWORD *)(v30 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotDestination);
  *(_QWORD *)(v30 + 232) = v43;
  type metadata accessor for IOSurfaceRef(0);
  *(_QWORD *)(v30 + 264) = v44;
  *(_QWORD *)(v30 + 240) = v26;
  *(_QWORD *)(v30 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotTransform);
  *(_QWORD *)(v30 + 280) = v45;
  v46 = v15.width / v111.width;
  v47 = v15.height / v111.height;
  v48 = v26;
  v49 = *(_OWORD *)&CATransform3DIdentity.m13;
  *(_OWORD *)&v110.m11 = *(_OWORD *)&CATransform3DIdentity.m11;
  *(_OWORD *)&v110.m13 = v49;
  v50 = *(_OWORD *)&CATransform3DIdentity.m23;
  *(_OWORD *)&v110.m21 = *(_OWORD *)&CATransform3DIdentity.m21;
  *(_OWORD *)&v110.m23 = v50;
  v51 = *(_OWORD *)&CATransform3DIdentity.m33;
  *(_OWORD *)&v110.m31 = *(_OWORD *)&CATransform3DIdentity.m31;
  *(_OWORD *)&v110.m33 = v51;
  v52 = *(_OWORD *)&CATransform3DIdentity.m43;
  *(_OWORD *)&v110.m41 = *(_OWORD *)&CATransform3DIdentity.m41;
  *(_OWORD *)&v110.m43 = v52;
  CATransform3DScale(&v109, &v110, v46, v47, 1.0);
  size = *(_OWORD *)&v109.m13;
  v105 = *(CGSize *)&v109.m11;
  v99 = *(_OWORD *)&v109.m23;
  v101 = *(CGSize *)&v109.m21;
  v97 = *(_OWORD *)&v109.m33;
  v98 = *(_OWORD *)&v109.m31;
  v96 = *(_OWORD *)&v109.m41;
  m43 = v109.m43;
  m44 = v109.m44;
  type metadata accessor for CATransform3D(0);
  *(_QWORD *)(v30 + 312) = v55;
  v56 = swift_allocObject(&unk_100285A98, 144, 7);
  *(_QWORD *)(v30 + 288) = v56;
  *(CGSize *)(v56 + 16) = v105;
  *(_OWORD *)(v56 + 32) = size;
  *(CGSize *)(v56 + 48) = v101;
  *(_OWORD *)(v56 + 64) = v99;
  *(_OWORD *)(v56 + 80) = v98;
  *(_OWORD *)(v56 + 96) = v97;
  *(_OWORD *)(v56 + 112) = v96;
  *(CGFloat *)(v56 + 128) = m43;
  *(CGFloat *)(v56 + 136) = m44;
  *(_QWORD *)(v30 + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCASnapshotEnforceSecureMode);
  *(_QWORD *)(v30 + 328) = v57;
  *(_QWORD *)(v30 + 360) = &type metadata for Bool;
  *(_BYTE *)(v30 + 336) = 1;
  v58 = Dictionary.init(dictionaryLiteral:)(v30, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  sub_100085B40(v58);
  swift_bridgeObjectRelease();
  v59 = Dictionary._bridgeToObjectiveC()().super.isa;
  v60 = swift_bridgeObjectRelease();
  v61 = CARenderServerSnapshot(0, v59, v60);

  if (!v61)
  {
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v74 = type metadata accessor for Logger(0);
    v75 = sub_100006FB4(v74, (uint64_t)qword_1002B6EB0);
    v76 = Logger.logObject.getter(v75);
    v78 = static os_log_type_t.default.getter(v76, v77);
    if (os_log_type_enabled(v76, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v78, "failed to snapshot layer in window server", v79, 2u);
      swift_slowDealloc(v79, -1, -1);

      sub_100085F34(v80, v81, v82, v83, v84, v85, v86, v87, v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98, *((uint64_t *)&v98 + 1), v99, *((uint64_t *)&v99 + 1), *(uint64_t *)&v101.width, *(uint64_t *)&v101.height, size,
        *((uint64_t *)&size + 1),
        *(uint64_t *)&v105.width,
        *(uint64_t *)&v105.height,
        v106,
        *(void **)&v108);

    }
    else
    {

      sub_100085F34(v88, v89, v90, v91, v92, v93, v94, v95, v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98, *((uint64_t *)&v98 + 1), v99, *((uint64_t *)&v99 + 1), *(uint64_t *)&v101.width, *(uint64_t *)&v101.height, size,
        *((uint64_t *)&size + 1),
        *(uint64_t *)&v105.width,
        *(uint64_t *)&v105.height,
        v106,
        *(void **)&v108);

    }
    return 0;
  }
  v62 = v48;
  result = objc_msgSend(v62, "CGImageBuilder");
  if (result)
  {
    v64 = result;
    v65 = objc_msgSend(result, "buildCGImage");

    sub_100085F34(v66, v67, v68, v69, v70, v71, v72, v73, v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98, *((uint64_t *)&v98 + 1), v99, *((uint64_t *)&v99 + 1), *(uint64_t *)&v101.width, *(uint64_t *)&v101.height, size,
      *((uint64_t *)&size + 1),
      *(uint64_t *)&v105.width,
      *(uint64_t *)&v105.height,
      v106,
      *(void **)&v108);

    return v65;
  }
  __break(1u);
  return result;
}

void sub_10008594C(double *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, const CGPath *a4@<X3>, const CGAffineTransform *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  const CGPath *CopyByTransformingPath;
  const CGPath *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  CGRect PathBoundingBox;

  v23 = a3[1];
  v24 = *a3;
  v13 = *((_QWORD *)a3 + 4);
  v14 = *((_QWORD *)a3 + 5);
  v15 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  objc_msgSend(v15, "setFrame:", 0.0, 0.0, *a1, a1[1]);
  v16 = objc_msgSend((id)objc_opt_self(CAContext), "objectForSlot:", a2);
  objc_msgSend(v15, "setContents:", v16);
  swift_unknownObjectRelease(v16);
  objc_msgSend(v15, "setContentsGravity:", kCAGravityTopLeft);
  v25[0] = v24;
  v25[1] = v23;
  v26 = v13;
  v27 = v14;
  objc_msgSend(v15, "setContentsTransform:", v25);
  if (a4)
  {
    CopyByTransformingPath = CGPathCreateCopyByTransformingPath(a4, a5);
    if (CopyByTransformingPath)
    {
      v18 = CopyByTransformingPath;
      PathBoundingBox = CGPathGetPathBoundingBox(CopyByTransformingPath);
      *a1 = PathBoundingBox.size.width;
      a1[1] = PathBoundingBox.size.height;
      v19 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
      objc_msgSend(v15, "frame");
      objc_msgSend(v19, "setFrame:");
      objc_msgSend(v19, "setPath:", v18);
      objc_msgSend(v15, "setMask:", v19);

    }
  }
  sub_100085EE0();
  v20 = sub_10008516C(v15, a6);
  v22 = v21;

  *a7 = v20;
  a7[1] = v22;
}

uint64_t sub_100085B30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 144, 7);
}

void sub_100085B40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[3];
  _OWORD v43[2];
  __int128 v44;
  _OWORD v45[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000055B0(&qword_1002AD138);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v33 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v21 = *v19;
    v20 = v19[1];
    sub_100007918(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v45);
    *(_QWORD *)&v44 = v21;
    *((_QWORD *)&v44 + 1) = v20;
    v42[2] = v44;
    v43[0] = v45[0];
    v43[1] = v45[1];
    *(_QWORD *)&v42[0] = v21;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_100005778(v43, v37);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_100005778(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_100005778(v41, v42);
    sub_100005778(v42, &v38);
    v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v25];
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(_QWORD *)&v7[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v26;
    v31 = v3[6] + 40 * v26;
    *(_OWORD *)v31 = v34;
    *(_OWORD *)(v31 + 16) = v35;
    *(_QWORD *)(v31 + 32) = v36;
    sub_100005778(&v38, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_42;
    if (v11 >= v32)
      goto LABEL_40;
    v12 = *(_QWORD *)(v33 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      sub_100085F28();
      if (v14 == v15)
        goto LABEL_40;
      sub_100085F1C();
      if (!v12)
      {
        sub_100085F28();
        if (v14 == v15)
          goto LABEL_40;
        sub_100085F1C();
        if (!v12)
        {
          sub_100085F28();
          if (v14 == v15)
            goto LABEL_40;
          sub_100085F1C();
          if (!v12)
            break;
        }
      }
    }
LABEL_28:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
  }
  v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    swift_release();
    sub_10005E1F4(a1);
    return;
  }
  v12 = *(_QWORD *)(v33 + 8 * v17);
  if (v12)
  {
    v13 = v17;
    goto LABEL_28;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_100085F28();
    if (v14 == v15)
      goto LABEL_40;
    sub_100085F1C();
    v17 = v18 + 1;
    if (v12)
      goto LABEL_28;
  }
LABEL_43:
  __break(1u);
}

unint64_t sub_100085EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AD140;
  if (!qword_1002AD140)
  {
    v1 = objc_opt_self(UIWindow);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AD140);
  }
  return result;
}

void sub_100085F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

}

uint64_t sub_100085F50(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v49 = a8;
  v50 = a5;
  v9 = v8;
  v63 = a1;
  v64 = a2;
  v48 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin(a1);
  v62 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v61 = (char *)&v46 - v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v17);
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v53 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v51 = *(_QWORD *)(v20 - 8);
  v52 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a6;
  v66 = swift_getAssociatedTypeWitness(0, a6);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v60 = (char *)&v46 - v32;
  v33 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v67 = ContiguousArray.init()(a4);
  v34 = type metadata accessor for ContiguousArray(0, a4);
  ContiguousArray.reserveCapacity(_:)(v33);
  v35 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v55, v16);
  v36 = v56;
  v58 = v35;
  result = dispatch thunk of Sequence.makeIterator()(v35, v56);
  if (v33 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v33)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v58, v66);
    v39 = v60;
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v63(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v66);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v49, v62, v50);
        return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v34);
      if (!--v33)
      {
        v40 = (uint64_t)v59;
        v41 = v66;
        goto LABEL_9;
      }
    }
  }
  v41 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v58, v66);
  v40 = (uint64_t)v59;
  v39 = v60;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v41, AssociatedConformanceWitness);
  v42 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v40, 1, AssociatedTypeWitness);
  v43 = v53;
  if (v42 == 1)
  {
    v44 = (uint64_t)v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v66);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v44, v52);
    return v67;
  }
  else
  {
    v62 = *(char **)(v65 + 32);
    v44 = (uint64_t)v59;
    v45 = v47;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v62)(v43, v44, AssociatedTypeWitness);
      v63(v43, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v43, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v45, v34);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v44, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v43, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v66);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v49, v61, v50);
  }
}

void ECXPCArray.makeIterator()(void *a1)
{
  size_t count;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  count = xpc_array_get_count(a1);
  v3 = sub_1000088D8((uint64_t)&unk_100285AC0, 24);
  *(_QWORD *)(v3 + 16) = 0;
  v4 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100285AE8, 40);
  v4[2] = v3;
  v4[3] = count;
  v4[4] = a1;
  v5 = sub_1000055B0(&qword_1002ACD70);
  v6 = sub_1000088D8(v5, 32);
  *(_QWORD *)(v6 + 16) = sub_100077E4C;
  *(_QWORD *)(v6 + 24) = v4;
  swift_unknownObjectRetain(a1);
  sub_10000B350();
}

uint64_t sub_1000864E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t ECXPCArray.typedArray<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[6];
  _QWORD v8[2];

  v8[1] = a1;
  v7[2] = a2;
  v7[3] = a3;
  v4 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  v5 = sub_100086A9C();
  return sub_100085F50((void (*)(char *, char *))sub_100086A80, (uint64_t)v7, (uint64_t)&type metadata for ECXPCArray, a2, v4, v5, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)v8);
}

uint64_t ECXPCArray.init(xpcobject:)(uint64_t a1)
{
  uint64_t v1;
  xpc_type_t v2;

  v1 = a1;
  swift_getObjectType(a1);
  v2 = OS_xpc_object.type.getter();
  if (v2 != (xpc_type_t)XPC_TYPE_ARRAY.getter())
  {
    sub_10000F718();
    return 0;
  }
  return v1;
}

uint64_t sub_1000865D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v10 = type metadata accessor for Optional(0, a2);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8);
  v15 = swift_unknownObjectRetain(*a1);
  v14(v15, a2, a3);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, a2) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, v13, a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = sub_1000055B0(&qword_1002AD168);
  v17 = sub_10003A0A8((unint64_t *)&unk_1002AD170, &qword_1002AD168, (uint64_t)&protocol conformance descriptor for AnyError<A>);
  v18 = swift_allocError(v16, v17, 0, 0);
  result = swift_willThrow(v18);
  *a4 = v18;
  return result;
}

void ECXPCArray.typedArray<A>(count:)(uint64_t a1, xpc_object_t xarray, uint64_t a3, uint64_t a4)
{
  if (xpc_array_get_count(xarray) == a1)
    ECXPCArray.typedArray<A>()((uint64_t)xarray, a3, a4);
  else
    sub_10000B350();
}

xpc_object_t ECXPCArray.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_100058988();
    v3 = a1 + 32;
    v4 = (uint64_t)_swiftEmptyArrayStorage;
    do
    {
      sub_1000445C0(v3, (uint64_t)v16);
      v5 = v17;
      v6 = v18;
      sub_10000DBE4(v16, v17);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      sub_100005988(v16);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      {
        sub_100058988();
        v4 = (uint64_t)v19;
      }
      v8 = *(_QWORD *)(v4 + 16);
      if (v8 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_100058988();
        v4 = (uint64_t)v19;
      }
      *(_QWORD *)(v4 + 16) = v8 + 1;
      *(_QWORD *)(v4 + 8 * v8 + 32) = v7;
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v14 = v4;
    else
      v14 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter(v14))
    {
      swift_bridgeObjectRelease();
      v11 = -8;
      goto LABEL_13;
    }
    sub_100058514(v4);
    v9 = v15;
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v9 = v4 & 0xFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = v9 + 32;
LABEL_13:
  v12 = xpc_array_create((xpc_object_t *)v11, v10);
  sub_10000F718();
  return v12;
}

uint64_t ECXPCArray.append(_:)(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000DBE4(a1, v3);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  xpc_array_append_value(a2, v5);
  return swift_unknownObjectRelease(v5);
}

xpc_object_t ECXPCArray.subscript.getter(size_t index, xpc_object_t xarray)
{
  return xpc_array_get_value(xarray, index);
}

uint64_t sub_1000869AC@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;
  xpc_object_t v10;
  int64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v8 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v13, 0, 0);
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 >= a2)
    goto LABEL_4;
  v10 = xpc_array_get_value(a3, v11);
  result = swift_beginAccess(v8, &v12, 1, 0);
  if (!__OFADD__(*v8, 1))
  {
    ++*v8;
LABEL_4:
    *a4 = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100086A54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100086A80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1000865D0(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

unint64_t sub_100086A9C()
{
  unint64_t result;

  result = qword_1002AD150;
  if (!qword_1002AD150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ECXPCArray, &type metadata for ECXPCArray);
    atomic_store(result, (unint64_t *)&qword_1002AD150);
  }
  return result;
}

uint64_t sub_100086AD8@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  ECXPCArray.makeIterator()(*v1);
  v4 = v3;
  result = sub_10000F718();
  *a1 = v4;
  return result;
}

uint64_t sub_100086B14()
{
  return static UInt64.logicalMinimum.getter();
}

uint64_t sub_100086B1C()
{
  _QWORD *v0;

  return sub_100124638(*v0);
}

uint64_t sub_100086B24(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t *v3;

  return sub_100124668(a1, a2, a3, *v3);
}

uint64_t sub_100086B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_100086B4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ECXPCArray.init(xpcobject:)(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100086B70()
{
  _QWORD *v0;

  return ECXPCData.xpcobject.getter(*v0);
}

uint64_t sub_100086B78()
{
  return sub_10003A0A8(&qword_1002AD158, &qword_1002AD160, (uint64_t)&protocol conformance descriptor for AnyIterator<A>);
}

ValueMetadata *type metadata accessor for ECXPCArray()
{
  return &type metadata for ECXPCArray;
}

uint64_t sub_100086BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v24;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a2);
  v10 = _getErrorEmbeddedNSError<A>(_:)(v8, a2, a3);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }
  else
  {
    v11 = swift_allocError(a2, a3, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  }
  v13 = (void *)_convertErrorToNSError(_:)(v11);
  swift_errorRelease(v11);
  if (objc_msgSend(v13, "code") == (id)v5)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
    v16 = v15;
    v17 = objc_msgSend(v13, "domain");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    if (v14 == v18 && v16 == v20)
    {
      v22 = 1;
      v20 = v16;
    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v18, v20, 0);
    }
    swift_bridgeObjectRelease(v20);

    swift_bridgeObjectRelease(v16);
  }
  else
  {

    v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_100086D50(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69616D6F64, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701080931 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701080931, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100086E24(char a1)
{
  if ((a1 & 1) != 0)
    return 1701080931;
  else
    return 0x6E69616D6F64;
}

uint64_t sub_100086E50()
{
  char *v0;

  return sub_100086E24(*v0);
}

uint64_t sub_100086E58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100086D50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086E7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087308();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086EA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100087308();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100086ECC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  char v14;
  char v15;

  v3 = sub_1000055B0(&qword_1002AD180);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_10000DBE4(a1, v4);
  v7 = sub_100087308();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PError.CodingKeys, &type metadata for P2PError.CodingKeys, v7, v4, v5);
  if (!v1)
  {
    v15 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    v10 = v9;
    v14 = 1;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = objc_allocWithZone((Class)NSError);
    v6 = sub_100087344(v8, v10, v12, 0);
    sub_1000876AC();
  }
  sub_100005988(a1);
  return v6;
}

void sub_100087038(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  char v16;

  v5 = sub_1000055B0(&qword_1002AD190);
  __chkstk_darwin(v5);
  v6 = a1[3];
  v7 = a1[4];
  sub_10000DBE4(a1, v6);
  v8 = sub_100087308();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PError.CodingKeys, &type metadata for P2PError.CodingKeys, v8, v6, v7);
  v9 = (void *)_convertErrorToNSError(_:)(a2);
  v10 = objc_msgSend(v9, "domain");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v11, v13, &v16, v5);
  if (v2)
  {
    sub_1000876BC();

    sub_10000E4A0();
  }
  else
  {
    sub_10000E4A0();
    v14 = objc_msgSend(v9, "code");
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v5);
    sub_1000876BC();

  }
}

void *sub_10008719C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;

  result = sub_100086ECC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1000871C4(_QWORD *a1)
{
  uint64_t *v1;

  sub_100087038(a1, *v1);
}

void sub_1000871DC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  void *object;
  Swift::String v13;

  v2 = (void *)_convertErrorToNSError(_:)(a1);
  v3 = objc_msgSend(v2, "domain");

  if (v3)
  {
    v4 = objc_msgSend(v3, "description");
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8._countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);

    swift_bridgeObjectRelease(v7);
    v9._countAndFlagsBits = 10272;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v10, "code");

    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
  else
  {
    __break(1u);
  }
}

void sub_100087300()
{
  uint64_t *v0;

  sub_1000871DC(*v0);
}

unint64_t sub_100087308()
{
  unint64_t result;

  result = qword_1002AD188;
  if (!qword_1002AD188)
  {
    result = swift_getWitnessTable(&unk_10021FAF4, &type metadata for P2PError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD188);
  }
  return result;
}

id sub_100087344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  NSDictionary v9;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v8, a3, v9.super.isa);

  return v10;
}

uint64_t storeEnumTagSinglePayload for P2PError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008743C + 4 * byte_10021F965[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100087470 + 4 * asc_10021F960[v4]))();
}

uint64_t sub_100087470(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100087478(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100087480);
  return result;
}

uint64_t sub_10008748C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100087494);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100087498(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000874A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PError.CodingKeys()
{
  return &type metadata for P2PError.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for P2PError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for P2PError(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *assignWithCopy for P2PError(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

uint64_t *assignWithTake for P2PError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PError(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PError()
{
  return &type metadata for P2PError;
}

unint64_t sub_1000875EC()
{
  unint64_t result;

  result = qword_1002AD198;
  if (!qword_1002AD198)
  {
    result = swift_getWitnessTable(&unk_10021FACC, &type metadata for P2PError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD198);
  }
  return result;
}

unint64_t sub_10008762C()
{
  unint64_t result;

  result = qword_1002AD1A0;
  if (!qword_1002AD1A0)
  {
    result = swift_getWitnessTable(&unk_10021FA3C, &type metadata for P2PError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD1A0);
  }
  return result;
}

unint64_t sub_10008766C()
{
  unint64_t result;

  result = qword_1002AD1A8;
  if (!qword_1002AD1A8)
  {
    result = swift_getWitnessTable(&unk_10021FA64, &type metadata for P2PError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD1A8);
  }
  return result;
}

uint64_t sub_1000876AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000876BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000876CC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6EB0);
  sub_100006FB4(v0, (uint64_t)qword_1002B6EB0);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x746E656761, 0xE500000000000000);
}

uint64_t sub_10008773C()
{
  return 0x7000022000ALL;
}

uint64_t sub_10008774C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v71 = a6;
  v7 = v6;
  v69 = a3;
  v70 = a4;
  v67 = a1 >> 16;
  v68 = a1 >> 8;
  v65 = HIDWORD(a1);
  v66 = a1 >> 24;
  v63 = HIWORD(a1);
  v64 = a1 >> 40;
  v62 = HIBYTE(a1);
  v74 = a2 >> 8;
  v75 = a5;
  v52 = *v6;
  v73 = a2 >> 16;
  v56 = a2 >> 24;
  v57 = HIDWORD(a2);
  v58 = a2 >> 40;
  v59 = HIWORD(a2);
  v60 = HIBYTE(a2);
  v55 = a2;
  v54 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v72 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v10);
  v61 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v52 - v13;
  v6[23] = 0;
  v6[20] = 0;
  v6[21] = 0;
  swift_unknownObjectWeakInit(v6 + 22, 0);
  sub_10002D790();
  v15 = v67;
  v14 = v68;
  v16 = v65;
  v17 = v66;
  v19 = v63;
  v18 = v64;
  v20 = v62;
  UUID.init(uuid:)(a1, v68, v67, v66, v65, v64);
  CompanionLinkDevice.init(id:)(v76);
  v7[144] = a1;
  v7[145] = v14;
  v7[146] = v15;
  v7[147] = v17;
  v7[148] = v16;
  v7[149] = v18;
  v7[150] = v19;
  v7[151] = v20;
  v7[152] = v55;
  v7[153] = v74;
  v7[154] = v73;
  v7[155] = v56;
  v7[156] = v57;
  v7[157] = v58;
  v7[158] = v59;
  v7[159] = v60;
  swift_release();
  type metadata accessor for CompanionLinkClient();
  v21 = v61;
  sub_100088B44(v76, v61);
  v22 = CompanionLinkClient.__allocating_init(destination:serviceType:)(v21, 0, 0);
  swift_retain();
  v23 = v75;
  swift_unknownObjectRetain(v75);
  sub_100026C60(v22, v69, v70, v23, v71);
  v25 = v24;
  v26 = qword_1002A9800;
  swift_retain();
  if (v26 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v27 = type metadata accessor for Logger(0);
  sub_100006FB4(v27, (uint64_t)qword_1002B6D10);
  v28 = swift_retain_n(v25, 3);
  v29 = Logger.logObject.getter(v28);
  v31 = static os_log_type_t.default.getter(v29, v30);
  if (os_log_type_enabled(v29, v31))
  {
    v32 = swift_slowAlloc(32, -1);
    v74 = swift_slowAlloc(96, -1);
    v79 = v74;
    *(_DWORD *)v32 = 136446722;
    v33 = *(_QWORD *)(v25 + 32);
    v34 = *(_QWORD *)(v25 + 40);
    swift_bridgeObjectRetain();
    v77 = sub_100006FCC(v33, v34, &v79);
    sub_100088C08(v77, v35, v36, v32 + 12);
    swift_release();
    sub_10000E50C();
    *(_WORD *)(v32 + 12) = 2082;
    v37 = _typeName(_:qualified:)(v52, 0);
    v77 = sub_100006FCC(v37, v38, &v79);
    sub_100088C08(v77, v39, v40, v32 + 22);
    sub_10000E50C();
    *(_WORD *)(v32 + 22) = 2082;
    v73 = v32 + 24;
    v41 = v72;
    v42 = UUID.init(uuid:)(*(unsigned __int8 *)(v25 + 144), *(unsigned __int8 *)(v25 + 145), *(unsigned __int8 *)(v25 + 146), *(unsigned __int8 *)(v25 + 147), *(unsigned __int8 *)(v25 + 148), *(unsigned __int8 *)(v25 + 149));
    v43 = UUID.uuidString.getter(v42);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
    v46 = sub_1000599D0(8, v43, v45);
    v47 = static String._fromSubstring(_:)(v46);
    v49 = v48;
    swift_bridgeObjectRelease();
    v77 = sub_100006FCC(v47, v49, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v73);
    swift_release_n(v25, 2);
    sub_10000E50C();
    _os_log_impl((void *)&_mh_execute_header, v29, v31, "%{public}s: %{public}s IDS %{public}s", (uint8_t *)v32, 0x20u);
    v50 = v74;
    swift_arrayDestroy(v74, 3, (char *)&type metadata for Any + 8);
    sub_100007958(v50);
    sub_100007958(v32);
    swift_release();

    swift_unknownObjectRelease(v75);
    swift_release();
  }
  else
  {
    swift_release();
    swift_release_n(v25, 4);

    swift_unknownObjectRelease(v75);
  }
  sub_100009EF8(v76);
  return v25;
}

uint64_t sub_100087CA0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v2 = v1;
  type metadata accessor for RapportStreamServer();
  v4 = RapportStreamServer.__allocating_init()();
  v5 = RapportStreamSession.session.getter();
  RapportStreamSession.messenger.setter((uint64_t)v5);
  v6 = v1[9];
  v7 = v2[10];
  swift_bridgeObjectRetain();
  RapportStreamServer.serviceType.setter(v6, v7);
  swift_beginAccess(v4 + 24, v26, 1, 0);
  *(_QWORD *)(v4 + 32) = &off_100285D80;
  swift_unknownObjectWeakAssign(v4 + 24, v2);
  v2[21] = v4;
  sub_10002679C();
  sub_10000B348();
  v8 = mach_absolute_time();
  v9 = sub_1000088D8((uint64_t)&unk_100285DB0, 24);
  *(_QWORD *)(v9 + 16) = v8;
  v10 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v2[20] = AnyCancellable.init(_:)(sub_100088B98, v9);
  swift_release();
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v11 = sub_10000F6E4();
  v12 = sub_100006FB4(v11, (uint64_t)qword_1002B6D10);
  swift_retain();
  Logger.logObject.getter(v13);
  v14 = sub_10002D844();
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)sub_10000797C(12);
    v23 = a1;
    v16 = sub_10000797C(32);
    v25 = v16;
    *(_DWORD *)v15 = 136446210;
    v18 = v2[4];
    v17 = v2[5];
    swift_bridgeObjectRetain();
    v24 = sub_100006FCC(v18, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4);
    swift_release();
    swift_bridgeObjectRelease();
    sub_100026484((void *)&_mh_execute_header, v12, v14, "%{public}s: Activating RPStreamServer", v15);
    sub_1000263F4(v16, v19, (uint64_t)&type metadata for Any + 8);
    v20 = v16;
    a1 = v23;
    sub_100007958(v20);
    sub_100007958((uint64_t)v15);

  }
  else
  {

    swift_release();
  }
  v21 = sub_1000088D8((uint64_t)&unk_100285DD8, 32);
  *(_QWORD *)(v21 + 16) = v2;
  *(_QWORD *)(v21 + 24) = a1;
  swift_retain();
  swift_retain();
  RapportStreamServer.activate(completion:)();
  sub_1000269A0();
  return sub_10002645C();
}

uint64_t sub_100087F40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t var58[13];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A9800 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    v10 = sub_100006FB4(v6, (uint64_t)qword_1002B6D10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
    __chkstk_darwin(v11);
    *(&v26 - 2) = a1;
    sub_1000E45AC((int)sub_100088BD4, a2, (int)sub_10000F5C4, (int)(&v26 - 4), v12, v13, v14, v15, v26, v27, v28, var58[0], var58[1], var58[2], var58[3], var58[4], var58[5], var58[6], var58[7],
      var58[8],
      var58[9],
      var58[10],
      var58[11],
      var58[12]);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1002A9800 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    sub_100006FB4(v6, (uint64_t)qword_1002B6D10);
    swift_retain();
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v27 = a3;
      v22 = v21;
      var58[0] = v21;
      *(_DWORD *)v20 = 136446210;
      v24 = *(_QWORD *)(a2 + 32);
      v23 = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      v28 = sub_100006FCC(v24, v23, var58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, var58, v20 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%{public}s: RPStreamServer Activated", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_1000881E4(Swift::String *a1)
{
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;

  v5 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(34, 1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  String.append(_:)(a1[2]);
  v3._object = (void *)0x80000001002549F0;
  v3._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v3);
  return v5;
}

void sub_100088258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_100088C18();
  a21 = v23;
  a22 = v24;
  v25 = v22;
  if (v22[21])
  {
    v26 = qword_1002A9800;
    sub_10002679C();
    if (v26 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    v27 = sub_10000F6E4();
    v28 = sub_100006FB4(v27, (uint64_t)qword_1002B6D10);
    v29 = sub_10002D790();
    Logger.logObject.getter(v29);
    v30 = sub_10002D844();
    if (os_log_type_enabled(v28, v30))
    {
      v31 = (uint8_t *)sub_10000797C(12);
      v32 = sub_10000797C(32);
      a10 = v32;
      *(_DWORD *)v31 = 136446210;
      v33 = v25[4];
      v34 = v25[5];
      swift_bridgeObjectRetain();
      sub_100006FCC(v33, v34, &a10);
      sub_100088C4C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36, v31 + 4);
      sub_10002645C();
      swift_bridgeObjectRelease();
      sub_100026484((void *)&_mh_execute_header, v28, v30, "%{public}s: Canceling RPStreamServer", v31);
      sub_1000263F4(v32, v37, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v32);
      sub_100007958((uint64_t)v31);

    }
    else
    {

      sub_10002645C();
    }
    RapportStreamServer.cancel()();
    sub_1000269A0();
    v25[21] = 0;
    swift_release();
  }
  if (v25[20])
  {
    swift_retain();
    AnyCancellable.cancel()();
    sub_10000B348();
    v25[20] = 0;
    swift_release();
  }
  sub_100088BDC();
}

uint64_t sub_1000883DC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return sub_10000AEBC(v0 + 176);
}

uint64_t sub_100088400()
{
  uint64_t v0;
  uint64_t v1;

  sub_100026FE0();
  v1 = v0;
  swift_release();
  swift_release();
  sub_10000AEBC(v1 + 176);
  return v1;
}

uint64_t sub_10008843C()
{
  uint64_t v0;

  v0 = sub_100088400();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for P2PDirectLink()
{
  return objc_opt_self(_TtC13EnsembleAgent13P2PDirectLink);
}

void sub_100088478()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100088C18();
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v0 = sub_10000F6E4();
  v1 = sub_100006FB4(v0, (uint64_t)qword_1002B6D10);
  v2 = sub_10002D790();
  Logger.logObject.getter(v2);
  v3 = sub_10002D844();
  if (os_log_type_enabled(v1, v3))
  {
    v4 = (uint8_t *)sub_10000797C(12);
    v9 = sub_10000797C(32);
    *(_DWORD *)v4 = 136446210;
    v5 = sub_100088C60();
    sub_100088BF8(v5);
    sub_100088C4C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6, v7, v4 + 4);
    sub_10002645C();
    swift_bridgeObjectRelease();
    sub_100026484((void *)&_mh_execute_header, v1, v3, "%{public}s: RPStreamServer Invalidated", v4);
    sub_1000263F4(v9, v8, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v9);
    sub_100007958((uint64_t)v4);

  }
  else
  {

    sub_10002645C();
  }
  sub_100027738();
  sub_100088BDC();
}

id sub_1000885B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t Strong;
  char v17;
  char v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[11];
  uint64_t v28;
  uint64_t v29;

  sub_100088C18();
  v28 = v1;
  v29 = v2;
  v3 = v0;
  v5 = v4;
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v6 = sub_10000F6E4();
  sub_100006FB4(v6, (uint64_t)qword_1002B6D10);
  swift_retain_n(v5, 2);
  v7 = sub_10002D790();
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = sub_10000797C(22);
    v11 = sub_10000797C(64);
    v27[0] = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = sub_100088C60();
    v26 = sub_100088BF8(v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v10 + 4);
    sub_10002645C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    RapportStreamSession.streamID.getter();
    if (v14)
    {
      v15 = v14;
    }
    else
    {
      v13 = 0;
      v15 = 0xE000000000000000;
    }
    v26 = sub_100006FCC(v13, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v10 + 14);
    sub_10000F650(v5);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Prepare %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    sub_100007958(v11);
    sub_100007958(v10);

  }
  else
  {

    sub_10000F650(v5);
    sub_10002645C();
  }
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 176);
  if (Strong)
  {
    sub_10002679C();
    sub_10002D790();
    sub_100117D94();
    v18 = v17;
    sub_1000269A0();
    sub_10002645C();
    swift_unknownObjectRelease(Strong);
    return (id)(v18 & 1);
  }
  else
  {
    sub_1000136A0();
    v20 = sub_100088C34();
    return NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v20, v21, v22, v23, v24, v25, 156);
  }
}

void sub_1000887E8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v9 = sub_10000F6E4();
  sub_100006FB4(v9, (uint64_t)qword_1002B6D10);
  swift_retain_n(a2, 2);
  swift_retain();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v32 = a3;
    v14 = sub_10000797C(22);
    v15 = sub_10000797C(64);
    v34 = v15;
    *(_DWORD *)v14 = 136446466;
    v17 = *(_QWORD *)(v4 + 32);
    v16 = *(_QWORD *)(v4 + 40);
    swift_bridgeObjectRetain();
    v33 = sub_100006FCC(v17, v16, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v14 + 4);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    RapportStreamSession.streamID.getter();
    if (v19)
    {
      v20 = v19;
    }
    else
    {
      v18 = 0;
      v20 = 0xE000000000000000;
    }
    v33 = sub_100006FCC(v18, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v14 + 14);
    sub_10000F650(a2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "%{public}s: Accept %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    sub_100007958(v15);
    v21 = v14;
    a3 = v32;
    sub_100007958(v21);

  }
  else
  {

    sub_10000F650(a2);
    swift_release();
  }
  Strong = swift_unknownObjectWeakLoadStrong(v5 + 176);
  if (Strong)
  {
    v23 = Strong;
    v24 = type metadata accessor for Completion();
    sub_1000088D8(v24, 48);
    sub_10002D790();
    Completion.init(file:line:body:)(0xD00000000000005CLL, 0x8000000100254990, 179, (uint64_t)a3, a4);
    sub_1001180C4();
    swift_unknownObjectRelease(v23);
    sub_10002645C();
  }
  else
  {
    sub_1000136A0();
    v25 = sub_100088C34();
    v31 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v25, v26, v27, v28, v29, v30, 175);
    a3();

  }
}

id sub_100088AA4()
{
  return sub_1000885B0();
}

uint64_t sub_100088ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  type metadata accessor for RapportStreamSession();
  v2 = RapportStreamSession.__allocating_init()();
  if (*(_QWORD *)(v0 + 168))
  {
    swift_retain(*(_QWORD *)(v0 + 168));
    v3 = RapportStreamSession.messenger.getter();
    sub_10000B348();
  }
  else
  {
    v3 = 0;
  }
  RapportStreamSession.messenger.setter((uint64_t)v3);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  swift_bridgeObjectRetain(v5);
  RapportStreamSession.serviceType.setter(v4, v5);
  return v2;
}

uint64_t sub_100088B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100088B88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100088B98()
{
  uint64_t v0;

  return sub_1001891DC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100088BA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100088BCC(uint64_t a1)
{
  uint64_t v1;

  return sub_100087F40(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100088BD4()
{
  Swift::String *v0;

  return sub_1000881E4(v0);
}

uint64_t sub_100088BF8(uint64_t a1, ...)
{
  uint64_t v1;
  unint64_t v2;
  va_list va;

  va_start(va, a1);
  return sub_100006FCC(v1, v2, (uint64_t *)va);
}

uint64_t sub_100088C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

uint64_t sub_100088C34()
{
  return 4294960582;
}

uint64_t sub_100088C60()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100088C6C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100088D88(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 1684632949;
  return 0x726F727265;
}

uint64_t sub_100088DC8()
{
  char *v0;

  return sub_100088D88(*v0);
}

uint64_t sub_100088DD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100088C6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100088DF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100089FD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088E1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100089FD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100088E44(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  v4 = sub_1000055B0(&qword_1002AD3E8);
  __chkstk_darwin(v4);
  sub_100026500();
  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_10000DBE4(a1, v5);
  v8 = sub_100089FD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PMessage.CodingKeys, &type metadata for P2PMessage.CodingKeys, v8, v5, v6);
  if (!v1)
  {
    LOBYTE(v30) = 0;
    v7 = v2;
    v9 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v4);
    v11 = v10;
    v32 = 1;
    sub_10008A010();
    sub_10008A588((uint64_t)&type metadata for UniversalControlUUID);
    v25 = v30;
    v13 = BYTE1(v30);
    v23 = BYTE2(v30);
    v24 = BYTE3(v30);
    v26 = BYTE4(v30);
    v27 = BYTE5(v30);
    v28 = BYTE6(v30);
    v29 = HIBYTE(v30);
    v14 = v9 == 0x7463656E6E6F63 && v11 == (void *)0xE700000000000000;
    if (v14
      || (v7 = (_QWORD *)0xE700000000000000, (sub_10008A574(0x7463656E6E6F63) & 1) != 0)
      || (v9 == 0x73736563637573 ? (v15 = v11 == (void *)0xE700000000000000) : (v15 = 0),
          v15 || (sub_10008A574(0x73736563637573) & 1) != 0))
    {
      sub_10008A534();
      sub_10000E4A0();
      sub_10008A4C4();
    }
    else
    {
      v16 = v9 == 0x6572756C696166 && v11 == (void *)0xE700000000000000;
      if (v16 || (sub_10008A574(0x6572756C696166) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v32 = 2;
        sub_10008A090();
        sub_10008A588((uint64_t)&type metadata for P2PError);
        sub_10008A534();
        v7 = (_QWORD *)(v25 | (v13 << 8) | (v23 << 16) | (v24 << 24) | (v26 << 32) | (v27 << 40) | (v28 << 48) | (v29 << 56));
      }
      else
      {
        v32 = 0;
        v30 = 0;
        v31 = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v30 = 0xD000000000000017;
        v31 = 0x8000000100254B00;
        v17._countAndFlagsBits = v9;
        v17._object = v11;
        String.append(_:)(v17);
        sub_10000E4A0();
        v18._countAndFlagsBits = 39;
        v18._object = (void *)0xE100000000000000;
        String.append(_:)(v18);
        v7 = (_QWORD *)v30;
        v19 = v31;
        v20 = type metadata accessor for DecodingError(0);
        swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
        v21 = sub_10008A04C();
        static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(&v32, v2, v7, v19, v4, v21);
        v22 = sub_10000E4A0();
        swift_willThrow(v22);
        sub_10008A534();
      }
    }
  }
  sub_100005988(a1);
  return v7;
}

void sub_100089230(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;

  v8 = sub_1000055B0(&qword_1002AD410);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10000DBE4(a1, v12);
  v14 = sub_100089FD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PMessage.CodingKeys, &type metadata for P2PMessage.CodingKeys, v14, v12, v13);
  v15 = *(_QWORD *)&aConnect_2[8 * (a4 >> 62)];
  LOBYTE(v24[0]) = 0;
  v16 = v23[1];
  KeyedEncodingContainer.encode(_:forKey:)(v15, 0xE700000000000000, v24, v8);
  if (v16)
  {
    sub_100026A84((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v24[0] = a2;
    v24[1] = a3;
    v25 = 1;
    v17 = sub_10008A0CC();
    sub_10008A5A4(v17, v18, v19, (uint64_t)&type metadata for UniversalControlUUID, v17);
    if (a4 >> 62 == 2)
    {
      v24[0] = a4 & 0x3FFFFFFFFFFFFFFFLL;
      v25 = 2;
      swift_errorRetain(a4 & 0x3FFFFFFFFFFFFFFFLL);
      v20 = sub_10008A108();
      sub_10008A5A4(v20, v21, v22, (uint64_t)&type metadata for P2PError, v20);
      sub_100026A84((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      sub_100089820(a2, a3, a4);
    }
    else
    {
      sub_100026A84((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    }
  }
}

_QWORD *sub_100089450@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100088E44(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void sub_10008947C(_QWORD *a1)
{
  uint64_t v1;

  sub_100089230(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

void sub_100089498(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;

  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  sub_100026500();
  if ((a3 >> 62) > 1)
  {
    v20 = a3 & 0x3FFFFFFFFFFFFFFFLL;
    swift_errorRetain(a3 & 0x3FFFFFFFFFFFFFFFLL);
    v41 = a3;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40);
    v21 = sub_10008A5F4();
    v23 = v22;
    sub_10008A5C8();
    v24 = sub_1000599D0(8, v21, v23);
    v25 = static String._fromSubstring(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 10272;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    v30 = (void *)_convertErrorToNSError(_:)(v20);
    v31 = objc_msgSend(v30, "domain", a2);

    if (v31)
    {
      v32 = objc_msgSend(v31, "description");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);

      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 32;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      v38 = (void *)_convertErrorToNSError(_:)(v20);
      objc_msgSend(v38, "code");

      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 41;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      sub_100089820(a1, a2, v41);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10008A544();
    UUID.init(uuid:)(a1, v7, v8, v9, v10, v11);
    v12 = sub_10008A5F4();
    v14 = v13;
    sub_10008A5C8();
    v15 = sub_1000599D0(8, v12, v14);
    v16 = static String._fromSubstring(_:)(v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
  }
}

void sub_100089814()
{
  uint64_t v0;

  sub_100089498(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_100089820(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62 == 2)
    return swift_errorRelease(a3 & 0x3FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t sub_100089838(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];

  *(_QWORD *)&v17 = 31;
  AnyHashable.init<A>(_:)(&v19, &v17);
  sub_100041C8C(a1, &v17);
  sub_10002D33C((uint64_t)&v19);
  if (v18)
  {
    sub_100005778(&v17, v20);
    sub_100007918((uint64_t)v20, (uint64_t)&v19);
    if (swift_dynamicCast(&v17, &v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
    {
      v3 = v17;
      sub_1000899D8(&v19);
      sub_100005988(v20);
      result = sub_100022AEC(v3, *((unint64_t *)&v3 + 1));
      if (!v1)
        return v19;
    }
    else
    {
      sub_100040400();
      sub_10008A5E0();
      NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v11, v12, v13, v14, v15, v16, 113);
      sub_10008A5BC();
      return sub_100005988(v20);
    }
  }
  else
  {
    sub_100005570((uint64_t)&v17);
    sub_100040400();
    sub_10008A5E0();
    NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v5, v6, v7, v8, v9, v10, 110);
    return sub_10008A5BC();
  }
  return result;
}

void sub_10008998C(uint64_t a1, uint64_t a2)
{
  sub_100089BB8(a1, a2, (void (*)(_QWORD *))sub_1000A0658);
  sub_10008A5D8();
}

uint64_t sub_1000899D8@<X0>(_QWORD *a1@<X8>)
{
  Class isa;
  id v3;
  _OWORD *v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  int v9;
  _OWORD v10[2];
  _OWORD v11[2];

  v9 = ((uint64_t (*)(void))noErr.getter)();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = sub_100089B28(isa);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v10, v3);
    swift_unknownObjectRelease(v3);
    v4 = sub_100005778(v10, v11);
    if (v9 == noErr.getter(v4))
    {
      v5 = type metadata accessor for PropertyListTypeDecoder();
      swift_initStackObject(v5, &v8);
      sub_100089D58((uint64_t)v11, a1);
      return sub_100005988(v11);
    }
    sub_100005988(v11);
  }
  sub_1000136A0();
  v7 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v9, 0xD000000000000014, 0x8000000100254A80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/OPACKCoding.swift", 81, 2, 28);
  return swift_willThrow(v7);
}

id sub_100089B28(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)OPACKDecodeData();

  return v2;
}

void sub_100089B6C(uint64_t a1, uint64_t a2)
{
  sub_100089BB8(a1, a2, (void (*)(_QWORD *))sub_10010FD44);
  sub_10008A5D8();
}

uint64_t sub_100089BB8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  Class isa;
  id v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  _OWORD v11[2];
  _OWORD v12[2];

  v10 = noErr.getter(a1);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = sub_100089B28(isa);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v11, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100005778(v11, v12);
    if (v10 == noErr.getter(v6))
    {
      v7 = type metadata accessor for PropertyListTypeDecoder();
      swift_initStackObject(v7, &v9);
      sub_100089E28((uint64_t)v12, a3);
      return sub_100005988(v12);
    }
    sub_100005988(v12);
  }
  sub_100040400();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v10, 0xD000000000000014, 0x8000000100254A80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/OPACKCoding.swift", 81, 2, 28);
  return sub_10008A5BC();
}

void sub_100089D0C(uint64_t a1, uint64_t a2)
{
  sub_100089BB8(a1, a2, (void (*)(_QWORD *))sub_100177BC0);
  sub_10008A5D8();
}

uint64_t sub_100089D58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10[2];
  uint64_t v11;

  sub_100007918(a1, (uint64_t)&v11);
  v4 = type metadata accessor for CodingUserInfoKey(0);
  v10[0] = (uint64_t)_swiftEmptyArrayStorage;
  v10[1] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v4, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
  v9[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
  v9[4] = sub_100089EF4();
  v9[0] = swift_allocObject(&unk_100285E50, 64, 7);
  sub_100089F64(v10, (uint64_t *)(v9[0] + 16));
  v5 = sub_100088E44(v9);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
  }
  return sub_100089FA0((uint64_t)v10);
}

uint64_t sub_100089E28(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6[2];
  uint64_t v7;

  sub_100007918(a1, (uint64_t)&v7);
  v3 = type metadata accessor for CodingUserInfoKey(0);
  v6[0] = (uint64_t)_swiftEmptyArrayStorage;
  v6[1] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v3, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
  v5[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
  v5[4] = sub_100089EF4();
  v5[0] = swift_allocObject(&unk_100285E50, 64, 7);
  sub_100089F64(v6, (uint64_t *)(v5[0] + 16));
  a2(v5);
  return sub_100089FA0((uint64_t)v6);
}

unint64_t sub_100089EF4()
{
  unint64_t result;

  result = qword_1002AD3E0;
  if (!qword_1002AD3E0)
  {
    result = swift_getWitnessTable(&unk_1002237EC, &type metadata for PropertyListTypeDecoder.RootDecoder);
    atomic_store(result, (unint64_t *)&qword_1002AD3E0);
  }
  return result;
}

uint64_t sub_100089F30()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100005988((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t *sub_100089F64(uint64_t *a1, uint64_t *a2)
{
  initializeWithCopy for PropertyListTypeDecoder.RootDecoder(a2, a1);
  return a2;
}

uint64_t sub_100089FA0(uint64_t a1)
{
  destroy for PropertyListTypeDecoder.RootDecoder(a1);
  return a1;
}

unint64_t sub_100089FD4()
{
  unint64_t result;

  result = qword_1002AD3F0;
  if (!qword_1002AD3F0)
  {
    result = swift_getWitnessTable(&unk_10021FD00, &type metadata for P2PMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD3F0);
  }
  return result;
}

unint64_t sub_10008A010()
{
  unint64_t result;

  result = qword_1002AD3F8;
  if (!qword_1002AD3F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlUUID, &type metadata for UniversalControlUUID);
    atomic_store(result, (unint64_t *)&qword_1002AD3F8);
  }
  return result;
}

unint64_t sub_10008A04C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AD400;
  if (!qword_1002AD400)
  {
    v1 = sub_10000DCA0(&qword_1002AD3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyedDecodingContainer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AD400);
  }
  return result;
}

unint64_t sub_10008A090()
{
  unint64_t result;

  result = qword_1002AD408;
  if (!qword_1002AD408)
  {
    result = swift_getWitnessTable(&unk_10021F9BC, &type metadata for P2PError);
    atomic_store(result, (unint64_t *)&qword_1002AD408);
  }
  return result;
}

unint64_t sub_10008A0CC()
{
  unint64_t result;

  result = qword_1002B3410;
  if (!qword_1002B3410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlUUID, &type metadata for UniversalControlUUID);
    atomic_store(result, (unint64_t *)&qword_1002B3410);
  }
  return result;
}

unint64_t sub_10008A108()
{
  unint64_t result;

  result = qword_1002AD418;
  if (!qword_1002AD418)
  {
    result = swift_getWitnessTable(&unk_10021F994, &type metadata for P2PError);
    atomic_store(result, (unint64_t *)&qword_1002AD418);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for P2PMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10008A190 + 4 * byte_10021FBAD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10008A1C4 + 4 * byte_10021FBA8[v4]))();
}

uint64_t sub_10008A1C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A1CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008A1D4);
  return result;
}

uint64_t sub_10008A1E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008A1E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10008A1EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008A1F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PMessage.CodingKeys()
{
  return &type metadata for P2PMessage.CodingKeys;
}

uint64_t sub_10008A214(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 62 == 2)
    return swift_errorRetain(a3 & 0x3FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t destroy for P2PMessage(uint64_t a1)
{
  return sub_100089820(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *_s13EnsembleAgent10P2PMessageOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10008A214(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for P2PMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10008A214(*a2, v4, v5);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_100089820(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for P2PMessage(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_100089820(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 16) >> 57) >> 5) | (4
                                                               * ((*(_QWORD *)(a1 + 16) >> 57) & 0x18 | *(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for P2PMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10008A3C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 62;
}

uint64_t sub_10008A3D0(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10008A3E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for P2PMessage()
{
  return &type metadata for P2PMessage;
}

unint64_t sub_10008A408()
{
  unint64_t result;

  result = qword_1002AD420;
  if (!qword_1002AD420)
  {
    result = swift_getWitnessTable(&unk_10021FCD8, &type metadata for P2PMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD420);
  }
  return result;
}

unint64_t sub_10008A448()
{
  unint64_t result;

  result = qword_1002AD428;
  if (!qword_1002AD428)
  {
    result = swift_getWitnessTable(&unk_10021FC48, &type metadata for P2PMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD428);
  }
  return result;
}

unint64_t sub_10008A488()
{
  unint64_t result;

  result = qword_1002AD430;
  if (!qword_1002AD430)
  {
    result = swift_getWitnessTable(&unk_10021FC70, &type metadata for P2PMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD430);
  }
  return result;
}

uint64_t sub_10008A534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10008A574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, 0xE700000000000000, v2, v1, 0);
}

uint64_t sub_10008A588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_10008A5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 96, v6 - 65, v5, a4, a5);
}

uint64_t sub_10008A5BC()
{
  return swift_willThrow();
}

uint64_t sub_10008A5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10008A5F4()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

xpc_connection_t ECXPCConnection.init(machService:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  xpc_connection_t mach_service;

  v5 = String.utf8CString.getter();
  v6 = a3;
  swift_bridgeObjectRelease(a2);
  mach_service = xpc_connection_create_mach_service((const char *)(v5 + 32), v6, 0);
  swift_release(v5);

  return mach_service;
}

uint64_t static ECXPCConnection.send(to:message:barrier:)(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  _xpc_connection_s *mach_service;
  void *v19;
  _xpc_connection_s *v20;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B0EC();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  v14 = swift_bridgeObjectRetain();
  v15 = (void *)static OS_dispatch_queue.global(qos:)(v13, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = String.utf8CString.getter(a1, a2);
  v17 = v15;
  swift_bridgeObjectRelease();
  mach_service = xpc_connection_create_mach_service((const char *)(v16 + 32), v17, 0);
  swift_release();

  aBlock[4] = CGSize.init(_:);
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100049274;
  aBlock[3] = &unk_100286038;
  v19 = _Block_copy(aBlock);
  v20 = (_xpc_connection_s *)swift_unknownObjectRetain(mach_service);
  xpc_connection_set_event_handler(v20, v19);
  _Block_release(v19);
  swift_unknownObjectRelease(mach_service);
  xpc_connection_activate(mach_service);
  ECXPCConnection.send(_:barrier:)(a3, a4, a5, mach_service);
  return swift_unknownObjectRelease(mach_service);
}

uint64_t sub_10008A814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008A824(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void ECXPCConnection.send(_:barrier:)(xpc_object_t message, int a2, int a3, xpc_connection_t connection)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;

  xpc_connection_send_message(connection, message);
  v5 = sub_10000B2EC((uint64_t)sub_10000E610, (uint64_t)_NSConcreteStackBlock, 1107296256, v6, v7);
  sub_1000088D0();
  swift_release();
  xpc_connection_send_barrier(connection, v5);
  _Block_release(v5);
}

uint64_t ECXPCConnection.send(_:)(void (*a1)(void), uint64_t a2, _xpc_connection_s *a3)
{
  xpc_object_t v5;

  v5 = ECXPCDictionary.init()();
  a1();
  xpc_connection_send_message(a3, v5);
  return swift_unknownObjectRelease(v5);
}

void ECXPCConnection.send(_:)(xpc_object_t message, xpc_connection_t connection)
{
  xpc_connection_send_message(connection, message);
}

uint64_t ECXPCConnection.send(_:queue:reply:)(void (*a1)(void), uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, _xpc_connection_s *a6)
{
  xpc_object_t v11;

  v11 = ECXPCDictionary.init()();
  a1();
  ECXPCConnection.send(_:queue:reply:)(v11, a3, a4, a5, a6);
  return swift_unknownObjectRelease(v11);
}

void ECXPCConnection.send(_:queue:reply:)(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, _xpc_connection_s *a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = swift_allocObject(&unk_100286098, 32, 7);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v11 = sub_10000B2EC((uint64_t)sub_100049274, (uint64_t)_NSConcreteStackBlock, 1107296256, v12, v13);
  sub_1000088D0();
  swift_release();
  xpc_connection_send_message_with_reply(a5, a1, a2, v11);
  _Block_release(v11);
  sub_10000B2CC();
}

uint64_t sub_10008AA44(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;

  v4 = swift_unknownObjectRetain(a1);
  a2(v4);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10008AA7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008AAA0(uint64_t a1)
{
  uint64_t v1;

  return sub_10008AA44(a1, *(void (**)(uint64_t))(v1 + 16));
}

void ECXPCConnection.setTargetQueue(_:)(dispatch_queue_t targetq, xpc_connection_t connection)
{
  xpc_connection_set_target_queue(connection, targetq);
}

void ECXPCConnection.getEntitlement<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  memset(v13, 0, sizeof(v13));
  xpc_connection_get_audit_token(a3, v13);
  v11 = String.utf8CString.getter(a1, a2);
  v12 = xpc_copy_entitlement_for_token(v11 + 32, v13);
  swift_release();
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 8))(v12, a4, a5);
  else
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a6, 1, 1, a4);
  sub_10000B2CC();
}

uint64_t ECXPCConnection.auditToken.getter(uint64_t a1)
{
  _OWORD v2[2];

  memset(v2, 0, sizeof(v2));
  xpc_connection_get_audit_token(a1, v2);
  return *(_QWORD *)&v2[0];
}

ValueMetadata *type metadata accessor for ECXPCConnection()
{
  return &type metadata for ECXPCConnection;
}

uint64_t sub_10008AC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[3];
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v26 = _swiftEmptyArrayStorage;
      result = specialized ContiguousArray.reserveCapacity(_:)(v9);
      if (v9 < 0)
        break;
      v11 = 0;
      v22[2] = v3;
      v23 = a1 & 0xC000000000000001;
      v22[1] = a2;
      a2 += OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_logger;
      v12 = a1;
      while (v9 != v11)
      {
        if (v23)
        {
          v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
        }
        else
        {
          v13 = *(_QWORD *)(a1 + 8 * v11 + 32);
          v14 = swift_retain();
        }
        ++v11;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))(v8, a2, v25, v14);
        v15 = objc_allocWithZone((Class)type metadata accessor for PasteboardItemProvider_iOS(0));
        swift_retain();
        v16 = sub_10001E04C();
        v17 = sub_10001E104(v13);
        swift_release();

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v3 = v26[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v3);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v17);
        specialized ContiguousArray._endMutation()(v19);
        a1 = v12;
        if (v9 == v11)
        {
          v20 = v26;
          swift_release();
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_12:
      if (a1 < 0)
        v21 = a1;
      else
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_release();
    v20 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_release();
    return (uint64_t)v20;
  }
  return result;
}

void sub_10008AE14(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v16 = _swiftEmptyArrayStorage;
      sub_1000589A4();
      if (v5 < 0)
        break;
      v6 = 0;
      v7 = v16;
      while (v5 != v6)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        else
          v8 = *(id *)(a1 + 8 * v6 + 32);
        v9 = v8;
        v14 = v8;
        sub_100091E68(&v14, (uint64_t)a2, &v15);
        if (v3)
        {
          swift_release();

          return;
        }
        v3 = 0;

        v10 = v15;
        v16 = v7;
        v11 = v7[2];
        if (v11 >= v7[3] >> 1)
        {
          sub_1000589A4();
          v7 = v16;
        }
        ++v6;
        v7[2] = v11 + 1;
        v7[v11 + 4] = v10;
        if (v5 == v6)
          goto LABEL_13;
      }
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease();
      if (!v5)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:

  }
}

_QWORD *sub_10008AFBC(uint64_t a1, uint64_t (*a2)(unint64_t, id))
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  specialized ContiguousArray.reserveCapacity(_:)(0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_7:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_12;
        v8 = a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v9 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
        specialized ContiguousArray._endMutation()(v10);
        ++v4;
        if (v7 == v3)
          goto LABEL_17;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v3 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v3)
        goto LABEL_17;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10008B110(uint64_t a1, void (*a2)(_OWORD *__return_ptr, unint64_t, id))
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD *v18;

  v18 = _swiftEmptyArrayStorage;
  sub_1000589C0();
  v3 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_7:
        v7 = v6;
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_14;
        a2(v16, v5, v6);

        v18 = v3;
        v9 = v3[2];
        if (v9 >= v3[3] >> 1)
        {
          sub_1000589C0();
          v3 = v18;
        }
        v3[2] = v9 + 1;
        v10 = &v3[5 * v9];
        v11 = v16[0];
        v12 = v16[1];
        v10[8] = v17;
        *((_OWORD *)v10 + 2) = v11;
        *((_OWORD *)v10 + 3) = v12;
        ++v5;
        if (v8 == v4)
          goto LABEL_19;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      if (a1 < 0)
        v13 = a1;
      else
        v13 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (!v4)
        goto LABEL_19;
    }
    v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_7;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

void sub_10008B2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7)
    sub_1000954B4(v3, v7, v6);
  sub_10000E410();
  sub_10000E420();
  sub_10000B350();
}

void sub_10008B30C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10008B34C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10008B3E8 + 4 * byte_10021FD96[a2]))(0x726564726FLL);
}

void sub_10008B3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != 0x726564726FLL || v2 != 0xE500000000000000)
    sub_1000954B4(a1, a2, 0x726564726FLL);
  sub_10000E410();
  sub_10000E420();
  sub_10000B350();
}

void sub_10008B498(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10008B4E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10008B5B8 + 4 * byte_10021FDA4[a2]))(0x656369766564);
}

void sub_10008B5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != 0x656369766564 || v2 != 0xE600000000000000)
    sub_1000954B4(a1, a2, 0x656369766564);
  sub_10000E410();
  sub_10000E420();
  sub_10000B350();
}

uint64_t sub_10008B6A0(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_10008B6B0(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

void sub_10008B6C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidConnection);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidConnection) = a1;

}

uint64_t sub_10008B6D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidEnsembleProxyObject);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidEnsembleProxyObject) = a1;
  return swift_unknownObjectRelease(v2);
}

void DragPlatformProvider_iOS.secureLayerHost.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost;
  sub_10000B2F8(v3, (uint64_t)v4, 0);
  sub_10008B730(v3, a1);
  sub_100015540();
}

uint64_t sub_10008B730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AAF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void DragPlatformProvider_iOS.secureLayerHost.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost;
  sub_10000B2F8(v3, (uint64_t)v4, 33);
  sub_10005F3B4(a1, v3);
  swift_endAccess(v4);
  sub_100015540();
}

uint64_t (*DragPlatformProvider_iOS.secureLayerHost.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost, a1, 33);
  return j__swift_endAccess;
}

uint64_t sub_10008B804()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6EC8);
  sub_100006FB4(v0, (uint64_t)qword_1002B6EC8);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1195463236, 0xE400000000000000);
}

id sub_10008B870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  os_log_type_t v4;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  objc_super v27;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidConnection] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidEnsembleProxyObject] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags] = 0;
  sub_1000955D4(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource);
  sub_1000955D4(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSink);
  v8 = sub_1000955D4(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_dragController);
  v9 = &v3[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pointerLocation];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v3[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost];
  sub_10002D82C(v8, &qword_1002ADD88, NSXPCListener_ptr);
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  v11 = v3;
  v12 = sub_10008BB64(0xD00000000000001DLL, 0x8000000100255330);
  v13 = &v11[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_displayController];
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidListener] = v12;
  *(_QWORD *)&v11[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pasteboardController] = a3;
  swift_unknownObjectRetain(a1);
  v14 = v12;
  sub_100060200();

  v27.receiver = v11;
  v27.super_class = (Class)type metadata accessor for DragPlatformProvider_iOS();
  v15 = objc_msgSendSuper2(&v27, "init");
  sub_10002D82C((uint64_t)v15, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v16 = v15;
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  sub_10000F710(v14, "_setQueue:");

  objc_msgSend(v14, "setDelegate:", v16);
  objc_msgSend(v14, "activate");
  if (qword_1002A9878 != -1)
    swift_once(&qword_1002A9878, sub_10008B804);
  v18 = sub_10000F6E4();
  sub_100006FB4(v18, (uint64_t)qword_1002B6EC8);
  v19 = sub_1000850FC();
  v20 = static os_log_type_t.info.getter();
  if (sub_10002D948(v20))
  {
    v21 = (uint8_t *)sub_10000797C(12);
    v22 = sub_10000797C(32);
    v26 = v22;
    *(_DWORD *)v21 = 136446210;
    v25 = sub_100006FCC(0xD00000000000001DLL, 0x8000000100255330, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v21 + 4);
    sub_100026484((void *)&_mh_execute_header, v19, v4, "%{public}s Activated", v21);
    sub_1000263F4(v22, v23, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v22);
    sub_100007958((uint64_t)v21);

    swift_unknownObjectRelease(a1);
    swift_release();

  }
  else
  {

    swift_unknownObjectRelease(a1);
    sub_1000955CC();

  }
  return v16;
}

id sub_10008BB64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithMachServiceName:", v5);

  return v6;
}

#error "10008BDF4: call analysis failed (funcsize=158)"

uint64_t sub_10008BE88(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, _UNKNOWN **, uint64_t), uint64_t a4, uint64_t a5)
{
  if ((a2 & 1) == 0)
    return a3(a5, &off_100286268, 0);
  swift_errorRetain(a1);
  a3(a1, 0, 1);
  return sub_100013530(a1, 1);
}

void sub_10008BEF8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(void ***);
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[5];
  char v71;

  sub_100095478();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v56 = v8;
  sub_1000954F4();
  v10 = v9 >> 8;
  v11 = v9 >> 16;
  v12 = v9 >> 24;
  v13 = HIDWORD(v9);
  v14 = v9 >> 40;
  v54 = (void *)HIWORD(v9);
  v55 = HIBYTE(v9);
  v57 = v15 >> 8;
  v58 = v15 >> 16;
  v59 = v15 >> 24;
  v60 = HIDWORD(v15);
  v61 = v15 >> 40;
  v62 = HIWORD(v15);
  v63 = HIBYTE(v15);
  v16 = sub_10000F6E4();
  v66 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  sub_1000262EC();
  __chkstk_darwin(v17);
  sub_10000E5DC();
  v68 = v18;
  v19 = sub_1000088D8((uint64_t)&unk_1002862B8, 48);
  v64 = v7;
  v65 = v5;
  *(_QWORD *)(v19 + 16) = v7;
  *(_QWORD *)(v19 + 24) = v5;
  *(_BYTE *)(v19 + 32) = v3;
  *(_BYTE *)(v19 + 33) = v10;
  *(_BYTE *)(v19 + 34) = v11;
  *(_BYTE *)(v19 + 35) = v12;
  *(_BYTE *)(v19 + 36) = v13;
  *(_BYTE *)(v19 + 37) = v14;
  *(_BYTE *)(v19 + 38) = (_BYTE)v54;
  *(_BYTE *)(v19 + 39) = v55;
  *(_BYTE *)(v19 + 40) = (_BYTE)v1;
  *(_BYTE *)(v19 + 41) = v57;
  *(_BYTE *)(v19 + 42) = v58;
  *(_BYTE *)(v19 + 43) = v59;
  *(_BYTE *)(v19 + 44) = v60;
  *(_BYTE *)(v19 + 45) = v61;
  *(_BYTE *)(v19 + 46) = v62;
  v20 = v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource;
  *(_BYTE *)(v19 + 47) = v63;
  Strong = swift_weakLoadStrong(v20);
  if (Strong)
  {
    v22 = Strong;
    v23 = qword_1002A9878;
    sub_1000088D0();
    sub_10002679C();
    if (v23 != -1)
      swift_once(&qword_1002A9878, sub_10008B804);
    v24 = sub_100006FB4(v67, (uint64_t)qword_1002B6EC8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v68, v24, v67);
    v25 = *(_QWORD *)(v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_displayController);
    v26 = *(_QWORD *)(v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_displayController + 8);
    v27 = *(_QWORD *)(v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pasteboardController);
    v28 = v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost;
    sub_10000B2F8(v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost, (uint64_t)&v69, 0);
    sub_10008B730(v28, (uint64_t)v70);
    v29 = type metadata accessor for DragSink_iOS(0);
    sub_10004113C(v29);
    swift_unknownObjectRetain(v25);
    sub_100060200();
    sub_10005FF54();
    v30 = sub_100090100(v68, v25, v26, v27, (uint64_t)v70, v22);
    sub_100013868(1);
    swift_weakAssign(v56 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSink, v30);
    sub_1000955B4();
    sub_1000905CC(v31, v19);
    sub_10002645C();
    sub_10000FF50();
    swift_release();
  }
  else
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v32 = v7;
    sub_100026AE4();
    v33 = v5;
    sub_10002679C();
    sub_1000955C0();
    sub_100095468();
    v40 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v34, v35, v36, v37, v38, v39, 121);
    if (qword_1002A9878 != -1)
      swift_once(&qword_1002A9878, sub_10008B804);
    v41 = v67;
    v42 = sub_100006FB4(v67, (uint64_t)qword_1002B6EC8);
    v43 = v66;
    v44 = v68;
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v68, v42, v67);
    __chkstk_darwin(v45);
    sub_100095520();
    sub_1000E22C4((int)sub_100026210, v46, v68, v47, v48, v49, v50, v51, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
      v64,
      v65,
      v66,
      v67,
      v68);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v41);
    v70[0] = v40;
    v71 = 1;
    v52 = v40;
    sub_1000C70A4((uint64_t)v70, v32, v33, v3, v1);

    sub_100025A28((uint64_t)v70, &qword_1002ADCB0);
    sub_100026AEC();
  }
  swift_release();
  sub_1000269A0();
  sub_10009543C();
}

void sub_10008C2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  id v30;
  id v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_10000F6E4();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10002641C();
  v10 = v9 - v8;
  Strong = swift_weakLoadStrong(a3 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource);
  if (Strong)
  {
    v12 = Strong;
    if (qword_1002A9878 != -1)
      swift_once(&qword_1002A9878, sub_10008B804);
    v13 = sub_100006FB4(v6, (uint64_t)qword_1002B6EC8);
    sub_100095588(v13);
    v14 = type metadata accessor for DragSinkForwarded_iOS(0);
    sub_10004113C(v14);
    swift_retain();
    sub_1000088D0();
    sub_100060200();
    v32 = v14;
    v33 = &off_1002861D8;
    v31[0] = (id)sub_1000935BC(v10, a1, a2, v12);
    LOBYTE(v34) = 0;
    swift_retain();
    sub_1000954C4();
    sub_10000B348();
    sub_1000955CC();
  }
  else
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_1000955C0();
    sub_100095468();
    v21 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v15, v16, v17, v18, v19, v20, 145);
    if (qword_1002A9878 != -1)
      swift_once(&qword_1002A9878, sub_10008B804);
    v22 = sub_100006FB4(v6, (uint64_t)qword_1002B6EC8);
    v23 = sub_100095588(v22);
    __chkstk_darwin(v23);
    sub_100095520();
    sub_1000E22C4((int)sub_100026210, v24, v10, v25, v26, v27, v28, v29, (uint64_t)v31[0], v31[1], (uint64_t)v31[2], v32, (uint64_t)v33, v34, v35, v36, v37, v38, v39,
      v40,
      v41,
      v42,
      v43,
      v44);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    v31[0] = v21;
    LOBYTE(v34) = 1;
    v30 = v21;
    sub_1000954C4();

  }
  sub_100025A28((uint64_t)v31, &qword_1002ADCB0);
  sub_1000269A0();
  sub_10002645C();
  sub_10000E4E0();
}

void sub_10008C518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100095710(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource);
  if (v1
    && (v2 = *(_QWORD *)(v1
                       + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy),
        swift_unknownObjectRetain(v2),
        sub_10002645C(),
        v2))
  {
    swift_unknownObjectRelease(v2);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags);
    if ((v3 & 1) == 0)
      *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags) = v3 | 1;
    sub_10000B350();
  }
}

id DragPlatformProvider_iOS.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void DragPlatformProvider_iOS.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.DragPlatformProvider_iOS", 38, "init()", 6, 0);
  __break(1u);
}

id DragPlatformProvider_iOS.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DragPlatformProvider_iOS();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DragPlatformProvider_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent24DragPlatformProvider_iOS);
}

Swift::Bool __swiftcall DragPlatformProvider_iOS.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  objc_class *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD v16[6];

  v3 = v2;
  v5 = sub_10002D82C((uint64_t)_.super.isa, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v6 = (void *)static OS_dispatch_queue.main.getter(v5);
  sub_10000F710(shouldAcceptNewConnection.super.isa, "_setQueue:");

  v7 = sub_1000088D8((uint64_t)&unk_100286110, 24);
  swift_unknownObjectWeakInit(v7 + 16, v3);
  v16[4] = sub_10008C964;
  v16[5] = v7;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10000E610;
  v16[3] = &unk_100286128;
  v8 = _Block_copy(v16);
  swift_release();
  sub_10000F710(shouldAcceptNewConnection.super.isa, "setInterruptionHandler:");
  _Block_release(v8);
  v9 = (id)_DUIEnsembleClientInterface();
  sub_10000F710(shouldAcceptNewConnection.super.isa, "setExportedInterface:");

  sub_100095678(shouldAcceptNewConnection.super.isa, "setExportedObject:");
  if (qword_1002A9878 != -1)
    swift_once(&qword_1002A9878, sub_10008B804);
  v10 = sub_10000F6E4();
  v11 = sub_100006FB4(v10, (uint64_t)qword_1002B6EC8);
  v12 = shouldAcceptNewConnection.super.isa;
  Logger.logObject.getter(v12);
  v13 = sub_10002D844();
  if (sub_100040394(v13))
  {
    v14 = (uint8_t *)sub_10000797C(8);
    *(_DWORD *)v14 = 67109120;
    LODWORD(v16[0]) = -[objc_class processIdentifier](v12, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, (char *)v16 + 4, v14 + 4);

    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v3, "incoming druid connection: pid=%d", v14, 8u);
    sub_100007958((uint64_t)v14);
  }
  else
  {

    v11 = v12;
  }

  -[objc_class resume](v12, "resume");
  return 1;
}

uint64_t sub_10008C8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10008C910(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_10008B6C0(0);

  }
}

void sub_10008C964()
{
  uint64_t v0;

  sub_10008C910(v0);
}

uint64_t sub_10008C96C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008C97C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t DragPlatformProvider_iOS.dragDidBegin(withSession:identifier:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v3 + 116) = a2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v2;
  v4 = sub_10000F6E4();
  *(_QWORD *)(v3 + 88) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 96) = v5;
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008CA3C, 0, 0);
}

uint64_t sub_10008CA3C()
{
  os_log_type_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  if (qword_1002A9878 != -1)
    swift_once(&qword_1002A9878, sub_10008B804);
  v3 = sub_100006FB4(*(_QWORD *)(v2 + 88), (uint64_t)qword_1002B6EC8);
  sub_1000850FC();
  v4 = sub_10002D844();
  if (sub_1000955F0(v4))
  {
    v5 = *(_DWORD *)(v2 + 116);
    v6 = (uint8_t *)sub_10000797C(8);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v2 + 112) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 112, v2 + 116, v6 + 4);
    _os_log_impl((void *)&_mh_execute_header, v1, v0, "druid: incoming drag begin, id=0x%x", v6, 8u);
    sub_100007958((uint64_t)v6);
  }

  v7 = *(_QWORD *)(v2 + 72);
  v8 = *(NSObject **)(v2 + 80);
  v9 = swift_unknownObjectRetain(v7);
  sub_10008B6D4(v9);
  v10 = (char *)v8 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource;
  Strong = swift_weakLoadStrong((char *)v8 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource);
  if (!Strong)
    goto LABEL_12;
  if ((*(_BYTE *)(Strong + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) & 4) != 0)
  {
    sub_10000B364();
LABEL_12:
    v17 = *(_QWORD *)(v2 + 104);
    v18 = *(_QWORD *)(v2 + 80);
    v19 = *(_DWORD *)(v2 + 116);
    v29 = *(_QWORD *)(v2 + 72);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 + 96) + 16))(v17, v3, *(_QWORD *)(v2 + 88));
    v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_displayController);
    v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_displayController + 8);
    v22 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pasteboardController);
    v23 = type metadata accessor for DragSource_iOS(0);
    sub_10004113C(v23);
    swift_unknownObjectRetain(v20);
    sub_100060200();
    v24 = (char *)sub_10008D298(v17, v20, v21, v22);
    v25 = &v24[OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidSourceID];
    *(_DWORD *)v25 = v19;
    v25[4] = 0;
    v26 = *(_QWORD *)&v24[OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject];
    *(_QWORD *)&v24[OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject] = v7;
    swift_unknownObjectRetain(v29);
    swift_unknownObjectRelease(v26);
    swift_weakAssign(v10, v24);
    v27 = *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags);
    if ((v27 & 1) == 0)
      *(_QWORD *)(v18 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags) = v27 | 1;
    if (swift_weakLoadStrong(*(_QWORD *)(v2 + 80) + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_dragController))
    {
      *(_OWORD *)(v2 + 16) = *(_OWORD *)&v24[OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_id];
      *(_QWORD *)(v2 + 32) = v24;
      *(_QWORD *)(v2 + 40) = &off_100286268;
      *(_QWORD *)(v2 + 56) = 0;
      *(_QWORD *)(v2 + 64) = 0;
      *(_QWORD *)(v2 + 48) = 0;
      sub_100026AE4();
      sub_10003D794((__int128 *)(v2 + 16));
      sub_10000F650((uint64_t)v24);
    }
    goto LABEL_16;
  }
  sub_1000956FC(Strong);
  v12 = sub_10002D844();
  if (sub_1000103A0(v12))
  {
    v13 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v13 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "druid: incoming drag ignored, active druid source context present", v13);
    sub_100007958((uint64_t)v13);
  }

  sub_100013868(1);
  v14 = swift_weakLoadStrong(v10);
  sub_10000B364();
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + 72);
    v16 = *(_QWORD *)(v14
                    + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject);
    *(_QWORD *)(v14
              + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject) = v7;
    swift_unknownObjectRetain(v15);
    swift_unknownObjectRelease(v16);
LABEL_16:
    sub_100026AEC();
  }
  swift_task_dealloc(*(_QWORD *)(v2 + 104));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10008CDD0(uint64_t a1, int a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  _QWORD *v9;

  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v8 = dword_1002AD454;
  swift_unknownObjectRetain(a1);
  a4;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v4[5] = v9;
  *v9 = v4;
  v9[1] = sub_10008CE54;
  return DragPlatformProvider_iOS.dragDidBegin(withSession:identifier:)(a1, a2);
}

uint64_t sub_10008CE54()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD);
  uint64_t v2;
  void *v3;

  v1 = (void (**)(_QWORD))*((_QWORD *)*v0 + 4);
  v2 = *((_QWORD *)*v0 + 2);
  v3 = (void *)*((_QWORD *)*v0 + 3);
  sub_100095458(*((_QWORD *)*v0 + 5));

  swift_unknownObjectRelease(v2);
  v1[2](v1);
  _Block_release(v1);
  return v0[1]();
}

uint64_t sub_10008CEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = sub_1000055B0(&qword_1002ADCD0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1002863F8, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)swift_allocObject(&unk_100286420, 48, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1002ADCE0;
  v9[5] = v8;
  sub_100093DA8((uint64_t)v6, (uint64_t)&unk_1002ADCF0, (uint64_t)v9);
  return swift_release();
}

uint64_t DragPlatformProvider_iOS.dragDidEnd(withSession:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  os_log_type_t v7;
  uint8_t *v8;
  __int128 v9[2];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (qword_1002A9878 != -1)
    swift_once(&qword_1002A9878, sub_10008B804);
  v2 = sub_10000F6E4();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6EC8);
  sub_1000850FC();
  v4 = sub_10002D844();
  if (sub_1000403A4(v4))
  {
    v5 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v5 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v0, v1, "druid: incoming drag ending", v5);
    sub_100007958((uint64_t)v5);
  }

  swift_weakAssign((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource, 0);
  result = sub_10008B6D4(0);
  if ((*((_BYTE *)&v0->isa + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSessionFlags) & 1) != 0)
  {
    Logger.logObject.getter(result);
    v7 = sub_10002D844();
    if (sub_100040394(v7))
    {
      v8 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v8 = 0;
      sub_10005FF70((void *)&_mh_execute_header, v3, (os_log_type_t)v3, "druid: local-only drag ended", v8);
      sub_100007958((uint64_t)v8);
    }

    result = swift_weakLoadStrong((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_dragController);
    if (result)
    {
      memset(v9, 0, sizeof(v9));
      v11 = 0;
      v12 = 0;
      v10 = 0xA000000000000000;
      sub_10003D794(v9);
      return swift_release();
    }
  }
  return result;
}

void DragPlatformProvider_iOS.dispatchPointerEvent(_:)(_OWORD *a1)
{
  uint64_t v1;
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (double *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pointerLocation);
  *(_OWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_pointerLocation) = *a1;
  v3 = sub_100095710(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSource);
  if (v3)
  {
    v4 = v3;
    if (*(_QWORD *)(v3
                   + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy))
    {
      v5 = sub_100095710(OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_druidSink);
      swift_release();
      if (!v5)
        sub_10008ECC8(*v2- *(double *)(v4 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_entryPoint), v2[1]- *(double *)(v4+ OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_entryPoint+ 8));
    }
    sub_100095534(v4);
  }
  else
  {
    sub_10000B350();
  }
}

void sub_10008D208(_OWORD *a1)
{
  DragPlatformProvider_iOS.dispatchPointerEvent(_:)(a1);
}

void sub_10008D228(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = CGSize.init(_:)(*a1);
  sub_1000050D4();
}

uint64_t sub_10008D24C(uint64_t *a1)
{
  return sub_10008B6A0(*a1);
}

uint64_t sub_10008D254(uint64_t *a1)
{
  return sub_10008B6B0(*a1);
}

uint64_t sub_10008D25C(uint64_t *a1)
{
  return sub_100179BD8(*a1);
}

uint64_t sub_10008D264(uint64_t *a1)
{
  return sub_100179BE8(*a1);
}

uint64_t sub_10008D26C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CGSize.init(_:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

id sub_10008D298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id result;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **aBlock;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  void *v66;
  uint64_t v67;

  v5 = v4;
  v50 = a4;
  v48 = a3;
  v49 = a2;
  v61 = a1;
  v6 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_BYTE *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_id);
  v11 = UUID.init()(v7);
  v13 = UUID.uuid.getter(v11, v12);
  v14 = UniversalControlUUID.init(rawValue:)(v13, v13 >> 8, v13 >> 16, v13 >> 24, HIDWORD(v13), v13 >> 40, HIWORD(v13), HIBYTE(v13));
  v15 = v14;
  v17 = v16;
  v18 = v14 >> 8;
  v19 = v14 >> 16;
  v20 = v14 >> 24;
  v21 = HIDWORD(v14);
  v22 = v14 >> 40;
  v51 = HIWORD(v14);
  v52 = HIBYTE(v14);
  v53 = v16 >> 8;
  v54 = v16 >> 16;
  v55 = v16 >> 24;
  v56 = HIDWORD(v16);
  v57 = v16 >> 40;
  v58 = HIWORD(v16);
  v23 = *(void (**)(char *, uint64_t))(v59 + 8);
  v59 = HIBYTE(v16);
  v23(v9, v60);
  *v10 = v15;
  v10[1] = v18;
  v10[2] = v19;
  v10[3] = v20;
  v10[4] = v21;
  v10[5] = v22;
  v10[6] = v51;
  v10[7] = v52;
  v10[8] = v17;
  v10[9] = v53;
  v10[10] = v54;
  v10[11] = v55;
  v10[12] = v56;
  v10[13] = v57;
  v10[14] = v58;
  v10[15] = v59;
  v24 = OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_completions;
  v25 = type metadata accessor for Completions();
  v26 = swift_allocObject(v25, 24, 7);
  *(_QWORD *)(v26 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + v24) = v26;
  v27 = v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_delegate;
  *(_QWORD *)(v27 + 8) = 0;
  swift_unknownObjectWeakInit(v27, 0);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_collection) = 0;
  *(_QWORD *)(v5
            + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardDataSession) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_previews) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy) = 0;
  *(_QWORD *)(v5
            + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject) = 0;
  v28 = v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidSourceID;
  *(_DWORD *)v28 = 0;
  *(_BYTE *)(v28 + 4) = 1;
  v29 = (_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_entryPoint);
  *v29 = 0;
  v29[1] = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) = 0;
  sub_1000078E0(0, &qword_1002ADCB8, NSXPCConnection_ptr);
  v30 = sub_10008D818(0xD00000000000001DLL, 0x8000000100255350, 0);
  result = objc_msgSend((id)objc_opt_self(CAContext), "remoteContextWithOptions:", 0);
  if (result)
  {
    *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_caContext) = result;
    v32 = (_QWORD *)(v5
                   + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_displayController);
    v33 = v49;
    v34 = v48;
    *v32 = v49;
    v32[1] = v34;
    *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection) = v30;
    v35 = v5 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_logger;
    v36 = type metadata accessor for Logger(0);
    v60 = *(_QWORD *)(v36 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v35, v61, v36);
    *(_QWORD *)(v5
              + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardController) = v50;
    sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    swift_unknownObjectRetain(v33);
    v37 = v30;
    swift_retain();
    v39 = (void *)static OS_dispatch_queue.main.getter(v38);
    objc_msgSend(v37, "_setQueue:", v39);

    v40 = (id)_DUINewServerSourceInterface();
    objc_msgSend(v37, "setRemoteObjectInterface:", v40);

    v41 = (id)_DUINewClientSourceInterface();
    objc_msgSend(v37, "setExportedObject:", v41);

    v42 = swift_allocObject(&unk_1002866F0, 24, 7);
    *(_QWORD *)(v42 + 16) = v37;
    v66 = j___s13CompanionLink19RapportStreamServerC6cancelyyF;
    v67 = v42;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_10000E610;
    v65 = &unk_100286708;
    v43 = _Block_copy(&aBlock);
    v44 = v37;
    swift_release();
    objc_msgSend(v44, "setInterruptionHandler:", v43);
    _Block_release(v43);
    v45 = swift_allocObject(&unk_100286740, 24, 7);
    swift_weakInit(v45 + 16, v5);
    v66 = sub_100095378;
    v67 = v45;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_10000E610;
    v65 = &unk_100286758;
    v46 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v44, "setInvalidationHandler:", v46);
    _Block_release(v46);
    objc_msgSend(v44, "setExportedObject:", v5);
    objc_msgSend(v44, "resume");

    swift_unknownObjectRelease(v33);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v36);
    return (id)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10008D818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithMachServiceName:options:", v7, a3);

  return v8;
}

uint64_t sub_10008D890(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10008EC00();
    return swift_release();
  }
  return result;
}

id sub_10008D8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t ObjectType;
  id result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  double v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  CGFloat v41;
  char v42;
  uint64_t v43;
  double v44;
  double v45;
  CGFloat x;
  CGFloat y;
  CGPoint v48;
  double v49;
  double v50;
  uint64_t v51;
  void *v52;
  id v53;
  double *v54;
  void *v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  os_log_type_t v70;
  uint64_t v71;
  CGFloat v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  CGFloat v79;
  _QWORD *v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  CGAffineTransform aBlock;
  _QWORD v94[4];
  char v95;
  CGPoint v96;

  v7 = v6;
  v14 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_displayController
                  + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v6
                                             + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_displayController));
  result = (id)(*(uint64_t (**)(uint64_t, uint64_t, CGFloat, CGFloat))(v14 + 32))(ObjectType, v14, a5, a6);
  if (result)
  {
    v17 = (uint64_t)result;
    if (qword_1002A9840 != -1)
      swift_once(&qword_1002A9840, sub_10004A0E8);
    swift_retain();
    v94[0] = dispatch thunk of UniversalControlDisplay.id.getter(v18);
    v94[1] = v19;
    v94[2] = v20;
    v94[3] = v21;
    v95 = 0;
    v22 = WindowSceneController.context(for:)((uint64_t)v94);
    swift_release();
    if (v22)
    {
      v91 = v22;
      v23 = *(_QWORD *)(v7
                      + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardController);
      v24 = type metadata accessor for PasteboardDataSession(0);
      v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
      swift_retain();
      swift_retain();
      swift_retain();
      v26 = sub_100094BD0(v23, a2, v7, v25);
      _BasePasteboardController.beginDataSession(for:session:)(a2, v26);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v90 = v26;
      v28 = sub_10008AC14(v27, v7);
      swift_bridgeObjectRelease();
      v29 = objc_allocWithZone((Class)PBItemCollection);
      v31 = sub_100093C80(v28, v30);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter();
      v86 = a4;
      v87 = v31;
      v89 = a1;
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v82 = (id)swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock.a = v82;
        *(_DWORD *)v34 = 136446210;
        v35 = v31;
        v36 = a3;
        v37 = objc_msgSend(v35, "description");
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

        a3 = v36;
        v92 = sub_100006FCC(v38, v40, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &aBlock, v34 + 4);

        a1 = v89;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "drag collection: %{public}s", v34, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        a4 = v86;
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      *(_QWORD *)&aBlock.d = &type metadata for EnsembleFeatureFlag;
      *(_QWORD *)&aBlock.tx = sub_100007794();
      v41 = COERCE_DOUBLE(swift_allocObject(&unk_100286600, 64, 7));
      aBlock.a = v41;
      *(_QWORD *)(*(_QWORD *)&v41 + 16) = "Ensemble";
      *(_QWORD *)(*(_QWORD *)&v41 + 24) = 8;
      *(_BYTE *)(*(_QWORD *)&v41 + 32) = 2;
      *(_QWORD *)(*(_QWORD *)&v41 + 40) = "SystemUIScene";
      *(_QWORD *)(*(_QWORD *)&v41 + 48) = 13;
      *(_WORD *)(*(_QWORD *)&v41 + 56) = 2;
      v42 = isFeatureEnabled(_:)(&aBlock);
      v43 = sub_100005988(&aBlock);
      if ((v42 & 1) != 0)
      {
        v44 = dispatch thunk of UniversalControlDisplay.screenRect.getter(v43);
        CGAffineTransformMakeTranslation(&aBlock, -v44, -v45);
        v96.x = a5;
        v96.y = a6;
        v48 = CGPointApplyAffineTransform(v96, &aBlock);
        y = v48.y;
        x = v48.x;
      }
      else
      {
        sub_100062064(1, a5, a6);
      }
      v49 = x;
      v50 = y;
      swift_retain();
      swift_retain();
      swift_retain();
      v51 = sub_1000957F8(a1, v7, v91);
      v52 = *(void **)(v7
                     + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_collection);
      *(_QWORD *)(v7 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_collection) = v87;
      v53 = v87;

      v54 = (double *)(v7
                     + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_entryPoint);
      *v54 = a5;
      v54[1] = a6;
      *(_QWORD *)(v7
                + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardDataSession) = v90;
      swift_retain();
      swift_release();
      *(_QWORD *)(v7 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_previews) = v51;
      result = objc_msgSend(v53, "dataConsumersEndpoint", swift_bridgeObjectRelease().n128_f64[0]);
      if (result)
      {
        v55 = result;
        v56 = sub_1000078E0(0, &qword_1002ADD60, UIDraggingSessionConfiguration_ptr);
        v57 = CGSize.init(_:)(v56);
        v59 = v58;
        v60 = *(void **)(v91 + 40);
        v85 = v53;
        v84 = sub_10008E7D8(v85, v55, v60, v57, v59, 0.0);
        v61 = *(void **)(v7
                       + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection);
        v62 = (_QWORD *)swift_allocObject(&unk_100286628, 40, 7);
        v62[2] = v7;
        v62[3] = a3;
        v88 = a3;
        v62[4] = a4;
        *(_QWORD *)&aBlock.tx = sub_100095248;
        *(_QWORD *)&aBlock.ty = v62;
        *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
        *(_QWORD *)&aBlock.b = 1107296256;
        *(_QWORD *)&aBlock.c = sub_10000A194;
        *(_QWORD *)&aBlock.d = &unk_100286640;
        v63 = _Block_copy(&aBlock);
        swift_retain();
        v64 = v61;
        swift_retain();
        swift_release();
        v65 = objc_msgSend(v64, "remoteObjectProxyWithErrorHandler:", v63);
        _Block_release(v63);

        _bridgeAnyObjectToAny(_:)(&aBlock, v65);
        swift_unknownObjectRelease(v65);
        v66 = sub_1000055B0(&qword_1002ADD68);
        swift_dynamicCast(&v92, &aBlock, (char *)&type metadata for Any + 8, v66, 7);
        v83 = (id)v92;
        v67 = swift_retain_n(v17, 2);
        v68 = Logger.logObject.getter(v67);
        v70 = static os_log_type_t.default.getter(v68, v69);
        if (os_log_type_enabled(v68, v70))
        {
          v71 = swift_slowAlloc(22, -1);
          v72 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
          aBlock.a = v72;
          *(_DWORD *)v71 = 136315394;
          v73 = CGPoint.description.getter(v49, v50);
          v92 = sub_100006FCC(v73, v74, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &aBlock, v71 + 4);
          swift_bridgeObjectRelease();
          *(_WORD *)(v71 + 12) = 2080;
          v92 = v17;
          v75 = type metadata accessor for UniversalControlDisplay(0);
          sub_10000E330(&qword_1002ADD70, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay);
          v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
          v92 = sub_100006FCC(v77, v78, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &aBlock, v71 + 14);
          swift_release_n(v17, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v68, v70, "druid: begin drag: point=%s, display=%s", (uint8_t *)v71, 0x16u);
          swift_arrayDestroy(*(_QWORD *)&v72, 2, (char *)&type metadata for Any + 8);
          v79 = v72;
          a4 = v86;
          swift_slowDealloc(*(_QWORD *)&v79, -1, -1);
          swift_slowDealloc(v71, -1, -1);
        }
        else
        {
          swift_release_n(v17, 2);
        }

        v80 = (_QWORD *)swift_allocObject(&unk_100286678, 48, 7);
        v80[2] = v7;
        v80[3] = v89;
        v80[4] = v88;
        v80[5] = a4;
        *(_QWORD *)&aBlock.tx = sub_100095278;
        *(_QWORD *)&aBlock.ty = v80;
        *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
        *(_QWORD *)&aBlock.b = 1107296256;
        *(_QWORD *)&aBlock.c = sub_10008EA9C;
        *(_QWORD *)&aBlock.d = &unk_100286690;
        v81 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_release();
        objc_msgSend(v83, "beginDragWithClientSession:configuration:reply:", v7, v84, v81);
        swift_release();
        swift_release();

        swift_release();
        _Block_release(v81);

        return (id)swift_unknownObjectRelease(v83);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      return (id)swift_release();
    }
  }
  return result;
}

void sub_10008E1D0(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _QWORD *v36;

  sub_1000954F4();
  v4 = v3;
  v6 = v5;
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items);
  v36 = _swiftEmptyArrayStorage;
  sub_1000103C0();
  specialized ContiguousArray.reserveCapacity(_:)(0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_caContext;
  sub_1000103C0();
  if (v8)
  {
    v10 = 0;
    v11 = (__int128 *)(v7 + 32);
    v33 = v4;
    v32 = v9;
    do
    {
      v12 = *v11;
      v13 = v11[1];
      v35 = *((_QWORD *)v11 + 4);
      v34[0] = v12;
      v34[1] = v13;
      v14 = a1;
      v15 = *(void **)(v4 + v9);
      sub_100048B28((uint64_t)v34);
      v16 = objc_msgSend(v15, "createSlot");
      sub_10008E374();
      v18 = v17;
      v19 = v15;
      a1 = v14;
      objc_msgSend(v19, "setObject:forSlot:", v18, v16);
      v20 = sub_1000955B4();
      v25 = sub_10008E54C(v21, v22, v23, v6, v20, v24);

      v26 = sub_100048B50((uint64_t)v34);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v27 = v36[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v28 = v27;
      v4 = v33;
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
      specialized ContiguousArray._endMutation()(v29);
      v9 = v32;
      v11 = (__int128 *)((char *)v11 + 40);
      ++v10;
    }
    while (v8 != v10);
  }
  swift_bridgeObjectRelease();
  v30 = v36;
  swift_bridgeObjectRelease();
  *a2 = v30;
}

void sub_10008E374()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  double width;
  double height;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[17];
  uint64_t v19;
  uint64_t v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  sub_1000956A0();
  v19 = v2;
  v20 = v5;
  v6 = v0;
  v7 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v9 = v8 + 72;
    sub_10009568C();
    do
    {
      v21.origin.x = sub_1000956D0();
      v22 = CGRectUnion(v21, v23);
      width = v22.size.width;
      height = v22.size.height;
      v9 += 56;
      --v7;
    }
    while (v7);
    sub_100048B50(v6);
  }
  else
  {
    sub_10009568C();
  }
  if (off_1002A9828 != (_UNKNOWN *)-1)
    swift_once(&off_1002A9828, sub_10003D6EC);
  v10 = sub_10000F6E4();
  sub_100006FB4(v10, (uint64_t)qword_1002B6D78);
  sub_1000850FC();
  v11 = sub_10002D844();
  if (sub_1000103A0(v11))
  {
    v12 = (uint8_t *)sub_10000797C(12);
    v13 = sub_10000797C(32);
    v18[0] = v13;
    *(_DWORD *)v12 = 136315138;
    sub_1000956D0();
    v14 = CGRect.description.getter();
    v17 = sub_100006FCC(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v12 + 4);
    swift_bridgeObjectRelease();
    sub_100026484((void *)&_mh_execute_header, 0, v1, "placeholder: frame=%s", v12);
    sub_1000263F4(v13, v16, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v13);
    sub_100007958((uint64_t)v12);
  }

  type metadata accessor for CGImage(0);
  sub_100048B28(v6);
  sub_1000103C0();
  if (sub_100047614(width + width, height + height))
    sub_100095640();
  else
    __break(1u);
}

id sub_10008E54C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  double width;
  double height;
  double y;
  double x;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    v19 = v18 + 72;
    sub_100095718();
    do
    {
      sub_100095680();
      v35 = CGRectUnion(v34, v36);
      x = v35.origin.x;
      y = v35.origin.y;
      width = v35.size.width;
      height = v35.size.height;
      v19 += 56;
      --v17;
    }
    while (v17);
    sub_100048B50(v6);
  }
  else
  {
    sub_100095718();
  }
  if (*(_QWORD *)(*(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items) + 16) == 1)
  {
    v20 = -*(double *)(v6 + 16);
    v21 = -*(double *)(v6 + 24);
  }
  else
  {
    v20 = 0.5;
    v21 = 0.8;
  }
  v22 = v20 * *(double *)v6 - x;
  v23 = v21 * *(double *)(v6 + 8) - y;
  v24 = objc_allocWithZone((Class)_DUIPreview);
  sub_100095680();
  v27 = objc_msgSend(v25, v26, 0);
  objc_msgSend(v27, "setOriginalCenterInCoordinateSpace:", a5, a6);
  objc_msgSend(v27, "setCoordinateSpaceSourceContextID:", objc_msgSend(a3, "_contextId"));
  v28 = objc_msgSend(a3, "layer");
  CALayerGetRenderId();

  sub_100095678(v27, "setCoordinateSpaceSourceLayerRenderID:");
  objc_msgSend(v27, "setAvoidAnimation:", 1);
  objc_msgSend(v27, "setPreviewMode:", 3);
  objc_msgSend(v27, "setLiftAnchorPoint:", v22 / width, 1.0 - v23 / height);
  v29 = objc_msgSend(objc_allocWithZone((Class)_DUIImageComponent), "init");
  sub_100095680();
  objc_msgSend(v30, v31);
  objc_msgSend(v29, "setSlotID:", a2);
  v32 = objc_msgSend(objc_allocWithZone((Class)_DUIPreviewAndImageComponent), "init");
  objc_msgSend(v32, "setPreview:", v27);
  sub_10000F710(v32, "setImageComponent:");
  objc_msgSend(v32, "setIndex:", a1);

  return v32;
}

id sub_10008E7D8(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
  uint64_t v6;
  id v10;

  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "configurationWithItemCollection:dataProviderEndpoint:initialCentroidInSourceWindow:sourceView:", a1, a2, a3, a4, a5, a6);

  return v10;
}

#error "10008E8B0: call analysis failed (funcsize=26)"

unint64_t sub_10008E8D8()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10008E8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  int v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v20;
  uint64_t v21;

  v9 = a1;
  v10 = Logger.logObject.getter(a1);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    v20 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "druid: source session begin, sid=0x%x", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = a3 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidSourceID;
  *(_DWORD *)v14 = v9;
  *(_BYTE *)(v14 + 4) = 0;
  v15 = OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy;
  v16 = *(_QWORD *)(a3
                  + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy) = a2;
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRelease(v16);
  v17 = *(void **)(a3 + v15);
  if (v17)
  {
    objc_msgSend(v17, "takeOutsideAppSourceOperationMask:prefersFullSizePreview:", 1, 0);
    v18 = *(void **)(a3 + v15);
    if (v18)
      objc_msgSend(v18, "dragDidExitSourceApp");
  }
  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) & 2) != 0
    || *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews))
  {
    sub_100013868(2);
    sub_10008EDC4(a4);
  }
  return a5(0, 0);
}

uint64_t sub_10008EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v6(a2, a3);
  swift_release(v5);
  return swift_unknownObjectRelease(a3);
}

#error "10008EBA4: call analysis failed (funcsize=56)"

id sub_10008EBE8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0+ OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "invalidate");
}

uint64_t sub_10008EC00()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v1 = v0;
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "druid: source (Ensemble->iOS drag) connection invalidated", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "setExportedObject:", 0);
  v5 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy) = 0;
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_10008ECC8(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = type metadata accessor for DragMessage(0);
  __chkstk_darwin(v5);
  v7 = (double *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_delegate);
  if (result)
  {
    v9 = result;
    *v7 = a1;
    v7[1] = a2;
    swift_storeEnumTagMultiPayload(v7, v5, 2);
    v10 = type metadata accessor for Completion();
    swift_allocObject(v10, 48, 7);
    v11 = Completion.init(file:line:)();
    sub_1000B13DC(v7, v11);
    swift_unknownObjectRelease(v9);
    swift_release();
    return sub_10003FD88((uint64_t)v7);
  }
  return result;
}

void sub_10008EDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  Class isa;

  v2 = v1;
  v3 = *(void **)(v1
                + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews);
    if (v5)
    {
      v6 = (void *)objc_opt_self(CATransaction);
      swift_unknownObjectRetain(v3);
      objc_msgSend(v6, "begin", swift_bridgeObjectRetain().n128_f64[0]);
      sub_10008F17C(v5, a1, v2);
      objc_msgSend(v6, "commit");
      swift_bridgeObjectRelease();
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.default.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "dirtying items in druid source drag", v11, 2u);
        swift_slowDealloc(v11, -1, -1);
      }

      v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_items);
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)(0);
      v13 = *(_QWORD *)(v12 + 16);
      swift_bridgeObjectRetain();
      if (v13)
      {
        v14 = 0;
        v15 = v12 + 64;
        do
        {
          v15 += 40;
          v16 = objc_msgSend(objc_allocWithZone((Class)_DUIDirtyItem), "init", swift_bridgeObjectRetain().n128_f64[0]);
          objc_msgSend(v16, "setIndex:", v14);
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
          specialized ContiguousArray._endMutation()(v19);
          ++v14;
        }
        while (v13 != v14);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000078E0(0, &qword_1002ADD58, _DUIDirtyItem_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      objc_msgSend(v3, "dirtySourceItems:", isa);
      swift_unknownObjectRelease(v3);

      return;
    }
    v24 = swift_unknownObjectRetain(v3);
    v25 = Logger.logObject.getter(v24);
    v27 = static os_log_type_t.default.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "updateImages() called but do not have previews yet", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    swift_unknownObjectRelease(v3);

  }
  else
  {
    v20 = Logger.logObject.getter(a1);
    v22 = static os_log_type_t.default.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "updateImages() called but do not have a druid session yet", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
  v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags);
  if ((v29 & 2) == 0)
    *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) = v29 | 2;
}

void sub_10008F17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  id v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
  {
    v4 = a1;
    v26 = OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_previews;
    v27 = OBJC_IVAR____TtC13EnsembleAgent11DragSession_items;
    v25 = OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_caContext;
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = 32;
    v24 = v7;
    while (1)
    {
      v8 = *(_QWORD *)(v31 + v27);
      if (v5 >= *(_QWORD *)(v8 + 16))
        break;
      v9 = *(_QWORD *)(v4 + 8 * v5 + 32);
      v10 = (__int128 *)(v8 + v6);
      v11 = *v10;
      v12 = v10[1];
      v30 = *((_QWORD *)v10 + 4);
      v29[0] = v11;
      v29[1] = v12;
      if (*(_QWORD *)(v30 + 16) < 2uLL)
      {
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_15;
        v15 = sub_1001A8EC4(0);
        if ((v16 & 1) == 0)
          goto LABEL_15;
        v14 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_100048B28((uint64_t)v29);
        sub_10008E374();
        v14 = v13;
        sub_100048B50((uint64_t)v29);
        swift_bridgeObjectRelease();
      }
      v17 = *(_QWORD *)(a3 + v26);
      if ((v17 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v17);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v5 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_18;
        v18 = *(id *)(v17 + 8 * v5 + 32);
      }
      ++v5;
      v19 = *(void **)(a3 + v25);
      v20 = objc_msgSend(v18, "imageComponent");
      v21 = objc_msgSend(v20, "slotID");

      objc_msgSend(v19, "deleteSlot:", v21);
      v22 = objc_msgSend(v19, "createSlot");
      objc_msgSend(v19, "setObject:forSlot:", v14, v22);
      v23 = objc_msgSend(v18, "imageComponent");
      objc_msgSend(v23, "setSlotID:", v22);

      v6 += 40;
      v4 = v24;
      if (v28 == v5)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

id sub_10008F3D8(uint64_t a1, CGFloat a2, CGFloat a3)
{
  uint64_t v3;
  CGFloat v6;
  char v7;
  uint64_t v8;
  double v9;
  double v10;
  CGFloat x;
  CGFloat y;
  CGPoint v13;
  double v14;
  double v15;
  id result;
  CGAffineTransform v17;
  CGPoint v18;

  if (a1)
  {
    *(_QWORD *)&v17.d = &type metadata for EnsembleFeatureFlag;
    *(_QWORD *)&v17.tx = sub_100007794();
    v6 = COERCE_DOUBLE(swift_allocObject(&unk_100286600, 64, 7));
    v17.a = v6;
    *(_QWORD *)(*(_QWORD *)&v6 + 16) = "Ensemble";
    *(_QWORD *)(*(_QWORD *)&v6 + 24) = 8;
    *(_BYTE *)(*(_QWORD *)&v6 + 32) = 2;
    *(_QWORD *)(*(_QWORD *)&v6 + 40) = "SystemUIScene";
    *(_QWORD *)(*(_QWORD *)&v6 + 48) = 13;
    *(_WORD *)(*(_QWORD *)&v6 + 56) = 2;
    swift_retain();
    v7 = isFeatureEnabled(_:)(&v17);
    v8 = sub_100005988(&v17);
    if ((v7 & 1) != 0)
    {
      v9 = dispatch thunk of UniversalControlDisplay.screenRect.getter(v8);
      CGAffineTransformMakeTranslation(&v17, -v9, -v10);
      v18.x = a2;
      v18.y = a3;
      v13 = CGPointApplyAffineTransform(v18, &v17);
      y = v13.y;
      x = v13.x;
    }
    else
    {
      sub_100062064(1, a2, a3);
    }
    v15 = x;
    v14 = y;
    swift_release();
  }
  else
  {
    v14 = 0.0;
    v15 = 0.0;
  }
  result = *(id *)(v3
                 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject);
  if (result)
    return objc_msgSend(result, "overrideDragWindowToPoint:", v15, v14);
  return result;
}

uint64_t sub_10008F51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  sub_10000AEBC(v0 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_delegate);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_collection));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_displayController));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject));
  return v0;
}

uint64_t sub_10008F610()
{
  uint64_t v0;

  v0 = sub_10008F51C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10008F630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_completions);
  sub_1000088D0();
  sub_1000C4E20(a1);
  return sub_1000955AC(v3);
}

void sub_10008F664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (*(_QWORD *)(a1 + 88))
  {
    v1 = sub_10002D790();
    sub_10008EDC4(v1);
    swift_release();
  }
  else
  {
    oslog = sub_100095600(a1);
    v3 = static os_log_type_t.default.getter(oslog, v2);
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v4 = 0;
      sub_10005FF70((void *)&_mh_execute_header, oslog, v3, "updatePreviews called without a DragSession", v4);
      sub_100007958((uint64_t)v4);
    }

  }
}

void sub_10008F70C(uint64_t a1)
{
  sub_10008F724(a1, "druid: accepting drag");
}

void sub_10008F718(uint64_t a1)
{
  sub_10008F724(a1, "druid: cancelling drag");
}

void sub_10008F724(uint64_t a1, const char *a2)
{
  NSObject *v2;
  os_log_type_t v3;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;

  sub_100095600(a1);
  v5 = sub_10002D844();
  if (sub_1000103A0(v5))
  {
    v6 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v6 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v2, v3, a2, v6);
    sub_100007958((uint64_t)v6);
  }

  v7 = *(Class *)((char *)&v2->isa
                + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidServerProxy);
  if (v7)
    objc_msgSend(v7, "cancelDrag");
  v8 = *(uint64_t *)((char *)&v2->isa
                  + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags);
  if ((v8 & 4) == 0)
    *(Class *)((char *)&v2->isa
             + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) = (Class)(v8 | 4);
  objc_msgSend(*(id *)((char *)&v2->isa+ OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "invalidate");
  sub_1000088D0();
  sub_1000C4E9C(0);
  sub_10000B348();
  sub_100026768();
  sub_10002644C();
}

uint64_t sub_10008F808()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10008F820, 0, 0);
}

uint64_t sub_10008F820(uint64_t a1)
{
  os_log_type_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v3 = (*(_QWORD *)(v2 + 16)
                  + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_logger);
  Logger.logObject.getter(a1);
  v4 = sub_10002D844();
  if (sub_1000955F0(v4))
  {
    v5 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v5 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v3, v1, "druid: destination cancelled source drag", v5);
    sub_100007958((uint64_t)v5);
  }
  v6 = *(_QWORD *)(v2 + 16);

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8))(*(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_flags) & 1, 0);
}

uint64_t sub_10008F8D8(uint64_t a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1000078E0(0, &qword_1002ADD18, _DUIVisibleDroppedItem_ptr);
  v3[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v5);
  v6 = dword_1002ADD4C;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_10008F978;
  return sub_10008F808();
}

uint64_t sub_10008F978(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(void (***)(_QWORD, _QWORD, _QWORD, _QWORD))(*v2 + 24);
  v8 = *v2;
  v5 = HIDWORD(a1);
  v6 = a1 & 1;
  swift_task_dealloc(*(_QWORD *)(*v2 + 40));
  sub_10000E410();
  sub_100026AEC();
  v4[2](v4, v6, v5, a2);
  _Block_release(v4);
  return sub_10009559C(*(uint64_t (**)(void))(v8 + 8));
}

id sub_10008FA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v14 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "druid: drag ended op=0x%lx", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  if (a1)
  {
    if (*(_QWORD *)(v1
                   + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardDataSession))
    {
      v9 = type metadata accessor for Completion();
      swift_allocObject(v9, 48, 7);
      swift_retain();
      swift_retain();
      Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100254F20, 540, (uint64_t)sub_100095184, v1);
      PasteboardDataSession.activate(completion:)();
      swift_release();
      return (id)swift_release();
    }
    v11 = Logger.logObject.getter(v8);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "dragEnded with a drop operation but no data session", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

  }
  sub_10008EAF4(0);
  return objc_msgSend(*(id *)(v2+ OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "invalidate");
}

#error "10008FCD0: call analysis failed (funcsize=42)"

unint64_t sub_10008FD14()
{
  return 0xD000000000000030;
}

id sub_10008FD60()
{
  uint64_t v0;

  sub_10008EAF4(0);
  return objc_msgSend(*(id *)(v0+ OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "invalidate");
}

void sub_10008FD98(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  v2 = Logger.logObject.getter(a1);
  v4 = static os_log_type_t.default.getter(v2, v3);
  if (os_log_type_enabled(v2, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v4, "druid: drag transfer session finish", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  if (*(_QWORD *)(v1
                 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_pasteboardDataSession))
  {
    swift_retain();
    PasteboardDataSession.deactivate()();
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidConnection), "invalidate");
    swift_release();
  }
  else
  {
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "dataTransferSessionFinished but no data session", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

void sub_10008FF10(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  void *v4;
  id v5;
  Class isa;
  id v7;

  v4 = (void *)objc_opt_self(UIScene);
  v5 = objc_msgSend(v4, "_synchronizedDrawingFence", swift_bridgeObjectRetain().n128_f64[0]);
  sub_1000078E0(0, &qword_1002ADD10, _DUIPreviewAndImageComponent_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class, id, _QWORD))a3)[2](a3, isa, v5, 0);
  swift_bridgeObjectRelease();

  v7 = objc_msgSend(v4, "_synchronizedDrawingFence");
  objc_msgSend(v4, "_synchronizeDrawingWithFence:", v7);

  _Block_release(a3);
}

void sub_1000900EC()
{
  off_1002AD440 = &off_100281070;
}

_QWORD *sub_100090100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *v36;
  uint64_t v37;

  v7 = v6;
  v6[4] = 0;
  v6[7] = 0;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCollection) = 0;
  v14 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_originatingLocalDisplay) = 0;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession) = 0;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardContents) = 0;
  sub_1000078E0(0, &qword_1002ADCB8, NSXPCConnection_ptr);
  v15 = sub_10008D818(0xD000000000000022, 0x8000000100255050, 0);
  v16 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  objc_msgSend(v15, "_setQueue:", v17);

  v18 = (id)_DUINewServerDestinationInterface();
  objc_msgSend(v15, "setRemoteObjectInterface:", v18);

  v19 = (id)_DUINewClientDestinationInterface();
  objc_msgSend(v15, "setExportedInterface:", v19);

  v7[2] = a2;
  v7[3] = a3;
  v7[5] = v15;
  v7[6] = a6;
  v20 = (char *)v7 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_logger;
  v21 = type metadata accessor for Logger(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a1, v21);
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardController) = a4;
  sub_10008B730(a5, (uint64_t)v7 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_secureLayerHost);
  swift_unknownObjectRetain(a2);
  v23 = v15;
  swift_retain();
  objc_msgSend(v23, "setExportedObject:", v7, swift_retain().n128_f64[0]);
  v24 = swift_allocObject(&unk_1002862E0, 24, 7);
  *(_QWORD *)(v24 + 16) = v23;
  v36 = RapportStreamServer.cancel();
  v37 = v24;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_10000E610;
  v35 = &unk_1002862F8;
  v25 = _Block_copy(&aBlock);
  v26 = v23;
  swift_release();
  objc_msgSend(v26, "setInterruptionHandler:", v25);
  _Block_release(v25);
  v27 = swift_allocObject(&unk_100286330, 24, 7);
  swift_weakInit(v27 + 16, v7);
  v36 = sub_10009444C;
  v37 = v27;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_10000E610;
  v35 = &unk_100286348;
  v28 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v26, "setInvalidationHandler:", v28);
  _Block_release(v28);
  objc_msgSend(v26, "resume");

  swift_unknownObjectRelease(a2);
  swift_release();
  swift_release();
  sub_100025A28(a5, &qword_1002AAF30);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v21);
  return v7;
}

uint64_t sub_10009045C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1 + 16;
  swift_beginAccess(v6, v16, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, Strong + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_logger, v2);
    v9 = swift_release(v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "druid: sink connection invalidated", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_beginAccess(v6, v15, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v14 = *(_QWORD *)(result + 56);
    *(_QWORD *)(result + 56) = 0;
    swift_release(result);
    return swift_unknownObjectRelease(v14);
  }
  return result;
}

void sub_1000905CC(void (*a1)(void ***), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void **v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void **aBlock;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, void *, uint64_t, uint64_t);
  void *v34;
  void (*v35)(uint64_t, void *, uint64_t, uint64_t);
  _QWORD *v36;
  uint64_t v37[9];

  v5 = v2;
  if ((*(_BYTE *)(v2[6]
                 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidSourceID
                 + 4) & 1) != 0)
  {
    sub_10002D82C((uint64_t)a1, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_1000955C0();
    sub_100095468();
    v14 = (void **)NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v8, v9, v10, v11, v12, v13, 657);
    __chkstk_darwin(v14);
    sub_10009550C();
    sub_1000E22C8((int)sub_100026210, v15, v16, v17, v18, v19, v20, v21, v30, aBlock, v32, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36, v37[0], v37[1], v37[2], v37[3],
      v37[4],
      v37[5],
      v37[6],
      v37[7],
      v37[8]);
    aBlock = v14;
    LOBYTE(v36) = 1;
    v22 = v14;
    a1(&aBlock);

    sub_100025A28((uint64_t)&aBlock, &qword_1002ADCB0);
  }
  else
  {
    sub_1000954F4();
    v24 = *v23;
    v25 = *v5;
    _bridgeAnyObjectToAny(_:)(&aBlock, objc_msgSend((id)v5[5], "remoteObjectProxy"));
    sub_10002DA70();
    v26 = sub_1000055B0(&qword_1002ADD28);
    swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v26, 7);
    v27 = (void *)v37[0];
    v28 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100286588, 64);
    v28[2] = v5;
    v28[3] = a1;
    v28[4] = a2;
    v28[5] = v4;
    v28[6] = v3;
    v28[7] = v25;
    v35 = sub_1000948CC;
    v36 = v28;
    aBlock = _NSConcreteStackBlock;
    v32 = 1107296256;
    v33 = sub_1000910AC;
    v34 = &unk_1002865A0;
    v29 = _Block_copy(&aBlock);
    sub_10002679C();
    sub_10002D790();
    sub_10000B364();
    objc_msgSend(v27, "sawFirstDragEventWithSessionID:systemPolicy:destination:reply:", v24, 0, v5, v29);
    _Block_release(v29);
    sub_10002DA70();
  }
}

void sub_1000907DC(uint64_t a1, void *a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), _QWORD *a9)
{
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  id v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  id v60;
  id v61;
  int v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  id v68;
  id v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  NSObject *v88;
  _QWORD *v89;
  NSObject *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t *);
  uint64_t v103;
  uint64_t v104[4];
  char v105;

  v102 = a8;
  v12 = a7;
  if (!a1)
  {
    v43 = (void *)0xE500000000000000;
    v44 = 0x65736C6166;
LABEL_60:
    v103 = 0;
    v104[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(95);
    v45._countAndFlagsBits = 0xD00000000000004CLL;
    v45._object = (void *)0x80000001002551A0;
    String.append(_:)(v45);
    v46._countAndFlagsBits = v44;
    v46._object = v43;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x63656C6C6F63202CLL;
    v47._object = (void *)0xEE00203A6E6F6974;
    String.append(_:)(v47);
    if (a2)
      v48 = 1702195828;
    else
      v48 = 0x65736C6166;
    if (a2)
      v49 = 0xE400000000000000;
    else
      v49 = 0xE500000000000000;
    v50 = v49;
    String.append(_:)(*(Swift::String *)&v48);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 41;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    swift_bridgeObjectRetain();
    v52 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6709, v103, v104[0], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragPlatformProvider_iOS.swift", 103, 2, 669);
    swift_bridgeObjectRelease();
    __chkstk_darwin(v53);
    sub_1000E3CA4((int)sub_100026210, (int)&v80, v54, v55, v56, v57, v58, v59, v80, v81, (uint64_t)v52, v83, v84, v85, v86, v87, (uint64_t)v88, (uint64_t)v89, (uint64_t)v90,
      v91,
      (uint64_t)v92,
      v93,
      v94,
      v95);
    v103 = (uint64_t)v52;
    v105 = 1;
    v60 = v52;
    v102(&v103);

    goto LABEL_67;
  }
  if (!a2)
  {
    v43 = (void *)0xE400000000000000;
    v44 = 1702195828;
    goto LABEL_60;
  }
  v16 = a1;
  v17 = *(_QWORD *)(a7 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardController);
  swift_retain();
  swift_unknownObjectRetain(v16);
  v18 = a2;
  v93 = v17;
  v19 = sub_100094D18(v17, v12, (void *)v18);
  swift_release();
  if (!v19)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v69 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6709, 0xD000000000000045, 0x80000001002551F0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragPlatformProvider_iOS.swift", 103, 2, 679);
    __chkstk_darwin(v69);
    sub_1000E3B18((int)sub_100026210, (int)&v80, v71, v72, v73, v74, v75, v76, v80, v81, v70, v83, v84, v85, v86, v87, (uint64_t)v88, (uint64_t)v89, (uint64_t)v90,
      v91,
      (uint64_t)v92,
      v93,
      v94,
      v95);
    v103 = (uint64_t)v69;
    v105 = 1;
    v77 = v69;
    v102(&v103);

    swift_unknownObjectRelease(v16);
LABEL_67:
    sub_100025A28((uint64_t)&v103, &qword_1002ADCB0);
    return;
  }
  v96 = *(_QWORD *)(v19 + 32);
  v20 = v96;
  if (v96 >> 62)
  {
LABEL_76:
    if (v20 < 0)
      v21 = v20;
    else
      v21 = (v20 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
  else
  {
    v21 = *(NSObject **)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v22 = (uint64_t)v21;
  }
  v98 = v16;
  v23 = v96;
  if (v22)
  {
    v24 = 0;
    v25 = v96 & 0xC000000000000001;
    v86 = v96 & 0xFFFFFFFFFFFFFF8;
    v85 = v96 + 32;
    v26 = &unk_1002A9000;
    v99 = v12;
    v88 = v22;
    v87 = v96 & 0xC000000000000001;
    v89 = a9;
    v91 = v19;
    v92 = (id)v18;
    do
    {
      if (v25)
      {
        v27 = v24;
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v23);
        v97 = v20;
      }
      else
      {
        if (v24 >= *(_QWORD *)(v86 + 16))
        {
          __break(1u);
LABEL_81:
          if (v10 < 0)
            v79 = v10;
          else
            v79 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v42 = _CocoaArrayWrapper.endIndex.getter(v79);
          swift_bridgeObjectRelease();
          goto LABEL_57;
        }
        v97 = *(_QWORD *)(v85 + 8 * v24);
        v27 = v24;
        swift_retain();
      }
      v28 = __OFADD__(v27, 1);
      v21 = (v27 + 1);
      if (v28)
        goto LABEL_75;
      v90 = v21;
      v10 = *(_QWORD *)(v97 + 24);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v21 = *(NSObject **)(v97 + 24);
        else
          v21 = (v10 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain_n(*(_QWORD *)(v97 + 24), 2);
        v18 = _CocoaArrayWrapper.endIndex.getter(v21);
        swift_bridgeObjectRelease();
        if (v18)
        {
LABEL_15:
          v9 = 0;
          v100 = v10 & 0xC000000000000001;
          v94 = v10 + 32;
          v95 = v10 & 0xFFFFFFFFFFFFFF8;
          while (1)
          {
            if (v100)
            {
              v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v10);
              v19 = v20;
            }
            else
            {
              if ((unint64_t)v9 >= *(_QWORD *)(v95 + 16))
                goto LABEL_74;
              v19 = *(_QWORD *)(v94 + 8 * (_QWORD)v9);
              swift_retain();
            }
            v28 = __OFADD__(v9++, 1);
            if (v28)
              break;
            if (v26[272] != -1)
              swift_once(&qword_1002A9880, sub_1000900EC);
            a9 = off_1002AD440;
            v17 = *((_QWORD *)off_1002AD440 + 2);
            if (v17)
            {
              v29 = v19;
              v19 = (uint64_t)v26;
              v101 = v29;
              v16 = *(_QWORD *)(v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
              v30 = *(_QWORD *)(v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
              v31 = *((_QWORD *)off_1002AD440 + 4);
              v32 = *((_QWORD *)off_1002AD440 + 5);
              v33 = v31 == v16 && v32 == v30;
              if (v33
                || (v12 = v18,
                    (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, *(_QWORD *)(v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier), *(_QWORD *)(v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8), 0) & 1) != 0))
              {
LABEL_68:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
                v61 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6757, 0xD000000000000020, 0x8000000100255240, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragPlatformProvider_iOS.swift", 103, 2, 688);
                v62 = v99 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_logger;
                __chkstk_darwin(v61);
                v82 = v63;
                swift_retain();
                sub_1000E3908((int)sub_100026210, (int)&v80, v62, v101, v64, v65, v66, v67, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87, (uint64_t)v88, (uint64_t)v89, (uint64_t)v90,
                  v91,
                  (uint64_t)v92,
                  v93,
                  v94,
                  v95,
                  v96,
                  v97);
                v103 = (uint64_t)v61;
                v105 = 1;
                v68 = v61;
                v102(&v103);
                swift_release();
                swift_unknownObjectRelease(v98);

                swift_release();
                swift_release();

                goto LABEL_67;
              }
              if (v17 != 1)
              {
                v34 = a9[6];
                v35 = a9[7];
                if (v34 == v16 && v35 == v30)
                  goto LABEL_68;
                v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v16, v30, 0);
                if ((v20 & 1) != 0)
                  goto LABEL_68;
                if (v17 != 2)
                {
                  a9 += 9;
                  v18 = 2;
                  while (1)
                  {
                    v21 = (v18 + 1);
                    if (__OFADD__(v18, 1))
                      break;
                    v37 = *(a9 - 1);
                    v38 = *a9;
                    if (v37 == v16 && v38 == v30)
                      goto LABEL_68;
                    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v16, v30, 0);
                    if ((v20 & 1) != 0)
                      goto LABEL_68;
                    a9 += 2;
                    ++v18;
                    if (v21 == v17)
                      goto LABEL_44;
                  }
                  __break(1u);
                  break;
                }
              }
LABEL_44:
              v20 = swift_release();
              v16 = v98;
              v26 = (_QWORD *)v19;
              v18 = v12;
            }
            else
            {
              v20 = swift_release();
            }
            v12 = v99;
            if (v9 == (uint8_t *)v18)
            {
              swift_release();
              a9 = v89;
              goto LABEL_53;
            }
          }
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
      }
      else
      {
        v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v18)
          goto LABEL_15;
      }
      swift_release();
LABEL_53:
      swift_bridgeObjectRelease();
      v24 = (unint64_t)v90;
      v19 = v91;
      v18 = (uint64_t)v92;
      v23 = v96;
      v25 = v87;
    }
    while (v90 != v88);
  }
  swift_bridgeObjectRelease();
  swift_retain();
  v21 = Logger.logObject.getter(v40);
  LOBYTE(v17) = static os_log_type_t.default.getter(v21, v41);
  if (os_log_type_enabled(v21, (os_log_type_t)v17))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    v10 = *(_QWORD *)(v19 + 32);
    if ((unint64_t)v10 >> 62)
      goto LABEL_81;
    v42 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_57:
    v103 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v9 + 4);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v17, "druid: pasteboard acquired, count=%ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);

    v16 = v98;
  }
  else
  {
    swift_release();

  }
  _BasePasteboardController.populate(local:)();
  v78 = *(_QWORD *)(v12 + 56);
  *(_QWORD *)(v12 + 56) = v16;
  swift_unknownObjectRetain(v16);
  swift_unknownObjectRelease(v78);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardContents) = v19;
  swift_retain();
  swift_release();
  sub_100091130(v102, a9, a3, a4);
  swift_unknownObjectRelease(v16);

  swift_release();
}

uint64_t sub_1000910AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, void *, uint64_t, uint64_t);
  id v11;

  v10 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  swift_retain(v9);
  swift_unknownObjectRetain(a2);
  v11 = a3;
  v10(a2, a3, a4, a5);
  swift_release(v9);

  return swift_unknownObjectRelease(a2);
}

#error "1000912B4: call analysis failed (funcsize=175)"

void sub_10009142C(uint64_t a1, uint64_t a2, void (*a3)(void ***, __n128), uint8_t *a4, uint8_t *a5, void *a6, double a7, double a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  char *v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  char *v92;
  id v93;
  void (*v94)(void ***, __n128);
  void **aBlock;
  _QWORD v96[2];
  void *v97;
  void (*v98)();
  uint64_t v99;

  v93 = a6;
  v94 = a3;
  v91 = a5;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v89 = *(_QWORD *)(v13 - 8);
  v90 = v13;
  __chkstk_darwin(v13);
  v88 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v86 = *(_QWORD *)(v15 - 8);
  v87 = v15;
  __chkstk_darwin(v15);
  v85 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for DispatchTimeInterval(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v18 = (uint8_t **)((char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for DispatchTime(0);
  v80 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v83 = (char *)&v79 - v22;
  v23 = type metadata accessor for UUID(0);
  __chkstk_darwin(v23);
  v92 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_bridgeObjectRetain_n(a1, 2);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v26, v27);
  v29 = (unint64_t)a1 >> 62;
  if (!os_log_type_enabled(v26, v28))
  {

    swift_bridgeObjectRelease_n(a1, 2);
    goto LABEL_6;
  }
  v79 = a4;
  a4 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)a4 = 134217984;
  if (v29)
    goto LABEL_24;
  v30 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    aBlock = (void **)v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v96, a4 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "druid: received drag image previews, count=%ld", a4, 0xCu);
    swift_slowDealloc(a4, -1, -1);

    a4 = v79;
LABEL_6:
    if (v29)
      break;
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_20;
LABEL_8:
    __chkstk_darwin(v31);
    v32 = v91;
    *(&v79 - 4) = (uint8_t *)a2;
    *(&v79 - 3) = v32;
    v77 = a7;
    v78 = a8;
    swift_bridgeObjectRetain();
    v34 = sub_10008B110(v33, (void (*)(_OWORD *__return_ptr, unint64_t, id))sub_10009486C);
    swift_bridgeObjectRelease();
    v35 = v93;
    v36 = v93;
    sub_10008AE14(a1, v35);
    v20 = v37;
    v38 = (double *)(*(_QWORD *)(a2 + 48)
                   + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_id);
    v39 = *((unsigned __int8 *)v38 + 5);
    v40 = *((unsigned __int8 *)v38 + 4);
    v41 = *((unsigned __int8 *)v38 + 3);
    v42 = *((unsigned __int8 *)v38 + 2);
    v43 = *((unsigned __int8 *)v38 + 1);
    v44 = *(unsigned __int8 *)v38;
    v77 = v38[1];
    v18 = v92;
    UUID.init(uuid:)(v44, v43, v42, v41, v40, v39);
    if (v29)
    {
      if (a1 < 0)
        v46 = a1;
      else
        v46 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v45 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v47 = __OFSUB__(v45, 1);
    v48 = v45 - 1;
    if (!v47)
    {
      v49 = type metadata accessor for DragSession(0);
      swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
      v50 = sub_10018B374((uint64_t)v18, (uint64_t)v34, v48);
      *(_QWORD *)(v50 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews) = v20;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession) = v50;
      swift_retain();
      swift_release();
      v97 = (void *)type metadata accessor for DragSink_iOS(0);
      v98 = (void (*)())&off_100286220;
      aBlock = (void **)a2;
      LOBYTE(v99) = 0;
      v51 = swift_retain();
      v94(&aBlock, v51);
      swift_release();
      sub_100025A28((uint64_t)&aBlock, &qword_1002ADCB0);
      return;
    }
    __break(1u);
LABEL_24:
    if (a1 < 0)
      v76 = a1;
    else
      v76 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter(v76);
    swift_bridgeObjectRelease();
  }
  if (a1 < 0)
    v52 = a1;
  else
    v52 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v53 = _CocoaArrayWrapper.endIndex.getter(v52);
  swift_bridgeObjectRelease();
  if (v53)
    goto LABEL_8;
LABEL_20:
  v54 = a4;
  v55 = Logger.logObject.getter(v31);
  v57 = static os_log_type_t.default.getter(v55, v56);
  if (os_log_type_enabled(v55, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "druid: previews not available yet, stalling", v58, 2u);
    swift_slowDealloc(v58, -1, -1);
  }

  v59 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v60 = (void *)static OS_dispatch_queue.main.getter(v59);
  static DispatchTime.now()(v60);
  *v18 = 250;
  v61 = v81;
  v62 = v82;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v81 + 104))(v18, enum case for DispatchTimeInterval.milliseconds(_:), v82);
  v63 = v83;
  + infix(_:_:)(v20, v18);
  (*(void (**)(_QWORD *, uint64_t))(v61 + 8))(v18, v62);
  v64 = *(void (**)(char *, uint64_t))(v80 + 8);
  v65 = v84;
  v64(v20, v84);
  v66 = swift_allocObject(&unk_100286538, 56, 7);
  *(_QWORD *)(v66 + 16) = a2;
  *(double *)(v66 + 24) = a7;
  *(double *)(v66 + 32) = a8;
  *(_QWORD *)(v66 + 40) = v94;
  *(_QWORD *)(v66 + 48) = v54;
  v98 = sub_10009489C;
  v99 = v66;
  aBlock = _NSConcreteStackBlock;
  v96[0] = 1107296256;
  v96[1] = sub_10000E610;
  v97 = &unk_100286550;
  v67 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v68 = swift_release();
  v69 = v85;
  static DispatchQoS.unspecified.getter(v68);
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v71 = v70;
  v72 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v73 = sub_10003228C();
  v74 = v88;
  v75 = v90;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v72, v73, v90, v71);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v63, v69, v74, v67);
  _Block_release(v67);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v87);
  v64(v63, v65);
}

double sub_100091B64@<D0>(CGFloat a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  uint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGPoint v22;
  double x;
  double y;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  double result;
  double v47;
  double v49;
  CGAffineTransform v50;
  CGPoint v51;

  v10 = Logger.logObject.getter(*(_QWORD *)&a1);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    v50.a = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v50.b, v12 + 4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "drag component: i=%ld", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  if (a3)
  {
    objc_msgSend(a2, "center", swift_retain().n128_f64[0]);
    sub_100062064(0, v13, v14);
    v16 = v15;
    v18 = v17;
    v20 = dispatch thunk of UniversalControlDisplay.screenRect.getter(v19);
    CGAffineTransformMakeTranslation(&v50, v20, v21);
    v51.x = v16;
    v51.y = v18;
    v22 = CGPointApplyAffineTransform(v51, &v50);
    x = v22.x;
    y = v22.y;
    swift_release();
  }
  else
  {
    y = 0.0;
    x = 0.0;
  }
  v25 = objc_msgSend(a2, "preview", *(_QWORD *)&a6, *(_QWORD *)&a5);
  objc_msgSend(v25, "scaledSize");
  v27 = v26;
  v29 = v28;

  v30 = objc_msgSend(a2, "preview");
  objc_msgSend(v30, "scaledSize");
  v32 = v31;
  v34 = v33;

  v35 = sub_1000055B0(&qword_1002ADD20);
  v36 = swift_allocObject(v35, 88, 7);
  *(_OWORD *)(v36 + 16) = xmmword_10021BBA0;
  v37 = objc_msgSend(a2, "preview");
  objc_msgSend(v37, "scaledSize");
  v39 = v38;
  v41 = v40;

  v42 = objc_msgSend(a2, "preview");
  v43 = objc_msgSend(v42, "outline");

  if (v43)
  {
    v44 = objc_msgSend(v43, "CGPath");

  }
  else
  {
    v44 = 0;
  }
  *(_QWORD *)(v36 + 32) = 0x6F63692D64617069;
  *(_QWORD *)(v36 + 40) = 0xE90000000000006ELL;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 56) = 0;
  *(_QWORD *)(v36 + 64) = v39;
  *(_QWORD *)(v36 + 72) = v41;
  *(_QWORD *)(v36 + 80) = v44;
  *(_QWORD *)a4 = v32;
  *(_QWORD *)(a4 + 8) = v34;
  result = 0.0 - (v49 - (x - v27 * 0.5)) / v27;
  *(double *)(a4 + 16) = result;
  *(double *)(a4 + 24) = 0.0 - (v29 - (v47 - (y - v29 * 0.5))) / v29;
  *(_QWORD *)(a4 + 32) = v36;
  return result;
}

void sub_100091E68(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  id v14;
  id v15;
  id v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  id v27;
  const CGPath *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "preview");
  objc_msgSend(v6, "contentSize");
  v8 = v7;
  v10 = v9;

  v11 = CGSize.scale(limit:)(200.0, v8, v10);
  v13 = v12;
  v14 = objc_msgSend(v5, "imageComponent");
  v15 = objc_msgSend(v14, "slotID");

  v16 = objc_msgSend(v5, "preview");
  objc_msgSend(v16, "contentSize");
  v18 = v17;
  v20 = v19;

  v21 = objc_msgSend(v5, "preview");
  objc_msgSend(v21, "contentOffset");
  v23 = v22;
  v25 = v24;

  v26 = objc_msgSend(v5, "preview");
  v27 = objc_msgSend(v26, "outline");

  if (v27)
  {
    v28 = (const CGPath *)objc_msgSend(v27, "CGPath");

  }
  else
  {
    v28 = 0;
  }
  sub_1000078E0(0, &qword_1002A8E48, CALayer_ptr);
  v29 = static CALayer.snapshot(forSlot:outputSize:bounds:offset:mask:windowScene:)((uint64_t)v15, v28, a2, v11, v13, v18, v20, v23, v25);

  type metadata accessor for CGImage(0);
  v31 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for Int, v30, &protocol witness table for Int);
  v32 = v31;
  if (v29)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
    sub_1000F3428((uint64_t)v29, 0, isUniquelyReferenced_nonNull_native, v34, v35, v36, v37, v38, v39, v32);
    v32 = v40;
    swift_bridgeObjectRelease();
  }
  *a3 = v32;
}

double sub_1000920B8(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, __n128);
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  double result;

  v3 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v4 = sub_1000078E0(0, &qword_1002ADD18, _DUIVisibleDroppedItem_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  v6 = swift_retain();
  v3(v5, v6);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100092124()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  double v13;
  void (*v14)(double);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[17];
  uint64_t v32;
  uint64_t v33;

  sub_100095478();
  v32 = v2;
  v33 = v3;
  sub_1000954F4();
  v4 = sub_10000F6E4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_logger;
  sub_1000956FC(v7);
  v10 = sub_10002D844();
  if (sub_10002D948(v10))
  {
    v11 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v11 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v0, v1, "druid: creating drop click shield window", v11);
    sub_100007958((uint64_t)v11);
  }

  sub_10008B730((uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_secureLayerHost, (uint64_t)&v29);
  if (v30)
  {
    sub_100025A50(&v29, (uint64_t)v31);
    v12 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
    objc_msgSend(v12, "setHitTestsAsOpaque:", 1);
    sub_10000922C(0xD000000000000026, 0x80000001002550D0, v12);
    sub_10000DBE4(v31, v31[3]);
    v13 = sub_1000955B4();
    v14(v13);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v4);
    sub_10009513C((uint64_t)v31, (uint64_t)&v29);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = (v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_1002864C0, v18 + 8, v15 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + v16, v8, v4);
    sub_100025A50(&v29, v19 + v17);
    *(_QWORD *)(v19 + v18) = v12;
    v20 = type metadata accessor for AnyCancellable(0);
    sub_10004113C(v20);
    v21 = AnyCancellable.init(_:)(sub_1000947DC, v19);
    sub_100005988(v31);
  }
  else
  {
    sub_100025A28((uint64_t)&v29, &qword_1002AAF30);
    v23 = sub_1000956FC(v22);
    v25 = static os_log_type_t.default.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v26 = 0;
      sub_10005FF70((void *)&_mh_execute_header, v23, v25, "druid: no layer host, skipping shield window", v26);
      sub_100007958((uint64_t)v26);
    }

    v27 = type metadata accessor for AnyCancellable(0);
    sub_10004113C(v27);
    return AnyCancellable.init(_:)(CGSize.init(_:), 0);
  }
  return v21;
}

uint64_t sub_1000923D8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = Logger.logObject.getter(a1);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "druid: dismissing drop click shield window", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = a2[3];
  v10 = a2[4];
  sub_10000DBE4(a2, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a3, v9, v10);
}

uint64_t sub_1000924A0()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  CGFloat v4;

  sub_1000954F4();
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_originatingLocalDisplay);
  sub_10002679C();
  v2 = sub_1000955B4();
  sub_10008F3D8(v3, v2, v4);
  return sub_100095494(v1);
}

void sub_1000924E4(uint64_t a1)
{
  NSObject *v1;
  os_log_type_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  Class isa;
  Class v6;

  sub_100095600(a1);
  v3 = sub_10002D844();
  if (sub_1000403A4(v3))
  {
    v4 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v4 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v1, v2, "druid: cancelling drag", v4);
    sub_100007958((uint64_t)v4);
  }

  isa = v1[7].isa;
  if (isa)
  {
    sub_100095608(isa, "requestDropWithOperation:contextID:layerRenderID:");
    v6 = v1[7].isa;
    if (v6)
      -[objc_class sawDragEndEvent](v6, "sawDragEndEvent");
  }
  sub_100026768();
  sub_10002644C();
}

void sub_100092588()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000956EC();
  sub_100026A7C();

  sub_1000956E4();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  v1 = sub_10000F6E4();
  sub_10002666C(v1);

  sub_10000B02C(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion), *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion + 8));
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardController);
  sub_100025A28(v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_secureLayerHost, &qword_1002AAF30);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_originatingLocalDisplay);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardContents);
  sub_1000050D4();
}

uint64_t sub_10009263C()
{
  return sub_1000936C8(sub_100092588);
}

uint64_t sub_100092648()
{
  _QWORD *v0;

  return swift_retain(*(_QWORD *)(*v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession));
}

uint64_t sub_10009265C()
{
  _QWORD *v0;

  return swift_retain(*(_QWORD *)(*v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardContents));
}

uint64_t sub_100092670()
{
  return sub_1000924A0();
}

void sub_100092690()
{
  sub_10002849C();
}

void sub_1000926A4(uint64_t a1)
{
  sub_1000924E4(a1);
}

void sub_1000926C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t *v18;
  void (*v19)(char *, _QWORD *);
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v8 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_100286470, 24, 7);
  *(_QWORD *)(v11 + 16) = a5;
  v12 = _Block_copy(a5);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "druid: data endpoint provider received for drop", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = *(id *)(a4 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCollection);
  if (v17)
    v17 = objc_msgSend(v17, "setDataProviderEndpoint:", a2);
  v18 = (uint64_t *)(a4 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  v19 = *(void (**)(char *, _QWORD *))(a4 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  if (v19)
  {
    v20 = v18[1];
    if (*(_QWORD *)(a4 + 32))
    {
      sub_10000AE54(*(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion), v18[1]);
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    *(_QWORD *)(a4 + 32) = 0;
    swift_release();
    v25 = *v18;
    v26 = v18[1];
    *v18 = 0;
    v18[1] = 0;
    sub_10000B02C(v25, v26);
    v27 = type metadata accessor for PasteboardAcquisitionError(0);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 1, 1, v27);
    v28 = swift_allocObject(&unk_100286498, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_10009471C;
    *(_QWORD *)(v28 + 24) = v11;
    v29 = type metadata accessor for Completion();
    swift_allocObject(v29, 48, 7);
    swift_retain();
    v30 = Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100254F20, 888, (uint64_t)sub_100094730, v28);
    v19(v10, v30);
    sub_10000B02C((uint64_t)v19, v20);
    swift_release();
    sub_100025A28((uint64_t)v10, (uint64_t *)&unk_1002ADCA0);
    swift_release();
    _Block_release(a5);
  }
  else
  {
    v21 = Logger.logObject.getter(v17);
    v23 = static os_log_type_t.default.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "druid: drop completing with no outstanding pasteboard collection completion", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    a5[2](a5, 0, 0);
    swift_release();
    _Block_release(a5);
  }
}

void sub_100092AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(uint64_t, _QWORD *);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10002641C();
  v10 = v9 - v8;
  v11 = sub_1000404AC(v0);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)sub_10000797C(12);
    v36 = sub_10000797C(32);
    v39 = v36;
    *(_DWORD *)v15 = 136315138;
    v37 = v5;
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession))
    {
      sub_10005FF54();
      sub_10018B3F8();
      sub_100065C50();
      v24 = sub_100095670(v16, v17, v18, v19, v20, v21, v22, v23);
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
      v28 = sub_1000599D0(8, v25, v27);
      static String._fromSubstring(_:)(v28);
      swift_release();
      sub_10000E4A0();
    }
    v38 = sub_1000955E0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4);
    sub_10000F650(v1);
    sub_10000E420();
    sub_100026484((void *)&_mh_execute_header, v12, v14, "druid: drag sink ended, id=%s", v15);
    sub_1000263F4(v36, v29, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v36);
    sub_100007958((uint64_t)v15);

    v5 = v37;
  }
  else
  {
    sub_10000F650(v0);

  }
  v30 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  v31 = *(void (**)(uint64_t, _QWORD *))(v1
                                                 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  if (v31)
  {
    *v30 = 0;
    v30[1] = 0;
    sub_100026AE4();
    sub_1000956C4();
    v32 = type metadata accessor for PasteboardAcquisitionError(0);
    swift_storeEnumTagMultiPayload(v5, v32, 5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v5, 0, 1, v32);
    v33 = type metadata accessor for Completion();
    sub_1000088D8(v33, 48);
    v34 = Completion.init(file:line:)();
    v31(v5, v34);
    sub_1000956C4();
    sub_10000B364();
    sub_100025A28(v5, (uint64_t *)&unk_1002ADCA0);
  }
  if (*(_QWORD *)(v1 + 32))
  {
    sub_1000088D0();
    AnyCancellable.cancel()();
    sub_10000B348();
  }
  *(_QWORD *)(v1 + 32) = 0;
  swift_release();
  v35 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  swift_unknownObjectRelease(v35);
  objc_msgSend(*(id *)(v1 + 40), "invalidate");
  sub_10000E4E0();
}

uint64_t sub_100092DF4(uint64_t a1, uint64_t a2, void (*a3)(__n128))
{
  __n128 v5;

  v5 = swift_retain();
  a3(v5);
  return sub_1000955AC(a1);
}

uint64_t sub_100092E1C()
{
  return swift_task_switch(sub_100092E30, 0, 0);
}

uint64_t sub_100092E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100095704((uint64_t)"Fatal error", 11, 2, 0, 0xE000000000000000, (uint64_t)"EnsembleAgent/DragPlatformProvider_iOS.swift", a7, a8, 916, 0);
}

uint64_t sub_100092E98(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v10;
  _QWORD *v11;
  id v12;

  v10 = _Block_copy(aBlock);
  v11 = (_QWORD *)sub_1000088D8(a5, 40);
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = a1;
  v12 = a3;
  sub_1000269EC();
  return sub_10008CEBC(a6, (uint64_t)v11);
}

uint64_t sub_100092F04(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v6 = type metadata accessor for IndexSet(0, a2);
  v3[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[4] = v7;
  v3[5] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[6] = _Block_copy(a2);
  static IndexSet._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = dword_1002ADD0C;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[7] = v9;
  *v9 = v3;
  v9[1] = sub_100092FB0;
  return sub_100092E1C();
}

uint64_t sub_100092FB0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (**v3)(void);
  void (**v6)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;

  v6 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)*v3 + 6);
  v8 = *((_QWORD *)*v3 + 4);
  v7 = *((_QWORD *)*v3 + 5);
  v9 = *((_QWORD *)*v3 + 3);
  sub_100095458(*((_QWORD *)*v3 + 7));
  sub_1000955CC();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_10002D82C(v10, &qword_1002ADD10, _DUIPreviewAndImageComponent_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class, void *, uint64_t))v6)[2](v6, isa, a2, a3);

  _Block_release(v6);
  sub_10000E410();

  swift_task_dealloc(v7);
  return sub_10009559C(v3[1]);
}

void sub_100093084(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t (**v36)(uint64_t, uint64_t);
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10000E478();
  v8 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_10000E5DC();
  v73 = v10;
  sub_1000404AC((uint64_t)a2);
  v11 = sub_10005FF54();
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v71 = a3;
    v15 = (uint8_t *)sub_10000797C(12);
    v16 = sub_10000797C(32);
    v76 = v16;
    *(_DWORD *)v15 = 136315138;
    if (*(_QWORD *)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession))
    {
      sub_100026AE4();
      sub_10018B3F8();
      sub_100065C50();
      v25 = sub_100095670(v17, v18, v19, v20, v21, v22, v23, v24);
      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
      v29 = sub_1000599D0(8, v26, v28);
      static String._fromSubstring(_:)(v29);
      sub_100026AEC();
      swift_bridgeObjectRelease();
    }
    v30 = sub_1000955E0();
    sub_1000954DC(v30, v31, v32, (uint64_t)(v15 + 12));
    sub_10000F650((uint64_t)a2);
    sub_10000E420();
    sub_100026484((void *)&_mh_execute_header, v12, v14, "druid: activating pasteboard, id=%s", v15);
    sub_1000263F4(v16, v33, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v16);
    sub_100007958((uint64_t)v15);

    a3 = v71;
  }
  else
  {
    sub_10000F650((uint64_t)a2);

  }
  v34 = *(void **)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCollection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCollection) = a1;
  v35 = a1;

  v36 = (uint64_t (**)(uint64_t, uint64_t))((char *)a2
                                                  + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion);
  if (*(_QWORD *)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_pasteboardCompletion))
  {
    sub_10000F650(a3);
    sub_100095704((uint64_t)"Fatal error", 11, 2, 0xD000000000000026, 0x8000000100254FC0, (uint64_t)"EnsembleAgent/DragPlatformProvider_iOS.swift", v69, v70, 931, 0);
    __break(1u);
  }
  else
  {
    v37 = (void *)a2[7];
    if (v37)
    {
      v38 = (uint64_t)v36[1];
      *v36 = sub_100094414;
      v36[1] = (uint64_t (*)(uint64_t, uint64_t))a3;
      sub_10005FF54();
      swift_unknownObjectRetain(v37);
      sub_10000B02C(0, v38);
      v39 = a2[6];
      a2[4] = sub_100092124();
      swift_release();
      v40 = sub_1000404AC((uint64_t)a2);
      v41 = Logger.logObject.getter(v40);
      v43 = static os_log_type_t.default.getter(v41, v42);
      if (os_log_type_enabled(v41, v43))
      {
        v44 = (uint8_t *)sub_10000797C(12);
        v72 = sub_10000797C(32);
        v76 = v72;
        *(_DWORD *)v44 = 136315138;
        if (*(_QWORD *)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent12DragSink_iOS_dragSession))
        {
          sub_100026AE4();
          sub_10018B3F8();
          sub_100065C50();
          v53 = sub_100095670(v45, v46, v47, v48, v49, v50, v51, v52);
          v54 = UUID.uuidString.getter(v53);
          v56 = v55;
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
          v57 = sub_1000599D0(8, v54, v56);
          v58 = static String._fromSubstring(_:)(v57);
          v60 = v59;
          sub_100026AEC();
          swift_bridgeObjectRelease();
        }
        else
        {
          v60 = 0xE100000000000000;
          v58 = 45;
        }
        v64 = sub_100006FCC(v58, v60, &v76);
        sub_1000954DC(v64, v65, v66, (uint64_t)(v44 + 12));
        sub_10000F650((uint64_t)a2);
        sub_10000E420();
        sub_100026484((void *)&_mh_execute_header, v41, v43, "druid: performing local drop, id=%s", v44);
        sub_1000263F4(v72, v67, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v72);
        sub_100007958((uint64_t)v44);

      }
      else
      {
        sub_10000F650((uint64_t)a2);

      }
      sub_100095608(v37, "requestDropWithOperation:contextID:layerRenderID:");
      objc_msgSend(v37, "sawDragEndEvent");
      v68 = *(void **)(v39
                     + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_druidEnsembleProxyObject);
      if (v68)
        objc_msgSend(v68, "performOffscreenDrop");
      sub_10000F650(a3);
      swift_unknownObjectRelease(v37);
    }
    else
    {
      v61 = type metadata accessor for PasteboardAcquisitionError(0);
      swift_storeEnumTagMultiPayload(v3, v61, 5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v3, 0, 1, v61);
      v62 = type metadata accessor for Completion();
      sub_1000088D8(v62, 48);
      v63 = Completion.init(file:line:)();
      sub_1000163B8(v3, v63, a3);
      sub_10002645C();
      sub_100025A28(v3, (uint64_t *)&unk_1002ADCA0);
      sub_10000F650(a3);
    }
    sub_10000E4E0();
  }
}

uint64_t sub_1000935BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_dragSession;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_dragSession) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_pasteboardContents) = 0;
  v10 = v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_logger;
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a1, v11);
  v12 = *(_QWORD *)(v4 + v9);
  *(_QWORD *)(v4 + v9) = a2;
  swift_release(v12);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_source) = a4;
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_pasteboardContents);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_pasteboardContents) = a3;
  swift_release(v13);
  return v4;
}

void sub_10009366C()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10002666C(v0);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_source);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_dragSession);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_pasteboardContents);
  sub_1000050D4();
}

uint64_t sub_1000936BC()
{
  return sub_1000936C8(sub_10009366C);
}

uint64_t sub_1000936C8(void (*a1)(void))
{
  uint64_t v1;

  a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_1000936EC()
{
  double v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  CGFloat v5;

  sub_1000954F4();
  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  v0 = sub_1000955B4();
  v2 = Agent.localDisplay(for:)(v0, v1);
  v3 = sub_1000955B4();
  sub_10008F3D8(v4, v3, v5);
  return sub_100095494(v2);
}

void sub_100093768(uint64_t a1, const char *a2)
{
  NSObject *v2;
  os_log_type_t v3;
  os_log_type_t v5;
  uint8_t *v6;

  sub_100095600(a1);
  v5 = sub_10002D844();
  if (sub_1000403A4(v5))
  {
    v6 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v6 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v2, v3, a2, v6);
    sub_100007958((uint64_t)v6);
  }

  sub_100026768();
  sub_10002644C();
}

uint64_t sub_1000937E0()
{
  _QWORD *v0;

  return swift_retain(*(_QWORD *)(*v0 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_dragSession));
}

uint64_t sub_1000937F4()
{
  _QWORD *v0;

  return swift_retain(*(_QWORD *)(*v0 + OBJC_IVAR____TtC13EnsembleAgent21DragSinkForwarded_iOS_pasteboardContents));
}

uint64_t sub_100093808()
{
  return sub_1000936EC();
}

void sub_100093828(uint64_t a1)
{
  sub_100093768(a1, "forwarded sink: accepted");
}

void sub_100093850(uint64_t a1)
{
  sub_100093768(a1, "forwarded sink: cancelled");
}

void sub_100093878(uint64_t a1)
{
  sub_100093768(a1, "forwarded sink: returned");
}

void sub_1000938A0()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CGContext *v7;
  CGContext *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGColor *GenericGray;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  const CGPath *v38;
  CGContextRef v39;
  uint64_t v40;
  CGContext *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  CGRect v53;

  sub_1000956A0();
  v51 = v1;
  v52 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for CGPathFillRule(0);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10000E5DC();
  v44 = v11;
  GenericGray = CGColorCreateGenericGray(1.0, 0.668);
  CGContextSetFillColorWithColor(v8, GenericGray);

  v48 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16);
  if (v48)
  {
    v40 = v6;
    v43 = enum case for CGPathFillRule.winding(_:);
    swift_bridgeObjectRetain();
    v13 = 0;
    v15 = (void **)(v14 + 80);
    v41 = v8;
    v42 = v4;
    while (1)
    {
      v16 = (uint64_t)*(v15 - 5);
      v17 = *v15;
      v18 = off_1002A9828;
      swift_bridgeObjectRetain();
      v19 = v17;
      if (v18 != (void *)-1)
        swift_once(&off_1002A9828, sub_10003D6EC);
      v20 = sub_10000F6E4();
      v21 = sub_100006FB4(v20, (uint64_t)qword_1002B6D78);
      swift_bridgeObjectRetain_n(v16, 2);
      v22 = v19;
      v23 = v21;
      Logger.logObject.getter(v22);
      v24 = sub_10002D844();
      if (sub_1000103A0(v24))
      {
        v25 = sub_10000797C(32);
        v47 = sub_10000797C(64);
        v49 = v13;
        v50[0] = v47;
        *(_DWORD *)v25 = 134218498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v25 + 4);
        *(_WORD *)(v25 + 12) = 2080;
        sub_100095680();
        v26 = CGRect.description.getter();
        v49 = sub_100095664(v26, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v25 + 14);

        swift_bridgeObjectRelease_n(v16, 2);
        sub_10000E4A0();
        *(_WORD *)(v25 + 22) = 2080;
        sub_100095540();
        v28 = CGRect.description.getter();
        v49 = sub_100095664(v28, v29);
        v8 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v25 + 24);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v0, "dragImage: index=%ld old=%s rect=%s", (uint8_t *)v25, 0x20u);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        v4 = v42;
        sub_100007958(v47);
        sub_100007958(v25);

        if (!v42)
          goto LABEL_12;
      }
      else
      {

        swift_bridgeObjectRelease_n(v16, 2);
        if (!v4)
          goto LABEL_12;
      }
      if (*(_QWORD *)(v4 + 16))
      {
        v30 = sub_1001A8EC4(v13);
        if ((v31 & 1) != 0)
        {
          v32 = *(id *)(*(_QWORD *)(v4 + 56) + 8 * v30);
          v33 = sub_100095540();
          CGContextRef.draw(_:in:byTiling:)(v34, 0, v33, v35, v36, v37);

LABEL_15:
          sub_10000E4A0();
          goto LABEL_16;
        }
      }
LABEL_12:
      if (!v17)
      {
        v53.origin.x = sub_100095540();
        CGContextFillRect(v39, v53);
        goto LABEL_15;
      }
      v38 = (const CGPath *)v22;
      CGContextAddPath(v8, v38);
      v0 = v46;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v44, v43, v46);
      CGContextRef.fillPath(using:)(v44);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
LABEL_16:
      ++v13;
      v15 += 7;
      if (v48 == v13)
      {
        sub_100048B50(v40);
        break;
      }
    }
  }
  sub_100095640();
}

id sub_100093C80(uint64_t a1, double a2)
{
  void *v2;
  NSArray v3;
  id v4;

  if (a1)
  {
    sub_1000078E0(0, &qword_1002ADD30, PBItem_ptr);
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&a2 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(v2, "initWithItems:", v3.super.isa, a2);

  return v4;
}

uint64_t sub_100093D00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100095390;
  return v6();
}

uint64_t sub_100093D54(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100095390;
  return v7();
}

uint64_t sub_100093DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v6) == 1)
  {
    sub_100025A28(a1, &qword_1002ADCD0);
    v7 = 7168;
  }
  else
  {
    v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = v8 | 0x1C00;
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_100286448, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1002ADD00, v15);
}

uint64_t sub_100093EEC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100093F50;
  return v6(a1);
}

uint64_t sub_100093F50()
{
  uint64_t v0;

  sub_10009541C();
  return sub_100095500(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for DragSource_iOS(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AD638, (uint64_t)&nominal type descriptor for DragSource_iOS);
}

uint64_t sub_100093F8C()
{
  return type metadata accessor for DragSource_iOS(0);
}

uint64_t sub_100093F94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[16];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10021FE18;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_10021FE30;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_10021FE48;
    v4[6] = &unk_10021FE60;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_10021FE48;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = &unk_10021FE48;
    v4[12] = &unk_10021FE48;
    v4[13] = &unk_10021FE78;
    v4[14] = &unk_10021FE90;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256, 16, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100094078()
{
  return type metadata accessor for DragSink_iOS(0);
}

uint64_t type metadata accessor for DragSink_iOS(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AD930, (uint64_t)&nominal type descriptor for DragSink_iOS);
}

uint64_t sub_100094094(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_10021FE60;
  v4[1] = &unk_10021FE48;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_10021FE48;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_10021FE48;
    v4[7] = &unk_10021FEE8;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_10021FF00;
    v4[10] = &unk_10021FE48;
    v4[11] = &unk_10021FE48;
    v4[12] = &unk_10021FE48;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100094154()
{
  return type metadata accessor for DragSinkForwarded_iOS(0);
}

uint64_t type metadata accessor for DragSinkForwarded_iOS(uint64_t a1)
{
  return sub_100021590(a1, qword_1002ADB90, (uint64_t)&nominal type descriptor for DragSinkForwarded_iOS);
}

uint64_t sub_100094170(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_10021FE48;
    v4[3] = &unk_10021FE48;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DragSource_iOS.Flags()
{
  return &type metadata for DragSource_iOS.Flags;
}

ValueMetadata *type metadata accessor for DragPlatformProvider_iOS.Flags()
{
  return &type metadata for DragPlatformProvider_iOS.Flags;
}

unint64_t sub_100094218()
{
  unint64_t result;

  result = qword_1002ADC60;
  if (!qword_1002ADC60)
  {
    result = swift_getWitnessTable(&unk_10021FF6C, &type metadata for DragPlatformProvider_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC60);
  }
  return result;
}

unint64_t sub_100094258()
{
  unint64_t result;

  result = qword_1002ADC68;
  if (!qword_1002ADC68)
  {
    result = swift_getWitnessTable(&unk_10021FF3C, &type metadata for DragPlatformProvider_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC68);
  }
  return result;
}

unint64_t sub_100094298()
{
  unint64_t result;

  result = qword_1002ADC70;
  if (!qword_1002ADC70)
  {
    result = swift_getWitnessTable(&unk_10021FF94, &type metadata for DragPlatformProvider_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC70);
  }
  return result;
}

unint64_t sub_1000942D8()
{
  unint64_t result;

  result = qword_1002ADC78;
  if (!qword_1002ADC78)
  {
    result = swift_getWitnessTable(&unk_10021FFCC, &type metadata for DragPlatformProvider_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC78);
  }
  return result;
}

unint64_t sub_100094318()
{
  unint64_t result;

  result = qword_1002ADC80;
  if (!qword_1002ADC80)
  {
    result = swift_getWitnessTable(&unk_1002200FC, &type metadata for DragSource_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC80);
  }
  return result;
}

unint64_t sub_100094358()
{
  unint64_t result;

  result = qword_1002ADC88;
  if (!qword_1002ADC88)
  {
    result = swift_getWitnessTable(&unk_1002200CC, &type metadata for DragSource_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC88);
  }
  return result;
}

unint64_t sub_100094398()
{
  unint64_t result;

  result = qword_1002ADC90;
  if (!qword_1002ADC90)
  {
    result = swift_getWitnessTable(&unk_100220124, &type metadata for DragSource_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC90);
  }
  return result;
}

unint64_t sub_1000943D8()
{
  unint64_t result;

  result = qword_1002ADC98;
  if (!qword_1002ADC98)
  {
    result = swift_getWitnessTable(&unk_10022015C, &type metadata for DragSource_iOS.Flags);
    atomic_store(result, (unint64_t *)&qword_1002ADC98);
  }
  return result;
}

uint64_t sub_100094414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000163B8(a1, a2, v2);
}

uint64_t sub_10009441C()
{
  return sub_10009445C(48);
}

uint64_t sub_100094424(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C70A4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100094430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009444C()
{
  uint64_t v0;

  return sub_10009045C(v0);
}

uint64_t sub_100094454()
{
  return sub_10009445C(32);
}

uint64_t sub_10009445C(uint64_t a1)
{
  uint64_t v1;

  sub_100026600();
  sub_1000265F8();
  return sub_1000955A4(v1, a1, 7);
}

uint64_t sub_100094488(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1000B06EC(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100094494()
{
  uint64_t v0;

  sub_1000265F8();
  sub_100026A7C();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000944B8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10008BE88(a1, a2 & 1, *(uint64_t (**)(uint64_t, _UNKNOWN **, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000944CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_10009572C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100095554(v1, (uint64_t)sub_100094510);
  return sub_1000954A4(v2, v3, v4, v5);
}

uint64_t sub_100094510()
{
  uint64_t v0;

  sub_10009541C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100094540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = (_QWORD *)swift_task_alloc(dword_1002ADCDC);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100095628(v5, (uint64_t)sub_100095390);
  return v7(v6, v2, v4, v3);
}

uint64_t sub_1000945AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000956EC();
  swift_release();
  v0 = sub_100095618();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000945CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002ADCEC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100095390;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002ADCE8 + dword_1002ADCE8))(a1, v4, v5, v6);
}

uint64_t sub_100094650()
{
  uint64_t v0;

  sub_1000265F8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)sub_10009572C();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000946DC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002ADCF8 + dword_1002ADCF8))(a1, v4);
}

uint64_t sub_1000946DC()
{
  uint64_t v0;

  sub_10009541C();
  return sub_100095500(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100094700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009471C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_100094730()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
  sub_1000050D4();
}

uint64_t sub_100094754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_10000F6E4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100005988((_QWORD *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1000947DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10000F6E4() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000923D8(v0 + v2, (_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 47) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100094824()
{
  uint64_t v0;

  sub_100026600();
  sub_1000956E4();
  swift_release();

  return swift_deallocObject(v0, 72, 7);
}

void sub_100094858(uint64_t a1)
{
  uint64_t v1;

  sub_10009142C(a1, *(_QWORD *)(v1 + 16), *(void (**)(void ***, __n128))(v1 + 40), *(uint8_t **)(v1 + 48), *(uint8_t **)(v1 + 56), *(void **)(v1 + 64), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

double sub_10009486C@<D0>(CGFloat a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100091B64(a1, a2, *(_QWORD *)(v3 + 24), a3, *(double *)(v3 + 32), *(double *)(v3 + 40));
}

uint64_t sub_100094878()
{
  uint64_t v0;

  sub_100026600();
  sub_1000956E4();
  return swift_deallocObject(v0, 56, 7);
}

void sub_10009489C()
{
  uint64_t v0;

  sub_100091130(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(double *)(v0 + 24), *(double *)(v0 + 32));
  sub_1000050D4();
}

uint64_t sub_1000948C4()
{
  return sub_10009521C(64);
}

void sub_1000948CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1000907DC(a1, a2, *(double *)(v4 + 40), *(double *)(v4 + 48), a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(uint64_t *))(v4 + 24), *(_QWORD **)(v4 + 32));
}

uint64_t sub_1000948E0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "items");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1000078E0(0, &qword_1002ADD30, PBItem_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_10009494C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;

  v8 = a3;
  v9 = a2;
  v10 = a2 >> 8;
  v11 = a2 >> 16;
  v12 = a2 >> 24;
  v13 = HIDWORD(a2);
  v14 = a2 >> 40;
  v15 = HIWORD(a2);
  v21 = HIBYTE(a2);
  v22 = a3 >> 8;
  v23 = a3 >> 16;
  v24 = a3 >> 24;
  v25 = HIDWORD(a3);
  v26 = a3 >> 40;
  v27 = HIWORD(a3);
  v28 = HIBYTE(a3);
  v32 = type metadata accessor for DragSink_iOS(0);
  v33 = &off_100286210;
  *(_QWORD *)&v31 = a5;
  v16 = type metadata accessor for Completions();
  v17 = swift_allocObject(v16, 24, 7);
  *(_QWORD *)(v17 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a6 + 16) = v17;
  *(_BYTE *)(a6 + 24) = v9;
  *(_BYTE *)(a6 + 25) = v10;
  *(_BYTE *)(a6 + 26) = v11;
  *(_BYTE *)(a6 + 27) = v12;
  *(_BYTE *)(a6 + 28) = v13;
  *(_BYTE *)(a6 + 29) = v14;
  *(_BYTE *)(a6 + 30) = v15;
  *(_BYTE *)(a6 + 31) = v21;
  *(_BYTE *)(a6 + 32) = v8;
  *(_BYTE *)(a6 + 33) = v22;
  *(_BYTE *)(a6 + 34) = v23;
  *(_BYTE *)(a6 + 35) = v24;
  *(_BYTE *)(a6 + 36) = v25;
  *(_BYTE *)(a6 + 37) = v26;
  *(_BYTE *)(a6 + 38) = v27;
  v18 = a6 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_logger;
  *(_BYTE *)(a6 + 39) = v28;
  v19 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a1, v19);
  sub_100025A50(&v31, a6 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_state);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_collection) = a4;
  return a6;
}

uint64_t sub_100094AD8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[3];
  uint64_t v21;
  _UNKNOWN **v22;

  v21 = type metadata accessor for DragSink_iOS(0);
  v22 = &off_100286210;
  v20[0] = a5;
  v10 = type metadata accessor for PasteboardCollection(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = sub_10003FEF8((uint64_t)v20, v21);
  v13 = __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v16 + 16))(v15, v13);
  v17 = sub_10009494C(a1, a2, a3, a4, *v15, v11);
  sub_100005988(v20);
  return v17;
}

uint64_t sub_100094BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = type metadata accessor for PasteboardDataSession.ID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_completions;
  v12 = type metadata accessor for Completions();
  v13 = swift_allocObject(v12, 24, 7);
  *(_QWORD *)(v13 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + v11) = v13;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_state) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers) = _swiftEmptyArrayStorage;
  v14 = a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_delegate;
  *(_QWORD *)(v14 + 8) = 0;
  v15 = swift_unknownObjectWeakInit(v14, 0);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_controller) = a1;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents) = a2;
  *(_QWORD *)(v15 + 8) = &off_100286258;
  swift_unknownObjectWeakAssign(v15, a3);
  swift_retain();
  swift_retain();
  UUID.init()(v16);
  swift_release();
  swift_release();
  swift_release();
  sub_100095284((uint64_t)v10, a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id);
  return a4;
}

uint64_t sub_100094D18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50[5];
  _QWORD v51[5];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - v15;
  v51[3] = type metadata accessor for DragSink_iOS(0);
  v51[4] = &off_100286210;
  v51[0] = a2;
  swift_retain();
  v17 = sub_1000948E0(a3);
  if (v17)
  {
    v45 = a3;
    v46 = v17;
    v47 = a1;
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v18 = sub_100006FB4(v10, (uint64_t)qword_1002B7198);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v20 = v19(v16, v18, v10);
    v21 = UUID.init()(v20);
    v23 = UUID.uuid.getter(v21, v22);
    v24 = UniversalControlUUID.init(rawValue:)(v23, v23 >> 8, v23 >> 16, v23 >> 24, HIDWORD(v23), v23 >> 40, HIWORD(v23), HIBYTE(v23));
    v44 = v11;
    v25 = v24;
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10009513C((uint64_t)v51, (uint64_t)v50);
    v28 = sub_10003FEF8((uint64_t)v50, v50[3]);
    v29 = __chkstk_darwin(v28);
    v31 = (uint64_t *)((char *)&v43 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *, __n128))(v32 + 16))(v31, v29);
    sub_100094AD8((uint64_t)v16, v25, v27, (uint64_t)v45, *v31);
    sub_100005988(v50);
    v33 = v19(v13, v18, v10);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v50[0] = v38;
      *(_DWORD *)v37 = 136446210;
      v48 = sub_100006FCC(1195463236, 0xE400000000000000, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v37 + 4);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Gathering %{public}s Pasteboard Contents", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }

    v39 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v13, v10);
    __chkstk_darwin(v39);
    v40 = sub_10008AFBC(v46, (uint64_t (*)(unint64_t, id))sub_10009517C);
    swift_bridgeObjectRelease();
    type metadata accessor for PasteboardContents();
    v41 = PasteboardContents.__allocating_init(_:items:)((uint64_t)v40);
    swift_release();
  }
  else
  {
    v41 = 0;
  }
  sub_100005988(v51);
  return v41;
}

void sub_10009513C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_1000050D4();
}

void sub_10009517C()
{
  sub_10001CC00();
}

uint64_t sub_100095184(uint64_t a1)
{
  uint64_t v1;

  return sub_10008FC64(a1, v1);
}

uint64_t sub_100095190()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  sub_100026A7C();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000951C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_10009572C();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100095554(v1, (uint64_t)sub_100095390);
  return sub_1000954A4(v2, v3, v4, v5);
}

uint64_t sub_100095204()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100095214()
{
  return sub_10009521C(40);
}

uint64_t sub_10009521C(uint64_t a1)
{
  uint64_t v1;

  sub_100026600();
  sub_100026A7C();
  return sub_1000955A4(v1, a1, 7);
}

uint64_t sub_100095248(uint64_t a1)
{
  return sub_10008E868(a1);
}

uint64_t sub_100095254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100026600();
  sub_1000265F8();
  swift_release();
  v0 = sub_100095618();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100095278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10008E8F4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t (**)(_QWORD, _QWORD))(v2 + 32));
}

uint64_t sub_100095284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PasteboardDataSession.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000952C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000956EC();
  _Block_release(*(const void **)(v0 + 32));

  v1 = sub_100095618();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000952F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(unsigned int *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = (_QWORD *)swift_task_alloc(dword_1002ADD7C);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100095628(v5, (uint64_t)sub_100095390);
  return v7(v6, v2, v4, v3);
}

uint64_t sub_10009535C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100095378()
{
  uint64_t v0;

  return sub_10008D890(v0);
}

uint64_t sub_10009541C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100095458(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_100095494(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000954A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000954B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_1000954C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return sub_1000C70A4(v4 - 128, v1, v0, v3, v2);
}

uint64_t sub_1000954DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v4, a4);
}

uint64_t sub_100095500(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100095534(uint64_t a1)
{
  return swift_release(a1);
}

double sub_100095540()
{
  double v0;

  return v0;
}

uint64_t sub_100095554@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100095574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, a1, v2);
}

uint64_t sub_100095588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, a1, v2);
}

uint64_t sub_10009559C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000955A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000955AC(uint64_t a1)
{
  return swift_release(a1);
}

double sub_1000955B4()
{
  double v0;

  return v0;
}

uint64_t sub_1000955CC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000955D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_weakInit(v1 + a1, 0);
}

uint64_t sub_1000955E0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v1, v0, (uint64_t *)(v2 - 88));
}

BOOL sub_1000955F0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100095600(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

id sub_100095608(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1, 0, 0);
}

uint64_t sub_100095618()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100095628@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100095664(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 160));
}

uint64_t sub_100095670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return UUID.init(uuid:)(a1, v8, a3, a4, a5, a6, a7, a8);
}

id sub_100095678(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000956C4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000B02C(v0, v1);
}

double sub_1000956D0()
{
  double v0;

  return v0;
}

uint64_t sub_1000956E4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1000956EC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000956F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_weakDestroy(v1 + a1);
}

uint64_t sub_1000956FC(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_100095704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, a6, 44, 2, a9, a10);
}

uint64_t sub_100095710@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_weakLoadStrong(v1 + a1);
}

uint64_t sub_10009572C()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_100095734(int a1, void *a2)
{
  void *v4;

  v4 = (void *)objc_opt_self(CATransaction);
  if (((objc_msgSend(v4, "disableActions") ^ a1) & 1) != 0)
  {
    objc_msgSend(v4, "setDisableActions:", a1 & 1);
    sub_1000958D0();
    sub_1000958E8();
  }
  else
  {
    sub_1000958D0();
  }

}

uint64_t sub_1000957F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  objc_msgSend((id)objc_opt_self(CATransaction), "begin");
  sub_10008E1D0(a3, &v7);
  sub_1000958F8(0x1002A6000);
  swift_release();
  if (!v3)
    a1 = v7;
  swift_release();
  swift_release();
  return a1;
}

void sub_1000958D0()
{
  void *v0;
  char v1;

  sub_100189E90(v0, v1);
}

id sub_1000958E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 2568), v1);
}

id sub_1000958F8@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  return objc_msgSend(v1, *(SEL *)(a1 + 2552));
}

_QWORD *sub_100095904(_QWORD *__dst, char *__src, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v24)(char *, char *, uint64_t, __n128);
  char *v25;
  char *v26;

  v4 = __dst;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    memcpy(__dst, __src, 0x71uLL);
    v7 = *(int *)(a3 + 20);
    v8 = (char *)v4 + v7;
    v9 = &__src[v7];
    v10 = type metadata accessor for UniversalControlConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = (int *)type metadata accessor for SyncViewLocalData(0);
    v12 = v11[6];
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    *(_QWORD *)&v8[v11[7]] = *(_QWORD *)&v9[v11[7]];
    v16 = v11[8];
    v25 = &v9[v16];
    v26 = &v8[v16];
    v17 = type metadata accessor for UniversalControlDisplayLayout(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = swift_retain();
    v24(v26, v25, v17, v18);
    v19 = v11[9];
    v20 = &v8[v19];
    v21 = &v9[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
    *(_QWORD *)&v8[v11[10]] = *(_QWORD *)&v9[v11[10]];
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(_QWORD *)&__src[*(int *)(a3 + 24)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t type metadata accessor for SyncViewLocalData(uint64_t a1)
{
  return sub_100021590(a1, qword_1002ADEE0, (uint64_t)&nominal type descriptor for SyncViewLocalData);
}

double sub_100095A94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = type metadata accessor for SyncViewLocalData(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = v2 + *(int *)(v4 + 32);
  v6 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

char *sub_100095B5C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;

  memcpy(a1, a2, 0x71uLL);
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = (int *)type metadata accessor for SyncViewLocalData(0);
  v11 = v10[6];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  *(_QWORD *)&v7[v10[7]] = *(_QWORD *)&v8[v10[7]];
  v15 = v10[8];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = type metadata accessor for UniversalControlDisplayLayout(0);
  v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = swift_retain();
  v19(v16, v17, v18, v20);
  v21 = v10[9];
  v22 = &v7[v21];
  v23 = &v8[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
  *(_QWORD *)&v7[v10[10]] = *(_QWORD *)&v8[v10[10]];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100095CAC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v6;
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
  *(_BYTE *)(a1 + 19) = *((_BYTE *)a2 + 19);
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  *(_BYTE *)(a1 + 21) = *((_BYTE *)a2 + 21);
  *(_BYTE *)(a1 + 22) = *((_BYTE *)a2 + 22);
  *(_BYTE *)(a1 + 23) = *((_BYTE *)a2 + 23);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_BYTE *)(a1 + 27) = *((_BYTE *)a2 + 27);
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  *(_BYTE *)(a1 + 29) = *((_BYTE *)a2 + 29);
  *(_BYTE *)(a1 + 30) = *((_BYTE *)a2 + 30);
  *(_BYTE *)(a1 + 31) = *((_BYTE *)a2 + 31);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_BYTE *)(a1 + 37) = *((_BYTE *)a2 + 37);
  *(_BYTE *)(a1 + 38) = *((_BYTE *)a2 + 38);
  *(_BYTE *)(a1 + 39) = *((_BYTE *)a2 + 39);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_BYTE *)(a1 + 43) = *((_BYTE *)a2 + 43);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_BYTE *)(a1 + 45) = *((_BYTE *)a2 + 45);
  *(_BYTE *)(a1 + 46) = *((_BYTE *)a2 + 46);
  *(_BYTE *)(a1 + 47) = *((_BYTE *)a2 + 47);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 51) = *((_BYTE *)a2 + 51);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_BYTE *)(a1 + 53) = *((_BYTE *)a2 + 53);
  *(_BYTE *)(a1 + 54) = *((_BYTE *)a2 + 54);
  *(_BYTE *)(a1 + 55) = *((_BYTE *)a2 + 55);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
  *(_BYTE *)(a1 + 59) = *((_BYTE *)a2 + 59);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_BYTE *)(a1 + 61) = *((_BYTE *)a2 + 61);
  *(_BYTE *)(a1 + 62) = *((_BYTE *)a2 + 62);
  *(_BYTE *)(a1 + 63) = *((_BYTE *)a2 + 63);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  *(_BYTE *)(a1 + 66) = *((_BYTE *)a2 + 66);
  *(_BYTE *)(a1 + 67) = *((_BYTE *)a2 + 67);
  *(_BYTE *)(a1 + 68) = *((_BYTE *)a2 + 68);
  *(_BYTE *)(a1 + 69) = *((_BYTE *)a2 + 69);
  *(_BYTE *)(a1 + 70) = *((_BYTE *)a2 + 70);
  *(_BYTE *)(a1 + 71) = *((_BYTE *)a2 + 71);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
  *(_BYTE *)(a1 + 75) = *((_BYTE *)a2 + 75);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
  *(_BYTE *)(a1 + 79) = *((_BYTE *)a2 + 79);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_BYTE *)(a1 + 82) = *((_BYTE *)a2 + 82);
  *(_BYTE *)(a1 + 83) = *((_BYTE *)a2 + 83);
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
  *(_BYTE *)(a1 + 85) = *((_BYTE *)a2 + 85);
  *(_BYTE *)(a1 + 86) = *((_BYTE *)a2 + 86);
  *(_BYTE *)(a1 + 87) = *((_BYTE *)a2 + 87);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  *(_BYTE *)(a1 + 91) = *((_BYTE *)a2 + 91);
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_BYTE *)(a1 + 93) = *((_BYTE *)a2 + 93);
  *(_BYTE *)(a1 + 94) = *((_BYTE *)a2 + 94);
  *(_BYTE *)(a1 + 95) = *((_BYTE *)a2 + 95);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  *(_BYTE *)(a1 + 99) = *((_BYTE *)a2 + 99);
  *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
  *(_BYTE *)(a1 + 101) = *((_BYTE *)a2 + 101);
  *(_BYTE *)(a1 + 102) = *((_BYTE *)a2 + 102);
  *(_BYTE *)(a1 + 103) = *((_BYTE *)a2 + 103);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_BYTE *)(a1 + 105) = *((_BYTE *)a2 + 105);
  *(_BYTE *)(a1 + 106) = *((_BYTE *)a2 + 106);
  *(_BYTE *)(a1 + 107) = *((_BYTE *)a2 + 107);
  *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
  *(_BYTE *)(a1 + 109) = *((_BYTE *)a2 + 109);
  *(_BYTE *)(a1 + 110) = *((_BYTE *)a2 + 110);
  *(_BYTE *)(a1 + 111) = *((_BYTE *)a2 + 111);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = (int *)type metadata accessor for SyncViewLocalData(0);
  v12 = v11[6];
  v13 = v8 + v12;
  v14 = v9 + v12;
  *(_QWORD *)(v8 + v12) = *(_QWORD *)(v9 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v11[7]) = *(_QWORD *)(v9 + v11[7]);
  swift_retain();
  swift_release();
  v15 = v11[8];
  v16 = v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = v11[9];
  v20 = (_BYTE *)(v8 + v19);
  v21 = (_BYTE *)(v9 + v19);
  *(_QWORD *)(v8 + v19) = *(_QWORD *)(v9 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[8] = v21[8];
  v20[9] = v21[9];
  v20[10] = v21[10];
  v20[11] = v21[11];
  v20[12] = v21[12];
  v20[13] = v21[13];
  v20[14] = v21[14];
  v20[15] = v21[15];
  v20[16] = v21[16];
  v20[17] = v21[17];
  v20[18] = v21[18];
  v20[19] = v21[19];
  v20[20] = v21[20];
  v20[21] = v21[21];
  v20[22] = v21[22];
  v20[23] = v21[23];
  *(_QWORD *)(v8 + v11[10]) = *(_QWORD *)(v9 + v11[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10009619C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  memcpy(a1, a2, 0x71uLL);
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = (int *)type metadata accessor for SyncViewLocalData(0);
  *(_OWORD *)&v7[v10[6]] = *(_OWORD *)&v8[v10[6]];
  *(_QWORD *)&v7[v10[7]] = *(_QWORD *)&v8[v10[7]];
  v11 = v10[8];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v10[9];
  v16 = &v7[v15];
  v17 = &v8[v15];
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
  *(_QWORD *)&v7[v10[10]] = *(_QWORD *)&v8[v10[10]];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100096294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + 97) = *(_OWORD *)(a2 + 97);
  v9 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = (int *)type metadata accessor for SyncViewLocalData(0);
  v11 = v10[6];
  v12 = v7 + v11;
  v13 = v8 + v11;
  *(_QWORD *)(v7 + v11) = *(_QWORD *)(v8 + v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + v10[7]) = *(_QWORD *)(v8 + v10[7]);
  swift_release();
  v14 = v10[8];
  v15 = v7 + v14;
  v16 = v8 + v14;
  v17 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = v10[9];
  v19 = v7 + v18;
  v20 = v8 + v18;
  *(_QWORD *)(v7 + v18) = *(_QWORD *)(v8 + v18);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
  *(_QWORD *)(v7 + v10[10]) = *(_QWORD *)(v8 + v10[10]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100096404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100096410);
}

void sub_100096410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for SyncViewLocalData(0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    sub_10009A564(a1 + *(int *)(a3 + 20), a2, v6);
  }
  else
  {
    sub_10009A570();
    sub_10000B350();
  }
}

uint64_t sub_100096468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100096474);
}

void sub_100096474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10009A5A4();
  v5 = type metadata accessor for SyncViewLocalData(v4);
  if (*(_DWORD *)(*(_QWORD *)(v5 - 8) + 84) == v3)
  {
    sub_100043270(v1 + *(int *)(v2 + 20), v0, v0, v5);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v2 + 24)) = (v0 - 1);
    sub_10000B350();
  }
}

uint64_t type metadata accessor for SyncView(uint64_t a1)
{
  return sub_100021590(a1, qword_1002ADE48, (uint64_t)&nominal type descriptor for SyncView);
}

uint64_t sub_1000964E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "q";
  result = type metadata accessor for SyncViewLocalData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100220340;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10009655C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = type metadata accessor for UniversalControlConfiguration(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    v9 = a3[7];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(uint64_t *)((char *)a2 + v9);
    *v10 = *v11;
    v10[1] = v13;
    *(uint64_t *)((char *)a1 + v9) = v14;
    v15 = a3[8];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UniversalControlDisplayLayout(0);
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
    v19(v16, v17, v18);
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    v24 = *(_QWORD *)v23;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
    v25 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v25;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_100096684(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[6]);
  swift_bridgeObjectRelease(*v5);
  swift_bridgeObjectRelease(v5[1]);
  swift_release(*(_QWORD *)(a1 + a2[7]));
  v6 = a1 + a2[8];
  v7 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
}

uint64_t sub_100096724(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  v8 = a3[7];
  v9 = (uint64_t *)(a1 + v7);
  v10 = (uint64_t *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  v13 = *(_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v12;
  *(_QWORD *)(a1 + v8) = v13;
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UniversalControlDisplayLayout(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  v18(v15, v16, v17);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (uint64_t *)(a2 + v19);
  v23 = *v22;
  *(_QWORD *)v21 = *v22;
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 1);
  v24 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v24;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_100096820(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[9];
  v22 = (_BYTE *)(a1 + v21);
  v23 = (_BYTE *)(a2 + v21);
  v24 = *(_QWORD *)(a2 + v21);
  v25 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v22[8] = v23[8];
  v22[9] = v23[9];
  v22[10] = v23[10];
  v22[11] = v23[11];
  v22[12] = v23[12];
  v22[13] = v23[13];
  v22[14] = v23[14];
  v22[15] = v23[15];
  v22[16] = v23[16];
  v22[17] = v23[17];
  v22[18] = v23[18];
  v22[19] = v23[19];
  v22[20] = v23[20];
  v22[21] = v23[21];
  v22[22] = v23[22];
  v22[23] = v23[23];
  v26 = a3[10];
  v27 = *(_QWORD *)(a2 + v26);
  v28 = *(_QWORD *)(a1 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_1000969BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_100096A78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UniversalControlConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease(v21);
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
  v22 = a3[10];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_100096B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100096B80);
}

void sub_100096B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100060154();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 0x7FFFFFFF)
    {
      sub_10009A570();
      sub_10000B350();
      return;
    }
    v7 = sub_10009A58C();
    v8 = a1 + *(int *)(a3 + 32);
  }
  sub_10009A564(v8, a2, v7);
}

uint64_t sub_100096BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100096BFC);
}

void sub_100096BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_10009A5A4();
  v5 = type metadata accessor for UniversalControlConfiguration(v4);
  if (*(_DWORD *)(*(_QWORD *)(v5 - 8) + 84) == v3)
  {
    v6 = v5;
    v7 = v1;
  }
  else
  {
    if (v3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v1 + *(int *)(v2 + 24)) = (v0 - 1);
      sub_10000B350();
      return;
    }
    v6 = sub_10009A58C();
    v7 = v1 + *(int *)(v2 + 32);
  }
  sub_100043270(v7, v0, v0, v6);
}

uint64_t sub_100096C70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = (char *)&value witness table for () + 64;
  result = type metadata accessor for UniversalControlConfiguration(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100220378;
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for UniversalControlDisplayLayout(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_100220390;
      v5[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void *initializeWithCopy for SyncViewSignature(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x71uLL);
}

uint64_t getEnumTagSinglePayload for SyncViewSignature(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SyncViewSignature(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 113) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SyncViewSignature()
{
  return &type metadata for SyncViewSignature;
}

uint64_t sub_100096DB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  char v3;
  char v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v3 = a3;
  v4 = a2;
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v8 = a2 >> 24;
  v33 = HIDWORD(a2);
  v34 = a2 >> 40;
  v35 = HIWORD(a2);
  v36 = HIBYTE(a2);
  v37 = a3 >> 8;
  v38 = a3 >> 16;
  v39 = a3 >> 24;
  v40 = HIDWORD(a3);
  v41 = a3 >> 40;
  v42 = HIWORD(a3);
  v43 = HIBYTE(a3);
  v9 = type metadata accessor for SHA256Digest(0);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  __chkstk_darwin(v9);
  v29 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SHA256(0);
  v27[1] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v32 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v46 = v4;
  v47 = v6;
  v48 = v7;
  v49 = v8;
  v50 = v33;
  v51 = v34;
  v52 = v35;
  v53 = v36;
  v54 = v3;
  v55 = v37;
  v56 = v38;
  v57 = v39;
  v58 = v40;
  v59 = v41;
  v60 = v42;
  v61 = v43;
  v16 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  JSONEncoder.init()();
  v17 = sub_1000055B0(&qword_1002AB660);
  v18 = swift_allocObject(v17, ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72), *(unsigned __int8 *)(v13 + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021BBA0;
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  v44 = v18;
  v19 = sub_10009A16C((unint64_t *)&unk_1002B3390, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  v20 = sub_1000055B0(&qword_1002AB668);
  v21 = sub_10009A22C((unint64_t *)&qword_1002B33A0, &qword_1002AB668);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v20, v21, v12, v19);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v15);
  v22 = sub_1000055B0(&qword_1002ADF60);
  sub_10009A22C(&qword_1002ADF68, &qword_1002ADF60);
  v23 = v62;
  dispatch thunk of JSONEncoder.encode<A>(_:)(&v45, v22);
  if (!v23)
  {
    v26 = v24;
    SHA256.init()();
    __asm { BR              X10 }
  }
  return swift_release();
}

uint64_t sub_10009729C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;

  v23 = type metadata accessor for SHA256Digest(0);
  v22[3] = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v22[4] = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SHA256(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a1;
  v25[1] = a2;
  v11 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  JSONEncoder.init()();
  v12 = sub_1000055B0(&qword_1002AB660);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_10021BBA0;
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  v24 = v13;
  v14 = sub_10009A16C((unint64_t *)&unk_1002B3390, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  v15 = sub_1000055B0(&qword_1002AB668);
  v16 = sub_10009A22C((unint64_t *)&qword_1002B33A0, &qword_1002AB668);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v15, v16, v7, v14);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v10);
  v17 = sub_1000055B0(&qword_1002ADF48);
  sub_10009A22C(&qword_1002ADF50, &qword_1002ADF48);
  v18 = v26;
  dispatch thunk of JSONEncoder.encode<A>(_:)(v25, v17);
  if (!v18)
  {
    v21 = v19;
    v26 = v6;
    v22[2] = v5;
    SHA256.init()();
    __asm { BR              X10 }
  }
  return swift_release();
}

uint64_t sub_1000976AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = a1;
  v8 = a2;
  v9 = BYTE2(a2);
  v10 = BYTE3(a2);
  v11 = BYTE4(a2);
  v3 = (char *)&v7 + a3;
  v12 = BYTE5(a2);
  v4 = sub_10009A5F4();
  v5 = sub_10009A16C(&qword_1002ADF58, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

uint64_t sub_1000977B4()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;

  if (*((_BYTE *)v0 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *v0;
    v1 = v0[1];
    v3 = (unint64_t)*v0 >> 8;
    v4 = (unint64_t)*v0 >> 16;
    v5 = (unint64_t)*v0 >> 24;
    v6 = HIDWORD(*v0);
    v7 = (unint64_t)*v0 >> 40;
    v8 = HIWORD(*v0);
    v55 = HIBYTE(*v0);
    v60 = v1 >> 8;
    v65 = v1 >> 16;
    v70 = v1 >> 24;
    v75 = HIDWORD(v1);
    v80 = v1 >> 40;
    v85 = HIWORD(v1);
    v90 = HIBYTE(v1);
    Hasher._combine(_:)(1u);
    LOBYTE(v95) = v2;
    BYTE1(v95) = v3;
    BYTE2(v95) = v4;
    BYTE3(v95) = v5;
    BYTE4(v95) = v6;
    BYTE5(v95) = v7;
    BYTE6(v95) = v8;
    BYTE7(v95) = v55;
    *((_QWORD *)&v95 + 1) = v1;
    Hasher.combine(bytes:)(&v95, &v96);
  }
  v95 = *(_OWORD *)((char *)v0 + 17);
  v9 = Hasher.combine(bytes:)(&v95, &v96);
  v18 = sub_10009A520(*(__n128 *)((char *)v0 + 33), v9, v10, v11, v12, v13, v14, v15, v16, v55, v60, v65, v70, v75, v80, v85, v90, v17);
  v27 = sub_10009A520(*(__n128 *)((char *)v0 + 49), v18, v19, v20, v21, v22, v23, v24, v25, v56, v61, v66, v71, v76, v81, v86, v91, v26);
  v36 = sub_10009A520(*(__n128 *)((char *)v0 + 65), v27, v28, v29, v30, v31, v32, v33, v34, v57, v62, v67, v72, v77, v82, v87, v92, v35);
  v45 = sub_10009A520(*(__n128 *)((char *)v0 + 81), v36, v37, v38, v39, v40, v41, v42, v43, v58, v63, v68, v73, v78, v83, v88, v93, v44);
  return sub_10009A520(*(__n128 *)((char *)v0 + 97), v45, v46, v47, v48, v49, v50, v51, v52, v59, v64, v69, v74, v79, v84, v89, v94, v53);
}

BOOL sub_100097948(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0
         || static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8)))
  {
    return 0;
  }
  if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 17), *(_QWORD *)(a1 + 25), *(_QWORD *)(a2 + 17), *(_QWORD *)(a2 + 25))|| static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 33), *(_QWORD *)(a1 + 41), *(_QWORD *)(a2 + 33), *(_QWORD *)(a2 + 41))|| static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 49), *(_QWORD *)(a1 + 57), *(_QWORD *)(a2 + 49), *(_QWORD *)(a2 + 57))|| static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 65), *(_QWORD *)(a1 + 73), *(_QWORD *)(a2 + 65), *(_QWORD *)(a2 + 73))
    || static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 81), *(_QWORD *)(a1 + 89), *(_QWORD *)(a2 + 81), *(_QWORD *)(a2 + 89)))
  {
    return 0;
  }
  return static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 97), *(_QWORD *)(a1 + 105), *(_QWORD *)(a2 + 97), *(_QWORD *)(a2 + 105)) == 0;
}

uint64_t sub_100097A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  char v17;

  if (a1 == 0x7972616E6163 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616E6163, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    v8 = 0xED00006E6F697461;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100252870;
    if (a2 == 0x8000000100252870)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100252870, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x4C79616C70736964 && a2 == 0xED000074756F7961)
  {
    v13 = 0xED000074756F7961;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C79616C70736964, 0xED000074756F7961, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6544656372756F73 && a2 == 0xEC00000065636976)
  {
    v15 = 0xEC00000065636976;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6544656372756F73, 0xEC00000065636976, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x65446465636E7973 && a2 == 0xED00007365636976)
  {
    swift_bridgeObjectRelease(0xED00007365636976);
    return 6;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65446465636E7973, 0xED00007365636976, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t static ReportID.scroll.getter()
{
  return 7;
}

uint64_t sub_100097D70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100097DA0 + 4 * byte_100220300[a1]))(0x7972616E6163, 0xE600000000000000);
}

uint64_t sub_100097DA0()
{
  return 0x72756769666E6F63;
}

unint64_t sub_100097DC4()
{
  return 0xD000000000000010;
}

uint64_t sub_100097DE0()
{
  return 0x656369766564;
}

uint64_t sub_100097DF0()
{
  return 0x4C79616C70736964;
}

uint64_t sub_100097E14()
{
  return 0x6544656372756F73;
}

uint64_t sub_100097E34()
{
  return 0x65446465636E7973;
}

uint64_t sub_100097E58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  __int128 v34;
  _BYTE v35[17];

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002ADF80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_10000DBE4(a1, v10);
  v12 = sub_10009A264();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SyncViewSignature.CodingKeys, &type metadata for SyncViewSignature.CodingKeys, v12, v10, v11);
  sub_10009A064(v3, (uint64_t)v35);
  sub_10009A064((uint64_t)v35, (uint64_t)&v34);
  v33 = 0;
  v13 = sub_10008A0CC();
  v14 = KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v33, v5, &type metadata for UniversalControlUUID, v13);
  if (!v2)
  {
    v34 = *(_OWORD *)(v3 + 17);
    v33 = 1;
    v17 = sub_10009A4D4(v14, v15, v16, (uint64_t)&type metadata for UniversalControlUUID);
    v34 = *(_OWORD *)(v3 + 33);
    v33 = 2;
    v20 = sub_10009A4D4(v17, v18, v19, (uint64_t)&type metadata for UniversalControlUUID);
    v34 = *(_OWORD *)(v3 + 49);
    v33 = 3;
    v23 = sub_10009A4D4(v20, v21, v22, (uint64_t)&type metadata for UniversalControlUUID);
    v34 = *(_OWORD *)(v3 + 65);
    v33 = 4;
    v26 = sub_10009A4D4(v23, v24, v25, (uint64_t)&type metadata for UniversalControlUUID);
    v34 = *(_OWORD *)(v3 + 81);
    v33 = 5;
    v29 = sub_10009A4D4(v26, v27, v28, (uint64_t)&type metadata for UniversalControlUUID);
    v34 = *(_OWORD *)(v3 + 97);
    v33 = 6;
    sub_10009A4D4(v29, v30, v31, (uint64_t)&type metadata for UniversalControlUUID);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

Swift::Int sub_100098040()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000977B4();
  return Hasher._finalize()();
}

uint64_t sub_10009807C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int8 v23;
  int v24;
  char v25;

  v5 = sub_1000055B0(&qword_1002ADF70);
  __chkstk_darwin(v5);
  sub_10002641C();
  v6 = a1[3];
  v7 = a1[4];
  sub_10000DBE4(a1, v6);
  v8 = sub_10009A264();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SyncViewSignature.CodingKeys, &type metadata for SyncViewSignature.CodingKeys, v8, v6, v7);
  if (v2)
    return sub_100005988(a1);
  v25 = 0;
  v9 = sub_10008A010();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v22, &type metadata for UniversalControlUUID, &v25, v5, &type metadata for UniversalControlUUID, v9, v10);
  v11 = *((_QWORD *)&v22 + 1);
  v20 = a2;
  v21 = v22;
  v12 = v23;
  v25 = 1;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  v24 = v12;
  v19 = v22;
  v25 = 2;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  v18 = v22;
  v25 = 3;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  v17 = v22;
  v25 = 4;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  v16 = v22;
  v25 = 5;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  v15 = v22;
  v25 = 6;
  sub_10009A4B4((uint64_t)&type metadata for UniversalControlUUID);
  sub_10003B0F4();
  v14 = v22;
  result = sub_100005988(a1);
  *(_QWORD *)v20 = v21;
  *(_QWORD *)(v20 + 8) = v11;
  *(_BYTE *)(v20 + 16) = v24;
  *(_OWORD *)(v20 + 17) = v19;
  *(_OWORD *)(v20 + 33) = v18;
  *(_OWORD *)(v20 + 49) = v17;
  *(_OWORD *)(v20 + 65) = v16;
  *(_OWORD *)(v20 + 81) = v15;
  *(_OWORD *)(v20 + 97) = v14;
  return result;
}

uint64_t sub_1000982CC()
{
  unsigned __int8 *v0;

  return sub_100097D70(*v0);
}

uint64_t sub_1000982D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100097A2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000982F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.scroll.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10009831C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009A264();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100098344(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009A264();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10009836C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[113];

  result = (void *)sub_10009807C(a1, (uint64_t)__src);
  if (!v2)
    return memcpy(a2, __src, 0x71uLL);
  return result;
}

uint64_t sub_1000983B4(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[113];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100097E58(a1);
}

Swift::Int sub_10009840C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000977B4();
  return Hasher._finalize()();
}

unint64_t sub_10009844C()
{
  unint64_t result;

  result = qword_1002ADF30;
  if (!qword_1002ADF30)
  {
    result = swift_getWitnessTable(&unk_1002203C4, &type metadata for SyncViewSignature);
    atomic_store(result, (unint64_t *)&qword_1002ADF30);
  }
  return result;
}

uint64_t sub_100098488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[16];
  __int128 v29;
  _BYTE v30[34];
  __int128 v31;
  char v32;
  __int128 v33;
  char v34;
  __int128 v35;
  char v36;
  __int128 v37;
  char v38;
  __int128 v39;
  char v40;
  _BYTE v41[25];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002641C();
  v5 = v4 - v3;
  v29 = xmmword_10021F8C0;
  sub_10009A064(v0, (uint64_t)v41);
  sub_10009A064((uint64_t)v41, (uint64_t)v30);
  *(_OWORD *)&v30[17] = *(_OWORD *)(v0 + 17);
  v30[33] = 0;
  v31 = *(_OWORD *)(v0 + 33);
  v32 = 0;
  v33 = *(_OWORD *)(v0 + 49);
  v34 = 0;
  v35 = *(_OWORD *)(v0 + 65);
  v36 = 0;
  v37 = *(_OWORD *)(v0 + 81);
  v38 = 0;
  v39 = *(_OWORD *)(v0 + 97);
  v40 = 0;
  sub_100058678();
  for (i = 0; i != 119; i += 17)
  {
    if ((v30[i + 16] & 1) != 0)
    {
      v8 = 0xE300000000000000;
      v9 = 7104878;
    }
    else
    {
      v7 = &v28[i];
      v10 = UUID.init(uuid:)(*((_QWORD *)v7 + 4), *((_QWORD *)v7 + 4) >> 8, *((_QWORD *)v7 + 4) >> 16, *((_QWORD *)v7 + 4) >> 24, HIDWORD(*((_QWORD *)v7 + 4)), *((_QWORD *)v7 + 4) >> 40);
      v11 = UUID.uuidString.getter(v10);
      v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
      v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0)
        v14 = v11;
      v15 = 7;
      if (((v13 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
        v15 = 11;
      v16 = v15 | (v14 << 16);
      v17 = String.index(_:offsetBy:limitedBy:)(15, 8, v16, v11, v13);
      if ((v18 & 1) != 0)
        v19 = v16;
      else
        v19 = v17;
      v20 = String.subscript.getter(15, v19);
      swift_bridgeObjectRelease();
      v9 = static String._fromSubstring(_:)(v20);
      v8 = v21;
      sub_10000E4A0();
    }
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_100058678();
    v22 = _swiftEmptyArrayStorage[2];
    if (v22 >= _swiftEmptyArrayStorage[3] >> 1)
      sub_100058678();
    _swiftEmptyArrayStorage[2] = v22 + 1;
    v23 = &_swiftEmptyArrayStorage[2 * v22];
    v23[4] = v9;
    v23[5] = v8;
  }
  v24 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v25 = sub_10009A22C((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
  v26 = BidirectionalCollection<>.joined(separator:)(58, 0xE100000000000000, v24, v25);
  swift_release();
  return v26;
}

uint64_t sub_1000987BC()
{
  const void *v0;
  _BYTE __dst[113];

  memcpy(__dst, v0, sizeof(__dst));
  return sub_100098488();
}

uint64_t sub_1000987F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64x2_t v39;
  int32x4_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64x2_t v43;
  uint64x2_t v44;
  uint64x2_t v45;
  int32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64x2_t v56;
  int32x4_t v57;
  int64x2_t v58;
  uint64x2_t v59;
  int32x2_t v60;
  int16x8_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64x2_t v67;
  int32x4_t v68;
  int16x8_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  int16x8_t v72;
  uint64x2_t v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t inited;
  unint64_t v89;
  uint64_t v90;
  uint64_t result;
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int16x8_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int16x8_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157[16];

  v17 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v17);
  sub_10002641C();
  v107 = v19 - v18;
  v132 = type metadata accessor for SyncView(0);
  v20 = a9 + *(int *)(v132 + 20);
  v21 = sub_100060154();
  v130 = *(_QWORD *)(v21 - 8);
  v156 = a1;
  v131 = v21;
  (*(void (**)(uint64_t, uint64_t))(v130 + 16))(v20, a1);
  v22 = (int *)type metadata accessor for SyncViewLocalData(0);
  v23 = v20 + v22[8];
  v24 = sub_10009A58C();
  v129 = *(_QWORD *)(v24 - 8);
  v155 = a5;
  v154 = v24;
  v93 = *(void (**)(uint64_t, uint64_t))(v129 + 16);
  v93(v23, a5);
  v25 = (uint64_t *)(v20 + v22[6]);
  *v25 = a2;
  v25[1] = a3;
  *(_QWORD *)(v20 + v22[7]) = a4;
  v26 = (uint64_t *)(v20 + v22[9]);
  *v26 = a6;
  v26[1] = a7;
  v92 = a7;
  v26[2] = a8;
  *(_QWORD *)(v20 + v22[10]) = a10;
  v27 = qword_1002A9850;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v120 = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27 != -1)
    v28 = swift_once(&qword_1002A9850, sub_10006251C);
  v140 = xmmword_1002B6E88;
  v138 = BYTE1(xmmword_1002B6E88);
  v116 = BYTE2(xmmword_1002B6E88);
  v137 = BYTE3(xmmword_1002B6E88);
  v136 = BYTE4(xmmword_1002B6E88);
  v29 = BYTE5(xmmword_1002B6E88);
  v135 = BYTE6(xmmword_1002B6E88);
  v30 = BYTE7(xmmword_1002B6E88);
  v152 = BYTE8(xmmword_1002B6E88);
  v150 = BYTE9(xmmword_1002B6E88);
  v148 = BYTE10(xmmword_1002B6E88);
  v146 = BYTE11(xmmword_1002B6E88);
  v31 = BYTE12(xmmword_1002B6E88);
  v144 = BYTE13(xmmword_1002B6E88);
  v142 = BYTE14(xmmword_1002B6E88);
  v32 = HIBYTE(xmmword_1002B6E88);
  v126 = UniversalControlConfiguration.id.getter(v28);
  v128 = v33;
  v127 = v32;
  v123 = v29;
  v121 = v30;
  v34 = sub_10009729C(a2, a3);
  v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v125 = HIBYTE(v36);
  v122 = HIWORD(v36);
  v112 = v36 >> 40;
  v110 = HIDWORD(v36);
  v108 = v36 >> 24;
  v106 = v36 >> 16;
  v118 = v36;
  v105 = v36 >> 8;
  v104 = HIBYTE(v34);
  v103 = HIWORD(v34);
  v102 = v34 >> 40;
  v100 = HIDWORD(v34);
  v98 = v34 >> 24;
  v96 = v34 >> 16;
  v119 = v34;
  v95 = v34 >> 8;
  v37 = v116;
  sub_100040554();
  v39 = (uint64x2_t)vdupq_n_s64(v38);
  *(double *)v40.i64 = sub_10009A5E8(v39, (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_10021F130), NAN, (uint64x2_t)xmmword_10021F140);
  *(int16x4_t *)v40.i8 = vmovn_s32(v40);
  v113 = (int16x8_t)v40;
  v114 = v41 >> 40;
  v111 = HIWORD(v41);
  v117 = v41;
  v109 = HIBYTE(v41);
  v43 = (uint64x2_t)vdupq_n_s64(v42);
  *(double *)v46.i64 = sub_10009A5E8(v43, (int32x4_t)vshlq_u64(v43, v44), *(double *)v44.i64, v45);
  v101 = v47 >> 40;
  *(int16x4_t *)v46.i8 = vmovn_s32(v46);
  v99 = (int16x8_t)v46;
  v97 = HIWORD(v47);
  v115 = v47;
  v94 = HIBYTE(v47);
  ((void (*)(uint64_t, uint64_t, uint64_t))v93)(v107, a5, v154);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v107, 0, 1, v154);
  sub_100099478(v107);
  v49 = v48;
  v51 = v50;
  sub_10009A1EC(v107);
  v52 = v31;
  if (v120)
  {
    v53 = sub_100096DB8(v120, v92, a8);
    v55 = v54;
    sub_10000E4A0();
    v56 = (uint64x2_t)vdupq_n_s64(v55);
    v57 = (int32x4_t)vshlq_u64(v56, (uint64x2_t)xmmword_1002202D0);
    v58 = (int64x2_t)vshlq_u64(v56, (uint64x2_t)xmmword_1002202E0);
    v59 = (uint64x2_t)vdupq_n_s64(v53);
    v60.i32[0] = v53;
    v60.i32[1] = v53 >> 8;
    v61 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v56, (uint64x2_t)xmmword_1002202F0), v57);
    v57.i32[0] = v55;
    *(double *)&v62 = sub_10009A5FC(v55 >> 8, v61, (int8x16_t)vuzp1q_s16((int16x8_t)vmovn_hight_s64(v60, (int64x2_t)vshlq_u64(v59, (uint64x2_t)xmmword_1002202E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v59, (uint64x2_t)xmmword_1002202F0), (int32x4_t)vshlq_u64(v59, (uint64x2_t)xmmword_1002202D0))), *(int32x2_t *)v57.i8, v58);
    v134 = v62;
  }
  else
  {
    v134 = xmmword_1002B6E88;
  }
  sub_100145414();
  v64 = v63;
  v66 = v65;
  swift_bridgeObjectRelease();
  v67 = (uint64x2_t)vdupq_n_s64(v66);
  *(double *)v68.i64 = sub_10009A5E8(v67, (int32x4_t)vshlq_u64(v67, (uint64x2_t)xmmword_10021F130), NAN, (uint64x2_t)xmmword_10021F140);
  *(int16x4_t *)v69.i8 = vmovn_s32(v68);
  v70 = (uint64x2_t)vdupq_n_s64(v64);
  v72 = (int16x8_t)vshlq_u64(v70, v71);
  *(int16x4_t *)v72.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v70, v73), (int32x4_t)v72));
  *(_BYTE *)(a9 + 33) = v119;
  *(_BYTE *)(a9 + 34) = v95;
  *(_BYTE *)(a9 + 35) = v96;
  *(_BYTE *)(a9 + 36) = v98;
  *(_BYTE *)(a9 + 37) = v100;
  *(_BYTE *)(a9 + 38) = v102;
  *(_BYTE *)(a9 + 39) = v103;
  *(_BYTE *)(a9 + 40) = v104;
  *(_BYTE *)(a9 + 41) = v118;
  *(_BYTE *)(a9 + 42) = v105;
  *(_BYTE *)(a9 + 43) = v106;
  *(_BYTE *)(a9 + 44) = v108;
  *(_BYTE *)(a9 + 45) = v110;
  *(_BYTE *)(a9 + 46) = v112;
  *(_QWORD *)a9 = v140 | (v138 << 8) | (v37 << 16) | (v137 << 24) | (v136 << 32) | (v123 << 40) | (v135 << 48) | (v121 << 56);
  *(_QWORD *)(a9 + 8) = v152 | (v150 << 8) | (v148 << 16) | (v146 << 24) | (v52 << 32) | (v144 << 40) | (v142 << 48) | (v127 << 56);
  *(_BYTE *)(a9 + 16) = 0;
  *(_QWORD *)(a9 + 17) = v126;
  *(_QWORD *)(a9 + 25) = v128;
  *(_BYTE *)(a9 + 47) = v122;
  *(_BYTE *)(a9 + 48) = v125;
  *(_BYTE *)(a9 + 49) = v117;
  *(_DWORD *)(a9 + 50) = vmovn_s16(v113).u32[0];
  *(_BYTE *)(a9 + 54) = v114;
  *(_BYTE *)(a9 + 55) = v111;
  *(_BYTE *)(a9 + 56) = v109;
  *(_BYTE *)(a9 + 57) = v115;
  *(_DWORD *)(a9 + 58) = vmovn_s16(v99).u32[0];
  *(_BYTE *)(a9 + 62) = v101;
  *(_BYTE *)(a9 + 63) = v97;
  *(_BYTE *)(a9 + 64) = v94;
  *(_QWORD *)(a9 + 65) = v49;
  *(_QWORD *)(a9 + 73) = v51;
  *(_OWORD *)(a9 + 81) = v134;
  *(_BYTE *)(a9 + 97) = v64;
  *(_DWORD *)(a9 + 98) = vmovn_s16(v72).u32[0];
  *(_BYTE *)(a9 + 102) = BYTE5(v64);
  *(_BYTE *)(a9 + 103) = BYTE6(v64);
  *(_BYTE *)(a9 + 104) = HIBYTE(v64);
  *(_BYTE *)(a9 + 105) = v66;
  *(_DWORD *)(a9 + 106) = vmovn_s16(v69).u32[0];
  *(_BYTE *)(a9 + 110) = v74;
  *(_BYTE *)(a9 + 111) = v75;
  *(_BYTE *)(a9 + 112) = HIBYTE(v66);
  v77 = dispatch thunk of UniversalControlDevice.id.getter(v76);
  v78 = v77;
  v80 = v79;
  v81 = v77 >> 8;
  v82 = v77 >> 16;
  v83 = v77 >> 24;
  v84 = HIDWORD(v77);
  v85 = v77 >> 40;
  v86 = HIWORD(v77);
  v139 = HIBYTE(v77);
  v141 = v79 >> 8;
  v143 = v79 >> 16;
  v145 = v79 >> 24;
  v147 = HIDWORD(v79);
  v149 = v79 >> 40;
  v151 = HIWORD(v79);
  v153 = HIBYTE(v79);
  v87 = sub_1000055B0((uint64_t *)&unk_1002B3490);
  inited = swift_initStackObject(v87, v157);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_BYTE *)(inited + 32) = v78;
  *(_BYTE *)(inited + 33) = v81;
  *(_BYTE *)(inited + 34) = v82;
  *(_BYTE *)(inited + 35) = v83;
  *(_BYTE *)(inited + 36) = v84;
  *(_BYTE *)(inited + 37) = v85;
  *(_BYTE *)(inited + 38) = v86;
  *(_BYTE *)(inited + 39) = v139;
  *(_BYTE *)(inited + 40) = v80;
  *(_BYTE *)(inited + 41) = v141;
  *(_BYTE *)(inited + 42) = v143;
  *(_BYTE *)(inited + 43) = v145;
  *(_BYTE *)(inited + 44) = v147;
  *(_BYTE *)(inited + 45) = v149;
  *(_BYTE *)(inited + 46) = v151;
  *(_BYTE *)(inited + 47) = v153;
  *(_QWORD *)(inited + 48) = 1;
  v89 = sub_100033B3C();
  v90 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for UniversalControlDeviceID, &type metadata for UInt64, v89);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v155, v154);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 8))(v156, v131);
  *(_QWORD *)(a9 + *(int *)(v132 + 24)) = v90;
  return result;
}

int8x8_t sub_100099478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint8x8_t v9;
  uint16x8_t v10;
  unint64_t v11;
  uint64x2_t v12;
  int32x4_t v13;
  unint64_t v14;
  uint64x2_t v15;
  int32x4_t v16;
  uint32x4_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  int8x16_t v20;
  _QWORD v22[2];
  int32x4_t v23;
  int32x4_t v24;

  v2 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UniversalControlDisplayLayout(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009A1A4(a1, (uint64_t)v4);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_10009A1EC((uint64_t)v4);
    if (qword_1002A9850 != -1)
      swift_once(&qword_1002A9850, sub_10006251C);
    v9.i32[0] = *(_DWORD *)((char *)&xmmword_1002B6E88 + 9);
    v10 = vmovl_u8(v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1000409D4();
    v22[1] = HIBYTE(v11);
    v12 = (uint64x2_t)vdupq_n_s64(v11);
    v13 = vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_10021F130));
    *(int16x4_t *)v13.i8 = vmovn_s32(v13);
    v23 = v13;
    v15 = (uint64x2_t)vdupq_n_s64(v14);
    v16 = vuzp1q_s32((int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10021F130));
    *(int16x4_t *)v16.i8 = vmovn_s32(v16);
    v24 = v16;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10.i64[0] = v23.i64[0];
  }
  v17 = vmovl_u16((uint16x4_t)(v10.i64[0] & 0xFF00FF00FF00FFLL));
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  v19 = v18;
  v18.i64[0] = v17.u32[2];
  v18.i64[1] = v17.u32[3];
  v20 = vorrq_s8((int8x16_t)vshlq_u64(v19, (uint64x2_t)xmmword_10021F160), (int8x16_t)vshlq_u64(v18, (uint64x2_t)xmmword_10021F150));
  return vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
}

void sub_100099784(char a1)
{
  char v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_getKeyPath(&unk_100220518);
  sub_10009A558();
  v3 = sub_1000055B0(&qword_1002ADF38);
  sub_10009A4F0(v3, v4, v5, (uint64_t)&protocol witness table for AnyKeyPath, v6, v7);
  sub_10009A530();
  if ((v1 & 1) != 0)
  {
    v8 = &unk_1002206A8;
LABEL_5:
    swift_getKeyPath(v8);
    sub_10000B338();
    return;
  }
  swift_getKeyPath(&unk_100220540);
  sub_10009A558();
  sub_10009A4F0(v9, v10, v11, (uint64_t)&protocol witness table for AnyKeyPath, v12, v13);
  sub_10009A530();
  swift_getKeyPath(&unk_100220568);
  sub_10009A558();
  sub_10009A4F0(v14, v15, v16, (uint64_t)&protocol witness table for AnyKeyPath, v17, v18);
  sub_10009A530();
  swift_getKeyPath(&unk_100220590);
  sub_10009A558();
  sub_10009A4F0(v19, v20, v21, (uint64_t)&protocol witness table for AnyKeyPath, v22, v23);
  sub_10009A530();
  swift_getKeyPath(&unk_1002205B8);
  sub_10009A558();
  sub_10009A4F0(v24, v25, v26, (uint64_t)&protocol witness table for AnyKeyPath, v27, v28);
  sub_10009A530();
  swift_getKeyPath(&unk_1002205E0);
  sub_10009A558();
  sub_10009A4F0(v29, v30, v31, (uint64_t)&protocol witness table for AnyKeyPath, v32, v33);
  sub_10009A5DC();
  if ((a1 & 1) != 0)
  {
    v8 = &unk_100220608;
    goto LABEL_5;
  }
  sub_10009A53C((uint64_t)"Fatal error", v34, v35, v36, 0x8000000100255390, (uint64_t)"EnsembleAgent/SyncView.swift", v37, v38, 93, 0);
  __break(1u);
}

uint64_t sub_100099908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for SyncView(0);
  sub_100060154();
  v0 = sub_10009A5BC();
  return sub_100084F8C(v0, v1, v2, v3);
}

uint64_t sub_100099938()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(sub_10009A500() + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

double sub_100099978()
{
  double result;

  sub_10009A500();
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_10009999C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for SyncView(0);
  type metadata accessor for SyncViewLocalData(0);
  sub_10009A58C();
  v0 = sub_10009A5BC();
  return sub_100084F8C(v0, v1, v2, v3);
}

double sub_1000999DC()
{
  double result;

  sub_10009A500();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

double sub_100099A14()
{
  double result;

  sub_10009A500();
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void sub_100099A38(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  _BYTE v9[8];

  swift_getKeyPath(&unk_1002204D0);
  sub_10009A558();
  v2 = sub_1000055B0(&qword_1002ADF38);
  dispatch thunk of static Equatable.== infix(_:_:)(v9, v8, v2, &protocol witness table for AnyKeyPath);
  sub_10009A5DC();
  if ((a1 & 1) != 0)
  {
    swift_getKeyPath(&unk_1002204F8);
    sub_10000B338();
  }
  else
  {
    sub_10009A53C((uint64_t)"Fatal error", v3, v4, v5, 0x8000000100255390, (uint64_t)"EnsembleAgent/SyncView.swift", v6, v7, 102, 0);
    __break(1u);
  }
}

int8x8_t sub_100099AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64x2_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x8_t result;
  char v20;
  char v21;
  char v22;

  v5 = v2 + *(int *)(type metadata accessor for SyncView(0) + 20);
  v6 = (uint64_t *)(v5 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 24));
  v7 = *v6;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6[1]);
  *v6 = a1;
  v6[1] = a2;
  v8 = sub_10009729C(a1, a2);
  LOBYTE(a2) = v8;
  LOBYTE(v7) = v9;
  v10 = (uint64x2_t)vdupq_n_s64(v8);
  v11 = COERCE_DOUBLE(vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v10, (uint64x2_t)xmmword_10021F130))));
  v12 = v8 >> 40;
  v13 = HIWORD(v8);
  v14 = HIBYTE(v8);
  v15 = (uint64x2_t)vdupq_n_s64(v9);
  *(double *)v16.i64 = sub_10009A5E8(v15, (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10021F130), v11, (uint64x2_t)xmmword_10021F140);
  *(int16x4_t *)v17.i8 = vmovn_s32(v16);
  *(_BYTE *)(v2 + 33) = a2;
  *(_DWORD *)(v2 + 34) = vmovn_s16(v18).u32[0];
  *(_BYTE *)(v2 + 38) = v12;
  *(_BYTE *)(v2 + 39) = v13;
  *(_BYTE *)(v2 + 40) = v14;
  *(_BYTE *)(v2 + 41) = v7;
  result = vmovn_s16(v17);
  *(_DWORD *)(v2 + 42) = result.i32[0];
  *(_BYTE *)(v2 + 46) = v20;
  *(_BYTE *)(v2 + 47) = v21;
  *(_BYTE *)(v2 + 48) = v22;
  return result;
}

double sub_100099C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (**v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64x2_t v18;
  int32x4_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64x2_t v22;
  int32x4_t v23;
  int64x2_t v24;
  int32x4_t v25;
  int16x8_t v26;
  __int128 v27;
  double result;
  double v29[4];

  v2 = v1;
  v4 = sub_10009A58C();
  v5 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002641C();
  v8 = v7 - v6;
  v9 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v29 - v13;
  v15 = v2 + *(int *)(type metadata accessor for SyncView(0) + 20);
  v16 = type metadata accessor for SyncViewLocalData(0);
  sub_10009A5D4(v15 + *(int *)(v16 + 32), a1, v5[3]);
  sub_10009A5D4((uint64_t)v14, a1, v5[2]);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, 0, 1, v4);
  sub_10009A1A4((uint64_t)v14, (uint64_t)v12);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v4) == 1)
  {
    sub_10009A1EC((uint64_t)v12);
    if (qword_1002A9850 != -1)
      swift_once(&qword_1002A9850, sub_10006251C);
    *(_OWORD *)v29 = xmmword_1002B6E88;
  }
  else
  {
    sub_10009A5D4(v8, (uint64_t)v12, v5[4]);
    sub_1000409D4();
    v18 = (uint64x2_t)vdupq_n_s64(v17);
    v19 = (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1002202D0);
    v20 = (int64x2_t)vshlq_u64(v18, (uint64x2_t)xmmword_1002202E0);
    v22 = (uint64x2_t)vdupq_n_s64(v21);
    v23 = (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_1002202D0);
    v24 = (int64x2_t)vshlq_u64(v22, (uint64x2_t)xmmword_1002202E0);
    v25 = (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_1002202F0);
    v22.i32[0] = v21;
    v22.i32[1] = v21 >> 8;
    v26 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1002202F0), v19);
    v19.i32[0] = v17;
    *(double *)&v27 = sub_10009A5FC(v17 >> 8, v26, (int8x16_t)vuzp1q_s16((int16x8_t)vmovn_hight_s64(*(int32x2_t *)v22.i8, v24), (int16x8_t)vuzp1q_s32(v25, v23)), *(int32x2_t *)v19.i8, v20);
    *(_OWORD *)v29 = v27;
    sub_10009A594();
  }
  sub_10009A1EC((uint64_t)v14);
  result = v29[0];
  *(_OWORD *)(v2 + 65) = *(_OWORD *)v29;
  return result;
}

void sub_100099EC4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64x2_t v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int8x16_t v16;

  v7 = v3 + *(int *)(type metadata accessor for SyncView(0) + 20);
  v8 = (uint64_t *)(v7 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 36));
  v9 = *v8;
  *v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v9);
  if (a1)
  {
    v10 = sub_100096DB8(a1, a2, a3);
    v11 = (uint64x2_t)vdupq_n_s64(v10);
    v13 = (uint64x2_t)vdupq_n_s64(v12);
    v14.i32[0] = v12;
    v14.i32[1] = v12 >> 8;
    v15.i32[0] = v10;
    v15.i32[1] = v10 >> 8;
    v16 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vmovn_hight_s64(v15, (int64x2_t)vshlq_u64(v11, (uint64x2_t)xmmword_1002202E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1002202F0), (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1002202D0))), (int8x16_t)vuzp1q_s16((int16x8_t)vmovn_hight_s64(v14, (int64x2_t)vshlq_u64(v13, (uint64x2_t)xmmword_1002202E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1002202F0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1002202D0))));
  }
  else
  {
    if (qword_1002A9850 != -1)
      swift_once(&qword_1002A9850, sub_10006251C);
    v16 = (int8x16_t)xmmword_1002B6E88;
  }
  *(int8x16_t *)(v3 + 81) = v16;
}

uint64_t sub_10009A064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002ADF40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009A0AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = sub_10009A5F4();
  v13 = sub_10009A16C(&qword_1002ADF58, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10009A16C(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = sub_100026A38(v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009A1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009A1EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009A22C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000DCA0(a2);
    result = sub_100026A38(v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009A264()
{
  unint64_t result;

  result = qword_1002ADF78;
  if (!qword_1002ADF78)
  {
    result = swift_getWitnessTable(&unk_100220788, &type metadata for SyncViewSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADF78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SyncViewSignature.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncViewSignature.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10009A374 + 4 * byte_10022030C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10009A3A8 + 4 * byte_100220307[v4]))();
}

uint64_t sub_10009A3A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A3B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009A3B8);
  return result;
}

uint64_t sub_10009A3C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009A3CCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10009A3D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A3D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncViewSignature.CodingKeys()
{
  return &type metadata for SyncViewSignature.CodingKeys;
}

unint64_t sub_10009A3F8()
{
  unint64_t result;

  result = qword_1002ADF88;
  if (!qword_1002ADF88)
  {
    result = swift_getWitnessTable(&unk_100220760, &type metadata for SyncViewSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADF88);
  }
  return result;
}

unint64_t sub_10009A438()
{
  unint64_t result;

  result = qword_1002ADF90;
  if (!qword_1002ADF90)
  {
    result = swift_getWitnessTable(&unk_1002206D0, &type metadata for SyncViewSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADF90);
  }
  return result;
}

unint64_t sub_10009A478()
{
  unint64_t result;

  result = qword_1002ADF98;
  if (!qword_1002ADF98)
  {
    result = swift_getWitnessTable(&unk_1002206F8, &type metadata for SyncViewSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADF98);
  }
  return result;
}

uint64_t sub_10009A4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_10009A4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 112, v6 - 113, v4, a4, v5);
}

uint64_t sub_10009A4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  return dispatch thunk of static Equatable.== infix(_:_:)(va1, (uint64_t *)va, v6, a4);
}

uint64_t sub_10009A500()
{
  type metadata accessor for SyncView(0);
  return type metadata accessor for SyncViewLocalData(0);
}

uint64_t sub_10009A520(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __n128 a18)
{
  uint64_t v18;

  a18 = a1;
  return Hasher.combine(bytes:)(&a18, v18);
}

uint64_t sub_10009A530()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10009A53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, 0xD000000000000021, a5, a6, 28, 2, a9, a10);
}

uint64_t sub_10009A564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, a3);
}

uint64_t sub_10009A570()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 24));
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10009A58C()
{
  return type metadata accessor for UniversalControlDisplayLayout(0);
}

uint64_t sub_10009A594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10009A5A4()
{
  return 0;
}

uint64_t sub_10009A5BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10009A5D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10009A5DC()
{
  uint64_t v0;

  return swift_release(v0);
}

double sub_10009A5E8(uint64x2_t a1, int32x4_t a2, double a3, uint64x2_t a4)
{
  double result;

  *(_QWORD *)&result = vuzp1q_s32((int32x4_t)vshlq_u64(a1, a4), a2).u64[0];
  return result;
}

uint64_t sub_10009A5F4()
{
  return type metadata accessor for SHA256(0);
}

double sub_10009A5FC@<D0>(__int32 a1@<W8>, int16x8_t a2@<Q0>, int8x16_t a3@<Q1>, int32x2_t a4@<D2>, int64x2_t a5@<Q4>)
{
  double result;

  a4.i32[1] = a1;
  *(_QWORD *)&result = vuzp1q_s8(a3, (int8x16_t)vuzp1q_s16((int16x8_t)vmovn_hight_s64(a4, a5), a2)).u64[0];
  return result;
}

uint64_t sub_10009A610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController_logger;
  if (qword_1002A9888 != -1)
    swift_once(&qword_1002A9888, sub_10009A84C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0 + v1, v3, v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState) = 0;
  return v0;
}

uint64_t sub_10009A6A4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState);
}

uint64_t sub_10009A6B4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState;
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState) != result)
  {
    v3 = v1;
    v4 = result;
    v5 = type metadata accessor for _BaseSleepController(0);
    sub_10009AB8C();
    v6 = ObservableObject<>.objectWillChange.getter(v5);
    ObservableObjectPublisher.send()();
    swift_release(v6);
    *(_BYTE *)(v3 + v2) = v4;
    __asm { BR              X9 }
  }
  return result;
}

void sub_10009A744(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint8_t *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;

  v18 = sub_10009ABE4(a1);
  v20 = sub_10009ABDC(v18, v19);
  if (sub_10009ABCC(v20, v21, v22, v23, v24, v25, v26, v27, v29, v30))
  {
    v28 = (_WORD *)sub_100040274();
    sub_10009ABEC(v28);
    _os_log_impl((void *)&_mh_execute_header, v31, v17, "=== Unknown ===", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

}

uint64_t sub_10009A84C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6F00);
  sub_100006FB4(v0, (uint64_t)qword_1002B6F00);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x7065656C73, 0xE500000000000000);
}

uint64_t sub_10009A8BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009A8F0 + 4 * byte_1002207E4[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_10009A8F0()
{
  return 0x5379616C70736964;
}

uint64_t sub_10009A910()
{
  return 0x7065656C73;
}

uint64_t sub_10009A924()
{
  return 1701536119;
}

uint64_t sub_10009A934()
{
  unsigned __int8 *v0;

  return sub_10009A8BC(*v0);
}

uint64_t sub_10009A93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10009A98C()
{
  return type metadata accessor for _BaseSleepController(0);
}

uint64_t type metadata accessor for _BaseSleepController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002ADFD0;
  if (!qword_1002ADFD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for _BaseSleepController);
  return result;
}

uint64_t sub_10009A9CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100220838;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SleepState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10009AA8C + 4 * byte_1002207ED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10009AAC0 + 4 * byte_1002207E8[v4]))();
}

uint64_t sub_10009AAC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009AAC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009AAD0);
  return result;
}

uint64_t sub_10009AADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009AAE4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10009AAE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009AAF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepState()
{
  return &type metadata for SleepState;
}

unint64_t sub_10009AB10()
{
  unint64_t result;

  result = qword_1002AE090;
  if (!qword_1002AE090)
  {
    result = swift_getWitnessTable(&unk_1002208C4, &type metadata for SleepState);
    atomic_store(result, (unint64_t *)&qword_1002AE090);
  }
  return result;
}

uint64_t sub_10009AB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for _BaseSleepController(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

unint64_t sub_10009AB8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AE098;
  if (!qword_1002AE098)
  {
    v1 = type metadata accessor for _BaseSleepController(255);
    result = swift_getWitnessTable(&unk_1002208FC, v1);
    atomic_store(result, (unint64_t *)&qword_1002AE098);
  }
  return result;
}

BOOL sub_10009ABCC(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_10009ABDC(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.default.getter(a1, a2);
}

uint64_t sub_10009ABE4(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

_WORD *sub_10009ABEC(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10009ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_10009AC04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for EventCatcher()
{
  return objc_opt_self(_TtC13EnsembleAgent12EventCatcher);
}

uint64_t storeEnumTagSinglePayload for EventCatcher.Result(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10009AC94 + 4 * byte_10022093D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009ACC8 + 4 * byte_100220938[v4]))();
}

uint64_t sub_10009ACC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009ACD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009ACD8);
  return result;
}

uint64_t sub_10009ACE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009ACECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10009ACF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009ACF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventCatcher.Result()
{
  return &type metadata for EventCatcher.Result;
}

unint64_t sub_10009AD18()
{
  unint64_t result;

  result = qword_1002AE158;
  if (!qword_1002AE158)
  {
    result = swift_getWitnessTable(&unk_1002209AC, &type metadata for EventCatcher.Result);
    atomic_store(result, (unint64_t *)&qword_1002AE158);
  }
  return result;
}

double CGPoint.rounded(_:to:)(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  double v19;
  int v20;
  _DWORD *v21;
  char v22;
  char v23;
  double v24;
  double v25;
  double v26;
  int v27;
  uint64_t v29;
  double v30;

  sub_10009BE80();
  sub_10009BEC8();
  __chkstk_darwin(v11);
  sub_10002671C();
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - v13;
  v15 = a2 * a3;
  v30 = v15;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v29 = a1;
  sub_10009BDC8((uint64_t)&v29 - v13);
  v17 = sub_10009BE90((uint64_t)v14);
  v18 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  if (v17 == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v19 = round(v15);
  }
  else
  {
    sub_10009BEDC();
    if (v22)
    {
      v19 = rint(v15);
    }
    else if (v20 == *v21)
    {
      v19 = ceil(v15);
    }
    else if (v20 == enum case for FloatingPointRoundingRule.down(_:))
    {
      v19 = floor(v15);
    }
    else if (v20 == enum case for FloatingPointRoundingRule.towardZero(_:))
    {
      v19 = trunc(v15);
    }
    else
    {
      sub_10009BEBC();
      if (v22)
      {
        v23 = Double.sign.getter(v15);
        v24 = ceil(v15);
        v25 = floor(v15);
        if ((v23 & 1) != 0)
          v19 = v25;
        else
          v19 = v24;
      }
      else
      {
        sub_10009BEB0();
        sub_10009BE10((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
        v19 = v30;
      }
    }
  }
  v26 = a2 * a4;
  v30 = v26;
  v16(v5, v29, v4);
  if (sub_10009BE90(v5) != v18)
  {
    sub_10009BEDC();
    if (!v22
      && v27 != enum case for FloatingPointRoundingRule.up(_:)
      && v27 != enum case for FloatingPointRoundingRule.down(_:)
      && v27 != enum case for FloatingPointRoundingRule.towardZero(_:))
    {
      sub_10009BEBC();
      if (v22)
      {
        Double.sign.getter(v26);
      }
      else
      {
        sub_10009BEB0();
        sub_10009BE10(v5, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      }
    }
  }
  return v19 / a2;
}

uint64_t CGRect.offset(by:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_10009B10C((uint64_t (*)(double, double, double, double, double, double))&_CGRectOffset, a1, a2, a3, a4, a5, a6);
}

double static CGPoint.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 + a2;
  v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CGRect.description.getter()
{
  double MinX;
  double MinY;
  double v2;
  double v3;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  CGRect v9;
  CGRect v10;

  sub_10009BDA8();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9.origin.x = sub_10009BDD4();
  MinX = CGRectGetMinX(v9);
  v5._countAndFlagsBits = Double.description.getter(MinX);
  sub_10009BDBC(v5);
  sub_10000E410();
  sub_10009BE18();
  v10.origin.x = sub_10009BDD4();
  MinY = CGRectGetMinY(v10);
  v6._countAndFlagsBits = Double.description.getter(MinY);
  sub_10009BDBC(v6);
  sub_10000E410();
  sub_10009BE18();
  v2 = sub_10009BE28();
  v7._countAndFlagsBits = Double.description.getter(v2);
  sub_10009BDBC(v7);
  sub_10000E410();
  sub_10009BE18();
  v3 = sub_10009BDE8();
  v8._countAndFlagsBits = Double.description.getter(v3);
  sub_10009BDBC(v8);
  sub_10000E410();
  sub_10009BEA0();
  return 0x28746365524743;
}

double CGRect.init(_:)()
{
  return 0.0;
}

double CGSize.scale(limit:)(double a1, double a2, double a3)
{
  if (a2 >= a1 || a3 >= a1)
  {
    if (a3 >= a2)
      return a2 / (a3 / a1);
    else
      return a1;
  }
  return a2;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

{
  return a1 * a3;
}

double static CGRect.* infix(_:_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 * a5;
}

{
  return a1 * a5;
}

uint64_t CGRect.insetBy(_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return sub_10009B10C((uint64_t (*)(double, double, double, double, double, double))&_CGRectInset, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10009B10C(uint64_t (*a1)(double, double, double, double, double, double), double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a1(a4, a5, a6, a7, a2, a3);
}

double CGRect.rounded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  uint64_t v6;

  sub_10009BDA8();
  v0 = sub_10009BE80();
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v0);
  sub_10009BDD4();
  v4 = CGRect.rounded(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

double CGRect.rounded(_:)()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  double v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;

  sub_10009BDA8();
  v3 = sub_10009BE80();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002671C();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v24 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v29 = v2;
  sub_10009BDC8((uint64_t)&v24 - v12);
  v14 = sub_10009BE88((uint64_t)v13);
  v15 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  if (v14 == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v16 = round(v2);
    v29 = v16;
    goto LABEL_12;
  }
  if (v14 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v16 = rint(v2);
LABEL_11:
    v29 = v16;
    goto LABEL_12;
  }
  if (v14 == enum case for FloatingPointRoundingRule.up(_:))
  {
LABEL_6:
    v16 = ceil(v2);
    goto LABEL_11;
  }
  if (v14 == enum case for FloatingPointRoundingRule.down(_:))
  {
LABEL_8:
    v16 = floor(v2);
    goto LABEL_11;
  }
  if (v14 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    v16 = trunc(v2);
    goto LABEL_11;
  }
  if (v14 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    if ((*(_QWORD *)&v2 & 0x8000000000000000) == 0)
      goto LABEL_6;
    goto LABEL_8;
  }
  v25 = v4;
  sub_10009BE98();
  v4 = v25;
  sub_10009BE10((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  v16 = v29;
LABEL_12:
  v28 = v1;
  sub_10009BDC8((uint64_t)v11);
  v17 = sub_10009BE88((uint64_t)v11);
  if (v17 == v15)
  {
    v18 = round(v1);
LABEL_22:
    v28 = v18;
    goto LABEL_23;
  }
  if (v17 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v18 = rint(v1);
    goto LABEL_22;
  }
  if (v17 == enum case for FloatingPointRoundingRule.up(_:))
  {
LABEL_17:
    v18 = ceil(v1);
    goto LABEL_22;
  }
  if (v17 == enum case for FloatingPointRoundingRule.down(_:))
  {
LABEL_19:
    v18 = floor(v1);
    goto LABEL_22;
  }
  if (v17 == enum case for FloatingPointRoundingRule.towardZero(_:))
  {
    v18 = trunc(v1);
    goto LABEL_22;
  }
  if (v17 == enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    if ((*(_QWORD *)&v1 & 0x8000000000000000) == 0)
      goto LABEL_17;
    goto LABEL_19;
  }
  sub_10009BE98();
  sub_10009BE10((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
LABEL_23:
  v19 = sub_10009BE28();
  v27 = v19;
  sub_10009BDC8((uint64_t)v8);
  v20 = sub_10009BE88((uint64_t)v8);
  if (v20 == v15)
  {
    v21 = round(v19);
  }
  else if (v20 == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
  {
    v21 = rint(v19);
  }
  else
  {
    if (v20 == enum case for FloatingPointRoundingRule.up(_:))
      goto LABEL_28;
    if (v20 == enum case for FloatingPointRoundingRule.down(_:))
      goto LABEL_30;
    if (v20 == enum case for FloatingPointRoundingRule.towardZero(_:))
    {
      v21 = trunc(v19);
      goto LABEL_33;
    }
    if (v20 != enum case for FloatingPointRoundingRule.awayFromZero(_:))
    {
      sub_10009BE98();
      sub_10009BE10((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      goto LABEL_34;
    }
    if ((*(_QWORD *)&v19 & 0x8000000000000000) != 0)
LABEL_30:
      v21 = floor(v19);
    else
LABEL_28:
      v21 = ceil(v19);
  }
LABEL_33:
  v27 = v21;
LABEL_34:
  v26 = sub_10009BDE8();
  sub_10009BDC8(v0);
  v22 = sub_10009BE88(v0);
  if (v22 != v15
    && v22 != enum case for FloatingPointRoundingRule.toNearestOrEven(_:)
    && v22 != enum case for FloatingPointRoundingRule.up(_:)
    && v22 != enum case for FloatingPointRoundingRule.down(_:)
    && v22 != enum case for FloatingPointRoundingRule.towardZero(_:)
    && v22 != enum case for FloatingPointRoundingRule.awayFromZero(_:))
  {
    sub_10009BE98();
    sub_10009BE10(v0, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  return v16;
}

double CGRect.absRect.getter(double a1)
{
  return fabs(a1);
}

double CGRect.midPoint.getter()
{
  double MidX;
  CGRect v2;
  CGRect v3;

  sub_10009BDA8();
  MidX = CGRectGetMidX(v2);
  v3.origin.x = sub_10009BDD4();
  CGRectGetMidY(v3);
  return MidX;
}

double CGRect.area.getter()
{
  double Width;
  CGRect v2;

  sub_10009BDA8();
  Width = CGRectGetWidth(v2);
  return Width * sub_10009BDE8();
}

void CGRect.rectByCentering(_:)()
{
  CGRect v0;

  sub_10009BE64();
  CGRectGetMidX(v0);
  sub_10009BDFC();
  sub_10009BE3C();
}

double CGRect.rectByCentering(_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 - a5 * 0.5;
}

void CGRect.rectByCenteringAndScaling(_:)()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;

  sub_10009BE64();
  v4 = v2 / v3;
  if (v0 / v1 < v2 / v3)
    v4 = v0 / v1;
  if (v4 >= 1.0)
    sub_10009BE50();
  else
    sub_10009BE50();
  sub_10009BDFC();
  sub_10009BE3C();
}

uint64_t static CGRect.+ infix(_:_:)(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_10009B808 + 4 * byte_1002209D4[a2]))();
}

double sub_10009B808(uint64_t a1, double a2)
{
  return *(double *)&a1 + a2;
}

uint64_t static CGRect.- infix(_:_:)(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_10009B854 + 4 * byte_1002209D8[a2]))();
}

double sub_10009B854(uint64_t a1, double a2)
{
  return a2 - *(double *)&a1;
}

double static CGRect.+ infix(_:_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + a5;
}

double static CGRect.- infix(_:_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 - a5;
}

double Collection<>.union()(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _OWORD v6[2];
  _OWORD v7[2];
  char v8;

  Collection.first.getter(v7);
  if ((v8 & 1) != 0)
    return 0.0;
  v6[0] = v7[0];
  v6[1] = v7[1];
  type metadata accessor for CGRect(0);
  Sequence.reduce<A>(_:_:)(v7, v6, sub_10009B954, 0, a1, v5, *(_QWORD *)(a2 + 8));
  return *(double *)v7;
}

void sub_10009B954(CGRect *a1@<X0>, CGRect *a2@<X1>, CGRect *a3@<X8>)
{
  *a3 = CGRectUnion(*a1, *a2);
}

uint64_t sub_10009B994()
{
  return CGRect.description.getter();
}

double CGPoint.rounded()(double a1, double a2)
{
  return sub_10009BA50((double (*)(char *, double, double))CGPoint.rounded(_:), a1, a2);
}

double CGPoint.absPoint.getter(double a1)
{
  return fabs(a1);
}

double CGPoint.absDifference(_:)(double a1, double a2, double a3)
{
  return vabdd_f64(a3, a1);
}

double static CGPoint.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result;
  double v4;

  result = *a1 - a2;
  v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CGPoint.description.getter(double a1, double a2)
{
  Swift::String v3;
  Swift::String v5;
  Swift::String v6;

  v5._countAndFlagsBits = Double.description.getter(a1);
  sub_10009BDBC(v5);
  sub_10000E410();
  v3._countAndFlagsBits = 44;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v6._countAndFlagsBits = Double.description.getter(a2);
  sub_10009BDBC(v6);
  sub_10000E410();
  sub_10009BEA0();
  return 40;
}

uint64_t sub_10009BA48()
{
  double *v0;

  return CGPoint.description.getter(*v0, v0[1]);
}

double sub_10009BA50(double (*a1)(char *, double, double), double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v12;

  v6 = sub_10009BE80();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v6);
  v10 = a1(v9, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v10;
}

double _sSo7CGPointV13EnsembleAgentE7roundedyABs25FloatingPointRoundingRuleOF_0(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  double v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  char v20;
  int v21;
  double v23;
  double v24;

  sub_10009BE80();
  sub_10009BEC8();
  __chkstk_darwin(v9);
  sub_10002671C();
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - v11;
  v24 = a2;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  sub_10009BDC8((uint64_t)&v23 - v11);
  v14 = sub_10009BE90((uint64_t)v12);
  v15 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  if (v14 == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    v16 = round(a2);
  }
  else
  {
    sub_10009BEDC();
    if (v20)
    {
      v16 = rint(a2);
    }
    else
    {
      if (v17 == *v18)
        goto LABEL_7;
      if (v17 == enum case for FloatingPointRoundingRule.down(_:))
        goto LABEL_9;
      if (v17 == *v19)
      {
        v16 = trunc(a2);
        goto LABEL_12;
      }
      sub_10009BEBC();
      if (!v20)
      {
        Double._roundSlowPath(_:)(a1);
        sub_10009BE10((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        v16 = v24;
        goto LABEL_13;
      }
      if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
LABEL_9:
        v16 = floor(a2);
      else
LABEL_7:
        v16 = ceil(a2);
    }
  }
LABEL_12:
  v24 = v16;
LABEL_13:
  v23 = a3;
  v13(v4, a1, v3);
  if (sub_10009BE90(v4) != v15)
  {
    sub_10009BEDC();
    if (!v20
      && v21 != enum case for FloatingPointRoundingRule.up(_:)
      && v21 != enum case for FloatingPointRoundingRule.down(_:)
      && v21 != enum case for FloatingPointRoundingRule.towardZero(_:))
    {
      sub_10009BEBC();
      if (!v20)
      {
        Double._roundSlowPath(_:)(a1);
        sub_10009BE10(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      }
    }
  }
  return v16;
}

double static CGSize.max.getter()
{
  return 1.79769313e308;
}

double static CGSize.+ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

double static CGSize.- infix(_:_:)(double a1, double a2, double a3)
{
  return a1 - a3;
}

double static CGSize./ infix(_:_:)(double a1, double a2, double a3)
{
  return a1 / a3;
}

{
  return a1 / a3;
}

ValueMetadata *type metadata accessor for CGRect.Dimension()
{
  return &type metadata for CGRect.Dimension;
}

void sub_10009BDBC(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10009BDC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

double sub_10009BDD4()
{
  double v0;

  return v0;
}

double sub_10009BDE8()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetHeight(v5);
}

double sub_10009BDFC()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMidY(v5);
}

uint64_t sub_10009BE10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_10009BE18()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

double sub_10009BE28()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetWidth(v5);
}

double sub_10009BE50()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMidX(v5);
}

uint64_t sub_10009BE80()
{
  return type metadata accessor for FloatingPointRoundingRule(0);
}

uint64_t sub_10009BE88(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10009BE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10009BE98()
{
  uint64_t v0;

  return Double._roundSlowPath(_:)(v0);
}

void sub_10009BEA0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10009BEB0()
{
  uint64_t v0;

  return Double._roundSlowPath(_:)(*(_QWORD *)(v0 - 128));
}

uint64_t HIDUniversalSenderID.init(deviceID:serviceID:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  sub_10009C64C();
  sub_10009C6B0();
  UUID.init(uuid:)(v4, v9, v5, v6, v7, v8);
  result = type metadata accessor for HIDUniversalSenderID(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t HIDUniversalSenderID.device.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10000E440();
  __chkstk_darwin(v1);
  sub_10002641C();
  v4 = v3 - v2;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v3 - v2, v0);
  return UniversalControlDeviceID.init(uuid:)(v4);
}

void HIDUniversalSenderID.device.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10009C5F8(a1, a2);
  v3 = sub_10000E440();
  sub_10009C6E8();
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  sub_10009C688();
  sub_10009C6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v8, v7, v3);
  sub_10000E4E0();
}

void (*HIDUniversalSenderID.device.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  void (*result)(uint64_t **);
  char v14;
  char v15;
  char v16;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_10000E440();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  v3[3] = v6;
  sub_10009C724((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  v7 = UniversalControlDeviceID.init(uuid:)(v6);
  *((_BYTE *)v3 + 32) = v7;
  v3 += 4;
  *((_BYTE *)v3 + 1) = BYTE1(v7);
  *((_BYTE *)v3 + 2) = BYTE2(v7);
  *((_BYTE *)v3 + 3) = BYTE3(v7);
  *((_BYTE *)v3 + 4) = BYTE4(v7);
  *((_BYTE *)v3 + 5) = BYTE5(v7);
  *((_BYTE *)v3 + 6) = BYTE6(v7);
  *((_BYTE *)v3 + 7) = HIBYTE(v7);
  *((_BYTE *)v3 + 8) = v8;
  *((_BYTE *)v3 + 9) = v9;
  *((_BYTE *)v3 + 10) = v10;
  *((_BYTE *)v3 + 11) = v11;
  *((_BYTE *)v3 + 12) = v12;
  result = sub_10009C114;
  *((_BYTE *)v3 + 13) = v14;
  *((_BYTE *)v3 + 14) = v15;
  *((_BYTE *)v3 + 15) = v16;
  return result;
}

void sub_10009C114(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v3 = (*a1)[2];
  v2 = (void *)(*a1)[3];
  v4 = **a1;
  UUID.init(uuid:)(*((unsigned __int8 *)*a1 + 32), *((unsigned __int8 *)*a1 + 33), *((unsigned __int8 *)*a1 + 34), *((unsigned __int8 *)*a1 + 35), *((unsigned __int8 *)*a1 + 36), *((unsigned __int8 *)*a1 + 37));
  sub_10009C724(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
  free(v2);
  free(v1);
}

uint64_t HIDVirtualServicePool.init(queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002AE160);
  __chkstk_darwin(v5);
  sub_1000268CC();
  sub_10000B0EC();
  v6 = sub_10016B540(0xD000000000000038, 0x8000000100255430, 47, 0);
  Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1145653334, 0xE400000000000000);
  v7 = type metadata accessor for Logger(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v2, 0, 1, v7);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return HIDVirtualServicePool.init(logger:queue:workloop:)(v2, a1, v6);
}

void HIDVirtualServicePool.updateInputDevices(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::UInt64 v21;
  Swift::OpaquePointer v22;
  uint64_t v23;
  HIDUtils::HIDServiceProperties v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = sub_10000E440();
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_10002641C();
  v42 = v3 - v2;
  type metadata accessor for UniversalControlDevice.DeviceType(0);
  sub_10009C6E8();
  v5 = __chkstk_darwin(v4);
  v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v5);
  v10 = &v39[-v9];
  v11 = dispatch thunk of UniversalControlDevice.deviceType.getter(v8);
  sub_10009C700(v11, enum case for UniversalControlDevice.DeviceType.iPad(_:));
  v12 = sub_10009C70C();
  sub_10009C6F8((uint64_t)v7);
  v13 = sub_10009C6F8((uint64_t)v10);
  if ((v12 & 1) != 0)
  {
    v40 = 1;
  }
  else
  {
    v14 = dispatch thunk of UniversalControlDevice.deviceType.getter(v13);
    sub_10009C700(v14, enum case for UniversalControlDevice.DeviceType.realityDevice(_:));
    v40 = sub_10009C70C();
    sub_10009C6F8((uint64_t)v7);
    v13 = sub_10009C6F8((uint64_t)v10);
  }
  v41 = a1;
  v15 = dispatch thunk of UniversalControlDevice.inputDevices.getter(v13);
  v16 = v15;
  if (!((unint64_t)v15 >> 62))
  {
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    if (v17)
      goto LABEL_6;
LABEL_24:
    v19 = _swiftEmptyArrayStorage;
LABEL_25:
    v29 = swift_bridgeObjectRelease_n(v16, 2);
    dispatch thunk of UniversalControlDevice.id.getter(v29);
    sub_10009C64C();
    sub_10009C6B0();
    v30 = v42;
    UUID.init(uuid:)(v31, v38, v32, v33, v34, v35, v36, v37);
    HIDVirtualServicePool.updateInputDevices(inputDevices:for:useRemoteAcceleration:)();
    swift_bridgeObjectRelease(v19);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v44);
    sub_10000E4E0();
    return;
  }
  if (v15 < 0)
    v28 = v15;
  else
    v28 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v17 = _CocoaArrayWrapper.endIndex.getter(v28);
  if (!v17)
    goto LABEL_24;
LABEL_6:
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = _swiftEmptyArrayStorage;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
      else
        v20 = swift_retain(*(_QWORD *)(v16 + 8 * v18 + 32));
      v21 = UniversalControlInputDevice.serviceID.getter(v20);
      v22._rawValue = (void *)UniversalControlInputDevice.servicePropertyDictionary.getter();
      v24 = HIDServiceProperties.init(serviceID:properties:)(v21, v22);
      if (v23)
      {
        swift_errorRelease(v23);
        swift_release();
      }
      else
      {
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_10009C718();
          v19 = v26;
        }
        v25 = v19[2];
        if (v25 >= v19[3] >> 1)
        {
          sub_10009C718();
          v19 = v27;
        }
        v19[2] = v25 + 1;
        *(HIDUtils::HIDServiceProperties *)&v19[2 * v25 + 4] = v24;
      }
      ++v18;
    }
    while (v17 != v18);
    goto LABEL_25;
  }
  __break(1u);
}

void HIDVirtualServicePool.removeInputDevices(for:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10009C5F8(a1, a2);
  v4 = sub_10000E440();
  sub_10009C6E8();
  __chkstk_darwin(v5);
  sub_1000268CC();
  sub_10009C688();
  sub_10009C6D0();
  HIDVirtualServicePool.removeInputDevices(for:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10000E4E0();
}

unint64_t sub_10009C5F8(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 96) = result >> 8;
  *(_QWORD *)(v3 - 88) = v2;
  *(_QWORD *)(v3 - 112) = result >> 24;
  *(_QWORD *)(v3 - 104) = result >> 16;
  *(_QWORD *)(v3 - 128) = result >> 40;
  *(_QWORD *)(v3 - 120) = HIDWORD(result);
  *(_QWORD *)(v3 - 144) = HIBYTE(result);
  *(_QWORD *)(v3 - 136) = HIWORD(result);
  *(_QWORD *)(v3 - 160) = a2 >> 16;
  *(_QWORD *)(v3 - 152) = a2 >> 8;
  return result;
}

uint64_t sub_10009C6D0()
{
  uint64_t v0;
  uint64_t v1;

  return UUID.init(uuid:)(v0, *(_QWORD *)(v1 - 96), *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 120), *(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 136), *(_QWORD *)(v1 - 144));
}

uint64_t sub_10009C6F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10009C700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t sub_10009C70C()
{
  uint64_t v0;
  uint64_t v1;

  return static UniversalControlDevice.DeviceType.== infix(_:_:)(v1, v0);
}

void sub_10009C718()
{
  sub_100077944();
}

uint64_t sub_10009C724@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

const void *ECXPCData.bytes.getter(void *a1)
{
  const void *result;
  const void *v3;

  result = xpc_data_get_bytes_ptr(a1);
  if (result)
  {
    v3 = result;
    xpc_data_get_length(a1);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *ECXPCData.init(xpcobject:)(void *a1)
{
  void *v1;
  xpc_type_t v2;

  v1 = a1;
  swift_getObjectType(a1);
  v2 = OS_xpc_object.type.getter();
  if (v2 != (xpc_type_t)XPC_TYPE_DATA.getter() || !xpc_data_get_bytes_ptr(v1))
  {
    swift_unknownObjectRelease(v1);
    return 0;
  }
  return v1;
}

void *sub_10009C7BC@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = ECXPCData.init(xpcobject:)(a1);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for ECXPCData()
{
  return &type metadata for ECXPCData;
}

uint64_t sub_10009C7F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10009C848 + 4 * byte_100220A70[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

double sub_10009CEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
LABEL_2:
      v4 = type metadata accessor for UUID(0);
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v6 = v2;
      goto LABEL_15;
    case 2u:
      v7 = type metadata accessor for PasteboardDataSession.ID(0);
      if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v2, 1, v7))
      {
        v8 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v2, v8);
      }
      v2 += *(int *)(sub_1000055B0(&qword_1002AE168) + 64);
      v9 = type metadata accessor for PasteboardAcquisitionError(0);
      switch(swift_getEnumCaseMultiPayload(v2, v9))
      {
        case 0u:
        case 1u:
        case 2u:
          goto LABEL_2;
        case 3u:
        case 4u:
          goto LABEL_17;
        default:
          return result;
      }
      return result;
    case 3u:
      v10 = type metadata accessor for UUID(0);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v22(v2, v10);
      v11 = sub_1000055B0(&qword_1002AE170);
      v22(v2 + *(int *)(v11 + 48), v10);
      v12 = *(int *)(v11 + 64);
      goto LABEL_11;
    case 4u:
      v10 = type metadata accessor for UUID(0);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v22(v2, v10);
      v13 = &qword_1002AE178;
      goto LABEL_10;
    case 5u:
      v14 = type metadata accessor for UUID(0);
      v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v15(v2, v14);
      v16 = sub_1000055B0(&qword_1002AE180);
      v15(v2 + *(int *)(v16 + 48), v14);
      sub_100022AEC(*(_QWORD *)(v2 + *(int *)(v16 + 64)), *(_QWORD *)(v2 + *(int *)(v16 + 64) + 8));
      return result;
    case 6u:
      v10 = type metadata accessor for UUID(0);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v22(v2, v10);
      v13 = &qword_1002AE188;
LABEL_10:
      v12 = *(int *)(sub_1000055B0(v13) + 48);
LABEL_11:
      v6 = v2 + v12;
LABEL_14:
      v4 = v10;
      v5 = v22;
LABEL_15:
      v5(v6, v4);
      break;
    case 7u:
      v10 = type metadata accessor for UUID(0);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v22(v2, v10);
      v17 = sub_1000055B0(&qword_1002AE190);
      v22(v2 + *(int *)(v17 + 48), v10);
      v18 = v2 + *(int *)(v17 + 64);
      v19 = type metadata accessor for PasteboardAcquisitionError(0);
      switch(swift_getEnumCaseMultiPayload(v18, v19))
      {
        case 0u:
        case 1u:
        case 2u:
          goto LABEL_13;
        case 3u:
        case 4u:
          goto LABEL_17;
        default:
          return result;
      }
    case 8u:
      v10 = type metadata accessor for UUID(0);
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v22(v2, v10);
      v20 = sub_1000055B0(&qword_1002AE190);
      v22(v2 + *(int *)(v20 + 48), v10);
      v18 = v2 + *(int *)(v20 + 64);
      v21 = type metadata accessor for PasteboardAcquisitionError(0);
      switch(swift_getEnumCaseMultiPayload(v18, v21))
      {
        case 0u:
        case 1u:
        case 2u:
LABEL_13:
          v6 = v18;
          goto LABEL_14;
        case 3u:
        case 4u:
LABEL_17:
          *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
          break;
        default:
          return result;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_10009D264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10009D2B4 + 4 * byte_100220AA0[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_10009D2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v0, v3, v4);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_10009D7B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000A23A4(result, type metadata accessor for PasteboardMessage);
    v5 = (char *)&loc_10009D820 + 4 * byte_100220AB8[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for PasteboardMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_1002AE208;
  if (!qword_1002AE208)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PasteboardMessage);
  return result;
}

void sub_10009DD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10009DDCC + 4 * byte_100220AD0[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_10009DDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v0, v3, v4);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_10009E250(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000A23A4(result, type metadata accessor for PasteboardMessage);
    v5 = (char *)&loc_10009E2B8 + 4 * byte_100220AD9[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_10009E73C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  _QWORD v20[4];
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[32];
  _QWORD v24[9];

  v2 = type metadata accessor for PasteboardDataSession.ID(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v24[0] = v5;
    v24[1] = v5;
    sub_10009E908(319);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v8 = type metadata accessor for PasteboardAcquisitionError(319);
      if (v9 > 0x3F)
        return v8;
      v10 = *(_QWORD *)(v8 - 8) + 64;
      swift_getTupleTypeLayout3(v23, (char *)&value witness table for () + 64, *(_QWORD *)(v3 - 8) + 64, v10);
      v24[2] = v23;
      v3 = type metadata accessor for PasteboardRepresentation.ID(319);
      if (v11 <= 0x3F)
      {
        v8 = type metadata accessor for UUID(319);
        if (v12 <= 0x3F)
        {
          v13 = *(_QWORD *)(v3 - 8) + 64;
          v14 = *(_QWORD *)(v8 - 8) + 64;
          swift_getTupleTypeLayout3(v22, v5, v13, v14);
          v24[3] = v22;
          v20[0] = v5;
          v20[1] = v14;
          v20[2] = &unk_100220B68;
          v20[3] = &unk_100220B80;
          swift_getTupleTypeLayout(v21, 0, 4, v20);
          v24[4] = v21;
          swift_getTupleTypeLayout3(v19, v5, v14, &unk_100220B98);
          v24[5] = v19;
          swift_getTupleTypeLayout2(v18, v5, v14);
          v24[6] = v18;
          swift_getTupleTypeLayout3(v17, v5, v14, v10);
          v24[7] = v17;
          swift_getTupleTypeLayout3(v16, v5, v14, v10);
          v24[8] = v16;
          swift_initEnumMetadataMultiPayload(a1, 256, 9, v24);
          return 0;
        }
        return v8;
      }
    }
  }
  return v3;
}

void sub_10009E908(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002AE218)
  {
    v2 = type metadata accessor for PasteboardDataSession.ID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002AE218);
  }
}

ValueMetadata *type metadata accessor for PasteboardRepresentationFormat()
{
  return &type metadata for PasteboardRepresentationFormat;
}

uint64_t sub_10009E974(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65766968637261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65766968637261, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10009EA50(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65766968637261;
  else
    return 1635017060;
}

void sub_10009EA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_10003AFC4();
  a23 = v25;
  a24 = v26;
  a10 = v27;
  v29 = v28;
  v30 = sub_1000055B0(&qword_1002AE3E0);
  v45 = *(_QWORD *)(v30 - 8);
  v46 = v30;
  sub_1000262EC();
  __chkstk_darwin(v31);
  sub_10002641C();
  v34 = v33 - v32;
  v44 = sub_1000055B0(&qword_1002AE3E8);
  v35 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_1000A3710();
  v36 = sub_1000055B0(&qword_1002AE3F0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_10002641C();
  v40 = v39 - v38;
  v41 = v29[3];
  v42 = v29[4];
  sub_10000DBE4(v29, v41);
  v43 = sub_1000A2518();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PasteboardRepresentationFormat.CodingKeys, &type metadata for PasteboardRepresentationFormat.CodingKeys, v43, v41, v42);
  if ((a10 & 1) != 0)
  {
    sub_1000A37B8();
    sub_1000A3758((uint64_t)&type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys, (uint64_t)&a14);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v46);
  }
  else
  {
    a13 = 0;
    sub_1000A2590();
    sub_1000A3758((uint64_t)&type metadata for PasteboardRepresentationFormat.DataCodingKeys, (uint64_t)&a13);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v24, v44);
  }
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
  sub_10003AF60();
}

uint64_t sub_10009EBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  sub_10003AFC4();
  v40 = v2;
  v41 = v3;
  v5 = v4;
  v6 = sub_1000055B0(&qword_1002AE3B0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10000E5DC();
  v35 = v8;
  v34 = sub_1000055B0(&qword_1002AE3B8);
  v9 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_1000268CC();
  v10 = sub_1000055B0(&qword_1002AE3C0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10002641C();
  v14 = v13 - v12;
  v15 = v5[3];
  v16 = v5[4];
  sub_10000DBE4(v5, v15);
  v17 = sub_1000A2518();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardRepresentationFormat.CodingKeys, &type metadata for PasteboardRepresentationFormat.CodingKeys, v17, v15, v16);
  if (v0)
    return sub_100005988(v5);
  v33 = v11;
  v18 = KeyedDecodingContainer.allKeys.getter(v10);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19
    || (v20 = *(unsigned __int8 *)(v18 + 32),
        sub_1000EDBD0(1, v19, v18, v18 + 32, 0, (2 * v19) | 1),
        v22 = v21,
        v24 = v23,
        swift_bridgeObjectRelease(),
        v22 != v24 >> 1))
  {
    v26 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v26, (uint64_t)&protocol witness table for DecodingError);
    v28 = v27;
    sub_1000055B0(&qword_1002ABBD0);
    *v28 = &type metadata for PasteboardRepresentationFormat;
    v29 = KeyedDecodingContainer.codingPath.getter(v10);
    sub_1000A36F0(v29, v30, 0x8000000100253AD0);
    v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
    swift_willThrow(v31);
    sub_1000A37CC();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v14, v10);
    return sub_100005988(v5);
  }
  if ((v20 & 1) != 0)
  {
    sub_1000A37B8();
    sub_1000A3600((uint64_t)&type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys, (uint64_t)&v39);
    v25 = v33;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  }
  else
  {
    v38 = 0;
    sub_1000A2590();
    sub_1000A3600((uint64_t)&type metadata for PasteboardRepresentationFormat.DataCodingKeys, (uint64_t)&v38);
    v25 = v33;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v34);
  }
  sub_1000A37CC();
  (*(void (**)(uint64_t, unint64_t))(v25 + 8))(v14, v24);
  sub_100005988(v5);
  return v20;
}

uint64_t sub_10009EEEC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x8000000100255470;
    if (a2 == 0x8000000100255470)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100255470, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100255490)
  {
    v6 = 0x8000000100255490;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100255490, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v7 = 0x80000001002554B0;
    if (a2 == 0x80000001002554B0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001002554B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000001002554D0)
  {
    v8 = 0x80000001002554D0;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x80000001002554D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000001002554F0)
  {
    v9 = 0x80000001002554F0;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000001002554F0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100255510)
  {
    v10 = 0x8000000100255510;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100255510, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD000000000000020 && a2 == 0x8000000100255530)
  {
    v11 = 0x8000000100255530;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100255530, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000017)
  {
    v12 = 0x8000000100255560;
    if (a2 == 0x8000000100255560)
      goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100255560, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100255580)
  {
    swift_bridgeObjectRelease(0x8000000100255580);
    return 8;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100255580, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t static ReportID.digitizer.getter()
{
  return 9;
}

uint64_t sub_10009F238(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10009F274 + 4 * byte_100220AE2[a1]))(0xD00000000000001ALL, 0x8000000100255470);
}

uint64_t sub_10009F274()
{
  uint64_t v0;

  return v0 + 1;
}

unint64_t sub_10009F2DC()
{
  return 0xD000000000000017;
}

uint64_t sub_10009F304(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    sub_1000A37A4();
    v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10009F368(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  char v12;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 12895 && a2 == 0xE200000000000000)
  {
    v10 = 0xE200000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12895, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 13151 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 3;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(13151, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void _s13EnsembleAgent14PasteboardItemC10CodingKeysO9hashValueSivg_0(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_10000E5C0(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_10009F4E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_1000A3548(12383) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 12639 && a2 == 0xE200000000000000;
    if (v6 || (sub_1000A3548(12639) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 12895 && a2 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      sub_1000A3548(12895);
      sub_1000A37A4();
      if ((a1 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

void sub_10009F5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85[34];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  _QWORD v94[6];
  uint64_t v95;
  uint64_t v96;

  sub_10003AFC4();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v92 = sub_1000055B0(&qword_1002AE330);
  sub_1000A3438(*(_QWORD *)(v92 - 8));
  __chkstk_darwin(v24);
  sub_1000A367C(v25, v85[0]);
  v91 = sub_1000055B0(&qword_1002AE338);
  sub_1000A3438(*(_QWORD *)(v91 - 8));
  __chkstk_darwin(v26);
  sub_1000A3698(v27, v85[0]);
  v86 = sub_1000055B0(&qword_1002AE340);
  sub_1000A3438(*(_QWORD *)(v86 - 8));
  __chkstk_darwin(v28);
  sub_10000E5DC();
  sub_1000A3740(v29);
  v90 = sub_1000055B0(&qword_1002AE348);
  sub_1000A3438(*(_QWORD *)(v90 - 8));
  __chkstk_darwin(v30);
  sub_10000E5DC();
  v88 = v31;
  v89 = sub_1000055B0(&qword_1002AE350);
  sub_1000A3438(*(_QWORD *)(v89 - 8));
  __chkstk_darwin(v32);
  sub_10000E5DC();
  v87 = v33;
  v34 = sub_1000055B0(&qword_1002AE358);
  sub_1000A353C(v34, (uint64_t)&a15);
  sub_1000A3438(v35);
  __chkstk_darwin(v36);
  sub_10000E5DC();
  v85[29] = v37;
  v94[0] = sub_1000262F8();
  sub_1000262EC();
  __chkstk_darwin(v38);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v39);
  sub_100084E68();
  __chkstk_darwin(v40);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v41);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v42);
  sub_1000A34C8();
  v93[0] = v43;
  sub_1000A3464();
  __chkstk_darwin(v44);
  v85[26] = (uint64_t)v85 - v45;
  v85[1] = type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v46);
  sub_10000E5DC();
  sub_1000A3740(v47);
  v48 = sub_1000055B0(&qword_1002AE360);
  sub_1000A353C(v48, (uint64_t)&v96);
  sub_1000A3438(v49);
  __chkstk_darwin(v50);
  sub_10000E5DC();
  v85[21] = v51;
  v85[2] = sub_100026760();
  sub_1000262EC();
  __chkstk_darwin(v52);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v53);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v54);
  sub_1000A3740((uint64_t)v85 - v55);
  sub_1000055B0(&qword_1002AA6D8);
  sub_1000262EC();
  __chkstk_darwin(v56);
  sub_10000E5DC();
  sub_1000A3740(v57);
  v58 = sub_1000055B0(&qword_1002AE368);
  sub_1000A353C(v58, (uint64_t)v94);
  sub_1000A3438(v59);
  __chkstk_darwin(v60);
  sub_10000E5DC();
  sub_1000A3740(v61);
  v62 = sub_1000055B0(&qword_1002AE370);
  sub_1000A353C(v62, (uint64_t)v93);
  sub_1000A3438(v63);
  __chkstk_darwin(v64);
  sub_1000268CC();
  v94[1] = sub_1000262CC();
  sub_1000262EC();
  __chkstk_darwin(v65);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v66);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v67);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v68);
  sub_1000A34C8();
  v93[1] = v69;
  sub_1000A3464();
  __chkstk_darwin(v70);
  sub_1000A34C8();
  v93[2] = v71;
  sub_1000A3464();
  __chkstk_darwin(v72);
  sub_1000A34C8();
  sub_100084E68();
  v74 = __chkstk_darwin(v73);
  __chkstk_darwin(v74);
  v75 = type metadata accessor for PasteboardMessage(0);
  sub_1000262EC();
  __chkstk_darwin(v76);
  sub_10002641C();
  v79 = v78 - v77;
  v95 = sub_1000055B0(&qword_1002AE378);
  v94[2] = *(_QWORD *)(v95 - 8);
  sub_1000262EC();
  __chkstk_darwin(v80);
  sub_1000A3710();
  v82 = v23[3];
  v81 = v23[4];
  sub_10000DBE4(v23, v82);
  v83 = sub_1000A2014();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PasteboardMessage.CodingKeys, &type metadata for PasteboardMessage.CodingKeys, v83, v82, v81);
  sub_1000A2360(v94[5], v79);
  v84 = (char *)sub_10009FAA0 + 4 * word_100220AEC[swift_getEnumCaseMultiPayload(v79, v75)];
  __asm { BR              X10 }
}

void sub_10009FAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_1000A2454(v2, v0, type metadata accessor for PasteboardDataSession.ID);
  *(_BYTE *)(v3 - 104) = 0;
  sub_1000A2324();
  v4 = *(_QWORD *)(v3 - 112);
  v5 = *(_QWORD *)(v3 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys, v3 - 104, v4, &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys);
  sub_10000E330(&qword_1002AE380, type metadata accessor for PasteboardDataSession.ID, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
  v6 = *(_QWORD *)(v3 - 440);
  sub_1000A357C(v0, v8, v6, *(_QWORD *)(v3 - 152), v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 448) + 8))(v1, v6);
  sub_1000A23A4(v0, type metadata accessor for PasteboardDataSession.ID);
  sub_1000A37DC();
  v9(v5, v4);
  sub_10003AF60();
}

void sub_1000A0658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[24];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;

  sub_10003AFC4();
  a19 = v21;
  a20 = v22;
  v121 = v20;
  v24 = v23;
  v113 = v25;
  v105 = sub_1000055B0(&qword_1002AE260);
  sub_1000A3438(*(_QWORD *)(v105 - 8));
  __chkstk_darwin(v26);
  sub_10000E5DC();
  v112 = v27;
  v104 = sub_1000055B0(&qword_1002AE268);
  sub_1000A3438(*(_QWORD *)(v104 - 8));
  __chkstk_darwin(v28);
  sub_10000E5DC();
  v116 = v29;
  v30 = sub_1000055B0(&qword_1002AE270);
  sub_1000A353C(v30, (uint64_t)&a15);
  v114 = v31;
  sub_1000262EC();
  __chkstk_darwin(v32);
  sub_10000E5DC();
  v109 = v33;
  v103 = sub_1000055B0(&qword_1002AE278);
  sub_1000A3438(*(_QWORD *)(v103 - 8));
  __chkstk_darwin(v34);
  sub_10000E5DC();
  v110 = v35;
  v36 = sub_1000055B0(&qword_1002AE280);
  sub_1000A353C(v36, (uint64_t)&a16);
  sub_1000A3438(v37);
  __chkstk_darwin(v38);
  sub_10000E5DC();
  v111 = v39;
  v40 = sub_1000055B0(&qword_1002AE288);
  sub_1000A353C(v40, (uint64_t)&a18);
  sub_1000A3438(v41);
  __chkstk_darwin(v42);
  sub_1000A367C(v43, v102[0]);
  v44 = sub_1000055B0(&qword_1002AE290);
  sub_1000A353C(v44, (uint64_t)&a14);
  sub_1000A3438(v45);
  __chkstk_darwin(v46);
  sub_10000E5DC();
  v108 = v47;
  v48 = sub_1000055B0(&qword_1002AE298);
  sub_1000A353C(v48, (uint64_t)&a10);
  sub_1000A3438(v49);
  __chkstk_darwin(v50);
  sub_1000A3698(v51, v102[0]);
  v52 = sub_1000055B0(&qword_1002AE2A0);
  sub_1000A353C(v52, (uint64_t)&a9);
  sub_1000A3438(v53);
  __chkstk_darwin(v54);
  sub_10000E5DC();
  v107 = v55;
  v56 = sub_1000055B0(&qword_1002AE2A8);
  v118 = *(_QWORD *)(v56 - 8);
  v119 = v56;
  sub_1000262EC();
  __chkstk_darwin(v57);
  sub_10002641C();
  v60 = v59 - v58;
  v117 = type metadata accessor for PasteboardMessage(0);
  sub_1000262EC();
  __chkstk_darwin(v61);
  sub_10003D69C();
  sub_100084E68();
  __chkstk_darwin(v62);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v63);
  sub_1000A34C8();
  v106 = v64;
  sub_1000A3464();
  __chkstk_darwin(v65);
  sub_1000A34C8();
  sub_100084E68();
  __chkstk_darwin(v66);
  sub_100084E68();
  v68 = __chkstk_darwin(v67);
  v70 = (char *)v102 - v69;
  v71 = __chkstk_darwin(v68);
  v73 = (char *)v102 - v72;
  v74 = __chkstk_darwin(v71);
  v76 = (char *)v102 - v75;
  v77 = __chkstk_darwin(v74);
  v79 = (char *)v102 - v78;
  __chkstk_darwin(v77);
  v81 = (char *)v102 - v80;
  v83 = v24[3];
  v82 = v24[4];
  v120 = v24;
  sub_10000DBE4(v24, v83);
  v84 = sub_1000A2014();
  v115 = v60;
  v85 = v121;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardMessage.CodingKeys, &type metadata for PasteboardMessage.CodingKeys, v84, v83, v82);
  if (!v85)
  {
    v102[3] = (uint64_t)v76;
    v102[5] = (uint64_t)v79;
    v102[2] = (uint64_t)v73;
    v102[4] = (uint64_t)v70;
    v86 = v115;
    v121 = v81;
    v87 = KeyedDecodingContainer.allKeys.getter(v119);
    v88 = *(_QWORD *)(v87 + 16);
    if (v88)
    {
      v102[1] = 0;
      v89 = *(unsigned __int8 *)(v87 + 32);
      sub_1000EDBD0(1, v88, v87, v87 + 32, 0, (2 * v88) | 1);
      v91 = v90;
      v93 = v92;
      swift_bridgeObjectRelease();
      if (v91 == v93 >> 1)
        __asm { BR              X9 }
    }
    v94 = v86;
    v95 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v95, (uint64_t)&protocol witness table for DecodingError);
    v97 = v96;
    sub_1000055B0(&qword_1002ABBD0);
    *v97 = v117;
    v98 = v119;
    v99 = KeyedDecodingContainer.codingPath.getter(v119);
    sub_1000A36F0(v99, v100, 0x8000000100253AD0);
    v101 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v97, enum case for DecodingError.typeMismatch(_:), v95);
    swift_willThrow(v101);
    sub_1000A34D4();
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v94, v98);
  }
  sub_100005988(v120);
  sub_10003AF60();
}

uint64_t sub_1000A19A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2554();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A19CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2554();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A19F8()
{
  char *v0;

  return sub_10009EA50(*v0);
}

uint64_t sub_1000A1A00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009E974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A1A24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2518();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1A4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2518();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2590();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1A9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2590();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1AC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_10009EBF0();
  if (!v1)
    *a1 = result & 1;
  return result;
}

#error "1000A1AFC: call analysis failed (funcsize=6)"

unint64_t sub_1000A1B0C()
{
  unint64_t result;

  result = qword_1002AE248;
  if (!qword_1002AE248)
  {
    result = swift_getWitnessTable(&unk_100220C60, &type metadata for PasteboardRepresentationFormat);
    atomic_store(result, (unint64_t *)&qword_1002AE248);
  }
  return result;
}

uint64_t sub_1000A1B48()
{
  unsigned __int8 *v0;

  return sub_10009F238(*v0);
}

uint64_t sub_1000A1B50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009EEEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A1B74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.digitizer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A1B98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2014();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1BC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2014();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1BEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2324();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1C14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2324();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000A1C3C(uint64_t a1, uint64_t a2)
{
  sub_1000A3780(a1, a2);
  sub_100047454();
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_1000A1C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009F304(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000A1C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A22E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A22E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1CD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2230();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1D00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2230();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009F4E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A1D4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2050();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2050();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1D9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A208C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1DC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A208C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1DEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009F368(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A1E10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A217C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1E38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A217C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1E60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2104();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1E88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A2104();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000A1EB0()
{
  unsigned __int8 *v0;

  _s13EnsembleAgent14PasteboardItemC10CodingKeysO9hashValueSivg_0(*v0);
}

void sub_1000A1EC8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;

  v2 = sub_1000A3780(a1, a2);
  sub_100013C38(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_1000A1EF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A20C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1F18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A20C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1F40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A21F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A1F68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A21F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1000A1F98: call analysis failed (funcsize=5)"

#error "1000A1FAC: call analysis failed (funcsize=5)"

void sub_1000A1FB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_10000E330(&qword_1002AE250, type metadata accessor for PasteboardMessage, (uint64_t)&unk_100220CB0);
  *(_QWORD *)(a1 + 8) = v2;
  sub_10000E330(&qword_1002AE258, type metadata accessor for PasteboardMessage, (uint64_t)&unk_100220C88);
  *(_QWORD *)(a1 + 16) = v3;
}

unint64_t sub_1000A2014()
{
  unint64_t result;

  result = qword_1002AE2B0;
  if (!qword_1002AE2B0)
  {
    result = swift_getWitnessTable(&unk_100221B1C, &type metadata for PasteboardMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2B0);
  }
  return result;
}

unint64_t sub_1000A2050()
{
  unint64_t result;

  result = qword_1002AE2B8;
  if (!qword_1002AE2B8)
  {
    result = swift_getWitnessTable(&unk_100221ACC, &type metadata for PasteboardMessage.PasteboardProviderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2B8);
  }
  return result;
}

unint64_t sub_1000A208C()
{
  unint64_t result;

  result = qword_1002AE2D8;
  if (!qword_1002AE2D8)
  {
    result = swift_getWitnessTable(&unk_100221A7C, &type metadata for PasteboardMessage.PasteboardReceiverErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2D8);
  }
  return result;
}

unint64_t sub_1000A20C8()
{
  unint64_t result;

  result = qword_1002AE2E0;
  if (!qword_1002AE2E0)
  {
    result = swift_getWitnessTable(&unk_100221A2C, &type metadata for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2E0);
  }
  return result;
}

unint64_t sub_1000A2104()
{
  unint64_t result;

  result = qword_1002AE2E8;
  if (!qword_1002AE2E8)
  {
    result = swift_getWitnessTable(&unk_1002219DC, &type metadata for PasteboardMessage.PasteboardRepresentationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2E8);
  }
  return result;
}

unint64_t sub_1000A2140()
{
  unint64_t result;

  result = qword_1002B28B0;
  if (!qword_1002B28B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B28B0);
  }
  return result;
}

unint64_t sub_1000A217C()
{
  unint64_t result;

  result = qword_1002AE2F0;
  if (!qword_1002AE2F0)
  {
    result = swift_getWitnessTable(&unk_10022198C, &type metadata for PasteboardMessage.PasteboardRepresentationBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE2F0);
  }
  return result;
}

unint64_t sub_1000A21B8()
{
  unint64_t result;

  result = qword_1002AE2F8;
  if (!qword_1002AE2F8)
  {
    result = swift_getWitnessTable(&unk_100220BF8, &type metadata for PasteboardRepresentationFormat);
    atomic_store(result, (unint64_t *)&qword_1002AE2F8);
  }
  return result;
}

unint64_t sub_1000A21F4()
{
  unint64_t result;

  result = qword_1002AE300;
  if (!qword_1002AE300)
  {
    result = swift_getWitnessTable(&unk_10022193C, &type metadata for PasteboardMessage.PasteboardRepresentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE300);
  }
  return result;
}

unint64_t sub_1000A2230()
{
  unint64_t result;

  result = qword_1002AE310;
  if (!qword_1002AE310)
  {
    result = swift_getWitnessTable(&unk_1002218EC, &type metadata for PasteboardMessage.PasteboardDataSessionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE310);
  }
  return result;
}

unint64_t sub_1000A226C()
{
  unint64_t result;

  result = qword_1002AE318;
  if (!qword_1002AE318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardType, &type metadata for PasteboardType);
    atomic_store(result, (unint64_t *)&qword_1002AE318);
  }
  return result;
}

uint64_t sub_1000A22A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002AA6D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A22E8()
{
  unint64_t result;

  result = qword_1002AE320;
  if (!qword_1002AE320)
  {
    result = swift_getWitnessTable(&unk_10022189C, &type metadata for PasteboardMessage.PasteboardDataSessionEndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE320);
  }
  return result;
}

unint64_t sub_1000A2324()
{
  unint64_t result;

  result = qword_1002AE328;
  if (!qword_1002AE328)
  {
    result = swift_getWitnessTable(&unk_10022184C, &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE328);
  }
  return result;
}

uint64_t sub_1000A2360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PasteboardMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000A23A4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_1000050D4();
}

unint64_t sub_1000A23DC()
{
  unint64_t result;

  result = qword_1002B28C0;
  if (!qword_1002B28C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B28C0);
  }
  return result;
}

unint64_t sub_1000A2418()
{
  unint64_t result;

  result = qword_1002AE398;
  if (!qword_1002AE398)
  {
    result = swift_getWitnessTable(&unk_100220BD0, &type metadata for PasteboardRepresentationFormat);
    atomic_store(result, (unint64_t *)&qword_1002AE398);
  }
  return result;
}

void sub_1000A2454(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_1000050D4();
}

uint64_t sub_1000A2494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AA6D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A24DC()
{
  unint64_t result;

  result = qword_1002AE3A8;
  if (!qword_1002AE3A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardType, &type metadata for PasteboardType);
    atomic_store(result, (unint64_t *)&qword_1002AE3A8);
  }
  return result;
}

unint64_t sub_1000A2518()
{
  unint64_t result;

  result = qword_1002AE3C8;
  if (!qword_1002AE3C8)
  {
    result = swift_getWitnessTable(&unk_1002217FC, &type metadata for PasteboardRepresentationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE3C8);
  }
  return result;
}

unint64_t sub_1000A2554()
{
  unint64_t result;

  result = qword_1002AE3D0;
  if (!qword_1002AE3D0)
  {
    result = swift_getWitnessTable(&unk_1002217AC, &type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE3D0);
  }
  return result;
}

unint64_t sub_1000A2590()
{
  unint64_t result;

  result = qword_1002AE3D8;
  if (!qword_1002AE3D8)
  {
    result = swift_getWitnessTable(&unk_10022175C, &type metadata for PasteboardRepresentationFormat.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE3D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PasteboardRepresentationFormat.CodingKeys()
{
  return &type metadata for PasteboardRepresentationFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardRepresentationFormat.DataCodingKeys()
{
  return &type metadata for PasteboardRepresentationFormat.DataCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardRepresentationFormat.ArchiveCodingKeys()
{
  return &type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys;
}

uint64_t getEnumTagSinglePayload for PasteboardMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 8) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v5 = v6 - 9;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PasteboardMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000A26D0 + 4 * byte_100220B15[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000A2704 + 4 * byte_100220B10[v4]))();
}

uint64_t sub_1000A2704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A270C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A2714);
  return result;
}

uint64_t sub_1000A2720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A2728);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000A272C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardMessage.CodingKeys()
{
  return &type metadata for PasteboardMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardDataSessionBeginCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys;
}

uint64_t _s13EnsembleAgent17PasteboardMessageO36PasteboardDataSessionBeginCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000A27A4 + 4 * byte_100220B1A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000A27C4 + 4 * byte_100220B1F[v4]))();
}

_BYTE *sub_1000A27A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000A27C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A27CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A27D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000A27DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000A27E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardDataSessionEndCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardDataSessionEndCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardDataSessionErrorCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardDataSessionErrorCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardRepresentationRequestCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardRepresentationRequestCodingKeys;
}

uint64_t storeEnumTagSinglePayload for PasteboardMessage.PasteboardRepresentationBeginCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A2874 + 4 * byte_100220B29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A28A8 + 4 * byte_100220B24[v4]))();
}

uint64_t sub_1000A28A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A28B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A28B8);
  return result;
}

uint64_t sub_1000A28C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A28CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A28D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A28D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardRepresentationBeginCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardRepresentationBeginCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardRepresentationDataCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardRepresentationDataCodingKeys;
}

uint64_t _s13EnsembleAgent30PasteboardRepresentationFormatOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A2950 + 4 * byte_100220B33[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A2984 + 4 * byte_100220B2E[v4]))();
}

uint64_t sub_1000A2984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A298C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A2994);
  return result;
}

uint64_t sub_1000A29A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A29A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A29AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A29B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardReceiverErrorCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardReceiverErrorCodingKeys;
}

uint64_t _s13EnsembleAgent17PasteboardMessageO36PasteboardDataSessionErrorCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000A2A2C + 4 * byte_100220B3D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A2A60 + 4 * byte_100220B38[v4]))();
}

uint64_t sub_1000A2A60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A2A70);
  return result;
}

uint64_t sub_1000A2A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A2A84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000A2A88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A2A90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardMessage.PasteboardProviderErrorCodingKeys()
{
  return &type metadata for PasteboardMessage.PasteboardProviderErrorCodingKeys;
}

unint64_t sub_1000A2AB0()
{
  unint64_t result;

  result = qword_1002AE3F8;
  if (!qword_1002AE3F8)
  {
    result = swift_getWitnessTable(&unk_100220F64, &type metadata for PasteboardMessage.PasteboardProviderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE3F8);
  }
  return result;
}

unint64_t sub_1000A2AF0()
{
  unint64_t result;

  result = qword_1002AE400;
  if (!qword_1002AE400)
  {
    result = swift_getWitnessTable(&unk_10022101C, &type metadata for PasteboardMessage.PasteboardReceiverErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE400);
  }
  return result;
}

unint64_t sub_1000A2B30()
{
  unint64_t result;

  result = qword_1002AE408;
  if (!qword_1002AE408)
  {
    result = swift_getWitnessTable(&unk_1002210D4, &type metadata for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE408);
  }
  return result;
}

unint64_t sub_1000A2B70()
{
  unint64_t result;

  result = qword_1002AE410;
  if (!qword_1002AE410)
  {
    result = swift_getWitnessTable(&unk_10022118C, &type metadata for PasteboardMessage.PasteboardRepresentationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE410);
  }
  return result;
}

unint64_t sub_1000A2BB0()
{
  unint64_t result;

  result = qword_1002AE418;
  if (!qword_1002AE418)
  {
    result = swift_getWitnessTable(&unk_100221244, &type metadata for PasteboardMessage.PasteboardRepresentationBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE418);
  }
  return result;
}

unint64_t sub_1000A2BF0()
{
  unint64_t result;

  result = qword_1002AE420;
  if (!qword_1002AE420)
  {
    result = swift_getWitnessTable(&unk_1002212FC, &type metadata for PasteboardMessage.PasteboardRepresentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE420);
  }
  return result;
}

unint64_t sub_1000A2C30()
{
  unint64_t result;

  result = qword_1002AE428;
  if (!qword_1002AE428)
  {
    result = swift_getWitnessTable(&unk_1002213B4, &type metadata for PasteboardMessage.PasteboardDataSessionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE428);
  }
  return result;
}

unint64_t sub_1000A2C70()
{
  unint64_t result;

  result = qword_1002AE430;
  if (!qword_1002AE430)
  {
    result = swift_getWitnessTable(&unk_10022146C, &type metadata for PasteboardMessage.PasteboardDataSessionEndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE430);
  }
  return result;
}

unint64_t sub_1000A2CB0()
{
  unint64_t result;

  result = qword_1002AE438;
  if (!qword_1002AE438)
  {
    result = swift_getWitnessTable(&unk_100221524, &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE438);
  }
  return result;
}

unint64_t sub_1000A2CF0()
{
  unint64_t result;

  result = qword_1002AE440;
  if (!qword_1002AE440)
  {
    result = swift_getWitnessTable(&unk_1002215DC, &type metadata for PasteboardMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE440);
  }
  return result;
}

unint64_t sub_1000A2D30()
{
  unint64_t result;

  result = qword_1002AE448;
  if (!qword_1002AE448)
  {
    result = swift_getWitnessTable(&unk_100221734, &type metadata for PasteboardRepresentationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE448);
  }
  return result;
}

unint64_t sub_1000A2D70()
{
  unint64_t result;

  result = qword_1002AE450;
  if (!qword_1002AE450)
  {
    result = swift_getWitnessTable(&unk_100221654, &type metadata for PasteboardRepresentationFormat.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE450);
  }
  return result;
}

unint64_t sub_1000A2DB0()
{
  unint64_t result;

  result = qword_1002AE458;
  if (!qword_1002AE458)
  {
    result = swift_getWitnessTable(&unk_10022167C, &type metadata for PasteboardRepresentationFormat.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE458);
  }
  return result;
}

unint64_t sub_1000A2DF0()
{
  unint64_t result;

  result = qword_1002AE460;
  if (!qword_1002AE460)
  {
    result = swift_getWitnessTable(&unk_100221604, &type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE460);
  }
  return result;
}

unint64_t sub_1000A2E30()
{
  unint64_t result;

  result = qword_1002AE468;
  if (!qword_1002AE468)
  {
    result = swift_getWitnessTable(&unk_10022162C, &type metadata for PasteboardRepresentationFormat.ArchiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE468);
  }
  return result;
}

unint64_t sub_1000A2E70()
{
  unint64_t result;

  result = qword_1002AE470;
  if (!qword_1002AE470)
  {
    result = swift_getWitnessTable(&unk_1002216A4, &type metadata for PasteboardRepresentationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE470);
  }
  return result;
}

unint64_t sub_1000A2EB0()
{
  unint64_t result;

  result = qword_1002AE478;
  if (!qword_1002AE478)
  {
    result = swift_getWitnessTable(&unk_1002216CC, &type metadata for PasteboardRepresentationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE478);
  }
  return result;
}

unint64_t sub_1000A2EF0()
{
  unint64_t result;

  result = qword_1002AE480;
  if (!qword_1002AE480)
  {
    result = swift_getWitnessTable(&unk_100221494, &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE480);
  }
  return result;
}

unint64_t sub_1000A2F30()
{
  unint64_t result;

  result = qword_1002AE488;
  if (!qword_1002AE488)
  {
    result = swift_getWitnessTable(&unk_1002214BC, &type metadata for PasteboardMessage.PasteboardDataSessionBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE488);
  }
  return result;
}

unint64_t sub_1000A2F70()
{
  unint64_t result;

  result = qword_1002AE490;
  if (!qword_1002AE490)
  {
    result = swift_getWitnessTable(&unk_1002213DC, &type metadata for PasteboardMessage.PasteboardDataSessionEndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE490);
  }
  return result;
}

unint64_t sub_1000A2FB0()
{
  unint64_t result;

  result = qword_1002AE498;
  if (!qword_1002AE498)
  {
    result = swift_getWitnessTable(&unk_100221404, &type metadata for PasteboardMessage.PasteboardDataSessionEndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE498);
  }
  return result;
}

unint64_t sub_1000A2FF0()
{
  unint64_t result;

  result = qword_1002AE4A0;
  if (!qword_1002AE4A0)
  {
    result = swift_getWitnessTable(&unk_100221324, &type metadata for PasteboardMessage.PasteboardDataSessionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4A0);
  }
  return result;
}

unint64_t sub_1000A3030()
{
  unint64_t result;

  result = qword_1002AE4A8;
  if (!qword_1002AE4A8)
  {
    result = swift_getWitnessTable(&unk_10022134C, &type metadata for PasteboardMessage.PasteboardDataSessionErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4A8);
  }
  return result;
}

unint64_t sub_1000A3070()
{
  unint64_t result;

  result = qword_1002AE4B0;
  if (!qword_1002AE4B0)
  {
    result = swift_getWitnessTable(&unk_10022126C, &type metadata for PasteboardMessage.PasteboardRepresentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4B0);
  }
  return result;
}

unint64_t sub_1000A30B0()
{
  unint64_t result;

  result = qword_1002AE4B8;
  if (!qword_1002AE4B8)
  {
    result = swift_getWitnessTable(&unk_100221294, &type metadata for PasteboardMessage.PasteboardRepresentationRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4B8);
  }
  return result;
}

unint64_t sub_1000A30F0()
{
  unint64_t result;

  result = qword_1002AE4C0;
  if (!qword_1002AE4C0)
  {
    result = swift_getWitnessTable(&unk_1002211B4, &type metadata for PasteboardMessage.PasteboardRepresentationBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4C0);
  }
  return result;
}

unint64_t sub_1000A3130()
{
  unint64_t result;

  result = qword_1002AE4C8;
  if (!qword_1002AE4C8)
  {
    result = swift_getWitnessTable(&unk_1002211DC, &type metadata for PasteboardMessage.PasteboardRepresentationBeginCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4C8);
  }
  return result;
}

unint64_t sub_1000A3170()
{
  unint64_t result;

  result = qword_1002AE4D0;
  if (!qword_1002AE4D0)
  {
    result = swift_getWitnessTable(&unk_1002210FC, &type metadata for PasteboardMessage.PasteboardRepresentationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4D0);
  }
  return result;
}

unint64_t sub_1000A31B0()
{
  unint64_t result;

  result = qword_1002AE4D8;
  if (!qword_1002AE4D8)
  {
    result = swift_getWitnessTable(&unk_100221124, &type metadata for PasteboardMessage.PasteboardRepresentationDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4D8);
  }
  return result;
}

unint64_t sub_1000A31F0()
{
  unint64_t result;

  result = qword_1002AE4E0;
  if (!qword_1002AE4E0)
  {
    result = swift_getWitnessTable(&unk_100221044, &type metadata for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4E0);
  }
  return result;
}

unint64_t sub_1000A3230()
{
  unint64_t result;

  result = qword_1002AE4E8;
  if (!qword_1002AE4E8)
  {
    result = swift_getWitnessTable(&unk_10022106C, &type metadata for PasteboardMessage.PasteboardRepresentationFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4E8);
  }
  return result;
}

unint64_t sub_1000A3270()
{
  unint64_t result;

  result = qword_1002AE4F0;
  if (!qword_1002AE4F0)
  {
    result = swift_getWitnessTable(&unk_100220F8C, &type metadata for PasteboardMessage.PasteboardReceiverErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4F0);
  }
  return result;
}

unint64_t sub_1000A32B0()
{
  unint64_t result;

  result = qword_1002AE4F8;
  if (!qword_1002AE4F8)
  {
    result = swift_getWitnessTable(&unk_100220FB4, &type metadata for PasteboardMessage.PasteboardReceiverErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE4F8);
  }
  return result;
}

unint64_t sub_1000A32F0()
{
  unint64_t result;

  result = qword_1002AE500;
  if (!qword_1002AE500)
  {
    result = swift_getWitnessTable(&unk_100220ED4, &type metadata for PasteboardMessage.PasteboardProviderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE500);
  }
  return result;
}

unint64_t sub_1000A3330()
{
  unint64_t result;

  result = qword_1002AE508;
  if (!qword_1002AE508)
  {
    result = swift_getWitnessTable(&unk_100220EFC, &type metadata for PasteboardMessage.PasteboardProviderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE508);
  }
  return result;
}

unint64_t sub_1000A3370()
{
  unint64_t result;

  result = qword_1002AE510;
  if (!qword_1002AE510)
  {
    result = swift_getWitnessTable(&unk_10022154C, &type metadata for PasteboardMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE510);
  }
  return result;
}

unint64_t sub_1000A33B0()
{
  unint64_t result;

  result = qword_1002AE518;
  if (!qword_1002AE518)
  {
    result = swift_getWitnessTable(&unk_100221574, &type metadata for PasteboardMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE518);
  }
  return result;
}

uint64_t sub_1000A3414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000A342C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_1000A3438(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t sub_1000A3448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000A3470()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 - 152));
}

uint64_t sub_1000A3478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000A3484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, *(_QWORD *)(v6 - 152), a5);
}

uint64_t sub_1000A3498@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1000A34AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_1000A34C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000A34D4()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000A34DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 472) + 8))(v1, v0);
}

uint64_t sub_1000A34F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000A3504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 65, v1, v0);
}

uint64_t sub_1000A352C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000A353C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t sub_1000A3548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, 0xE200000000000000, v2, v1, 0);
}

void sub_1000A355C(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_1000A2454(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t sub_1000A3568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1000A357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000A3584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000A358C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
}

void sub_1000A3598(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  sub_1000A2454(a1, *(_QWORD *)(a3 - 256), a2);
}

void sub_1000A35A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_1000A2454(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000A35B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000A35BC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 104) = 1;
}

uint64_t sub_1000A35E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 384) + 8))(v0, v1);
}

uint64_t sub_1000A3600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 88), a1);
}

uint64_t sub_1000A3618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 112), a1);
}

uint64_t sub_1000A3630()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000A3640()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000A3654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(_QWORD *)(v2 - 256), v3);
}

uint64_t sub_1000A366C()
{
  uint64_t v0;

  return v0;
}

void sub_1000A367C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000A3698(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000A36B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_1000A36C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1000A36DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1000A36F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(a1, 0xD00000000000002BLL, a3, 0);
}

uint64_t sub_1000A3700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 112));
}

void sub_1000A3728(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_10000E330(a1, v3, a3);
}

uint64_t sub_1000A3730()
{
  uint64_t v0;

  return v0;
}

void sub_1000A3740(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

void sub_1000A374C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 104) = 2;
}

uint64_t sub_1000A3758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000A3768()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000A3778(uint64_t a1)
{
  unint64_t v1;

  return sub_100022AEC(a1, v1);
}

_QWORD *sub_1000A3780(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_1000A3788(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000A23A4(v2, a2);
}

uint64_t sub_1000A37A4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000A37B0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000A23A4(v2, a2);
}

unint64_t sub_1000A37B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_1000A2554();
}

void sub_1000A37C4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000A23A4(v2, a2);
}

uint64_t sub_1000A37CC()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_1000A37D4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_1000A2454(a1, a2, v2);
}

uint64_t sub_1000A37E8()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_1000A37FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;

  v2 = (_QWORD *)v1;
  *(_WORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  v4 = (id)BiomeLibrary();
  v5 = objc_msgSend(v4, "Discoverability");
  swift_unknownObjectRelease(v4);
  v6 = objc_msgSend(v5, "Signals");
  sub_100079914();
  v7 = objc_msgSend(v6, "source");

  v2[2] = v7;
  v2[5] = a1;
  sub_10000B0EC();
  swift_retain();
  swift_retain();
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_100287560, 32, 7);
  *(_QWORD *)(v10 + 24) = &off_100287540;
  swift_unknownObjectWeakInit(v10 + 16, v2);
  swift_retain();
  v11 = sub_1000C8454(v9, (uint64_t)sub_10002D0D4, v10);
  v13 = v12;
  swift_release();
  swift_release();
  v21 = v11;
  v14 = type metadata accessor for SyncController(0);
  sub_1000A3F9C();
  dispatch thunk of ObservableObject.objectWillChange.getter(v14);
  v15 = swift_allocObject(&unk_100287588, 24, 7);
  *(_QWORD *)(v15 + 16) = v13;
  v16 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v13, 2);
  Publisher<>.sink(receiveValue:)(sub_10005E230, v15, v16, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v21);
  swift_release();
  sub_100079914();
  swift_release();
  v17 = v21;
  swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  swift_bridgeObjectRetain();
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_100079914();
  swift_bridgeObjectRelease();
  swift_release();
  v18 = v2[3];
  v19 = v2[4];
  v2[3] = v17;
  v2[4] = v13;
  sub_10002D108(v18, v19);
  return v2;
}

uint64_t sub_1000A3A44()
{
  uint64_t v0;

  sub_10002D108(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release();
  return v0;
}

uint64_t sub_1000A3A70()
{
  uint64_t v0;

  sub_1000A3A44();
  return swift_deallocClassInstance(v0, 50, 7);
}

uint64_t type metadata accessor for SignalEventController()
{
  return objc_opt_self(_TtC13EnsembleAgent21SignalEventController);
}

uint64_t sub_1000A3AB0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000A3AD0();
  qword_1002AE520 = result;
  *(_QWORD *)algn_1002AE528 = v1;
  return result;
}

uint64_t sub_1000A3AD0()
{
  NSString v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  v0 = String._bridgeToObjectiveC()();
  result = MGGetStringAnswer();
  if (result)
  {
    v2 = (void *)result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    v6._countAndFlagsBits = v3;
    v6._object = v5;
    String.append(_:)(v6);

    swift_bridgeObjectRelease(v5);
    return 760434537;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000A3B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  id v31;
  char v32;
  uint64_t v33;
  _BYTE v35[24];

  v1 = v0;
  v2 = type metadata accessor for SyncView(0);
  __chkstk_darwin(v2);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v33 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
    else
      v33 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1000A4020();
  if (v8 != *(unsigned __int8 *)(v1 + 48))
  {
    if (v7)
    {
      if (qword_1002A9890 != -1)
        swift_once(&qword_1002A9890, sub_1000A3AB0);
      v9 = *(_QWORD *)algn_1002AE528;
      v10 = objc_allocWithZone((Class)BMDiscoverabilitySignals);
      swift_bridgeObjectRetain();
      v11 = sub_1000A4000();
      v17 = sub_1000A3DD8(v16, v11, v12, v13, v14, v15, v9, 0, 0xF000000000000000);
      sub_1000A402C(*(void **)(v1 + 16));

    }
    sub_1000A4020();
    *(_BYTE *)(v1 + 48) = v18;
  }
  v19 = v5 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  swift_beginAccess(v5 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v35, 0, 0);
  sub_1000A3EF8(v19, (uint64_t)v4);
  v20 = *(int *)(v2 + 20);
  v21 = *(_QWORD *)&v4[v20 + 8 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 24)];
  swift_bridgeObjectRetain();
  sub_1000A3F3C((uint64_t)v4);
  v22 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease();
  sub_1000A4020();
  if (v23 != *(unsigned __int8 *)(v1 + 49))
  {
    if (v22)
    {
      if (qword_1002A9890 != -1)
        swift_once(&qword_1002A9890, sub_1000A3AB0);
      v24 = *(_QWORD *)algn_1002AE528;
      objc_allocWithZone((Class)BMDiscoverabilitySignals);
      swift_bridgeObjectRetain();
      v25 = sub_1000A4000();
      v31 = sub_1000A3DD8(v30, v25, v26, v27, v28, v29, v24, 0, 0xF000000000000000);
      sub_1000A402C(*(void **)(v1 + 16));

    }
    sub_1000A4020();
    *(_BYTE *)(v1 + 49) = v32;
  }
}

id sub_1000A3DD8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  void *v9;
  NSString v14;
  NSString v15;
  NSString v16;
  Class isa;
  id v18;

  if (a3)
  {
    v14 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a1 = swift_bridgeObjectRelease().n128_u64[0];
    if (a5)
      goto LABEL_3;
LABEL_6:
    v15 = 0;
    if (a7)
      goto LABEL_4;
    goto LABEL_7;
  }
  v14 = 0;
  if (!a5)
    goto LABEL_6;
LABEL_3:
  v15 = String._bridgeToObjectiveC()();
  *(_QWORD *)&a1 = swift_bridgeObjectRelease().n128_u64[0];
  if (a7)
  {
LABEL_4:
    v16 = String._bridgeToObjectiveC()();
    *(_QWORD *)&a1 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_8;
  }
LABEL_7:
  v16 = 0;
LABEL_8:
  if (a9 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100022AD8(a8, a9);
  }
  v18 = objc_msgSend(v9, "initWithContentIdentifier:context:osBuild:userInfo:", v14, v15, v16, isa, a1);

  return v18;
}

uint64_t sub_1000A3EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3F3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SyncView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A3F78()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000A3F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B2970;
  if (!qword_1002B2970)
  {
    v1 = type metadata accessor for SyncController(255);
    result = swift_getWitnessTable(&unk_100227CA4, v1);
    atomic_store(result, (unint64_t *)&qword_1002B2970);
  }
  return result;
}

uint64_t sub_1000A3FDC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000A4000()
{
  return 0xD000000000000024;
}

id sub_1000A402C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(a1, *(SEL *)(v2 + 608), v1);
}

void sub_1000A4038()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state + 8);
  if ((v2 - 1) <= 3u)
  {
    v3 = *v1;
    v4 = *(_QWORD *)(*v1 + 24);
    sub_1000AA3F8(*v1, *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state + 8));
    swift_retain(v4);
    sub_1000A40B4(v5);
    sub_10000FF50();
    sub_1000AA43C(v3, v2);
  }
}

id sub_1000A40B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  os_log_t v28;
  uint64_t v29;
  os_log_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = RapportStreamSession.trafficFlags.getter();
  if (*(_BYTE *)(v1 + 68))
    v9 = 4096;
  else
    v9 = 0;
  if ((_DWORD)v9 != (_DWORD)result)
  {
    v10 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v4);
    swift_retain(v1);
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.default.getter(v12, v13);
    v15 = v14;
    if (os_log_type_enabled(v12, v14))
    {
      v16 = swift_slowAlloc(32, -1);
      v33 = a1;
      v17 = v16;
      v32 = swift_slowAlloc(96, -1);
      v35 = v32;
      *(_DWORD *)v17 = 136446722;
      v31 = v15;
      v30 = v12;
      v19 = *(_QWORD *)(v2 + 72);
      v18 = *(_QWORD *)(v2 + 80);
      swift_bridgeObjectRetain(v18);
      v34 = sub_100006FCC(v19, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4);
      swift_release();
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v17 + 12) = 2082;
      v20 = CUTrafficFlagsCopyDescription(v10);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v34 = sub_100006FCC(v21, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v17 + 22) = 2082;
      v24 = CUTrafficFlagsCopyDescription(v9);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v34 = sub_100006FCC(v25, v27, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 24);
      swift_bridgeObjectRelease(v27);
      v28 = v30;
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v31, "%{public}s: Setting Traffic Registration: '%{public}s' -> '%{public}s'", (uint8_t *)v17, 0x20u);
      v29 = v32;
      swift_arrayDestroy(v32, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return RapportStreamSession.trafficFlags.setter(v9);
  }
  return result;
}

void sub_1000A4384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_10002626C();
  v1 = v0;
  v41 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v37 = v9;
  v11 = v5 >> 8;
  v31 = v5 >> 8;
  v45 = v5 >> 24;
  v46 = v5 >> 16;
  v44 = HIDWORD(v5);
  v12 = v5 >> 40;
  v30 = v5 >> 40;
  v42 = HIBYTE(v5);
  v43 = HIWORD(v5);
  v13 = v3 >> 8;
  v29 = v3 >> 8;
  v14 = v3 >> 16;
  v15 = v3 >> 24;
  v34 = v3 >> 40;
  v35 = HIDWORD(v3);
  v32 = HIBYTE(v3);
  v33 = HIWORD(v3);
  v16 = sub_10000F6E4();
  v39 = *(_QWORD *)(v16 - 8);
  v40 = v16;
  sub_1000262EC();
  __chkstk_darwin(v17);
  v19 = sub_1000AAED4(v18, v29);
  v36 = *(_QWORD *)(type metadata accessor for UUID(v19) - 8);
  sub_1000262EC();
  __chkstk_darwin(v20);
  sub_10000E5DC();
  *(_DWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 68) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) = 0;
  *(_QWORD *)(v1 + 32) = v10;
  *(_QWORD *)(v1 + 40) = v8;
  *(_BYTE *)(v1 + 48) = v6;
  *(_BYTE *)(v1 + 49) = v11;
  *(_BYTE *)(v1 + 50) = v46;
  *(_BYTE *)(v1 + 51) = v45;
  *(_BYTE *)(v1 + 52) = v44;
  *(_BYTE *)(v1 + 53) = v12;
  *(_BYTE *)(v1 + 54) = v43;
  *(_BYTE *)(v1 + 55) = v42;
  *(_BYTE *)(v1 + 56) = v4;
  *(_BYTE *)(v1 + 57) = v13;
  *(_BYTE *)(v1 + 58) = v14;
  *(_BYTE *)(v1 + 59) = v15;
  *(_BYTE *)(v1 + 60) = v35;
  *(_BYTE *)(v1 + 61) = v34;
  *(_BYTE *)(v1 + 62) = v33;
  *(_BYTE *)(v1 + 63) = v32;
  v47 = *(_QWORD *)(v41 + 32);
  v48 = *(_QWORD *)(v41 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000AB12C();
  UUID.init(uuid:)(v6, v31, v46, v45, v44, v30);
  v21 = sub_100067690();
  v23 = v22;
  sub_1000AB100(v36);
  v24 = sub_1000599D0(4, v21, v23);
  v25._countAndFlagsBits = static String._fromSubstring(_:)(v24);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  sub_10000E4A0();
  sub_1000AB12C();
  swift_bridgeObjectRetain();
  sub_1000AB0CC(v37);
  swift_bridgeObjectRelease_n(v8, 2);
  *(_QWORD *)(v1 + 72) = v47;
  *(_QWORD *)(v1 + 80) = v48;
  v26 = qword_1002A9800;
  swift_retain();
  if (v26 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v27 = sub_100006FB4(v40, (uint64_t)qword_1002B6D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v27, v40);
  sub_1000269A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v38, v40);
  v28 = v1 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
  *(_QWORD *)v28 = v41;
  *(_BYTE *)(v28 + 8) = 0;
  sub_10000E4E0();
}

uint64_t sub_1000A4678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = v2;
  v6 = type metadata accessor for Completions();
  v7 = swift_allocObject(v6, 24, 7);
  *(_QWORD *)(v7 + 16) = _swiftEmptyArrayStorage;
  sub_1000C4E20(a2);
  swift_release();
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 24) = a1;
  return v3;
}

_QWORD *sub_1000A46E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation);
  v2 = swift_allocObject(&unk_100287970, 32, 7);
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = type metadata accessor for Completion();
  swift_allocObject(v3, 48, 7);
  swift_retain(v0);
  return Completion.init(file:line:body:)(0xD000000000000058, 0x8000000100255780, 91, (uint64_t)sub_1000AA6B0, v2);
}

uint64_t sub_1000A4778(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) == a2)
  {
    v3 = result;
    if (result)
    {
      swift_errorRetain(result);
      sub_1000A47E0(v3, 0);
      return swift_errorRelease(v3);
    }
    else
    {
      return sub_1000A47E0(0, 0xC000000000000000);
    }
  }
  return result;
}

void sub_1000A47E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10002626C();
  v1 = v0;
  type metadata accessor for UUID(0);
  sub_1000262EC();
  __chkstk_darwin(v2);
  v4 = sub_1000AAED4(v3, v12);
  v5 = type metadata accessor for Logger(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  __asm { BR              X10 }
}

#error "1000A49D4: call analysis failed (funcsize=98)"

uint64_t sub_1000A5660(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (id)_convertErrorToNSError(_:)(a1);
  v2 = objc_msgSend(v1, "domain");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  result = (uint64_t)objc_msgSend(v1, "code");
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    if (result <= 0x7FFFFFFF)
    {
      v8 = RPErrorDomain;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPErrorDomain);
      if (v9 == v3 && v10 == v5)
      {
        swift_bridgeObjectRelease(v5);
        if (v7 != 4294960582)
        {
LABEL_12:
          swift_bridgeObjectRelease(v5);
          return (uint64_t)v1;
        }
      }
      else
      {
        v12 = v10;
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v3, v5, 0);
        swift_bridgeObjectRelease(v12);
        if (v7 != 4294960582 || (v13 & 1) == 0)
          goto LABEL_12;
      }
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v1 = sub_1000C2AD8(v14, v15, -6760, 0xD000000000000022, 0x8000000100255850, (uint64_t)v1);
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

id sub_1000A57B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    swift_unknownObjectRetain(v6);
    sub_1001186B0(v2);
    swift_unknownObjectRelease(v6);
  }
  swift_beginAccess(a1 + 24, v63, 1, 0);
  *(_QWORD *)(a1 + 32) = &off_100287908;
  swift_unknownObjectWeakAssign(a1 + 24, v2);
  v8 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  v9 = *(unsigned __int8 *)(v2 + 56);
  v10 = *(unsigned __int8 *)(v2 + 57);
  v55 = *(unsigned __int8 *)(v2 + 58);
  v56 = v10;
  v50 = a1;
  v54 = *(unsigned __int8 *)(v2 + 59);
  v11 = *(unsigned __int8 *)(v2 + 60);
  v12 = *(unsigned __int8 *)(v2 + 61);
  v13 = *(unsigned __int8 *)(v2 + 62);
  v14 = *(unsigned __int8 *)(v2 + 63);
  v15 = *(unsigned __int8 *)(v2 + 55);
  v59 = v9;
  v60 = v15;
  v16 = *(unsigned __int8 *)(v2 + 54);
  v57 = *(unsigned __int8 *)(v2 + 53);
  v58 = v16;
  v42 = *(unsigned __int8 *)(v2 + 52);
  v43 = v14;
  v17 = *(unsigned __int8 *)(v2 + 51);
  v18 = *(unsigned __int8 *)(v2 + 50);
  v48 = *(unsigned __int8 *)(v2 + 50);
  v49 = v11;
  v19 = *(unsigned __int8 *)(v2 + 49);
  v46 = *(unsigned __int8 *)(v2 + 49);
  v47 = v12;
  v20 = *(unsigned __int8 *)(v2 + 48);
  v44 = *(unsigned __int8 *)(v2 + 48);
  v45 = v13;
  v61 = v8;
  v62 = v7;
  swift_bridgeObjectRetain(v7);
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = v51;
  v23 = v20;
  v24 = v19;
  v25 = v17;
  v26 = v42;
  v27 = UUID.init(uuid:)(v23, v24, v18, v17, v42, v57);
  v28 = UUID.uuidString.getter(v27);
  v30 = v29;
  v31 = v53;
  v32 = *(void (**)(char *, uint64_t))(v52 + 8);
  v32(v22, v53);
  v33._countAndFlagsBits = v28;
  v33._object = v30;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v30);
  v34 = v50;
  RapportStreamSession.streamID.setter(v61, v62);
  RapportStreamSession.streamType.setter(2);
  v35 = v34;
  RapportStreamSession.streamQoS.setter(*(unsigned int *)(v2 + 64));
  v36 = UUID.init(uuid:)(v44, v46, v48, v25, v26, v57);
  v37 = UUID.uuidString.getter(v36);
  v39 = v38;
  v32(v22, v31);
  RapportStreamSession.trafficSessionID.setter(v37, v39);
  return sub_1000A40B4(v35);
}

uint64_t sub_1000A5A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_100088ABC();
  sub_1000A57B8(v4);
  v5 = type metadata accessor for P2PStream.StreamContext();
  swift_allocObject(v5, 32, 7);
  swift_retain(v4);
  swift_retain(a2);
  v6 = sub_1000A4678(v4, a2);
  v7 = v6;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) + 1;
  do
  {
    v9 = v8;
    v8 = 1;
  }
  while (!v9);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) = v9;
  v10 = v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  *(_QWORD *)v10 = v6;
  v12 = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(v10 + 8) = 3;
  swift_retain(v6);
  sub_1000AA43C(v11, v12);
  v13 = sub_1000A46E0();
  swift_retain(*(_QWORD *)(v7 + 24));
  swift_retain(v13);
  RapportStreamSession.activate(completion:)((uint64_t)j___s13EnsembleAgent10CompletionC14callAsFunctionyys5Error_pSgF, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
  swift_release();
  swift_release();
  swift_release();
  return swift_release_n(v13, 2);
}

void sub_1000A5B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v42 = a1;
  v43 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v8 = *(unsigned __int8 *)(v1 + 55);
  v40 = *(unsigned __int8 *)(v1 + 54);
  v41 = v8;
  HIDWORD(v39) = *(unsigned __int8 *)(v1 + 53);
  v9 = *(unsigned __int8 *)(v1 + 52);
  v10 = *(unsigned __int8 *)(v1 + 51);
  v11 = *(unsigned __int8 *)(v1 + 50);
  v12 = *(unsigned __int8 *)(v1 + 49);
  v13 = *(unsigned __int8 *)(v1 + 48);
  v44 = v7;
  v45 = v6;
  swift_bridgeObjectRetain(v6);
  v14._countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = v12;
  v16 = v42;
  v17 = UUID.init(uuid:)(v13, v15, v11, v10, v9, HIDWORD(v39));
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v43);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v23 = v44;
  v22 = v45;
  RapportStreamSession.streamID.getter();
  if (!v25)
  {
    swift_bridgeObjectRelease(v22);
    goto LABEL_9;
  }
  v26 = v25;
  if (v23 == v24 && v25 == v22)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v26);
    goto LABEL_11;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v22, v24, v25, 0);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v26);
  if ((v28 & 1) == 0)
  {
LABEL_9:
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v29 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6708, 0xD000000000000028, 0x80000001002557E0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 267);
    sub_1000A5FFC(0, (uint64_t)v29);

    return;
  }
LABEL_11:
  sub_1000A57B8(v16);
  v30 = type metadata accessor for Completion();
  swift_allocObject(v30, 48, 7);
  swift_retain(v16);
  v31 = Completion.init(file:line:)();
  v32 = type metadata accessor for P2PStream.StreamContext();
  swift_allocObject(v32, 32, 7);
  v33 = sub_1000A4678(v16, (uint64_t)v31);
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) + 1;
  do
  {
    v35 = v34;
    v34 = 1;
  }
  while (!v35);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) = v35;
  v36 = v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
  v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  *(_QWORD *)v36 = v33;
  v38 = *(_BYTE *)(v36 + 8);
  *(_BYTE *)(v36 + 8) = 1;
  sub_1000AA43C(v37, v38);
}

void sub_1000A5E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;

  if (*(_QWORD *)(a1 + 24) == a2)
  {
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) + 1;
    do
    {
      v5 = v4;
      v4 = 1;
    }
    while (!v5);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) = v5;
    v6 = v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
    *(_QWORD *)v6 = a1;
    v8 = *(_BYTE *)(v6 + 8);
    *(_BYTE *)(v6 + 8) = 2;
    sub_1000AA43C(v7, v8);
    swift_retain(a1);
    Completion.callAsFunction(_:)(0);
  }
  else
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v9 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6736, 0xD00000000000001FLL, 0x8000000100255810, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 290);
    sub_1000A5FFC(a1, (uint64_t)v9);

  }
}

uint64_t sub_1000A5F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  *(_QWORD *)v4 = a1;
  v6 = *(_BYTE *)(v4 + 8);
  *(_BYTE *)(v4 + 8) = 4;
  sub_1000AA43C(v5, v6);
  swift_retain(a1);
  result = sub_1001116B8(0);
  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v2 + 16));
    sub_1001158BC(v2, 0, 0, 0xA000000000000000);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_1000A5FFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  os_log_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42[11];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v37 - v11;
  if (a2)
  {
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v37 - v11, (uint64_t)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v6);
    __chkstk_darwin(v13);
    *(&v37 - 2) = (uint8_t *)a2;
    swift_errorRetain(a2);
    sub_1000E45AC((int)sub_1000AA6B8, (int)v3, (int)sub_1000AAD3C, (int)(&v37 - 4), v14, v15, v16, v17, (uint64_t)v37, v38, v39, (uint64_t)v40, v41, v42[0], v42[1], v42[2], v42[3], v42[4], v42[5],
      v42[6],
      v42[7],
      v42[8],
      v42[9],
      v42[10]);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    swift_errorRelease(a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, (uint64_t)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v6);
    swift_retain(v3);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v40 = v19;
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v42[0] = v39;
      *(_DWORD *)v21 = 136446210;
      v37 = v21 + 4;
      v38 = v21;
      v23 = v3[9];
      v22 = v3[10];
      swift_bridgeObjectRetain(v22);
      v41 = sub_100006FCC(v23, v22, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v37);
      swift_release();
      swift_bridgeObjectRelease(v22);
      v24 = v40;
      v25 = v20;
      v26 = v38;
      _os_log_impl((void *)&_mh_execute_header, v40, v25, "%{public}s: P2PStream Canceled", v38, 0xCu);
      v27 = v39;
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  v28 = (char *)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state;
  v29 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  *(_QWORD *)v28 = a2;
  v30 = v28[8];
  v28[8] = 5;
  sub_1000AA43C(v29, v30);
  v31 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) + 1;
  do
  {
    v32 = v31;
    v31 = 1;
  }
  while (!v32);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_generation) = v32;
  if (a1)
  {
    v33 = *(_QWORD *)(a1 + 24);
    swift_errorRetain(a2);
    swift_retain(v33);
    swift_retain(a1);
    RapportStreamSession.cancel()();
    swift_release();
    v34 = a2;
    if (!a2)
    {
      sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
      v34 = (uint64_t)NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, 0xD000000000000012, 0x8000000100255880, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 238);
    }
    swift_errorRetain(a2);
    swift_errorRetain(v34);
    sub_1001116B8(v34);
    swift_errorRelease(v34);
    swift_errorRelease(v34);
    result = swift_release();
  }
  else
  {
    result = swift_errorRetain(a2);
  }
  v36 = v3[2];
  if (v36)
  {
    swift_unknownObjectRetain(v3[2]);
    sub_100118560((uint64_t)v3, a2);
    return swift_unknownObjectRelease(v36);
  }
  return result;
}

void sub_1000A63B0()
{
  sub_1000A47E0();
}

void sub_1000A63BC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void (*v28)(_QWORD *, char *, _QWORD *);
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_signpost_id_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _DWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t inited;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;

  sub_10002626C();
  v2 = v0;
  v83 = v3;
  v84 = v4;
  v80 = v5;
  v79 = v6;
  v7 = sub_10000F6E4();
  v81 = *(_QWORD *)(v7 - 8);
  v82 = v7;
  sub_1000262EC();
  __chkstk_darwin(v8);
  v9 = sub_1000AAF20();
  v10 = (_QWORD *)type metadata accessor for OSSignpostID(v9);
  v11 = *(v10 - 1);
  __chkstk_darwin(v10);
  sub_10003D69C();
  v13 = v12;
  sub_1000A3464();
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - v15;
  v17 = sub_100026B28();
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10000E5DC();
  v85 = v19;
  type metadata accessor for Signpost(0);
  sub_1000262EC();
  __chkstk_darwin(v20);
  sub_10002641C();
  v23 = v22 - v21;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v24 = sub_100006FB4(v17, (uint64_t)qword_1002B6F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v23, v24, v17);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v18 + 32))(v85, v23, v17);
  v25 = swift_retain_n(v2, 2);
  v26 = static OSSignpostID.exclusive.getter(v25);
  v27 = OSSignposter.logHandle.getter(v26);
  v77 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v28 = *(void (**)(_QWORD *, char *, _QWORD *))(v11 + 16);
    v73 = v13;
    v76 = v16;
    v28(v13, v16, v10);
    v29 = (uint8_t *)sub_10000797C(12);
    v30 = sub_10000797C(32);
    sub_1000AB0AC(v30);
    v75 = v18;
    *(_DWORD *)v29 = 136315138;
    v74 = v11;
    v31 = v10;
    v32 = v2[9];
    v33 = v2[10];
    swift_bridgeObjectRetain(v33);
    v34 = sub_100006FCC(v32, v33, &v86);
    v35 = sub_1000AB164(v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36, v29 + 4);
    sub_10000F650((uint64_t)v2);
    v37 = sub_10000E594();
    v10 = v73;
    v38 = OSSignpostID.rawValue.getter(v37);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, (os_signpost_type_t)v77, v38, "sendmsg", "%s", v29, 0xCu);
    sub_1000263F4(v1, v39, (uint64_t)&type metadata for Any + 8);
    v40 = v1;
    v1 = v78;
    sub_100007958(v40);
    sub_100007958((uint64_t)v29);

    v41 = *(void (**)(char *, _QWORD *))(v74 + 8);
    v41(v76, v31);
    sub_1000AB120(*(uint64_t (**)(_QWORD, uint64_t))(v75 + 8));
    v42 = ((uint64_t (*)(_QWORD *, _QWORD *))v41)(v10, v31);
  }
  else
  {
    sub_10000F650((uint64_t)v2);

    (*(void (**)(char *, _QWORD *))(v11 + 8))(v16, v10);
    v42 = sub_1000AB120(*(uint64_t (**)(_QWORD, uint64_t))(v18 + 8));
  }
  if ((v84 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v1, (uint64_t)v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v82);
    v43 = sub_100060200();
    v44 = Logger.logObject.getter(v43);
    v46 = sub_1000AB118(v44, v45);
    if (sub_1000AAE80(v46))
    {
      v47 = (_DWORD *)sub_10000797C(12);
      v48 = sub_10000797C(32);
      sub_1000AB0AC(v48);
      *v47 = 136446210;
      v85 = v47 + 1;
      v49 = v2;
      v50 = v2[9];
      v51 = v2[10];
      swift_bridgeObjectRetain(v51);
      v52 = sub_100006FCC(v50, v51, &v86);
      v53 = sub_1000AB164(v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54, v85);
      swift_release();
      v55 = v51;
      v2 = v49;
      swift_bridgeObjectRelease(v55);
      sub_1000AADBC((void *)&_mh_execute_header, v56, v57, "%{public}s: Send");
      sub_1000263F4(v1, v58, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v1);
      sub_100007958((uint64_t)v47);

      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v78, v82);
    }
    else
    {

      sub_1000955CC();
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v1, v82);
    }
  }
  v59 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state + 8) == 4)
  {
    v60 = *v59;
    v61 = *(_QWORD *)(*v59 + 24);
    v62 = v2[4];
    v63 = v2[5];
    v64 = sub_1000055B0(&qword_1002AD130);
    inited = swift_initStackObject(v64, &v87);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    v86 = 0;
    sub_1000AB098(v60);
    sub_1000AB098(v60);
    swift_retain(v61);
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v86);
    *(_QWORD *)(inited + 96) = &type metadata for Data;
    v66 = v79;
    v67 = v80;
    *(_QWORD *)(inited + 72) = v79;
    *(_QWORD *)(inited + 80) = v67;
    sub_10002517C(v66, v67);
    v68 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v69 = swift_allocObject(&unk_100287998, 40, 7);
    *(_BYTE *)(v69 + 16) = v84 & 1;
    v70 = v83;
    *(_QWORD *)(v69 + 24) = v2;
    *(_QWORD *)(v69 + 32) = v70;
    sub_100060200();
    swift_retain(v70);
    RapportStreamSession.sendEvent(id:event:options:completion:)(v62, v63, v68, 0, sub_1000AA718, v69);
    swift_release();
    sub_10000E594();
    swift_release();
    sub_1000AB0A0();
    sub_1000AB0A0();
  }
  else
  {
    sub_10002D82C(v42, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v71 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6753, 0x6E6E6F4320746F4ELL, 0xED00006465746365, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 327);
    sub_1000A718C((uint64_t)v71, v83);

  }
  sub_10000E4E0();
}

const char *sub_1000A6990(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const char *result;
  const char *v29;
  NSObject *v30;
  uint64_t (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint32_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  const char *v51;
  const char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint32_t v64;
  const char *v65;
  const char *v66;
  const char *v67;
  unsigned __int8 v68;
  unsigned __int8 v69;

  v55 = 0;
  v2 = type metadata accessor for OSSignpostError(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for OSSignpostID(0);
  v57 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v56 = (uint64_t)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)v44 - v6;
  v8 = type metadata accessor for OSSignposter(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v12);
  v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C2FA4((uint64_t)v14);
  v15 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v54 = v8;
  v15(v11, v14, v8);
  swift_retain();
  swift_retain();
  v16 = swift_release();
  v17 = static OSSignpostID.exclusive.getter(v16);
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = static os_signpost_type_t.event.getter();
  v20 = swift_allocObject(&unk_1002875B8, 17, 7);
  *(_BYTE *)(v20 + 16) = 32;
  v21 = swift_allocObject(&unk_1002875E0, 17, 7);
  *(_BYTE *)(v21 + 16) = 8;
  v22 = swift_allocObject(&unk_100287608, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_1000A98B8;
  *(_QWORD *)(v22 + 24) = a1;
  v23 = swift_allocObject(&unk_100287630, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_10002C974;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = sub_1000055B0(&qword_1002AA890);
  v25 = _allocateUninitializedArray<A>(_:)(3, v24);
  *v26 = sub_10002C968;
  v26[1] = v20;
  v26[2] = sub_10002D6B8;
  v26[3] = v21;
  v26[4] = sub_10002C97C;
  v26[5] = v23;
  sub_100026BBC();
  v27 = v25;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:

    (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v3);
    return (const char *)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v54);
  }
  v69 = 2;
  v68 = 1;
  v66 = "sendmsg";
  result = "sendmsg";
  if ("sendmsg")
  {
    sub_10002C848((uint64_t)"sendmsg", &v67);
    v29 = v67;
    v65 = "%s";
    v48 = v69;
    v49 = v68;
    v30 = v18;
    v31 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 16);
    v32 = v56;
    v58 = v3;
    v33 = v31(v56, v7, v3);
    v53 = v44;
    __chkstk_darwin(v33);
    v44[-6] = v18;
    LOBYTE(v44[-5]) = v19;
    v44[-4] = v32;
    v44[-3] = v29;
    v52 = "%s";
    v44[-2] = "%s";
    v63 = 12;
    sub_10002C984();
    v50 = v19;
    v51 = v29;
    sub_10002C9C0();
    sub_10002C9FC();
    UnsignedInteger<>.init<A>(_:)(&v64, &v63);
    v47 = v64;
    v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
    v35 = sub_1000055B0(&qword_1002AA8B0);
    v36 = sub_10002C8D8(0, v35, v35);
    v37 = sub_10002C8D8(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v38 = v34;
    v62 = v34;
    v46 = v36;
    v61 = v36;
    v45 = v37;
    v60 = v37;
    sub_100006F04(v48, &v62);
    v39 = sub_100006F04(v49, &v62);
    v59 = v27;
    v44[1] = v44;
    __chkstk_darwin(v39);
    v44[-4] = &v62;
    v44[-3] = &v61;
    v44[-2] = &v60;
    v40 = sub_1000055B0(&qword_1002AA8B8);
    sub_10006D048((unint64_t *)&qword_1002AA8C0, &qword_1002AA8B8);
    v41 = v55;
    Sequence.forEach(_:)(sub_1000AA16C, &v44[-6], v40, v42);
    if (v41)
    {
      __break(1u);
    }
    else
    {
      v40 = v56;
      sub_10002C858(v38, v47, v18, (os_signpost_type_t)v50, v56, v51, v52);
    }
    sub_10002C928(v46, 0);
    sub_10002C928(v45, 1);
    UnsafeMutablePointer.deallocate()();

    v43 = v40;
    v3 = v58;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v43, v58);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A6F8C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v8);
    swift_retain(a3);
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.default.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      v28 = a4;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v16 = 136446210;
      v25 = v16 + 4;
      v26 = v16;
      v17 = a1;
      v19 = *(_QWORD *)(a3 + 72);
      v18 = *(_QWORD *)(a3 + 80);
      swift_bridgeObjectRetain(v18);
      v20 = v19;
      a1 = v17;
      v29 = sub_100006FCC(v20, v18, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v25);
      swift_release();
      v21 = v18;
      a4 = v28;
      swift_bridgeObjectRelease(v21);
      v22 = v26;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s: Sent", v26, 0xCu);
      v23 = v27;
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return sub_1000A718C(a1, a4);
}

uint64_t sub_1000A718C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void **aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t (*v40)();
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v34 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return Completion.callAsFunction(_:)(0);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v12);
  v31 = v6;
  __chkstk_darwin(v16);
  v32 = v9;
  *(&v30 - 2) = a1;
  swift_errorRetain(a1);
  sub_1000E45AC((int)sub_1000AA724, v3, (int)sub_1000AA760, (int)(&v30 - 4), v17, v18, v19, v20, v30, v31, v32, v33, v34, (uint64_t)v35, (uint64_t)aBlock, v37, (uint64_t)v38, (uint64_t)v39, (uint64_t)v40,
    (uint64_t)v41,
    v42,
    v43,
    v44,
    v45);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v21 = (void *)sub_1000A7458();
  v22 = (_QWORD *)swift_allocObject(&unk_1002879C0, 40, 7);
  v22[2] = v3;
  v22[3] = a1;
  v23 = v34;
  v22[4] = v34;
  v40 = sub_1000AA7B4;
  v41 = v22;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_10000E610;
  v39 = &unk_1002879D8;
  v24 = _Block_copy(&aBlock);
  swift_errorRetain(a1);
  swift_retain(v3);
  swift_retain(v23);
  static DispatchQoS.unspecified.getter(v25);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_10003224C();
  v27 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v5, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v24);
  _Block_release(v24);

  swift_errorRelease(a1);
  (*((void (**)(char *, uint64_t))v31 + 1))(v8, v5);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v32);
  return swift_release();
}

uint64_t sub_1000A7458()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state + 8);
  if ((v2 - 1) > 3u)
  {
    v7 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    return static OS_dispatch_queue.main.getter(v7);
  }
  else
  {
    v3 = *v1;
    v4 = *(_QWORD *)(*v1 + 24);
    sub_1000AA3F8(*v1, v2);
    swift_retain(v4);
    v5 = RapportStreamSession.dispatchQueue.getter();
    swift_release();
    sub_1000AA43C(v3, v2);
    return (uint64_t)v5;
  }
}

uint64_t sub_1000A74F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRetain(v8);
  sub_1000AB0CC(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  return v12;
}

uint64_t sub_1000A7588(uint64_t a1, uint64_t a2)
{
  sub_1000A47E0();
  return Completion.callAsFunction(_:)(a2);
}

void sub_1000A75CC()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = sub_10000F6E4();
  sub_10002666C(v1);
  sub_1000AA43C(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state), *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_state + 8));
  sub_1000050D4();
}

uint64_t sub_1000A7628()
{
  uint64_t v0;

  sub_1000A75CC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_1000A764C()
{
  sub_1000A63B0();
}

void sub_1000A766C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;

  sub_10002626C();
  v2 = (uint64_t)v0;
  v3 = *v0;
  v4 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_1000268CC();
  _typeName(_:qualified:)(v3, 0);
  v6._countAndFlagsBits = 0x2720444920;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  v7 = *(unsigned __int8 *)(v2 + 53);
  v8 = *(unsigned __int8 *)(v2 + 52);
  v9 = *(unsigned __int8 *)(v2 + 51);
  v10 = *(unsigned __int8 *)(v2 + 50);
  v11 = *(unsigned __int8 *)(v2 + 49);
  v12 = *(unsigned __int8 *)(v2 + 48);
  v23 = *(Swift::String *)(v2 + 32);
  swift_bridgeObjectRetain();
  sub_1000AAE48();
  v13 = UUID.init(uuid:)(v12, v11, v10, v9, v8, v7);
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v1, v22);
  v17 = sub_1000599D0(8, v14, v16);
  v18 = static String._fromSubstring(_:)(v17);
  sub_10000E420();
  sub_1000AB0CC(v18);
  swift_bridgeObjectRelease();
  String.append(_:)(v23);
  sub_10000E594();
  v19._countAndFlagsBits = 8231;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  sub_1000A77E8(v2);
  String.append(_:)(v20);
  sub_10000E410();
  sub_10000E4E0();
}

void sub_1000A77E8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000A7844()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  _QWORD v6[10];

  strcpy((char *)v6, "<Preparing> ");
  sub_1000AA3F8(v0, 1);
  swift_retain();
  v1 = RapportStreamSession.description.getter();
  v3 = v2;
  swift_release();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_1000AA43C(v0, 1);
  return v6[0];
}

void sub_1000A7A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  if (v14)
  {
    a14 = v14;
    swift_errorRetain(v14);
    v15 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
    v16 = sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    if (!swift_dynamicCast(&a13, &a14, v15, v16, 0))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)(&type metadata for P2PStream.State, &type metadata for P2PStream.State);
      __break(1u);
      JUMPOUT(0x1000A7B84);
    }
    v17 = a13;
    _StringGuts.grow(_:)(18);
    v18 = objc_msgSend(v17, "domain", swift_bridgeObjectRelease().n128_f64[0]);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 10272;
    v23._object = (void *)0xE200000000000000;
    String.append(_:)(v23);
    objc_msgSend(v17, "code");
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 15913;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);

    swift_errorRelease(a14);
  }
  JUMPOUT(0x1000A7A00);
}

void sub_1000A7B9C()
{
  sub_1000A766C();
}

uint64_t sub_1000A7BBC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6165727473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6165727473, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000A7C98(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D6165727473;
  else
    return 0x6C6562616CLL;
}

uint64_t sub_1000A7CC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v20;
  char v21;

  v9 = sub_1000055B0(&qword_1002AE7B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10002641C();
  v13 = v12 - v11;
  v15 = a1[3];
  v14 = a1[4];
  sub_10000DBE4(a1, v15);
  v16 = sub_1000AA7D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PStream.DiagnosticState.CodingKeys, &type metadata for P2PStream.DiagnosticState.CodingKeys, v16, v15, v14);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v9);
  if (!v5)
  {
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a4, a5, &v20, v9);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1000A7DE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  v3 = sub_1000055B0(&qword_1002AE7E0);
  __chkstk_darwin(v3);
  sub_10002641C();
  v4 = a1[3];
  v5 = a1[4];
  sub_10000DBE4(a1, v4);
  v6 = sub_1000AA7D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PStream.DiagnosticState.CodingKeys, &type metadata for P2PStream.DiagnosticState.CodingKeys, v6, v4, v5);
  if (v1)
  {
    sub_10008503C();
  }
  else
  {
    v9 = 0;
    v5 = KeyedDecodingContainer.decode(_:forKey:)(&v9, v3);
    v8 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v8, v3);
    sub_10003B0F4();
    swift_bridgeObjectRetain();
    sub_10008503C();
    swift_bridgeObjectRelease();
    sub_1000267C4();
  }
  return v5;
}

uint64_t sub_1000A7F50()
{
  char *v0;

  return sub_1000A7C98(*v0);
}

uint64_t sub_1000A7F58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A7BBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A7F7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA7D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A7FA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA7D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A7FCC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000A7DE8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000A7FF8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000A7CC8(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_1000A8014(uint64_t a1)
{
  void *v1;

  sub_10002D82C(a1, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, 0xD00000000000002CLL, 0x80000001002558F0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 394);
  sub_1000AAFC8();
  sub_1000AAEF4(v1);
}

void sub_1000A8084(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  sub_10002D82C(a1, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_1000AADDC();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v1, v2, v3, v4, v5, v6, 398);
  sub_1000AAFC8();
  sub_1000AAEF4(v7);
}

void sub_1000A80DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_signpost_id_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79[2];
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;

  sub_10002626C();
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v8 = sub_10000F6E4();
  v78 = *(_QWORD *)(v8 - 8);
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_1000268CC();
  v10 = type metadata accessor for OSSignpostID(0);
  v76 = *(_QWORD *)(v10 - 8);
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10003D69C();
  v75 = v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  v77 = (char *)&v67 - v14;
  v15 = sub_100026B28();
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = sub_1000AAF20();
  type metadata accessor for Signpost(v17);
  sub_1000262EC();
  __chkstk_darwin(v18);
  sub_10002641C();
  v21 = v20 - v19;
  v79[0] = 0;
  AnyHashable.init<A>(_:)(&v80, v79);
  sub_100041C8C(v7, &v82);
  v22 = sub_1000AB080();
  if (!v83)
  {
    sub_1000AAFF8(v22, &qword_1002B34C0);
    goto LABEL_9;
  }
  v23 = sub_1000AAF18((uint64_t)v79, (uint64_t)&v82, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data);
  if ((v23 & 1) == 0)
  {
LABEL_9:
    v36 = sub_10002D82C(v23, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_1000AADDC();
    v43 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v37, v38, v39, v40, v41, v42, 407);
    v44 = sub_1000AAF00(OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger);
    __chkstk_darwin(v44);
    sub_1000AAEBC();
    sub_1000E3E30(sub_1000AAD3C, v36, v1, v3);
    goto LABEL_10;
  }
  v73 = v79[0];
  v74 = v10;
  v24 = v79[1];
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v25 = sub_100006FB4(v15, (uint64_t)qword_1002B6F70);
  sub_1000AB0F8(v21, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16));
  sub_1000AB0F8(v2, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
  swift_bridgeObjectRetain_n(v5, 4);
  v26 = sub_10000F794();
  v27 = v77;
  v28 = static OSSignpostID.exclusive.getter(v26);
  v29 = OSSignposter.logHandle.getter(v28);
  v72 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v70 = v29;
    v71 = v24;
    v68 = v8;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v75, v27, v74);
    v30 = sub_10000797C(32);
    v69 = sub_10000797C(32);
    v79[0] = v69;
    *(_DWORD *)v30 = 136315650;
    v32 = v3[9];
    v31 = v3[10];
    swift_bridgeObjectRetain();
    v80 = sub_100006FCC(v32, v31, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v30 + 4);
    sub_10000FF38();
    sub_10000E410();
    *(_WORD *)(v30 + 12) = 2048;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionLength);
    sub_1000AB10C(v33, v34);
    sub_1000AB158();
    sub_1000AB000();
    v35 = sub_1000AB080();
    if (v83)
      sub_1000AAF18((uint64_t)&v80, (uint64_t)&v82, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for UInt);
    else
      sub_1000AAFF8(v35, &qword_1002B34C0);
    v47 = sub_1000AADD0();
    v8 = v68;
    sub_1000AAF5C(v47, v48, v30 + 14, v30 + 22);
    sub_1000267C4();
    *(_WORD *)(v30 + 22) = 2048;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionXID);
    sub_1000AB10C(v49, v50);
    sub_1000AB158();
    sub_1000AB000();
    v51 = sub_1000AB080();
    if (v83)
      sub_1000AAF18((uint64_t)&v80, (uint64_t)&v82, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for UInt);
    else
      sub_1000AAFF8(v51, &qword_1002B34C0);
    v52 = sub_1000AADD0();
    sub_1000AAF5C(v52, v53, v30 + 24, v30 + 32);
    v54 = sub_1000267C4();
    v5 = v75;
    v55 = OSSignpostID.rawValue.getter(v54);
    v56 = v70;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v70, (os_signpost_type_t)v72, v55, "recvmsg", "%s, bytes=%lu, xid=%lu", (uint8_t *)v30, 0x20u);
    v57 = v69;
    sub_1000263F4(v69, v58, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v57);
    sub_100007958(v30);

    v59 = *(void (**)(char *, uint64_t))(v76 + 8);
    v60 = v74;
    v59(v77, v74);
    sub_1000AB018();
    v46 = ((uint64_t (*)(uint64_t, uint64_t))v59)(v5, v60);
    v24 = v71;
  }
  else
  {
    sub_10000FF38();

    v45 = swift_bridgeObjectRelease_n(v5, 4);
    (*(void (**)(char *, uint64_t, __n128))(v76 + 8))(v27, v74, v45);
    v46 = sub_1000AB018();
  }
  v61 = v3[2];
  if (v61)
  {
    swift_unknownObjectRetain(v3[2]);
    v62 = (uint64_t)v3;
    v63 = v73;
    sub_1001185F8(v62, v73, v24);
    swift_unknownObjectRelease(v61);
    sub_100022AEC(v63, v24);
    goto LABEL_11;
  }
  v64 = sub_10002D82C(v46, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v65 = v24;
  v43 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6714, 0xD000000000000022, 0x80000001002558C0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PStream.swift", 88, 2, 419);
  v66 = sub_1000AAF00(OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger);
  __chkstk_darwin(v66);
  sub_1000AAEBC();
  sub_1000E3E30(sub_1000AAD3C, v64, v1, v3);
  sub_100022AEC(v73, v65);
LABEL_10:
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v8);

LABEL_11:
  sub_10000E4E0();
}

const char *sub_1000A86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  uint64_t v37;
  const char *result;
  const char *v39;
  char v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[4];
  uint32_t v56;
  const char *v57;
  const char *v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint32_t v75;
  const char *v76;
  const char *v77;
  const char *v78;
  unsigned __int8 v79;
  unsigned __int8 v80;

  v62 = 0;
  v4 = type metadata accessor for OSSignpostError(0);
  __chkstk_darwin(v4);
  v69 = type metadata accessor for OSSignpostID(0);
  v68 = *(_QWORD *)(v69 - 8);
  v5 = __chkstk_darwin(v69);
  v63 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v8 = &v55[-v7];
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v13);
  v15 = &v55[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C2FA4((uint64_t)v15);
  v65 = v10;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v66 = v9;
  v16(v12, v15, v9);
  swift_retain();
  swift_retain();
  swift_release();
  swift_bridgeObjectRetain();
  v17 = swift_allocObject(&unk_100287658, 24, 7);
  *(_QWORD *)(v17 + 16) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRetain();
  v18 = swift_allocObject(&unk_100287680, 24, 7);
  *(_QWORD *)(v18 + 16) = a2;
  swift_retain();
  v19 = swift_release();
  v67 = v8;
  v20 = static OSSignpostID.exclusive.getter(v19);
  v64 = v12;
  v60 = OSSignposter.logHandle.getter(v20);
  v61 = static os_signpost_type_t.event.getter();
  v21 = swift_allocObject(&unk_1002876A8, 17, 7);
  *(_BYTE *)(v21 + 16) = 32;
  v22 = swift_allocObject(&unk_1002876D0, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_1002876F8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1000A98B8;
  *(_QWORD *)(v23 + 24) = a1;
  v24 = swift_allocObject(&unk_100287720, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10002D6A8;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_100287748, 17, 7);
  *(_BYTE *)(v25 + 16) = 0;
  v26 = swift_allocObject(&unk_100287770, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_100287798, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_1000AA1AC;
  *(_QWORD *)(v27 + 24) = v17;
  v28 = swift_allocObject(&unk_1002877C0, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_1000AA220;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_1002877E8, 17, 7);
  *(_BYTE *)(v29 + 16) = 0;
  v30 = swift_allocObject(&unk_100287810, 17, 7);
  *(_BYTE *)(v30 + 16) = 8;
  v31 = swift_allocObject(&unk_100287838, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1000AA1CC;
  *(_QWORD *)(v31 + 24) = v18;
  v32 = swift_allocObject(&unk_100287860, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1000AAD54;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = sub_1000055B0(&qword_1002AA890);
  v34 = _allocateUninitializedArray<A>(_:)(9, v33);
  *v35 = sub_10002D6B8;
  v35[1] = v21;
  v35[2] = sub_10002D6B8;
  v35[3] = v22;
  v35[4] = sub_10002D6B0;
  v35[5] = v24;
  v35[6] = sub_10002D6B8;
  v35[7] = v25;
  v35[8] = sub_10002D6B8;
  v35[9] = v26;
  v35[10] = sub_1000AA228;
  v35[11] = v28;
  v35[12] = sub_10002D6B8;
  v35[13] = v29;
  v35[14] = sub_10002D6B8;
  v35[15] = v30;
  v35[16] = sub_1000AA228;
  v35[17] = v32;
  v36 = v60;
  sub_100026BBC();
  v37 = v34;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:

    (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v67, v69);
    return (const char *)(*(uint64_t (**)(_BYTE *, uint64_t))(v65 + 8))(v64, v66);
  }
  v80 = 2;
  v79 = 3;
  v77 = "recvmsg";
  result = "recvmsg";
  if ("recvmsg")
  {
    sub_10002C848((uint64_t)"recvmsg", &v78);
    v39 = v78;
    v76 = "%s, bytes=%lu, xid=%lu";
    v40 = v61;
    v41 = v63;
    v42 = v80;
    v43 = v79;
    v44 = v36;
    v45 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16))(v41, v67, v69);
    v59 = v55;
    __chkstk_darwin(v45);
    *(_QWORD *)&v55[-48] = v36;
    v55[-40] = v40;
    *(_QWORD *)&v55[-32] = v41;
    *(_QWORD *)&v55[-24] = v39;
    v58 = "%s, bytes=%lu, xid=%lu";
    *(_QWORD *)&v55[-16] = "%s, bytes=%lu, xid=%lu";
    v74 = 32;
    sub_10002C984();
    sub_10002C9C0();
    v57 = v39;
    sub_10002C9FC();
    UnsignedInteger<>.init<A>(_:)(&v75, &v74);
    v56 = v75;
    v46 = (_BYTE *)static UnsafeMutablePointer.allocate(capacity:)(32, &type metadata for UInt8);
    v47 = sub_1000055B0(&qword_1002AA8B0);
    v48 = sub_10002C8D8(0, v47, v47);
    v49 = sub_10002C8D8(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v73 = v46;
    v72 = v48;
    v71 = v49;
    v50 = v36;
    sub_100006F04(v42, &v73);
    v51 = sub_100006F04(v43, &v73);
    v70 = v37;
    __chkstk_darwin(v51);
    *(_QWORD *)&v55[-32] = &v73;
    *(_QWORD *)&v55[-24] = &v72;
    *(_QWORD *)&v55[-16] = &v71;
    v36 = sub_1000055B0(&qword_1002AA8B8);
    sub_10006D048((unint64_t *)&qword_1002AA8C0, &qword_1002AA8B8);
    v52 = &v70;
    v53 = v62;
    Sequence.forEach(_:)(sub_1000AAD40, &v55[-48], v36, v54);
    if (v53)
    {
      __break(1u);
    }
    else
    {
      v52 = (uint64_t *)v63;
      sub_10002C858(v46, v56, v50, (os_signpost_type_t)v61, (uint64_t)v63, v57, v58);
      v36 = v50;
    }
    sub_10002C928(v48, 0);
    sub_10002C928(v49, 1);
    UnsafeMutablePointer.deallocate()();

    (*(void (**)(uint64_t *, uint64_t))(v68 + 8))(v52, v69);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1000A8EFC()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(void);
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  __int128 v77;
  uint64_t v78;

  sub_10002626C();
  v73 = v1;
  v74 = v0;
  v72 = v2;
  v63 = v3;
  v70 = v4;
  v5 = sub_10000F6E4();
  v67 = *(_QWORD *)(v5 - 8);
  v68 = v5;
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v66 = v7;
  v64 = type metadata accessor for OSSignpostID(0);
  v8 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  sub_10002641C();
  v11 = v10 - v9;
  sub_1000055B0(&qword_1002B1CD0);
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_10003D69C();
  v71 = v13;
  sub_1000A3464();
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - v15;
  v17 = sub_100026B28();
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10003D69C();
  v69 = v19;
  sub_1000A3464();
  __chkstk_darwin(v20);
  v22 = (char *)&v62 - v21;
  v23 = type metadata accessor for SignpostInterval(0);
  sub_1000262EC();
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v62 - v28;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v30 = sub_100006FB4(v17, (uint64_t)qword_1002B6F70);
  sub_10009A5D4((uint64_t)v27, v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v27, 0, 1, v17);
  v31 = &v27[*(int *)(v23 + 20)];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_WORD *)v31 + 8) = 256;
  v32 = v23;
  v33 = v18;
  v65 = v32;
  v34 = *(int *)(v32 + 24);
  *(_QWORD *)&v27[v34] = 0;
  sub_10002CA90((uint64_t)v27, (uint64_t)v16);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v16, 1, v17) == 1)
  {
    v35 = v33;
    sub_100025A28((uint64_t)v16, &qword_1002B1CD0);
    v36 = v74;
  }
  else
  {
    v37 = sub_10009A5D4((uint64_t)v22, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 32));
    *(_QWORD *)v31 = "recvreq";
    *((_QWORD *)v31 + 1) = 7;
    *((_WORD *)v31 + 8) = 2;
    v38 = OSSignposter.logHandle.getter(v37);
    OSSignpostID.init(log:)(v38);
    v36 = v74;
    v39 = sub_1000A98BC((uint64_t)v22, "recvreq", 7, 2, v11, v74);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v64);
    v35 = v33;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v17);
    swift_release();
    *(_QWORD *)&v27[v34] = v39;
  }
  sub_10002D134((uint64_t)v27, (uint64_t)v29);
  v75[0] = 0;
  AnyHashable.init<A>(_:)(&v76, v75);
  sub_100041C8C(v70, &v77);
  v40 = sub_1000AB080();
  if (v78)
  {
    v41 = sub_1000AAF18((uint64_t)v75, (uint64_t)&v77, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data);
    v42 = v35;
    if ((v41 & 1) != 0)
    {
      v43 = v75[0];
      v44 = v75[1];
      Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v73();
      sub_10000E410();
      sub_100022AEC(v43, v44);
      goto LABEL_11;
    }
  }
  else
  {
    sub_1000AAFF8(v40, &qword_1002B34C0);
    v42 = v35;
  }
  sub_10002D82C(v41, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_1000AADDC();
  v51 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v45, v46, v47, v48, v49, v50, 436);
  v53 = v66;
  v52 = v67;
  v54 = v68;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v66, v36 + OBJC_IVAR____TtC13EnsembleAgent9P2PStream_logger, v68);
  __chkstk_darwin(v55);
  *(&v62 - 2) = (uint64_t)v51;
  swift_retain();
  sub_1000E3E30(sub_1000AAD3C, &v62 - 4, v53, v36);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
  swift_willThrow(v56);
  v57 = v51;
  ((void (*)(_QWORD, _QWORD, id))v73)(0, 0, v51);

LABEL_11:
  v58 = v71;
  sub_10002CA90((uint64_t)v29, v71);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v58, 1, v17) == 1)
  {
    sub_100025A28(v58, &qword_1002B1CD0);
LABEL_16:
    sub_10002CB1C((uint64_t)v29);
    sub_10000E4E0();
    return;
  }
  sub_10009A5D4(v69, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32));
  v59 = &v29[*(int *)(v65 + 20)];
  if ((v59[17] & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v60 = *(_QWORD *)&v29[*(int *)(v65 + 24)];
    if (v60)
    {
      v61 = v69;
      sub_1000A9D4C(v69, *(const char **)v59, *((_QWORD *)v59 + 1), v59[16], v60, v63, v36);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v61, v17);
      goto LABEL_16;
    }
  }
  __break(1u);
}

uint64_t sub_1000A9418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v31 = a2;
  v29 = type metadata accessor for OSSignpostID(0);
  v28 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000055B0(&qword_1002B1CD0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v27 - v19;
  v30 = a1;
  swift_retain();
  v21 = sub_1000C3080();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v20, v21, v14);
  v22(v10, (uint64_t)v20, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  v32 = 0;
  v33 = 0;
  v34 = 256;
  sub_1000C30C4((uint64_t)v10, 0, 0, 256, 0, (uint64_t)v13);
  sub_10002CA90((uint64_t)v13, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14) == 1)
  {
    sub_100025A28((uint64_t)v8, &qword_1002B1CD0);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v8, v14);
    v24 = &v13[*(int *)(v11 + 20)];
    *(_QWORD *)v24 = "recvreq";
    *((_QWORD *)v24 + 1) = 7;
    v24[16] = 2;
    v24[17] = 0;
    OSSignposter.makeSignpostID()(v23);
    v25 = sub_1000A98BC((uint64_t)v18, "recvreq", 7, 2, (uint64_t)v4, v30);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    *(_QWORD *)&v13[*(int *)(v11 + 24)] = v25;
    swift_release();
  }
  sub_10002CAD8((uint64_t)v13, v31);
  sub_10002CB1C((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  return swift_release();
}

void sub_1000A9724()
{
  sub_1000A47E0();
}

void sub_1000A9740(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[5];
  __int128 v13;
  __int128 v14;

  if (!a1)
  {
    v13 = 0u;
    v14 = 0u;
    goto LABEL_5;
  }
  *(_QWORD *)&v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
  *((_QWORD *)&v13 + 1) = v2;
  v3 = sub_10002D97C(v13, &type metadata for String, &protocol witness table for String);
  sub_10002D918((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11, v12[0], v12[1], v12[2], v12[3], v12[4], v13);
  sub_10002D33C((uint64_t)v12);
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_5:
    sub_100025A28((uint64_t)&v13, &qword_1002B34C0);
    goto LABEL_6;
  }
  sub_1000AAF18((uint64_t)v12, (uint64_t)&v13, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for UInt);
LABEL_6:
  sub_10000E59C();
}

uint64_t sub_1000A97DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 80));
  return v1;
}

void sub_1000A9808(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[5];
  __int128 v15;
  __int128 v16;

  if (!a1)
  {
    v15 = 0u;
    v16 = 0u;
    goto LABEL_5;
  }
  *(_QWORD *)&v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
  *((_QWORD *)&v15 + 1) = v2;
  *(_QWORD *)&v3 = swift_bridgeObjectRetain().n128_u64[0];
  v5 = sub_10002D97C(v4, &type metadata for String, &protocol witness table for String, v3);
  sub_10002D918((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v13, v14[0], v14[1], v14[2], v14[3], v14[4], v15);
  sub_10002D33C((uint64_t)v14);
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_5:
    sub_100025A28((uint64_t)&v15, &qword_1002B34C0);
    goto LABEL_6;
  }
  sub_1000AAF18((uint64_t)v14, (uint64_t)&v15, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for UInt);
LABEL_6:
  sub_10000E410();
  sub_10000E59C();
}

uint64_t sub_1000A98BC(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_retain_n(a6, 2);
  v15 = OSSignposter.logHandle.getter(v14);
  v16 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_release_n(a6, 2);

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
LABEL_11:
    v24 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    return OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  }
  v30 = v16;
  if ((a4 & 1) != 0)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a2 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (a2 >> 16 <= 0x10)
      {
        v26 = &v33;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (a2)
  {
    v26 = a2;
LABEL_10:
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v28(v13, a5, v10);
    v29 = a5;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v32 = v18;
    *(_DWORD *)v17 = 136315138;
    v27 = v11;
    v20 = *(_QWORD *)(a6 + 72);
    v19 = *(_QWORD *)(a6 + 80);
    swift_bridgeObjectRetain();
    v31 = sub_100006FCC(v20, v19, &v32);
    v21 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4);
    swift_release_n(a6, 2);
    swift_bridgeObjectRelease();
    v23 = OSSignpostID.rawValue.getter(v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, (os_signpost_type_t)v30, v23, v26, "%s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
    v28(v13, v21, v10);
    goto LABEL_11;
  }
LABEL_15:
  result = swift_release_n(a6, 2);
  __break(1u);
  return result;
}

void sub_1000A9B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD v19[4];

  v3 = v2;
  v6 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_retain();
  v19[2] = a2;
  v19[3] = a1;
  sub_10002CA90(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100025A28((uint64_t)v8, &qword_1002B1CD0);
LABEL_9:
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v13 = type metadata accessor for SignpostInterval(0);
  v14 = v3 + *(int *)(v13 + 20);
  v15 = *(const char **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 16);
  if ((*(_BYTE *)(v14 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v3 + *(int *)(v13 + 24));
    swift_retain();
    if (v18)
    {
      sub_1000A9D4C((uint64_t)v12, v15, v16, v17, v18, a2, a1);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t sub_1000A9D4C(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t result;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_signpost_id_t v40;
  os_log_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  LODWORD(v50) = a4;
  v51 = (char *)a2;
  v47 = type metadata accessor for OSSignpostError(0);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v49 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - v16;
  swift_bridgeObjectRetain_n(a6, 4);
  v18 = swift_retain_n(a7, 2);
  v19 = OSSignposter.logHandle.getter(v18);
  v20 = OSSignpostIntervalState.signpostID.getter();
  v48 = static os_signpost_type_t.end.getter(v20);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v44 = v19;
  v45 = a7;
  v46 = v13;
  if ((v50 & 1) == 0)
  {
    if (!v51)
    {
      swift_release_n(v45, 2);
      swift_bridgeObjectRelease_n(a6, 4);
      __break(1u);
LABEL_5:

      swift_release_n(a7, 2);
      v22 = swift_bridgeObjectRelease_n(a6, 4);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v17, v12, v22);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v51 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v51 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v51 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v51 = &v54;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)(v23);
  swift_release();
  v24 = v47;
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v47) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v25 = 0;
    v26 = 0;
    v50 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
    v50 = "%s, bytes=%lu, xid=%lu";
    v26 = 2;
    v25 = 3;
  }
  v27 = v49;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v49, v17, v12);
  v28 = swift_slowAlloc(32, -1);
  v29 = swift_slowAlloc(32, -1);
  v53 = v29;
  *(_BYTE *)v28 = v26;
  *(_BYTE *)(v28 + 1) = v25;
  *(_WORD *)(v28 + 2) = 2080;
  v30 = v45;
  v31 = *(_QWORD *)(v45 + 72);
  v32 = *(_QWORD *)(v45 + 80);
  swift_bridgeObjectRetain();
  v52 = sub_100006FCC(v31, v32, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 4);
  swift_release_n(v30, 2);
  swift_bridgeObjectRelease();
  *(_WORD *)(v28 + 12) = 2048;
  swift_bridgeObjectRetain();
  sub_1000A9740(v33, &RPOptionLength);
  v35 = v34;
  swift_bridgeObjectRelease_n(a6, 2);
  v52 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 14);
  swift_bridgeObjectRelease();
  *(_WORD *)(v28 + 22) = 2048;
  swift_bridgeObjectRetain();
  sub_1000A9740(v36, &RPOptionXID);
  v38 = v37;
  swift_bridgeObjectRelease_n(a6, 2);
  v52 = v38;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 24);
  swift_bridgeObjectRelease();
  v40 = OSSignpostID.rawValue.getter(v39);
  v41 = v44;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, (os_signpost_type_t)v48, v40, v51, v50, (uint8_t *)v28, 0x20u);
  swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1, -1);
  swift_slowDealloc(v28, -1, -1);

  v42 = *(void (**)(char *, uint64_t))(v46 + 8);
  v42(v17, v12);
  return ((uint64_t (*)(char *, uint64_t))v42)(v27, v12);
}

uint64_t sub_1000AA16C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return sub_10002C8F4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000AA188()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000AA1AC()
{
  uint64_t v0;

  sub_1000A9808(*(_QWORD *)(v0 + 16), &RPOptionLength);
}

void sub_1000AA1CC()
{
  uint64_t v0;

  sub_1000A9808(*(_QWORD *)(v0 + 16), &RPOptionXID);
}

uint64_t sub_1000AA1F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000AA220(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10002CE14(*(uint64_t (**)(void))(v1 + 16), a1);
}

void sub_1000AA234(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v9 = sub_10002CE60();
  sub_10002CBE8(a1, a2, a3, v8, v7, (uint64_t)&type metadata for UInt, v9);
}

uint64_t sub_1000AA298()
{
  return type metadata accessor for P2PStream(0);
}

uint64_t type metadata accessor for P2PStream(uint64_t a1)
{
  uint64_t result;

  result = qword_1002AE628;
  if (!qword_1002AE628)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for P2PStream);
  return result;
}

uint64_t sub_1000AA2D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100221C60;
  v4[1] = &unk_100221C78;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3] = &unk_100221C90;
  v4[4] = &unk_100221CA8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100221CC0;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for P2PStream.StreamContext()
{
  return objc_opt_self(_TtCC13EnsembleAgent9P2PStreamP33_C68FBA6105E5D23ADDBC9647FFAAFB8E13StreamContext);
}

uint64_t initializeBufferWithCopyOfBuffer for P2PStream.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000AA3F8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1000AA3F8(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      result = swift_retain(result);
      break;
    case 5:
      result = swift_errorRetain(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for P2PStream.State(uint64_t a1)
{
  return sub_1000AA43C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1000AA43C(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      result = swift_release(result);
      break;
    case 5:
      result = swift_errorRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t assignWithCopy for P2PStream.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000AA3F8(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000AA43C(v5, v6);
  return a1;
}

uint64_t assignWithTake for P2PStream.State(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000AA43C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PStream.State(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 5)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PStream.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PStream.State()
{
  return &type metadata for P2PStream.State;
}

unint64_t sub_1000AA594()
{
  unint64_t result;

  result = qword_1002AE790;
  if (!qword_1002AE790)
  {
    result = swift_getWitnessTable(&unk_100221D28, &type metadata for P2PStream.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AE790);
  }
  return result;
}

uint64_t sub_1000AA5D0(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  switch(a2 >> 61)
  {
    case 0uLL:
    case 5uLL:
      result = swift_errorRetain(result);
      break;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_retain(result);
      break;
    case 4uLL:
      v2 = a2 & 0x1FFFFFFFFFFFFFFFLL;
      swift_retain(result);
      result = swift_retain(v2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000AA624(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  switch(a2 >> 61)
  {
    case 0uLL:
    case 5uLL:
      result = swift_errorRelease(result);
      break;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_release(result);
      break;
    case 4uLL:
      v2 = a2 & 0x1FFFFFFFFFFFFFFFLL;
      swift_release(result);
      result = swift_release(v2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000AA678()
{
  uint64_t v0;

  return sub_1000A74F8(v0, 29, 0xD00000000000001DLL, (void *)0x8000000100255830);
}

uint64_t sub_1000AA6B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A4778(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000AA6B8()
{
  uint64_t v0;

  return sub_1000A74F8(v0, 20, 0xD000000000000014, (void *)0x80000001002558A0);
}

uint64_t sub_1000AA6EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AA718(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A6F8C(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000AA724()
{
  uint64_t v0;

  return sub_1000A74F8(v0, 13, 0x4620646E6553203ALL, (void *)0xED000064656C6961);
}

void sub_1000AA760()
{
  sub_1000404B4();
  sub_1000050D4();
}

uint64_t sub_1000AA780()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_errorRelease(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AA7B4()
{
  uint64_t v0;

  return sub_1000A7588(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000AA7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA7D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000AA7D8()
{
  unint64_t result;

  result = qword_1002AE7C0;
  if (!qword_1002AE7C0)
  {
    result = swift_getWitnessTable(&unk_100221EB4, &type metadata for P2PStream.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE7C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for P2PStream.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000AA860 + 4 * byte_100221C07[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000AA894 + 4 * byte_100221C02[v4]))();
}

uint64_t sub_1000AA894(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA89C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AA8A4);
  return result;
}

uint64_t sub_1000AA8B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AA8B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000AA8BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA8C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PStream.DiagnosticState.CodingKeys()
{
  return &type metadata for P2PStream.DiagnosticState.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for P2PStream.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1000AA5D0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for P2PStream.Event(uint64_t a1)
{
  return sub_1000AA624(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for P2PStream.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1000AA5D0(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000AA624(v5, v6);
  return a1;
}

uint64_t *assignWithTake for P2PStream.Event(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000AA624(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PStream.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7A && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 121;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 57) >> 4) | (8
                                                              * ((*(_QWORD *)(a1 + 8) >> 57) & 8 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
      if (v2 >= 0x79)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for P2PStream.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x79)
  {
    *(_QWORD *)result = a2 - 122;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000AAA48(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 61;
  if (v1 <= 5)
    return v1;
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_1000AAA64(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_1000AAA74(_QWORD *result, uint64_t a2)
{
  if (a2 < 6)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *result = (a2 - 6);
    result[1] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PStream.Event()
{
  return &type metadata for P2PStream.Event;
}

uint64_t destroy for P2PStream.DiagnosticState(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for P2PStream.DiagnosticState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for P2PStream.DiagnosticState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for P2PStream.DiagnosticState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PStreamID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PStreamID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PStream.DiagnosticState()
{
  return &type metadata for P2PStream.DiagnosticState;
}

unint64_t sub_1000AAC54()
{
  unint64_t result;

  result = qword_1002AE7C8;
  if (!qword_1002AE7C8)
  {
    result = swift_getWitnessTable(&unk_100221E8C, &type metadata for P2PStream.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE7C8);
  }
  return result;
}

unint64_t sub_1000AAC94()
{
  unint64_t result;

  result = qword_1002AE7D0;
  if (!qword_1002AE7D0)
  {
    result = swift_getWitnessTable(&unk_100221DFC, &type metadata for P2PStream.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE7D0);
  }
  return result;
}

unint64_t sub_1000AACD4()
{
  unint64_t result;

  result = qword_1002AE7D8;
  if (!qword_1002AE7D8)
  {
    result = swift_getWitnessTable(&unk_100221E24, &type metadata for P2PStream.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AE7D8);
  }
  return result;
}

uint64_t sub_1000AAD40(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return sub_1000AA16C(a1);
}

uint64_t sub_1000AAD58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, v1, v2 + 12);
}

uint64_t sub_1000AAD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _print_unlocked<A, B>(_:_:)(v5 - 120, v5 - 104, a3, v3, v4);
}

void sub_1000AAD88()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(v0 - 128) + 55);
  *(_DWORD *)(v0 - 232) = *(unsigned __int8 *)(*(_QWORD *)(v0 - 128) + 54);
  *(_DWORD *)(v0 - 228) = v1;
  *(_DWORD *)(v0 - 236) = *(unsigned __int8 *)(*(_QWORD *)(v0 - 128) + 53);
}

void sub_1000AADBC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000AADD0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000AADF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return UUID.init(uuid:)(a1, v2, v4, v1, v3, *(unsigned int *)(v5 - 236), *(unsigned int *)(v5 - 232), *(unsigned int *)(v5 - 228));
}

uint64_t sub_1000AAE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a2;
  *(_QWORD *)(v2 - 96) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000AAE30(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return v1 - 120;
}

void sub_1000AAE48()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000AAE54()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 120));
}

uint64_t sub_1000AAE64()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000AAE74()
{
  uint64_t v0;

  return sub_1000AA3F8(v0, 3);
}

BOOL sub_1000AAE80(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000AAE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000AAEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v2 - 96, *(_QWORD *)(v2 - 224), v1 + 22);
}

uint64_t sub_1000AAEBC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000AAED4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void sub_1000AAEF4(id a1)
{

}

uint64_t sub_1000AAF00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 16))(v2, v1 + a1, v3);
}

uint64_t sub_1000AAF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

uint64_t sub_1000AAF20()
{
  return 0;
}

uint64_t sub_1000AAF3C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000AA624(v0, v1);
}

uint64_t sub_1000AAF48()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 - 128) + 80));
}

uint64_t sub_1000AAF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 160) = v4;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 160, v5 - 152, a3, a4);
}

void sub_1000AAF70(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v1);
}

void sub_1000AAF84()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
}

uint64_t sub_1000AAF98(uint64_t a1)
{
  unint64_t v1;

  return sub_1000AA5D0(a1, v1);
}

uint64_t sub_1000AAFA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(*(_QWORD *)(v1 - 200), 2, a1 + 8);
}

void sub_1000AAFB4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_1000AAFC0()
{
  uint64_t v0;

  return sub_1000A97DC(v0);
}

void sub_1000AAFC8()
{
  sub_1000A47E0();
}

void sub_1000AAFD8()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000AAFE8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

void sub_1000AAFF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100025A28(v2 - 120, a2);
}

void sub_1000AB000()
{
  uint64_t v0;
  uint64_t v1;

  sub_100041C8C(v0, (_OWORD *)(v1 - 120));
}

uint64_t sub_1000AB010(uint64_t a1)
{
  unint64_t v1;

  return sub_1000AA5D0(a1, v1);
}

uint64_t sub_1000AB018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000AB028(uint64_t a1)
{
  char v1;
  uint64_t v2;

  sub_1000AA3F8(a1, v1);
  return *(_QWORD *)(v2 - 136);
}

void sub_1000AB060()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000AB070()
{
  uint64_t v0;

  return sub_100006FCC(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96), (uint64_t *)(v0 - 120));
}

uint64_t sub_1000AB080()
{
  uint64_t v0;

  return sub_10002D33C(v0 - 160);
}

uint64_t sub_1000AB088()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000599D0(8, v0, v1);
}

uint64_t sub_1000AB098(uint64_t a1)
{
  return sub_1000AA3F8(a1, 4);
}

uint64_t sub_1000AB0A0()
{
  uint64_t v0;

  return sub_1000AA43C(v0, 4);
}

uint64_t sub_1000AB0AC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 272) = v1;
  *(_QWORD *)(v2 - 200) = result;
  return result;
}

uint64_t sub_1000AB0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

void sub_1000AB0CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000AB0D4()
{
  uint64_t v0;

  return sub_1000AA3F8(v0, 2);
}

uint64_t sub_1000AB0E0()
{
  uint64_t v0;

  return sub_1000AA3F8(v0, 1);
}

uint64_t sub_1000AB0EC()
{
  uint64_t v0;

  return sub_1000AA43C(v0, 3);
}

uint64_t sub_1000AB0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000AB100@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000AB10C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = a1;
  *(_QWORD *)(v3 - 112) = a2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000AB118(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.default.getter(a1, a2);
}

uint64_t sub_1000AB120@<X0>(uint64_t (*a1)(_QWORD, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(*(_QWORD *)(v2 - 216), v1);
}

void sub_1000AB12C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 47;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000AB138()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000AB144()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v0 + 8);
  *(_QWORD *)(v1 - 120) = *(_QWORD *)v0;
  *(_BYTE *)(v1 - 112) = v2;
}

_QWORD *sub_1000AB158()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)((_QWORD *)(v0 - 160), v0 - 120);
}

uint64_t sub_1000AB164(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = a1;
  return v1 - 208;
}

double LocalPointerEvent.location.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LocalPointerEvent.location.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t LocalPointerEvent.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LocalPointerEvent.timestamp.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*HIDPoint.z.modify())(_QWORD)
{
  return CGSize.init(_:);
}

double LocalPointerEvent.acceleratedDelta.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void LocalPointerEvent.acceleratedDelta.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*LocalPointerEvent.acceleratedDelta.modify())(_QWORD)
{
  return CGSize.init(_:);
}

double LocalPointerEvent.unacceleratedDelta.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void LocalPointerEvent.unacceleratedDelta.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*LocalPointerEvent.unacceleratedDelta.modify())(_QWORD)
{
  return CGSize.init(_:);
}

BOOL LocalPointerEvent.nonZeroDelta.getter()
{
  uint64_t v0;

  return fabs(*(double *)(v0 + 24)) > COERCE_DOUBLE(1) || fabs(*(double *)(v0 + 32)) > COERCE_DOUBLE(1);
}

uint64_t LocalPointerEvent.buttons.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t LocalPointerEvent.buttons.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*LocalPointerEvent.buttons.modify())(_QWORD)
{
  return CGSize.init(_:);
}

uint64_t LocalPointerEvent.description.getter()
{
  uint64_t v0;
  double *v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  __int128 v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v1 = (double *)v0;
  BYTE8(v10) = 0;
  _StringGuts.grow(_:)(55);
  v2._object = (void *)0x8000000100255920;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  v11._countAndFlagsBits = CGPoint.description.getter(*v1, v1[1]);
  sub_1000AB404(v11);
  sub_10000E594();
  v3 = sub_1000AB41C();
  sub_1000AB410(v3 & 0xFFFFFFFF0000FFFFLL | 0x64610000);
  v12._countAndFlagsBits = CGPoint.description.getter(v1[3], v1[4]);
  sub_1000AB404(v12);
  sub_10000E594();
  v4._countAndFlagsBits = sub_1000AB41C() & 0xFFFF00000000FFFFLL | 0x3D6461750000;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v13._countAndFlagsBits = CGPoint.description.getter(v1[5], v1[6]);
  sub_1000AB404(v13);
  sub_10000E594();
  v5._countAndFlagsBits = (unsigned __int16)sub_1000AB41C() | 0x6E6F747475620000;
  v5._object = (void *)0xEA00000000003D73;
  String.append(_:)(v5);
  *(_QWORD *)&v10 = *(unsigned __int8 *)(v0 + 56);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  sub_1000AB404(v14);
  sub_10000E594();
  v6 = sub_1000AB41C();
  sub_1000AB410(v6 & 0xFFFFFFFF0000FFFFLL | 0x73740000);
  v7._countAndFlagsBits = HIDTime.description.getter(*(_QWORD *)(v0 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return *(_QWORD *)((char *)&v10 + 1);
}

__n128 initializeWithCopy for LocalPointerEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LocalPointerEvent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocalPointerEvent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for LocalPointerEvent()
{
  return &type metadata for LocalPointerEvent;
}

void sub_1000AB404(Swift::String a1)
{
  String.append(_:)(a1);
}

void sub_1000AB410(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFF0000FFFFFFFFLL | 0x3D00000000;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
}

uint64_t sub_1000AB41C()
{
  return 8236;
}

uint64_t sub_1000AB428()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6F28);
  sub_100006FB4(v0, (uint64_t)qword_1002B6F28);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1195463236, 0xE400000000000000);
}

unint64_t sub_1000AB494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002641C();
  v5 = v4 - v3;
  if ((*(_BYTE *)(v0 + 81) & 1) != 0)
    return 0xD000000000000011;
  v7 = UUID.init(uuid:)(*(_QWORD *)(v0 + 65), *(_QWORD *)(v0 + 65) >> 8, *(_QWORD *)(v0 + 65) >> 16, *(_QWORD *)(v0 + 65) >> 24, HIDWORD(*(_QWORD *)(v0 + 65)), *(_QWORD *)(v0 + 65) >> 40);
  UUID.uuidString.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  v8 = sub_100067680();
  v6 = static String._fromSubstring(_:)(v8);
  sub_10000E594();
  return v6;
}

uint64_t sub_1000AB5C4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;

  _StringGuts.grow(_:)(105);
  v1._object = (void *)0x80000001002559F0;
  v1._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v1);
  v58 = *(_OWORD *)(v0 + 24);
  swift_unknownObjectRetain(v58);
  v2 = sub_1000055B0(&qword_1002AEA38);
  v62._countAndFlagsBits = sub_1000B1FAC(v2, v3, v4, v5, v6, v7, v8, v9, v58);
  sub_1000B2058(v62);
  sub_10000E594();
  v10._object = (void *)0xEA00000000003D73;
  v10._countAndFlagsBits = 0x746E65746E6F6320;
  String.append(_:)(v10);
  *(_QWORD *)&v58 = *(_QWORD *)(v0 + 40);
  swift_retain();
  v11 = sub_1000055B0(&qword_1002AEA40);
  v63._countAndFlagsBits = sub_1000B1FAC(v11, v12, v13, v14, v15, v16, v17, v18, v58);
  sub_1000B2058(v63);
  sub_10000E594();
  v19._countAndFlagsBits = 0x507972746E65202CLL;
  v19._object = (void *)0xED00003D746E696FLL;
  String.append(_:)(v19);
  v59 = *(_OWORD *)(v0 + 48);
  v20 = sub_1000055B0(&qword_1002AEA48);
  v64._countAndFlagsBits = sub_1000B1FAC(v20, v21, v22, v23, v24, v25, v26, v27, v59);
  sub_1000B2058(v64);
  sub_10000E594();
  v28._countAndFlagsBits = 0x3D6469202CLL;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v60 = *(_OWORD *)(v0 + 65);
  v29 = sub_1000055B0(&qword_1002ADF40);
  v65._countAndFlagsBits = sub_1000B1FAC(v29, v30, v31, v32, v33, v34, v35, v36, v60);
  sub_1000B2058(v65);
  sub_10000E594();
  v37._countAndFlagsBits = 0x6F6973736573202CLL;
  v37._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v37);
  *(_QWORD *)&v60 = *(_QWORD *)(v0 + 88);
  swift_retain();
  v38 = sub_1000055B0(&qword_1002AEA50);
  v66._countAndFlagsBits = sub_1000B1FAC(v38, v39, v40, v41, v42, v43, v44, v45, v60);
  sub_1000B2058(v66);
  sub_10000E594();
  v46._countAndFlagsBits = 0x3D656372756F7320;
  v46._object = (void *)0xE800000000000000;
  String.append(_:)(v46);
  v61 = *(_OWORD *)(v0 + 96);
  v47 = sub_1000055B0(&qword_1002B2920);
  v55._countAndFlagsBits = sub_1000B1FAC(v47, v48, v49, v50, v51, v52, v53, v54, v61);
  String.append(_:)(v55);
  sub_10000E410();
  v56._countAndFlagsBits = 41;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  return 0;
}

uint64_t sub_1000AB7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Completions();
  v2 = sub_1000088D8(v1, 24);
  *(_QWORD *)(v2 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 16) = v2;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 73) = 0;
  *(_QWORD *)(v0 + 65) = 0;
  *(_BYTE *)(v0 + 81) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  return v0;
}

_QWORD *sub_1000AB834()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[11]);
  return v0;
}

uint64_t sub_1000AB868()
{
  uint64_t v0;

  sub_1000AB834();
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t sub_1000AB888()
{
  return sub_1000AB5C4();
}

void sub_1000AB8A8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[312];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[7];
  _QWORD v47[6];

  sub_100046998(a1, (uint64_t)v46);
  v41 = v46[0];
  v39 = v46[2];
  v28 = type metadata accessor for DragMessage(0);
  __chkstk_darwin(v28);
  sub_10000E5DC();
  v29 = v3;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  v38 = v5;
  __chkstk_darwin(v4);
  sub_10000E5DC();
  v35 = v6;
  v45 = sub_10000F6E4();
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v31 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000A3464();
  __chkstk_darwin(v8);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v9);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v10);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v11);
  sub_1000A34C8();
  v30 = v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  sub_1000A34C8();
  v40 = v14;
  sub_1000A3464();
  __chkstk_darwin(v15);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v16);
  sub_1000A34C8();
  v36 = v17;
  sub_1000A3464();
  __chkstk_darwin(v18);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v19);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v20);
  sub_1000A34C8();
  v34 = v21;
  sub_1000A3464();
  __chkstk_darwin(v22);
  sub_1000A34C8();
  v33 = v23;
  sub_1000A3464();
  __chkstk_darwin(v24);
  sub_1000A34C8();
  sub_1000A3464();
  __chkstk_darwin(v25);
  v32 = &v27[-v26];
  v44 = v1;
  v42 = a1;
  sub_100046998(a1, (uint64_t)v47);
  __asm { BR              X11 }
}

void sub_1000ABB20(int a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint8_t *v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint8_t *v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  *(_BYTE *)(v6 - 112) = v1 & 0x1F;
  v7 = *(_QWORD *)(v3 + 456);
  v8 = *(_QWORD *)(v6 - 152);
  switch(a1)
  {
    case 1:
      *(_QWORD *)(v3 + 400) = v4 & 0xFFFFFFFFFFFFFFFLL;
      v9 = v2;
      sub_1000B123C(v4);
      sub_100026AE4();
      sub_100060054();
      *(_QWORD *)(v3 + 296) = v4;
      sub_1000B1E08();
      if (qword_1002A9898 != -1)
        swift_once(&qword_1002A9898, sub_1000AB428);
      sub_1000B1CBC(v7, (uint64_t)qword_1002B6F28);
      sub_100026A74(v5, v10, v11);
      v12 = sub_1000088D8((uint64_t)&unk_100288A40, 32);
      *(_QWORD *)(v12 + 16) = sub_1000B1908;
      *(_QWORD *)(v12 + 24) = v8;
      v13 = v12;
      *(_QWORD *)(v3 + 408) = v12;
      sub_1000404AC(v9);
      v14 = swift_retain_n(v8, 3);
      *(_QWORD *)(v3 + 392) = v5;
      v15 = v5;
      v16 = Logger.logObject.getter(v14);
      *(_DWORD *)(v3 + 368) = sub_1000B2484(v16, v17);
      v18 = sub_1000088D8((uint64_t)&unk_100288A68, 17);
      *(_QWORD *)(v3 + 360) = v18;
      sub_1000B2020(v18);
      v19 = sub_1000088D8((uint64_t)&unk_100288A90, 17);
      *(_QWORD *)(v3 + 352) = v19;
      sub_1000B2478(v19);
      v20 = sub_1000088D8((uint64_t)&unk_100288AB8, 32);
      *(_QWORD *)(v20 + 16) = sub_1000B18DC;
      *(_QWORD *)(v20 + 24) = v9;
      v21 = sub_1000088D8((uint64_t)&unk_100288AE0, 32);
      *(_QWORD *)(v3 + 416) = v8;
      v22 = v21;
      *(_QWORD *)(v21 + 16) = sub_10002D6A8;
      *(_QWORD *)(v21 + 24) = v20;
      v23 = sub_1000088D8((uint64_t)&unk_100288B08, 17);
      *(_BYTE *)(v23 + 16) = 32;
      v24 = sub_1000088D8((uint64_t)&unk_100288B30, 17);
      *(_QWORD *)(v3 + 304) = v9;
      v25 = v24;
      *(_BYTE *)(v24 + 16) = v15;
      v26 = sub_1000088D8((uint64_t)&unk_100288B58, 32);
      *(_QWORD *)(v26 + 16) = sub_1000B1914;
      *(_QWORD *)(v26 + 24) = v13;
      v27 = sub_1000088D8((uint64_t)&unk_100288B80, 32);
      *(_QWORD *)(v27 + 16) = sub_10002D6A8;
      *(_QWORD *)(v27 + 24) = v26;
      v28 = sub_1000055B0(&qword_1002AEA58);
      v29 = sub_1000088D8(v28, 128);
      *(_OWORD *)(v29 + 16) = xmmword_100221F60;
      v31 = *(_QWORD *)(v3 + 352);
      v30 = *(_QWORD *)(v3 + 360);
      *(_QWORD *)(v29 + 32) = sub_10002D6B8;
      *(_QWORD *)(v29 + 40) = v30;
      *(_QWORD *)(v29 + 48) = sub_10002D6B8;
      *(_QWORD *)(v29 + 56) = v31;
      *(_QWORD *)(v29 + 64) = sub_10002D6B0;
      *(_QWORD *)(v29 + 72) = v22;
      *(_QWORD *)(v29 + 80) = sub_10002D6B8;
      *(_QWORD *)(v29 + 88) = v23;
      *(_QWORD *)(v29 + 96) = sub_10002D6B8;
      *(_QWORD *)(v29 + 104) = v25;
      *(_QWORD *)(v29 + 112) = sub_10002D6B0;
      *(_QWORD *)(v29 + 120) = v27;
      swift_setDeallocating(v29);
      sub_1000B23C0();
      sub_1000600C0();
      swift_retain();
      sub_100060200();
      sub_1000269EC();
      sub_100026AE4();
      sub_10005FF54();
      *(_QWORD *)(v3 + 384) = v23;
      sub_10006003C();
      *(_QWORD *)(v3 + 376) = v25;
      sub_10002679C();
      sub_100060054();
      sub_100031DC0();
      v32 = *(_DWORD *)(v3 + 368);
      if (sub_1000B2384(*(NSObject **)(v3 + 424)))
      {
        v33 = (uint8_t *)sub_10000797C(22);
        v34 = sub_10000797C(64);
        *(_QWORD *)(v3 + 368) = v34;
        sub_1000B2378(v34);
        *(_WORD *)v33 = v35;
        v33[2] = 34;
        sub_10000FF50();
        v33[3] = 8;
        sub_100026AEC();
        *(_DWORD *)(v3 + 360) = v32;
        v36 = *(_QWORD *)(v3 + 304);
        sub_10018B484();
        *(_QWORD *)(v6 - 232) = sub_1000B1E18(v37, v38);
        *(_QWORD *)(v3 + 352) = v6 - 224;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 232, v6 - 224, v33 + 4);
        sub_100026AEC();
        sub_10000B364();
        sub_100041108();
        sub_10000E420();
        v39 = v36;
        swift_release();
        v33[12] = 32;
        sub_1000B2280();
        v33[13] = 8;
        sub_1000B2094();
        v40 = *(_QWORD *)(v3 + 416);
        sub_100026AE4();
        PasteboardContents.description.getter();
        v42 = v41;
        v44 = v43;
        sub_100026AEC();
        *(_QWORD *)(v6 - 232) = sub_100006FCC(v42, v44, (uint64_t *)(v3 + 544));
        sub_1000B2278(v6 - 232, *(_QWORD *)(v3 + 352), v45, (uint64_t)(v33 + 22));
        swift_release();
        sub_1000955CC();
        sub_10006005C();
        swift_bridgeObjectRelease();
        sub_10000F650(v40);
        v46 = *(NSObject **)(v3 + 424);
        sub_100026A60((void *)&_mh_execute_header, v46, (os_log_type_t)*(_DWORD *)(v3 + 360), "source: continue remote drag, drag contents, session=%{public}s contents=%s", v33);
        v47 = *(_QWORD *)(v3 + 368);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        sub_100007958(v47);
        sub_100007958((uint64_t)v33);

        sub_1000B117C(*(_QWORD *)(v3 + 296));
        sub_1000B1E10(*(_QWORD *)(v3 + 392), *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 432) + 8));
        v48 = *(_QWORD *)(v3 + 448);
        v49 = v40;
        v50 = v39;
      }
      else
      {
        sub_1000B221C();
        v49 = *(_QWORD *)(v3 + 416);
        sub_10000F650(v49);
        swift_release();
        sub_1000955CC();
        sub_10006005C();
        sub_1000B2094();
        sub_1000B2280();
        v146 = *(_QWORD *)(v3 + 304);
        sub_10000F650(v146);
        sub_10000B364();
        sub_100041108();
        sub_100026AEC();
        sub_10000FF50();
        sub_1000B117C(*(_QWORD *)(v3 + 296));
        sub_1000B1E10(*(_QWORD *)(v3 + 392), *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 432) + 8));
        v48 = *(_QWORD *)(v3 + 448);
        v50 = v146;
      }
      v147 = *(_QWORD *)(v3 + 400);
      *(_QWORD *)(v147 + 40) = v49;
      swift_release();
      *(_QWORD *)(v147 + 88) = v50;
      swift_release();
      v145 = *(_QWORD *)(v48 + 72);
      *(_QWORD *)(v48 + 72) = v147 | 0x2000000000000000;
      goto LABEL_28;
    case 3:
      *(_QWORD *)(v3 + 400) = v4 & 0xFFFFFFFFFFFFFFFLL;
      v95 = v2;
      sub_1000B123C(v4);
      sub_100026AE4();
      sub_100060054();
      *(_QWORD *)(v3 + 296) = v4;
      sub_1000B1E08();
      if (qword_1002A9898 != -1)
        swift_once(&qword_1002A9898, sub_1000AB428);
      sub_1000B1CBC(v7, (uint64_t)qword_1002B6F28);
      v96 = *(_QWORD *)(v3 + 352);
      sub_100026A74(v96, v97, v98);
      sub_1000404AC(v95);
      v99 = sub_1000404AC(v8);
      v100 = Logger.logObject.getter(v99);
      *(_DWORD *)(v3 + 408) = sub_1000B2484(v100, v101);
      v102 = sub_1000088D8((uint64_t)&unk_100288900, 17);
      v103 = sub_1000B2020(v102);
      *(_QWORD *)(v3 + 360) = v103;
      v104 = sub_1000088D8((uint64_t)&unk_100288928, 17);
      *(_QWORD *)(v3 + 368) = v104;
      sub_1000B2478(v104);
      v105 = sub_1000088D8((uint64_t)&unk_100288950, 32);
      *(_QWORD *)(v105 + 16) = sub_1000B18DC;
      *(_QWORD *)(v105 + 24) = v95;
      v106 = sub_1000088D8((uint64_t)&unk_100288978, 32);
      *(_QWORD *)(v3 + 304) = v95;
      v107 = v106;
      *(_QWORD *)(v106 + 16) = sub_10002D6A8;
      *(_QWORD *)(v106 + 24) = v105;
      v108 = sub_1000088D8((uint64_t)&unk_1002889A0, 17);
      *(_BYTE *)(v108 + 16) = 0;
      v109 = sub_1000088D8((uint64_t)&unk_1002889C8, 17);
      *(_BYTE *)(v109 + 16) = v96;
      v110 = v8;
      v111 = sub_1000088D8((uint64_t)&unk_1002889F0, 32);
      *(_QWORD *)(v111 + 16) = sub_1000B18E0;
      *(_QWORD *)(v111 + 24) = v110;
      v112 = sub_1000088D8((uint64_t)&unk_100288A18, 32);
      *(_QWORD *)(v112 + 16) = sub_1000AAD54;
      *(_QWORD *)(v112 + 24) = v111;
      v113 = sub_1000055B0(&qword_1002AEA58);
      v114 = sub_1000088D8(v113, 128);
      *(_OWORD *)(v114 + 16) = xmmword_100221F60;
      *(_QWORD *)(v114 + 32) = sub_10002D6B8;
      *(_QWORD *)(v114 + 40) = v103;
      v115 = *(_QWORD *)(v3 + 368);
      *(_QWORD *)(v114 + 48) = sub_10002D6B8;
      *(_QWORD *)(v114 + 56) = v115;
      *(_QWORD *)(v114 + 64) = sub_10002D6B0;
      *(_QWORD *)(v114 + 72) = v107;
      *(_QWORD *)(v114 + 80) = sub_10002D6B8;
      *(_QWORD *)(v114 + 88) = v108;
      *(_QWORD *)(v114 + 96) = sub_10002D6B8;
      *(_QWORD *)(v114 + 104) = v109;
      *(_QWORD *)(v114 + 112) = sub_1000B1BE0;
      *(_QWORD *)(v114 + 120) = v112;
      swift_setDeallocating(v114);
      sub_1000B23C0();
      *(_QWORD *)(v3 + 376) = v105;
      swift_retain();
      *(_QWORD *)(v3 + 416) = v110;
      sub_10005FF54();
      *(_QWORD *)(v3 + 392) = v111;
      sub_100060054();
      swift_retain();
      sub_1000269EC();
      sub_1000600C0();
      *(_QWORD *)(v3 + 384) = v108;
      sub_10006003C();
      sub_10002679C();
      sub_100060200();
      sub_100031DC0();
      v116 = *(void **)(v3 + 424);
      if (sub_1000B2334((os_log_type_t)*(_DWORD *)(v3 + 408)))
      {
        v117 = (uint8_t *)sub_10000797C(22);
        v118 = sub_10000797C(32);
        *(_QWORD *)(v3 + 344) = v118;
        sub_1000B2378(v118);
        *(_WORD *)v117 = v119;
        v117[2] = 34;
        sub_10006005C();
        v117[3] = 8;
        sub_10000FF50();
        sub_1000B2310();
        v122 = sub_1000B1E18(v120, v121);
        v123 = sub_1000B2298(v122);
        sub_1000B2278(v123, v124, v125, v126);
        sub_10000FF50();
        sub_1000B2094();
        sub_10000B364();
        sub_10000E420();
        v127 = v115;
        sub_10000FF50();
        v117[12] = 0;
        sub_1000B2280();
        v117[13] = 8;
        sub_100026AEC();
        v128 = *(_QWORD *)(v3 + 416);
        v129 = *(_QWORD *)(v128 + 32);
        if ((unint64_t)v129 >> 62)
        {
          if (v129 < 0)
            v162 = *(_QWORD *)(v128 + 32);
          else
            v162 = v129 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v130 = _CocoaArrayWrapper.endIndex.getter(v162);
          v131 = v128;
          sub_10000F650(v128);
          v132 = sub_10000E420();
        }
        else
        {
          v130 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10);
          v131 = *(_QWORD *)(v3 + 416);
          v132 = sub_10000F650(v131);
        }
        v135 = *(_QWORD *)(v3 + 448);
        v134 = *(_QWORD *)(v3 + 456);
        v136 = *(_QWORD *)(v3 + 352);
        *(_QWORD *)(v6 - 232) = v130;
        sub_1000B20EC(v132, v133, (uint64_t)(v117 + 14), (uint64_t)(v117 + 22));
        swift_release();
        sub_1000955CC();
        v137 = *(NSObject **)(v3 + 424);
        sub_100026A60((void *)&_mh_execute_header, v137, (os_log_type_t)*(_DWORD *)(v3 + 408), "source: continue remote drag, drag contents (start), session=%{public}s contents=%ld", v117);
        v138 = *(_QWORD *)(v3 + 344);
        sub_1000263F4(v138, v139, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v138);
        sub_100007958((uint64_t)v117);

        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 432) + 8))(v136, v134);
        v140 = v127;
        v141 = v131;
      }
      else
      {

        swift_release();
        sub_1000955CC();
        sub_100026AEC();
        sub_1000B2280();
        v140 = *(_QWORD *)(v3 + 304);
        sub_10000F650(v140);
        sub_1000B2094();
        sub_10000B364();
        sub_10000FF50();
        sub_10006005C();
        v141 = *(_QWORD *)(v3 + 416);
        sub_10000F650(v141);
        sub_1000B1E10(*(_QWORD *)(v3 + 352), *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 432) + 8));
        v135 = *(_QWORD *)(v3 + 448);
      }
      v156 = *(_QWORD *)(v3 + 400);
      *(_QWORD *)(v156 + 40) = v141;
      sub_1000600C0();
      sub_10000B348();
      *(_QWORD *)(v156 + 88) = v140;
      sub_100026AE4();
      sub_10000B348();
      v157 = sub_1000B1D3C();
      v159 = sub_1000B0918(v157, v158, 161);
      sub_100123DB0((uint64_t)v159);
      sub_1000269A0();
      *(_QWORD *)(v135 + 72) = v156 | 0x4000000000000000;
      sub_100060054();
      sub_1000B20A4();
      sub_1000B06A4(v156);
      sub_100026AEC();
      sub_10000B364();
      v160 = *(_QWORD *)(v3 + 296);
      sub_1000B20A4();
      v145 = v160;
      goto LABEL_28;
    case 5:
      v142 = *(_QWORD *)(v4 + 65);
      v143 = *(_QWORD *)(v4 + 73);
      v144 = *(_BYTE *)(v4 + 81);
      sub_1000B1E08();
      sub_100060200();
      sub_1000B1E08();
      sub_10018B3F8();
      if ((v144 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v142, v143))
      {
        v171 = sub_1000B234C();
        v173 = sub_1000B2358(v171, v172);
        sub_1000B1EE4(v173, (uint64_t)"unexpected transition: ");
        sub_1000B2084();
        sub_1000B1CA8(v174, v175, (uint64_t)&type metadata for DragSourceCoordinator.State);
        sub_100040298();
        v176 = sub_1000B2078();
        sub_1000B1CA8(v176, v177, (uint64_t)&type metadata for DragSourceCoordinator.Event);
        sub_1000B24D8();
        sub_1000B1FF4();
        v170 = 230;
LABEL_39:
        ((void (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))_assertionFailure(_:_:file:line:flags:))("Fatal error", 11, 2, v168, v169, "EnsembleAgent/DragSourceCoordinator.swift", 41, 2, v170);
        __break(1u);
        JUMPOUT(0x1000B025CLL);
      }
      sub_10006005C();
      sub_1000B24B4();
      v145 = v4;
LABEL_28:
      sub_1000B117C(v145);
      sub_10009543C();
      return;
    case 9:
      if (v4 != 0x9000000000000000)
        goto LABEL_37;
      v51 = qword_1002A9898;
      v52 = v2;
      swift_retain();
      sub_100060054();
      if (v51 != -1)
        swift_once(&qword_1002A9898, sub_1000AB428);
      sub_1000B1CBC(v7, (uint64_t)qword_1002B6F28);
      v53 = *(_QWORD *)(v3 + 344);
      sub_100026A74(v53, v54, v55);
      sub_1000404AC(v52);
      v56 = sub_1000404AC(v8);
      v57 = Logger.logObject.getter(v56);
      *(_QWORD *)(v3 + 408) = v57;
      *(_DWORD *)(v3 + 400) = static os_log_type_t.default.getter(v57, v58);
      v59 = sub_1000088D8((uint64_t)&unk_100288BA8, 17);
      sub_1000B2020(v59);
      v60 = sub_1000088D8((uint64_t)&unk_100288BD0, 17);
      sub_1000B2478(v60);
      v61 = sub_1000088D8((uint64_t)&unk_100288BF8, 32);
      *(_QWORD *)(v61 + 16) = sub_1000B18DC;
      *(_QWORD *)(v61 + 24) = v52;
      v62 = sub_1000088D8((uint64_t)&unk_100288C20, 32);
      *(_QWORD *)(v62 + 16) = sub_10002D6A8;
      *(_QWORD *)(v62 + 24) = v61;
      v63 = sub_1000088D8((uint64_t)&unk_100288C48, 17);
      *(_QWORD *)(v3 + 424) = v63;
      *(_BYTE *)(v63 + 16) = 0;
      v64 = sub_1000088D8((uint64_t)&unk_100288C70, 17);
      *(_BYTE *)(v64 + 16) = v53;
      v65 = sub_1000088D8((uint64_t)&unk_100288C98, 32);
      v66 = v8;
      *(_QWORD *)(v3 + 416) = v8;
      v67 = v65;
      *(_QWORD *)(v65 + 16) = sub_1000B18E0;
      *(_QWORD *)(v65 + 24) = v66;
      v68 = sub_1000088D8((uint64_t)&unk_100288CC0, 32);
      *(_QWORD *)(v3 + 304) = v52;
      v69 = v68;
      *(_QWORD *)(v68 + 16) = sub_1000AAD54;
      *(_QWORD *)(v68 + 24) = v67;
      v70 = sub_1000055B0(&qword_1002AEA58);
      v71 = sub_1000088D8(v70, 128);
      *(_OWORD *)(v71 + 16) = xmmword_100221F60;
      *(_QWORD *)(v71 + 32) = sub_10002D6B8;
      *(_QWORD *)(v71 + 40) = v59;
      *(_QWORD *)(v71 + 48) = sub_10002D6B8;
      *(_QWORD *)(v71 + 56) = v60;
      *(_QWORD *)(v71 + 64) = sub_10002D6B0;
      *(_QWORD *)(v71 + 72) = v62;
      v72 = *(_QWORD *)(v3 + 424);
      *(_QWORD *)(v71 + 80) = sub_10002D6B8;
      *(_QWORD *)(v71 + 88) = v72;
      *(_QWORD *)(v71 + 96) = sub_10002D6B8;
      *(_QWORD *)(v71 + 104) = v64;
      *(_QWORD *)(v71 + 112) = sub_1000B1BE0;
      *(_QWORD *)(v71 + 120) = v69;
      swift_setDeallocating(v71);
      sub_1000B23C0();
      *(_QWORD *)(v3 + 376) = v61;
      swift_retain();
      swift_retain();
      sub_100060054();
      sub_100026AE4();
      sub_10006003C();
      sub_1000600C0();
      swift_retain();
      sub_10002679C();
      sub_10005FF54();
      sub_100031DC0();
      v73 = *(void **)(v3 + 408);
      if (sub_1000B2334((os_log_type_t)*(_DWORD *)(v3 + 400)))
      {
        v64 = sub_10000797C(22);
        v74 = sub_10000797C(32);
        *(_QWORD *)(v3 + 360) = v74;
        sub_1000B2378(v74);
        sub_1000B2268(v75);
        sub_100026AEC();
        *(_BYTE *)(v64 + 3) = 8;
        sub_10006005C();
        sub_1000B2310();
        v78 = sub_1000B1E18(v76, v77);
        sub_1000B2158(v78, v79, v80, v64 + 12);
        sub_10000FF50();
        sub_1000B2094();
        sub_10000B364();
        sub_10000E420();
        sub_10000FF50();
        *(_BYTE *)(v64 + 12) = 0;
        swift_release();
        *(_BYTE *)(v64 + 13) = 8;
        sub_10005FF18();
        v81 = *(_QWORD *)(v3 + 416);
        v82 = *(_QWORD *)(v81 + 32);
        if ((unint64_t)v82 >> 62)
        {
          if (v82 < 0)
            v161 = *(_QWORD *)(v81 + 32);
          else
            v161 = v82 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v83 = _CocoaArrayWrapper.endIndex.getter(v161);
          sub_10000F650(v81);
          v84 = sub_10000E420();
        }
        else
        {
          v83 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
          v84 = sub_10000F650(*(_QWORD *)(v3 + 416));
        }
        v86 = *(_QWORD *)(v3 + 456);
        v87 = *(_QWORD *)(v3 + 384);
        v88 = *(_QWORD *)(v3 + 368);
        v89 = *(NSObject **)(v3 + 408);
        *(_QWORD *)(v6 - 232) = v83;
        sub_1000B20EC(v84, v85, v64 + 14, v64 + 22);
        sub_1000955CC();
        sub_100041108();
        sub_100026A60((void *)&_mh_execute_header, v89, (os_log_type_t)*(_DWORD *)(v3 + 400), "begin remote drag, drag-contents first, session=%{public}s contents=%ld", (uint8_t *)v64);
        v90 = *(_QWORD *)(v3 + 360);
        sub_1000263F4(v90, v91, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v90);
        sub_100007958(v64);

        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 + 432) + 8))(*(_QWORD *)(v3 + 344), v86);
        v92 = *(_QWORD *)(v3 + 304);
        v93 = *(_QWORD *)(v3 + 416);
        v94 = *(_QWORD *)(v3 + 448);
      }
      else
      {

        sub_1000955CC();
        sub_100041108();
        sub_10005FF18();
        swift_release();
        v92 = *(_QWORD *)(v3 + 304);
        sub_10000F650(v92);
        sub_1000B2094();
        sub_10000B364();
        sub_10006005C();
        sub_100026AEC();
        v93 = *(_QWORD *)(v3 + 416);
        sub_10000F650(v93);
        sub_1000B1E10(*(_QWORD *)(v3 + 344), *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 432) + 8));
        v94 = *(_QWORD *)(v3 + 448);
        v87 = *(_QWORD *)(v3 + 384);
        v88 = *(_QWORD *)(v3 + 368);
      }
      v148 = type metadata accessor for DragSourceCoordinator.Context();
      sub_1000088D8(v148, 113);
      sub_1000B2404();
      *(_QWORD *)(v64 + 40) = v93;
      sub_100060054();
      sub_10000B348();
      v149 = *(_QWORD *)(v3 + 392);
      v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 16))(v88, v92 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_uuid, v87);
      v152 = UUID.uuid.getter(v150, v151);
      v153 = sub_1000B1CD8(v152);
      v155 = v154;
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v88, v87);
      sub_10006005C();
      *(_QWORD *)(v64 + 65) = v153;
      *(_QWORD *)(v64 + 73) = v155;
      *(_BYTE *)(v64 + 81) = 0;
      *(_QWORD *)(v64 + 88) = v92;
      swift_release();
      v145 = *(_QWORD *)(v94 + 72);
      *(_QWORD *)(v94 + 72) = v64;
      goto LABEL_28;
    default:
LABEL_37:
      sub_1000B1FB8();
      v163 = sub_1000B2004();
      sub_1000B1EE4(v163, (uint64_t)"source: unexpected transition: ");
      sub_1000B2084();
      sub_1000B1CA8(v164, v165, (uint64_t)&type metadata for DragSourceCoordinator.State);
      sub_100040298();
      v166 = sub_1000B2078();
      sub_1000B1CA8(v166, v167, (uint64_t)&type metadata for DragSourceCoordinator.Event);
      sub_1000B1FF4();
      v170 = 326;
      goto LABEL_39;
  }
}

void sub_1000B0474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(a1 + 32);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter(v2);
    sub_10000E410();
  }
  sub_1000050D4();
}

unint64_t sub_1000B04C8()
{
  return 0xD000000000000013;
}

void sub_1000B04E4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000B1D50(a1, a2);
  sub_1000B2438();
  __chkstk_darwin(v4);
  v5 = sub_1000B1DAC();
  UUID.uuidString.getter(v5);
  sub_1000B2184();
  v6 = sub_1000599D0(8, v2, v3);
  static String._fromSubstring(_:)(v6);
  sub_10000E410();
  sub_10000E4E0();
}

unint64_t sub_1000B0560()
{
  return 0xD00000000000003BLL;
}

uint64_t sub_1000B057C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  if (!v1)
    return -1;
  v2 = *(_QWORD *)(v1 + 32);
  if (!((unint64_t)v2 >> 62))
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2 < 0)
    v4 = *(_QWORD *)(v1 + 32);
  else
    v4 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_1000B05E8()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(50, 1);
  v0._object = (void *)0x8000000100255BD0;
  v0._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v0);
  v1._countAndFlagsBits = sub_1000AB494();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_1000B066C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  swift_errorRetain(a1);
  v1 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  return String.init<A>(describing:)(&v3, v1);
}

uint64_t sub_1000B06A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *sub_10000DBE4((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  sub_1000088D0();
  v4 = sub_10002D790();
  return sub_10008BBD4(v4, v3, v1, a1);
}

uint64_t sub_1000B06EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  __int128 v13[3];

  if ((a3 & 1) != 0)
  {
    *(_QWORD *)&v13[0] = a1;
    sub_1000B222C();
    swift_errorRetain(a1);
    sub_1000AB8A8(v13);
  }
  else
  {
    v10 = sub_1000B219C();
    sub_1000088D8(v10, 48);
    sub_1000B169C(a1, a2, 0);
    sub_1000600C0();
    v11 = Completion.init(file:line:body:)(0xD000000000000064, 0x8000000100255A60, 346, (uint64_t)sub_1000B1694, a4);
    sub_10008F630((uint64_t)v11);
    sub_1000B24E4(a1 + OBJC_IVAR____TtC13EnsembleAgentP33_C3FAC2075782822A8A1290894C38714014DragSource_iOS_delegate, (uint64_t)&off_100287D18);
    *(_QWORD *)(a5 + 24) = a1;
    *(_QWORD *)(a5 + 32) = a2;
    swift_unknownObjectRetain(a1);
    sub_10000F718();
    sub_1000B2208();
    sub_10006005C();
  }
  return sub_1000B1688(a1, a2, a3 & 1);
}

void sub_1000B07F8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char v6;

  if (a1)
  {
    v2 = a1;
    v3 = 0u;
    v4 = 0u;
    v5 = 0;
    v6 = -64;
    swift_errorRetain(a1);
    sub_1000AB8A8((__int128 *)&v2);
    swift_errorRelease(a1);
  }
  else
  {
    v2 = 1;
    v3 = 0u;
    v4 = 0u;
    v5 = 0;
    v6 = -32;
    sub_1000AB8A8((__int128 *)&v2);
  }
}

void sub_1000B0880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  if (*(_QWORD *)(a3 + 80) == a2)
  {
    if (a1)
    {
      v4 = a1;
      v5 = 0u;
      v6 = 0u;
      v7 = 0;
      v8 = -64;
      swift_errorRetain(a1);
      sub_1000AB8A8((__int128 *)&v4);
      swift_errorRelease(a1);
    }
    else
    {
      v4 = 1;
      v5 = 0u;
      v6 = 0u;
      v7 = 0;
      v8 = -32;
      sub_1000AB8A8((__int128 *)&v4);
    }
  }
}

_QWORD *sub_1000B0918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + 80);
  v8 = sub_1000088D8((uint64_t)&unk_100287DE8, 32);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = sub_1000B219C();
  sub_1000088D8(v9, 48);
  swift_bridgeObjectRetain();
  sub_1000088D0();
  return Completion.init(file:line:body:)(a1, a2, a3, (uint64_t)sub_1000B1680, v8);
}

void sub_1000B09A4()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  id v20;
  unint64_t v21[2];
  unint64_t v22;

  v2 = *(_QWORD *)(v0 + 72) >> 60;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x27;
  if (v3 || v4 == 0)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(0xE000000000000000);
    v21[1] = 0xD000000000000022;
    v22 = 0x8000000100253710;
    v21[0] = *(_QWORD *)(v0 + 72);
    sub_1000B123C(v21[0]);
    v6._countAndFlagsBits = String.init<A>(describing:)(v21, &type metadata for DragSourceCoordinator.State);
    String.append(_:)(v6);
    sub_10000E594();
    v7 = v22;
    v8 = sub_100040400();
    swift_bridgeObjectRetain(v7);
    sub_1000B21A4();
    v9 = v8;
    v16 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v10, v11, v12, v13, v14, v15, 397);
    swift_bridgeObjectRelease(v7);
    if (qword_1002A9898 != -1)
      swift_once(&qword_1002A9898, sub_1000AB428);
    v17 = sub_10000F6E4();
    sub_10005FE9C(v17, (uint64_t)qword_1002B6F28);
    v18 = sub_10002D844();
    if (sub_1000403A4(v18))
    {
      v19 = (_WORD *)sub_10000797C(2);
      sub_1000B2244(v19);
      sub_10005FF70((void *)&_mh_execute_header, v9, (os_log_type_t)v7, "source: drag check, not in active state", v1);
      sub_100007958((uint64_t)v1);
    }

    v20 = v16;
    Completion.callAsFunction(_:)((uint64_t)v16);

  }
  else
  {
    Completion.callAsFunction(_:)(0);
  }
}

void sub_1000B0B50()
{
  __asm { BR              X10 }
}

void sub_1000B0BA0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  __int128 v10;

  if ((*(_BYTE *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x70) & 1) != 0)
  {
    sub_1000B1E08();
  }
  else
  {
    v5 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
    v4 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x68);
    sub_1000B1E08();
    if (!sub_1000B231C(v5, v4))
    {
      sub_1000B20A4();
      goto LABEL_9;
    }
  }
  v6 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
  if (!v6)
  {
    sub_1000B117C(v0);
    return;
  }
  v2 = sub_1000B231C(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  sub_1000B20A4();
  if (v2)
    return;
LABEL_9:
  if (qword_1002A9898 != -1)
    swift_once(&qword_1002A9898, sub_1000AB428);
  v7 = sub_10000F6E4();
  sub_10005FE9C(v7, (uint64_t)qword_1002B6F28);
  v8 = sub_10002D844();
  if (sub_1000403A4(v8))
  {
    v9 = (_WORD *)sub_10000797C(2);
    sub_1000B2244(v9);
    sub_10005FF70((void *)&_mh_execute_header, v0, (os_log_type_t)v2, "source: peer matches drag source, cancelling", v3);
    sub_100007958((uint64_t)v3);
  }

  *(_QWORD *)&v10 = v1;
  sub_1000B222C();
  sub_1000AB8A8(&v10);
}

void sub_1000B0CBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD v40[5];
  char v41;
  id v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;

  v7 = sub_10000F6E4();
  __chkstk_darwin(v7);
  sub_10002641C();
  v8 = a1[9];
  if (((1 << (v8 >> 60)) & 0x1DF) != 0)
  {
    sub_100040400();
    sub_10002679C();
    sub_10002D790();
    sub_1000B21A4();
    v15 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v9, v10, v11, v12, v13, v14, 478);
    if (qword_1002A9898 != -1)
      swift_once(&qword_1002A9898, sub_1000AB428);
    v16 = sub_100006FB4(v7, (uint64_t)qword_1002B6F28);
    v17 = sub_1000B21B0(v16);
    __chkstk_darwin(v17);
    *(&v39 - 2) = (uint64_t)v15;
    sub_1000E25E0(sub_100026210);
    sub_1000B2288();
    v42 = v15;
    v43 = 0u;
    v44 = 0u;
    v45 = 0;
    v46 = -64;
    sub_1000AB8A8((__int128 *)&v42);
    v40[0] = v15;
    v41 = 1;
    v18 = v15;
    sub_1000B21F4((uint64_t)v40);

    v19 = (id *)v40;
LABEL_5:
    sub_1000B161C((uint64_t)v19);
LABEL_6:
    swift_release();
    goto LABEL_7;
  }
  if (v8 >> 60 != 5)
  {
    sub_100040400();
    sub_10002679C();
    sub_10002D790();
    sub_1000B21A4();
    v33 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v27, v28, v29, v30, v31, v32, 473);
    if (qword_1002A9898 != -1)
      swift_once(&qword_1002A9898, sub_1000AB428);
    v34 = sub_100006FB4(v7, (uint64_t)qword_1002B6F28);
    v35 = sub_1000B21B0(v34);
    __chkstk_darwin(v35);
    sub_100095520();
    sub_1000E25E0(sub_100026210);
    sub_1000B2288();
    v42 = v33;
    LOBYTE(v45) = 1;
    v36 = v33;
    sub_1000B21F4((uint64_t)&v42);

    v19 = &v42;
    goto LABEL_5;
  }
  v20 = *(_QWORD *)(v8 + 88);
  if (v20)
  {
    v21 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
    if (v21)
    {
      sub_1000404AC(a2);
      sub_1000404AC(a3);
      sub_1000B123C(v8);
      v22 = qword_1002A9898;
      sub_10006003C();
      sub_10005FF54();
      if (v22 != -1)
        swift_once(&qword_1002A9898, sub_1000AB428);
      sub_10005FE9C(v7, (uint64_t)qword_1002B6F28);
      v23 = sub_10002D844();
      if (sub_10002D948(v23))
      {
        v39 = v21;
        v24 = (uint8_t *)sub_10000797C(2);
        *(_WORD *)v24 = 0;
        sub_10005FF70((void *)&_mh_execute_header, v22, (os_log_type_t)v7, "coordinator: replying to sink with remote drag contents", v24);
        v25 = (uint64_t)v24;
        v21 = v39;
        sub_100007958(v25);
      }

      v26 = *sub_10000DBE4(a1 + 2, a1[5]);
      sub_10002679C();
      sub_10002D790();
      sub_10008C2F8(v20, v21, v26);
      sub_1000B117C(v8);
      swift_release();
      sub_10000F650(a2);
      sub_10005FF18();
      goto LABEL_6;
    }
  }
  sub_1000404AC(a2);
  sub_1000404AC(a3);
  sub_1000B123C(v8);
  if (qword_1002A9898 != -1)
    swift_once(&qword_1002A9898, sub_1000AB428);
  sub_10005FE9C(v7, (uint64_t)qword_1002B6F28);
  v37 = sub_10002D844();
  if (sub_10002D948(v37))
  {
    v38 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v38 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v3, (os_log_type_t)v7, "coordinator: beginning local sink session with drag platform", v38);
    sub_100007958((uint64_t)v38);
  }

  sub_10000DBE4(a1 + 2, a1[5]);
  sub_10002679C();
  sub_10002D790();
  sub_10008BEF8();
  sub_1000B117C(v8);
  swift_release();
  sub_10000F650(a2);
LABEL_7:
  sub_1000269A0();
  sub_10000F650(a3);
  sub_10009543C();
}

uint64_t DragSourceCoordinator.deinit()
{
  uint64_t v0;

  sub_100005988((_QWORD *)(v0 + 16));
  sub_10000AEBC(v0 + 56);
  sub_1000B117C(*(_QWORD *)(v0 + 72));
  return v0;
}

unint64_t sub_1000B117C(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      result &= 0xFFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_release(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DragSourceCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  DragSourceCoordinator.deinit();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for DragSourceCoordinator()
{
  return objc_opt_self(_TtC13EnsembleAgent21DragSourceCoordinator);
}

uint64_t type metadata accessor for DragSourceCoordinator.Context()
{
  return objc_opt_self(_TtCC13EnsembleAgent21DragSourceCoordinator7Context);
}

unint64_t *initializeBufferWithCopyOfBuffer for DragSourceCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1000B123C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000B123C(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      result &= 0xFFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_retain(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for DragSourceCoordinator.State(unint64_t *a1)
{
  return sub_1000B117C(*a1);
}

unint64_t *assignWithCopy for DragSourceCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1000B123C(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1000B117C(v4);
  return a1;
}

unint64_t *assignWithTake for DragSourceCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1000B117C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragSourceCoordinator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x77 && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 118;
    }
    else
    {
      v2 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x76)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragSourceCoordinator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x76)
  {
    *(_QWORD *)result = a2 - 119;
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x77)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000B1374(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 8)
    return v1;
  else
    return (*a1 >> 3) + 9;
}

_QWORD *sub_1000B1390(_QWORD *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000B13A0(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 9)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 9);
    v3 = 0x9000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DragSourceCoordinator.State()
{
  return &type metadata for DragSourceCoordinator.State;
}

#error "1000B15AC: call analysis failed (funcsize=136)"

uint64_t sub_1000B161C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002ADCB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B165C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B1680(uint64_t a1)
{
  uint64_t v1;

  sub_1000B0880(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000B1688(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_unknownObjectRelease(a1);
}

void sub_1000B1694(uint64_t a1)
{
  sub_1000B07F8(a1);
}

uint64_t sub_1000B169C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_unknownObjectRetain(a1);
}

uint64_t sub_1000B16A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  switch(a7 >> 5)
  {
    case 0:
      swift_retain(result);
      result = a2;
      goto LABEL_4;
    case 2:
LABEL_4:
      result = swift_retain(result);
      break;
    case 3:
      result = swift_unknownObjectRetain(a3);
      break;
    case 4:
      result = swift_bridgeObjectRetain(result);
      break;
    case 5:
    case 6:
      result = swift_errorRetain(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B1704()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B1730(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  sub_1000050D4();
}

uint64_t sub_1000B1768(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  switch(a7 >> 5)
  {
    case 0:
      swift_release(result);
      result = a2;
      goto LABEL_4;
    case 2:
LABEL_4:
      result = swift_release(result);
      break;
    case 3:
      result = swift_unknownObjectRelease(a3);
      break;
    case 4:
      result = swift_bridgeObjectRelease(result);
      break;
    case 5:
    case 6:
      result = swift_errorRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B17D0()
{
  uint64_t v0;

  return sub_1000B066C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000B17F0()
{
  return sub_1000B05E8();
}

uint64_t sub_1000B1808()
{
  uint64_t v0;

  return sub_1000B057C(v0);
}

void sub_1000B1820(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1001A9B10(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1000B1838()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_1000B1844()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_1000B1850()
{
  uint64_t v0;

  return sub_1000B84BC(*(void (**)(double *__return_ptr))(v0 + 16));
}

uint64_t sub_1000B1858()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

void sub_1000B1864()
{
  uint64_t v0;

  sub_1000B04E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000B1894()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_1000B18A0()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

__n128 sub_1000B18AC@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t sub_1000B18B8()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

void sub_1000B18E0()
{
  uint64_t v0;

  sub_1000B0474(v0);
}

uint64_t sub_1000B1908@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain(v1);
}

uint64_t sub_1000B1914()
{
  uint64_t v0;

  return sub_1000B84EC(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t destroy for DragSourceCoordinator.Event(uint64_t a1)
{
  return sub_1000B1768(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for DragSourceCoordinator.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1000B16A8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for DragSourceCoordinator.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1000B16A8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_1000B1768(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for DragSourceCoordinator.Event(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_1000B1768(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragSourceCoordinator.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x79 && *(_BYTE *)(a1 + 49))
    {
      v2 = *(_DWORD *)a1 + 120;
    }
    else
    {
      v2 = ((*(unsigned __int8 *)(a1 + 48) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 48) >> 1) & 0xF))) ^ 0x7F;
      if (v2 >= 0x78)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragSourceCoordinator.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x78)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 121;
    if (a3 >= 0x79)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x79)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 48) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1000B1B64(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 48) >> 5;
  if (v1 == 7)
    return (*(_DWORD *)a1 + 7);
  else
    return v1;
}

uint64_t sub_1000B1B80(uint64_t result)
{
  *(_BYTE *)(result + 48) &= 0x1Fu;
  return result;
}

uint64_t sub_1000B1B90(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 7)
  {
    v2 = *(_BYTE *)(result + 48) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 7;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    v2 = -32;
  }
  *(_BYTE *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for DragSourceCoordinator.Event()
{
  return &type metadata for DragSourceCoordinator.Event;
}

uint64_t sub_1000B1CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return _print_unlocked<A, B>(_:_:)(v3 + 544, v6 - 232, a3, v4, v5);
}

uint64_t sub_1000B1CBC(uint64_t a1, uint64_t a2)
{
  return sub_100006FB4(a1, a2);
}

uint64_t sub_1000B1CD8(unint64_t a1)
{
  return UniversalControlUUID.init(rawValue:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40, HIWORD(a1), HIBYTE(a1));
}

unint64_t sub_1000B1D3C()
{
  return 0xD000000000000064;
}

uint64_t sub_1000B1D50(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1 >> 16;
  *(_QWORD *)(v2 - 88) = a1 >> 8;
  *(_QWORD *)(v2 - 112) = HIDWORD(a1);
  *(_QWORD *)(v2 - 104) = a1 >> 24;
  *(_QWORD *)(v2 - 128) = HIWORD(a1);
  *(_QWORD *)(v2 - 120) = a1 >> 40;
  *(_QWORD *)(v2 - 144) = a2 >> 8;
  *(_QWORD *)(v2 - 136) = HIBYTE(a1);
  *(_QWORD *)(v2 - 152) = a2 >> 16;
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000B1DAC()
{
  uint64_t v0;
  uint64_t v1;

  return UUID.init(uuid:)(v0, *(_QWORD *)(v1 - 88), *(_QWORD *)(v1 - 96), *(_QWORD *)(v1 - 104), *(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 120), *(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 136));
}

unint64_t sub_1000B1E08()
{
  unint64_t v0;

  return sub_1000B123C(v0);
}

uint64_t sub_1000B1E10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 456));
}

uint64_t sub_1000B1E18(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 + 544));
}

uint64_t sub_1000B1E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 232, v5 - 224, v4, a4);
}

void sub_1000B1E3C(unsigned __int8 *a1@<X8>)
{
  _DWORD *v1;

  v1[106] = a1[73];
  v1[104] = a1[74];
  v1[102] = a1[75];
  v1[100] = a1[76];
  v1[98] = a1[77];
  v1[96] = a1[78];
  v1[94] = a1[79];
  v1[92] = a1[80];
}

uint64_t sub_1000B1ECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return swift_beginAccess(a1 + v1, v2 + 544, 0, 0);
}

void sub_1000B1EE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

_BYTE *sub_1000B1EF4(_BYTE *result)
{
  _QWORD *v1;

  result[17] = v1[27];
  result[18] = v1[33];
  result[19] = v1[32];
  result[20] = v1[31];
  result[21] = v1[30];
  result[22] = v1[29];
  result[23] = v1[28];
  result[24] = v1[44];
  return result;
}

uint64_t sub_1000B1F38(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 + 544));
}

uint64_t sub_1000B1F40()
{
  uint64_t v0;
  unsigned int *v1;

  return UUID.init(uuid:)(v0, v1[106], v1[104], v1[102], v1[100], v1[98], v1[96], v1[94]);
}

uint64_t sub_1000B1FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return String.init<A>(describing:)(&a9, a1);
}

void sub_1000B1FB8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 544) = 0;
  *(_QWORD *)(v0 + 552) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
}

uint64_t sub_1000B1FD0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = 0x9000000000000008;
  sub_1000B117C(v1);
  return swift_unknownObjectWeakLoadStrong(v0 + 56);
}

unint64_t sub_1000B2004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v1 - 232) = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v1 - 224) = v2;
  return 0xD00000000000001FLL;
}

uint64_t sub_1000B2020(uint64_t result)
{
  *(_BYTE *)(result + 16) = 34;
  return result;
}

_BYTE *sub_1000B202C(_BYTE *result)
{
  _QWORD *v1;

  result[27] = v1[53];
  result[28] = v1[47];
  result[29] = v1[52];
  result[30] = v1[51];
  result[31] = v1[50];
  return result;
}

void sub_1000B2058(Swift::String a1)
{
  String.append(_:)(a1);
}

unint64_t sub_1000B2064()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = 0x9000000000000008;
  return sub_1000B117C(v1);
}

uint64_t sub_1000B2078()
{
  uint64_t v0;

  return sub_100046998(*(__int128 **)(v0 + 424), v0 + 544);
}

void sub_1000B2084()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 544) = *(_QWORD *)(*(_QWORD *)(v0 + 448) + 72);
}

uint64_t sub_1000B2094()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 376));
}

void sub_1000B209C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  sub_1000B1730(v2, a2);
}

unint64_t sub_1000B20A4()
{
  unint64_t v0;

  return sub_1000B117C(v0);
}

BOOL sub_1000B20AC(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B20B4()
{
  _QWORD *v0;

  return UUID.init(uuid:)(v0[42], v0[10], v0[26], v0[25], v0[24], v0[23], v0[22], v0[21]);
}

uint64_t sub_1000B20D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 232, v3 - 224, v2, v1 + 12);
}

uint64_t sub_1000B20EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 232, v4 - 224, a3, a4);
}

uint64_t sub_1000B20FC(uint64_t a1)
{
  uint64_t v1;

  return swift_storeEnumTagMultiPayload(a1, *(_QWORD *)(v1 + 312), 3);
}

uint64_t sub_1000B2108()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 448) + 56);
}

uint64_t sub_1000B2124(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  return sub_10003EC38(v1[56], v2, v1[54], v1[57], a1);
}

unint64_t sub_1000B2140()
{
  unint64_t v0;

  return sub_1000B123C(v0);
}

unint64_t sub_1000B2148()
{
  unint64_t v0;

  return sub_1000B117C(v0);
}

BOOL sub_1000B2150(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B2158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 232, v5 - 224, v4, a4);
}

uint64_t sub_1000B2170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000B2178(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1000B2184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000B219C()
{
  return type metadata accessor for Completion();
}

uint64_t sub_1000B21B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

uint64_t sub_1000B21C4(uint64_t a1)
{
  _QWORD *v1;

  return UUID.init(uuid:)(a1, v1[27], v1[33], v1[32], v1[31], v1[30], v1[29], v1[28]);
}

uint64_t sub_1000B21F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  return sub_1000C70A4(a1, v2, v1, v4, v3);
}

uint64_t sub_1000B2208()
{
  return sub_1001116B8(0);
}

uint64_t sub_1000B2214()
{
  uint64_t v0;

  return swift_errorRetain(*(_QWORD *)(v0 + 416));
}

void sub_1000B221C()
{
  uint64_t v0;

}

uint64_t sub_1000B2224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = v2;
  return swift_setDeallocating();
}

double sub_1000B222C()
{
  return 0.0;
}

_WORD *sub_1000B2244(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000B2250()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1000B2258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v1 - 232) = v2;
  return swift_errorRetain(v2);
}

void sub_1000B2268(__int16 a1@<W8>)
{
  uint64_t v1;

  *(_WORD *)v1 = a1;
  *(_BYTE *)(v1 + 2) = 34;
}

uint64_t sub_1000B2278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_1000B2280()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 384));
}

uint64_t sub_1000B2288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B2298(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = a1;
  return v1 - 232;
}

uint64_t sub_1000B22B0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1000B22B8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000B22C0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(_QWORD, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(*(_QWORD *)(v2 + 376), a1, v3);
}

uint64_t sub_1000B22D0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1000B22D8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1000B22E0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 280));
}

uint64_t sub_1000B22E8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 288));
}

uint64_t sub_1000B22F0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 312));
}

uint64_t sub_1000B22F8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 272));
}

void sub_1000B2310()
{
  sub_10018B484();
}

uint64_t sub_1000B231C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v3, v2);
}

void sub_1000B2328(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  sub_1000B1730(*(_QWORD *)(v2 + 424), a2);
}

BOOL sub_1000B2334@<W0>(os_log_type_t a1@<W8>)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B2340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10003EC38(a1, a2, a3, a4, v4);
}

uint64_t sub_1000B234C()
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(27, 2);
}

unint64_t sub_1000B2358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = a1;
  *(_QWORD *)(v2 - 224) = a2;
  return 0xD000000000000017;
}

uint64_t sub_1000B236C(uint64_t a1)
{
  uint64_t v1;

  return String.init<A>(describing:)(v1 - 232, a1);
}

uint64_t sub_1000B2378(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 544) = result;
  return result;
}

BOOL sub_1000B2384(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_1000B238C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  sub_1000B1730(*(_QWORD *)(v2 + 424), a2);
}

uint64_t sub_1000B2394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = v2;
  return swift_setDeallocating();
}

unint64_t sub_1000B239C()
{
  unint64_t v0;

  return sub_1000B117C(v0);
}

uint64_t sub_1000B23A4()
{
  uint64_t v0;

  return sub_10003FD88(v0);
}

uint64_t sub_1000B23AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 3, a3);
}

uint64_t sub_1000B23B8()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 56);
}

uint64_t sub_1000B23C0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 304));
}

uint64_t sub_1000B23C8(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return sub_1000E45AC(a1, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_1000B23D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100006FB4(*(_QWORD *)(v2 + 456), a2);
}

void sub_1000B23F8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  sub_1000B1730(*(_QWORD *)(v2 + 424), a2);
}

uint64_t sub_1000B2404()
{
  return sub_1000AB7D0();
}

uint64_t sub_1000B2410()
{
  double v0;
  double v1;

  return CGPoint.description.getter(v1, v0);
}

uint64_t sub_1000B241C(uint64_t result)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(result + 16) = *(_QWORD *)(v1 + 336);
  *(_BYTE *)(result + 17) = v2;
  return result;
}

unint64_t sub_1000B2430()
{
  unint64_t v0;

  return sub_1000B117C(v0);
}

void sub_1000B244C()
{
  uint64_t v0;

  sub_10003EC44(v0);
}

void sub_1000B2458()
{
  uint64_t v0;

  sub_10003EC50(v0);
}

uint64_t sub_1000B2464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0x9000000000000008;
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t sub_1000B2478(uint64_t result)
{
  *(_BYTE *)(result + 16) = 8;
  return result;
}

uint64_t sub_1000B2484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 424) = a1;
  return static os_log_type_t.default.getter(a1, a2);
}

void sub_1000B248C(uint64_t a1)
{
  sub_10008F718(a1);
}

void sub_1000B2498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v0 + 456) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v0 + 432) = v2;
}

uint64_t sub_1000B24AC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 360));
}

unint64_t sub_1000B24B4()
{
  unint64_t v0;

  return sub_1000B117C(v0);
}

void sub_1000B24BC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  sub_1000B1730(v2, a2);
}

uint64_t sub_1000B24C4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 448) + 56;
}

void sub_1000B24D8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000B24E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = a2;
  return swift_unknownObjectWeakAssign(a1, v2);
}

void sub_1000B24F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    if (*(_QWORD *)(a3 + 16) && (v17 = sub_1001A8EF0(*(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + i)), (v18 & 1) != 0))
      v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v17);
    else
      v19 = 0;
    a1 |= v19;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v14 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_27;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_27;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v10)
            goto LABEL_27;
          v15 = *(_QWORD *)(v6 + 8 * v11);
          if (!v15)
            break;
        }
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_27:
    swift_bridgeObjectRelease(a3);
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

double sub_1000B2680()
{
  uint64_t v0;
  id v1;

  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 104) = 1;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  v1 = objc_allocWithZone((Class)PSPointerClientController);
  sub_1000088D0();
  *(_QWORD *)(v0 + 80) = objc_msgSend(v1, "init");
  sub_10000B348();
  return sub_10017E638();
}

void sub_1000B26E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  v2 = v1;
  v4 = sub_10000F6E4();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100026518();
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 48));
  sub_100199150(v6, a1);
  v8 = v7;
  sub_10000E50C();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    *(_QWORD *)(v1 + 48) = a1;
    swift_bridgeObjectRetain(a1);
    sub_10000E50C();
    v9 = qword_1002A9928;
    swift_retain(v1);
    if (v9 != -1)
      swift_once(&qword_1002A9928, sub_10017EDD4);
    v10 = sub_100006FB4(v4, (uint64_t)qword_1002B7068);
    sub_1000B3974(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    swift_release();
    v11 = sub_10003B09C(a1);
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.default.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      v15 = (uint8_t *)sub_10000797C(12);
      v34 = sub_10000797C(32);
      v36[0] = v34;
      *(_DWORD *)v15 = 136315138;
      v16 = sub_1000B3918();
      swift_bridgeObjectRetain(a1);
      v18 = Set.description.getter(v17, &type metadata for UniversalControlEdge, v16);
      v20 = v19;
      swift_bridgeObjectRelease(a1);
      v35 = sub_100006FCC(v18, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v15 + 4, v15 + 12);
      sub_100026AF4(a1);
      swift_bridgeObjectRelease(v20);
      sub_100026484((void *)&_mh_execute_header, v12, v14, "active edges: %s", v15);
      sub_1000263F4(v34, v21, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v34);
      sub_100007958((uint64_t)v15);

    }
    else
    {

      sub_100026AF4(a1);
    }
    sub_1000B3968(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    type metadata accessor for UIRectEdge(0);
    v23 = v22;
    v24 = sub_1000B3918();
    v25 = Dictionary.init(dictionaryLiteral:)(&off_100280E00, &type metadata for UniversalControlEdge, v23, v24);
    swift_bridgeObjectRetain(v25);
    sub_1000B24F0(0, a1, v25);
    v27 = v26;
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v25);
    v28 = *(void **)(v2 + 88);
    v29 = (void *)objc_opt_self(SBSUniversalControlService);
    swift_unknownObjectRetain(v28);
    v30 = objc_msgSend(v29, "sharedInstance");
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v30, "acquireScreenEdgeOwnershipForPointerEvents:forReason:", v27, v31);

    v33 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = v32;
    swift_unknownObjectRelease(v33);
    if (v28)
    {
      objc_msgSend(v28, "invalidate");
      swift_unknownObjectRelease(v28);
    }
    sub_10000E4E0();
  }
}

uint64_t sub_1000B2A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 128) + 1;
  do
  {
    result = v1;
    v1 = 1;
  }
  while (!result);
  *(_QWORD *)(v0 + 128) = result;
  return result;
}

uint64_t sub_1000B2A40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(v1 + 104) == result)
    return result;
  v2 = v1;
  v3 = result;
  *(_BYTE *)(v1 + 104) = result;
  v4 = *(_QWORD *)(v1 + 120);
  if (result == 2)
  {
    if (!v4)
    {
      *(_QWORD *)(v2 + 120) = sub_1000B2B10();
      result = swift_release();
    }
    goto LABEL_8;
  }
  if (v4)
  {
    sub_1000088D0();
    AnyCancellable.cancel()();
    sub_10000B348();
    *(_QWORD *)(v2 + 120) = 0;
    result = swift_release();
  }
  if (v3)
  {
LABEL_8:
    if (*(_QWORD *)(v2 + 112))
    {
      sub_1000088D0();
      AnyCancellable.cancel()();
      sub_10000B348();
      *(_QWORD *)(v2 + 112) = 0;
      return swift_release();
    }
    return result;
  }
  if (!*(_QWORD *)(v2 + 112))
  {
    *(_QWORD *)(v2 + 112) = sub_1000B2D0C();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B2B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*(id *)(v0 + 80), "persistentlyShowPointerAssertionForReason:", 1);
  v7 = sub_1000B2A24();
  v8 = qword_1002A9928;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v9 = sub_100006FB4(v2, (uint64_t)qword_1002B7068);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  v10 = swift_release();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v19 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Take Platform Show Pointer Assertion: %ld", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = (_QWORD *)swift_allocObject(&unk_100288DB8, 40, 7);
  v15[2] = v1;
  v15[3] = v7;
  v15[4] = v6;
  v16 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  return AnyCancellable.init(_:)(sub_1000B38CC, v15);
}

uint64_t sub_1000B2D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*(id *)(v0 + 80), "persistentlyHidePointerAssertionForReason:", 2);
  v7 = sub_1000B2A24();
  v8 = qword_1002A9928;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v9 = sub_100006FB4(v2, (uint64_t)qword_1002B7068);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  v10 = swift_release();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v19 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Take Platform Hide Pointer Assertion: %ld", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = (_QWORD *)swift_allocObject(&unk_100288DE0, 40, 7);
  v15[2] = v1;
  v15[3] = v7;
  v15[4] = v6;
  v16 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  return AnyCancellable.init(_:)(sub_1000B38F4, v15);
}

void sub_1000B2F08(uint64_t a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  v7 = sub_10000F6E4();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100026518();
  v9 = qword_1002A9928;
  swift_retain();
  if (v9 != -1)
    swift_once(&qword_1002A9928, sub_10017EDD4);
  v10 = sub_100006FB4(v7, (uint64_t)qword_1002B7068);
  sub_1000B3974(v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  v11 = swift_release();
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)sub_10000797C(12);
    *(_DWORD *)v15 = 134217984;
    v16 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v15 + 4);
    sub_100026484((void *)&_mh_execute_header, v12, v14, a4, v15);
    sub_100007958((uint64_t)v15);
  }

  sub_1000B3968(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  objc_msgSend(a3, "invalidate");
  sub_10000E4E0();
}

uint64_t sub_1000B3054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGFloat v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  CGAffineTransform *v28;
  CGFloat x;
  CGFloat y;
  CGPoint v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  CGFloat v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  CGFloat v74;
  id v75;
  id v76;
  uint64_t v77;
  NSString v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  CGAffineTransform v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  char v93;
  CGPoint v94;

  v1 = type metadata accessor for UUID(0);
  v84 = *(_QWORD *)(v1 - 8);
  v85 = v1;
  __chkstk_darwin(v1);
  v83 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000F6E4();
  v87 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v86 = (char *)&v80 - v7;
  v8 = *(_QWORD *)(v0 + 96);
  if ((unint64_t)v8 >> 62)
    goto LABEL_39;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10003B09C(*(_QWORD *)(v0 + 96));
  if (!v9)
  {
LABEL_21:
    sub_100026AF4(v8);
    v39 = qword_1002A9928;
    swift_retain();
    if (v39 != -1)
      swift_once(&qword_1002A9928, sub_10017EDD4);
    v40 = v3;
    v41 = sub_100006FB4(v3, (uint64_t)qword_1002B7068);
    v42 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v5, v41, v40);
    v43 = swift_release();
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)sub_10000797C(12);
      v47 = COERCE_DOUBLE(sub_10000797C(32));
      v88.a = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = sub_1000955B4();
      v50 = CGPoint.description.getter(v48, v49);
      v91 = sub_100006FCC(v50, v51, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v46 + 4);
      swift_bridgeObjectRelease();
      sub_100026484((void *)&_mh_execute_header, v44, v45, "No local display for point: %s", v46);
      sub_1000263F4(*(uint64_t *)&v47, v52, (uint64_t)&type metadata for Any + 8);
      sub_100007958(*(uint64_t *)&v47);
      sub_100007958((uint64_t)v46);
    }

    v53 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
    v54 = v5;
    v55 = v40;
    return v53(v54, v55);
  }
  while (1)
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
      v10 = v11;
    }
    else
    {
      v10 = *(_QWORD *)(v8 + 32);
      swift_retain();
    }
    v12 = sub_1000B3960(v11);
    if (sub_1000B3954(v12, v13, v14, v15))
      break;
    sub_1000269A0();
    if (v9 != 1)
    {
      v32 = 5;
      while (1)
      {
        if ((v8 & 0xC000000000000001) != 0)
        {
          v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32 - 4, v8);
          v10 = v33;
        }
        else
        {
          v10 = *(_QWORD *)(v8 + 8 * v32);
          swift_retain();
        }
        v34 = v32 - 3;
        if (__OFADD__(v32 - 4, 1))
          break;
        v35 = sub_1000B3960(v33);
        if (sub_1000B3954(v35, v36, v37, v38))
          goto LABEL_6;
        sub_1000269A0();
        ++v32;
        if (v34 == v9)
          goto LABEL_21;
      }
      __break(1u);
LABEL_39:
      v79 = v8 < 0 ? v8 : v8 & 0xFFFFFFFFFFFFFF8;
      sub_10003B09C(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(v79);
      if (v9)
        continue;
    }
    goto LABEL_21;
  }
LABEL_6:
  sub_100026AF4(v8);
  v16 = v87;
  v17 = v3;
  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  swift_retain();
  v91 = dispatch thunk of UniversalControlDisplay.id.getter(v18);
  v92[0] = v19;
  v92[1] = v20;
  v92[2] = v21;
  v93 = 0;
  v22 = WindowSceneController.context(for:)((uint64_t)&v91);
  swift_release();
  if (!v22)
  {
    v57 = qword_1002A9928;
    swift_retain();
    if (v57 != -1)
      swift_once(&qword_1002A9928, sub_10017EDD4);
    v58 = sub_100006FB4(v3, (uint64_t)qword_1002B7068);
    v59 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v86, v58, v3);
    swift_release();
    v60 = swift_retain_n(v10, 2);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)sub_10000797C(12);
      v64 = sub_10000797C(32);
      v82 = v64;
      *(_QWORD *)&v88.a = v64;
      *(_DWORD *)v63 = 136315138;
      v81 = v63 + 4;
      dispatch thunk of UniversalControlDisplay.id.getter(v64);
      v65 = v83;
      v67 = UUID.init(uuid:)(v66, v66 >> 8, v66 >> 16, v66 >> 24, HIDWORD(v66), v66 >> 40);
      v68 = UUID.uuidString.getter(v67);
      v70 = v69;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v85);
      v89 = sub_100006FCC(v68, v70, (uint64_t *)&v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v81);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease();
      sub_100026484((void *)&_mh_execute_header, v61, v62, "No window scene for display identifier: %s", v63);
      v71 = v82;
      sub_1000263F4(v82, v72, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v71);
      sub_100007958((uint64_t)v63);
      sub_1000269A0();

      v53 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
      v54 = v86;
    }
    else
    {

      swift_release_n(v10, 3);
      v53 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
      v54 = v59;
    }
    v55 = v17;
    return v53(v54, v55);
  }
  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  swift_beginAccess(&static EventDispatcher.shared, &v89, 0, 0);
  sub_1000088D0();
  sub_1000955B4();
  EventDispatcher.willWarp(to:)();
  sub_10000B348();
  *(_QWORD *)&v88.d = &type metadata for EnsembleFeatureFlag;
  *(_QWORD *)&v88.tx = sub_100007794();
  v23 = COERCE_DOUBLE(swift_allocObject(&unk_100288D90, 64, 7));
  v88.a = v23;
  *(_QWORD *)(*(_QWORD *)&v23 + 16) = "Ensemble";
  *(_QWORD *)(*(_QWORD *)&v23 + 24) = 8;
  *(_BYTE *)(*(_QWORD *)&v23 + 32) = 2;
  *(_QWORD *)(*(_QWORD *)&v23 + 40) = "SystemUIScene";
  *(_QWORD *)(*(_QWORD *)&v23 + 48) = 13;
  *(_WORD *)(*(_QWORD *)&v23 + 56) = 2;
  v24 = isFeatureEnabled(_:)(&v88);
  v25 = sub_100005988(&v88);
  if ((v24 & 1) != 0)
  {
    v26 = sub_1000B3960(v25);
    CGAffineTransformMakeTranslation(&v88, -v26, -v27);
    v94.x = sub_1000955B4();
    v31 = CGPointApplyAffineTransform(v94, v28);
    y = v31.y;
    x = v31.x;
  }
  else
  {
    v73 = sub_1000955B4();
    sub_100062064(1, v73, v74);
  }
  v75 = objc_msgSend(objc_allocWithZone((Class)BKSContextRelativePoint), "initWithPoint:contextID:", objc_msgSend(*(id *)(v22 + 40), "_contextId"), x, y);
  v76 = objc_msgSend((id)objc_opt_self(BKSMousePointerService), "sharedInstance");
  sub_100070648(*(_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 24));
  if (v77)
  {
    v78 = String._bridgeToObjectiveC()();
    sub_10000E50C();
  }
  else
  {
    v78 = 0;
  }
  objc_msgSend(v76, "setContextRelativePointerPosition:onDisplay:withAnimationParameters:restrictingToPID:", v75, v78, 0, 0xFFFFFFFFLL);

  swift_release();
  return sub_1000269A0();
}

uint64_t sub_1000B3800()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  return swift_release(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1000B3834()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  return v0;
}

uint64_t sub_1000B3878()
{
  uint64_t v0;

  sub_1000B3834();
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for PointerController_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent21PointerController_iOS);
}

uint64_t sub_1000B38B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

void sub_1000B38CC()
{
  uint64_t v0;

  sub_1000B2F08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), "Release Platform Show Pointer Assertion: %ld");
}

void sub_1000B38F4()
{
  uint64_t v0;

  sub_1000B2F08(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), "Release Platform Hide Pointer Assertion: %ld");
}

unint64_t sub_1000B3918()
{
  unint64_t result;

  result = qword_1002AEC60;
  if (!qword_1002AEC60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlEdge, &type metadata for UniversalControlEdge);
    atomic_store(result, (unint64_t *)&qword_1002AEC60);
  }
  return result;
}

BOOL sub_1000B3954(double a1, double a2, double a3, double a4)
{
  CGFloat v4;
  CGFloat v5;
  CGPoint v7;

  v7.x = v5;
  v7.y = v4;
  return CGRectContainsPoint(*(CGRect *)&a1, v7);
}

double sub_1000B3960(uint64_t a1)
{
  return dispatch thunk of UniversalControlDisplay.screenRect.getter(a1);
}

uint64_t sub_1000B3968@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000B3974@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_1000B3980(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000B39B8
                                                                     + 4 * asc_100222130[a1]))(0xD000000000000012, 0x8000000100256020);
}

uint64_t sub_1000B39B8(uint64_t a1)
{
  return a1 + 28;
}

uint64_t sub_1000B3A40()
{
  unsigned __int8 *v0;

  return sub_1000B3980(*v0);
}

uint64_t sub_1000B3A48(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  *(_QWORD *)(v3 + 24) = 0;
  v6 = v3
     + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_link;
  v7 = type metadata accessor for UniversalControlLink(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v6, 1, 1, v7);
  v8 = (_QWORD *)(v3
                + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point);
  *v8 = 0;
  v8[1] = 0;
  *(_BYTE *)(v3
           + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_buttons) = 0;
  *(_BYTE *)(v3
           + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_wasConnected) = a1;
  v9 = type metadata accessor for Completions();
  v10 = swift_allocObject(v9, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  sub_1000C4E20(a2);
  swift_release();
  *(_QWORD *)(v3 + 16) = v10;
  return v3;
}

uint64_t sub_1000B3B04(uint64_t a1, char a2, char a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;

  v7 = v6;
  *(_QWORD *)(v7 + 24) = 0;
  v14 = v7
      + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_link;
  v15 = type metadata accessor for UniversalControlLink(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, a1, v15);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v14, 0, 1, v15);
  v17 = (double *)(v7
                 + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point);
  *v17 = a5;
  v17[1] = a6;
  *(_BYTE *)(v7
           + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_buttons) = a2;
  *(_BYTE *)(v7
           + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_wasConnected) = a3;
  v18 = type metadata accessor for Completions();
  v19 = swift_allocObject(v18, 24, 7);
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  sub_1000C4E20(a4);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  *(_QWORD *)(v7 + 16) = v19;
  return v7;
}

uint64_t sub_1000B3C14(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t result;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[7];

  v57 = a1;
  v58 = a2;
  v51 = type metadata accessor for DispatchTimeInterval(0);
  v47 = *(_QWORD *)(v51 - 8);
  v4 = __chkstk_darwin(v51);
  v50 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v44 - v6);
  v49 = type metadata accessor for DispatchTime(0);
  v46 = *(_QWORD *)(v49 - 8);
  v8 = __chkstk_darwin(v49);
  v45 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v48 = (char *)&v44 - v10;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v11 - 8);
  v56 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000078E0(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v21 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC3B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v24 = v23;
  v25 = sub_1000055B0(&qword_1002AEEC0);
  v26 = sub_1000B8594();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v17, v24);
  v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v20, v22);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  ObjectType = swift_getObjectType(v27);
  v29 = swift_allocObject(&unk_100288F18, 32, 7);
  v30 = v58;
  *(_QWORD *)(v29 + 16) = v57;
  *(_QWORD *)(v29 + 24) = v30;
  aBlock[4] = sub_1000B85F8;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100288F30;
  v31 = _Block_copy(aBlock);
  swift_retain(v30);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v16, v13, v31, ObjectType);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v54);
  result = swift_release();
  v33 = ceil(a3 * 1000.0);
  if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v33 < 9.22337204e18)
  {
    v34 = (uint64_t)v33;
    v35 = v45;
    static DispatchTime.now()(result);
    *v7 = v34;
    v36 = v47;
    v37 = v51;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v47 + 104))(v7, enum case for DispatchTimeInterval.milliseconds(_:), v51);
    v38 = v48;
    + infix(_:_:)(v35, v7);
    v39 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
    v39(v7, v37);
    v40 = *(void (**)(char *, uint64_t))(v46 + 8);
    v41 = v49;
    v40(v35, v49);
    sub_10007A0C4();
    v42 = v50;
    sub_10007A0F4(v50);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v38, v7, v42, ObjectType);
    v39(v42, v37);
    v39(v7, v37);
    v40(v38, v41);
    OS_dispatch_source.activate()();
    v43 = *(_QWORD *)(v52 + 24);
    *(_QWORD *)(v52 + 24) = v27;
    return swift_unknownObjectRelease(v43);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_1000B409C(void (*a1)(void))
{
  id v2;

  sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v2 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6722, 0xD000000000000012, 0x8000000100255EA0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/ConnectionCoordinator.swift", 100, 2, 89);
  a1();

}

uint64_t sub_1000B412C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2)
  {
    swift_getObjectType(v2);
    swift_unknownObjectRetain(v2);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v2);
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000B4194()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  sub_100025A28(v0+ OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_link, (uint64_t *)&unk_1002AC150);
  return v0;
}

uint64_t sub_1000B41D0()
{
  uint64_t v0;

  v0 = sub_1000B4194();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B41F0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v45;

  v6 = v5;
  v7 = a2;
  v9 = a1 >> 8;
  v45 = a1 >> 16;
  v10 = HIDWORD(a1);
  v31 = HIDWORD(a1);
  v32 = a1 >> 8;
  v42 = a1 >> 40;
  v43 = a1 >> 24;
  v11 = HIWORD(a1);
  v41 = HIBYTE(a1);
  v12 = a2 >> 8;
  v13 = a2 >> 16;
  v14 = a2 >> 24;
  v34 = a2 >> 40;
  v35 = HIDWORD(a2);
  v33 = HIWORD(a2);
  v15 = HIBYTE(a2);
  v16 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  __chkstk_darwin(v16);
  sub_10000E5DC();
  v36 = v17;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0xE000000000000000;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_generation) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state) = 0xC000000000000000;
  *(_BYTE *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 17) = v9;
  *(_BYTE *)(v6 + 18) = v45;
  *(_BYTE *)(v6 + 19) = v43;
  *(_BYTE *)(v6 + 20) = v10;
  *(_BYTE *)(v6 + 21) = v42;
  *(_BYTE *)(v6 + 22) = v11;
  *(_BYTE *)(v6 + 23) = v41;
  *(_BYTE *)(v6 + 24) = v7;
  *(_BYTE *)(v6 + 25) = v12;
  *(_BYTE *)(v6 + 26) = v13;
  *(_BYTE *)(v6 + 27) = v14;
  *(_BYTE *)(v6 + 28) = v35;
  *(_BYTE *)(v6 + 29) = v34;
  *(_BYTE *)(v6 + 30) = v33;
  *(_BYTE *)(v6 + 31) = v15;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a4;
  swift_unknownObjectRetain(a3);
  v18 = UUID.init(uuid:)(a1, v32, v45, v43, v31, v42);
  v19 = UUID.uuidString.getter(v18);
  v21 = v20;
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v39);
  v22 = sub_1000599D0(8, v19, v21);
  v23 = static String._fromSubstring(_:)(v22);
  v25 = v24;
  sub_10000E420();
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_unknownObjectRelease(a3);
  swift_bridgeObjectRelease(v25);
  v27 = *(_QWORD *)(v6 + 56);
  *(_QWORD *)(v6 + 48) = 542327881;
  *(_QWORD *)(v6 + 56) = 0xE400000000000000;
  swift_bridgeObjectRelease(v27);
  v28 = v6 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_logger;
  v29 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v28, a5, v29);
  return v6;
}

uint64_t sub_1000B444C(unint64_t a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B4488 + 4 * byte_100222139[a1 >> 62]))(0x6867696C66657270, 0xEC000000676E6974);
}

uint64_t sub_1000B4488()
{
  return 0x6E6F7268636E7973;
}

uint64_t sub_1000B44AC()
{
  return 0x657250746E657665;
}

uint64_t sub_1000B44D0@<X0>(uint64_t a1@<X8>)
{
  if (a1 == 0xC000000000000000)
    return 0x656E6E6F63736964;
  else
    return 0x657463656E6E6F63;
}

uint64_t sub_1000B4518()
{
  unint64_t *v0;

  return sub_1000B444C(*v0);
}

unint64_t sub_1000B4520(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;

  v2 = v1;
  v4 = *v1;
  sub_10000E330(&qword_1002AEEE0, type metadata accessor for ConnectionCoordinator, (uint64_t)&unk_10022233C);
  ObservableObject<>.objectWillChange.getter(v4);
  ObservableObjectPublisher.send()();
  swift_release();
  v5 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state) = a1;
  return sub_1000B78B4(v5);
}

#error "1000B4690: call analysis failed (funcsize=98)"

void sub_1000B472C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v24[19];
  uint64_t v25;

  v4 = type metadata accessor for ConnectionCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002641C();
  v24[12] = sub_1000055B0((uint64_t *)&unk_1002AEE90);
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v24[13] = v7;
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10003D69C();
  v24[11] = v9;
  sub_1000A3464();
  __chkstk_darwin(v10);
  v11 = sub_1000055B0(&qword_1002AEEA0);
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_1000432FC();
  v13 = sub_1000B9A80();
  v24[16] = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10003D69C();
  v24[14] = v14;
  sub_1000A3464();
  __chkstk_darwin(v15);
  v24[10] = (char *)v24 - v16;
  sub_1000A3464();
  v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  v24[17] = (char *)v24 - v19;
  sub_1000A3464();
  __chkstk_darwin(v20);
  v24[18] = (char *)v24 - v21;
  v25 = v1;
  v24[15] = OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state;
  v22 = (uint64_t)v2 + *(int *)(v11 + 48);
  *v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state);
  sub_1000B8660(a1, v22, type metadata accessor for ConnectionCoordinator.Event);
  v23 = (char *)sub_1000B490C + 4 * word_10022213E[swift_getEnumCaseMultiPayload(v22, v4)];
  __asm { BR              X10 }
}

#error "1000B54EC: call analysis failed (funcsize=295)"

uint64_t sub_1000B5D94(uint64_t a1, unsigned __int8 a2)
{
  Swift::String v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(21, 2);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100255EC0;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = sub_1000B3980(a2);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v12;
}

_QWORD *sub_1000B5E58(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_generation);
  v14 = swift_allocObject(&unk_100288F68, 49, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  *(_BYTE *)(v14 + 48) = a1;
  v15 = type metadata accessor for Completion();
  swift_allocObject(v15, 48, 7);
  swift_bridgeObjectRetain(a5);
  swift_retain(v6);
  swift_retain(a3);
  return Completion.init(file:line:body:)(a4, a5, a6, (uint64_t)sub_1000B8590, v14);
}

uint64_t sub_1000B5F28(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v1 = (void *)_convertErrorToNSError(_:)(a1);
  v2 = objc_msgSend(v1, "domain");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  result = (uint64_t)objc_msgSend(v1, "code");
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  v7 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  if (v8 == v3 && v9 == v5)
  {
    swift_bridgeObjectRelease_n(v5, 2);

    if (v7 == 4294960537)
      return 1;
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v3, v5, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v11);

    if (v7 == 4294960537 && (v12 & 1) != 0)
      return 1;
  }
  return 0;
}

void sub_1000B6030(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v2 = v1;
  v41 = a1;
  v3 = type metadata accessor for ConnectionCoordinator.Event(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v6);
  v40 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UniversalControlLink(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v42 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_retain_n(v1, 2);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  v15 = os_log_type_enabled(v12, v14);
  v37 = v3;
  v38 = v9;
  v39 = v8;
  if (v15)
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v44[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v19 = v2[6];
    v18 = v2[7];
    swift_bridgeObjectRetain(v18);
    v43 = sub_100006FCC(v19, v18, v44);
    v9 = v38;
    v8 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v16 + 4, v16 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "%{public}s: Preparing", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v20 = v17;
    v3 = v37;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  v21 = v41;
  swift_retain(v41);
  sub_1000B4520(v21 | 0x8000000000000000);
  v22 = v2[4];
  swift_retain(*(_QWORD *)(v22 + 64));
  sub_100126C94();
  swift_release();
  v23 = v40;
  sub_1000B8544(v21+ OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_link, v40);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v23, 1, v8) == 1)
  {
    sub_100025A28(v23, (uint64_t *)&unk_1002AC150);
    swift_storeEnumTagMultiPayload(v5, v3, 3);
    sub_1000B472C(v5);
    sub_1000255F0((uint64_t)v5, type metadata accessor for ConnectionCoordinator.Event);
    return;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v42, v23, v8);
  swift_retain(*(_QWORD *)(v22 + 120));
  sub_100147F10();
  v25 = v24;
  swift_release();
  v26 = sub_10003E910();
  v27 = v26;
  if (!v26)
    goto LABEL_10;
  sub_1000C7654(v26);
  v29 = v28;
  swift_release();
  if (!v29)
  {
    v27 = 0;
LABEL_10:
    v32 = 0;
    v33 = 1;
    goto LABEL_11;
  }
  sub_10018B3F8();
  v27 = v30;
  v32 = v31;
  swift_release();
  v33 = 0;
LABEL_11:
  swift_retain(*(_QWORD *)(v22 + 64));
  v34 = sub_1000B5E58(5, (uint64_t)static HIDFixed.zero.getter, 0, 0xD000000000000064, 0x8000000100255E10, 378);
  v35 = v42;
  sub_10012732C(v25, v42, v27, v32, v33, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v35, v39);
  swift_release();
  swift_release();
}

uint64_t sub_1000B64C8()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1000B64F0
                            + 4
                            * byte_100222160[*(_QWORD *)(v0
                                                       + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state) >> 62]))();
}

uint64_t sub_1000B64F0@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)((a1 & 0x3FFFFFFFFFFFFFFFLL)
                            + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_wasConnected);
}

BOOL sub_1000B6504@<W0>(uint64_t a1@<X8>)
{
  return a1 != 0xC000000000000000;
}

void sub_1000B6514(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v4 = type metadata accessor for ConnectionCoordinator.Event(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_generation;
  v8 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_generation) + 1;
  do
  {
    v9 = v8;
    v8 = 1;
  }
  while (!v9);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_generation) = v9;
  swift_retain(a1);
  sub_1000B4520(v10);
  v11 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
  v12 = UniversalControlPreferences.connectionTimeout.getter();

  v13 = *(_QWORD *)((char *)v2 + v7);
  v14 = swift_allocObject(&unk_100288EF0, 49, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v2;
  *(_QWORD *)(v14 + 32) = static HIDFixed.zero.getter;
  *(_QWORD *)(v14 + 40) = 0;
  *(_BYTE *)(v14 + 48) = 8;
  swift_retain(v2);
  sub_1000B3C14((uint64_t)sub_1000B8590, v14, v12);
  swift_release();
  v15 = *(unsigned __int8 *)(a1
                           + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_buttons);
  v16 = swift_retain_n(v2, 2);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v17, v18);
  v20 = os_log_type_enabled(v17, v19);
  if (v15)
  {
    if (v20)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v38 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = v2[6];
      v24 = v2[7];
      swift_bridgeObjectRetain(v24);
      v37 = sub_100006FCC(v23, v24, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v21 + 4, v21 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%{public}s: preparing drag session", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
    }

    v29 = v2[3];
    v30 = v2[2];
    v31 = a1
        + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point;
    v32 = *(_QWORD *)(a1
                    + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point);
    v33 = *(_QWORD *)(v31 + 8);
    swift_retain(*(_QWORD *)(v2[4] + 40));
    v34 = (unint64_t)sub_1000B5E58(6, (uint64_t)static HIDFixed.zero.getter, 0, 0xD000000000000064, 0x8000000100255E10, 356);
    *(_QWORD *)&v38 = v30;
    *((_QWORD *)&v38 + 1) = v29;
    v39 = v32;
    v40 = v33;
    v42 = 0;
    v43 = 0;
    v41 = v34 | 0x8000000000000000;
    sub_10003D794(&v38);
    swift_release();
    swift_release();
  }
  else
  {
    if (v20)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v38 = v26;
      *(_DWORD *)v25 = 136446210;
      v36 = v25 + 4;
      v28 = v2[6];
      v27 = v2[7];
      swift_bridgeObjectRetain(v27);
      v37 = sub_100006FCC(v28, v27, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v36, v25 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%{public}s: skipping drag session", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
    }

    swift_storeEnumTagMultiPayload(v6, v4, 3);
    sub_1000B472C(v6);
    sub_1000255F0((uint64_t)v6, type metadata accessor for ConnectionCoordinator.Event);
  }
}

uint64_t sub_1000B6950(uint64_t a1)
{
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(20, 1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  v4 = *(_QWORD *)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._object = (void *)0x8000000100256040;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  return v8;
}

void sub_1000B69E4(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  void *v78;
  char v79[32];

  v75 = a4;
  LOBYTE(v6) = a3;
  sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10002641C();
  v12 = v11 - v10;
  v71 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_10000E490();
  __chkstk_darwin(v13);
  sub_1000432FC();
  sub_1000055B0(&qword_1002AEEC8);
  sub_10000E490();
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v59 - v18;
  v20 = type metadata accessor for PasteboardDataSession.ID(0);
  v64 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10000E5DC();
  v76 = v21;
  v72 = a1;
  v73 = a2;
  v74 = v4;
  v22 = (uint64_t)sub_1001A46C4();
  if ((unint64_t)v22 >> 62)
  {
LABEL_56:
    if (v22 < 0)
      v58 = v22;
    else
      v58 = v22 & 0xFFFFFFFFFFFFFF8;
    v23 = _CocoaArrayWrapper.endIndex.getter(v58);
    if (!v23)
      goto LABEL_11;
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v23)
      goto LABEL_11;
  }
  if (v23 < 1)
  {
    __break(1u);
    goto LABEL_62;
  }
  v24 = 0;
  *(_QWORD *)&v77 = v22 & 0xC000000000000001;
  LODWORD(v70) = v6 & 1;
  do
  {
    if ((_QWORD)v77)
      specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
    else
      swift_retain(*(_QWORD *)(v22 + 8 * v24 + 32));
    v25 = v75;
    v26 = v75;
    if (!v75)
    {
      sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
      v26 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, 0, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/PasteboardController.swift", 99, 2, 654);
      v25 = v75;
    }
    ++v24;
    swift_errorRetain(v25);
    sub_1000BFF78(v70, v26);
    sub_100026AEC();
    swift_errorRelease(v26);
  }
  while (v23 != v24);
LABEL_11:
  swift_bridgeObjectRelease(v22);
  v27 = sub_1001A4ED4();
  v28 = v27;
  v63 = *(_QWORD *)(v27 + 16);
  if (!v63)
  {
    swift_bridgeObjectRelease(v27);
    return;
  }
  v29 = 0;
  v62 = v27 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
  v6 = type metadata accessor for PasteboardDataSession.ID;
  v70 = 0x8000000100252C60;
  v61 = v27;
  while (1)
  {
    if (v29 >= *(_QWORD *)(v28 + 16))
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    sub_1000B8660(v62 + *(_QWORD *)(v64 + 72) * v29, v76, type metadata accessor for PasteboardDataSession.ID);
    v30 = sub_1001A4BE8();
    if (v30)
      break;
LABEL_51:
    ++v29;
    sub_1000255F0(v76, type metadata accessor for PasteboardDataSession.ID);
    if (v29 == v63)
    {
      swift_bridgeObjectRelease(v28);
      sub_10000E4E0();
      return;
    }
  }
  v31 = v30;
  v66 = v29;
  swift_beginAccess(v30 + 32, v79, 0, 0);
  v65 = v31;
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(_QWORD *)(v32 + 64);
  v67 = v32 + 64;
  v34 = 1 << *(_BYTE *)(v32 + 32);
  if (v34 < 64)
    v35 = ~(-1 << v34);
  else
    v35 = -1;
  v36 = v35 & v33;
  v68 = (unint64_t)(v34 + 63) >> 6;
  v60 = v68 - 1;
  v69 = v32;
  swift_bridgeObjectRetain(v32);
  v22 = 0;
  while (1)
  {
    if (v36)
    {
      v37 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v38 = v37 | (v22 << 6);
LABEL_21:
      v39 = v69;
      v40 = *(_QWORD *)(v69 + 48);
      v41 = type metadata accessor for PasteboardDataTransferID(0);
      sub_1000B8660(v40 + *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72) * v38, (uint64_t)v17, type metadata accessor for PasteboardDataTransferID);
      v42 = *(_QWORD *)(v39 + 56);
      v43 = sub_1000B9B8C();
      v44 = *(int *)(v43 + 48);
      v77 = *(_OWORD *)(v42 + 16 * v38);
      *(_OWORD *)&v17[v44] = v77;
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v43);
      swift_unknownObjectRetain(v77);
      goto LABEL_43;
    }
    v45 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v45 < v68)
    {
      v46 = *(_QWORD *)(v67 + 8 * v45);
      if (v46)
        goto LABEL_25;
      v47 = v22 + 2;
      ++v22;
      if (v45 + 1 < v68)
      {
        v46 = *(_QWORD *)(v67 + 8 * v47);
        if (v46)
          goto LABEL_28;
        v22 = v45 + 1;
        if (v45 + 2 < v68)
        {
          v46 = *(_QWORD *)(v67 + 8 * (v45 + 2));
          if (v46)
          {
            v45 += 2;
            goto LABEL_25;
          }
          v22 = v45 + 2;
          if (v45 + 3 < v68)
          {
            v46 = *(_QWORD *)(v67 + 8 * (v45 + 3));
            if (v46)
            {
              v45 += 3;
              goto LABEL_25;
            }
            v47 = v45 + 4;
            v22 = v45 + 3;
            if (v45 + 4 < v68)
              break;
          }
        }
      }
    }
LABEL_42:
    v48 = sub_1000B9B8C();
    sub_1000B9BA0((uint64_t)v17, v49, v50, v48);
    v36 = 0;
LABEL_43:
    sub_1000B8718((uint64_t)v17, (uint64_t)v19, &qword_1002AEEC8);
    v51 = sub_1000B9B8C();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v51) == 1)
    {
      swift_release();
      swift_release();
      v28 = v61;
      v29 = v66;
      v6 = type metadata accessor for PasteboardDataSession.ID;
      goto LABEL_51;
    }
    v52 = &v19[*(int *)(v51 + 48)];
    v53 = *(_QWORD *)v52;
    v6 = (uint64_t (*)(uint64_t))*((_QWORD *)v52 + 1);
    if (v75)
    {
      v78 = v75;
      swift_errorRetain(v75);
      v54 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
      v55 = v71;
      v56 = swift_dynamicCast(v12, &v78, v54, v71, 6);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v12, v56 ^ 1u, 1, v55);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v12, 1, v55) != 1)
      {
        sub_1000B8698(v12, v5);
        goto LABEL_49;
      }
    }
    else
    {
      v55 = v71;
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v12, 1, 1, v71);
    }
    swift_storeEnumTagMultiPayload(v5, v55, 12);
    sub_100025A28(v12, (uint64_t *)&unk_1002ADCA0);
LABEL_49:
    v57 = type metadata accessor for Completion();
    swift_allocObject(v57, 48, 7);
    Completion.init(file:line:)();
    sub_10001CAF4();
    swift_unknownObjectRelease(v53);
    swift_release();
    sub_1000255F0(v5, type metadata accessor for PasteboardAcquisitionError);
    sub_1000255F0((uint64_t)v19, type metadata accessor for PasteboardDataTransferID);
  }
  v46 = *(_QWORD *)(v67 + 8 * v47);
  if (v46)
  {
LABEL_28:
    v45 = v47;
LABEL_25:
    v36 = (v46 - 1) & v46;
    v38 = __clz(__rbit64(v46)) + (v45 << 6);
    v22 = v45;
    goto LABEL_21;
  }
  while (1)
  {
    v45 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v45 >= v68)
    {
      v22 = v60;
      goto LABEL_42;
    }
    v46 = *(_QWORD *)(v67 + 8 * v45);
    ++v47;
    if (v46)
      goto LABEL_25;
  }
LABEL_62:
  __break(1u);
}

void sub_1000B7098(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ConnectionCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v3);
  sub_1000268CC();
  *v1 = a1;
  swift_storeEnumTagMultiPayload(v1, v4, 1);
  sub_10002D790();
  sub_1000B472C((uint64_t)v1);
  sub_1000255F0((uint64_t)v1, type metadata accessor for ConnectionCoordinator.Event);
  sub_10000B350();
}

void sub_1000B7108(double a1, double a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[48];

  v28 = a5;
  v10 = a4;
  v11 = type metadata accessor for ConnectionCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_1000268CC();
  v13 = sub_1000B9A80();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  if (v10 && (sub_1000B64C8() & 1) == 0)
  {
    v20 = swift_allocObject(&unk_100288F90, 24, 7);
    swift_weakInit(v20 + 16, v5);
    sub_1000B9B94((uint64_t)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
    v21 = *(unsigned __int8 *)(v14 + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_100288FB8, v23 + 17, v21 | 7);
    *(_QWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v24 + v22, (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    v25 = v24 + v23;
    *(double *)v25 = a1;
    *(double *)(v25 + 8) = a2;
    *(_BYTE *)(v25 + 16) = a4;
    v26 = type metadata accessor for Completion();
    swift_initStackObject(v26, v29);
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD000000000000064, 0x8000000100255E10, 327, (uint64_t)sub_1000B87F4, v24);
    sub_10003E9E8();
    swift_release();
    swift_release();
  }
  else
  {
    v16 = (int *)sub_1000055B0(&qword_1002AEEA8);
    v17 = (double *)(v6 + v16[12]);
    v18 = v16[16];
    v19 = v16[20];
    sub_1000B9B94(v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
    *v17 = a1;
    v17[1] = a2;
    *(_BYTE *)(v6 + v18) = a4;
    *(_QWORD *)(v6 + v19) = v28;
    swift_storeEnumTagMultiPayload(v6, v11, 2);
    sub_10002D790();
    sub_1000B472C(v6);
    sub_1000255F0(v6, type metadata accessor for ConnectionCoordinator.Event);
  }
  sub_10009543C();
}

void sub_1000B731C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int *v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34[15];

  v14 = type metadata accessor for ConnectionCoordinator.Event(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v34[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a2 + 16;
  if (a1)
  {
    swift_beginAccess(v21, v34, 0, 0);
    Strong = swift_weakLoadStrong(v21);
    if (Strong)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, Strong + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_logger, v17);
      swift_errorRetain(a1);
      v23 = swift_release();
      __chkstk_darwin(v23);
      *(&v33 - 2) = a1;
      sub_1000E45AC((int)sub_1000B7568, 0, (int)sub_100026210, (int)(&v33 - 4), v24, v25, v26, v27, v33, v34[0], (uint64_t)v34[1], (uint64_t)v34[2], (uint64_t)v34[3], (uint64_t)v34[4], (uint64_t)v34[5], (uint64_t)v34[6], (uint64_t)v34[7], (uint64_t)v34[8], (uint64_t)v34[9],
        (uint64_t)v34[10],
        (uint64_t)v34[11],
        (uint64_t)v34[12],
        (uint64_t)v34[13],
        (uint64_t)v34[14]);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
    else
    {
      swift_errorRetain(a1);
    }
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    swift_beginAccess(v21, v34, 0, 0);
    if (swift_weakLoadStrong(v21))
    {
      v28 = (int *)sub_1000055B0(&qword_1002AEEA8);
      v29 = (double *)&v16[v28[12]];
      v30 = v28[16];
      v31 = v28[20];
      v32 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v16, a4, v32);
      *v29 = a6;
      v29[1] = a7;
      v16[v30] = a5;
      *(_QWORD *)&v16[v31] = a3;
      swift_storeEnumTagMultiPayload(v16, v14, 2);
      swift_retain();
      sub_1000B472C((uint64_t)v16);
      swift_release();
      sub_1000255F0((uint64_t)v16, type metadata accessor for ConnectionCoordinator.Event);
    }
  }
}

unint64_t sub_1000B7568()
{
  return 0xD000000000000023;
}

void sub_1000B7584(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for ConnectionCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  *(_BYTE *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a1;
  swift_storeEnumTagMultiPayload(v6 - v5, v8, 0);
  swift_errorRetain(a1);
  sub_1000B472C(v7);
  sub_1000255F0(v7, type metadata accessor for ConnectionCoordinator.Event);
}

void sub_1000B7618()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for Logger(0);
  sub_10002666C(v1);
  sub_1000B78B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21ConnectionCoordinator_state));
  sub_1000050D4();
}

uint64_t sub_1000B7668()
{
  uint64_t v0;

  sub_1000B7618();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000B768C()
{
  return type metadata accessor for ConnectionCoordinator(0);
}

uint64_t type metadata accessor for ConnectionCoordinator(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AECB0, (uint64_t)&nominal type descriptor for ConnectionCoordinator);
}

uint64_t sub_1000B76A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1002221F8;
  v4[1] = &unk_100222210;
  v4[2] = &unk_100222210;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100222228;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000B7744()
{
  return type metadata accessor for ConnectionCoordinator.ConnectionContext(0);
}

uint64_t type metadata accessor for ConnectionCoordinator.ConnectionContext(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002AEDA8, (uint64_t)&nominal type descriptor for ConnectionCoordinator.ConnectionContext);
}

void sub_1000B7760(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  sub_1000B7804(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100222280;
    v4[4] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[5] = &unk_100222298;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1000B7804(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002AEDB8)
  {
    v2 = type metadata accessor for UniversalControlLink(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002AEDB8);
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for ConnectionCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1000B7888(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000B7888(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62))
    return swift_retain(result);
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_retain(result);
  }
  return result;
}

unint64_t destroy for ConnectionCoordinator.State(unint64_t *a1)
{
  return sub_1000B78B4(*a1);
}

unint64_t sub_1000B78B4(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62))
    return swift_release(result);
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for ConnectionCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1000B7888(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1000B78B4(v4);
  return a1;
}

unint64_t *assignWithTake for ConnectionCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1000B78B4(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PPeerCoordinator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 124;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7C)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for P2PPeerCoordinator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000B79E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

unint64_t *sub_1000B7A00(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionCoordinator.State()
{
  return &type metadata for ConnectionCoordinator.State;
}

void sub_1000B7A3C()
{
  sub_10000E330(&qword_1002AEE68, type metadata accessor for ConnectionCoordinator.DiagnosticState, (uint64_t)&unk_100222304);
}

uint64_t type metadata accessor for ConnectionCoordinator.DiagnosticState(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF008, (uint64_t)&nominal type descriptor for ConnectionCoordinator.DiagnosticState);
}

uint64_t sub_1000B7A7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 0x736E6F74747562 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F74747562, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x746E696F70 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E696F70, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x72656D6974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656D6974, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000B7C64(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B7C98 + 4 * byte_100222164[a1]))(0x736E6F74747562, 0xE700000000000000);
}

uint64_t sub_1000B7C98()
{
  return 1802398060;
}

uint64_t sub_1000B7CA8()
{
  return 0x746E696F70;
}

uint64_t sub_1000B7CBC()
{
  return 0x6574617473;
}

uint64_t sub_1000B7CD0()
{
  return 0x72656D6974;
}

uint64_t sub_1000B7CE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  char v22;

  v4 = v1;
  v6 = sub_1000055B0(&qword_1002AEEE8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000268CC();
  v8 = a1[3];
  v9 = a1[4];
  sub_10000DBE4(a1, v8);
  v10 = sub_1000B86DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys, v10, v8, v9);
  LOBYTE(v21) = 0;
  sub_1000B9BAC();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11 = type metadata accessor for ConnectionCoordinator.DiagnosticState(0);
    LOBYTE(v21) = 1;
    type metadata accessor for UniversalControlLink(0);
    sub_10000E330(&qword_1002AEEF8, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
    sub_1000B9B4C();
    v12 = (__int128 *)(v4 + *(int *)(v11 + 24));
    v13 = *((_BYTE *)v12 + 16);
    v21 = *v12;
    v22 = v13;
    type metadata accessor for CGPoint(0);
    sub_10000E330(&qword_1002AEF00, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    sub_1000B9B4C();
    v14 = (uint64_t *)(v4 + *(int *)(v11 + 28));
    v15 = *v14;
    v16 = v14[1];
    LOBYTE(v21) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v21, v6);
    LOBYTE(v21) = 4;
    sub_1000B9BAC();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v19);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

void sub_1000B7ED8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;

  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_10000E5DC();
  v27 = v5;
  v28 = sub_1000055B0(&qword_1002AF068);
  __chkstk_darwin(v28);
  sub_10002641C();
  v6 = type metadata accessor for ConnectionCoordinator.DiagnosticState(0);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_1000432FC();
  *v2 = 256;
  v9 = (uint64_t)v2 + *(int *)(v8 + 20);
  v10 = type metadata accessor for UniversalControlLink(0);
  v31 = v9;
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v9, 1, 1, v10);
  v11 = (char *)v2 + *(int *)(v6 + 24);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v29 = v6;
  v30 = v2;
  v12 = *(int *)(v6 + 32);
  *((_BYTE *)v2 + v12) = 2;
  v14 = a1[3];
  v13 = a1[4];
  sub_10000DBE4(a1, v14);
  v15 = sub_1000B86DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys, v15, v14, v13);
  if (v32)
  {
    sub_100005988(a1);
    sub_100025A28(v31, (uint64_t *)&unk_1002AC150);
  }
  else
  {
    v16 = sub_1000B9A44();
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v16);
    *v30 = v17;
    v30[1] = HIBYTE(v17) & 1;
    LOBYTE(v33) = 1;
    sub_10000E330((unint64_t *)&unk_1002AF070, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
    sub_1000B9BC0();
    sub_1000B97D8(v27, v31);
    type metadata accessor for CGPoint(0);
    sub_10000E330(&qword_1002ABBE8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t)&protocol conformance descriptor for CGPoint);
    sub_1000B9BC0();
    *(_OWORD *)v11 = v33;
    v11[16] = v34;
    v18 = sub_1000B9A44();
    v20 = KeyedDecodingContainer.decode(_:forKey:)(v18, v19);
    v21 = (uint64_t *)&v30[*(int *)(v29 + 28)];
    *v21 = v20;
    v21[1] = v22;
    v23 = sub_1000B9A44();
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v23, v24);
    sub_1000B9970();
    v30[v12] = v25;
    sub_1000B8660((uint64_t)v30, a2, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    sub_100005988(a1);
    sub_1000255F0((uint64_t)v30, type metadata accessor for ConnectionCoordinator.DiagnosticState);
  }
}

uint64_t sub_1000B8208()
{
  unsigned __int8 *v0;

  return sub_1000B7C64(*v0);
}

uint64_t sub_1000B8210@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B7A7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B8234(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B86DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B825C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B86DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B8284(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000B7ED8(a1, a2);
}

uint64_t sub_1000B8298(_QWORD *a1)
{
  return sub_1000B7CE4(a1);
}

uint64_t type metadata accessor for ConnectionCoordinator.Event(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AEF78, (uint64_t)&nominal type descriptor for ConnectionCoordinator.Event);
}

void sub_1000B82C0()
{
  uint64_t v1;

  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v1);
  sub_1000268CC();
  __asm { BR              X10 }
}

void sub_1000B8348()
{
  _BYTE *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  char *v14;

  v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
  v4 = *(_BYTE *)((v1 & 0x3FFFFFFFFFFFFFFFLL)
                + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_buttons);
  if ((v1 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    sub_1000B8544(v3+ OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_link, v2);
    v5 = 0;
    v6 = *(_QWORD *)(v3
                   + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point);
    v7 = *(_QWORD *)(v3
                   + OBJC_IVAR____TtCC13EnsembleAgent21ConnectionCoordinatorP33_FFA33F25F508A100B70C0A6FCBF7726417ConnectionContext_point
                   + 8);
    if (*(_QWORD *)(v3 + 24))
      v8 = 1;
    else
      v8 = 2;
  }
  else
  {
    v9 = sub_1000B9A80();
    v5 = 1;
    sub_1000B9BA0(v2, v10, v11, v9);
    sub_1000B7888(v1);
    v6 = 0;
    v7 = 0;
    v8 = 2;
  }
  *v0 = v4;
  v0[1] = 0;
  v12 = (int *)type metadata accessor for ConnectionCoordinator.DiagnosticState(0);
  sub_1000B8718(v2, (uint64_t)&v0[v12[5]], (uint64_t *)&unk_1002AC150);
  v13 = &v0[v12[6]];
  *(_QWORD *)v13 = v6;
  *((_QWORD *)v13 + 1) = v7;
  v13[16] = v5;
  v14 = &v0[v12[7]];
  strcpy(v14, "synchronizing");
  *((_WORD *)v14 + 7) = -4864;
  v0[v12[8]] = v8;
  sub_10000E4E0();
}

uint64_t sub_1000B84BC(void (*a1)(double *__return_ptr))
{
  double v2[2];

  a1(v2);
  return CGPoint.description.getter(v2[0], v2[1]);
}

uint64_t sub_1000B84EC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  a1(&v4);
  PasteboardContents.description.getter();
  v2 = v1;
  sub_10000B348();
  return v2;
}

uint64_t sub_1000B853C()
{
  uint64_t v0;

  return sub_1000B6950(v0);
}

uint64_t sub_1000B8544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B8594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC3C0;
  if (!qword_1002AC3C0)
  {
    v1 = sub_10000DCA0(&qword_1002AEEC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AC3C0);
  }
  return result;
}

uint64_t sub_1000B85D8()
{
  uint64_t v0;

  sub_1000265F8();
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B85F8()
{
  uint64_t v0;

  sub_1000B409C(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000B8600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B8610(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B8618()
{
  uint64_t v0;

  return sub_1000B5D94(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000B8628()
{
  uint64_t v0;

  sub_1000265F8();
  swift_release();
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000B8650(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B4598(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

void sub_1000B8660(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_1000050D4();
}

uint64_t sub_1000B8698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PasteboardAcquisitionError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B86DC()
{
  unint64_t result;

  result = qword_1002AEEF0;
  if (!qword_1002AEEF0)
  {
    result = swift_getWitnessTable(&unk_1002224E8, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AEEF0);
  }
  return result;
}

void sub_1000B8718(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000055B0(a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_1000050D4();
}

uint64_t sub_1000B8750()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B8774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_1000B9A80();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  sub_1000265F8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1000B87F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(sub_1000B9A80() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1000B731C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_BYTE *)(v5 + 16), *(double *)v5, *(double *)(v5 + 8));
}

uint64_t storeEnumTagSinglePayload for ConnectionCoordinator.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000B8898 + 4 * byte_100222172[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B88CC + 4 * byte_10022216D[v4]))();
}

uint64_t sub_1000B88CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B88D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B88DCLL);
  return result;
}

uint64_t sub_1000B88E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B88F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000B88F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B88FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionCoordinator.DiagnosticState.CodingKeys()
{
  return &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys;
}

_QWORD *sub_1000B8918(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = (int *)sub_1000055B0(&qword_1002AEEA8);
      *(_OWORD *)((char *)a1 + v15[12]) = *(_OWORD *)((char *)a2 + v15[12]);
      *((_BYTE *)a1 + v15[16]) = *((_BYTE *)a2 + v15[16]);
      *(_QWORD *)((char *)a1 + v15[20]) = *(_QWORD *)((char *)a2 + v15[20]);
      swift_retain();
      v10 = a1;
      v11 = a3;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v9 = a2[1];
      swift_errorRetain(v9);
      a1[1] = v9;
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1000B8A50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      v4 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      sub_1000055B0(&qword_1002AEEA8);
      return swift_release();
    case 1:
      return swift_release();
    case 0:
      return swift_errorRelease(*(_QWORD *)(a1 + 8));
  }
  return result;
}

_QWORD *sub_1000B8AD8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for UniversalControlLink(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v12 = (int *)sub_1000055B0(&qword_1002AEEA8);
    *(_OWORD *)((char *)a1 + v12[12]) = *(_OWORD *)((char *)a2 + v12[12]);
    *((_BYTE *)a1 + v12[16]) = *((_BYTE *)a2 + v12[16]);
    *(_QWORD *)((char *)a1 + v12[20]) = *(_QWORD *)((char *)a2 + v12[20]);
    swift_retain();
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_retain();
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    swift_errorRetain(v7);
    a1[1] = v7;
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

_QWORD *sub_1000B8BE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for ConnectionCoordinator.Event);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = (int *)sub_1000055B0(&qword_1002AEEA8);
      *(_OWORD *)((char *)a1 + v12[12]) = *(_OWORD *)((char *)a2 + v12[12]);
      *((_BYTE *)a1 + v12[16]) = *((_BYTE *)a2 + v12[16]);
      *(_QWORD *)((char *)a1 + v12[20]) = *(_QWORD *)((char *)a2 + v12[20]);
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = a2[1];
      swift_errorRetain(v7);
      a1[1] = v7;
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

_BYTE *sub_1000B8D10(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v6 = type metadata accessor for UniversalControlLink(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)sub_1000055B0(&qword_1002AEEA8);
    *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
    a1[v7[16]] = a2[v7[16]];
    *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_1000B8DCC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for ConnectionCoordinator.Event);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v6 = type metadata accessor for UniversalControlLink(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)sub_1000055B0(&qword_1002AEEA8);
      *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
      a1[v7[16]] = a2[v7[16]];
      *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B8EA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];
  _BYTE v5[32];
  _QWORD v6[3];

  v6[0] = &unk_100222388;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for UniversalControlLink(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100222280;
    v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_getTupleTypeLayout(v5, 0, 4, v4);
    v6[2] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
    return 0;
  }
  return result;
}

_QWORD *sub_1000B8F50(_WORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UniversalControlLink(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v10))
    {
      v11 = sub_1000055B0((uint64_t *)&unk_1002AC150);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v4 + v13;
    v16 = (char *)a2 + v13;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v15[16] = v16[16];
    v17 = (_QWORD *)((char *)v4 + v14);
    v18 = (_QWORD *)((char *)a2 + v14);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

double sub_1000B9074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UniversalControlLink(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

_WORD *sub_1000B90E4(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlLink(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002AC150);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  v15 = (_QWORD *)((char *)a1 + v12);
  v16 = (_QWORD *)((char *)a2 + v12);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

_WORD *sub_1000B91DC(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlLink(0);
  v10 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000055B0((uint64_t *)&unk_1002AC150);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_OWORD *)v16;
  v15[16] = v16[16];
  *(_OWORD *)v15 = v17;
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_WORD *sub_1000B933C(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlLink(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002AC150);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_WORD *sub_1000B9428(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UniversalControlLink(0);
  v10 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v9);
  v11 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = sub_1000055B0((uint64_t *)&unk_1002AC150);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[6];
  v15 = a3[7];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = (_QWORD *)((char *)a1 + v15);
  v19 = (uint64_t *)((char *)a2 + v15);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1000B9574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B9580);
}

uint64_t sub_1000B9580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + *(int *)(a3 + 20), a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t sub_1000B9604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B9610);
}

void sub_1000B9610(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
    sub_10000B350();
  }
}

void sub_1000B9688(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1002223B0;
  sub_1000B7804(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1002223C8;
    v4[3] = &unk_100222210;
    v4[4] = &unk_1002223E0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

unint64_t sub_1000B971C()
{
  unint64_t result;

  result = qword_1002AF050;
  if (!qword_1002AF050)
  {
    result = swift_getWitnessTable(&unk_1002224C0, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF050);
  }
  return result;
}

unint64_t sub_1000B975C()
{
  unint64_t result;

  result = qword_1002AF058;
  if (!qword_1002AF058)
  {
    result = swift_getWitnessTable(&unk_100222430, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF058);
  }
  return result;
}

unint64_t sub_1000B979C()
{
  unint64_t result;

  result = qword_1002AF060;
  if (!qword_1002AF060)
  {
    result = swift_getWitnessTable(&unk_100222458, &type metadata for ConnectionCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF060);
  }
  return result;
}

uint64_t sub_1000B97D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ConnectionCoordinator.CancelReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000B986C + 4 * byte_10022217C[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000B98A0 + 4 * byte_100222177[v4]))();
}

uint64_t sub_1000B98A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B98A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B98B0);
  return result;
}

uint64_t sub_1000B98BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B98C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000B98C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B98D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionCoordinator.CancelReason()
{
  return &type metadata for ConnectionCoordinator.CancelReason;
}

unint64_t sub_1000B98F0()
{
  unint64_t result;

  result = qword_1002AF080;
  if (!qword_1002AF080)
  {
    result = swift_getWitnessTable(&unk_1002225A0, &type metadata for ConnectionCoordinator.CancelReason);
    atomic_store(result, (unint64_t *)&qword_1002AF080);
  }
  return result;
}

BOOL sub_1000B9930(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000B9940(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000B9954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 168, v3 - 160, v2, v1);
}

uint64_t sub_1000B9970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000B9980()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 160));
}

uint64_t sub_1000B9990()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000B99A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 40);
  *(_QWORD *)(v1 - 160) = 1;
  *(_QWORD *)(v1 - 152) = 0;
  *(_QWORD *)(v1 - 144) = 0;
  *(_QWORD *)(v1 - 136) = 0;
  *(_QWORD *)(v1 - 120) = 0;
  *(_QWORD *)(v1 - 112) = 0;
  *(_QWORD *)(v1 - 128) = 0xA000000000000000;
  return swift_retain(v2);
}

uint64_t sub_1000B99C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 - 260) = *(unsigned __int8 *)(v1 + *(int *)(result + 64));
  return result;
}

uint64_t sub_1000B99F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 168, v4, v5, a4);
}

uint64_t sub_1000B9A00(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 160));
}

uint64_t sub_1000B9A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_1000B9A18()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 - 184) + 56));
}

uint64_t sub_1000B9A28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 168, v3 - 160, v2, v1);
}

uint64_t sub_1000B9A44()
{
  uint64_t v0;

  return v0 - 112;
}

uint64_t sub_1000B9A58(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(*(_QWORD *)(v2 + 56));
}

uint64_t sub_1000B9A70(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

unint64_t sub_1000B9A78(uint64_t a1)
{
  return sub_1000B4520(a1);
}

uint64_t sub_1000B9A80()
{
  return type metadata accessor for UniversalControlLink(0);
}

uint64_t sub_1000B9A88()
{
  uint64_t v0;

  sub_1000B64C8();
  v0 = type metadata accessor for ConnectionCoordinator.ConnectionContext(0);
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

unint64_t sub_1000B9AAC()
{
  unint64_t v0;

  return sub_1000B78B4(v0);
}

double sub_1000B9AB4()
{
  unint64_t v0;
  uint64_t v1;
  double result;

  sub_1000B7888(v0);
  *(_QWORD *)&result = swift_retain(v1).n128_u64[0];
  return result;
}

uint64_t sub_1000B9ACC()
{
  unint64_t v0;
  unint64_t v1;

  v1 = sub_1000B7888(v0);
  return Logger.logObject.getter(v1);
}

uint64_t sub_1000B9AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 168, v5, v4, a4);
}

uint64_t sub_1000B9AF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 160));
}

uint64_t sub_1000B9B00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_1000B9B10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_1000B9B30(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

uint64_t sub_1000B9B4C()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void sub_1000B9B58(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_1000B9B64()
{
  uint64_t v0;

  *(_WORD *)(v0 + 32) = 256;
}

uint64_t sub_1000B9B78()
{
  double v0;
  double v1;

  return CGPoint.description.getter(v0, v1);
}

uint64_t sub_1000B9B84()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000B9B8C()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

uint64_t sub_1000B9B94@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1000B9BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, 1, 1, a4);
}

uint64_t sub_1000B9BC0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void sub_1000B9BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;

  v4 = sub_1000C2808();
  type metadata accessor for PasteboardDataTransferID(v4);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10000E478();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(v2, a2);
  v7 = UUID.uuidString.getter(v6);
  v9 = sub_100026344(v7, v8);
  static String._fromSubstring(_:)(v9);
  sub_10000E420();
  sub_1000C1538();
  swift_bridgeObjectRelease();
  sub_1000C26C8();
  v10._countAndFlagsBits = _typeName(_:qualified:)(v2, 0);
  String.append(_:)(v10);
  sub_10000E410();
  sub_10002644C();
}

uint64_t PasteboardDataTransferID.label.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = UUID.uuidString.getter(a1);
  v3 = sub_100026344(v1, v2);
  v4 = static String._fromSubstring(_:)(v3);
  sub_10000E410();
  return v4;
}

uint64_t PasteboardDataProvider.__allocating_init(controller:data:id:)()
{
  uint64_t v0;

  v0 = sub_1000C24C4();
  PasteboardDataProvider.init(controller:data:id:)();
  return v0;
}

uint64_t PasteboardFileDataProvider.__allocating_init(controller:url:id:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10006033C();
  PasteboardFileDataProvider.init(controller:url:id:)();
  return v1;
}

uint64_t sub_1000B9D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B9DB0(a1, a2, a3, a4, type metadata accessor for DragMessage, &qword_1002AF5B8, (uint64_t)&unk_100226700, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DFC);
}

uint64_t sub_1000B9D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B9DB0(a1, a2, a3, a4, type metadata accessor for SyncMessage, &qword_1002AF5B0, (uint64_t)&unk_100228718, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124E10);
}

uint64_t sub_1000B9DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7, void (*a8)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[5];

  v22[3] = a5(0);
  sub_10000E330(a6, a5, a7);
  v22[4] = v16;
  v17 = sub_100005534(v22);
  sub_100022838(a1, (uint64_t)v17, a5);
  v18 = sub_1001AB2A4(v22);
  v20 = v19;
  sub_100005988(v22);
  sub_10002517C(v18, v20);
  a8(v18, v20, a2, a3, a4);
  sub_1000C2778();
  return sub_1000C2778();
}

uint64_t PasteboardDataSession.ID.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  uint64_t v7;

  sub_1000C2704();
  v1 = UUID.uuidString.getter(v0);
  v3 = sub_100026344(v1, v2);
  v4._countAndFlagsBits = static String._fromSubstring(_:)(v3);
  object = v4._object;
  String.append(_:)(v4);
  sub_10000E410();
  swift_bridgeObjectRelease(object);
  return v7;
}

void sub_1000B9F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t, __n128);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[4];
  uint64_t v110;
  uint64_t v111;

  v6 = v4;
  v104 = a3;
  v8 = sub_1000C2808();
  type metadata accessor for PasteboardDataTransferID(v8);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10000E5DC();
  v105 = v10;
  v11 = type metadata accessor for PasteboardRepresentation.ID(0);
  v99 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v100 = v13;
  v101 = (uint64_t)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v90 - v14;
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v97 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v90 - v20;
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v22 = sub_100006FB4(v16, (uint64_t)qword_1002B7198);
  v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  v95 = v22;
  v96 = v23;
  ((void (*)(char *))v23)(v21);
  v106 = v3;
  sub_100022838(v3, (uint64_t)v15, type metadata accessor for PasteboardRepresentation.ID);
  sub_1000C276C();
  v24 = swift_unknownObjectRetain_n(a2, 2);
  v103 = v17;
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v25, v26);
  v28 = v27;
  v29 = os_log_type_enabled(v25, v27);
  v102 = v5;
  if (v29)
  {
    v30 = sub_10000797C(32);
    v94 = v16;
    v31 = v30;
    v93 = sub_10000797C(96);
    v109[0] = v93;
    *(_DWORD *)v31 = 136446722;
    v32 = a2;
    v92 = v28;
    sub_1000BE6DC();
    v107 = sub_1000C2600(v33, v34);
    v98 = v6;
    sub_1000C2754(v107, v35, v36, v31 + 12);
    sub_10000F650(v98);
    v37 = sub_10000E420();
    *(_WORD *)(v31 + 12) = 2082;
    v38 = PasteboardRepresentation.ID.label.getter(v37);
    v107 = sub_1000C2600(v38, v39);
    sub_1000C2754(v107, v40, v41, v31 + 22);
    sub_10000E420();
    sub_1000C1538();
    *(_WORD *)(v31 + 22) = 2082;
    v91 = v31 + 24;
    ObjectType = swift_getObjectType(a2);
    v43 = (*(uint64_t (**)(uint64_t))(v104 + 32))(ObjectType);
    v44 = UUID.uuidString.getter(v43);
    v46 = sub_1000599D0(8, v44, v45);
    v47 = static String._fromSubstring(_:)(v46);
    v49 = v48;
    sub_10000E420();
    sub_1000C1538();
    v50 = v47;
    a2 = v32;
    v107 = sub_100006FCC(v50, v49, v109);
    v6 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v91);
    swift_unknownObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v92, "Session %{public}s Request Representation: rep=%{public}s id=%{public}s", (uint8_t *)v31, 0x20u);
    v51 = v93;
    swift_arrayDestroy(v93, 3, (char *)&type metadata for Any + 8);
    sub_100007958(v51);
    v52 = v31;
    v16 = v94;
    sub_100007958(v52);

  }
  else
  {
    sub_10000F650(v6);
    sub_1000C1538();

    swift_unknownObjectRelease_n(a2, 2);
  }
  v53 = *(void (**)(char *, uint64_t))(v103 + 8);
  v53(v21, v16);
  if (*(_BYTE *)(v6 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_state) == 3
    && (v54 = v6 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers,
        v55 = swift_beginAccess(v6 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, &v107, 0, 0),
        !*(_QWORD *)(*(_QWORD *)v54 + 16)))
  {
    v74 = v97;
    v96(v97, v95, v16, v55);
    v75 = sub_1000C276C();
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)sub_10000797C(12);
      v79 = sub_10000797C(32);
      v94 = v16;
      v80 = v6;
      v81 = v79;
      v109[0] = v79;
      *(_DWORD *)v78 = 136446210;
      sub_1000BE6DC();
      v110 = sub_1000C2600(v82, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v78 + 4);
      sub_10000F650(v80);
      sub_10000E420();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "%{public}s: Pasteboard Data Session already deactivated and empty", v78, 0xCu);
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v81);
      sub_100007958((uint64_t)v78);

      v84 = v97;
      v85 = v94;
    }
    else
    {

      sub_10000F650(v6);
      v84 = v74;
      v85 = v16;
    }
    v53(v84, v85);
    v86 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    swift_allocError(v86, v87, 0, 0);
    v89 = swift_storeEnumTagMultiPayload(v88, v86, 7);
    swift_willThrow(v89);
  }
  else
  {
    v56 = v6 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers;
    swift_beginAccess(v6 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, v109, 33, 0);
    swift_unknownObjectRetain(a2);
    sub_1000CA6B4();
    v57 = *(_QWORD *)(*(_QWORD *)v56 + 16);
    sub_1000CA754(v57);
    v58 = *(_QWORD *)v56;
    *(_QWORD *)(v58 + 16) = v57 + 1;
    v59 = v58 + 16 * v57;
    v60 = v104;
    *(_QWORD *)(v59 + 32) = a2;
    *(_QWORD *)(v59 + 40) = v60;
    swift_endAccess(v109);
    v61 = swift_allocObject(&unk_1002895E8, 32, 7);
    *(_QWORD *)(v61 + 24) = v60;
    swift_unknownObjectWeakInit(v61 + 16, a2);
    v62 = v101;
    sub_100022838(v106, v101, type metadata accessor for PasteboardRepresentation.ID);
    v63 = *(unsigned __int8 *)(v99 + 80);
    v64 = (v63 + 32) & ~v63;
    v65 = swift_allocObject(&unk_100289610, v64 + v100, v63 | 7);
    *(_QWORD *)(v65 + 16) = v61;
    *(_QWORD *)(v65 + 24) = v6;
    sub_100025588(v62, v65 + v64, type metadata accessor for PasteboardRepresentation.ID);
    v103 = type metadata accessor for Completion();
    sub_1000C251C(v103);
    swift_retain();
    v66 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 362, (uint64_t)sub_1000C237C, v65);
    v67 = v6;
    v68 = swift_getObjectType(a2);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v60 + 40))(v66, v68, v60);
    v101 = *(_QWORD *)(v67 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_controller);
    v69 = *(_QWORD *)(v67 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
    v71 = *(_QWORD *)(v69 + 16);
    v70 = *(_QWORD *)(v69 + 24);
    v72 = v105;
    (*(void (**)(uint64_t, uint64_t))(v60 + 32))(v68, v60);
    sub_1000C251C(v103);
    v73 = Completion.init(file:line:)();
    sub_1000BF6E4(v67, v71, v70, v106, v72, (uint64_t)v73);
    swift_release();
    swift_release();
    sub_1000C1538();
  }
  sub_10003AF60();
}

void PasteboardDataSession.activate(completion:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10002626C();
  sub_10000F6E4();
  sub_10003B160();
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  sub_1000C27F4();
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

void sub_1000BA720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);

  if (qword_1002A99A0 != -1)
    a1 = swift_once(&qword_1002A99A0, sub_1001A6F18);
  sub_1000C2560(a1, (uint64_t)qword_1002B7198);
  sub_1000C2764(v1, v5, v6);
  v7 = sub_10000F794();
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)sub_1000C2440();
    v12 = sub_10000797C(32);
    sub_1000C2688(v12);
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v4 - 112) = v3;
    sub_1000C25AC();
    v15 = sub_1000C24A0(v13, v14);
    sub_1000C2544(v15);
    sub_10000FF38();
    sub_10000E420();
    sub_100026484((void *)&_mh_execute_header, v8, v10, "%{public}s: Data Session Already Active", v11);
    sub_1000C258C((uint64_t)&type metadata for Any);
    sub_100007958(v2);
    sub_100007958((uint64_t)v11);

    v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8);
  }
  else
  {

    sub_10000FF38();
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  }
  sub_1000850C0(v1, v16);
  Completion.callAsFunction(_:)(0);
  sub_10000E4E0();
}

uint64_t PasteboardDataSession.__allocating_init(controller:contents:delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000C24C4();
  swift_getObjectType(v0);
  v1 = sub_1000C2620();
  return sub_1000C257C(v1, v2, v3, v4, v5, v6);
}

Swift::Void __swiftcall PasteboardDataSession.deactivate()()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10002626C();
  sub_10000F6E4();
  sub_10003B160();
  __chkstk_darwin(v1);
  sub_10002671C();
  __chkstk_darwin(v2);
  sub_1000C27F4();
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

void sub_1000BACB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1002A99A0 != -1)
    a1 = swift_once(&qword_1002A99A0, sub_1001A6F18);
  sub_1000C271C(a1, (uint64_t)qword_1002B7198);
  sub_10003D65C(v2, v6, v7);
  v8 = sub_10000F794();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (sub_1000C26A8(v10))
  {
    v11 = (uint8_t *)sub_1000C2440();
    v12 = sub_10000797C(32);
    *(_QWORD *)(v5 - 88) = v12;
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v5 - 104) = v11 + 4;
    sub_1000C25AC();
    v15 = sub_1000C24A0(v13, v14);
    sub_1000C2528(v15);
    sub_10000FF38();
    sub_10000E420();
    sub_100026484((void *)&_mh_execute_header, v9, v3, "%{public}s: Data Session deactivated while inactive", v11);
    sub_1000263F4(v12, v16, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v12);
    sub_100007958((uint64_t)v11);

  }
  else
  {

    sub_10000FF38();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  sub_10000E4E0();
}

void PasteboardDataProvider.init(controller:data:id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_10000F6E4();
  sub_10003B160();
  __chkstk_darwin(v12);
  sub_100065E48();
  v13 = v0 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_data;
  *(_OWORD *)v13 = xmmword_100222BC0;
  *(_QWORD *)(v0 + 16) = v10;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)v13 = v8;
  *(_QWORD *)(v13 + 8) = v6;
  swift_retain();
  sub_10002517C(v8, v6);
  sub_100022AD8(v14, v15);
  v16 = qword_1002A99A0;
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v17 = sub_100006FB4(v11, (uint64_t)qword_1002B7198);
  sub_10003D664(v1, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  sub_100022AEC(v8, v6);
  swift_release_n(v10, 2);
  sub_10003D664(v0 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_logger, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  sub_100025588(v4, v0 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, type metadata accessor for PasteboardDataTransferID);
  sub_10000E4E0();
}

void sub_1000BB124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = type metadata accessor for PasteboardDataSession.ID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PasteboardDataTransferID(0);
  sub_10000E490();
  __chkstk_darwin(v14);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_data + 8);
  if (v16 >> 60 == 15)
  {
    Completion.callAsFunction(_:)(0);
LABEL_5:
    sub_10000E4E0();
    return;
  }
  v40 = (uint64_t)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v5;
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_data);
  v18 = *(_QWORD *)(v1 + 16);
  v42[3] = type metadata accessor for PasteboardDataProvider(0);
  v42[0] = v1;
  sub_100025168(v17, v16);
  v38 = v18;
  swift_retain();
  swift_retain();
  v39 = v17;
  v37 = Data.count.getter(v17, v16);
  if ((v37 & 0x8000000000000000) == 0)
  {
    v35 = HIWORD(v7);
    v36 = HIBYTE(v7);
    v33 = HIDWORD(v7);
    v34 = v7 >> 40;
    v31 = v7 >> 16;
    v32 = v7 >> 24;
    v29 = HIBYTE(v9);
    v30 = v7 >> 8;
    v27 = v9 >> 40;
    v28 = HIWORD(v9);
    v25 = v9 >> 24;
    v26 = HIDWORD(v9);
    sub_100022838(v1 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, v40, type metadata accessor for PasteboardDataTransferID);
    sub_100022838(v41, (uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PasteboardDataSession.ID);
    v19 = *(unsigned __int8 *)(v11 + 80);
    v20 = (v19 + 64) & ~v19;
    v21 = swift_allocObject(&unk_100289598, v20 + v12, v19 | 7);
    *(_QWORD *)(v21 + 16) = v3;
    *(_QWORD *)(v21 + 24) = v1;
    *(_QWORD *)(v21 + 32) = v39;
    *(_QWORD *)(v21 + 40) = v16;
    *(_WORD *)(v21 + 48) = v9;
    *(_BYTE *)(v21 + 50) = BYTE2(v9);
    *(_BYTE *)(v21 + 51) = v25;
    *(_BYTE *)(v21 + 52) = v26;
    *(_BYTE *)(v21 + 53) = v27;
    *(_BYTE *)(v21 + 54) = v28;
    *(_BYTE *)(v21 + 55) = v29;
    *(_BYTE *)(v21 + 56) = v7;
    *(_BYTE *)(v21 + 57) = v30;
    *(_BYTE *)(v21 + 58) = v31;
    *(_BYTE *)(v21 + 59) = v32;
    *(_BYTE *)(v21 + 60) = v33;
    *(_BYTE *)(v21 + 61) = v34;
    *(_BYTE *)(v21 + 62) = v35;
    *(_BYTE *)(v21 + 63) = v36;
    sub_100025588((uint64_t)v13, v21 + v20, type metadata accessor for PasteboardDataSession.ID);
    v22 = sub_1000B219C();
    sub_1000C251C(v22);
    v23 = v39;
    sub_100025168(v39, v16);
    swift_retain();
    sub_100026AE4();
    v24 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 61, (uint64_t)sub_1000C2288, v21);
    sub_1000BBCF0((uint64_t)v42, 0, v37, 0, v9, v7, v41, v40, (uint64_t)v24);
    swift_release();
    swift_release();
    sub_100022AD8(v23, v16);
    sub_1000C1538();
    sub_100005988(v42);
    goto LABEL_5;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
}

uint64_t sub_1000BB47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[5];

  v42 = a4;
  v43 = a5;
  v14 = type metadata accessor for PasteboardDataSession.ID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v38 = HIWORD(a7);
    v39 = HIBYTE(a7);
    v36 = HIDWORD(a7);
    v37 = a7 >> 40;
    v34 = a7 >> 16;
    v35 = a7 >> 24;
    v32 = HIBYTE(a6);
    v33 = a7 >> 8;
    v30 = a6 >> 40;
    v31 = HIWORD(a6);
    v28 = a6 >> 24;
    v29 = HIDWORD(a6);
    v27 = a6 >> 16;
    v40 = *(_QWORD *)(a3 + 16);
    v41 = a8;
    v44[3] = type metadata accessor for PasteboardDataProvider(0);
    v44[0] = a3;
    sub_100022838(a3 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, (uint64_t)v20, type metadata accessor for PasteboardDataTransferID);
    sub_100022838(a8, (uint64_t)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PasteboardDataSession.ID);
    v22 = *(unsigned __int8 *)(v15 + 80);
    v23 = (v22 + 48) & ~v22;
    v24 = swift_allocObject(&unk_1002895C0, v23 + v16, v22 | 7);
    *(_QWORD *)(v24 + 16) = a2;
    *(_QWORD *)(v24 + 24) = a3;
    *(_WORD *)(v24 + 32) = a6;
    *(_BYTE *)(v24 + 34) = v27;
    *(_BYTE *)(v24 + 35) = v28;
    *(_BYTE *)(v24 + 36) = v29;
    *(_BYTE *)(v24 + 37) = v30;
    *(_BYTE *)(v24 + 38) = v31;
    *(_BYTE *)(v24 + 39) = v32;
    *(_BYTE *)(v24 + 40) = a7;
    *(_BYTE *)(v24 + 41) = v33;
    *(_BYTE *)(v24 + 42) = v34;
    *(_BYTE *)(v24 + 43) = v35;
    *(_BYTE *)(v24 + 44) = v36;
    *(_BYTE *)(v24 + 45) = v37;
    *(_BYTE *)(v24 + 46) = v38;
    *(_BYTE *)(v24 + 47) = v39;
    sub_100025588((uint64_t)v17, v24 + v23, type metadata accessor for PasteboardDataSession.ID);
    v25 = type metadata accessor for Completion();
    swift_allocObject(v25, 48, 7);
    swift_retain_n(a3, 2);
    swift_retain();
    swift_retain();
    v26 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 72, (uint64_t)sub_1000C22F0, v24);
    sub_1000BBAC0((uint64_t)v44, v42, v43, a6, a7, v41, (uint64_t)v20, (uint64_t)v26);
    swift_release();
    swift_release();
    sub_1000C1538();
    return sub_100005988(v44);
  }
}

uint64_t sub_1000BB77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v16[4];

  v12 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v12);
  v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v16[3] = type metadata accessor for PasteboardDataProvider(0);
    v16[0] = a3;
    sub_100022838(a3 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, (uint64_t)v14, type metadata accessor for PasteboardDataTransferID);
    swift_retain();
    swift_retain();
    sub_1000BB8B4((uint64_t)v16, a4, a5, (uint64_t)v14, a6, a2);
    swift_release();
    sub_1000C1538();
    return sub_100005988(v16);
  }
}

void sub_1000BB8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a6;
  v10 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)&v12[*(int *)(sub_1000055B0(&qword_1002AE188) + 48)];
  sub_100022838(a5, (uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a4, v13, type metadata accessor for PasteboardDataTransferID);
  swift_storeEnumTagMultiPayload(v12, v10, 6);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v29 = 0xD000000000000024;
  v30 = 0x8000000100256300;
  v15 = UUID.uuidString.getter(v14);
  v17 = sub_1000599D0(8, v15, v16);
  v18 = static String._fromSubstring(_:)(v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22 = v29;
  v23 = v30;
  sub_100019A7C(0xD000000000000033, 0x8000000100256330, a2, a3, a5, a4, v28, v24, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38);
  v26 = sub_1000C0E10(v22, v23, v25);
  sub_1000B9DB0((uint64_t)v12, a2, a3, (uint64_t)v26, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000C1538();
}

void sub_1000BBAC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v33 = a5;
  v34 = a8;
  v13 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000055B0(&qword_1002AE180);
  v17 = (uint64_t)&v15[*(int *)(v16 + 48)];
  v18 = (uint64_t *)&v15[*(int *)(v16 + 64)];
  sub_100022838(a6, (uint64_t)v15, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a7, v17, type metadata accessor for PasteboardDataTransferID);
  *v18 = a2;
  v18[1] = a3;
  swift_storeEnumTagMultiPayload(v15, v13, 5);
  v35 = 0;
  v36 = 0xE000000000000000;
  sub_10002517C(a2, a3);
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v35 = 0xD000000000000020;
  v36 = 0x8000000100256370;
  v20 = UUID.uuidString.getter(v19);
  v22 = sub_1000599D0(8, v20, v21);
  v23 = static String._fromSubstring(_:)(v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27 = v35;
  v28 = v36;
  v29 = v33;
  sub_100019A7C(0xD000000000000032, 0x80000001002563A0, a4, v33, a6, a7, v34, v30, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43,
    v44);
  v32 = sub_1000C0E10(v27, v28, v31);
  sub_1000B9DB0((uint64_t)v15, a4, v29, (uint64_t)v32, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000C1538();
}

void sub_1000BBCF0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v38 = a6;
  v36 = a5;
  v37 = a9;
  v13 = a2 & 1;
  v14 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)sub_1000055B0(&qword_1002AE178);
  v18 = (uint64_t)&v16[v17[12]];
  v19 = v17[16];
  v20 = &v16[v17[20]];
  sub_100022838(a7, (uint64_t)v16, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a8, v18, type metadata accessor for PasteboardDataTransferID);
  v16[v19] = v13;
  *(_QWORD *)v20 = a3;
  v20[8] = a4 & 1;
  swift_storeEnumTagMultiPayload(v16, v14, 4);
  v40 = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v40 = 0xD000000000000021;
  v41 = 0x8000000100256290;
  v22 = UUID.uuidString.getter(v21);
  v24 = sub_1000599D0(8, v22, v23);
  v25 = static String._fromSubstring(_:)(v24);
  v27 = v26;
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v40;
  v30 = v41;
  v31 = v36;
  v32 = v38;
  sub_100019A7C(0xD000000000000039, 0x80000001002562C0, v36, v38, a7, a8, v37, v33, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46,
    v47);
  v35 = sub_1000C0E10(v29, v30, v34);
  sub_1000B9DB0((uint64_t)v16, v31, v32, (uint64_t)v35, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000C1538();
}

void sub_1000BBF20()
{
  Completion.callAsFunction(_:)(0);
  sub_1000050D4();
}

void PasteboardDataProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;

  sub_100026600();
  sub_1000C1538();
  v1 = sub_10000F6E4();
  sub_10002666C(v1);
  sub_100022AD8(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_data), *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_data + 8));
  sub_1000050D4();
}

uint64_t PasteboardDataProvider.__deallocating_deinit()
{
  return sub_1000BDB14(PasteboardDataProvider.deinit);
}

void sub_1000BBFA8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100022838(v1 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, a1, type metadata accessor for PasteboardDataTransferID);
}

void sub_1000BBFD4()
{
  sub_1000BBF20();
}

void PasteboardFileDataProvider.init(controller:url:id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = sub_10000F6E4();
  sub_1000C259C();
  __chkstk_darwin(v10);
  sub_100026500();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_archiveSource) = 0;
  v11 = OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_completions;
  v12 = type metadata accessor for Completions();
  v13 = swift_allocObject(v12, 24, 7);
  *(_QWORD *)(v13 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + v11) = v13;
  *(_QWORD *)(v0 + 16) = v8;
  v14 = v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_url;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v6, v15);
  v17 = qword_1002A99A0;
  sub_100026AE4();
  if (v17 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v18 = sub_100006FB4(v9, (uint64_t)qword_1002B7198);
  sub_10003D664(v1, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v6, v15);
  sub_10003D664(v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_logger, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  sub_100025588(v4, v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id, type metadata accessor for PasteboardDataTransferID);
  sub_10000E4E0();
}

void sub_1000BC138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  _QWORD v33[7];

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = type metadata accessor for PasteboardDataSession.ID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  sub_100026AE4();
  sub_1000C4E20(v3);
  swift_release();
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_archiveSource))
  {
    v30 = HIWORD(v7);
    v31 = HIBYTE(v7);
    v28 = HIDWORD(v7);
    v29 = v7 >> 40;
    v26 = v7 >> 16;
    v27 = v7 >> 24;
    v24 = HIBYTE(v9);
    v25 = v7 >> 8;
    v22 = v9 >> 40;
    v23 = HIWORD(v9);
    v20 = v9 >> 24;
    v21 = HIDWORD(v9);
    v32 = objc_msgSend(objc_allocWithZone((Class)NSFileCoordinator), "init");
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_url);
    v14 = v13;
    sub_100022838(v5, (uint64_t)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PasteboardDataSession.ID);
    v15 = *(unsigned __int8 *)(v11 + 80);
    v16 = (v15 + 40) & ~v15;
    v17 = swift_allocObject(&unk_100289408, v16 + v12, v15 | 7);
    *(_QWORD *)(v17 + 16) = v1;
    *(_WORD *)(v17 + 24) = v9;
    *(_BYTE *)(v17 + 26) = BYTE2(v9);
    *(_BYTE *)(v17 + 27) = v20;
    *(_BYTE *)(v17 + 28) = v21;
    *(_BYTE *)(v17 + 29) = v22;
    *(_BYTE *)(v17 + 30) = v23;
    *(_BYTE *)(v17 + 31) = v24;
    *(_BYTE *)(v17 + 32) = v7;
    *(_BYTE *)(v17 + 33) = v25;
    *(_BYTE *)(v17 + 34) = v26;
    *(_BYTE *)(v17 + 35) = v27;
    *(_BYTE *)(v17 + 36) = v28;
    *(_BYTE *)(v17 + 37) = v29;
    *(_BYTE *)(v17 + 38) = v30;
    *(_BYTE *)(v17 + 39) = v31;
    sub_100025588((uint64_t)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for PasteboardDataSession.ID);
    v33[4] = sub_1000C1F0C;
    v33[5] = v17;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 1107296256;
    v33[2] = sub_1000BD8D8;
    v33[3] = &unk_100289420;
    v18 = _Block_copy(v33);
    swift_retain();
    swift_release();
    v19 = v32;
    objc_msgSend(v32, "__coordinateReadingItemAtURL:options:purposeID:byAccessor:", v14, 0, 0, v18);

    _Block_release(v18);
  }
  sub_10000E4E0();
}

uint64_t sub_1000BC3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v92 = a8;
  v97 = a6;
  v98 = a7;
  v96 = (_QWORD *)a1;
  v12 = type metadata accessor for PasteboardDataSession.ID(0);
  v90 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v91 = v13;
  v93 = (uint64_t)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for UUID(0);
  v95 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v88 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v15);
  v94 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000055B0(qword_1002ABCC8);
  __chkstk_darwin(v17);
  v99 = (uint64_t)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v100 - 8);
  v20 = __chkstk_darwin(v100);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v70 - v23;
  v25 = swift_allocObject(&unk_100289480, 32, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  v26 = type metadata accessor for Completion();
  swift_allocObject(v26, 48, 7);
  sub_10000AE54(a3, a4);
  v27 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 126, (uint64_t)sub_1000C1F9C, v25);
  swift_retain();
  sub_1000C4E20((uint64_t)v27);
  swift_release();
  swift_allocObject(v26, 48, 7);
  swift_retain();
  v28 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 129, (uint64_t)sub_1000C1FC0, a5);
  v29 = (uint64_t)v28;
  if (a2)
  {
    __chkstk_darwin(v28);
    *(&v70 - 2) = a2;
    swift_errorRetain(a2);
    sub_1000E45AC((int)sub_1000BCBDC, 0, (int)sub_100026210, (int)(&v70 - 4), v30, v31, v32, v33, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80,
      v81,
      v82,
      v83,
      v84,
      (uint64_t)v85);
    swift_errorRetain(a2);
    Completion.callAsFunction(_:)(a2);
    swift_errorRelease(a2);
    v34 = a2;
  }
  else
  {
    v87 = v22;
    v35 = (uint64_t)v94;
    v36 = v95;
    v37 = v97;
    v38 = v98;
    v39 = v99;
    sub_1000259FC((uint64_t)v96, v99, qword_1002ABCC8);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v39, 1, v100) != 1)
    {
      v83 = HIWORD(v38);
      v84 = HIBYTE(v38);
      v82 = v38 >> 40;
      v81 = HIDWORD(v38);
      v80 = v38 >> 24;
      v79 = v38 >> 16;
      v78 = v38 >> 8;
      v77 = HIBYTE(v37);
      v76 = HIWORD(v37);
      v75 = v37 >> 40;
      v74 = HIDWORD(v37);
      v73 = v37 >> 24;
      v96 = v27;
      v72 = v37 >> 16;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 32);
      v86 = v19;
      v71 = (id)(v37 >> 8);
      v85 = v24;
      v54 = v100;
      v53(v24, v99, v100);
      sub_100022838(a5 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id, v35, type metadata accessor for PasteboardDataTransferID);
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v88, v35, v89);
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v87, v24, v54);
      v55 = type metadata accessor for ArchiveTransferSource(0);
      swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
      sub_1000D16A0();
      v57 = v56;
      v58 = a5;
      *(_QWORD *)(a5 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_archiveSource) = v56;
      swift_retain();
      swift_release();
      v59 = v93;
      sub_100022838(v92, v93, type metadata accessor for PasteboardDataSession.ID);
      v60 = *(unsigned __int8 *)(v90 + 80);
      v61 = (v60 + 40) & ~v60;
      v62 = (v91 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
      v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
      v64 = swift_allocObject(&unk_1002894A8, v63 + 8, v60 | 7);
      *(_QWORD *)(v64 + 16) = v58;
      *(_BYTE *)(v64 + 24) = v37;
      *(_BYTE *)(v64 + 25) = (_BYTE)v71;
      *(_BYTE *)(v64 + 26) = v72;
      *(_BYTE *)(v64 + 27) = v73;
      *(_BYTE *)(v64 + 28) = v74;
      *(_BYTE *)(v64 + 29) = v75;
      *(_BYTE *)(v64 + 30) = v76;
      *(_BYTE *)(v64 + 31) = v77;
      *(_BYTE *)(v64 + 32) = v38;
      *(_BYTE *)(v64 + 33) = v78;
      *(_BYTE *)(v64 + 34) = v79;
      *(_BYTE *)(v64 + 35) = v80;
      *(_BYTE *)(v64 + 36) = v81;
      *(_BYTE *)(v64 + 37) = v82;
      *(_BYTE *)(v64 + 38) = v83;
      *(_BYTE *)(v64 + 39) = v84;
      sub_100025588(v59, v64 + v61, type metadata accessor for PasteboardDataSession.ID);
      *(_QWORD *)(v64 + v62) = v29;
      *(_QWORD *)(v64 + v63) = v57;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000D18C4();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v85, v100);
    }
    sub_100025A28(v99, qword_1002ABCC8);
    v40 = swift_retain_n(a5, 2);
    v41 = a5;
    v42 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v96 = v27;
      v46 = v45;
      v100 = v29;
      *(_DWORD *)v44 = 136446210;
      v102 = v45;
      v47 = UUID.uuidString.getter(v45);
      v49 = sub_1000599D0(8, v47, v48);
      v50 = static String._fromSubstring(_:)(v49);
      v52 = v51;
      swift_bridgeObjectRelease();
      v101 = sub_100006FCC(v50, v52, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v44 + 4);
      swift_release_n(v41, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "file coordination provided, no url: id=%{public}s", v44, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_release_n(a5, 2);
    }

    v66 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v68 = swift_allocError(v66, v67, 0, 0);
    swift_storeEnumTagMultiPayload(v69, v66, 9);
    Completion.callAsFunction(_:)(v68);
    v34 = v68;
  }
  swift_errorRelease(v34);
  swift_release();
  return swift_release();
}

uint64_t sub_1000BCBA0(uint64_t a1)
{
  swift_retain();
  sub_1000C4E9C(a1);
  return swift_release();
}

unint64_t sub_1000BCBDC()
{
  return 0xD000000000000018;
}

uint64_t sub_1000BCBF8(uint64_t a1, char a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[8];
  _QWORD v55[3];
  uint64_t v56;

  v50 = a8;
  v51 = a7;
  v52 = a6;
  v13 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for PasteboardDataSession.ID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  if ((a2 & 1) != 0)
  {
    v50 = *(_QWORD *)(a3 + 16);
    v56 = type metadata accessor for PasteboardFileDataProvider(0);
    v55[0] = a3;
    v26 = a3 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id;
    swift_getErrorValue(a1, v54, v53);
    v27 = v53[1];
    v28 = v53[2];
    swift_retain();
    sub_1000C2080(a1, 1);
    *v15 = Error.localizedDescription.getter(v27, v28);
    v15[1] = v29;
    swift_storeEnumTagMultiPayload(v15, v13, 3);
    v30 = swift_allocObject(&unk_1002894D0, 32, 7);
    *(_QWORD *)(v30 + 16) = v51;
    *(_QWORD *)(v30 + 24) = a1;
    v31 = type metadata accessor for Completion();
    swift_allocObject(v31, 48, 7);
    swift_retain();
    sub_1000C2080(a1, 1);
    v32 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 202, (uint64_t)sub_1000C2090, v30);
    sub_1000BD6A8((uint64_t)v55, a4, a5, v52, v26, (uint64_t)v15, (uint64_t)v32);
    swift_release();
    sub_100013530(a1, 1);
    sub_1000C1538();
  }
  else
  {
    v45 = HIWORD(a5);
    v46 = HIBYTE(a5);
    v43 = HIDWORD(a5);
    v44 = a5 >> 40;
    v41 = a5 >> 16;
    v42 = a5 >> 24;
    v40 = a5 >> 8;
    v39 = HIBYTE(a4);
    v38 = HIWORD(a4);
    v37 = a4 >> 40;
    v36 = HIDWORD(a4);
    v35 = a4 >> 24;
    v19 = *(_QWORD *)(a3 + 16);
    v48 = a1;
    v49 = v19;
    v56 = type metadata accessor for PasteboardFileDataProvider(0);
    v55[0] = a3;
    v47 = a3 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id;
    sub_100022838(v52, (uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PasteboardDataSession.ID);
    v20 = *(unsigned __int8 *)(v17 + 80);
    v21 = (v20 + 56) & ~v20;
    v22 = swift_allocObject(&unk_1002894F8, v21 + v18, v20 | 7);
    v23 = v50;
    *(_QWORD *)(v22 + 16) = v51;
    *(_QWORD *)(v22 + 24) = v23;
    *(_QWORD *)(v22 + 32) = a3;
    *(_WORD *)(v22 + 40) = a4;
    *(_BYTE *)(v22 + 42) = BYTE2(a4);
    *(_BYTE *)(v22 + 43) = v35;
    *(_BYTE *)(v22 + 44) = v36;
    *(_BYTE *)(v22 + 45) = v37;
    *(_BYTE *)(v22 + 46) = v38;
    *(_BYTE *)(v22 + 47) = v39;
    *(_BYTE *)(v22 + 48) = a5;
    *(_BYTE *)(v22 + 49) = v40;
    *(_BYTE *)(v22 + 50) = v41;
    *(_BYTE *)(v22 + 51) = v42;
    *(_BYTE *)(v22 + 52) = v43;
    *(_BYTE *)(v22 + 53) = v44;
    *(_BYTE *)(v22 + 54) = v45;
    *(_BYTE *)(v22 + 55) = v46;
    sub_100025588((uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for PasteboardDataSession.ID);
    v24 = type metadata accessor for Completion();
    swift_allocObject(v24, 48, 7);
    swift_retain_n(a3, 2);
    swift_retain();
    swift_retain();
    v25 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 155, (uint64_t)sub_1000C20F0, v22);
    sub_1000BBCF0((uint64_t)v55, 1, v48, 0, a4, a5, v52, v47, (uint64_t)v25);
    swift_release();
  }
  return sub_100005988(v55);
}

uint64_t sub_1000BD014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a4;
  v45 = a7;
  v46 = a3;
  v11 = type metadata accessor for PasteboardDataSession.ID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v32 = HIBYTE(a6);
    v42 = a6 >> 40;
    v43 = HIWORD(a6);
    v40 = a6 >> 24;
    v41 = HIDWORD(a6);
    v38 = a6 >> 8;
    v39 = a6 >> 16;
    v36 = HIWORD(a5);
    v37 = HIBYTE(a5);
    v34 = HIDWORD(a5);
    v35 = a5 >> 40;
    v29 = a5 >> 8;
    v30 = a5 >> 16;
    sub_100022838(v45, (uint64_t)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PasteboardDataSession.ID);
    v16 = *(unsigned __int8 *)(v12 + 80);
    v17 = ((v16 + 40) & ~v16) + v13;
    v18 = (v16 + 40) & ~v16;
    v31 = v18;
    v33 = a2;
    v28 = v16 | 7;
    v19 = swift_allocObject(&unk_100289520, v17, v16 | 7);
    v20 = v44;
    *(_QWORD *)(v19 + 16) = v44;
    *(_WORD *)(v19 + 24) = a5;
    *(_BYTE *)(v19 + 26) = BYTE2(a5);
    *(_BYTE *)(v19 + 27) = BYTE3(a5);
    *(_BYTE *)(v19 + 28) = v34;
    *(_BYTE *)(v19 + 29) = v35;
    *(_BYTE *)(v19 + 30) = v36;
    *(_BYTE *)(v19 + 31) = v37;
    *(_BYTE *)(v19 + 32) = a6;
    *(_BYTE *)(v19 + 33) = v38;
    *(_BYTE *)(v19 + 34) = v39;
    *(_BYTE *)(v19 + 35) = v40;
    *(_BYTE *)(v19 + 36) = v41;
    *(_BYTE *)(v19 + 37) = v42;
    *(_BYTE *)(v19 + 38) = v43;
    v21 = v20;
    v22 = v32;
    *(_BYTE *)(v19 + 39) = v32;
    sub_100025588((uint64_t)v14, v19 + v18, type metadata accessor for PasteboardDataSession.ID);
    v23 = v46;
    *(_QWORD *)(v46 + 32) = sub_1000C2164;
    *(_QWORD *)(v23 + 40) = v19;
    swift_retain();
    swift_release();
    sub_100022838(v45, (uint64_t)v14, type metadata accessor for PasteboardDataSession.ID);
    v24 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject(&unk_100289548, v24 + 8, v28);
    *(_QWORD *)(v25 + 16) = v21;
    *(_BYTE *)(v25 + 24) = a5;
    *(_BYTE *)(v25 + 25) = v29;
    *(_BYTE *)(v25 + 26) = v30;
    *(_BYTE *)(v25 + 27) = BYTE3(a5);
    *(_BYTE *)(v25 + 28) = v34;
    *(_BYTE *)(v25 + 29) = v35;
    *(_BYTE *)(v25 + 30) = v36;
    *(_BYTE *)(v25 + 31) = v37;
    *(_BYTE *)(v25 + 32) = a6;
    *(_BYTE *)(v25 + 33) = v38;
    *(_BYTE *)(v25 + 34) = v39;
    *(_BYTE *)(v25 + 35) = v40;
    *(_BYTE *)(v25 + 36) = v41;
    *(_BYTE *)(v25 + 37) = v42;
    *(_BYTE *)(v25 + 38) = v43;
    v26 = v25 + v31;
    *(_BYTE *)(v25 + 39) = v22;
    sub_100025588((uint64_t)v14, v26, type metadata accessor for PasteboardDataSession.ID);
    *(_QWORD *)(v25 + v24) = v33;
    v27 = type metadata accessor for Completion();
    swift_allocObject(v27, 48, 7);
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 171, (uint64_t)sub_1000C21DC, v25);
    sub_1000D2830();
    return swift_release();
  }
}

uint64_t sub_1000BD360(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v20[4];

  v20[3] = type metadata accessor for PasteboardFileDataProvider(0);
  v20[0] = a5;
  v15 = a5 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id;
  v16 = type metadata accessor for Completion();
  swift_allocObject(v16, 48, 7);
  swift_retain();
  swift_retain();
  v17 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 167, a3, a4);
  sub_1000BBAC0((uint64_t)v20, a1, a2, a6, a7, a8, v15, (uint64_t)v17);
  swift_release();
  return sub_100005988(v20);
}

uint64_t sub_1000BD470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20[2];
  _QWORD v21[3];
  uint64_t v22;

  v12 = *a6;
  v13 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v20[1] = *(_QWORD *)(a2 + 16);
    v22 = type metadata accessor for PasteboardFileDataProvider(0);
    v21[0] = a2;
    v20[0] = a2 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id;
    swift_storeEnumTagMultiPayload(v15, v13, 12);
    v16 = swift_allocObject(&unk_100289570, 32, 7);
    *(_QWORD *)(v16 + 16) = a6;
    *(_QWORD *)(v16 + 24) = a1;
    swift_allocObject(v12, 48, 7);
    swift_errorRetain(a1);
    swift_retain();
    swift_errorRetain(a1);
    swift_retain();
    v17 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 179, (uint64_t)sub_1000C2240, v16);
    sub_1000BD6A8((uint64_t)v21, a3, a4, a5, v20[0], (uint64_t)v15, (uint64_t)v17);
    swift_release();
    swift_errorRelease(a1);
    sub_1000C1538();
  }
  else
  {
    v22 = type metadata accessor for PasteboardFileDataProvider(0);
    v21[0] = a2;
    v18 = a2 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id;
    swift_retain();
    sub_1000BB8B4((uint64_t)v21, a3, a4, v18, a5, (uint64_t)a6);
  }
  return sub_100005988(v21);
}

uint64_t sub_1000BD654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
  }
  else
  {
    v4 = a3;
    swift_errorRetain(a3);
  }
  swift_errorRetain(a1);
  Completion.callAsFunction(_:)(v4);
  return swift_errorRelease(v4);
}

void sub_1000BD6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v31 = a3;
  v32 = a7;
  v11 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000055B0(&qword_1002AE190);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  v16 = (uint64_t)&v13[*(int *)(v14 + 64)];
  sub_100022838(a4, (uint64_t)v13, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a5, v15, type metadata accessor for PasteboardDataTransferID);
  sub_100022838(a6, v16, type metadata accessor for PasteboardAcquisitionError);
  swift_storeEnumTagMultiPayload(v13, v11, 8);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v33 = 0xD000000000000021;
  v34 = 0x80000001002563E0;
  v18 = UUID.uuidString.getter(v17);
  v20 = sub_1000599D0(8, v18, v19);
  v21 = static String._fromSubstring(_:)(v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25 = v33;
  v26 = v34;
  v27 = v31;
  sub_100019A7C(0xD000000000000033, 0x8000000100256410, a2, v31, a4, a5, v32, v28, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
    v42);
  v30 = sub_1000C0E10(v25, v26, v29);
  sub_1000B9DB0((uint64_t)v13, a2, v27, (uint64_t)v30, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000C1538();
}

void sub_1000BD8D8(uint64_t a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, void *, void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v8 = sub_1000055B0(qword_1002ABCC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, void *, void *, uint64_t))(a1 + 32);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v12 = type metadata accessor for URL(0);
    v13 = 0;
  }
  else
  {
    v12 = type metadata accessor for URL(0);
    v13 = 1;
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, v13, 1, v12);
  v14 = _Block_copy(a4);
  if (v14)
  {
    v15 = swift_allocObject(&unk_100289458, 24, 7);
    *(_QWORD *)(v15 + 16) = v14;
    v14 = sub_1000C1F74;
  }
  else
  {
    v15 = 0;
  }
  swift_retain();
  v16 = a3;
  v11(v10, a3, v14, v15);
  sub_10000B02C((uint64_t)v14, v15);
  swift_release();

  sub_100025A28((uint64_t)v10, qword_1002ABCC8);
}

uint64_t sub_1000BDA24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_archiveSource))
    return Completion.callAsFunction(_:)(a1);
  sub_10002679C();
  sub_1000D34E8(a1, a2);
  return swift_release();
}

void PasteboardFileDataProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;

  sub_100026600();
  sub_1000C1538();
  v0 = sub_10000F6E4();
  sub_10002666C(v0);
  v1 = type metadata accessor for URL(0);
  sub_10002666C(v1);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_archiveSource);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_completions);
  sub_1000050D4();
}

uint64_t PasteboardFileDataProvider.__deallocating_deinit()
{
  return sub_1000BDB14(PasteboardFileDataProvider.deinit);
}

uint64_t sub_1000BDB14(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  a1();
  v1 = sub_1000C27A8();
  return swift_deallocClassInstance(v1, v2, v3);
}

void sub_1000BDB2C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100022838(v1 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardFileDataProvider_id, a1, type metadata accessor for PasteboardDataTransferID);
}

uint64_t PasteboardDataTransferID.hash(into:)()
{
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return sub_1000C25B4();
}

uint64_t sub_1000BDBA8(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

Swift::Int sub_1000BDC1C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000BDC5C()
{
  return 1684632949;
}

Swift::Int sub_1000BDC70(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000BDCB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000BDBA8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000BDCD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C14AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BDD00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C14AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardDataTransferID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v1;
  v6 = sub_1000055B0(&qword_1002AF0C8);
  sub_1000C259C();
  __chkstk_darwin(v7);
  sub_100026500();
  sub_10000DBE4(a1, a1[3]);
  v8 = sub_1000C14AC();
  sub_100084FF4((uint64_t)&type metadata for PasteboardDataTransferID.CodingKeys, v9, v8);
  v10 = type metadata accessor for UUID(0);
  sub_10000E330(&qword_1002AF0D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v4, v12, v6, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v6);
  sub_1000C260C();
}

void PasteboardDataTransferID.hashValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E5C0(a1);
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000C26E8(v1, v2);
  sub_10004740C();
  sub_10000E59C();
}

void PasteboardDataTransferID.init(from:)(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = sub_1000C2664(a1);
  v14 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10000E5DC();
  v16 = v4;
  v5 = sub_1000055B0(&qword_1002AF0E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PasteboardDataTransferID(0);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_1000432FC();
  sub_10000DBE4(v1, v1[3]);
  v10 = sub_1000C14AC();
  sub_1000C2650((uint64_t)&type metadata for PasteboardDataTransferID.CodingKeys, v11, v10);
  if (!v2)
  {
    sub_10000E330(&qword_1002AF0E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v12, v5, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v3, v16, v17);
    sub_100025588(v3, v15, type metadata accessor for PasteboardDataTransferID);
  }
  sub_100005988(v1);
  sub_10003AF60();
}

void sub_1000BDFC0(uint64_t a1@<X8>)
{
  PasteboardDataTransferID.init(from:)(a1);
}

void sub_1000BDFD4(_QWORD *a1)
{
  PasteboardDataTransferID.encode(to:)(a1);
}

void sub_1000BDFF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000C26E8(v1, v2);
  sub_10004740C();
  sub_10000E59C();
}

uint64_t PasteboardDataSession.ID.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_10000E440();
  sub_1000C26F8();
  return sub_100084F8C(a1, v1, v4, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t PasteboardDataSession.ID.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_10000E440();
  sub_1000C26F8();
  return sub_100084F8C(v1, a1, v4, *(uint64_t (**)(void))(v3 + 40));
}

uint64_t PasteboardDataSession.ID.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v4;

  sub_1000C2704();
  v0 = sub_10000E440();
  sub_10000E330(&qword_1002AA670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v2);
  sub_10000E410();
  return v4;
}

uint64_t PasteboardDataSession.ID.hash(into:)()
{
  Hasher._combine(_:)(0);
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return sub_1000C25B4();
}

uint64_t sub_1000BE15C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x616F626574736170 && a2 == 0xEA00000000006472)
  {
    v5 = 0xEA00000000006472;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616F626574736170, 0xEA00000000006472, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000BE244(char a1)
{
  if ((a1 & 1) != 0)
    return 1684632949;
  else
    return 0x616F626574736170;
}

uint64_t sub_1000BE278()
{
  char *v0;

  return sub_1000BE244(*v0);
}

uint64_t sub_1000BE280@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000BE15C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BE2A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C14E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BE2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C14E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardDataSession.ID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v5 = v1;
  v7 = sub_1000055B0(&qword_1002AF0F0);
  sub_1000C259C();
  __chkstk_darwin(v8);
  sub_10000E478();
  sub_10000DBE4(a1, a1[3]);
  v9 = sub_1000C14E8();
  sub_100084FF4((uint64_t)&type metadata for PasteboardDataSession.ID.CodingKeys, v10, v9);
  v15 = 0;
  v11 = sub_1000A24DC();
  sub_1000C27D0(v11, (uint64_t)&v15, v7, (uint64_t)&type metadata for PasteboardType, v11);
  if (!v2)
  {
    v14 = 1;
    v12 = type metadata accessor for UUID(0);
    sub_10000E330(&qword_1002AF0D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_1000C27D0(v5, (uint64_t)&v14, v7, v12, v13);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
  sub_1000C260C();
}

void PasteboardDataSession.ID.hashValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000E5C0(a1);
  sub_100047454();
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000C263C(v1, v2);
  sub_10004740C();
  sub_1000C26D8();
}

void PasteboardDataSession.ID.init(from:)(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_1000C2664(a1);
  v10 = *(_QWORD *)(v5 - 8);
  v11 = v5;
  __chkstk_darwin(v5);
  sub_100065E48();
  v13 = sub_1000055B0(&qword_1002AF100);
  sub_1000C259C();
  __chkstk_darwin(v6);
  sub_1000432FC();
  type metadata accessor for PasteboardDataSession.ID(0);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_10000E478();
  sub_10000DBE4(v1, v1[3]);
  v8 = sub_1000C14E8();
  sub_1000C2650((uint64_t)&type metadata for PasteboardDataSession.ID.CodingKeys, v9, v8);
  if (!v2)
  {
    v15 = 0;
    sub_1000A226C();
    sub_1000C27E8((uint64_t)&type metadata for PasteboardType, (uint64_t)&v15, v13, (uint64_t)&type metadata for PasteboardType);
    v14 = 1;
    sub_10000E330(&qword_1002AF0E8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_1000C27E8(v11, (uint64_t)&v14, v13, v11);
    sub_1000C26B8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3, v4, v11);
    sub_100025588(v3, v12, type metadata accessor for PasteboardDataSession.ID);
  }
  sub_100005988(v1);
  sub_10003AF60();
}

void sub_1000BE5E4(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  sub_1000050D4();
}

void sub_1000BE604(uint64_t a1@<X8>)
{
  PasteboardDataSession.ID.init(from:)(a1);
}

void sub_1000BE618(_QWORD *a1)
{
  PasteboardDataSession.ID.encode(to:)(a1);
}

void sub_1000BE638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_100047454();
  sub_10000E440();
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000C263C(v1, v2);
  sub_10004740C();
  sub_1000C26D8();
}

void sub_1000BE690()
{
  unsigned __int8 *v0;

  _s13EnsembleAgent14PasteboardItemC17PresentationStyleO9hashValueSivg_0(*v0);
}

void sub_1000BE698(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000BE5E4(a1, *v1);
}

void PasteboardDataSession.id.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100022838(v1 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, a1, type metadata accessor for PasteboardDataSession.ID);
}

uint64_t PasteboardDataSession.contents.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents));
}

void sub_1000BE6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;

  v1 = sub_10000E440();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100026518();
  v3 = *(unsigned __int8 **)(v0 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
  v4 = UUID.init(uuid:)(v3[16], v3[17], v3[18], v3[19], v3[20], v3[21]);
  v5 = UUID.uuidString.getter(v4);
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  v8 = sub_1000599D0(8, v5, v7);
  static String._fromSubstring(_:)(v8);
  sub_10000E420();
  swift_bridgeObjectRelease(0xE000000000000000);
  sub_1000C26C8();
  v9._countAndFlagsBits = PasteboardDataSession.ID.label.getter();
  String.append(_:)(v9);
  sub_10000E410();
  sub_10002644C();
}

uint64_t PasteboardDataSession.init(controller:contents:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_getObjectType(a3);
  v3 = sub_1000C2620();
  return sub_1000C257C(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000BE81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v8 = sub_100006FB4(v4, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = swift_retain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v20 = a1;
    v13 = swift_slowAlloc(12, -1);
    v19 = v5;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc(32, -1);
    v22 = v15;
    *(_DWORD *)v14 = 136446210;
    sub_1000BE6DC();
    v21 = sub_100006FCC(v16, v17, &v22);
    a1 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "%{public}s: Data Session Activated", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  }
  else
  {

    swift_release_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *(_BYTE *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_state) = 2;
  swift_retain();
  sub_1000C4E9C(a1);
  return swift_release();
}

void sub_1000BEA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v9 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022838(a4, (uint64_t)v11, type metadata accessor for PasteboardDataSession.ID);
  swift_storeEnumTagMultiPayload(v11, v9, 0);
  v12 = sub_1000C0E10(0xD000000000000012, 0x80000001002565A0, a5);
  sub_1000B9DB0((uint64_t)v11, a2, a3, (uint64_t)v12, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_release();
  sub_1000C1538();
}

void sub_1000BEB74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38[3];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = v2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers;
    swift_beginAccess(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, v38, 33, 0);
    swift_unknownObjectRetain(a1);
    v11 = sub_1000C11D8(v10, a1);
    if (*(_QWORD *)(*(_QWORD *)v10 + 16) < v11)
    {
      __break(1u);
      return;
    }
    sub_10018738C(v11);
    swift_endAccess(v38);
  }
  v33 = a2;
  v12 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_state);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v13 = sub_100006FB4(v6, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v13, v6);
  swift_unknownObjectRetain_n(a1, 2);
  v14 = swift_retain_n(v3, 4);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.default.getter(v15, v16);
  if (os_log_type_enabled(v15, v17))
  {
    v34 = v12;
    v32 = v7;
    v18 = swift_slowAlloc(38, -1);
    v31 = swift_slowAlloc(64, -1);
    v38[0] = v31;
    *(_DWORD *)v18 = 136315906;
    sub_1000BE6DC();
    v36 = sub_100006FCC(v19, v20, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v18 + 4);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2082;
    if (a1)
    {
      ObjectType = swift_getObjectType(a1);
      sub_1000B9BCC(ObjectType, v33);
      v24 = v23;
    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    LODWORD(v33) = v34 == 3;
    v36 = sub_100006FCC(v22, v24, v38);
    v12 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v18 + 14);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2048;
    v25 = v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers;
    swift_beginAccess(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, &v36, 0, 0);
    v26 = *(_QWORD *)(*(_QWORD *)v25 + 16);
    swift_release();
    v35 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 24);
    swift_release();
    *(_WORD *)(v18 + 32) = 1024;
    LODWORD(v35) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v18 + 34);
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "%s: Receiver Finished id=%{public}s, %ld remaining, deactivating=%{BOOL}d", (uint8_t *)v18, 0x26u);
    v27 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    swift_release_n(v3, 4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (v12 == 3)
  {
    v28 = v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers;
    swift_beginAccess(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, v38, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)v28 + 16))
    {
      v29 = type metadata accessor for Completion();
      swift_allocObject(v29, 48, 7);
      swift_retain();
      v30 = Completion.init(file:line:body:)(0xD000000000000064, 0x80000001002560B0, 450, (uint64_t)sub_1000C23F0, v3);
      sub_1000C0854(v3, *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents) + 16), *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents) + 24), v3 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, (uint64_t)v30);
      swift_release();
    }
  }
}

uint64_t sub_1000BEFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v40 = a4;
  v7 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v13);
  v41 = (uint64_t)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v44, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v20 = Strong;
    v21 = *(_QWORD *)(a2 + 24);
    if (a1)
    {
      v39 = v9;
      v42 = a3;
      swift_errorRetain(a1);
      if (qword_1002A99A0 != -1)
        swift_once(&qword_1002A99A0, sub_1001A6F18);
      v22 = sub_100006FB4(v15, (uint64_t)qword_1002B7198);
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v22, v15);
      __chkstk_darwin(v23);
      v24 = (char *)v40;
      *(&v39 - 4) = (char *)v42;
      *(&v39 - 3) = v24;
      v37 = v20;
      v38 = v21;
      v40 = v21;
      swift_errorRetain(a1);
      sub_1000E1B48(sub_1000C23B8, &v39 - 6, v18, a1);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v43 = a1;
      swift_errorRetain(a1);
      v25 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
      if (swift_dynamicCast(v12, &v43, v25, v13, 6))
      {
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v13);
        v26 = v41;
        sub_100025588((uint64_t)v12, v41, type metadata accessor for PasteboardAcquisitionError);
      }
      else
      {
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 1, 1, v13);
        v26 = v41;
        swift_storeEnumTagMultiPayload(v41, v13, 12);
        sub_100025A28((uint64_t)v12, (uint64_t *)&unk_1002ADCA0);
      }
      v27 = v42;
      v41 = *(_QWORD *)(v42 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_controller);
      v28 = *(_QWORD *)(v42 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
      v29 = *(_QWORD *)(v28 + 16);
      v30 = *(_QWORD *)(v28 + 24);
      ObjectType = swift_getObjectType(v20);
      v32 = (uint64_t)v39;
      v21 = v40;
      (*(void (**)(uint64_t, uint64_t))(v40 + 32))(ObjectType, v40);
      v33 = type metadata accessor for Completion();
      swift_allocObject(v33, 48, 7);
      v34 = Completion.init(file:line:)();
      sub_1000BF574(v27, v26, v29, v30, v32, (uint64_t)v34);
      swift_release();
      swift_errorRelease(a1);
      sub_1000C1538();
      sub_1000C1538();
    }
    v35 = swift_unknownObjectRetain(v20);
    sub_1000BEB74(v35, v21);
    return swift_unknownObjectRelease_n(v20, 2);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000028, 0x80000001002564B0, "EnsembleAgent/PasteboardDataSession.swift", 41, 2, 364, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BF3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v6 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v6);
  v24 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(33, 3);
  v7._countAndFlagsBits = 0x206E6F6973736553;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  sub_1000BE6DC();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000100256510;
  v9._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  v11._countAndFlagsBits = PasteboardRepresentation.ID.label.getter(v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 1029990688;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  ObjectType = swift_getObjectType(a3);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(ObjectType, a4);
  v15 = UUID.uuidString.getter(v14);
  v17 = sub_1000599D0(8, v15, v16);
  v18 = static String._fromSubstring(_:)(v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  sub_1000C1538();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.append(_:)(v22);
  return v24;
}

void sub_1000BF574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  v11 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000055B0(&qword_1002AE190);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  v16 = (uint64_t)&v13[*(int *)(v14 + 64)];
  sub_100022838(a1 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, (uint64_t)v13, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a5, v15, type metadata accessor for PasteboardDataTransferID);
  sub_100022838(a2, v16, type metadata accessor for PasteboardAcquisitionError);
  swift_storeEnumTagMultiPayload(v13, v11, 7);
  v17 = sub_1000C0E10(0xD000000000000028, 0x80000001002564E0, a6);
  sub_1000B9DB0((uint64_t)v13, a3, v19, (uint64_t)v17, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_release();
  sub_1000C1538();
}

void sub_1000BF6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v11 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000055B0(&qword_1002AE170);
  v15 = (uint64_t)&v13[*(int *)(v14 + 48)];
  v16 = (uint64_t)&v13[*(int *)(v14 + 64)];
  sub_100022838(a1 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, (uint64_t)v13, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(a4, v15, type metadata accessor for PasteboardRepresentation.ID);
  sub_100022838(a5, v16, type metadata accessor for PasteboardDataTransferID);
  swift_storeEnumTagMultiPayload(v13, v11, 3);
  v17 = sub_1000C0E10(0xD000000000000021, 0x8000000100256450, a6);
  sub_1000B9DB0((uint64_t)v13, a2, v19, (uint64_t)v17, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_release();
  sub_1000C1538();
}

uint64_t sub_1000BF854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  _BYTE v17[24];

  v3 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers);
  swift_beginAccess(v6, v17, 0, 0);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 16);
  if (!v8)
    return 0;
  swift_bridgeObjectRetain_n(*v6, 2);
  for (i = (uint64_t *)(v7 + 40); ; i += 2)
  {
    v10 = *(i - 1);
    v11 = *i;
    ObjectType = swift_getObjectType(v10);
    v13 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 32);
    v14 = swift_unknownObjectRetain(v10);
    v13(ObjectType, v11, v14);
    if ((static UUID.== infix(_:_:)(v5, a1) & 1) != 0)
      break;
    sub_1000C1538();
    swift_unknownObjectRelease(v10);
    if (!--v8)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      return 0;
    }
  }
  sub_1000C1538();
  swift_bridgeObjectRelease_n(v7, 2);
  return v10;
}

void sub_1000BF9A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[9];

  v4 = v3;
  v43 = a3;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v11 = sub_100006FB4(v7, (uint64_t)qword_1002B7198);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  __chkstk_darwin(v12);
  *(&v42 - 2) = v4;
  *(&v42 - 1) = a1;
  __chkstk_darwin(v13);
  *(&v42 - 2) = a2;
  sub_1000E45AC((int)sub_1000C23C4, v14, (int)sub_1000C23CC, (int)(&v42 - 4), v15, v16, v17, v18, v42, v43, v44, v45, v46, v47, v48, v49[0], v49[1], v49[2], v49[3],
    v49[4],
    v49[5],
    v49[6],
    v49[7],
    v49[8]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v19 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v47 = type metadata accessor for Completion();
  swift_allocObject(v47, 48, 7);
  v46 = 0x80000001002560B0;
  v22 = Completion.init(file:line:)();
  sub_1000BF574(v4, a2, v20, v21, a1, (uint64_t)v22);
  swift_release();
  v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers);
  swift_beginAccess(v4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers, v49, 0, 0);
  v24 = *v23;
  __chkstk_darwin(v25);
  *(&v42 - 2) = a1;
  swift_bridgeObjectRetain();
  sub_1001433A4((uint64_t (*)(__int128 *, __n128))sub_1000C23D4, (uint64_t)(&v42 - 4), v24);
  v44 = v26;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = a2;
  if (v27)
  {
    v45 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v30 = v29;
    v31 = (uint64_t *)(v44 + 40);
    do
    {
      v33 = *(v31 - 1);
      v32 = *v31;
      ObjectType = swift_getObjectType(v33);
      v35 = swift_allocError(v45, v30, 0, 0);
      sub_100022838(v28, v36, type metadata accessor for PasteboardAcquisitionError);
      swift_allocObject(v47, 48, 7);
      swift_unknownObjectRetain(v33);
      v37 = Completion.init(file:line:)();
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v32 + 64))(v35, v37, ObjectType, v32);
      swift_release();
      swift_errorRelease(v35);
      swift_unknownObjectRelease(v33);
      v31 += 2;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  if (v43)
  {
    v38 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
    v40 = swift_allocError(v38, v39, 0, 0);
    sub_100022838(v28, v41, type metadata accessor for PasteboardAcquisitionError);
    swift_retain();
    Completion.callAsFunction(_:)(v40);
    swift_errorRelease(v40);
    swift_release();
  }
}

uint64_t sub_1000BFD50()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  v13 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(22, 2);
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  sub_1000BE6DC();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100256530;
  v2._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v2);
  v4 = UUID.uuidString.getter(v3);
  v6 = sub_1000599D0(8, v4, v5);
  v7 = static String._fromSubstring(_:)(v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  return v13;
}

uint64_t sub_1000BFE40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
  v4 = swift_allocError(v2, v3, 0, 0);
  sub_100022838(a1, v5, type metadata accessor for PasteboardAcquisitionError);
  return v4;
}

uint64_t sub_1000BFEB8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v10;

  v4 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[1];
  ObjectType = swift_getObjectType(*a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
  LOBYTE(a1) = static UUID.== infix(_:_:)(v6, a2);
  sub_1000C1538();
  return a1 & 1;
}

#error "1000C006C: call analysis failed (funcsize=177)"

uint64_t sub_1000C0260(uint64_t a1, char a2)
{
  Swift::String v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(37, 2);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  sub_1000BE6DC();
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._object = (void *)0x8000000100256210;
  v6._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v6);
  if ((a2 & 1) != 0)
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  return v12;
}

void sub_1000C033C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v10 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)&v12[*(int *)(sub_1000055B0(&qword_1002AE168) + 64)];
  sub_100022838(a1 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, (uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
  v14 = type metadata accessor for PasteboardDataSession.ID(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v14);
  sub_100022838(a2, v13, type metadata accessor for PasteboardAcquisitionError);
  swift_storeEnumTagMultiPayload(v12, v10, 2);
  v15 = sub_1000C0E10(0xD00000000000001DLL, 0x80000001002561F0, a5);
  sub_1000B9DB0((uint64_t)v12, a3, a4, (uint64_t)v15, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_release();
  sub_1000C1538();
}

void sub_1000C04A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t var58[13];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v11 = sub_100006FB4(v4, (uint64_t)qword_1002B7198);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    __chkstk_darwin(v12);
    *(&v31 - 2) = a1;
    sub_1000E45AC((int)sub_1000C23F8, a2, (int)sub_10000B008, (int)(&v31 - 4), v13, v14, v15, v16, v31, v32, v33, var58[0], var58[1], var58[2], var58[3], var58[4], var58[5], var58[6], var58[7],
      var58[8],
      var58[9],
      var58[10],
      var58[11],
      var58[12]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v17 = sub_100006FB4(v4, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v17, v4);
    v18 = swift_retain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.default.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      var58[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v32 = v22 + 4;
      sub_1000BE6DC();
      v33 = sub_100006FCC(v24, v25, var58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, var58, v32);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "%s: Pasteboard Data Session Finished", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  v26 = a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_delegate);
  if (Strong)
  {
    v28 = Strong;
    v29 = *(_QWORD *)(v26 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 8))(a2, 0, ObjectType, v29);
    swift_unknownObjectRelease(v28);
  }
  _BasePasteboardController.finishDataSession(_:)();
}

uint64_t sub_1000C07D0()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(34, 1);
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  sub_1000BE6DC();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100256570;
  v2._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v2);
  return v4;
}

void sub_1000C0854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v9 = type metadata accessor for PasteboardMessage(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022838(a4, (uint64_t)v11, type metadata accessor for PasteboardDataSession.ID);
  swift_storeEnumTagMultiPayload(v11, v9, 1);
  v12 = sub_1000C0E10(0xD000000000000010, 0x8000000100256550, a5);
  sub_1000B9DB0((uint64_t)v11, a2, a3, (uint64_t)v12, type metadata accessor for PasteboardMessage, &qword_1002AE258, (uint64_t)&unk_100220C88, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100124DE8);
  swift_release();
  sub_1000C1538();
}

uint64_t PasteboardDataSession.deinit()
{
  uint64_t v0;

  sub_1000C1538();
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_completions);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_controller);
  swift_bridgeObjectRelease();
  sub_10000AEBC(v0 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_delegate);
  return v0;
}

uint64_t PasteboardDataSession.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  PasteboardDataSession.deinit();
  v0 = sub_1000C27A8();
  return swift_deallocClassInstance(v0, v1, v2);
}

void sub_1000C09EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  sub_10002626C();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_100026760();
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_10000E478();
  v13 = sub_1000C2814();
  if (v13)
  {
    v15 = v13;
    if ((v4 & 1) == 0)
    {
      v16 = v14;
      ObjectType = swift_getObjectType(v13);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48))(v8 & 1, v6, v2, ObjectType, v16);
      sub_1000C24AC(v15);
      return;
    }
    swift_unknownObjectRelease(v13);
  }
  sub_1000C27C8(v0, v11);
  sub_1000C2798(v10, v0);
  sub_1000C1538();
  sub_10000E4E0();
}

void sub_1000C0ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);

  sub_10002626C();
  v2 = v1;
  v3 = sub_100026760();
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_100026500();
  v5 = sub_1000BF854(v2);
  if (v5)
  {
    v6 = v5;
    swift_getObjectType(v5);
    sub_10006033C();
    v7();
    sub_1000C24AC(v6);
  }
  else
  {
    sub_1000C27C8(v0, v3);
    sub_1000C2798(v2, v0);
    sub_1000C1538();
    sub_10000E4E0();
  }
}

void sub_1000C0B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;

  v6 = sub_100026760();
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_1000268CC();
  v8 = sub_1000C2814();
  if (v8)
  {
    v10 = v8;
    v11 = v9;
    ObjectType = swift_getObjectType(v8);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v11 + 64))(0, a3, ObjectType, v11);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    sub_1000C27C8(v3, v6);
    sub_1000C2798(a2, v3);
    sub_1000C1538();
  }
}

uint64_t sub_1000C0C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002671C();
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  v9 = sub_1000C2814();
  if (v9)
  {
    v11 = v9;
    v12 = v10;
    sub_1000259FC(a3, (uint64_t)v8, (uint64_t *)&unk_1002ADCA0);
    v13 = sub_100026760();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v13) == 1)
    {
      sub_100025A28((uint64_t)v8, (uint64_t *)&unk_1002ADCA0);
      v14 = 0;
    }
    else
    {
      sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
      v14 = sub_1000264A0(v13, v17);
      sub_100025588((uint64_t)v8, v18, type metadata accessor for PasteboardAcquisitionError);
    }
    ObjectType = swift_getObjectType(v11);
    sub_1000C27BC(v14, ObjectType, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64));
    swift_errorRelease(v14);
    return swift_unknownObjectRelease(v11);
  }
  else
  {
    sub_1000259FC(a3, v3, (uint64_t *)&unk_1002ADCA0);
    v15 = sub_100026760();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v3, 1, v15) == 1)
    {
      sub_100025A28(v3, (uint64_t *)&unk_1002ADCA0);
      v16 = 0;
    }
    else
    {
      sub_10000E330(&qword_1002AA518, type metadata accessor for PasteboardAcquisitionError, (uint64_t)&protocol conformance descriptor for PasteboardAcquisitionError);
      v16 = sub_1000264A0(v15, v21);
      sub_100025588(v3, v22, type metadata accessor for PasteboardAcquisitionError);
    }
    Completion.callAsFunction(_:)(v16);
    return sub_10005FF90();
  }
}

_QWORD *sub_1000C0E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = (_QWORD *)swift_allocObject(&unk_1002893E0, 48, 7);
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v8 = type metadata accessor for Completion();
  swift_allocObject(v8, 48, 7);
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  swift_retain(a3);
  return Completion.init(file:line:body:)(0xD000000000000063, 0x8000000100252C60, 221, (uint64_t)sub_1000C1EEC, (uint64_t)v7);
}

uint64_t sub_1000C0EC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[11];

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v16 = sub_100006FB4(v9, (uint64_t)qword_1002B7198);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v16, v9);
    v18 = __chkstk_darwin(v17);
    *(&v31 - 2) = a3;
    *(&v31 - 1) = a4;
    __chkstk_darwin(v18);
    *(&v31 - 2) = a1;
    sub_1000E45AC((int)sub_1000C1EF8, v19, (int)sub_1000C1F00, (int)(&v31 - 4), v20, v21, v22, v23, v31, v32, v33, v34, v35, v36[0], v36[1], v36[2], v36[3], v36[4], v36[5],
      v36[6],
      v36[7],
      v36[8],
      v36[9],
      v36[10]);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v24 = sub_100006FB4(v9, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v24, v9);
    v25 = swift_bridgeObjectRetain_n(a4, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v36[0] = v33;
      v34 = a5;
      *(_DWORD *)v28 = 136446210;
      v32 = v28 + 4;
      swift_bridgeObjectRetain(a4);
      v35 = sub_100006FCC(a3, a4, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v32, v28 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s: Succeeded", v28, 0xCu);
      v29 = v33;
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_1000C11D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BE81C(a1, v1);
}

uint64_t sub_1000C11D8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v4)
  {
    v7 = 0;
LABEL_7:
    swift_unknownObjectRelease(a2);
    return v7;
  }
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  while (*(_QWORD *)(v3 + v6 + 32) != a2)
  {
    ++v7;
    v6 += 16;
    if (v4 == v7)
    {
      v7 = *(_QWORD *)(*(_QWORD *)result + 16);
      goto LABEL_7;
    }
  }
  v8 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    while (v8 != v4)
    {
      if (v8 >= v4)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v9 = *(_QWORD *)(v3 + v6 + 48);
      if (v9 != a2)
      {
        if (v8 != v7)
        {
          if (v7 >= v4)
            goto LABEL_23;
          v10 = *(_QWORD *)(v3 + v6 + 56);
          v16 = *(_OWORD *)(v3 + 32 + 16 * v7);
          swift_unknownObjectRetain(*(_QWORD *)(v3 + 32 + 16 * v7));
          swift_unknownObjectRetain(v9);
          if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          {
            sub_1001877A0();
            v3 = v15;
          }
          v11 = v3 + 16 * v7;
          v12 = *(_QWORD *)(v11 + 32);
          *(_QWORD *)(v11 + 32) = v9;
          *(_QWORD *)(v11 + 40) = v10;
          result = swift_unknownObjectRelease(v12);
          if (v8 >= *(_QWORD *)(v3 + 16))
            goto LABEL_24;
          v13 = *(_QWORD *)(v3 + v6 + 48);
          *(_OWORD *)(v3 + v6 + 48) = v16;
          result = swift_unknownObjectRelease(v13);
          *v5 = v3;
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_22;
        v4 = *(_QWORD *)(v3 + 16);
      }
      ++v8;
      v6 += 16;
    }
    goto LABEL_7;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000C1348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v11 = type metadata accessor for PasteboardDataSession.ID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_completions;
  v15 = type metadata accessor for Completions();
  v16 = swift_allocObject(v15, 24, 7);
  *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + v14) = v16;
  *(_BYTE *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_state) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_transfers) = _swiftEmptyArrayStorage;
  v17 = a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_delegate;
  *(_QWORD *)(v17 + 8) = 0;
  v18 = swift_unknownObjectWeakInit(v17, 0);
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_controller) = a1;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents) = a2;
  *(_QWORD *)(v18 + 8) = a6;
  swift_unknownObjectWeakAssign(v18, a3);
  swift_retain();
  swift_retain();
  UUID.init()(v19);
  swift_release();
  swift_release();
  swift_unknownObjectRelease(a3);
  sub_100025588((uint64_t)v13, a4 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_id, type metadata accessor for PasteboardDataSession.ID);
  return a4;
}

uint64_t type metadata accessor for PasteboardDataTransferID(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF3D0, (uint64_t)&nominal type descriptor for PasteboardDataTransferID);
}

unint64_t sub_1000C14AC()
{
  unint64_t result;

  result = qword_1002AF0D0;
  if (!qword_1002AF0D0)
  {
    result = swift_getWitnessTable(&unk_100222B64, &type metadata for PasteboardDataTransferID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF0D0);
  }
  return result;
}

unint64_t sub_1000C14E8()
{
  unint64_t result;

  result = qword_1002AF0F8;
  if (!qword_1002AF0F8)
  {
    result = swift_getWitnessTable(&unk_100222B14, &type metadata for PasteboardDataSession.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF0F8);
  }
  return result;
}

uint64_t type metadata accessor for PasteboardDataSession.ID(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF540, (uint64_t)&nominal type descriptor for PasteboardDataSession.ID);
}

void sub_1000C1538()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = sub_1000C2808();
  v2 = v1(v0);
  sub_10002666C(v2);
  sub_1000050D4();
}

void sub_1000C155C()
{
  sub_10000E330(&qword_1002AF118, type metadata accessor for PasteboardDataTransferID, (uint64_t)&protocol conformance descriptor for PasteboardDataTransferID);
}

void sub_1000C1588()
{
  sub_10000E330(&qword_1002AF120, type metadata accessor for PasteboardDataSession.ID, (uint64_t)&protocol conformance descriptor for PasteboardDataSession.ID);
}

uint64_t sub_1000C15B4()
{
  return type metadata accessor for PasteboardDataProvider(0);
}

uint64_t type metadata accessor for PasteboardDataProvider(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF150, (uint64_t)&nominal type descriptor for PasteboardDataProvider);
}

uint64_t sub_1000C15D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100222818;
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1000C1670()
{
  return type metadata accessor for PasteboardFileDataProvider(0);
}

uint64_t type metadata accessor for PasteboardFileDataProvider(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF288, (uint64_t)&nominal type descriptor for PasteboardFileDataProvider);
}

uint64_t sub_1000C168C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for URL(319);
      if (v5 <= 0x3F)
      {
        v6[3] = *(_QWORD *)(result - 8) + 64;
        v6[4] = "\b";
        v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
        return swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PasteboardDataTransferID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1770);
}

uint64_t sub_1000C1770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PasteboardDataTransferID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C17AC);
}

uint64_t sub_1000C17AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a2, v4);
}

uint64_t sub_1000C17E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000C1848()
{
  return type metadata accessor for PasteboardDataSession(0);
}

uint64_t type metadata accessor for PasteboardDataSession(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF430, (uint64_t)&nominal type descriptor for PasteboardDataSession);
}

uint64_t sub_1000C1864(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for PasteboardDataSession.ID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_1002228F8;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_100222910;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s13EnsembleAgent24PasteboardDataTransferIDVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t (**v4)(void);
  uint64_t v5;

  sub_10000E440();
  sub_1000C26F8();
  return sub_100084F8C(a1, a2, v5, *v4);
}

uint64_t _s13EnsembleAgent24PasteboardDataTransferIDVwxx_0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000E440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void _s13EnsembleAgent24PasteboardDataTransferIDVwcp_0()
{
  uint64_t v0;

  v0 = sub_10000E440();
  sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16));
  sub_1000050D4();
}

void _s13EnsembleAgent24PasteboardDataTransferIDVwca_0()
{
  uint64_t v0;

  sub_10000E440();
  sub_1000C26F8();
  sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
  sub_1000050D4();
}

void _s13EnsembleAgent24PasteboardDataTransferIDVwtk_0()
{
  uint64_t v0;

  v0 = sub_10000E440();
  sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 32));
  sub_1000050D4();
}

void _s13EnsembleAgent24PasteboardDataTransferIDVwta_0()
{
  uint64_t v0;

  sub_10000E440();
  sub_1000C26F8();
  sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 40));
  sub_1000050D4();
}

uint64_t getEnumTagSinglePayload for PasteboardDataSession.ID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C2404);
}

uint64_t storeEnumTagSinglePayload for PasteboardDataSession.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2400);
}

uint64_t sub_1000C1A44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for () + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PasteboardDataSession.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000C1B08 + 4 * byte_1002225EF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000C1B3C + 4 * byte_1002225EA[v4]))();
}

uint64_t sub_1000C1B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C1B4CLL);
  return result;
}

uint64_t sub_1000C1B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C1B60);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000C1B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardDataSession.State()
{
  return &type metadata for PasteboardDataSession.State;
}

uint64_t storeEnumTagSinglePayload for PasteboardDataSession.ID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C1BD4 + 4 * byte_1002225F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C1C08 + 4 * byte_1002225F4[v4]))();
}

uint64_t sub_1000C1C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C1C18);
  return result;
}

uint64_t sub_1000C1C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C1C2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C1C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardDataSession.ID.CodingKeys()
{
  return &type metadata for PasteboardDataSession.ID.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PasteboardDataTransferID.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000C1C94 + 4 * byte_1002225FE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000C1CB4 + 4 * byte_100222603[v4]))();
}

_BYTE *sub_1000C1C94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000C1CB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C1CBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C1CC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C1CCC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C1CD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardDataTransferID.CodingKeys()
{
  return &type metadata for PasteboardDataTransferID.CodingKeys;
}

unint64_t sub_1000C1CF4()
{
  unint64_t result;

  result = qword_1002AF578;
  if (!qword_1002AF578)
  {
    result = swift_getWitnessTable(&unk_1002229CC, &type metadata for PasteboardDataTransferID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF578);
  }
  return result;
}

unint64_t sub_1000C1D34()
{
  unint64_t result;

  result = qword_1002AF580;
  if (!qword_1002AF580)
  {
    result = swift_getWitnessTable(&unk_100222A84, &type metadata for PasteboardDataSession.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF580);
  }
  return result;
}

unint64_t sub_1000C1D74()
{
  unint64_t result;

  result = qword_1002AF588;
  if (!qword_1002AF588)
  {
    result = swift_getWitnessTable(&unk_100222AEC, &type metadata for PasteboardDataSession.State);
    atomic_store(result, (unint64_t *)&qword_1002AF588);
  }
  return result;
}

unint64_t sub_1000C1DB4()
{
  unint64_t result;

  result = qword_1002AF590;
  if (!qword_1002AF590)
  {
    result = swift_getWitnessTable(&unk_1002229F4, &type metadata for PasteboardDataSession.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF590);
  }
  return result;
}

unint64_t sub_1000C1DF4()
{
  unint64_t result;

  result = qword_1002AF598;
  if (!qword_1002AF598)
  {
    result = swift_getWitnessTable(&unk_100222A1C, &type metadata for PasteboardDataSession.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF598);
  }
  return result;
}

unint64_t sub_1000C1E34()
{
  unint64_t result;

  result = qword_1002AF5A0;
  if (!qword_1002AF5A0)
  {
    result = swift_getWitnessTable(&unk_10022293C, &type metadata for PasteboardDataTransferID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF5A0);
  }
  return result;
}

unint64_t sub_1000C1E74()
{
  unint64_t result;

  result = qword_1002AF5A8;
  if (!qword_1002AF5A8)
  {
    result = swift_getWitnessTable(&unk_100222964, &type metadata for PasteboardDataTransferID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF5A8);
  }
  return result;
}

uint64_t sub_1000C1EB0()
{
  uint64_t v0;

  return sub_1000C0260(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000C1EBC()
{
  uint64_t v0;

  sub_100026600();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C1EEC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C0EC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1000C1EF8()
{
  sub_1001A70F8();
}

void sub_1000C1F00()
{
  uint64_t v0;

  sub_1001A7150(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C1F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = sub_1000C2450(a1);
  return sub_1000BC3A4(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C1F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C1F48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C1F50()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C1F74()
{
  uint64_t v0;

  return sub_10001BB90(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C1F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 16))
    sub_1000265F8();
  v1 = sub_1000323A8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000C1F9C()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 16);
  if (v1)
    v1();
  sub_1000050D4();
}

uint64_t sub_1000C1FC0(uint64_t a1)
{
  return sub_1000BCBA0(a1);
}

uint64_t sub_1000C1FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000C24F4();
  sub_100026600();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  swift_release();
  swift_release();
  sub_10006033C();
  return sub_1000265A0(v1, v2, v3);
}

uint64_t sub_1000C2024(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 & 1;
  type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000C25C0();
  return sub_1000BCBF8(a1, v4, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(_QWORD *)(v2 + (v5 & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000C2080(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

void sub_1000C2090()
{
  uint64_t v0;

  Completion.callAsFunction(_:)(*(_QWORD *)(v0 + 24));
  sub_1000050D4();
}

uint64_t sub_1000C20B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C2738();
  sub_1000C2428();
  sub_1000265F8();
  swift_release();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  v1 = sub_1000C24E4();
  return sub_1000C241C(v1, v2, v3);
}

uint64_t sub_1000C20F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_1000C25E0();
  sub_1000C2678();
  return sub_1000BD014(v0, v3, v4, v5, v6, *(_QWORD *)(v1 + 48), v1 + v2);
}

uint64_t sub_1000C2124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000C2428();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  v1 = sub_1000C24E4();
  return sub_1000C241C(v1, v2, v3);
}

uint64_t sub_1000C2164(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1000C2450(a1);
  return sub_1000BD360(v1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1000C2190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000C24F4();
  sub_100026600();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  swift_release();
  sub_10006033C();
  return sub_1000265A0(v1, v2, v3);
}

uint64_t sub_1000C21DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for PasteboardDataSession.ID(0);
  sub_1000C25C0();
  return sub_1000BD470(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, *(uint64_t **)((char *)v1 + (v3 & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000C2220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100026600();
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  v1 = sub_1000323A8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000C2240(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BD654(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C2248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000C2738();
  sub_1000C2428();
  sub_1000265F8();
  sub_100022AEC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v1 = sub_10000E440();
  sub_1000C2408(v1);
  v2 = sub_1000C24E4();
  return sub_1000C241C(v2, v3, v4);
}

uint64_t sub_1000C2288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_1000C25E0();
  sub_1000C2678();
  return sub_1000BB47C(v0, v3, v4, v5, v6, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v1 + v2);
}

uint64_t sub_1000C22B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000C2738();
  sub_1000C2428();
  sub_1000265F8();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  v1 = sub_1000C24E4();
  return sub_1000C241C(v1, v2, v3);
}

uint64_t sub_1000C22F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000C25E0();
  sub_1000C2678();
  return sub_1000BB77C(v0, v3, v4, v5, v6, v1 + v2);
}

uint64_t sub_1000C231C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_1000323A8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000C2338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000C2428();
  sub_1000265F8();
  v0 = sub_10000E440();
  sub_1000C2408(v0);
  v1 = sub_1000C24E4();
  return sub_1000C241C(v1, v2, v3);
}

uint64_t sub_1000C237C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000C2808();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PasteboardRepresentation.ID(v2) - 8) + 80);
  return sub_1000BEFD0(v0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1000C23B8()
{
  uint64_t *v0;

  return sub_1000BF3D8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000C23C4()
{
  return sub_1000BFD50();
}

uint64_t sub_1000C23CC()
{
  uint64_t v0;

  return sub_1000BFE40(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C23D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000BFEB8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_1000C23F0(uint64_t a1)
{
  uint64_t v1;

  sub_1000C04A4(a1, v1);
}

uint64_t sub_1000C23F8()
{
  return sub_1000C07D0();
}

uint64_t sub_1000C2408(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_1000C241C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000C2428()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C2440()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_1000C2450(uint64_t a1)
{
  type metadata accessor for PasteboardDataSession.ID(0);
  return a1;
}

uint64_t sub_1000C24A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000C24AC(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1000C24C4()
{
  uint64_t v0;

  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_1000C24E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C251C(uint64_t a1)
{
  return swift_allocObject(a1, 48, 7);
}

uint64_t sub_1000C2528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v2 - 88, *(_QWORD *)(v2 - 104), v1);
}

uint64_t sub_1000C2544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v3 - 88, v2, v1);
}

uint64_t sub_1000C2560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100006FB4(v2, a2);
}

uint64_t sub_1000C257C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000C1348(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C258C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

void sub_1000C25AC()
{
  sub_1000BE6DC();
}

uint64_t sub_1000C25B4()
{
  return ((uint64_t (*)(void))dispatch thunk of Hashable.hash(into:))();
}

uint64_t sub_1000C25E0()
{
  return type metadata accessor for PasteboardDataSession.ID(0);
}

uint64_t sub_1000C2600(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_1000C2620()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C263C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1000C2650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000C2664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return type metadata accessor for UUID(0);
}

uint64_t sub_1000C2688(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 88) = result;
  return result;
}

BOOL sub_1000C2698(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000C26A8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C26B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000C26C8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000C26E8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

uint64_t sub_1000C271C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100006FB4(v2, a2);
}

uint64_t sub_1000C2738()
{
  return type metadata accessor for PasteboardDataSession.ID(0);
}

uint64_t sub_1000C2754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 136, v4, v5, a4);
}

uint64_t sub_1000C2764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000C276C()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000C2778()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1000C2784(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_1000C2798(uint64_t a1, uint64_t a2)
{
  void *v2;

  sub_1000BF9A8(a1, a2, v2);
}

uint64_t sub_1000C27A0(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.default.getter(a1, a2);
}

uint64_t sub_1000C27A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C27BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return a3(a1, v3, a2, v4);
}

uint64_t sub_1000C27C8(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 6);
}

uint64_t sub_1000C27D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000C27DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_1000C27E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C2808()
{
  return 0;
}

uint64_t sub_1000C2814()
{
  uint64_t v0;

  return sub_1000BF854(v0);
}

uint64_t sub_1000C281C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v3);
  v4 = sub_1000AAF20();
  type metadata accessor for CompanionLinkDevice(v4);
  sub_10000E490();
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v8) == 1)
  {
    sub_1000C2CCC(a1);
    v9 = sub_1000C2CD4();
    sub_1001AA084(v9);
    sub_10000E410();
    return sub_1000C2CCC(v1);
  }
  else
  {
    sub_10000B210(a1, (uint64_t)v7);
    sub_10006033C();
    sub_1001AA964(v11, v12, v13);
    return sub_10000E410();
  }
}

uint64_t sub_1000C28FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000055B0((uint64_t *)&unk_1002B3350);
  sub_10000E490();
  __chkstk_darwin(v3);
  v4 = sub_1000AAF20();
  v5 = type metadata accessor for UniversalControlDisplayLayout(v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v5) == 1)
  {
    sub_1000C2CCC(a1);
    v9 = sub_1000C2CD4();
    sub_1001AA274(v9);
    return sub_1000C2CCC(v1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, a1, v5);
    sub_10006033C();
    return sub_1001AA9DC(v11, v12, v13);
  }
}

uint64_t sub_1000C29F0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[40];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100025A50((__int128 *)a1, (uint64_t)v3);
    sub_10006033C();
    sub_1001AAA54();
    return sub_10000E410();
  }
  else
  {
    sub_1000C2CC4(a1);
    v2 = sub_1000C2CD4();
    sub_1001AA540(v2);
    sub_10000E410();
    return sub_1000C2CC4((uint64_t)v3);
  }
}

void sub_1000C2A68(uint64_t a1, void *a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100005778((_OWORD *)a1, v3);
    sub_1001AAA94();

  }
  else
  {
    sub_1000C2C88(a1, &qword_1002B34C0);
    sub_1001AA67C(v3, a2);

    sub_1000C2C88((uint64_t)v3, &qword_1002B34C0);
  }
  sub_10000B338();
}

id sub_1000C2AD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  NSString v20;
  uint64_t v21;
  Class isa;
  id v23;
  uint64_t v25;
  _QWORD *v26;
  char v27[8];
  _QWORD v28[3];
  void *v29;
  uint64_t v30;

  v30 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (a5)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v29 = &type metadata for String;
    v28[0] = a4;
    v28[1] = a5;
    sub_100005410((uint64_t)v28, v11, v12);
  }
  if (a6)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v15 = v14;
    swift_getErrorValue(a6, v27, &v25);
    v16 = v25;
    v17 = v26;
    v29 = v26;
    v18 = sub_100005534(v28);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v17 - 1) + 16))(v18, v16, v17);
    sub_100005410((uint64_t)v28, v13, v15);
  }
  v19 = objc_allocWithZone((Class)NSError);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v21 = v30;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  v23 = objc_msgSend(v19, "initWithDomain:code:userInfo:", v20, a3, isa);

  swift_errorRelease(a6);
  return v23;
}

uint64_t sub_1000C2C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000055B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C2CC4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000C2C88(a1, v1);
}

uint64_t sub_1000C2CCC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000C2C88(a1, v1);
}

uint64_t sub_1000C2CD4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C2CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t (*a5)(char *, uint64_t, uint64_t, uint64_t, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;

  v39 = a6;
  v40 = a5;
  v38 = a4;
  v36 = a3;
  v35 = a2;
  v41 = a7;
  v37 = type metadata accessor for OSSignpostID(0);
  v8 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignposter(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - v19;
  v21 = type metadata accessor for SignpostInterval(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v20, a1, v11, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  v42 = 0;
  v43 = 0;
  v44 = 256;
  sub_1000C30C4((uint64_t)v20, 0, 0, 256, 0, (uint64_t)v24);
  sub_10002CA90((uint64_t)v24, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    sub_1000C3130((uint64_t)v17);
  }
  else
  {
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    v26 = &v24[*(int *)(v21 + 20)];
    v34 = v21;
    v27 = v8;
    v28 = v35;
    *(_QWORD *)v26 = v35;
    v29 = v36;
    *((_QWORD *)v26 + 1) = v36;
    v30 = v38;
    *((_WORD *)v26 + 8) = v38;
    OSSignposter.makeSignpostID()(v25);
    v31 = v40(v14, v28, v29, v30, v10);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v37);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_QWORD *)&v24[*(int *)(v34 + 24)] = v31;
    swift_release();
  }
  sub_10002CAD8((uint64_t)v24, v41);
  return sub_10002CB1C((uint64_t)v24);
}

uint64_t type metadata accessor for SignpostInterval(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002AF6A8, (uint64_t)&nominal type descriptor for SignpostInterval);
}

uint64_t sub_1000C2FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v2 = sub_100026B28();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6F70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000C3010()
{
  uint64_t v0;

  v0 = sub_100026B28();
  sub_10000897C(v0, qword_1002B6F70);
  sub_100006FB4(v0, (uint64_t)qword_1002B6F70);
  return OSSignposter.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x74736F706E676973, 0xE800000000000000);
}

uint64_t sub_1000C3080()
{
  uint64_t v0;

  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v0 = sub_100026B28();
  return sub_100006FB4(v0, (uint64_t)qword_1002B6F70);
}

uint64_t sub_1000C30C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  uint64_t v12;

  sub_1000C3E90(a1, a6);
  result = type metadata accessor for SignpostInterval(0);
  v12 = a6 + *(int *)(result + 20);
  *(_QWORD *)v12 = a2;
  *(_QWORD *)(v12 + 8) = a3;
  *(_BYTE *)(v12 + 16) = a4;
  *(_BYTE *)(v12 + 17) = HIBYTE(a4) & 1;
  *(_QWORD *)(a6 + *(int *)(result + 24)) = a5;
  return result;
}

uint64_t sub_1000C3130(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002B1CD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000C3170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CA90(v0, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000C3130((uint64_t)v3);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v8 = type metadata accessor for SignpostInterval(0);
  v9 = v0 + *(int *)(v8 + 20);
  v10 = *(const char **)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  if ((*(_BYTE *)(v9 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + *(int *)(v8 + 24));
    swift_retain();
    if (v13)
    {
      sub_1000C3324((uint64_t)v7, v10, v11, v12, v13);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_release();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000C3324(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t result;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  char v27;

  v26 = a2;
  v7 = type metadata accessor for OSSignpostError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OSSignposter.logHandle.getter(v13);
  v17 = OSSignpostIntervalState.signpostID.getter();
  v25 = static os_signpost_type_t.end.getter(v17);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {
LABEL_13:

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  v24 = v12;
  if ((a4 & 1) == 0)
  {
    v19 = v26;
    if (v26)
    {
LABEL_9:
      v20 = swift_retain(a5);
      checkForErrorAndConsumeState(state:)(v20);
      swift_release(a5);
      if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v10, v7) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v21 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        v21 = "";
      }
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      v23 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, (os_signpost_type_t)v25, v23, v19, v21, v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      v12 = v24;
      goto LABEL_13;
    }
    __break(1u);
  }
  if ((unint64_t)v26 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v26 >> 11 != 27)
  {
    if (v26 >> 16 <= 0x10)
    {
      v19 = &v27;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1000C3524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignposter(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000C3560(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OSSignposter(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000C3594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignposter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C35D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignposter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C361C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignposter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C3660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignposter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000C36A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C36B0);
}

uint64_t sub_1000C36B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100026B28();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
}

uint64_t sub_1000C36E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C36EC);
}

uint64_t sub_1000C36EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100026B28();
  v0 = sub_1000C3ED8();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, v1, v2, v3);
}

uint64_t type metadata accessor for Signpost(uint64_t a1)
{
  return sub_100021590(a1, qword_1002AF618, (uint64_t)&nominal type descriptor for Signpost);
}

uint64_t sub_1000C3728(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for OSSignposter(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000C3790(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for OSSignposter(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v7))
    {
      v8 = sub_1000055B0(&qword_1002B1CD0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
    v10 = *(int *)(a3 + 20);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v10;
    v13 = (char *)a2 + v10;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000C3880(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OSSignposter(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

char *sub_1000C38E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for OSSignposter(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000055B0(&qword_1002B1CD0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  swift_retain();
  return a1;
}

char *sub_1000C39AC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  v6 = type metadata accessor for OSSignposter(0);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v6);
  v8 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_1000055B0(&qword_1002B1CD0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_OWORD *)v13;
  *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  *(_OWORD *)v12 = v14;
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1000C3AD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for OSSignposter(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v6))
  {
    v7 = sub_1000055B0(&qword_1002B1CD0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  return a1;
}

char *sub_1000C3B98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for OSSignposter(0);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v6);
  v8 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = sub_1000055B0(&qword_1002B1CD0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_WORD *)v13 + 8) = *((_WORD *)v14 + 8);
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release();
  return a1;
}

uint64_t sub_1000C3CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3CC0);
}

uint64_t sub_1000C3CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = sub_1000055B0(&qword_1002B1CD0);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t sub_1000C3D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3D54);
}

uint64_t sub_1000C3D54(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_1000055B0(&qword_1002B1CD0);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = sub_1000C3ED8();
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v9, v10, v11, v12);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

void sub_1000C3DC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000C3E3C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100222C08;
    v4[2] = &unk_100222C20;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000C3E3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002AF6B8)
  {
    v2 = type metadata accessor for OSSignposter(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002AF6B8);
  }
}

uint64_t sub_1000C3E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C3ED8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000C3EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000C3F28()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[6];

  v1 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 20) = -1;
  v2 = (int *)(v0 + 20);
  v3 = sub_10000B0EC();
  v4 = static OS_dispatch_queue.main.getter(v3);
  v5 = swift_allocObject(&unk_1002896E8, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v8[4] = sub_1000C4220;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000C3EEC;
  v8[3] = &unk_100289700;
  v6 = _Block_copy(v8);
  swift_release();
  swift_beginAccess(v2, v8, 33, 0);
  notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v2, v4, v6);
  swift_endAccess(v8);
  _Block_release(v6);

  sub_1000C40C8();
  return v1;
}

uint64_t sub_1000C4034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1000C40C8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000C4088()
{
  uint64_t v0;

  sub_1000C4138();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for KeyBagController()
{
  return objc_opt_self(_TtC13EnsembleAgent16KeyBagController);
}

uint64_t sub_1000C40C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = v0;
  result = MKBDeviceUnlockedSinceBoot();
  if ((_DWORD)result == 1 && (*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    v3 = type metadata accessor for KeyBagController();
    sub_1000C41C0();
    ObservableObject<>.objectWillChange.getter(v3);
    ObservableObjectPublisher.send()();
    swift_release();
    *(_BYTE *)(v1 + 16) = 1;
    return sub_1000C4138();
  }
  return result;
}

uint64_t sub_1000C4138()
{
  uint64_t v0;
  uint64_t result;
  _BYTE v2[24];

  swift_beginAccess(v0 + 20, v2, 1, 0);
  result = *(unsigned int *)(v0 + 20);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *(_DWORD *)(v0 + 20) = -1;
  }
  return result;
}

uint64_t sub_1000C4188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for KeyBagController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

unint64_t sub_1000C41C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B1800;
  if (!qword_1002B1800)
  {
    v1 = type metadata accessor for KeyBagController();
    result = swift_getWitnessTable(&unk_100222C64, v1);
    atomic_store(result, (unint64_t *)&qword_1002B1800);
  }
  return result;
}

uint64_t sub_1000C41FC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C4220(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C4034(a1, v1);
}

uint64_t sub_1000C4228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C4238(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t KeyFocusController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 56, 7);
  KeyFocusController.init()();
  return v1;
}

uint64_t KeyFocusController.deactivate()()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000C48F0();
  sub_1000C48DC();
  __chkstk_darwin(v2);
  v3 = sub_1000C488C();
  v4 = v3;
  v5 = static OS_dispatch_queue.main.getter(v3);
  *v1 = v5;
  sub_1000C48CC(v5, enum case for DispatchPredicate.onQueue(_:));
  _dispatchPreconditionTest(_:)(v1);
  sub_1000C48A8();
  if ((v4 & 1) != 0)
  {
    if (qword_1002A9870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1002A9870, sub_1000876CC);
LABEL_3:
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006FB4(v6, (uint64_t)qword_1002B6EB0);
  v8 = (void *)Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (sub_100040394(v10))
  {
    *(_WORD *)sub_100040274() = 0;
    sub_100040308((void *)&_mh_execute_header, v11, v12, "keyFocus: deactivating keyfocus via assertion");
    sub_1000C48BC();
  }

  v13 = (void *)v0[2];
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "disableKeyboardFocusOnCurrentDeviceForReason:", v14);

  v16 = v0[3];
  v0[3] = v15;
  swift_unknownObjectRetain(v15);
  result = swift_unknownObjectRelease(v16);
  v18 = v0[4];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    v0[4] = v20;
    v21 = swift_allocObject(&unk_100289758, 32, 7);
    *(_QWORD *)(v21 + 16) = v15;
    *(_QWORD *)(v21 + 24) = v0;
    v22 = type metadata accessor for AnyCancellable(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_retain(v0);
    return AnyCancellable.init(_:)(sub_1000C4818, v21);
  }
  return result;
}

uint64_t KeyFocusController.handler.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  sub_10000B2F8(v0 + 40, (uint64_t)v3, 0);
  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t KeyFocusController.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_10000B2F8(v2 + 40, (uint64_t)v6, 1);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_release();
}

uint64_t (*KeyFocusController.handler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 40, a1, 33);
  return j__swift_endAccess;
}

_QWORD *KeyFocusController.init()()
{
  _QWORD *v0;

  v0[2] = objc_msgSend((id)objc_opt_self(SBSUniversalControlService), "sharedInstance");
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = CGSize.init(_:);
  v0[6] = 0;
  return v0;
}

uint64_t sub_1000C4534()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(__n128);
  __n128 v15;
  _BYTE v16[24];

  sub_1000C48F0();
  sub_1000C48DC();
  __chkstk_darwin(v2);
  v3 = sub_1000C488C();
  v4 = v3;
  v5 = static OS_dispatch_queue.main.getter(v3);
  *v1 = v5;
  sub_1000C48CC(v5, enum case for DispatchPredicate.onQueue(_:));
  _dispatchPreconditionTest(_:)(v1);
  result = sub_1000C48A8();
  if ((v4 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1002A9870, sub_1000876CC);
    goto LABEL_4;
  }
  if (*(uint64_t *)(v0 + 32) < 1)
    return result;
  if (qword_1002A9870 != -1)
    goto LABEL_9;
LABEL_4:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100006FB4(v7, (uint64_t)qword_1002B6EB0);
  v9 = (void *)Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v9, v10);
  if (sub_100040394(v11))
  {
    *(_WORD *)sub_100040274() = 0;
    sub_100040308((void *)&_mh_execute_header, v12, v13, "keyFocus: activated by receiving incoming touch/mouse-down");
    sub_1000C48BC();
  }

  sub_10000B2F8(v0 + 40, (uint64_t)v16, 0);
  v14 = *(void (**)(__n128))(v0 + 40);
  v15 = swift_retain();
  v14(v15);
  return swift_release();
}

id sub_1000C465C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  id result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000B0EC();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) != 0)
  {
    if (qword_1002A9870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1002A9870, sub_1000876CC);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100006FB4(v10, (uint64_t)qword_1002B6EB0);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "keyFocus: keyfocus assertion released", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  result = objc_msgSend(a1, "invalidate");
  v17 = *(_QWORD *)(a2 + 32);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(a2 + 32) = v19;
  return result;
}

uint64_t sub_1000C47EC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1000C4818()
{
  uint64_t v0;

  return sub_1000C465C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t KeyFocusController.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t KeyFocusController.__deallocating_deinit()
{
  uint64_t v0;

  KeyFocusController.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for KeyFocusController()
{
  return objc_opt_self(_TtC13EnsembleAgent18KeyFocusController);
}

unint64_t sub_1000C488C()
{
  return sub_10000B0EC();
}

uint64_t sub_1000C48A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C48BC()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_1000C48CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000C48F0()
{
  return type metadata accessor for DispatchPredicate(0);
}

uint64_t sub_1000C48FC()
{
  _QWORD *v0;

  return swift_unknownObjectRetain(*v0);
}

uint64_t ECXPCDictionary.init(xpcobject:)(uint64_t a1)
{
  uint64_t v1;
  xpc_type_t v2;

  v1 = a1;
  swift_getObjectType(a1);
  v2 = OS_xpc_object.type.getter();
  if (v2 != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    swift_unknownObjectRelease(v1);
    return 0;
  }
  return v1;
}

uint64_t ECXPCDictionary.init(dictionary:)(uint64_t a1)
{
  uint64_t result;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  result = (uint64_t)xpc_dictionary_create(0, 0, 0);
  v3 = (void *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v24 = (unint64_t)(v6 + 63) >> 6;
  if ((v7 & v5) == 0)
    goto LABEL_6;
LABEL_4:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v10 = v9 | (v4 << 6);
  while (2)
  {
    v11 = *(_QWORD *)(a1 + 56);
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v13 = v12[1];
    *(_QWORD *)&v25 = *v12;
    *((_QWORD *)&v25 + 1) = v13;
    sub_1000445C0(v11 + 40 * v10, (uint64_t)&v26);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100079420((uint64_t)&v25, (uint64_t)&v29);
      v17 = v30;
      if (!v30)
      {
        swift_release();
        return (uint64_t)v3;
      }
      v18 = v29;
      sub_100025A50(&v31, (uint64_t)&v25);
      v19 = *((_QWORD *)&v26 + 1);
      v20 = v27;
      sub_10000DBE4(&v25, *((uint64_t *)&v26 + 1));
      v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      v22 = String.utf8CString.getter(v18, v17);
      swift_bridgeObjectRelease();
      xpc_dictionary_set_value(v3, (const char *)(v22 + 32), v21);
      swift_unknownObjectRelease(v21);
      swift_release();
      result = sub_100005988(&v25);
      if (v8)
        goto LABEL_4;
LABEL_6:
      v14 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v14 < v24)
      {
        v15 = *(_QWORD *)(v23 + 8 * v14);
        if (v15)
          goto LABEL_9;
        v16 = v4 + 2;
        ++v4;
        if (v14 + 1 < v24)
        {
          v15 = *(_QWORD *)(v23 + 8 * v16);
          if (v15)
            goto LABEL_12;
          v4 = v14 + 1;
          if (v14 + 2 < v24)
          {
            v15 = *(_QWORD *)(v23 + 8 * (v14 + 2));
            if (v15)
            {
              v14 += 2;
              goto LABEL_9;
            }
            v16 = v14 + 3;
            v4 = v14 + 2;
            if (v14 + 3 < v24)
              break;
          }
        }
      }
LABEL_23:
      v8 = 0;
      v28 = 0;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
    }
    v15 = *(_QWORD *)(v23 + 8 * v16);
    if (v15)
    {
LABEL_12:
      v14 = v16;
LABEL_9:
      v8 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v14 << 6);
      v4 = v14;
      continue;
    }
    break;
  }
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v24)
    {
      v4 = v24 - 1;
      goto LABEL_23;
    }
    v15 = *(_QWORD *)(v23 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_9;
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL ECXPCDictionary.isEmpty.getter(void *a1)
{
  return xpc_dictionary_get_count(a1) == 0;
}

uint64_t sub_1000C4BEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ECXPCDictionary.init(xpcobject:)(a1);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for ECXPCDictionary()
{
  return &type metadata for ECXPCDictionary;
}

uint64_t type metadata accessor for UnfairLock()
{
  return objc_opt_self(_TtC13EnsembleAgent10UnfairLock);
}

{
  return objc_opt_self(_TtC11EnsembleHID10UnfairLock);
}

uint64_t sub_1000C4C44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state);
  if (v4 >= 3)
  {
    if (v4 == 3)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000034, 0x8000000100256770, "EnsembleAgent/Archive.swift", 27, 2, 532, 0);
      __break(1u);
    }
    else
    {
      v6 = swift_errorRetain(*(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state));
      swift_willThrow(v6);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
      return swift_release(a2);
    }
  }
  else
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
    return swift_release(a2);
  }
  return result;
}

BOOL sub_1000C4D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  swift_retain();
  sub_1000C4E20(a3);
  swift_release();
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state);
  if (!v6)
  {
    *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state) = 2;
    sub_1000C4E10(0);
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  swift_release();
  swift_release();
  return v6 == 0;
}

uint64_t sub_1000C4DC4()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for UnfairRecursiveLock()
{
  return objc_opt_self(_TtC13EnsembleAgent19UnfairRecursiveLock);
}

{
  return objc_opt_self(_TtC11EnsembleHID19UnfairRecursiveLock);
}

unint64_t sub_1000C4E10(unint64_t result)
{
  if (result >= 4)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1000C4E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  sub_10000B2F8(v1 + 16, (uint64_t)v7, 33);
  v3 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v4 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000CA720(v4);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, a1);
  specialized Array._endMutation()(v5);
  return swift_endAccess(v7);
}

uint64_t sub_1000C4E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  result = sub_10000B2F8(v1 + 16, (uint64_t)v9, 1);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = _swiftEmptyArrayStorage;
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v4);
  }
  if (v4 < 0)
    v8 = v4;
  else
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v8);
  result = swift_bridgeObjectRelease(v4);
  if (!v5)
    return swift_bridgeObjectRelease(v4);
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      }
      else
      {
        v7 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain(v7);
      }
      Completion.callAsFunction(_:)(a1);
      swift_release(v7);
    }
    return swift_bridgeObjectRelease(v4);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Completions()
{
  return objc_opt_self(_TtC13EnsembleAgent11Completions);
}

uint64_t sub_1000C4FB4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = 0;
  return v1;
}

uint64_t sub_1000C4FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v74;
  uint64_t v75;
  int64_t v77;
  uint64_t v78;
  _BYTE v79[24];
  _QWORD v80[6];

  v9 = a6;
  v70 = a2;
  *(_QWORD *)(a6 + 16) = a5;
  *(_QWORD *)(a6 + 24) = 1;
  v64 = a5;
  sub_1000C5A50(a1, a2, a3, a4, a5);
  sub_100043078(v80, a1);
  v75 = v80[0];
  v77 = v80[3];
  v11 = v80[4];
  v12 = (_QWORD *)(a7 + 16);
  v66 = v80[1];
  v68 = (unint64_t)(v80[2] + 64) >> 6;
  v62 = a1;
  result = swift_bridgeObjectRetain(a1);
  v74 = v9;
  if (!v11)
    goto LABEL_3;
LABEL_2:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v15 = v14 | (v77 << 6);
  while (1)
  {
    v20 = *(_QWORD *)(v9 + 24);
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      break;
    v23 = *(_QWORD *)(*(_QWORD *)(v75 + 48) + 8 * v15);
    v24 = (uint64_t *)(*(_QWORD *)(v75 + 56) + 32 * v15);
    v25 = *v24;
    v26 = (void *)v24[2];
    v27 = (void *)v24[3];
    *(_QWORD *)(v9 + 24) = v22;
    v28 = sub_1000B219C();
    sub_1000C251C(v28);
    swift_retain(v25);
    v29 = v26;
    v30 = v27;
    swift_bridgeObjectRetain(a3);
    swift_retain(v9);
    v31 = Completion.init(file:line:body:)(v70, a3, a4, (uint64_t)sub_1000C5A24, v9);
    v32 = sub_10000B2F8((uint64_t)v12, (uint64_t)v79, 32);
    v40 = *v12;
    if (*(_QWORD *)(*v12 + 16) && (v32 = sub_1001AAE3C(v23), (v33 & 1) != 0))
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v32);
      sub_1000C5A58(v32, v33, v34, v35, v36, v37, v38, v39, v62, v64, v66, v68, v70);
      sub_1000269EC();
    }
    else
    {
      sub_1000C5A58(v32, v33, v34, v35, v36, v37, v38, v39, v62, v64, v66, v68, v70);
      v42 = type metadata accessor for Completions();
      v41 = swift_allocObject(v42, 24, 7);
      *(_QWORD *)(v41 + 16) = _swiftEmptyArrayStorage;
    }
    swift_retain(v25);
    v43 = v29;
    v44 = v30;
    sub_1000C4E20((uint64_t)v31);
    sub_10000B2F8((uint64_t)v12, (uint64_t)v79, 33);
    sub_1000269EC();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
    v78 = *v12;
    *v12 = 0x8000000000000000;
    sub_1000F2E04(v41, v23, isUniquelyReferenced_nonNull_native);
    v46 = *v12;
    *v12 = v78;
    v47 = swift_bridgeObjectRelease(v46);
    v55 = sub_1000C5A58(v47, v48, v49, v50, v51, v52, v53, v54, v63, v65, v67, v69, v71);
    v56 = HIDServiceClient.capsLockEngaged.getter(v55);
    v57 = *(unsigned __int8 *)ServiceFilterFlags.maskChanged.unsafeMutableAddressor();
    if ((v56 & 1) != 0)
    {
      v58 = *(unsigned __int8 *)ServiceFilterFlags.capsLockEngaged.unsafeMutableAddressor();
      if ((_DWORD)v57)
      {
        if ((v58 & ~(_DWORD)v57) != 0)
          goto LABEL_29;
      }
      else
      {
        if (v58)
        {
LABEL_29:
          v57 = v58 | v57;
          goto LABEL_31;
        }
        v57 = 0;
      }
    }
LABEL_31:
    ServiceFilterReport.flags.setter(v57);
    v60 = *a8;
    v59 = a8[1];
    v61 = a8[2];
    sub_10002517C(*a8, v59);
    sub_10017AE50(v60, v59, v61, v44);
    sub_100022AEC(v60, v59);
    swift_release();

    swift_release_n(v25, 2);
    result = sub_10000FF50();
    v9 = v74;
    if (v11)
      goto LABEL_2;
LABEL_3:
    v16 = v77 + 1;
    if (__OFADD__(v77, 1))
      goto LABEL_35;
    if (v16 >= v68)
      goto LABEL_33;
    v17 = *(_QWORD *)(v66 + 8 * v16);
    v18 = v77 + 1;
    if (!v17)
    {
      v18 = v77 + 2;
      if (v77 + 2 >= v68)
        goto LABEL_33;
      v17 = *(_QWORD *)(v66 + 8 * v18);
      if (!v17)
      {
        v18 = v77 + 3;
        if (v77 + 3 >= v68)
          goto LABEL_33;
        v17 = *(_QWORD *)(v66 + 8 * v18);
        if (!v17)
        {
          v18 = v77 + 4;
          if (v77 + 4 >= v68)
            goto LABEL_33;
          v17 = *(_QWORD *)(v66 + 8 * v18);
          if (!v17)
          {
            v18 = v77 + 5;
            if (v77 + 5 >= v68)
              goto LABEL_33;
            v17 = *(_QWORD *)(v66 + 8 * v18);
            if (!v17)
            {
              v19 = v77 + 6;
              while (v19 < v68)
              {
                v17 = *(_QWORD *)(v66 + 8 * v19++);
                if (v17)
                {
                  v18 = v19 - 1;
                  goto LABEL_18;
                }
              }
LABEL_33:
              swift_bridgeObjectRelease(a3);
              swift_release();
              sub_1000C5830(0);
              swift_release();
              swift_bridgeObjectRelease(v62);
              swift_release();
              return v9;
            }
          }
        }
      }
    }
LABEL_18:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v77 = v18;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void sub_1000C53B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, _QWORD *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  *(_QWORD *)(a6 + 16) = a5;
  *(_QWORD *)(a6 + 24) = 1;
  sub_1000C5A50(a1, a2, a3, a4, a5);
  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10)
  {
    while (v10 >= 1)
    {
      v11 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
        }
        else
        {
          v12 = *(_QWORD *)(a1 + 8 * v11 + 32);
          sub_1000269EC();
        }
        v13 = *(_QWORD *)(a6 + 24);
        v14 = __OFADD__(v13, 1);
        v15 = v13 + 1;
        if (v14)
          break;
        *(_QWORD *)(a6 + 24) = v15;
        v16 = sub_1000B219C();
        sub_1000C251C(v16);
        swift_bridgeObjectRetain();
        swift_retain();
        v17 = Completion.init(file:line:body:)(a2, a3, a4, (uint64_t)sub_1000C5A24, a6);
        v18 = (_QWORD *)swift_allocObject(&unk_100289870, 40, 7);
        v18[2] = a7;
        v18[3] = v12;
        v18[4] = v17;
        sub_1000C251C(v16);
        swift_retain();
        sub_1000269EC();
        swift_retain();
        v19 = Completion.init(file:line:body:)(0xD00000000000005CLL, 0x8000000100256870, 99, (uint64_t)sub_1000C5A18, (uint64_t)v18);
        a8(v12, v19);
        sub_10000FF50();
        ++v11;
        sub_10000FF50();
        swift_release();
        if (v10 == v11)
          goto LABEL_10;
      }
      __break(1u);
LABEL_12:
      if (a1 < 0)
        v20 = a1;
      else
        v20 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v10)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000C5A44();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000C5A28();
  }
}

void sub_1000C55FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  _QWORD v24[5];

  *(_QWORD *)(a6 + 16) = a5;
  *(_QWORD *)(a6 + 24) = 1;
  sub_1000C5A50(a1, a2, a3, a4, a5);
  sub_100043078(v24, a1);
  v11 = v24[3];
  v12 = v24[4];
  v22 = v24[1];
  v23 = (unint64_t)(v24[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v12)
    goto LABEL_3;
LABEL_2:
  v12 &= v12 - 1;
  while (1)
  {
    v17 = *(_QWORD *)(a6 + 24);
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      break;
    *(_QWORD *)(a6 + 24) = v19;
    v20 = sub_1000B219C();
    sub_1000C251C(v20);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v21 = Completion.init(file:line:body:)(a2, a3, a4, (uint64_t)sub_1000C59E0, a6);
    sub_1000F8BBC((uint64_t)v21);
    swift_release();
    swift_release();
    if (v12)
      goto LABEL_2;
LABEL_3:
    v13 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_24;
    if (v13 >= v23)
      goto LABEL_22;
    v14 = *(_QWORD *)(v22 + 8 * v13);
    v15 = v11 + 1;
    if (!v14)
    {
      v15 = v11 + 2;
      if (v11 + 2 >= v23)
        goto LABEL_22;
      v14 = *(_QWORD *)(v22 + 8 * v15);
      if (!v14)
      {
        v15 = v11 + 3;
        if (v11 + 3 >= v23)
          goto LABEL_22;
        v14 = *(_QWORD *)(v22 + 8 * v15);
        if (!v14)
        {
          v15 = v11 + 4;
          if (v11 + 4 >= v23)
            goto LABEL_22;
          v14 = *(_QWORD *)(v22 + 8 * v15);
          if (!v14)
          {
            v15 = v11 + 5;
            if (v11 + 5 >= v23)
              goto LABEL_22;
            v14 = *(_QWORD *)(v22 + 8 * v15);
            if (!v14)
            {
              v16 = v11 + 6;
              while (v16 < v23)
              {
                v14 = *(_QWORD *)(v22 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
LABEL_22:
              swift_bridgeObjectRelease();
              swift_release();
              sub_1000C5A44();
              swift_bridgeObjectRelease();
              swift_release();
              sub_1000C5A28();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    v12 = (v14 - 1) & v14;
    v11 = v15;
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t sub_1000C5810(uint64_t a1)
{
  return sub_1000C5830(a1);
}

uint64_t sub_1000C5830(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = v2 < 1;
  v4 = v2 - 1;
  if (v3)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100256850, "EnsembleAgent/Completions.swift", 31, 2, 87, 0);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 24) = v4;
    if (result || !v4)
      return sub_1000C59A4(result);
  }
  return result;
}

uint64_t sub_1000C58B8()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    __break(1u);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 16));
    return v0;
  }
  return result;
}

uint64_t sub_1000C58E0()
{
  uint64_t v0;

  sub_1000C58B8();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for CompletionGroup()
{
  return objc_opt_self(_TtC13EnsembleAgent15CompletionGroup);
}

_QWORD *sub_1000C5920(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v3 + 24);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v9 = (uint64_t)result;
    *(_QWORD *)(v3 + 24) = v6;
    v10 = sub_1000B219C();
    sub_1000C251C(v10);
    swift_bridgeObjectRetain();
    swift_retain();
    return Completion.init(file:line:body:)(v9, a2, a3, (uint64_t)sub_1000C5A24, v3);
  }
  return result;
}

uint64_t sub_1000C59A4(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 16) = 0;
    Completion.callAsFunction(_:)(result);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000C59E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C5A18(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FE548(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C5A44()
{
  return sub_1000C5830(0);
}

uint64_t sub_1000C5A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_retain(a5);
}

uint64_t sub_1000C5A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return swift_endAccess(va);
}

uint64_t sub_1000C5A60()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6F88);
  sub_100006FB4(v0, (uint64_t)qword_1002B6F88);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1195463236, 0xE400000000000000);
}

uint64_t sub_1000C5ACC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  swift_beginAccess(v0 + 4, v13, 0, 0);
  v1 = v0[7];
  if (!v1)
    return 45;
  v2 = v0[8];
  v3 = sub_10000DBE4(v0 + 4, v0[7]);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, __n128))(v4 + 16))(v7, v5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v1);
  if (!v8)
    return 45;
  sub_10018B484();
  v10 = v9;
  swift_release();
  return v10;
}

uint64_t sub_1000C5BD4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD v14[5];
  _BYTE v15[24];
  uint64_t v16;
  unint64_t v17;

  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(87);
  v16 = 0;
  v17 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  v1._object = (void *)0x80000001002569A0;
  String.append(_:)(v1);
  if (*(_QWORD *)(v0 + 24))
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (*(_QWORD *)(v0 + 24))
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001002569D0;
  v5._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v5);
  swift_beginAccess(v0 + 32, v15, 0, 0);
  sub_1000322D0(v0 + 32, (uint64_t)v14, (uint64_t *)&unk_1002AFD48);
  v6 = sub_1000055B0((uint64_t *)&unk_1002AFD48);
  v7._countAndFlagsBits = String.init<A>(describing:)(v14, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3D746E696F70202CLL;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = CGPoint.description.getter(*(double *)(v0 + 72), *(double *)(v0 + 80));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x746567726174202CLL;
  v10._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = UniversalControlDeviceID.description.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8233;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return v16;
}

uint64_t sub_1000C5D64(unint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t v4;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v7 = a2;
  v8 = a1;
  v9 = a1 >> 8;
  v10 = a1 >> 16;
  v11 = a1 >> 24;
  v12 = HIDWORD(a1);
  v13 = a1 >> 40;
  v14 = HIWORD(a1);
  v15 = HIBYTE(a1);
  v19 = a2 >> 8;
  v20 = a2 >> 16;
  v21 = a2 >> 24;
  v22 = HIDWORD(a2);
  v23 = a2 >> 40;
  v24 = HIWORD(a2);
  v25 = HIBYTE(a2);
  v16 = type metadata accessor for Completions();
  v17 = swift_allocObject(v16, 24, 7);
  *(_QWORD *)(v17 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 16) = v17;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_BYTE *)(v4 + 88) = v8;
  *(_BYTE *)(v4 + 89) = v9;
  *(_BYTE *)(v4 + 90) = v10;
  *(_BYTE *)(v4 + 91) = v11;
  *(_BYTE *)(v4 + 92) = v12;
  *(_BYTE *)(v4 + 93) = v13;
  *(_BYTE *)(v4 + 94) = v14;
  *(_BYTE *)(v4 + 95) = v15;
  *(_BYTE *)(v4 + 96) = v7;
  *(_BYTE *)(v4 + 97) = v19;
  *(_BYTE *)(v4 + 98) = v20;
  *(_BYTE *)(v4 + 99) = v21;
  *(_BYTE *)(v4 + 100) = v22;
  *(_BYTE *)(v4 + 101) = v23;
  *(_BYTE *)(v4 + 102) = v24;
  *(_BYTE *)(v4 + 103) = v25;
  *(double *)(v4 + 72) = a3;
  *(double *)(v4 + 80) = a4;
  return v4;
}

uint64_t sub_1000C5E9C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_1000C7ACC(v0 + 32);
  return v0;
}

uint64_t sub_1000C5EC8()
{
  uint64_t v0;

  v0 = sub_1000C5E9C();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_1000C5EE4()
{
  return sub_1000C5BD4();
}

void sub_1000C5F04(__int128 *a1)
{
  _QWORD v2[5];
  _BYTE v3[32];

  sub_100025A50(a1, (uint64_t)v2);
  sub_100025A50(a1, (uint64_t)v3);
  __asm { BR              X11 }
}

void sub_1000C5F74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char v156;
  char v157;

  v67 = v62 & 0x1FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v66 - 128) = v62 & 0x1FFFFFFFFFFFFFFFLL;
  if (v63 != 0x8000000000000000)
  {
    sub_1000C7F70();
    sub_1000C8044();
    sub_1000C7ED8((uint64_t)"unexpected transition: ");
    sub_1000C8014();
    sub_1000C7E94(v76, v77, (uint64_t)&type metadata for DragSinkCoordinator.State, v78, v79, v80, v81, v82, v100, v103, v107, v110, v113, v116, v119, v122, v125, v128, v131,
      v134,
      v137,
      v140,
      v143,
      v146,
      v149,
      v152,
      v155);
    sub_1000C7F04();
    v91 = sub_1000C7F98(v83, v84, v85, v86, v87, v88, v89, v90, v101, v104, v108, v111, v114, v117, v120, v123, v126, v129, v132,
            v135,
            v138,
            v141,
            v144,
            v147,
            v150,
            v153,
            v156);
    sub_1000C7E94(v91, v92, (uint64_t)&type metadata for DragSinkCoordinator.Event, v93, v94, v95, v96, v97, v102, v105, v109, v112, v115, v118, v121, v124, v127, v130, v133,
      v136,
      v139,
      v142,
      v145,
      v148,
      v151,
      v154,
      v157);
    sub_1000C8008();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v98, v99, "EnsembleAgent/DragSinkCoordinator.swift", 39, 2, 202, v106);
    __break(1u);
    JUMPOUT(0x1000C706CLL);
  }
  v69 = *(double *)(v66 - 144);
  v68 = *(double *)(v66 - 136);
  v70 = *(_QWORD *)(v66 - 160);
  v71 = *(_QWORD *)(v66 - 152);
  v72 = type metadata accessor for DragSinkCoordinator.Context();
  sub_1000088D8(v72, 104);
  v73 = sub_1000C5D64(v70, v71, v69, v68);
  sub_1000C7F8C();
  sub_1000C7F8C();
  sub_100123DB0(v67);
  v74 = *(_QWORD *)(v64 + 48);
  *(_QWORD *)(v64 + 48) = v73;
  sub_1000088D0();
  sub_1000C7860(v74);
  v75 = *(_QWORD **)(v64 + 40);
  sub_1000088D0();
  swift_retain();
  sub_1000B0CBC(v75, v64, v73);
  sub_10000B348();
  sub_1000C7B60(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C7B90);
  sub_1000C7B60(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C7B90);
}

uint64_t sub_1000C70A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Strong;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  char v63[8];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;
  __int128 v70[2];
  char v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v10 = sub_10000F6E4();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10002641C();
  v14 = v13 - v12;
  v15 = type metadata accessor for DragMessage(0);
  __chkstk_darwin(v15);
  sub_10002641C();
  v18 = (uint64_t *)(v17 - v16);
  sub_1000322D0(a1, (uint64_t)v70, &qword_1002ADCB0);
  if ((v71 & 1) != 0)
  {
    v19 = *(_QWORD *)&v70[0];
    v72 = *(id *)&v70[0];
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0x6000000000000000;
    swift_errorRetain(*(_QWORD *)&v70[0]);
    sub_1000C8020();
    swift_errorRelease(v19);
    return swift_errorRelease(v19);
  }
  v60 = a4;
  v61 = a5;
  sub_100025A50(v70, (uint64_t)v67);
  v21 = v68;
  v22 = v69;
  sub_10000DBE4(v67, v68);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  if (!v23)
    goto LABEL_15;
  v24 = v23;
  v62 = a2;
  v26 = v68;
  v25 = v69;
  sub_10000DBE4(v67, v68);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v26, v25);
  if (!v27)
  {
    sub_10000B364();
LABEL_15:
    sub_1000136A0();
    v51 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6709, 0xD000000000000037, 0x8000000100256A90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragSinkCoordinator.swift", 98, 2, 97);
    if (qword_1002A98A8 != -1)
      swift_once(&qword_1002A98A8, sub_1000C5A60);
    v52 = sub_100006FB4(v10, (uint64_t)qword_1002B6F88);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v52, v10);
    __chkstk_darwin(v53);
    *(&v60 - 2) = (uint64_t)v51;
    sub_1000E4038((int)sub_10000B008, (int)(&v60 - 4), v14, v54, v55, v56, v57, v58, v60, v61, v62, v63[0], v64, v65, v66[0], v66[1], v66[2], v67[0], v67[1],
      v67[2],
      v68,
      v69,
      *(uint64_t *)&v70[0],
      *((uint64_t *)&v70[0] + 1));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
    v72 = v51;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0x6000000000000000;
    v59 = v51;
    sub_1000C8020();

    return sub_100005988(v67);
  }
  v28 = v27;
  if (qword_1002A9840 != -1)
    v27 = swift_once(&qword_1002A9840, sub_10004A0E8);
  v29 = (_QWORD *)(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  result = sub_1000C7F2C(v27, (uint64_t)v66);
  if (*v29)
  {
    sub_1000088D0();
    sub_100127C78();
    v31 = v30;
    sub_10000B348();
    *(_QWORD *)(a3 + 24) = v31;
    swift_release();
    sub_1000445C0((uint64_t)v67, (uint64_t)&v72);
    swift_beginAccess(a3 + 32, v63, 33, 0);
    sub_1000C7BEC((uint64_t)&v72, a3 + 32);
    swift_endAccess(v63);
    v32 = v62 + 16;
    Strong = swift_unknownObjectWeakLoadStrong(v62 + 16);
    if (Strong)
    {
      v34 = Strong;
      *v18 = v24;
      v18[1] = v28;
      swift_storeEnumTagMultiPayload(v18, v15, 0);
      swift_retain();
      swift_retain();
      v35 = sub_1000C8058();
      sub_1000C77AC(v35, v36, 110);
      sub_1000C7FC0();
      sub_10003EC5C(v37, v38, v39, v40, v41);
      swift_unknownObjectRelease(v34);
      swift_release();
      sub_10003FD88((uint64_t)v18);
    }
    v42 = *(_QWORD *)(v24 + OBJC_IVAR____TtC13EnsembleAgent11DragSession_previews);
    if (v42 && (v43 = swift_unknownObjectWeakLoadStrong(v32)) != 0)
    {
      v44 = v43;
      *v18 = v42;
      swift_storeEnumTagMultiPayload(v18, v15, 1);
      v45 = sub_1000B219C();
      sub_1000088D8(v45, 48);
      swift_bridgeObjectRetain();
      sub_1000C8058();
      Completion.init(file:line:)();
      sub_1000C7FC0();
      sub_10003EC5C(v46, v47, v48, v49, v50);
      sub_10000B364();
      swift_release();
      swift_unknownObjectRelease(v44);
      swift_release();
      sub_10003FD88((uint64_t)v18);
    }
    else
    {
      sub_10000B364();
      swift_release();
    }
    return sub_100005988(v67);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C7520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for DragMessage(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C77AC(0xD000000000000062, 0x8000000100256A20, 168);
  v10 = v9;
  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    swift_release();
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    result = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (result)
    {
      v12 = result;
      swift_storeEnumTagMultiPayload(v8, v6, 4);
      sub_10003EC5C(a2, (uint64_t)v8, *(_QWORD *)(a3 + 88), *(_QWORD *)(a3 + 96), v10);
      swift_release();
      swift_unknownObjectRelease(v12);
      return sub_10003FD88((uint64_t)v8);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_1000C7654(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = *(_QWORD *)(v1 + 48);
  if (v2 >> 61 != 1)
    goto LABEL_4;
  v3 = v2 & 0x1FFFFFFFFFFFFFFFLL;
  v4 = (_QWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 32);
  sub_1000C7F2C(a1, (uint64_t)v12);
  v5 = *(_QWORD *)(v2 + 56);
  if (v5)
  {
    v6 = *(_QWORD *)(v3 + 64);
    v7 = sub_10000DBE4(v4, v5);
    v8 = *(_QWORD *)(v5 - 8);
    __chkstk_darwin(v7);
    sub_10002641C();
    v11 = v10 - v9;
    (*(void (**)(uint64_t))(v8 + 16))(v10 - v9);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v5);
LABEL_4:
    sub_10002644C();
    return;
  }
  __break(1u);
}

void sub_1000C7728(unint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  unint64_t v6;

  if (*(_QWORD *)(a3 + 56) == a2)
  {
    if (a1)
    {
      v4 = a1;
      v5 = 0uLL;
      v6 = 0x6000000000000000;
      swift_errorRetain(a1);
      sub_1000C5F04(&v4);
      swift_errorRelease(a1);
    }
    else
    {
      v4 = 0u;
      v5 = 0u;
      v6 = 0x8000000000000000;
      sub_1000C5F04(&v4);
    }
  }
}

void sub_1000C77AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + 56);
  v8 = sub_1000088D8((uint64_t)&unk_100289948, 32);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = sub_1000B219C();
  sub_1000088D8(v9, 48);
  swift_bridgeObjectRetain();
  sub_1000088D0();
  Completion.init(file:line:body:)(a1, a2, a3, (uint64_t)sub_1000C7B30, v8);
  sub_10002644C();
}

uint64_t DragSinkCoordinator.deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 16);

  swift_release();
  sub_1000C7860(*(_QWORD *)(v0 + 48));
  return v0;
}

unint64_t sub_1000C7860(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result &= 0x1FFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_release(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DragSinkCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  DragSinkCoordinator.deinit();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DragSinkCoordinator()
{
  return objc_opt_self(_TtC13EnsembleAgent19DragSinkCoordinator);
}

uint64_t type metadata accessor for DragSinkCoordinator.Context()
{
  return objc_opt_self(_TtCC13EnsembleAgent19DragSinkCoordinatorP33_0728A15DA8792CEC19EC7BF28ABE354F7Context);
}

unint64_t *initializeBufferWithCopyOfBuffer for DragSinkCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1000C7920(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000C7920(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
      goto LABEL_3;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result &= 0x1FFFFFFFFFFFFFFFuLL;
LABEL_3:
      result = swift_retain(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t destroy for DragSinkCoordinator.State(unint64_t *a1)
{
  return sub_1000C7860(*a1);
}

unint64_t *assignWithCopy for DragSinkCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1000C7920(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1000C7860(v4);
  return a1;
}

unint64_t *assignWithTake for DragSinkCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1000C7860(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragSinkCoordinator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7C && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 123;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7B)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragSinkCoordinator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000C7A64(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*a1 >> 3) + 4;
}

_QWORD *sub_1000C7A80(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000C7A90(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 4)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 4);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DragSinkCoordinator.State()
{
  return &type metadata for DragSinkCoordinator.State;
}

uint64_t sub_1000C7ACC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0((uint64_t *)&unk_1002AFD48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C7B0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C7B30(unint64_t a1)
{
  uint64_t v1;

  sub_1000C7728(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C7B38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;

  v5 = a5 >> 61;
  if (a5 >> 61 == 3)
    return swift_errorRetain(result);
  if ((_DWORD)v5 != 2)
  {
    if ((_DWORD)v5)
      return result;
    result = a5;
  }
  return swift_retain(result);
}

void sub_1000C7B60(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_1000050D4();
}

uint64_t sub_1000C7B90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;

  v5 = a5 >> 61;
  if (a5 >> 61 == 3)
    return swift_errorRelease(result);
  if ((_DWORD)v5 != 2)
  {
    if ((_DWORD)v5)
      return result;
    result = a5;
  }
  return swift_release(result);
}

uint64_t sub_1000C7BB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C7BE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C7520(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C7BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002AFD48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for DragSinkCoordinator.Event(uint64_t a1)
{
  return sub_1000C7B90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *initializeWithCopy for DragSinkCoordinator.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_1000C7B38(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for DragSinkCoordinator.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_1000C7B38(*a2, v4, v5, v6, v7);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  sub_1000C7B90(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for DragSinkCoordinator.Event(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  a1[4] = v3;
  sub_1000C7B90(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragSinkCoordinator.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7C && *(_BYTE *)(a1 + 40))
    {
      v2 = *(_DWORD *)a1 + 123;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 32) >> 57) >> 4) | (8
                                                               * ((*(_QWORD *)(a1 + 32) >> 57) & 8 | *(_QWORD *)(a1 + 32) & 7))) ^ 0x7F;
      if (v2 >= 0x7B)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragSinkCoordinator.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 32) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000C7E14(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32) >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

_QWORD *sub_1000C7E30(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 4)
  {
    v2 = result[4] & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *result = (a2 - 4);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    v2 = 0x8000000000000000;
  }
  result[4] = v2;
  return result;
}

ValueMetadata *type metadata accessor for DragSinkCoordinator.Event()
{
  return &type metadata for DragSinkCoordinator.Event;
}

unint64_t sub_1000C7E70()
{
  unint64_t v0;

  sub_1000C7860(v0);
  return sub_1000C7860(v0);
}

void sub_1000C7E88()
{
  void (*v0)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v1;

  sub_1000C7B60(v1, v0);
}

uint64_t sub_1000C7E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  return _print_unlocked<A, B>(_:_:)(&a27, &a24, a3, v27, v28);
}

unint64_t sub_1000C7EA8()
{
  unint64_t v0;

  return sub_1000C7860(v0);
}

uint64_t sub_1000C7EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  va_list va;
  va_list va1;

  va_start(va1, a16);
  va_start(va, a16);
  va_arg(va1, _QWORD);
  v19 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v17, v16);
}

uint64_t sub_1000C7ECC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return sub_100006FCC(a1, a2, &a27);
}

void sub_1000C7ED8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v1);
}

void sub_1000C7EF0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_1000C7F04()
{
  Swift::String v0;

  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
}

unint64_t sub_1000C7F18()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 48) = 0x8000000000000008;
  return sub_1000C7860(v1);
}

uint64_t sub_1000C7F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 0, 0);
}

BOOL sub_1000C7F3C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000C7F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_1000C7F5C(float a1)
{
  float *v1;

  *v1 = a1;
  return sub_1000C5ACC();
}

void sub_1000C7F70()
{
  _StringGuts.grow(_:)(31);
}

unint64_t sub_1000C7F84()
{
  unint64_t v0;

  return sub_1000C7920(v0);
}

void sub_1000C7F8C()
{
  _QWORD *v0;
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_1000C7B60(v0, v1);
}

uint64_t sub_1000C7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  __int128 *v27;

  return sub_100025A50(v27, (uint64_t)&a27);
}

void sub_1000C7FB8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  sub_1000C7B60(v2, a2);
}

void sub_1000C7FDC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_1000322D0(v27, (uint64_t)&a27, a3);
}

uint64_t sub_1000C7FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = a1;
  return swift_retain(v2);
}

unint64_t sub_1000C7FF8()
{
  return 0xD000000000000062;
}

void sub_1000C8020()
{
  uint64_t v0;

  sub_1000C5F04((__int128 *)(v0 - 128));
}

void sub_1000C8038()
{
  _QWORD *v0;
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_1000C7B60(v0, v1);
}

uint64_t sub_1000C8050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

unint64_t sub_1000C8058()
{
  return 0xD000000000000062;
}

uint64_t sub_1000C806C()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t destroy for DispatchSink(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_unknownObjectRelease(a1[1]);
}

uint64_t *_s13EnsembleAgent12DispatchSinkVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for DispatchSink(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for DispatchSink(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DispatchSink(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DispatchSink(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DispatchSink()
{
  return &type metadata for DispatchSink;
}

void sub_1000C81F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  swift_getObjectType(a2);
  OS_dispatch_source.cancel()();
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for AnyCancellable(0);
    v6 = sub_1000C86BC();
    v7 = Set.Iterator.init(_cocoa:)(v29, v4, v5, v6);
    a1 = v29[0];
    v8 = v29[1];
    v9 = v29[2];
    v10 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v8 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  if (a1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v10 << 6);
      v18 = v10;
      goto LABEL_30;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v23 >= v15)
      goto LABEL_33;
    v24 = *(_QWORD *)(v8 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_33;
      v24 = *(_QWORD *)(v8 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_33;
        v24 = *(_QWORD *)(v8 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_33;
          v24 = *(_QWORD *)(v8 + 8 * v18);
          if (!v24)
          {
            v25 = v10 + 5;
            while (v25 < v15)
            {
              v24 = *(_QWORD *)(v8 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_10005E1F4(a1);
            return;
          }
        }
      }
    }
LABEL_29:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_30:
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v17);
    swift_retain();
    if (!v26)
      goto LABEL_33;
    while (1)
    {
      AnyCancellable.cancel()();
      v7 = (_QWORD *)swift_release();
      v10 = v18;
      v11 = v16;
      if ((a1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v19 = __CocoaSet.Iterator.next()(v7);
      if (v19)
      {
        v20 = v19;
        v27 = v19;
        v21 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v28;
        swift_unknownObjectRelease(v20);
        v18 = v10;
        v16 = v11;
        if (v22)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

void *sub_1000C8454(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  void *v16;
  uint64_t v18;
  id v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v19 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C8668();
  v14 = static OS_dispatch_source.makeUserDataAddSource(queue:)(a1);
  ObjectType = swift_getObjectType(v14);
  aBlock[4] = a2;
  v21 = a3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100289AB0;
  v16 = _Block_copy(aBlock);
  swift_retain(a3);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v13, v9, v16, ObjectType);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release(v21);
  OS_dispatch_source.activate()();

  swift_release(a3);
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000C85F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _BYTE v7[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

void sub_1000C8660()
{
  uint64_t *v0;

  sub_1000C81F8(*v0, v0[1]);
}

unint64_t sub_1000C8668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AAF50;
  if (!qword_1002AAF50)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AAF50);
  }
  return result;
}

uint64_t sub_1000C86A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C86B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000C86BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AFD58;
  if (!qword_1002AFD58)
  {
    v1 = type metadata accessor for AnyCancellable(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyCancellable, v1);
    atomic_store(result, (unint64_t *)&qword_1002AFD58);
  }
  return result;
}

uint64_t destroy for P2PStreamName(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for P2PStreamID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for P2PStreamID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  return a1;
}

uint64_t assignWithTake for P2PStreamID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for P2PStreamID()
{
  return &type metadata for P2PStreamID;
}

void sub_1000C8850()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11;
  char v12;
  _QWORD v13[6];
  _QWORD v14[2];

  RapportStreamSession.streamID.getter();
  v2 = v1;
  if (v1)
  {
    v3 = v0;
    v14[0] = 58;
    v14[1] = 0xE100000000000000;
    __chkstk_darwin(v0);
    v13[2] = v14;
    swift_bridgeObjectRetain();
    v4 = (_QWORD *)sub_1000C9444(0x7FFFFFFFFFFFFFFFLL, 1u, sub_1000C99B8, (uint64_t)v13, v3, v2);
    swift_bridgeObjectRelease();
    if (v4[2] <= 1uLL)
    {
      sub_10000E568();
      sub_10000B348();
    }
    else
    {
      v5 = v4[4];
      swift_bridgeObjectRetain();
      static String._fromSubstring(_:)(v5);
      swift_bridgeObjectRelease();
      if (v4[2] < 2uLL)
      {
        __break(1u);
      }
      else
      {
        v6 = v4[8];
        swift_bridgeObjectRetain();
        sub_10000E568();
        v7 = static String._fromSubstring(_:)(v6);
        v9 = v8;
        v10 = swift_bridgeObjectRelease();
        UniversalControlUUID.init(stringValue:)(v7, v9, v10);
        v12 = v11;
        sub_10000B348();
        if ((v12 & 1) != 0)
          sub_10000E594();
      }
    }
  }
  else
  {
    sub_10000B348();
  }
}

uint64_t sub_1000C89EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  String.hash(into:)(a1, a2, a3);
  sub_10000E568();
  sub_1000C9C48();
  return Hasher.combine(bytes:)(v6, v7);
}

BOOL sub_1000C8AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v13;
  _BOOL8 result;

  if (a1 == a5 && a2 == a6)
    return static UniversalControlUUID.compare(lhs:rhs:)(a3, a4, a7, a8) == 0;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0);
  result = 0;
  if ((v13 & 1) != 0)
    return static UniversalControlUUID.compare(lhs:rhs:)(a3, a4, a7, a8) == 0;
  return result;
}

uint64_t sub_1000C8B70(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C8C44(char a1)
{
  if ((a1 & 1) != 0)
    return 1684632949;
  else
    return 1701667182;
}

uint64_t sub_1000C8C64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v10 = sub_1000055B0(&qword_1002AFD80);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000DBE4(a1, v14);
  v15 = sub_1000C9A08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PStreamID.CodingKeys, &type metadata for P2PStreamID.CodingKeys, v15, v14, v13);
  v30 = a2;
  v31 = a3;
  v32 = 0;
  sub_1000C9A80();
  v16 = sub_1000C9CBC();
  v17 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v18, v19, v20, v21);
  if (!v17)
  {
    v30 = a4;
    v31 = a5;
    v32 = 1;
    sub_10008A0CC();
    v22 = sub_1000C9CBC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v23, v24, v25, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v12, v10);
}

Swift::Int sub_1000C8E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  swift_bridgeObjectRetain();
  String.hash(into:)(v7, a1, a2);
  sub_10000E594();
  sub_1000C9C48();
  Hasher.combine(bytes:)(v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1000C8F34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_1000055B0(&qword_1002AFD68);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_10000DBE4(a1, v4);
  v6 = sub_1000C9A08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PStreamID.CodingKeys, &type metadata for P2PStreamID.CodingKeys, v6, v4, v5);
  if (v1)
  {
    sub_100005988(a1);
  }
  else
  {
    sub_1000C9A44();
    sub_1000C9CA8();
    sub_1000C9C9C(v7, v8, v9, v10);
    v5 = v17;
    v12 = sub_10008A010();
    swift_bridgeObjectRetain();
    sub_1000C9CA8();
    sub_1000C9C9C(v13, v14, v15, v16);
    sub_10008A534();
    if (v12)
      sub_10000E4A0();
    sub_100005988(a1);
    sub_10000E4A0();
  }
  return v5;
}

uint64_t sub_1000C909C()
{
  char *v0;

  return sub_1000C8C44(*v0);
}

uint64_t sub_1000C90A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C8B70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C90C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C9A08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C90F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C9A08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C9118@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1000C8F34(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000C91B8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000C8C64(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_1000C91D4()
{
  uint64_t *v0;

  return sub_1000C8E18(*v0, v0[1]);
}

uint64_t sub_1000C91E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000C89EC(a1, *v1, v1[1]);
}

Swift::Int sub_1000C91EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  swift_bridgeObjectRetain();
  String.hash(into:)(v6, v2, v3);
  sub_10000E594();
  v5 = *((_OWORD *)v1 + 1);
  Hasher.combine(bytes:)(&v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_1000C928C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C93E4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C8AFC);
}

unint64_t sub_1000C929C()
{
  unint64_t result;

  result = qword_1002AFD60;
  if (!qword_1002AFD60)
  {
    result = swift_getWitnessTable(&unk_100222F70, &type metadata for P2PStreamID);
    atomic_store(result, (unint64_t *)&qword_1002AFD60);
  }
  return result;
}

uint64_t sub_1000C92D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17;

  if (static UniversalControlUUID.compare(lhs:rhs:)(a3, a4, a7, a8) == -1)
    return 1;
  if (static UniversalControlUUID.compare(lhs:rhs:)(a7, a8, a3, a4) == -1)
    return 0;
  if (a1 == a5 && a2 == a6)
    return 0;
  v17 = 1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 1) & 1) == 0)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a5, a6, a1, a2, 1);
    return 0;
  }
  return v17;
}

uint64_t sub_1000C93B4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C93E4(a1, a2, a3, a4, sub_1000C92D8);
}

uint64_t sub_1000C93C0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C93E4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10007F01C);
}

uint64_t sub_1000C93CC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C93E4(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10007F13C);
}

uint64_t sub_1000C93D8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C93E4(a1, a2, a3, a4, sub_100189568);
}

uint64_t sub_1000C93E4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1000C9404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1;
}

uint64_t sub_1000C9444(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __n128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t result;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
  {
    v43 = "Must take zero or more splits";
    v44 = "Swift/Collection.swift";
    v45 = 29;
    v46 = 22;
    goto LABEL_42;
  }
  v10 = swift_allocObject(&unk_100289B78, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v49 = v10 + 16;
  v54 = swift_allocObject(&unk_100289BA0, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v32 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v32 = 11;
    sub_1000C988C(v32 | (v11 << 16), v54, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_38:
    swift_release();
    return (uint64_t)v14;
  }
  v48 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v47 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v57[0] = String.subscript.getter(v15, a5, a6);
    v57[1] = v18;
    v19 = a3(v57);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v14;
    }
    v20 = v19;
    v21 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      v15 = String.index(after:)(v15, a5, a6, v21);
      goto LABEL_23;
    }
    v22 = (v16 >> 14 == v15 >> 14) & a2;
    if (v22 != 1)
    {
      if (v15 >> 14 < v16 >> 14)
        goto LABEL_40;
      v23 = String.subscript.getter(v16, v15);
      v50 = v25;
      v51 = v24;
      v52 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10007783C();
        v14 = v30;
      }
      v27 = v14[2];
      if (v27 >= v14[3] >> 1)
      {
        sub_10007783C();
        v14 = v31;
      }
      v14[2] = v27 + 1;
      v28 = &v14[4 * v27];
      v28[4] = v23;
      v28[5] = v52;
      v28[6] = v51;
      v28[7] = v50;
      *(_QWORD *)v49 = v14;
    }
    v29 = String.index(after:)(v15, a5, a6, v21);
    v15 = v29;
    *(_QWORD *)(v54 + 16) = v29;
    if ((v22 & 1) == 0 && v14[2] == v48)
      break;
    v16 = v29;
    v17 = v29;
LABEL_23:
    if (v55 == v15 >> 14)
      goto LABEL_32;
  }
  v17 = v29;
  v16 = v29;
LABEL_32:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_37:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  if (v55 >= v17 >> 14)
  {
    v33 = String.subscript.getter(v17, v47);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    swift_bridgeObjectRelease();
    sub_1000CA6A8();
    v40 = *(_QWORD *)(*(_QWORD *)v49 + 16);
    sub_1000CA748(v40);
    v14 = *(_QWORD **)v49;
    v14[2] = v40 + 1;
    v41 = &v14[4 * v40];
    v41[4] = v33;
    v41[5] = v35;
    v41[6] = v37;
    v41[7] = v39;
    *(_QWORD *)v49 = v14;
    goto LABEL_37;
  }
LABEL_40:
  v43 = "Range requires lowerBound <= upperBound";
  v44 = "Swift/Range.swift";
  v45 = 39;
  v46 = 17;
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v43, v45, 2, v44, v46);
  __break(1u);
  return result;
}

uint64_t sub_1000C988C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = (v5 >> 14 == a1 >> 14) & a3;
  if (v6 == 1)
    return v6 ^ 1u;
  if (a1 >> 14 >= v5 >> 14)
  {
    v8 = String.subscript.getter(v5, a1);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    sub_1000CA6A8();
    v15 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_1000CA748(v15);
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = (_QWORD *)(v16 + 32 * v15);
    v17[4] = v8;
    v17[5] = v10;
    v17[6] = v12;
    v17[7] = v14;
    return v6 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17);
  __break(1u);
  return result;
}

uint64_t sub_1000C9990(uint64_t *a1, uint64_t *a2)
{
  return sub_1000C9404(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_1000C99B8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000C9990(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_1000C99D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C99F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000C9A08()
{
  unint64_t result;

  result = qword_1002AFD70;
  if (!qword_1002AFD70)
  {
    result = swift_getWitnessTable(&unk_100223134, &type metadata for P2PStreamID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFD70);
  }
  return result;
}

unint64_t sub_1000C9A44()
{
  unint64_t result;

  result = qword_1002AFD78;
  if (!qword_1002AFD78)
  {
    result = swift_getWitnessTable(&unk_10022846C, &type metadata for P2PStreamName);
    atomic_store(result, (unint64_t *)&qword_1002AFD78);
  }
  return result;
}

unint64_t sub_1000C9A80()
{
  unint64_t result;

  result = qword_1002AFD88;
  if (!qword_1002AFD88)
  {
    result = swift_getWitnessTable(&unk_100228444, &type metadata for P2PStreamName);
    atomic_store(result, (unint64_t *)&qword_1002AFD88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for P2PStreamID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C9B08 + 4 * byte_100222F5D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C9B3C + 4 * byte_100222F58[v4]))();
}

uint64_t sub_1000C9B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C9B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C9B4CLL);
  return result;
}

uint64_t sub_1000C9B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C9B60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C9B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C9B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PStreamID.CodingKeys()
{
  return &type metadata for P2PStreamID.CodingKeys;
}

unint64_t sub_1000C9B8C()
{
  unint64_t result;

  result = qword_1002AFD90;
  if (!qword_1002AFD90)
  {
    result = swift_getWitnessTable(&unk_10022310C, &type metadata for P2PStreamID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFD90);
  }
  return result;
}

unint64_t sub_1000C9BCC()
{
  unint64_t result;

  result = qword_1002AFD98;
  if (!qword_1002AFD98)
  {
    result = swift_getWitnessTable(&unk_10022307C, &type metadata for P2PStreamID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFD98);
  }
  return result;
}

unint64_t sub_1000C9C0C()
{
  unint64_t result;

  result = qword_1002AFDA0;
  if (!qword_1002AFDA0)
  {
    result = swift_getWitnessTable(&unk_1002230A4, &type metadata for P2PStreamID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFDA0);
  }
  return result;
}

uint64_t sub_1000C9C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000C9CBC()
{
  uint64_t v0;

  return v0 - 96;
}

uint64_t sub_1000C9CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    v5 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5);
        swift_retain(v6);
      }
      v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      dispatch thunk of UniversalControlDisplay.id.getter();
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v8, v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)))
      {
        swift_release(a2);
        swift_bridgeObjectRelease(a1);
        return v6;
      }
      swift_release(v6);
      ++v5;
      if (v7 == v4)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_10:
  swift_release(a2);
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t EventConnection_iOS.add<A>(dispatcher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE v15[24];

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = (uint64_t *)(v3 + 32);
  sub_100026478((uint64_t)v11, (uint64_t)v15);
  sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100077D3C);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16);
  sub_1000CA76C(v12, (uint64_t (*)(BOOL))sub_100077D3C);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  sub_1000CA7D8(v12, (uint64_t)v10, v11, a2, a3);
  return swift_endAccess(v15);
}

uint64_t EventConnection_iOS.localDisplays.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t EventConnection_iOS.localDisplays.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 48, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*EventConnection_iOS.localDisplays.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_100026478(v1 + 48, a1);
  return j__swift_endAccess;
}

uint64_t EventConnection_iOS.__allocating_init<A>(dispatcher:keyFocusController:runLoop:mode:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = sub_1000088D8(v6, 56);
  EventConnection_iOS.init<A>(dispatcher:keyFocusController:runLoop:mode:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

_QWORD *EventConnection_iOS.init<A>(dispatcher:keyFocusController:runLoop:mode:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;

  v13 = type metadata accessor for AnyCancellable(0);
  v14 = sub_100021228();
  v6[5] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlUUID, v13, v14);
  v6[6] = _swiftEmptyArrayStorage;
  v6[2] = a2;
  v15 = sub_1000055B0(&qword_1002ACE10);
  v16 = sub_1000088D8(v15, 72);
  *(_OWORD *)(v16 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v16 + 56) = a5;
  *(_QWORD *)(v16 + 64) = a6;
  v17 = sub_100005534((_QWORD *)(v16 + 32));
  v18 = *(_QWORD *)(a5 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16))(v17, a1, a5);
  v6[3] = a3;
  v6[4] = v16;
  swift_retain();
  v19 = a3;
  BKSHIDEventRegisterEventCallbackOnRunLoop(sub_1000CA548, v6, 0, v19, a4);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a5);
  return v6;
}

uint64_t EventConnection_iOS.add(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  NSString v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _BYTE v22[24];

  v2 = v1;
  v4 = objc_msgSend(*(id *)(a1 + 40), "_contextId");
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = sub_100070648(v5, v6);
  v9 = v8;
  v10 = objc_msgSend((id)objc_opt_self(BKSMousePointerService), "sharedInstance");
  if (v9)
  {
    swift_bridgeObjectRetain(v9);
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(v10, "requestGlobalMouseEventsForDisplay:targetContextID:", v12, v4, v11);

  v14 = objc_msgSend(objc_allocWithZone((Class)BKSTouchStreamPolicy), "init");
  v15 = objc_allocWithZone((Class)BKSTouchStream);
  v16 = sub_1000CA5F8((uint64_t)v4, v7, v9, 5u, v14);
  v17 = sub_1000088D8((uint64_t)&unk_100289D38, 32);
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = v16;
  swift_unknownObjectRetain(v13);
  v20 = AnyCancellable.init(_:)(sub_1000CA85C, v17);
  sub_100026478(v2 + 40, (uint64_t)v22);
  sub_1001AAA88(v20, v5, v6);
  swift_endAccess(v22);

  return swift_unknownObjectRelease(v13);
}

uint64_t EventConnection_iOS.remove(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  sub_100026478(v1 + 40, (uint64_t)v5);
  sub_1001AA5F4(v2, v3);
  swift_endAccess(v5);
  return swift_release();
}

void sub_1000CA330(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  uint64_t v7;
  id v8;
  __CFRunLoop *v9;
  __CFRunLoop *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  __CFRunLoop *v16;
  void *v17;
  __CFRunLoop *v18;
  __CFRunLoop *v19;
  id v20;
  id v21;
  _QWORD aBlock[6];

  if (a1)
  {
    v7 = swift_allocObject(&unk_100289D60, 32, 7);
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = a4;
    swift_retain_n(a1, 2);
    v8 = a4;
    v9 = CFRunLoopGetCurrent();
    if (v9)
    {
      v10 = v9;
      v11 = *(void **)(a1 + 24);
      type metadata accessor for CFRunLoop(0);
      v13 = v12;
      v14 = sub_1000CA908();
      v15 = v11;
      v16 = v10;
      LOBYTE(v10) = static _CFObject.== infix(_:_:)(v16, v15, v13, v14);

      if ((v10 & 1) != 0)
      {
        v21 = v8;
        sub_1000CA948(v21, a1);
        swift_release();
        swift_release();

        return;
      }
    }
    v4 = *(void **)(a1 + 24);
    if (kCFRunLoopDefaultMode)
    {
      aBlock[4] = sub_1000CA8E8;
      aBlock[5] = v7;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10000E610;
      aBlock[3] = &unk_100289D78;
      v17 = _Block_copy(aBlock);
      v18 = v4;
      swift_retain();
      swift_release();
      CFRunLoopPerformBlock(v18, kCFRunLoopDefaultMode, v17);
      _Block_release(v17);

      v19 = (__CFRunLoop *)*(id *)(a1 + 24);
      CFRunLoopWakeUp(v19);
      swift_release();

      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  v20 = v4;
  swift_release();
  __break(1u);
}

void sub_1000CA510(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  sub_1000CA948(v3, a1);

}

void sub_1000CA548(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;

  v7 = a4;
  sub_1000CA330(a1, a2, a3, v7);

}

uint64_t EventConnection_iOS.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t EventConnection_iOS.__deallocating_deinit()
{
  uint64_t v0;

  EventConnection_iOS.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

id sub_1000CA5F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, void *a5)
{
  void *v5;
  NSString v10;
  id v11;

  if (a3)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(v5, "initWithContextID:displayUUID:identifier:policy:", a1, v10, a4, a5);

  return v11;
}

uint64_t sub_1000CA684()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000776AC);
}

uint64_t sub_1000CA690()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000776C8);
}

uint64_t sub_1000CA69C()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100077780);
}

uint64_t sub_1000CA6A8()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10007783C);
}

uint64_t sub_1000CA6B4()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10007786C);
}

uint64_t sub_1000CA6C0()
{
  return sub_1000CA6CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100077D3C);
}

uint64_t sub_1000CA6CC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t sub_1000CA724(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_1000776AC);
}

uint64_t sub_1000CA730(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_1000776C8);
}

uint64_t sub_1000CA73C(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_100077780);
}

uint64_t sub_1000CA748(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_10007783C);
}

uint64_t sub_1000CA754(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_10007786C);
}

uint64_t sub_1000CA760(uint64_t a1)
{
  return sub_1000CA76C(a1, (uint64_t (*)(BOOL))sub_100077D3C);
}

uint64_t sub_1000CA76C(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t sub_1000CA7AC(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;

  v2 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  return result;
}

uint64_t sub_1000CA7D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_100005534(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_100025A50(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_1000CA850()
{
  return sub_1000CA8B8((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

id sub_1000CA85C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  objc_msgSend(*(id *)(v0 + 16), "invalidate");
  return objc_msgSend(v1, "invalidate");
}

uint64_t type metadata accessor for EventConnection_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent19EventConnection_iOS);
}

uint64_t sub_1000CA8AC()
{
  return sub_1000CA8B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000CA8B8(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, 32, 7);
}

void sub_1000CA8E8()
{
  uint64_t v0;

  sub_1000CA510(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000CA8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CA900(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000CA908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AFE70;
  if (!qword_1002AFE70)
  {
    type metadata accessor for CFRunLoop(255);
    result = swift_getWitnessTable(&unk_10021C1F0, v1);
    atomic_store(result, (unint64_t *)&qword_1002AFE70);
  }
  return result;
}

uint64_t sub_1000CA948(void *a1, uint64_t a2)
{
  uint64_t v4;
  int Type;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _BYTE v26[64];
  __int128 v27;
  __int128 v28;
  _BYTE v29[25];
  char v30;
  _OWORD v31[2];
  _BYTE v32[25];

  type metadata accessor for IOHIDEvent(0);
  v25[3] = v4;
  v25[4] = &protocol witness table for IOHIDEventRef;
  v25[0] = a1;
  Type = IOHIDEventGetType(a1);
  v6 = static ReportID.translation.getter();
  if (!static HIDUsage.== infix(_:_:)(v6, Type))
  {
    v18 = static ReportID.dockSwipe.getter();
    if (!static HIDUsage.== infix(_:_:)(v18, Type))
      return sub_100005988(v25);
LABEL_10:
    sub_1000C4534();
    return sub_100005988(v25);
  }
  sub_1000445C0((uint64_t)v25, (uint64_t)&v27);
  swift_beginAccess(a2 + 48, &v24, 0, 0);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = sub_10003FEF8((uint64_t)&v27, *((uint64_t *)&v28 + 1));
  __chkstk_darwin(v8);
  v10 = (void **)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **))(v11 + 16))(v10);
  v12 = *v10;
  swift_bridgeObjectRetain(v7);
  sub_1000CAB40(v12, v7, (uint64_t)v26);
  sub_100005988(&v27);
  sub_1000CB08C((uint64_t)v26, (uint64_t)&v27);
  if ((v30 & 1) == 0)
  {
    v31[0] = v27;
    v31[1] = v28;
    *(_OWORD *)v32 = *(_OWORD *)v29;
    *(_OWORD *)&v32[9] = *(_OWORD *)&v29[9];
    swift_beginAccess(a2 + 32, &v23, 0, 0);
    v13 = *(_QWORD *)(a2 + 32);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = v13 + 32;
      swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
      do
      {
        sub_1000445C0(v15, (uint64_t)v20);
        v16 = v21;
        v17 = v22;
        sub_10000DBE4(v20, v21);
        (*(void (**)(_OWORD *, uint64_t, uint64_t))(v17 + 8))(v31, v16, v17);
        sub_100005988(v20);
        v15 += 40;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    if (v32[24])
      goto LABEL_10;
  }
  return sub_100005988(v25);
}

void sub_1000CAB40(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  double FloatValue;
  void *v16;
  void *v17;
  double y;
  CGFloat v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  CGPoint v26;
  id v27;
  char IntegerValue;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  CGAffineTransform v52;
  CGPoint v53;

  mach_absolute_time();
  v6 = a1;
  v7 = sub_1000CB0D4(v6);
  if (!v7)
  {

LABEL_14:
    swift_bridgeObjectRelease();
    v27 = 0;
    IntegerValue = 0;
    v29 = 1;
    FloatValue = 0.0;
    y = 0.0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
LABEL_15:
    *(double *)a3 = FloatValue;
    *(double *)(a3 + 8) = y;
    *(_QWORD *)(a3 + 16) = v27;
    *(_QWORD *)(a3 + 24) = v30;
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 40) = v32;
    *(_QWORD *)(a3 + 48) = v33;
    *(_BYTE *)(a3 + 56) = IntegerValue;
    *(_BYTE *)(a3 + 57) = v29;
    return;
  }
  v8 = (void *)v7;
  *(_QWORD *)&v52.a = v6;
  type metadata accessor for IOHIDEvent(0);
  HIDEventProtocol.__bridgedValue.getter(v9, (uint64_t)&protocol witness table for IOHIDEventRef);
  v11 = v10;
  v12 = (id)BKSHIDEventGetPointerAttributes(v10);

  if (!v12)
  {

    goto LABEL_14;
  }
  if (objc_msgSend(v12, "pointerState", *(_QWORD *)&v52.a) != 4)
  {

    goto LABEL_14;
  }
  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
  v14 = v13;
  FloatValue = IOHIDEventGetFloatValue(v13, 1114112);

  HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
  v17 = v16;
  y = IOHIDEventGetFloatValue(v16, 1114113);

  *(_QWORD *)&v52.d = &type metadata for EnsembleFeatureFlag;
  *(_QWORD *)&v52.tx = sub_100007794();
  v19 = COERCE_DOUBLE(swift_allocObject(&unk_100289DB0, 64, 7));
  v52.a = v19;
  *(_QWORD *)(*(_QWORD *)&v19 + 16) = "Ensemble";
  *(_QWORD *)(*(_QWORD *)&v19 + 24) = 8;
  *(_BYTE *)(*(_QWORD *)&v19 + 32) = 2;
  *(_QWORD *)(*(_QWORD *)&v19 + 40) = "SystemUIScene";
  *(_QWORD *)(*(_QWORD *)&v19 + 48) = 13;
  *(_WORD *)(*(_QWORD *)&v19 + 56) = 2;
  LOBYTE(v17) = isFeatureEnabled(_:)(&v52);
  sub_100005988(&v52);
  if ((v17 & 1) != 0)
  {
    if (qword_1002A9840 != -1)
      swift_once(&qword_1002A9840, sub_10004A0E8);
    v20 = objc_msgSend(v12, "contextID", swift_retain().n128_f64[0]);
    v21 = WindowSceneController.context(for:)(v20);
    swift_release();
    if (v21)
    {
      swift_retain();
      v22 = sub_1000C9CD0(a2, v21);
      swift_bridgeObjectRelease();
      if (v22)
      {
        v24 = dispatch thunk of UniversalControlDisplay.screenRect.getter(v23);
        CGAffineTransformMakeTranslation(&v52, v24, v25);
        v53.x = FloatValue;
        v53.y = y;
        v26 = CGPointApplyAffineTransform(v53, &v52);
        FloatValue = v26.x;
        y = v26.y;
        swift_release();
      }
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
LABEL_44:
    v44 = IOHIDEventRef.__bridgedValue.getter();
    v27 = objc_msgSend(v44, "timestamp");

    objc_msgSend(v12, "acceleratedRelativePosition");
    v30 = v45;
    objc_msgSend(v12, "acceleratedRelativePosition");
    v31 = v46;
    objc_msgSend(v12, "unacceleratedRelativePosition");
    v32 = v47;
    objc_msgSend(v12, "unacceleratedRelativePosition");
    v33 = v48;
    *(_QWORD *)&v52.a = v8;
    HIDEventProtocol.__bridgedValue.getter((uint64_t)&type metadata for PointerEvent, (uint64_t)&protocol witness table for PointerEvent);
    v50 = v49;
    IntegerValue = IOHIDEventGetIntegerValue(v49, 1114115);

    v29 = 0;
    goto LABEL_15;
  }
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v51 = a2;
    else
      v51 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v34 = _CocoaArrayWrapper.endIndex.getter(v51);
    if (!v34)
      goto LABEL_41;
  }
  else
  {
    v34 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v34)
      goto LABEL_41;
  }
  v35 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
  else
    swift_retain();
  if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v36) & 1) != 0)
    goto LABEL_42;
  swift_release();
  if (v34 == 1)
    goto LABEL_41;
  if (v35)
    v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, a2);
  else
    swift_retain();
  if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v37) & 1) != 0)
    goto LABEL_42;
  swift_release();
  if (v34 == 2)
  {
LABEL_41:
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_44;
  }
  if (v35)
    v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(2, a2);
  else
    swift_retain();
  if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v38) & 1) != 0)
  {
LABEL_42:
    swift_bridgeObjectRelease_n(a2, 2);
    sub_100062064(0, FloatValue, y);
    FloatValue = v42;
    y = v43;
LABEL_43:
    swift_release();
    goto LABEL_44;
  }
  swift_release();
  if (v34 == 3)
    goto LABEL_41;
  v39 = 7;
  while (1)
  {
    if (v35)
      v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(v39 - 4, a2);
    else
      swift_retain();
    v41 = v39 - 3;
    if (__OFADD__(v39 - 4, 1))
      break;
    if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v40) & 1) != 0)
      goto LABEL_42;
    swift_release();
    ++v39;
    if (v41 == v34)
      goto LABEL_41;
  }
  __break(1u);
}

uint64_t sub_1000CB08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AFE78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CB0D4(void *a1)
{
  int Type;
  int v3;
  id v4;
  uint64_t v5;

  Type = IOHIDEventGetType(a1);
  v3 = static ReportID.translation.getter();
  if (static HIDUsage.== infix(_:_:)(Type, v3))
  {
    v4 = IOHIDEventRef.__bridgedValue.getter();
    v5 = CGSize.init(_:)(v4);

  }
  else
  {

    return 0;
  }
  return v5;
}

uint64_t sub_1000CB12C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000CB13C()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 88);
  if (result)
    return swift_retain(result);
  __break(1u);
  return result;
}

uint64_t sub_1000CB14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = sub_1000CB13C();
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 40);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v0 + 48);
  swift_unknownObjectWeakAssign(v1 + 16, Strong);
  swift_release();
  return swift_unknownObjectRelease(Strong);
}

uint64_t sub_1000CB1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign(v2 + 40, a1);
  sub_1000CB14C();
  return swift_unknownObjectRelease(a1);
}

double sub_1000CB1D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _BYTE v3[24];

  swift_beginAccess(v0 + 56, v3, 0, 0);
  swift_bridgeObjectRetain();
  sub_1000CB220(v1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1000CB220(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::Int v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  _BYTE *v51;
  _QWORD *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  char v64;
  char v65;
  char v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _BYTE v82[24];
  uint64_t v83[4];
  char v84[24];
  _QWORD v85[6];

  v2 = v1;
  isUniquelyReferenced_nonNull_native = *v1;
  v83[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100043078(v85, a1);
  v4 = v85[0];
  v5 = v85[1];
  v6 = v85[3];
  v7 = v85[4];
  v8 = (unint64_t)(v85[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v6 << 6);
LABEL_22:
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v10);
    v16 = v15 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    swift_beginAccess(v15 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v84, 0, 0);
    if (*(_BYTE *)(v16 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 40)) == 1)
    {
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v18 = *(_QWORD *)(v83[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
      specialized ContiguousArray._endMutation()(v19);
    }
  }
  v11 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v11 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  v13 = v6 + 1;
  if (v12)
    goto LABEL_21;
  v13 = v6 + 2;
  if (v6 + 2 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_21;
  v13 = v6 + 3;
  if (v6 + 3 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_21;
  v13 = v6 + 4;
  if (v6 + 4 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_21;
  v13 = v6 + 5;
  if (v6 + 5 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
    goto LABEL_21;
  v13 = v6 + 6;
  if (v6 + 6 >= v8)
    goto LABEL_24;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
LABEL_21:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v6 = v13;
    goto LABEL_22;
  }
  v14 = v6 + 7;
  while (v14 < v8)
  {
    v12 = *(_QWORD *)(v5 + 8 * v14++);
    if (v12)
    {
      v13 = v14 - 1;
      goto LABEL_21;
    }
  }
LABEL_24:
  swift_release();
  v4 = v83[0];
  swift_bridgeObjectRetain();
  if (v83[0] < 0)
    goto LABEL_50;
  v20 = v83[0];
  if ((v83[0] & 0x4000000000000000) != 0)
    goto LABEL_50;
  while (1)
  {
    v83[0] = v20;
    sub_1000CC2DC(v83);
    swift_release();
    v21 = v83[0];
    swift_bridgeObjectRetain();
    v23 = sub_1000710D8(v22, v21);
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
      break;
    sub_100066C34((unint64_t *)&qword_1002AC3C8, v24, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser, (uint64_t)&unk_10022325C);
    ObservableObject<>.objectWillChange.getter(isUniquelyReferenced_nonNull_native);
    ObservableObjectPublisher.send()();
    swift_release();
    v2[8] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v21 < 0 || (v21 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v62 = _CocoaArrayWrapper.endIndex.getter(v58);
      swift_release();
    }
    else
    {
      v62 = *(_QWORD *)(v21 + 16);
    }
    if (!v62)
      break;
    v25 = v2 + 9;
    v60 = v21;
    v61 = v21 & 0xC000000000000001;
    v4 = 4;
    v59 = v2 + 9;
    while (1)
    {
      if (v61)
        v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v21);
      else
        swift_retain();
      if (__OFADD__(v4 - 4, 1))
        break;
      v67 = v4 - 3;
      v68 = v4;
      v27 = v26 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      swift_beginAccess(v26 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v83, 0, 0);
      v28 = type metadata accessor for P2PDevice.Properties(0);
      v29 = (unsigned __int8 *)(v27 + *(int *)(v28 + 36));
      v80 = *v29;
      v79 = v29[1];
      v78 = v29[2];
      v77 = v29[3];
      v74 = v29[4];
      v76 = v29[5];
      v73 = v29[6];
      v30 = v29[7];
      v75 = v29[8];
      v31 = v29[9];
      v63 = v29[9];
      v32 = v29[10];
      v33 = v29[11];
      v72 = v29[12];
      v34 = v29[13];
      v71 = (uint64_t *)v29[14];
      v35 = v29[15];
      v36 = (uint64_t *)(v27 + *(int *)(v28 + 44));
      v37 = v36[1];
      v69 = *v36;
      swift_beginAccess(v25, v82, 33, 0);
      v70 = v37;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
      v38 = *v25;
      v81 = (_QWORD *)*v25;
      *v25 = 0x8000000000000000;
      v64 = v30;
      v65 = v34;
      v39 = v80 | (v79 << 8) | (v78 << 16) | (v77 << 24) | (v74 << 32) | (v76 << 40) | (v73 << 48) | (v30 << 56);
      v66 = v32;
      v40 = v75 | (v31 << 8) | (v32 << 16) | (v33 << 24) | (v72 << 32) | (v34 << 40);
      v2 = v71;
      v41 = v40 | ((_QWORD)v71 << 48) | (v35 << 56);
      v42 = sub_1001A8C70(v39, v41);
      v44 = *(_QWORD *)(v38 + 16);
      v45 = (v43 & 1) == 0;
      v4 = v44 + v45;
      if (__OFADD__(v44, v45))
        goto LABEL_48;
      v46 = v42;
      v47 = v43;
      sub_1000055B0(&qword_1002AFF70);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v4))
      {
        v48 = sub_1001A8C70(v39, v41);
        if ((v47 & 1) != (v49 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
          __break(1u);
          result = swift_release();
          __break(1u);
          return result;
        }
        v46 = v48;
      }
      v4 = (Swift::Int)v81;
      if ((v47 & 1) != 0)
      {
        v50 = (_QWORD *)(v81[7] + 16 * v46);
        swift_bridgeObjectRelease();
        *v50 = v69;
        v50[1] = v70;
      }
      else
      {
        v81[(v46 >> 6) + 8] |= 1 << v46;
        v51 = (_BYTE *)(v81[6] + 16 * v46);
        *v51 = v80;
        v51[1] = v79;
        v51[2] = v78;
        v51[3] = v77;
        v51[4] = v74;
        v51[5] = v76;
        v51[6] = v73;
        v51[7] = v64;
        v51[8] = v75;
        v51[9] = v63;
        v51[10] = v66;
        v51[11] = v33;
        v51[12] = v72;
        v51[13] = v65;
        v51[14] = (_BYTE)v71;
        v51[15] = v35;
        v52 = (_QWORD *)(v81[7] + 16 * v46);
        *v52 = v69;
        v52[1] = v70;
        v53 = v81[2];
        v54 = __OFADD__(v53, 1);
        v55 = v53 + 1;
        if (v54)
          goto LABEL_49;
        v81[2] = v55;
      }
      v25 = v59;
      *v59 = v81;
      swift_bridgeObjectRelease();
      swift_endAccess(v82);
      swift_release();
      v4 = v68 + 1;
      v21 = v60;
      if (v67 == v62)
        return swift_release();
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    sub_100057E20(v4);
    v20 = v57;
    swift_release();
  }
  return swift_release();
}

double sub_1000CB84C(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[24];

  swift_beginAccess(v1 + 56, v4, 1, 0);
  *(_QWORD *)(v1 + 56) = a1;
  swift_bridgeObjectRelease();
  return sub_1000CB1D4();
}

uint64_t sub_1000CB894()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    sub_1000CB8D8();
    v1 = *(_QWORD *)(v0 + 80);
    swift_retain(v1);
  }
  sub_10002D790();
  return v1;
}

void sub_1000CB8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  sub_1000055B0(&qword_1002A9200);
  sub_10000E490();
  __chkstk_darwin(v1);
  sub_1000601B4();
  v2 = type metadata accessor for CompanionLinkDevice(0);
  sub_10000E490();
  __chkstk_darwin(v3);
  v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CB13C();
  CompanionLinkClient.localDevice.getter(v0);
  swift_release();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0, 1, v2) == 1)
  {
    sub_10000B1D0(v0);
  }
  else
  {
    sub_10000B210(v0, (uint64_t)v5);
    sub_1000CBB80();
    sub_100009EF8((uint64_t)v5);
  }
  sub_10002644C();
}

uint64_t sub_1000CB9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  type metadata accessor for CompanionLinkClient();
  swift_unknownObjectRetain(v2);
  CompanionLinkClient.__allocating_init()();
  v5 = v4;
  v6 = type metadata accessor for P2PLink();
  swift_allocObject(v6, 144, 7);
  sub_100026C60(v5, 0xD00000000000001ALL, 0x8000000100251980, v2, v3);
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v7 + 56) = v1;
  *(_QWORD *)(v7 + 64) = &off_100289DC8;
  sub_10002D790();
  swift_unknownObjectRelease(v9);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 40);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v1 + 48);
  swift_unknownObjectWeakAssign(v8 + 16, Strong);
  swift_unknownObjectRelease(Strong);
  sub_100028680();
  v11 = type metadata accessor for Completion();
  swift_allocObject(v11, 48, 7);
  Completion.init(file:line:)();
  sub_100027738();
  sub_10000FF50();
  v12 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = v8;
  return swift_release(v12);
}

_QWORD *sub_1000CBAE4()
{
  _QWORD *v0;

  swift_release();
  swift_unknownObjectRelease(v0[3]);
  sub_10000AEBC((uint64_t)(v0 + 5));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10002D108(v0[13], v0[14]);
  return v0;
}

uint64_t sub_1000CBB40()
{
  uint64_t v0;

  sub_1000CBAE4();
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for P2PBrowser()
{
  return objc_opt_self(_TtC13EnsembleAgent10P2PBrowser);
}

void sub_1000CBB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v1 = v0;
  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_1000CD414();
  CompanionLinkDevice.id.getter();
  sub_1000CD498();
  v4 = *(_QWORD *)(v0 + 80);
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 80);
  }
  else
  {
    sub_100066C34((unint64_t *)&qword_1002AC3C8, v3, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser, (uint64_t)&unk_10022325C);
    sub_1000CD468();
    v6 = sub_1000CD478();
    sub_10004113C(v6);
    sub_1000CD484();
    v5 = v7;
    v4 = 0;
  }
  swift_retain(v4);
  sub_1001807C8();
  if (qword_1002A9958 != -1)
    swift_once(&qword_1002A9958, sub_1001A0634);
  v8 = *(_QWORD *)(qword_1002B70D0 + 16);
  v9 = *(_QWORD *)(qword_1002B70D0 + 24);
  swift_bridgeObjectRetain(v9);
  sub_100181E4C(v8, v9);
  v11 = *(_QWORD *)(v1 + 80);
  if (!v11
    || (type metadata accessor for P2PDevice(0),
        swift_retain(v5),
        v12 = swift_retain(v11),
        v13 = static P2PDevice.== infix(_:_:)(v12, v5),
        swift_release(),
        sub_10000FF50(),
        (v13 & 1) == 0))
  {
    sub_100066C34((unint64_t *)&qword_1002AC3C8, v10, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser, (uint64_t)&unk_10022325C);
    sub_1000CD468();
    ObservableObjectPublisher.send()();
    swift_release();
    *(_QWORD *)(v1 + 80) = v5;
  }
  sub_10000FF50();
  sub_10002644C();
}

void sub_1000CBD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_1000CD414();
  CompanionLinkDevice.id.getter();
  sub_1000CD498();
  sub_1000CD430();
  sub_100041C38(v1, v2, *(_QWORD *)(v0 + 56));
  if (v5)
  {
    sub_1000CD450();
    sub_10017F650();
    sub_10000B2F8(v3, (uint64_t)v7, 33);
    v6 = sub_100060054();
    sub_1000CD458(v6);
    sub_1000CD450();
    sub_1000CD490();
    swift_release();
  }
  else
  {
    sub_1000CD450();
  }
  sub_10002D8A4();
}

void sub_1000CBDBC()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v4 = *v0;
  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_1000CD414();
  CompanionLinkDevice.id.getter();
  sub_1000CD498();
  sub_1000CD430();
  if (*(_QWORD *)(v0[7] + 16) && (sub_1001A8C70(v1, v2), (v6 & 1) != 0))
  {
    sub_100060054();
  }
  else
  {
    sub_100066C34((unint64_t *)&qword_1002AC3C8, v6, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser, (uint64_t)&unk_10022325C);
    ObservableObject<>.objectWillChange.getter(v4);
    v7 = sub_1000CD478();
    sub_10004113C(v7);
    sub_1000CD484();
  }
  sub_1000CD450();
  sub_10017FD7C();
  sub_10000B2F8(v3, (uint64_t)v9, 33);
  v8 = sub_100060054();
  sub_1000CD458(v8);
  sub_1000CD450();
  sub_1000CD490();
  swift_release();
  v0[12] = 0;
  sub_10002D8A4();
}

uint64_t sub_1000CBEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE v10[24];

  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_1000601B4();
  CompanionLinkDevice.id.getter();
  v3 = UniversalControlDeviceID.init(uuid:)(v1);
  v5 = v4;
  sub_10000B2F8(v0 + 56, (uint64_t)v10, 32);
  sub_100041C38(v3, v5, *(_QWORD *)(v0 + 56));
  if (!v6)
    return swift_endAccess(v10);
  swift_endAccess(v10);
  sub_1001804AC();
  swift_bridgeObjectRetain();
  v8 = sub_1000CD118(v7);
  swift_bridgeObjectRelease();
  sub_1000CB84C((uint64_t)v8);
  return sub_10000FF50();
}

uint64_t sub_1000CBFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t result;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];

  v1 = v0;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  sub_10002641C();
  v38 = v3 - v2;
  v4 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10002641C();
  v12 = (uint64_t *)(v11 - v10);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v37 - v18;
  sub_10000B2F8(v0 + 56, (uint64_t)aBlock, 33);
  sub_1000055B0(&qword_1002AFF68);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess(aBlock);
  sub_1000CD490();
  v20 = sub_10000B0EC();
  v37 = static OS_dispatch_queue.main.getter(v20);
  static DispatchTime.now()(v37);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = v21 > 0x40;
  if (v21 >= 0x40)
    v23 = 0;
  else
    v23 = 1 << v21;
  if (v22)
    v23 = 0;
  *v12 = v23;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchTimeInterval.seconds(_:), v8);
  + infix(_:_:)(v16, v12);
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v12, v8);
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v16, v13);
  aBlock[4] = sub_1000CD3F8;
  aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100289E18;
  v25 = _Block_copy(aBlock);
  sub_10002D790();
  v26 = swift_release();
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_100066C34((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v29 = sub_10003228C();
  v31 = v38;
  v30 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v39, v27);
  v32 = (void *)v37;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v7, v31, v25);
  _Block_release(v25);

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v31, v30);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v7, v41);
  result = ((uint64_t (*)(char *, uint64_t))v24)(v19, v13);
  v34 = *(_QWORD *)(v1 + 96);
  v35 = __OFADD__(v34, 1);
  v36 = v34 + 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    if (v36 >= 8)
      v36 = 8;
    *(_QWORD *)(v1 + 96) = v36;
  }
  return result;
}

uint64_t sub_1000CC2DC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10006D08C(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000CC354(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000CC354(uint64_t *a1)
{
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  char *v5;
  Swift::Int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::Int v10;
  _QWORD *v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t *v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t *v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t *v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  Swift::Int *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  char *v104;
  BOOL v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  BOOL v117;
  uint64_t v118;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  BOOL v131;
  uint64_t v133;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v162;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  BOOL v173;
  BOOL v175;
  uint64_t v176;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  BOOL v190;
  uint64_t v192;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  Swift::Int v200;
  Swift::Int v201;
  uint64_t v202;
  Swift::Int v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  char *__dst;
  char *__dsta;
  uint64_t *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  int64_t v215;
  int64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *__src;
  char *v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  char v233[24];
  char v234[24];
  char v235[24];
  char v236[24];
  char v237[24];
  char v238[24];
  char v239[24];
  char v240[24];
  char v241[24];
  char v242[24];
  char v243[24];
  char v244[24];
  _BYTE v245[24];
  _BYTE v246[32];
  uint64_t v247;

  v2 = a1[1];
  v3 = _minimumMergeRunLength(_:)(v2);
  v203 = v2;
  if (v3 >= v2)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v2 >= 2)
      {
        v138 = (_QWORD *)*a1;
        v139 = -1;
        v140 = 1;
        v141 = (_QWORD *)*a1;
        do
        {
          v142 = v138[v140];
          v225 = v141;
          v230 = v139;
          do
          {
            v143 = *v141;
            v144 = v142 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            swift_beginAccess(v142 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v246, 0, 0);
            v145 = type metadata accessor for P2PDevice.Properties(0);
            v146 = (uint64_t *)(v144 + *(int *)(v145 + 36));
            v147 = *v146;
            v148 = v146[1];
            v149 = v143 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            swift_beginAccess(v149, v245, 0, 0);
            if ((static UniversalControlDeviceID.< infix(_:_:)(v147, v148, *(_QWORD *)(v149 + *(int *)(v145 + 36)), *(_QWORD *)(v149 + *(int *)(v145 + 36) + 8)) & 1) == 0)break;
            if (!v138)
              goto LABEL_267;
            v150 = *v141;
            v142 = v141[1];
            *v141 = v142;
            v141[1] = v150;
            --v141;
            v103 = __CFADD__(v139++, 1);
          }
          while (!v103);
          ++v140;
          v141 = v225 + 1;
          v139 = v230 - 1;
        }
        while (v140 != v203);
      }
      return;
    }
    goto LABEL_264;
  }
  v4 = v3;
  sub_100021204(v2 / 2);
  v6 = v2;
  v247 = v7;
  __src = v5;
  v199 = a1;
  if (v2 <= 0)
  {
    v11 = _swiftEmptyArrayStorage;
    v56 = _swiftEmptyArrayStorage[2];
    goto LABEL_165;
  }
  v8 = v5;
  v200 = v4;
  v9 = *a1;
  v202 = *a1 - 8;
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  v221 = *a1;
LABEL_4:
  v12 = v10;
  v13 = v10 + 1;
  if (v13 >= v6)
    goto LABEL_22;
  v205 = v11;
  v14 = *(_QWORD *)(v9 + 8 * v12);
  v15 = *(_QWORD *)(v9 + 8 * v13) + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  swift_beginAccess(v15, v236, 0, 0);
  v16 = type metadata accessor for P2PDevice.Properties(0);
  v17 = (uint64_t *)(v15 + *(int *)(v16 + 36));
  v18 = *v17;
  v19 = v17[1];
  v20 = v14 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  swift_beginAccess(v14 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v235, 0, 0);
  v21 = static UniversalControlDeviceID.< infix(_:_:)(v18, v19, *(_QWORD *)(v20 + *(int *)(v16 + 36)), *(_QWORD *)(v20 + *(int *)(v16 + 36) + 8));
  v6 = v203;
  v22 = v21;
  v13 = v12 + 2;
  if (v12 + 2 >= v203)
    goto LABEL_10;
  v23 = v12;
  do
  {
    v24 = v9 + 8 * v23;
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(_QWORD *)(v24 + 16) + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    swift_beginAccess(v26, v234, 0, 0);
    v27 = (uint64_t *)(v26 + *(int *)(v16 + 36));
    v28 = v25 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    v30 = *v27;
    v29 = v27[1];
    swift_beginAccess(v25 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v233, 0, 0);
    if (((v22 ^ static UniversalControlDeviceID.< infix(_:_:)(v30, v29, *(_QWORD *)(v28 + *(int *)(v16 + 36)), *(_QWORD *)(v28 + *(int *)(v16 + 36) + 8))) & 1) != 0)
    {
      v13 = v23 + 2;
      v6 = v203;
      v9 = v221;
      if ((v22 & 1) == 0)
        goto LABEL_21;
      goto LABEL_13;
    }
    v31 = v23 + 3;
    ++v23;
    v6 = v203;
    v9 = v221;
  }
  while (v31 < v203);
  v13 = v203;
LABEL_10:
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v11 = v205;
    goto LABEL_22;
  }
LABEL_13:
  if (v13 < v12)
    goto LABEL_261;
  if (v12 >= v13)
    goto LABEL_21;
  v32 = v13;
  v33 = (uint64_t *)(v202 + 8 * v13);
  v34 = v32;
  v35 = v12;
  v36 = (uint64_t *)(v9 + 8 * v12);
  v11 = v205;
  do
  {
    if (v35 != --v32)
    {
      if (!v9)
        goto LABEL_269;
      v37 = *v36;
      *v36 = *v33;
      *v33 = v37;
    }
    ++v35;
    --v33;
    ++v36;
  }
  while (v35 < v32);
  v6 = v203;
  v13 = v34;
LABEL_22:
  if (v13 < v6)
  {
    v38 = v13;
    v70 = __OFSUB__(v13, v12);
    v39 = v13 - v12;
    if (v70)
      goto LABEL_260;
    if (v39 >= v200)
    {
      v13 = v38;
    }
    else
    {
      if (__OFADD__(v12, v200))
        goto LABEL_262;
      if (v12 + v200 >= v6)
        v40 = v6;
      else
        v40 = v12 + v200;
      if (v40 < v12)
        goto LABEL_263;
      if (v38 == v40)
      {
        v13 = v38;
        v8 = __src;
      }
      else
      {
        v227 = v12;
        v206 = v11;
        v41 = (uint64_t *)(v202 + 8 * v38);
        do
        {
          v42 = v38;
          v43 = *(_QWORD *)(v9 + 8 * v38);
          v44 = v227;
          v45 = v41;
          do
          {
            v46 = *v45;
            v47 = v43 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            swift_beginAccess(v43 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v238, 0, 0);
            v48 = type metadata accessor for P2PDevice.Properties(0);
            v49 = (uint64_t *)(v47 + *(int *)(v48 + 36));
            v50 = v46 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            v51 = *v49;
            v52 = v49[1];
            swift_beginAccess(v50, v237, 0, 0);
            v53 = v52;
            v9 = v221;
            if ((static UniversalControlDeviceID.< infix(_:_:)(v51, v53, *(_QWORD *)(v50 + *(int *)(v48 + 36)), *(_QWORD *)(v50 + *(int *)(v48 + 36) + 8)) & 1) == 0)break;
            if (!v221)
              goto LABEL_265;
            v54 = *v45;
            v43 = v45[1];
            *v45 = v43;
            v45[1] = v54;
            --v45;
            ++v44;
          }
          while (v42 != v44);
          v38 = v42 + 1;
          ++v41;
        }
        while (v42 + 1 != v40);
        v13 = v40;
        v8 = __src;
        v11 = v206;
        v12 = v227;
      }
    }
  }
  if (v13 < v12)
    goto LABEL_259;
  v201 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
  {
    sub_10006C984();
    v11 = v136;
  }
  v55 = v11[2];
  v56 = v55 + 1;
  if (v55 >= v11[3] >> 1)
  {
    sub_10006C984();
    v11 = v137;
  }
  v11[2] = v56;
  v57 = v11 + 4;
  v58 = &v11[2 * v55 + 4];
  *v58 = v12;
  v58[1] = v201;
  if (!v55)
  {
    v56 = 1;
    goto LABEL_152;
  }
  v204 = v11 + 4;
  v207 = v11;
  while (1)
  {
    v59 = v56 - 1;
    if (v56 < 4)
    {
      v60 = v11[4];
      v61 = v11[5];
      v70 = __OFSUB__(v61, v60);
      v62 = v61 - v60;
      v63 = v70;
      if (v56 == 3)
      {
LABEL_62:
        if ((v63 & 1) != 0)
          goto LABEL_246;
        v76 = &v57[2 * v56 - 4];
        v78 = *v76;
        v77 = v76[1];
        v79 = __OFSUB__(v77, v78);
        v80 = v77 - v78;
        v81 = v79;
        if (v79)
          goto LABEL_249;
        v82 = &v57[2 * v59];
        v84 = *v82;
        v83 = v82[1];
        v70 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v70)
          goto LABEL_252;
        if (__OFADD__(v80, v85))
          goto LABEL_253;
        if (v80 + v85 >= v62)
        {
          if (v62 < v85)
            v59 = v56 - 2;
          goto LABEL_80;
        }
        v62 = v80;
        if ((v81 & 1) != 0)
          goto LABEL_248;
      }
      else if ((v63 & 1) != 0)
      {
        goto LABEL_248;
      }
      v86 = &v57[2 * v59];
      v88 = *v86;
      v87 = v86[1];
      v70 = __OFSUB__(v87, v88);
      v89 = v87 - v88;
      if (v70)
        goto LABEL_251;
      if (v89 < v62)
        goto LABEL_152;
      goto LABEL_80;
    }
    v64 = &v57[2 * v56];
    v65 = *(v64 - 8);
    v66 = *(v64 - 7);
    v70 = __OFSUB__(v66, v65);
    v67 = v66 - v65;
    if (v70)
      goto LABEL_244;
    v69 = *(v64 - 6);
    v68 = *(v64 - 5);
    v70 = __OFSUB__(v68, v69);
    v62 = v68 - v69;
    v63 = v70;
    if (v70)
      goto LABEL_245;
    v71 = &v57[2 * v56 - 4];
    v73 = *v71;
    v72 = v71[1];
    v70 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v70)
      goto LABEL_247;
    v70 = __OFADD__(v62, v74);
    v75 = v62 + v74;
    if (v70)
      goto LABEL_250;
    if (v75 < v67)
      goto LABEL_62;
    v90 = &v57[2 * v59];
    v92 = *v90;
    v91 = v90[1];
    v70 = __OFSUB__(v91, v92);
    v93 = v91 - v92;
    if (v70)
      goto LABEL_254;
    if (v62 < v93)
      v59 = v56 - 2;
LABEL_80:
    if (v59 - 1 >= v56)
    {
      __break(1u);
LABEL_241:
      __break(1u);
LABEL_242:
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
      goto LABEL_266;
    }
    if (!v9)
      goto LABEL_268;
    v213 = v59 - 1;
    v215 = v59;
    v211 = &v57[2 * v59 - 2];
    v94 = (char *)&v57[2 * v59];
    v96 = *(_QWORD *)v94;
    v95 = *((_QWORD *)v94 + 1);
    v217 = *v211;
    v219 = v95;
    v97 = (char *)(v9 + 8 * *v211);
    v98 = (char *)(v9 + 8 * *(_QWORD *)v94);
    v99 = v98 - v97;
    v100 = (v98 - v97) / 8;
    v228 = v9 + 8 * v95;
    v101 = v228 - (_QWORD)v98;
    v102 = (uint64_t)(v228 - (_QWORD)v98) / 8;
    __dst = v94;
    if (v100 < v102)
      break;
    if (v101 <= -8)
      goto LABEL_271;
    v117 = (unint64_t)v8 < v228 && v8 == v98;
    v118 = *v211;
    if (!v117)
    {
      memmove(v8, v98, 8 * v102);
      v95 = v219;
    }
    v104 = &v8[8 * v102];
    if (v217 >= v96 || v101 < 8)
    {
      v106 = v8;
      goto LABEL_139;
    }
    v120 = (char *)(v202 + 8 * v95);
    do
    {
      v229 = (unint64_t)v104;
      v121 = v104 - 8;
      v224 = v120 + 8;
      v123 = v98 - 8;
      v122 = *((_QWORD *)v98 - 1);
      v124 = *((_QWORD *)v104 - 1) + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      swift_beginAccess(v124, v242, 0, 0);
      v125 = type metadata accessor for P2PDevice.Properties(0);
      v126 = (uint64_t *)(v124 + *(int *)(v125 + 36));
      v127 = v122 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      v128 = *v126;
      v129 = v126[1];
      swift_beginAccess(v127, v241, 0, 0);
      if ((static UniversalControlDeviceID.< infix(_:_:)(v128, v129, *(_QWORD *)(v127 + *(int *)(v125 + 36)), *(_QWORD *)(v127 + *(int *)(v125 + 36) + 8)) & 1) != 0)
      {
        v104 = (char *)v229;
        v130 = v224 != v98 || v120 >= v98;
        v98 -= 8;
        if (v130)
          goto LABEL_131;
      }
      else
      {
        v131 = v224 != (char *)v229 || (unint64_t)v120 >= v229;
        v123 = v121;
        v104 = v121;
        if (v131)
LABEL_131:
          *(_QWORD *)v120 = *(_QWORD *)v123;
      }
      v120 -= 8;
    }
    while (v97 < v98 && __src < v104);
    v8 = __src;
    v106 = __src;
LABEL_138:
    v118 = v217;
    v95 = v219;
LABEL_139:
    v11 = v207;
    v9 = v221;
    if (v104 - v106 <= -8)
      goto LABEL_271;
    v133 = (v104 - v106) / 8;
    if (v98 != v106 || v98 >= &v106[8 * v133])
    {
      memmove(v98, v106, 8 * v133);
      v95 = v219;
    }
    if (v95 < v118)
      goto LABEL_241;
    if (v215 > v207[2])
      goto LABEL_242;
    *v211 = v118;
    v57 = v204;
    v204[2 * v213 + 1] = v95;
    v135 = v207[2];
    if (v215 >= (uint64_t)v135)
      goto LABEL_243;
    v56 = v135 - 1;
    memmove(__dst, __dst + 16, 16 * (v135 - 1 - v215));
    v207[2] = v135 - 1;
    if (v135 <= 2)
    {
LABEL_152:
      v6 = v203;
      v10 = v201;
      if (v201 >= v203)
      {
LABEL_165:
        if (v56 >= 2)
        {
          v151 = *v199;
          __dsta = (char *)(*v199 - 8);
          v212 = *v199;
          while (1)
          {
            if (v56 < 2)
              goto LABEL_255;
            if (!v151)
              goto LABEL_270;
            v216 = v56 - 2;
            v218 = v56;
            v152 = v11[2 * v56];
            v214 = v56 - 1;
            v153 = v11[2 * v56 + 2];
            v220 = v152;
            v222 = v11[2 * v56 + 3];
            v154 = (char *)(v151 + 8 * v152);
            v155 = (char *)(v151 + 8 * v153);
            v156 = v155 - v154;
            v157 = (v155 - v154) / 8;
            v231 = v151 + 8 * v222;
            v158 = v231 - (_QWORD)v155;
            v159 = (uint64_t)(v231 - (_QWORD)v155) / 8;
            if (v157 >= v159)
              break;
            if (v156 <= -8)
              goto LABEL_271;
            v208 = v11;
            v160 = __src;
            if (__src != v154 || __src >= v155)
              memmove(__src, (const void *)(v151 + 8 * v152), 8 * v157);
            v162 = &__src[8 * v157];
            if (v153 >= v222 || v156 < 8)
            {
              v160 = __src;
            }
            else
            {
              do
              {
                v164 = (unint64_t)v162;
                v165 = *(_QWORD *)v160;
                v166 = *(_QWORD *)v155 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
                swift_beginAccess(v166, v244, 0, 0);
                v167 = type metadata accessor for P2PDevice.Properties(0);
                v168 = (uint64_t *)(v166 + *(int *)(v167 + 36));
                v169 = v165 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
                v170 = *v168;
                v171 = v168[1];
                swift_beginAccess(v165 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v243, 0, 0);
                if ((static UniversalControlDeviceID.< infix(_:_:)(v170, v171, *(_QWORD *)(v169 + *(int *)(v167 + 36)), *(_QWORD *)(v169 + *(int *)(v167 + 36) + 8)) & 1) != 0)
                {
                  v172 = v155;
                  v173 = v154 == v155;
                  v155 += 8;
                }
                else
                {
                  v172 = v160;
                  v173 = v154 == v160;
                  v160 += 8;
                }
                v162 = (char *)v164;
                if (!v173)
                  *(_QWORD *)v154 = *(_QWORD *)v172;
                v154 += 8;
              }
              while ((unint64_t)v160 < v164 && (unint64_t)v155 < v231);
            }
            v155 = v154;
LABEL_223:
            v11 = v208;
            v176 = v220;
LABEL_224:
            if (v162 - v160 <= -8)
              goto LABEL_271;
            v192 = (v162 - v160) / 8;
            if (v155 != v160 || v155 >= &v160[8 * v192])
              memmove(v155, v160, 8 * v192);
            if (v222 < v176)
              goto LABEL_256;
            if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
            {
              sub_10006CA50();
              v11 = v196;
            }
            if (v216 >= v11[2])
              goto LABEL_257;
            v194 = &v11[2 * v216 + 4];
            *v194 = v176;
            v194[1] = v222;
            v195 = v11[2];
            if (v218 > v195)
              goto LABEL_258;
            v56 = v195 - 1;
            memmove(&v11[2 * v214 + 4], &v11[2 * v218 + 4], 16 * (v195 - 1 - v214));
            v11[2] = v195 - 1;
            v6 = v203;
            v151 = v212;
            if (v195 <= 2)
              goto LABEL_237;
          }
          if (v158 <= -8)
            goto LABEL_271;
          v160 = __src;
          v175 = (unint64_t)__src < v231 && __src == v155;
          v176 = v152;
          if (!v175)
            memmove(__src, (const void *)(v151 + 8 * v153), 8 * v159);
          v162 = &__src[8 * v159];
          if (v220 >= v153 || v158 < 8)
            goto LABEL_224;
          v208 = v11;
          v178 = &__dsta[8 * v222];
          v226 = v154;
          while (2)
          {
            v179 = v162 - 8;
            v232 = v178 + 8;
            v180 = v155 - 8;
            v181 = *((_QWORD *)v155 - 1);
            v182 = *((_QWORD *)v162 - 1) + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            v183 = (unint64_t)v162;
            swift_beginAccess(v182, v246, 0, 0);
            v184 = type metadata accessor for P2PDevice.Properties(0);
            v185 = (uint64_t *)(v182 + *(int *)(v184 + 36));
            v186 = v181 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
            v187 = *v185;
            v188 = v185[1];
            swift_beginAccess(v186, v245, 0, 0);
            if ((static UniversalControlDeviceID.< infix(_:_:)(v187, v188, *(_QWORD *)(v186 + *(int *)(v184 + 36)), *(_QWORD *)(v186 + *(int *)(v184 + 36) + 8)) & 1) != 0)
            {
              v189 = v232 != v155 || v178 >= v155;
              v155 -= 8;
              v162 = (char *)v183;
              if (!v189)
                goto LABEL_217;
            }
            else
            {
              v190 = v232 != (char *)v183 || (unint64_t)v178 >= v183;
              v180 = v179;
              v162 = v179;
              if (!v190)
              {
LABEL_217:
                v178 -= 8;
                if (v226 >= v155 || __src >= v162)
                {
                  v160 = __src;
                  goto LABEL_223;
                }
                continue;
              }
            }
            break;
          }
          *(_QWORD *)v178 = *(_QWORD *)v180;
          goto LABEL_217;
        }
LABEL_237:
        v197 = v6;
        swift_bridgeObjectRelease();
        if (v197 >= -1)
        {
          *(_QWORD *)((v247 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()(v198);
          swift_bridgeObjectRelease();
          return;
        }
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
        goto LABEL_271;
      }
      goto LABEL_4;
    }
  }
  if (v99 > -8)
  {
    v103 = v8 != v97 || v8 >= v98;
    if (v103)
    {
      memmove(v8, v97, 8 * v100);
      v95 = v219;
    }
    v104 = &v8[8 * v100];
    v105 = v96 >= v95 || v99 < 8;
    v106 = v8;
    if (v105)
    {
      v8 = __src;
      v106 = __src;
      v98 = v97;
      goto LABEL_138;
    }
    while (1)
    {
      v107 = (unint64_t)v104;
      v108 = *(_QWORD *)v106;
      v109 = *(_QWORD *)v98 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      swift_beginAccess(v109, v240, 0, 0);
      v110 = type metadata accessor for P2PDevice.Properties(0);
      v111 = (uint64_t *)(v109 + *(int *)(v110 + 36));
      v112 = v108 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      v113 = *v111;
      v114 = v111[1];
      swift_beginAccess(v108 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v239, 0, 0);
      if ((static UniversalControlDeviceID.< infix(_:_:)(v113, v114, *(_QWORD *)(v112 + *(int *)(v110 + 36)), *(_QWORD *)(v112 + *(int *)(v110 + 36) + 8)) & 1) != 0)break;
      v115 = v106;
      v117 = v97 == v106;
      v106 += 8;
      if (!v117)
        goto LABEL_101;
LABEL_102:
      v97 += 8;
      v104 = (char *)v107;
      if ((unint64_t)v106 >= v107 || (unint64_t)v98 >= v228)
      {
        v98 = v97;
        v8 = __src;
        goto LABEL_138;
      }
    }
    v115 = v98;
    v117 = v97 == v98;
    v98 += 8;
    if (v117)
      goto LABEL_102;
LABEL_101:
    *(_QWORD *)v97 = *(_QWORD *)v115;
    goto LABEL_102;
  }
LABEL_271:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
}

uint64_t *sub_1000CD118(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;

  v2 = (uint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v6, v8);
    v9 = sub_1000CD274(v8, v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (uint64_t *)swift_slowAlloc(v7, -1);
    sub_1001194A8(0, v6, v10);
    v2 = sub_1000CD274(v10, v6, (uint64_t)v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

uint64_t *sub_1000CD274(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return sub_100082DA8(v3, a2, v4);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return sub_100082DA8(v3, a2, v4);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return sub_100082DA8(v3, a2, v4);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    result = (uint64_t *)sub_100181C38();
    if ((result & 1) == 0)
    {
      *(uint64_t *)((char *)v3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return sub_100082DA8(v3, a2, v4);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return sub_100082DA8(v3, a2, v4);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return sub_100082DA8(v3, a2, v4);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000CD3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CD40C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CD430()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0 + 56, v1 - 88, 32, 0);
}

uint64_t sub_1000CD450()
{
  uint64_t v0;

  return swift_endAccess(v0 - 88);
}

uint64_t sub_1000CD458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1001AA970(a1, v1, v2);
}

uint64_t sub_1000CD468()
{
  uint64_t v0;

  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t sub_1000CD478()
{
  return type metadata accessor for P2PDevice(0);
}

void sub_1000CD484()
{
  sub_1001818C8();
}

double sub_1000CD490()
{
  return sub_1000CB1D4();
}

uint64_t sub_1000CD498()
{
  uint64_t v0;

  return UniversalControlDeviceID.init(uuid:)(v0);
}

uint64_t sub_1000CD4A0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[40];
  uint64_t v59;

  v46 = a5;
  v47 = a8;
  v53 = a1;
  v54 = a2;
  v45 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v55 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v50 = (char *)&v41 - v17;
  v18 = a4;
  __chkstk_darwin(v16);
  v49 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getAssociatedTypeWitness(0, a6);
  v48 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v44 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v41 - v23;
  v51 = v8;
  v25 = a6;
  v26 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v26)
    return static Array._allocateUninitialized(_:)(0, v18);
  v27 = v26;
  v42 = v20;
  v28 = v15;
  v59 = ContiguousArray.init()(v18);
  v52 = type metadata accessor for ContiguousArray(0, v18);
  ContiguousArray.reserveCapacity(_:)(v27);
  v43 = v24;
  v29 = a3;
  v30 = v51;
  v31 = v29;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v27 < 0)
  {
    __break(1u);
  }
  else
  {
    v56 = v25;
    v34 = v49;
    v33 = v50;
    v35 = v43;
    while (1)
    {
      v36 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v58, v35, v31, v56);
      (*(void (**)(char *))(v28 + 16))(v33);
      v36(v58, 0);
      v37 = v57;
      v53(v33, v55);
      if (v37)
        break;
      v57 = 0;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v33, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v34, v52);
      dispatch thunk of Collection.formIndex(after:)(v35, v31, v56);
      if (!--v27)
      {
        v38 = v48;
        v39 = v44;
        v40 = v42;
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v44, v35, v42);
        _expectEnd<A>(of:is:)(v30, v39, v31, v56);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
        return v59;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v42);
    swift_release(v59);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v55, v46);
  }
  return result;
}

void Collection.combinations<A>(ofCount:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v12 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  sub_10002641C();
  v15 = v14 - v13;
  __chkstk_darwin(v16);
  sub_10002641C();
  v19 = v18 - v17;
  sub_1000CF774(v18 - v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  CombinationsSequence.init<A>(_:kRange:)(v19, v15, a2, a3, a4, a5, a6);
  sub_10000E4E0();
}

uint64_t CombinationsSequence.baseCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t CombinationsSequence.kRange.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t CombinationsSequence.init(_:k:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  sub_100026500();
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v5, a1);
  v15[0] = a2;
  v15[1] = a2;
  v12 = sub_1000055B0(&qword_1002AFF78);
  v13 = sub_10003A0A8(&qword_1002AFF80, &qword_1002AFF78, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  CombinationsSequence.init<A>(_:kRange:)(v5, (uint64_t)v15, a3, v12, a4, v13, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a3);
}

uint64_t CombinationsSequence.init<A>(_:kRange:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];

  v30 = xmmword_1002232A0;
  v14 = sub_1000055B0(&qword_1002AFF88);
  v15 = sub_1000CDB08();
  v29 = a2;
  dispatch thunk of RangeExpression.relative<A>(to:)(v31, &v30, v14, v15, a4, a6);
  v17 = v31[0];
  v16 = v31[1];
  v18 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a7, a1, a3);
  v19 = dispatch thunk of Collection.count.getter(a3, a5);
  result = type metadata accessor for CombinationsSequence(0, a3, a5, v20);
  *(_QWORD *)(a7 + *(int *)(result + 36)) = v19;
  v22 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
  }
  else
  {
    v23 = result;
    if (v17 >= v22)
    {
      v24 = 0;
      v25 = 0;
LABEL_14:
      v27 = v17 >= v22;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v29, a4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a3);
      v28 = a7 + *(int *)(v23 + 40);
      *(_QWORD *)v28 = v24;
      *(_QWORD *)(v28 + 8) = v25;
      *(_BYTE *)(v28 + 16) = v27;
      return result;
    }
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22 >= v17)
        v26 = v17;
      else
        v26 = v19 + 1;
      if (v17 >= 0)
        v24 = v26;
      else
        v24 = 0;
      if (v22 >= v16)
        v25 = v16 & ~(v16 >> 63);
      else
        v25 = v22;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000CDB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AFF90;
  if (!qword_1002AFF90)
  {
    v1 = sub_10000DCA0(&qword_1002AFF88);
    sub_1000CDB74();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AFF90);
  }
  return result;
}

unint64_t sub_1000CDB74()
{
  unint64_t result;

  result = qword_1002AFF98;
  if (!qword_1002AFF98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002AFF98);
  }
  return result;
}

uint64_t type metadata accessor for CombinationsSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinationsSequence);
}

void CombinationsSequence.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v2 = v1 + *(int *)(a1 + 40);
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    v3 = *(_QWORD *)(v1 + *(int *)(a1 + 36));
    v4 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v4 < 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5 = *(_QWORD *)v2;
    v6 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2)
      v7 = 0;
    else
      v7 = v6 == v4;
    if (!v7)
    {
      v8 = v6 - v5;
      if (__OFSUB__(v6, v5))
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      if (v8)
      {
        sub_1000589DC();
        if (v6 < v5 || v8 < 0)
          goto LABEL_29;
        while (1)
        {
          v9 = sub_1000CDD58(v3, v5);
          v10 = _swiftEmptyArrayStorage[2];
          v11 = v10 + 1;
          if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
            sub_1000589DC();
          _swiftEmptyArrayStorage[2] = v11;
          _swiftEmptyArrayStorage[v10 + 4] = v9;
          if (v6 == v5)
            break;
          if (v6 == ++v5)
            goto LABEL_19;
        }
      }
      else
      {
        v11 = _swiftEmptyArrayStorage[2];
        if (!v11)
        {
LABEL_22:
          swift_bridgeObjectRelease();
          return;
        }
LABEL_19:
        v12 = 0;
        v13 = 0;
        while (1)
        {
          v14 = _swiftEmptyArrayStorage[v12 + 4];
          v15 = __OFADD__(v13, v14);
          v13 += v14;
          if (v15)
            break;
          if (v11 == ++v12)
            goto LABEL_22;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_26;
    }
  }
}

uint64_t sub_1000CDD58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  result = 1;
  if (a1 != a2)
  {
    v4 = a2;
    if (a2)
    {
      result = 1;
      while (1)
      {
        if (v4 >= a1)
          return 0;
        if (a1 / 2 >= v4)
          break;
        v5 = __OFSUB__(a1, v4);
        v4 = a1 - v4;
        if (v5)
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        if (v4 == a1 || !v4)
          return result;
      }
      if (__OFSUB__(v4, 1))
        goto LABEL_20;
      result = sub_1000CDD58(a1 - 1, v4 - 1);
      v6 = a1 * result;
      if ((unsigned __int128)(a1 * (__int128)result) >> 64 != (a1 * result) >> 63)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      if (v4 != -1 || v6 != 0x8000000000000000)
        return v6 / v4;
LABEL_22:
      __break(1u);
    }
  }
  return result;
}

uint64_t CombinationsSequence.Iterator.kRange.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t CombinationsSequence.Iterator.kRange.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*CombinationsSequence.Iterator.kRange.modify())(_QWORD)
{
  return CGSize.init(_:);
}

BOOL CombinationsSequence.Iterator.isFinished.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36)) == *(_QWORD *)(v1 + *(int *)(a1 + 36) + 8);
}

uint64_t CombinationsSequence.Iterator.indexes.getter(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 40)));
}

void CombinationsSequence.Iterator.indexes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  sub_10000B350();
}

uint64_t (*CombinationsSequence.Iterator.indexes.modify())(_QWORD)
{
  return CGSize.init(_:);
}

void CombinationsSequence.Iterator.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = sub_1000CF76C(0, a3);
  __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v28 - v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a2 - 8) + 16);
  v29 = a4;
  v13(a4, a1, a2, v10);
  v16 = type metadata accessor for CombinationsSequence(0, a2, a3, v14);
  v17 = (uint64_t *)(a1 + *(int *)(v16 + 40));
  v18 = *v17;
  v19 = v17[1];
  v20 = *((unsigned __int8 *)v17 + 16);
  if (v20)
    v21 = 0;
  else
    v21 = v19;
  if (v20)
    v22 = 0;
  else
    v22 = v18;
  v28 = type metadata accessor for CombinationsSequence.Iterator(0, a2, a3, v15);
  v23 = (_QWORD *)(a4 + *(int *)(v28 + 36));
  *v23 = v22;
  v23[1] = v21;
  v24 = a1;
  dispatch thunk of Collection.indices.getter(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, v8);
  Collection.prefix(_:)(v22, v8, AssociatedConformanceWitness);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v27 = Array.init<A>(_:)(v12, AssociatedTypeWitness, v8, *(_QWORD *)(AssociatedConformanceWitness + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v24, v16);
  *(_QWORD *)(v29 + *(int *)(v28 + 40)) = v27;
  sub_10000E4E0();
}

Swift::Void __swiftcall CombinationsSequence.Iterator.advance()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  void (*v58)(_QWORD, _QWORD);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  int64_t v73;
  int64_t v74;
  __int128 v75;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v68 = *(_QWORD *)(v0 + 24);
  v65 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v68);
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v62 = (char *)&v50 - v7;
  __chkstk_darwin(v8);
  v61 = (char *)&v50 - v9;
  v10 = *(int *)(v2 + 40);
  v66 = v1;
  v64 = (uint64_t *)(v1 + v10);
  *(_QWORD *)&v75 = *(_QWORD *)(v1 + v10);
  v11 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v60 = v11;
  if ((Collection.isEmpty.getter(v11, WitnessTable) & 1) != 0)
  {
LABEL_2:
    sub_1000CE594(v66, v65, v68);
LABEL_17:
    sub_10000E4E0();
    return;
  }
  v13 = swift_bridgeObjectRetain();
  v14 = Array.count.getter(v13);
  swift_bridgeObjectRelease();
  v15 = v14 - 1;
  if (!__OFSUB__(v14, 1))
  {
    v16 = v64;
    Array._makeMutableAndUnique()();
    sub_1000CF718(v15);
    sub_1000CF724();
    sub_1000CF738();
    v51 = v14 - 1;
    v17 = v56;
    v52 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    v63 = *(_QWORD *)(v56 + 72);
    v19 = v18 + v52 + v63 * v15;
    v20 = v65;
    v21 = v68;
    dispatch thunk of Collection.formIndex(after:)(v19, v65, v68);
    v22 = v61;
    sub_1000CF758(v51, *v16);
    v23 = (uint64_t)v62;
    dispatch thunk of Collection.endIndex.getter(v20, v21);
    v59 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v21, v20, AssociatedTypeWitness) + 8);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, AssociatedTypeWitness, v59);
    v25 = *(void (**)(_QWORD, _QWORD))(v17 + 8);
    v26 = v51;
    sub_1000CF730(v23);
    v58 = v25;
    v25(v22, AssociatedTypeWitness);
    if ((v24 & 1) != 0)
    {
      v53 = v26;
      v28 = v64;
      v27 = v65;
LABEL_6:
      while (1)
      {
        v29 = (uint64_t)v61;
        sub_1000CF758(v26, *v64);
        v30 = (uint64_t)v62;
        dispatch thunk of Collection.endIndex.getter(v65, v68);
        v31 = sub_1000CF748(v29, v30);
        sub_1000CF760(v30);
        sub_1000CF730(v29);
        if ((v31 & 1) == 0)
          break;
        v32 = v53 - 1;
        if (__OFSUB__(v53, 1))
          goto LABEL_20;
        if ((v32 & 0x8000000000000000) != 0)
          goto LABEL_2;
        v33 = v60;
        v34 = v64;
        Array._makeMutableAndUnique()();
        sub_1000CF718(v32);
        sub_1000CF724();
        sub_1000CF738();
        dispatch thunk of Collection.formIndex(after:)(v35 + v52 + v32 * v63, v65, v68);
        v73 = *v34;
        v36 = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
        RandomAccessCollection<>.indices.getter(&v75, v33, v36, &protocol witness table for Int);
        v53 = v32;
        v72 = v75;
        v71 = v32 + 1;
        v37 = sub_1000055B0(&qword_1002AFF88);
        v38 = sub_1000055B0(&qword_1002AFFA0);
        v39 = sub_1000CDB74();
        v69 = &protocol witness table for Int;
        v70 = v39;
        v40 = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v37);
        v41 = sub_10003A0A8(qword_1002AFFA8, &qword_1002AFFA0, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
        Collection.subscript.getter(&v73, &v71, v37, v38, v40, v41);
        v43 = v73;
        v42 = v74;
        if (v73 != v74)
        {
          if (v74 >= v73)
          {
            v57 = v74 - 1;
            v44 = v52 + v63 * v73;
            v54 = v74;
            while (v43 < v42)
            {
              if (__OFSUB__(v43, 1))
                goto LABEL_19;
              v67 = v43 + 1;
              v45 = (uint64_t)v61;
              sub_1000CF758(v43 - 1, *v28);
              v46 = v55;
              dispatch thunk of Collection.index(after:)(v45, v27, v68);
              sub_1000CF760(v45);
              Array._makeMutableAndUnique()();
              sub_1000CF718(v43);
              sub_1000CF724();
              sub_1000CF738();
              (*(void (**)(unint64_t, char *, uint64_t))(v56 + 40))(v47 + v44, v46, AssociatedTypeWitness);
              sub_1000CF758(v43, *v28);
              v48 = (uint64_t)v62;
              dispatch thunk of Collection.endIndex.getter(v27, v68);
              v49 = sub_1000CF748(v45, v48);
              sub_1000CF730(v48);
              sub_1000CF730(v45);
              v44 += v63;
              if (v57 != v43)
              {
                v43 = v67;
                v42 = v54;
                if ((v49 & 1) == 0)
                  continue;
              }
              v26 = v51;
              goto LABEL_6;
            }
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
          }
          __break(1u);
          goto LABEL_22;
        }
      }
    }
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_1000CE594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  _QWORD v19[2];

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9);
  __chkstk_darwin(AssociatedTypeWitness);
  __chkstk_darwin(v11);
  v13 = (char *)v19 - v12;
  result = type metadata accessor for CombinationsSequence.Iterator(0, a2, a3, v14);
  v16 = (uint64_t *)(a1 + *(int *)(result + 36));
  if (*v16 < v16[1])
  {
    ++*v16;
    v19[1] = a1 + *(int *)(result + 40);
    swift_getAssociatedTypeWitness(255, a3);
    v19[0] = type metadata accessor for Array(0);
    Array.removeAll(keepingCapacity:)(1);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    dispatch thunk of Collection.indices.getter(a2, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    v17 = *v16;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness);
    Collection.prefix(_:)(v17, AssociatedTypeWitness, AssociatedConformanceWitness);
    return Array.append<A>(contentsOf:)(v13, v19[0], AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  }
  return result;
}

uint64_t CombinationsSequence.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = 0;
  if (*(_QWORD *)(v2 + *(int *)(a1 + 36)) != *(_QWORD *)(v2 + *(int *)(a1 + 36) + 8))
  {
    v17 = *(_QWORD *)(v2 + *(int *)(a1 + 40));
    __chkstk_darwin(a1);
    v6 = *(_QWORD *)(v4 + 24);
    v14 = *(_QWORD *)(v4 + 16);
    v5 = v14;
    v15 = v6;
    v16 = v2;
    sub_1000CF76C(255, v6);
    v7 = type metadata accessor for Array(0);
    v8 = sub_1000CF76C(0, *(_QWORD *)(v6 + 8));
    swift_bridgeObjectRetain();
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
    v3 = sub_1000CD4A0((void (*)(char *, char *))sub_1000CEB94, (uint64_t)&v13, v7, v8, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v10);
    swift_bridgeObjectRelease();
    sub_1000CE8C0(v2, v5, v6, v11);
  }
  return v3;
}

void sub_1000CE8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CombinationsSequence.Iterator(0, a2, a3, a4);
  CombinationsSequence.Iterator.advance()();
}

uint64_t sub_1000CE8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  _BYTE v16[32];

  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v8 + 16))(v10);
  v11 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v16, a1, a2, a3);
  v13 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v13, AssociatedTypeWitness);
  v11(v16, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t sub_1000CE9E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = CombinationsSequence.Iterator.next()(a1);
  *a2 = result;
  return result;
}

void CombinationsSequence.makeIterator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __chkstk_darwin(a1);
  sub_10002641C();
  v6 = v5 - v4;
  (*(void (**)(uint64_t))(v7 + 16))(v5 - v4);
  CombinationsSequence.Iterator.init(_:)(v6, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  sub_10000B350();
}

uint64_t sub_1000CEA74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  CombinationsSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

void Collection.combinations(ofCount:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  __chkstk_darwin(a1);
  sub_100026500();
  if (v10 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000CF774(v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    CombinationsSequence.init(_:k:)(v4, a1, a2, a3, a4);
  }
}

uint64_t type metadata accessor for CombinationsSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CombinationsSequence.Iterator);
}

uint64_t sub_1000CEB44(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1000CEB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000CE8E8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000CEBB4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CombinationsSequence<A>.Iterator, a1);
}

uint64_t sub_1000CEBC4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for CombinationsSequence<A>, a1);
}

uint64_t sub_1000CEBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1000CEBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CF100(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64, (uint64_t)&unk_1002233D8);
}

uint64_t *sub_1000CEBF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_OWORD *)v12;
    v14 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v14 + 16) = *(_BYTE *)(v12 + 16);
    *(_OWORD *)v14 = v13;
  }
  return v4;
}

uint64_t sub_1000CECC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_1000CED38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_1000CEDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_1000CEE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_1000CEE94(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
      return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, v6, v4);
    return 0;
  }
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  v8 = (a2 - v6 + 255) >> (8 * v7);
  if (v7 < 4)
    v9 = v8 + 1;
  else
    v9 = 2;
  if (v9 >= 0x10000)
    v10 = 4;
  else
    v10 = 2;
  if (v9 < 0x100)
    v10 = 1;
  if (v9 >= 2)
    v11 = v10;
  else
    v11 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1000CEF18 + 4 * byte_1002232B0[v11]))();
}

void sub_1000CEF7C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v7 >= a3)
  {
    v12 = 0;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (v7 < a2)
  {
    if (v8 >= 4)
      v13 = ~v7 + a2;
    else
      v13 = (~(_BYTE)v7 + a2);
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_1000CF090()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1000CF098(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000CF0A0);
}

void sub_1000CF0B8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1000CF0C0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1000CF0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!(_DWORD)a2)
    JUMPOUT(0x1000CF0D0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v5, a2, a3, a4);
}

uint64_t sub_1000CF0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CF100(a1, a2, a3, (uint64_t)&unk_100223410, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_1000CF100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v9;
  _QWORD v10[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v9 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v10[1] = a4;
    v10[2] = a5;
    swift_initStructMetadata(a1, 0, 3, v10, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000CF180(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (uint64_t *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8);
    v13 = *v12;
    *(_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8) = *v12;
    swift_bridgeObjectRetain(v13);
  }
  return v4;
}

uint64_t sub_1000CF24C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_bridgeObjectRelease(*(_QWORD *)((((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_1000CF294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  v10 = *v9;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *v9;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000CF304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = *v9;
  *v9 = *v10;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000CF390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000CF3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *v9 = *(_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000CF480(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, v6, v4);
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000CF504 + 4 * byte_1002232BF[v11]))();
  }
}

void sub_1000CF58C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1000CF680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
        v9 = a2 ^ 0x80000000;
      else
        v9 = (a2 - 1);
      *v8 = v9;
    }
    else
    {
      return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t sub_1000CF718(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1000CEB44(a1, v1, v2);
}

uint64_t sub_1000CF724()
{
  uint64_t v0;

  return _swift_isClassOrObjCExistentialType(v0, v0);
}

uint64_t sub_1000CF730(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1000CF748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v2, *(_QWORD *)(v3 - 248));
}

uint64_t sub_1000CF758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return Array.subscript.getter(a1, a2, v2);
}

uint64_t sub_1000CF760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 256))(a1, v1);
}

uint64_t sub_1000CF76C(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedTypeWitness(a1, a2);
}

uint64_t sub_1000CF774@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

xpc_connection_t ECXPCMessage.remoteConnection.getter(void *a1)
{
  return xpc_dictionary_get_remote_connection(a1);
}

_xpc_connection_s *ECXPCMessage.reply(_:)(void (*a1)(void), int a2, xpc_object_t xdict)
{
  _xpc_connection_s *result;
  _xpc_connection_s *v6;
  xpc_object_t reply;
  void *v8;

  result = xpc_dictionary_get_remote_connection(xdict);
  if (result)
  {
    v6 = result;
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      a1();
      xpc_connection_send_message(v6, v8);
      swift_unknownObjectRelease(v6);
      v6 = (_xpc_connection_s *)v8;
    }
    return (_xpc_connection_s *)swift_unknownObjectRelease(v6);
  }
  return result;
}

ValueMetadata *type metadata accessor for ECXPCMessage()
{
  return &type metadata for ECXPCMessage;
}

id sub_1000CF830(uint64_t a1)
{
  return sub_1000D5080(a1, (SEL *)&selRef_fileHandleForWritingToURL_error_);
}

uint64_t sub_1000CF880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  swift_retain();
  v6 = sub_1000D8CCC((uint64_t)&v8, (uint64_t)&v14, a3, a4);
  swift_release();
  return v6;
}

void sub_1000CF980(void (*a1)(void))
{
  uint64_t v1;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t sub_1000CF9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5;
  void *object;

  if (!a3)
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    a2 = 0x2065646F63;
  }
  swift_bridgeObjectRetain(a3);
  return a2;
}

uint64_t sub_1000CFA74()
{
  unsigned int *v0;

  return sub_1000CF9E0(*v0, *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2));
}

uint64_t sub_1000CFA80(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t result;

  v2 = archive_entry_filetype(*(_QWORD *)(a1 + 16));
  HIDWORD(v3) = v2;
  LODWORD(v3) = (v2 << 16) + 0x40000000;
  switch((unsigned __int16)(v3 >> 28))
  {
    case 0u:
      swift_release(a1);
      result = 5;
      break;
    case 3u:
      swift_release(a1);
      result = 4;
      break;
    case 5u:
      swift_release(a1);
      result = 3;
      break;
    case 6u:
      swift_release(a1);
      result = 1;
      break;
    case 8u:
      swift_release(a1);
      result = 2;
      break;
    case 0xAu:
      swift_release(a1);
      result = 0;
      break;
    default:
      swift_release(a1);
      if (v2 == 40960)
        result = 6;
      else
        result = 4;
      break;
  }
  return result;
}

uint64_t sub_1000CFB54(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = archive_entry_clone(*(_QWORD *)(a1 + 16));
  if (result)
  {
    v4 = result;
    swift_release(a1);
    *(_QWORD *)(v1 + 16) = v4;
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CFB9C()
{
  uint64_t v0;

  archive_entry_free(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ArchiveEntry()
{
  return objc_opt_self(_TtC13EnsembleAgent12ArchiveEntry);
}

uint64_t sub_1000CFBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  id v6;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v12[3];
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for FileAttributeKey(0);
  v2 = v1;
  sub_10000E330(&qword_1002AA808, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10021CDD4);
  v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, (char *)&type metadata for Any + 8, v3);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = NSFilePosixPermissions;
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedShort:", archive_entry_perm(v4));
  v13 = sub_1000078E0(0, &qword_1002AC398, NSNumber_ptr);
  v12[0] = v6;
  sub_1000D9564(v13);
  if (archive_entry_ctime_is_set(v4))
  {
    v7 = NSFileCreationDate;
    v8 = archive_entry_ctime(v4);
    v9 = archive_entry_ctime_nsec(v4);
    v13 = type metadata accessor for Date(0);
    sub_100005534(v12);
    v10 = Date.init(timeIntervalSince1970:)((double)v9 / 1000000000.0 + (double)v8);
    sub_1000D9564(v10);
  }
  return v14;
}

uint64_t sub_1000CFD30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = archive_entry_size(*(_QWORD *)(v0 + 16));
  return v1 & ~(v1 >> 63);
}

uint64_t sub_1000CFD4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFD8C((uint64_t (*)(_QWORD))&archive_entry_sourcepath, a1);
}

uint64_t sub_1000CFD58()
{
  uint64_t v0;
  uint64_t result;

  result = archive_entry_symlink(*(_QWORD *)(v0 + 16));
  if (result)
    return String.init(cString:)();
  return result;
}

uint64_t sub_1000CFD80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFD8C((uint64_t (*)(_QWORD))&archive_entry_pathname_utf8, a1);
}

uint64_t sub_1000CFD8C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;

  v4 = v2;
  sub_1000055B0(qword_1002ABCC8);
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = a1(*(_QWORD *)(v4 + 16));
  if (v10)
  {
    v11 = v10;
    swift_retain();
    v13 = sub_1000CFA80(v12) == 2;
    sub_1000268EC();
    sub_10003D6D8(v9, 1);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(v11, v13, v9);
    sub_100048AE8(v9);
    return sub_10003D6D8(a2, 0);
  }
  else
  {
    v15 = type metadata accessor for URL(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a2, 1, 1, v15);
  }
}

uint64_t sub_1000CFE7C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::Bool v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  sub_1000055B0(qword_1002ABCC8);
  sub_10000E490();
  __chkstk_darwin(v0);
  v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000268EC();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002641C();
  v7 = v6 - v5;
  sub_1000CFD80((uint64_t)v2);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v2, 1, v3) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    sub_1000D9604();
    v8._countAndFlagsBits = sub_1000D9574();
    v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    sub_10000E420();
    if (!v9)
    {
      sub_100060064(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      return 0;
    }
    v10 = type metadata accessor for ArchiveEntry();
    sub_1000088D8(v10, 24);
    v11 = sub_100026AE4();
    v12 = sub_1000CFB54(v11);
    v13 = sub_1000D9604();
    v15 = v14;
    if (v13 == URL.path.getter(v13) && v15 == v16)
    {
      swift_bridgeObjectRelease_n(v15, 2);
    }
    else
    {
      v18 = v16;
      v19 = sub_1000D95F8();
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v21, v18, 0);
      swift_bridgeObjectRelease();
      sub_10000E420();
      if ((v22 & 1) == 0)
      {
        sub_1000D9604();
        v23 = sub_1000D9574();
        v25 = v24;
        swift_bridgeObjectRelease();
        v26 = HIBYTE(v25) & 0xF;
        if ((v25 & 0x2000000000000000) == 0)
          v26 = v23;
        v27 = 7;
        if (((v25 >> 60) & ((v23 & 0x800000000000000) == 0)) != 0)
          v27 = 11;
        v28 = sub_1001928CC(v27 | (v26 << 16), v15, v22);
        sub_100026AE4();
        v29 = static String._fromSubstring(_:)(v28);
        sub_1000D8D8C(v29, v30, v12);
        swift_bridgeObjectRelease();
        sub_10000E420();
        goto LABEL_18;
      }
    }
    archive_entry_set_pathname_utf8(*(_QWORD *)(v12 + 16), ".");
LABEL_18:
    sub_100060064(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    return v12;
  }
  sub_100048AE8((uint64_t)v2);
  return 0;
}

uint64_t *sub_1000D00C4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v8 = archive_read_new();
  sub_1000088D8(v3, 56);
  v9 = sub_1000D0610(v8);
  if (!v4)
  {
    v10 = sub_10002D790();
    sub_1000D018C(v10, (uint64_t)v9, a1);
    v9[3] = a2;
    v9[4] = a3;
    swift_retain();
    swift_release();
    archive_read_open(v9[2], v9, 0, sub_1000D03F8, 0);
  }
  return v9;
}

uint64_t sub_1000D018C(uint64_t a1, uint64_t a2, char a3)
{
  int set_format;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  set_format = archive_read_set_format(*(_QWORD *)(a2 + 16), dword_1002236DC[a3]);
  if (set_format == 1)
  {
    swift_release();
    return 1;
  }
  else if (set_format)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = archive_errno(v6);
    v8 = archive_error_string(v6);
    if (v8)
    {
      v9 = String.init(cString:)(v8);
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v12 = sub_1000D8F58();
    v13 = swift_allocError(&unk_10028A650, v12, 0, 0);
    *(_DWORD *)v14 = v7;
    *(_QWORD *)(v14 + 8) = v9;
    *(_QWORD *)(v14 + 16) = v11;
    swift_willThrow(v13);
    return swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t sub_1000D0274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int data_into_fd;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  data_into_fd = archive_read_data_into_fd(*(_QWORD *)(a2 + 16), a3);
  if (data_into_fd == 1)
  {
    swift_release();
    return 1;
  }
  else if (data_into_fd)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = archive_errno(v6);
    v8 = archive_error_string(v6);
    if (v8)
    {
      v9 = String.init(cString:)(v8);
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v12 = sub_1000D8F58();
    v13 = swift_allocError(&unk_10028A650, v12, 0, 0);
    *(_DWORD *)v14 = v7;
    *(_QWORD *)(v14 + 8) = v9;
    *(_QWORD *)(v14 + 16) = v11;
    swift_willThrow(v13);
    return swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
}

void sub_1000D0350(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  type metadata accessor for ArchiveReader();
  sub_1000D0390(a1, a2, a3);
}

void sub_1000D0390(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v4;

  if (a2 && a3)
  {
    v4 = objc_autoreleasePoolPush();
    sub_1000088D0();
    sub_1000D04E4(a3);
    sub_10000B348();
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    j__archive_set_error(a1, 12, "no archive object in client_data");
  }
  sub_10000B350();
}

void sub_1000D03FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t disk_new;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  disk_new = archive_read_disk_new();
  sub_1000088D8(v0, 56);
  v3 = sub_1000D0610(disk_new);
  if (!v1)
  {
    URL.withUnsafeFileSystemRepresentation<A>(_:)(&v10, sub_1000D9114, v3, &type metadata for Int32);
    if ((_DWORD)v10)
    {
      v4 = v3[2];
      v5 = archive_errno(v4);
      v6 = archive_error_string(v4);
      if (v6)
        String.init(cString:)(v6);
      v7 = sub_1000D8F58();
      v8 = sub_1000264A0((uint64_t)&unk_10028A650, v7);
      *v9 = v5;
      sub_1000D950C(v8, (uint64_t)v9);
      sub_10002645C();
    }
  }
  sub_1000D9584();
}

uint64_t sub_1000D04E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(__n128);
  __n128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  id v13;
  objc_class *v14;
  uint64_t v15;

  v2 = v1;
  v4 = *(uint64_t (**)(__n128))(v1 + 24);
  v5 = swift_retain();
  v6 = v4(v5);
  v8 = v7;
  swift_release();
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v8;
  if (v8 >> 60 == 15)
  {
    sub_100022AD8(v9, v10);
    return 0;
  }
  else
  {
    sub_100025168(v6, v8);
    sub_10002517C(v6, v8);
    sub_100022AD8(v9, v10);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v13 = -[objc_class bytes](isa, "bytes");
    v14 = isa;
    *a1 = v13;
    v15 = Data.count.getter(v6, v8);
    sub_100022AD8(v6, v8);
    sub_100022AD8(v6, v8);
    return v15;
  }
}

uint64_t *sub_1000D0610(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;

  v2 = v1;
  v4 = *v2;
  v5 = type metadata accessor for POSIXError(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[3] = (uint64_t)variable initialization expression of PasteboardDataProvider.data;
  v2[4] = 0;
  v2[5] = 0;
  v2[6] = 0xF000000000000000;
  if (a1)
  {
    v2[2] = a1;
  }
  else
  {
    v10 = errno.getter(v7);
    v11 = POSIXErrorCode.init(rawValue:)(v10);
    if ((v11 & (unint64_t)&_mh_execute_header) != 0)
      v12 = 5;
    else
      v12 = v11;
    v19 = v12;
    v13 = sub_1000D88F8((uint64_t)_swiftEmptyArrayStorage);
    sub_10000E330(&qword_1002B0840, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
    v15 = _BridgedStoredNSError.init(_:userInfo:)(&v19, v13, v5, v14);
    POSIXError._nsError.getter(v15);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    swift_willThrow(v16);
    swift_release();
    sub_100022AD8(v2[5], v2[6]);
    swift_deallocPartialClassInstance(v2, v4, 56, 7);
  }
  return v2;
}

_QWORD *sub_1000D075C()
{
  _QWORD *v0;

  archive_read_free(v0[2]);
  sub_100026A7C();
  sub_100022AD8(v0[5], v0[6]);
  return v0;
}

uint64_t sub_1000D0784()
{
  uint64_t v0;

  sub_1000D075C();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for ArchiveReader()
{
  return objc_opt_self(_TtC13EnsembleAgent13ArchiveReader);
}

void sub_1000D07C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int next_header2;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v1 = type metadata accessor for ArchiveEntry();
  v2 = sub_1000088D8(v1, 24);
  v3 = archive_entry_new();
  if (v3)
  {
    *(_QWORD *)(v2 + 16) = v3;
    v4 = *(_QWORD *)(v0 + 16);
    next_header2 = archive_read_next_header2(v4, v3);
    if (next_header2 != -20)
    {
      if (next_header2 == 1)
      {
        sub_10002645C();
      }
      else if (next_header2)
      {
        v6 = archive_errno(v4);
        v7 = archive_error_string(v4);
        if (v7)
          String.init(cString:)(v7);
        v8 = sub_1000D8F58();
        v9 = sub_1000264A0((uint64_t)&unk_10028A650, v8);
        *v10 = v6;
        sub_1000D950C(v9, (uint64_t)v10);
        sub_10002645C();
      }
    }
    sub_1000D9584();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000D0890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v2 = type metadata accessor for POSIXError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10000E478();
  v22 = xmmword_1002236F0;
  v4 = *(_QWORD *)(v0 + 16);
  while (1)
  {
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v5 = archive_read_data_block(v4, &v21, &v20, &v19);
    if (v5)
      break;
    if (!v21)
    {
      v18 = 12;
      v12 = sub_1000D88F8((uint64_t)_swiftEmptyArrayStorage);
      sub_10000E330(&qword_1002B0840, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
      v14 = _BridgedStoredNSError.init(_:userInfo:)(&v18, v12, v2, v13);
      POSIXError._nsError.getter(v14);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
      goto LABEL_13;
    }
    if (v20)
      Data._Representation.append(contentsOf:)(v21, v21 + v20);
  }
  if (v5 == 1)
    return v22;
  v7 = archive_errno(v4);
  v8 = archive_error_string(v4);
  if (v8)
  {
    v9 = String.init(cString:)(v8);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v16 = sub_1000D8F58();
  v15 = sub_1000264A0((uint64_t)&unk_10028A650, v16);
  *(_DWORD *)v17 = v7;
  *(_QWORD *)(v17 + 8) = v9;
  *(_QWORD *)(v17 + 16) = v11;
LABEL_13:
  swift_willThrow(v15);
  return sub_100022AEC(v22, *((unint64_t *)&v22 + 1));
}

uint64_t *sub_1000D0A4C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v3 = archive_write_new();
  v4 = sub_1000D9478();
  swift_allocObject(v4, v5, v6);
  v7 = sub_1000D0C0C(v3, a1);
  v8 = v7;
  if (!v1)
    archive_write_open2(v7[2], v7, 0, sub_1000D0B78, 0, 0);
  return v8;
}

void sub_1000D0ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ArchiveWriter();
  sub_1000D0B14(a1, a2, a3, a4);
}

void sub_1000D0B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a2 && a3)
  {
    v5 = a3 + a4;
    swift_retain();
    sub_1000D0B7C(a3, v5);
    sub_10000B348();
  }
  else
  {
    j__archive_set_error(a1, 12, "writeCallback had no context or no buffer");
  }
  sub_10000B350();
}

uint64_t sub_1000D0B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v3 = v2;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  swift_retain(v6);
  v8 = v7(a1, a2);
  swift_release(v6);
  return v8;
}

uint64_t *sub_1000D0C0C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;

  v4 = v2;
  v7 = *v4;
  v8 = type metadata accessor for POSIXError(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[3] = (uint64_t)static UInt64.logicalMinimum.getter;
  v4[4] = 0;
  if (a1)
  {
    v4[2] = a1;
    swift_retain();
    sub_1000D0D94(v13, (uint64_t)v4, a2);
    if (v3)
    {
      swift_release();
    }
    else
    {
      swift_retain();
      sub_1000D0E7C(v14, (uint64_t)v4);
    }
  }
  else
  {
    v15 = errno.getter(v10);
    v16 = POSIXErrorCode.init(rawValue:)(v15);
    if ((v16 & (unint64_t)&_mh_execute_header) != 0)
      v17 = 5;
    else
      v17 = v16;
    v24 = v17;
    v18 = sub_1000D88F8((uint64_t)_swiftEmptyArrayStorage);
    sub_10000E330(&qword_1002B0840, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
    v20 = _BridgedStoredNSError.init(_:userInfo:)(&v24, v18, v8, v19);
    POSIXError._nsError.getter(v20);
    v21 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_willThrow(v21);
    swift_release();
    swift_deallocPartialClassInstance(v4, v7, 40, 7);
  }
  return v4;
}

uint64_t sub_1000D0D94(uint64_t a1, uint64_t a2, char a3)
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = archive_write_set_format(*(_QWORD *)(a2 + 16), dword_1002236DC[a3]);
  if (v4 == 1)
  {
    swift_release();
    return 1;
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = archive_errno(v6);
    v8 = archive_error_string(v6);
    if (v8)
    {
      v9 = String.init(cString:)(v8);
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v12 = sub_1000D8F58();
    v13 = swift_allocError(&unk_10028A650, v12, 0, 0);
    *(_DWORD *)v14 = v7;
    *(_QWORD *)(v14 + 8) = v9;
    *(_QWORD *)(v14 + 16) = v11;
    swift_willThrow(v13);
    return swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t sub_1000D0E7C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = archive_write_set_bytes_per_block(*(_QWORD *)(a2 + 16), 0x40000);
  if (v3 == 1)
  {
    swift_release();
    return 1;
  }
  else if (v3)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = archive_errno(v5);
    v7 = archive_error_string(v5);
    if (v7)
    {
      v8 = String.init(cString:)(v7);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    v11 = sub_1000D8F58();
    v12 = swift_allocError(&unk_10028A650, v11, 0, 0);
    *(_DWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 16) = v10;
    swift_willThrow(v12);
    return swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t sub_1000D0F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = archive_write_header(*(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16));
  if (v4 >= 2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = archive_errno(v5);
    v7 = archive_error_string(v5);
    if (v7)
    {
      v8 = String.init(cString:)(v7);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    v11 = sub_1000D8F58();
    v12 = swift_allocError(&unk_10028A650, v11, 0, 0);
    *(_DWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 16) = v10;
    swift_willThrow(v12);
    swift_release();
  }
  else
  {
    swift_release();
  }
  swift_release();
  return v4;
}

uint64_t sub_1000D103C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a3(*(_QWORD *)(a2 + 16));
  if (v4 == 1)
  {
    sub_10002645C();
    return 1;
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = archive_errno(v6);
    v8 = archive_error_string(v6);
    if (v8)
      String.init(cString:)(v8);
    v9 = sub_1000D8F58();
    v10 = sub_1000264A0((uint64_t)&unk_10028A650, v9);
    *v11 = v7;
    sub_1000D950C(v10, (uint64_t)v11);
    return sub_10002645C();
  }
  else
  {
    sub_10002645C();
    return 0;
  }
}

uint64_t sub_1000D10F8()
{
  uint64_t v0;

  archive_write_free(*(_QWORD *)(v0 + 16));
  sub_100026A7C();
  return v0;
}

uint64_t sub_1000D1118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000D10F8();
  v0 = sub_1000D9478();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for ArchiveWriter()
{
  return objc_opt_self(_TtC13EnsembleAgent13ArchiveWriter);
}

uint64_t sub_1000D1154(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 88);
}

uint64_t sub_1000D11B4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  sub_10002D790();
  sub_100026AE4();
  result = sub_1000D0F58(v2, v2, a1);
  if (!v3)
  {
    a2(result);
    v7 = sub_10002D790();
    return sub_1000D103C(v7, v2, (uint64_t (*)(_QWORD))&archive_write_finish_entry);
  }
  return result;
}

void sub_1000D121C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000D125C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000088D0();
  v4 = sub_1000CF880(v0, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3), v1);
  if (!v2)
    return v4;
  return v2;
}

void sub_1000D1364()
{
  sub_1000CF980((void (*)(void))sub_1000D9024);
}

Swift::Int sub_1000D13B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 32, v10, 33, 0);
  sub_1000D794C(a2, a3);
  sub_1000CA690();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  sub_1000CA730(v6);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * v6;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  swift_endAccess(v10);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1000D1454@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v2 = v1;
  OS_dispatch_semaphore.wait()();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(os_unfair_lock_s **)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_1000D14C0(v2, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));
  return swift_release();
}

void sub_1000D14C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(a1 + 32, v9, 33, 0);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4[2])
  {
    v5 = v4[4];
    v6 = v4[5];
    sub_1000D8FF4(v5, v6);
    sub_1001876B4(0);
    swift_endAccess(v9);
    v7 = v6 & 0x3000000000000000;
    if ((v6 & 0x3000000000000000) == 0x3000000000000000)
      v8 = 0;
    else
      v8 = v5;
    if ((v6 & 0x3000000000000000) != 0x3000000000000000)
      v7 = v6;
    *a2 = v8;
    a2[1] = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000D1564()
{
  uint64_t v0;

  sub_100026600();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000D158C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000D1564();
  v0 = sub_1000D9478();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for MessageQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageQueue);
}

_QWORD *sub_1000D15B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = type metadata accessor for UnfairLock();
  v2 = swift_allocObject(v1, 24, 7);
  v3 = (_DWORD *)swift_slowAlloc(4, -1);
  *v3 = 0;
  *(_QWORD *)(v2 + 16) = v3;
  v0[2] = v2;
  v0[3] = dispatch_semaphore_create(0);
  v0[4] = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t sub_1000D1610(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_1000D1634()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B00B0);
  sub_100006FB4(v0, (uint64_t)qword_1002B00B0);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1212371521, 0xE400000000000000);
}

void sub_1000D16A0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  sub_10002626C();
  v2 = v0;
  v33 = v3;
  v34 = v4;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  sub_1000262EC();
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10000E490();
  __chkstk_darwin(v10);
  sub_10002641C();
  v13 = v12 - v11;
  type metadata accessor for DispatchQoS(0);
  sub_10000E490();
  __chkstk_darwin(v14);
  sub_1000D9530();
  v15 = type metadata accessor for Completions();
  v16 = sub_1000088D8(v15, 24);
  *(_QWORD *)(v16 + 16) = _swiftEmptyArrayStorage;
  v2[2] = v16;
  v17 = type metadata accessor for UnfairLock();
  v18 = sub_1000088D8(v17, 24);
  v19 = (_DWORD *)swift_slowAlloc(4, -1);
  *v19 = 0;
  *(_QWORD *)(v18 + 16) = v19;
  v2[3] = v18;
  v2[4] = sub_1000D1610;
  v2[5] = 0;
  v20 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_queue;
  v21 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v21);
  v35 = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC980, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v23 = v22;
  v24 = sub_1000055B0((uint64_t *)&unk_1002AB9C0);
  sub_10006D048((unint64_t *)&unk_1002AC990, (uint64_t *)&unk_1002AB9C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v9, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v32);
  *(_QWORD *)((char *)v2 + v20) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ALL, 0x8000000100256F60, v1, v13, v8, 0);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state) = 0;
  sub_10000E440();
  v26 = sub_1000D95E4();
  v27(v26, v33);
  sub_1000268EC();
  v28 = sub_1000D95E4();
  v29(v28, v34);
  sub_10000E4E0();
}

void sub_1000D18C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  sub_1000D960C();
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1000D945C();
  sub_1000D94F0();
  __chkstk_darwin(v7);
  sub_10000E478();
  v8 = *(void **)(v0 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_queue);
  v9 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10028A508, 40);
  v9[2] = v1;
  v9[3] = v5;
  v9[4] = v3;
  v10 = sub_1000D9558((uint64_t)sub_10000E610);
  v11 = v8;
  sub_1000D95BC();
  sub_1000600C0();
  sub_1000D95C8();
  sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10003B038();
  sub_1000D95A4((unint64_t *)&qword_1002AA6D0);
  sub_1000D949C(v12);
  sub_1000D94D8();
  _Block_release(v10);

  sub_1000D9488();
  sub_1000D94C8();
  sub_1000D95D0();
  sub_10000E4E0();
}

void sub_1000D1A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __n128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_unfair_lock_s *v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  os_log_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t aBlock[7];
  uint64_t v101;
  uint64_t v102;

  v98 = a2;
  v99 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  v96 = v4;
  v97 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(os_unfair_lock_s **)(v16 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v17);
  v18 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state))
  {
    v19 = v99;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 16));
    swift_release();
    swift_release();
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v20 = type metadata accessor for Logger(0);
    sub_100006FB4(v20, (uint64_t)qword_1002B00B0);
    v21 = swift_retain_n(a1, 2);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.default.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      *(_DWORD *)v25 = 136446210;
      aBlock[0] = v26;
      v27 = UUID.uuidString.getter(v26);
      v29 = sub_1000599D0(8, v27, v28);
      v30 = static String._fromSubstring(_:)(v29);
      v32 = v31;
      swift_bridgeObjectRelease();
      v101 = sub_100006FCC(v30, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v25 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "%{public}s: cannot size archive, archiver not idle", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v33 = v25;
      v19 = v99;
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v35 = NSError.init(NSPOSIXErrorDomain:debugDescription:__file:__line:)(16, 0xD000000000000011, 0x8000000100256F40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/Archive.swift", 77, 2, 447);
    sub_1000D253C((uint64_t)v35, a1, v98, v19);

  }
  else
  {
    v94 = v15;
    v95 = v13;
    v92 = v7;
    v93 = v12;
    v90 = v11;
    v91 = v9;
    *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state) = 1;
    v34 = v18;
    sub_1000C4E10(0);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 16));
    swift_release();
    swift_release();
    swift_retain();
    v36 = sub_1000D36B0();
    v89 = v34;
    swift_release();
    v37 = v93;
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v38 = type metadata accessor for Logger(0);
    sub_100006FB4(v38, (uint64_t)qword_1002B00B0);
    v39 = swift_retain_n(a1, 4);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v40, v41);
    v43 = v42;
    v44 = os_log_type_enabled(v40, v42);
    v45 = v92;
    v88 = v8;
    v46 = v90;
    if (v44)
    {
      v47 = swift_slowAlloc(32, -1);
      v86 = v40;
      v48 = v47;
      v49 = swift_slowAlloc(64, -1);
      v87 = v49;
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136446723;
      v85 = v43;
      v50 = UUID.uuidString.getter(v49);
      v52 = sub_1000599D0(8, v50, v51);
      v53 = static String._fromSubstring(_:)(v52);
      v55 = v54;
      swift_bridgeObjectRelease();
      v101 = sub_100006FCC(v53, v55, aBlock);
      v84 = &v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v48 + 4);
      swift_release_n(a1, 2);
      v56 = swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2081;
      v83 = v48 + 14;
      v57 = v94;
      v58 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v95 + 16))(v94, a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v37, v56);
      sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v37, v59);
      v62 = v61;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v37);
      v101 = sub_100006FCC(v60, v62, aBlock);
      v63 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v84, v83);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2048;
      v101 = (uint64_t)v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v63, v48 + 24);
      v64 = v86;
      _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v85, "%{public}s: archive sizing complete: url=%{private}s size=%llu", (uint8_t *)v48, 0x20u);
      v65 = v87;
      swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_release_n(a1, 4);
    }
    v66 = v99;
    v67 = v91;
    v68 = *(_QWORD *)(a1 + 24);
    v69 = *(os_unfair_lock_s **)(v68 + 16);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v69);
    v70 = *(_QWORD *)(a1 + v89);
    *(_QWORD *)(a1 + v89) = 0;
    sub_1000C4E10(v70);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v68 + 16));
    swift_release();
    swift_release();
    v71 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v72 = (void *)static OS_dispatch_queue.main.getter(v71);
    v73 = (_QWORD *)swift_allocObject(&unk_10028A558, 40, 7);
    v73[2] = v98;
    v73[3] = v66;
    v73[4] = v36;
    aBlock[4] = (uint64_t)sub_1000D9214;
    aBlock[5] = (uint64_t)v73;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E610;
    aBlock[3] = (uint64_t)&unk_10028A570;
    v74 = _Block_copy(aBlock);
    swift_retain();
    v75 = swift_release();
    static DispatchQoS.unspecified.getter(v75);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v76 = v46;
    v78 = v77;
    v79 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
    v80 = v79;
    v81 = v96;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v80, v82, v96, v78);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v76, v45, v74);
    _Block_release(v74);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v45, v81);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, v88);
  }
}

uint64_t sub_1000D253C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(os_unfair_lock_s **)(v14 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v15);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = type metadata accessor for Completions();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a2 + 16) = v18;
  v19 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state) = 3;
  sub_1000C4E10(v19);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
  swift_release();
  swift_release();
  v20 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  v22 = (_QWORD *)swift_allocObject(&unk_10028A5A8, 48, 7);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a1;
  v22[5] = v16;
  aBlock[4] = sub_1000D926C;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028A5C0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_errorRetain(a1);
  v24 = swift_release();
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v8, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v23);
  _Block_release(v23);
  swift_release();

  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v30);
}

uint64_t sub_1000D27E8(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  a1(a3, 1);
  return sub_1000C4E9C(a3);
}

void sub_1000D2830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;

  sub_10002626C();
  v2 = v1;
  sub_1000D960C();
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_1000D945C();
  sub_1000D94F0();
  __chkstk_darwin(v4);
  sub_10000E478();
  v5 = *(void **)(v0 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_queue);
  v6 = sub_1000088D8((uint64_t)&unk_10028A440, 32);
  *(_QWORD *)(v6 + 16) = v0;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = sub_1000D9558((uint64_t)sub_10000E610);
  v8 = v5;
  sub_1000D95BC();
  sub_1000600C0();
  sub_1000D95C8();
  sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10003B038();
  sub_1000D95A4((unint64_t *)&qword_1002AA6D0);
  sub_1000D949C(v9);
  sub_1000D94D8();
  _Block_release(v7);

  sub_1000D9488();
  sub_1000D94C8();
  sub_1000D95D0();
  sub_10000E4E0();
}

uint64_t sub_1000D296C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void **v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  int v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __n128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  os_log_t v110;
  void **v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void **aBlock;
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  void *v127;
  void *v128;
  uint64_t v129;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v121 = *(_QWORD *)(v12 - 8);
  v122 = v12;
  __chkstk_darwin(v12);
  v120 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  swift_retain();
  v14 = 0;
  LOBYTE(a2) = sub_1000C4D20(v15, (uint64_t)a1, a2);
  swift_release();
  if ((a2 & 1) != 0)
  {
    v117 = v9;
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100006FB4(v16, (uint64_t)qword_1002B00B0);
    v18 = swift_retain_n(a1, 2);
    v115 = v17;
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.default.getter(v19, v20);
    v22 = os_log_type_enabled(v19, v21);
    v113 = v4;
    v114 = v8;
    v118 = v7;
    v119 = v5;
    v116 = v11;
    if (v22)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (void **)swift_slowAlloc(32, -1);
      aBlock = v24;
      *(_DWORD *)v23 = 136446210;
      v112 = 0;
      v25 = UUID.uuidString.getter(v24);
      v27 = sub_1000599D0(8, v25, v26);
      v28 = static String._fromSubstring(_:)(v27);
      v30 = v29;
      swift_bridgeObjectRelease();
      v123 = sub_100006FCC(v28, v30, (uint64_t *)&aBlock);
      v14 = (uint64_t)v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v23 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "%{public}s: starting archive source", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    swift_retain();
    sub_1000D3AC8();
    v31 = v14;
    swift_release();
    v32 = a1[3];
    v33 = *(os_unfair_lock_s **)(v32 + 16);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v33);
    v34 = a1[2];
    v35 = type metadata accessor for Completions();
    v36 = swift_allocObject(v35, 24, 7);
    *(_QWORD *)(v36 + 16) = _swiftEmptyArrayStorage;
    a1[2] = v36;
    v37 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state);
    *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state) = 3;
    sub_1000C4E10(v37);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 16));
    swift_release();
    swift_release();
    if (v31)
    {
      swift_retain_n(a1, 2);
      sub_1000C2080(v31, 1);
      swift_retain();
      sub_1000C2080(v31, 1);
      swift_retain();
      v38 = sub_1000C2080(v31, 1);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.default.getter(v39, v40);
      v42 = v41;
      if (os_log_type_enabled(v39, v41))
      {
        v43 = swift_slowAlloc(32, -1);
        LODWORD(v112) = v42;
        v44 = v43;
        v45 = (void **)swift_slowAlloc(96, -1);
        v111 = v45;
        aBlock = v45;
        *(_DWORD *)v44 = 136446723;
        v110 = v39;
        v46 = UUID.uuidString.getter(v45);
        v48 = sub_1000599D0(8, v46, v47);
        v49 = static String._fromSubstring(_:)(v48);
        v115 = v34;
        v50 = v49;
        v52 = v51;
        swift_bridgeObjectRelease();
        v123 = sub_100006FCC(v50, v52, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v44 + 4);
        swift_release_n(a1, 2);
        v53 = swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2081;
        v54 = v120;
        v55 = v121;
        v56 = v122;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v121 + 16))(v120, (uint64_t)a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v122, v53);
        sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
        v60 = v59;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
        v123 = sub_100006FCC(v58, v60, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v44 + 14);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 22) = 2082;
        v123 = v31;
        swift_errorRetain(v31);
        v61 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
        v62 = String.init<A>(describing:)(&v123, v61);
        v123 = sub_100006FCC(v62, v63, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v44 + 24);
        v34 = v115;
        swift_bridgeObjectRelease();
        sub_100013530(v31, 1);
        sub_100013530(v31, 1);
        v39 = v110;
        _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v112, "%{public}s: archive source failed: url=%{private}s error=%{public}s", (uint8_t *)v44, 0x20u);
        v64 = v111;
        swift_arrayDestroy(v111, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {
        swift_release_n(a1, 4);
        sub_100013530(v31, 1);
        sub_100013530(v31, 1);
      }

      v88 = v113;
      v89 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
      v122 = static OS_dispatch_queue.main.getter(v89);
      v90 = swift_allocObject(&unk_10028A490, 32, 7);
      *(_QWORD *)(v90 + 16) = v34;
      *(_QWORD *)(v90 + 24) = v31;
      v128 = sub_1000D91AC;
      v129 = v90;
      aBlock = _NSConcreteStackBlock;
      v125 = 1107296256;
      v126 = sub_10000E610;
      v127 = &unk_10028A4A8;
      v91 = _Block_copy(&aBlock);
      swift_retain();
      sub_1000C2080(v31, 1);
      v92 = swift_release();
      v93 = v116;
      static DispatchQoS.unspecified.getter(v92);
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v95 = v94;
      v96 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
      sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
      v97 = v118;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v96, v98, v88, v95);
      v99 = (void *)v122;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v91);
      _Block_release(v91);

      sub_100013530(v31, 1);
      swift_release();
      sub_100013530(v31, 1);
      v100 = v114;
    }
    else
    {
      v65 = swift_retain_n(a1, 4);
      v66 = Logger.logObject.getter(v65);
      v68 = static os_log_type_t.default.getter(v66, v67);
      v69 = v68;
      if (os_log_type_enabled(v66, v68))
      {
        v70 = swift_slowAlloc(22, -1);
        v71 = (void **)swift_slowAlloc(64, -1);
        v112 = v71;
        aBlock = v71;
        *(_DWORD *)v70 = 136446467;
        LODWORD(v111) = v69;
        v72 = UUID.uuidString.getter(v71);
        v74 = sub_1000599D0(8, v72, v73);
        v75 = static String._fromSubstring(_:)(v74);
        v115 = v34;
        v76 = v75;
        v78 = v77;
        swift_bridgeObjectRelease();
        v123 = sub_100006FCC(v76, v78, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v70 + 4);
        swift_release_n(a1, 2);
        v79 = swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 12) = 2081;
        v80 = v120;
        v81 = v121;
        v82 = v122;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v121 + 16))(v120, (uint64_t)a1 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v122, v79);
        sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v84 = dispatch thunk of CustomStringConvertible.description.getter(v82, v83);
        v86 = v85;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
        v123 = sub_100006FCC(v84, v86, (uint64_t *)&aBlock);
        v34 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &aBlock, v70 + 14);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v111, "%{public}s: archive source complete: url=%{private}s", (uint8_t *)v70, 0x16u);
        v87 = v112;
        swift_arrayDestroy(v112, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v70, -1, -1);

      }
      else
      {

        swift_release_n(a1, 4);
      }
      v88 = v113;
      v100 = v114;
      v101 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
      v122 = static OS_dispatch_queue.main.getter(v101);
      v128 = sub_1000D91CC;
      v129 = v34;
      aBlock = _NSConcreteStackBlock;
      v125 = 1107296256;
      v126 = sub_10000E610;
      v127 = &unk_10028A4D0;
      v102 = _Block_copy(&aBlock);
      swift_retain();
      v103 = swift_release();
      v93 = v116;
      static DispatchQoS.unspecified.getter(v103);
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v105 = v104;
      v106 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
      sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
      v97 = v118;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v106, v107, v88, v105);
      v108 = (void *)v122;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v93, v97, v102);
      _Block_release(v102);
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(v97, v88);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v93, v100);
  }
  a1[4] = CGSize.init(_:);
  a1[5] = 0;
  return swift_release();
}

uint64_t sub_1000D34C4()
{
  return sub_1000C4E9C(0);
}

uint64_t sub_1000D34E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t result;
  char v9;

  v3 = v2;
  v9 = 0;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(os_unfair_lock_s **)(v6 + 16);
  swift_retain();
  sub_1000088D0();
  swift_errorRetain(a1);
  sub_100026AE4();
  os_unfair_lock_lock(v7);
  sub_1000D35A0(v3, a2, a1, &v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 16));
  sub_10000B348();
  swift_release();
  swift_errorRelease(a1);
  result = swift_release();
  if (v9 == 1)
    return Completion.callAsFunction(_:)(a1);
  return result;
}

unint64_t sub_1000D35A0(unint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v10;
  unint64_t v11;

  v5 = result;
  v6 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state;
  v7 = *(_QWORD *)(result + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state);
  if ((unint64_t)(v7 - 1) < 2)
  {
    swift_retain();
    sub_1000C4E20(a2);
    swift_release();
    v10 = *(_QWORD *)(v5 + v6);
    *(_QWORD *)(v5 + v6) = a3;
    swift_errorRetain(a3);
    v11 = v10;
  }
  else
  {
    if (v7)
      v8 = v7 == 3;
    else
      v8 = 1;
    if (v8)
    {
      *a4 = 1;
      return result;
    }
    sub_1000D9148(*(_QWORD *)(result + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state));
    swift_retain();
    sub_1000C4E20(a2);
    swift_release();
    v11 = *(_QWORD *)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v7;
  }
  return sub_1000C4E10(v11);
}

uint64_t sub_1000D3678()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000088D0();
  v1 = sub_10002D790();
  sub_1000C4C44(v1, v0);
  return sub_10002645C();
}

char *sub_1000D36B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = v1;
  v3 = v0;
  v4 = sub_1000268EC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v59 = (char *)&v53 - v9;
  if (qword_1002A98B0 != -1)
    swift_once(&qword_1002A98B0, sub_1000D1634);
  v10 = sub_10000F6E4();
  sub_100006FB4(v10, (uint64_t)qword_1002B00B0);
  v11 = swift_retain_n(v0, 4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  v14 = v13;
  v15 = &unk_1002B0000;
  if (os_log_type_enabled(v12, v13))
  {
    v16 = sub_10000797C(22);
    v17 = sub_10000797C(64);
    v56 = v17;
    v62 = v17;
    *(_DWORD *)v16 = 136446467;
    v54 = v16 + 4;
    v55 = v14;
    v18 = UUID.uuidString.getter(v17);
    sub_100026344(v18, v19);
    v20 = sub_1000602C0();
    v57 = v8;
    v58 = v1;
    v21 = v20;
    v22 = v4;
    v24 = v23;
    sub_10000E420();
    v60 = sub_100006FCC(v21, v24, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v54);
    sub_10000F650(v3);
    v25 = swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2081;
    v54 = v16 + 14;
    v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v27 = v5;
    v28 = v59;
    v26(v59, v3 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v22, v25);
    sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v22, v29);
    v32 = v31;
    v33 = *(void (**)(char *, uint64_t))(v27 + 8);
    v34 = v28;
    v5 = v27;
    v15 = (_QWORD *)&unk_1002B0000;
    v33(v34, v22);
    v60 = sub_100006FCC(v30, v32, &v62);
    v2 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v54);
    sub_10000F650(v3);
    swift_bridgeObjectRelease();
    sub_100026A60((void *)&_mh_execute_header, v12, (os_log_type_t)v55, "%{public}s: archive size started, url=%{private}s", (uint8_t *)v16);
    v35 = v56;
    sub_1000D9518(v36, v37, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v35);
    sub_100007958(v16);

    v4 = v22;
    v8 = v57;
  }
  else
  {

    swift_release_n(v3, 4);
  }
  type metadata accessor for ArchiveReader();
  v38 = v3 + v15[115];
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v39(v8, v38, v4);
  sub_1000D03FC();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    v41 = v40;
    v42 = *(char **)(v5 + 8);
    v58 = v4;
    v56 = v3;
    v57 = v42;
    ((void (*)(char *, uint64_t))v42)(v8, v4);
    v8 = 0;
    v43 = v58;
    while (1)
    {
      sub_1000D07C4();
      if (!v44)
        break;
      v45 = v41;
      v46 = v59;
      v39(v59, v38, v43);
      v47 = sub_1000CFE7C();
      sub_10000B348();
      v48 = v46;
      v41 = v45;
      ((void (*)(char *, uint64_t))v57)(v48, v43);
      if (!v47)
        break;
      sub_1000D3678();
      v49 = sub_1000CFD30();
      swift_release();
      v50 = __CFADD__(v8, v49);
      v8 += v49;
      if (v50)
      {
        __break(1u);
        break;
      }
    }
    swift_retain();
    sub_1000D103C(v51, v41, (uint64_t (*)(_QWORD))&archive_read_close);
    sub_1000955CC();
  }
  return v8;
}

void sub_1000D3AC8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  void (**v44)(char *, char *, uint64_t);
  uint64_t v45;
  NSObject *v46;
  uint64_t *v47;
  dispatch_semaphore_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  char *v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  char *v86;
  __int128 v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  void (**v103)(char *, char *, uint64_t);
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v2 = v1;
  v3 = v0;
  sub_1000055B0(qword_1002ABCC8);
  sub_10000E490();
  __chkstk_darwin(v4);
  v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000268EC();
  v8 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  sub_10003D69C();
  v100 = v9;
  sub_1000A3464();
  __chkstk_darwin(v10);
  v101 = (char *)&v85 - v11;
  sub_1000A3464();
  __chkstk_darwin(v12);
  v103 = (void (**)(char *, char *, uint64_t))((char *)&v85 - v13);
  sub_1000A3464();
  __chkstk_darwin(v14);
  v102 = (uint64_t)&v85 - v15;
  if (qword_1002A98B0 != -1)
    swift_once(&qword_1002A98B0, sub_1000D1634);
  v16 = sub_10000F6E4();
  v17 = sub_100006FB4(v16, (uint64_t)qword_1002B00B0);
  v18 = swift_retain_n(v3, 4);
  v99 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  LODWORD(v104) = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v21 = sub_10000797C(22);
    v98 = v6;
    v22 = v21;
    v23 = sub_10000797C(64);
    v96 = v23;
    v107 = v23;
    *(_DWORD *)v22 = 136446467;
    v24 = v7;
    v25 = UUID.uuidString.getter(v23);
    sub_100026344(v25, v26);
    v27 = sub_1000602C0();
    v97 = v1;
    v28 = v3;
    v29 = v27;
    v30 = v8;
    v32 = v31;
    sub_10000E420();
    v105 = sub_100006FCC(v29, v32, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v22 + 4);
    sub_10000F650(v28);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2081;
    v95 = (uint64_t *)(v22 + 14);
    v33 = v102;
    sub_1000D9504(v102, v28 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v30[2]);
    sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v7, v34);
    v37 = v36;
    ((void (*)(uint64_t, uint64_t))v30[1])(v33, v24);
    v105 = sub_100006FCC(v35, v37, &v107);
    v3 = v28;
    v2 = v97;
    v8 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v95);
    sub_10000F650(v3);
    v7 = v24;
    swift_bridgeObjectRelease();
    sub_100026A60((void *)&_mh_execute_header, v19, (os_log_type_t)v104, "%{public}s: archive source driver started, url=%{private}s", (uint8_t *)v22);
    v38 = v96;
    sub_1000D9518(v39, v40, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v38);
    v41 = v22;
    v6 = v98;
    sub_100007958(v41);

  }
  else
  {

    swift_release_n(v3, 4);
  }
  type metadata accessor for ArchiveReader();
  v42 = v3 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url;
  v43 = v8[2];
  v44 = v103;
  v45 = sub_1000D95F8();
  ((void (*)(uint64_t))v43)(v45);
  sub_1000D03FC();
  v104 = v46;
  if (v2)
  {
    ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v8[1])(v44, v7);
  }
  else
  {
    v96 = v42;
    v97 = v43;
    sub_1000D94BC();
    type metadata accessor for ArchiveWriter();
    v47 = sub_1000D0A4C(2);
    v103 = (void (**)(char *, char *, uint64_t))v8;
    v48 = dispatch_semaphore_create(0);
    v49 = sub_1000088D8((uint64_t)&unk_10028A3C8, 32);
    *(_QWORD *)(v49 + 16) = v3;
    *(_QWORD *)(v49 + 24) = v48;
    v47[3] = (uint64_t)sub_1000D909C;
    v47[4] = v49;
    swift_retain();
    v50 = v48;
    sub_10000B348();
    v51 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_id;
    sub_1000D9634();
    v53 = v52;
    v85 = v50;
    v95 = v47;
    v89 = v3 + v51;
    v88 = &v106;
    *(_QWORD *)&v54 = 136446467;
    v87 = v54;
    v86 = (char *)&type metadata for Any + 8;
    v98 = v6;
    v94 = v3;
    while (v53)
    {
      v97(v102, v96, v7);
      v55 = sub_1000CFE7C();
      sub_10000B348();
      sub_1000D94BC();
      if (!v55)
        break;
      sub_1000CFD4C((uint64_t)v6);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v6, 1, v7) == 1)
      {
        sub_10000B364();
        sub_100048AE8((uint64_t)v6);
      }
      else
      {
        v56 = v101;
        v103[4](v101, v6, v7);
        sub_1000D3678();
        v97(v100, (uint64_t)v56, v7);
        v57 = sub_1000404AC(v3);
        v58 = Logger.logObject.getter(v57);
        v59 = static os_log_type_t.info.getter();
        v60 = v59;
        if (os_log_type_enabled(v58, v59))
        {
          v61 = sub_10000797C(22);
          v62 = sub_10000797C(64);
          v92 = v58;
          v93 = v62;
          v107 = v62;
          *(_DWORD *)v61 = v87;
          v90 = v61 + 4;
          v63 = UUID.uuidString.getter(v62);
          sub_100026344(v63, v64);
          v65 = sub_1000602C0();
          v91 = v60;
          v66 = v7;
          v67 = v65;
          v69 = v68;
          sub_10000E420();
          v70 = v67;
          v7 = v66;
          v105 = sub_100006FCC(v70, v69, &v107);
          v71 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v88, v90);
          sub_10000F650(v94);
          v3 = v94;
          swift_bridgeObjectRelease();
          *(_WORD *)(v61 + 12) = 2081;
          v90 = v61 + 14;
          sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v73 = dispatch thunk of CustomStringConvertible.description.getter(v7, v72);
          v105 = sub_100006FCC(v73, v74, &v107);
          v75 = v71;
          v76 = v101;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v75, v90);
          sub_10000E420();
          sub_1000D9594();
          v77 = v92;
          sub_100026A60((void *)&_mh_execute_header, v92, (os_log_type_t)v91, "%{public}s: archiving: url=%{private}s", (uint8_t *)v61);
          v78 = v93;
          swift_arrayDestroy(v93, 2, v86);
          sub_100007958(v78);
          v79 = v61;
          v6 = v98;
          sub_100007958(v79);

        }
        else
        {
          sub_10000F650(v3);
          sub_1000D9594();

          v76 = v101;
        }
        __chkstk_darwin(v80);
        v81 = v104;
        *(&v85 - 6) = v55;
        *(&v85 - 5) = v81;
        *(&v85 - 4) = v76;
        *(&v85 - 3) = v3;
        *(&v85 - 2) = v95;
        sub_1000D11B4(v55, (void (*)(uint64_t))sub_1000D90B4);
        sub_1000D94BC();
        sub_10000B364();
      }
      sub_1000D9634();
      v53 = v82;
    }
    sub_1000D954C();
    v83 = (uint64_t)v95;
    v84 = sub_10002D790();
    sub_1000D103C(v84, v83, (uint64_t (*)(_QWORD))&archive_write_close);
    swift_release();
    swift_release();
  }
  sub_10003AF60();
}

unint64_t sub_1000D42A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, unint64_t, Swift::Int (*)(uint64_t), _QWORD *);
  _QWORD *v45;
  void *v46;
  id v48;
  uint64_t v49;
  int v50;
  os_log_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56[3];
  uint64_t v57;
  uint64_t v58;

  v5 = v4;
  v55 = a4;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
    v13 = a2 - a1;
  else
    v13 = 0;
  v14 = sub_1000D47A8(a1, v13);
  v16 = v15;
  if (qword_1002A98B0 != -1)
    swift_once(&qword_1002A98B0, sub_1000D1634);
  v17 = type metadata accessor for Logger(0);
  sub_100006FB4(v17, (uint64_t)qword_1002B00B0);
  swift_retain_n(a3, 3);
  sub_10002517C(v14, v16);
  swift_retain();
  v18 = sub_10002517C(v14, v16);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc(32, -1);
    v54 = v4;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v52 = v24;
    v56[0] = v24;
    *(_DWORD *)v23 = 136446723;
    v49 = v23 + 4;
    v51 = v19;
    v25 = UUID.uuidString.getter(v24);
    v27 = sub_1000599D0(8, v25, v26);
    v28 = static String._fromSubstring(_:)(v27);
    v50 = v21;
    v29 = v10;
    v30 = v28;
    v53 = v16;
    v31 = v9;
    v33 = v32;
    swift_bridgeObjectRelease();
    v57 = sub_100006FCC(v30, v33, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v49);
    swift_release_n(a3, 2);
    v34 = swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2081;
    v49 = v23 + 14;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v12, a3 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url, v31, v34);
    sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v31, v35);
    v38 = v37;
    v39 = v31;
    v16 = v53;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v39);
    v57 = sub_100006FCC(v36, v38, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v49);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2048;
    v40 = Data.count.getter(v14, v16);
    sub_100022AEC(v14, v16);
    v57 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v23 + 24);
    sub_100022AEC(v14, v16);
    v19 = v51;
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v50, "%{public}s: writing archive chunk: url=%{private}s bytes=%ld", (uint8_t *)v23, 0x20u);
    v41 = v52;
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v42 = v23;
    v5 = v54;
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_100022AEC(v14, v16);
    swift_release_n(a3, 4);
    sub_100022AEC(v14, v16);
  }

  sub_1000D3678();
  if (!v5)
  {
    v43 = swift_allocObject(&unk_10028A3F0, 24, 7);
    *(_QWORD *)(v43 + 16) = Data.count.getter(v14, v16);
    v44 = *(void (**)(uint64_t, unint64_t, Swift::Int (*)(uint64_t), _QWORD *))(a3 + 32);
    v45 = (_QWORD *)swift_allocObject(&unk_10028A418, 40, 7);
    v45[2] = a3;
    v45[3] = v43;
    v46 = v55;
    v45[4] = v55;
    swift_retain();
    swift_retain();
    swift_retain();
    v46;
    v44(v14, v16, sub_1000D9108, v45);
    swift_release();
    swift_release();
    OS_dispatch_semaphore.wait()();
    swift_beginAccess(v43 + 16, v56, 0, 0);
    if (*(_QWORD *)(v43 + 16) != -1)
    {
      sub_100022AEC(v14, v16);
      v16 = *(_QWORD *)(v43 + 16);
      swift_release();
      return v16;
    }
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v48 = NSError.init(NSPOSIXErrorDomain:debugDescription:__file:__line:)(5, 0xD00000000000001ALL, 0x8000000100256E80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/Glue/Archive.swift", 77, 2, 576);
    swift_willThrow(v48);
    swift_release();
  }
  sub_100022AEC(v14, v16);
  return v16;
}

uint64_t sub_1000D47A8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      if (a2 <= 14)
      {
        return Data.InlineData.init(_:)(result, result + a2);
      }
      else
      {
        v4 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
        __DataStorage.init(bytes:length:)(v3, a2);
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          v5 = type metadata accessor for Data.RangeReference(0);
          result = swift_allocObject(v5, 32, 7);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = a2;
        }
        else
        {
          return a2 << 32;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

Swift::Int sub_1000D4860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25[3];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v6 = (_QWORD *)(a3 + 16);
    v7 = type metadata accessor for Logger(0);
    sub_100006FB4(v7, (uint64_t)qword_1002B00B0);
    swift_errorRetain(a1);
    swift_retain();
    swift_errorRetain(a1);
    swift_retain();
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v25[0] = v13;
      *(_DWORD *)v12 = 136446466;
      v14 = UUID.uuidString.getter(v13);
      v16 = sub_1000599D0(8, v14, v15);
      v17 = static String._fromSubstring(_:)(v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      v24 = sub_100006FCC(v17, v19, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v12 + 4);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v24 = a1;
      swift_errorRetain(a1);
      v20 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
      v21 = String.init<A>(describing:)(&v24, v20);
      v24 = sub_100006FCC(v21, v22, v25);
      v6 = (_QWORD *)(a3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v12 + 14);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "%{public}s: error during archive write: error=%{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_release_n(a2, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    swift_beginAccess(v6, v25, 1, 0);
    *v6 = -1;
  }
  return OS_dispatch_semaphore.signal()();
}

void sub_1000D4B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, __n128);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_t v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v75 = a3;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v59 - v14;
  swift_retain();
  v17 = sub_1000CFA80(v16);
  if (v17 == 4)
  {
    v74 = v13;
    sub_1000078E0(0, &qword_1002AA6B8, NSFileHandle_ptr);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v19(v15, v75, v9);
    v20 = sub_1000D5080((uint64_t)v15, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
    if (!v5)
    {
      v21 = v20;
      v66 = v9;
      v67 = (void (*)(char *, uint64_t, uint64_t, __n128))v19;
      v68 = v10;
      v69 = a5;
      v75 = a4;
      v22 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_url;
      v23 = OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_id;
      v24 = objc_autoreleasePoolPush();
      v25 = NSFileHandle.read(upToCount:)(0x40000);
      v27 = v26;
      v64 = v75 + v22;
      v28 = v75 + v23;
      v29 = v75;
      v62 = &v77;
      v63 = v28;
      *(_QWORD *)&v30 = 136446723;
      v61 = v30;
      v60 = (char *)&type metadata for Any + 8;
      v65 = v21;
      while (1)
      {
        objc_autoreleasePoolPop(v24);
        if (v27 >> 60 == 15)
          break;
        if (qword_1002A98B0 != -1)
          swift_once(&qword_1002A98B0, sub_1000D1634);
        v31 = type metadata accessor for Logger(0);
        sub_100006FB4(v31, (uint64_t)qword_1002B00B0);
        swift_retain_n(v29, 3);
        sub_100025168(v25, v27);
        swift_retain();
        v32 = sub_100025168(v25, v27);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.info.getter();
        v35 = v34;
        if (os_log_type_enabled(v33, v34))
        {
          v36 = swift_slowAlloc(32, -1);
          v73 = v35;
          v37 = v36;
          v38 = swift_slowAlloc(64, -1);
          v71 = v33;
          v72 = v38;
          v78 = v38;
          *(_DWORD *)v37 = v61;
          v39 = UUID.uuidString.getter(v38);
          v41 = sub_1000599D0(8, v39, v40);
          v42 = static String._fromSubstring(_:)(v41);
          v44 = v43;
          swift_bridgeObjectRelease();
          v76 = sub_100006FCC(v42, v44, &v78);
          v45 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v62, v37 + 4);
          swift_release_n(v75, 2);
          v46 = v74;
          v47 = swift_bridgeObjectRelease();
          *(_WORD *)(v37 + 12) = 2081;
          v70 = v37 + 14;
          v48 = v66;
          v67(v46, v64, v66, v47);
          sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
          v52 = v51;
          v53 = v46;
          v21 = v65;
          (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v48);
          v76 = sub_100006FCC(v50, v52, &v78);
          v54 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v45, v70);
          swift_release_n(v75, 2);
          v29 = v75;
          swift_bridgeObjectRelease();
          *(_WORD *)(v37 + 22) = 2048;
          v55 = Data.count.getter(v25, v27);
          sub_100022AD8(v25, v27);
          v76 = v55;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v54, v37 + 24);
          sub_100022AD8(v25, v27);
          v33 = v71;
          _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v73, "%{public}s: archive read: url=%{private}s bytes=%ld", (uint8_t *)v37, 0x20u);
          v56 = v72;
          swift_arrayDestroy(v72, 2, v60);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v37, -1, -1);
        }
        else
        {
          sub_100022AD8(v25, v27);
          swift_release_n(v29, 4);
          sub_100022AD8(v25, v27);
        }

        sub_1000D3678();
        v57 = objc_autoreleasePoolPush();
        sub_1000D121C(v25, v27);
        objc_autoreleasePoolPop(v57);
        sub_100022AD8(v25, v27);
        v24 = objc_autoreleasePoolPush();
        v25 = NSFileHandle.read(upToCount:)(0x40000);
        v27 = v58;
      }

    }
  }
  else if (v17 == 2)
  {
    swift_retain();
    sub_1000D103C(v18, a2, (uint64_t (*)(_QWORD))&archive_read_disk_descend);
  }
}

id sub_1000D5080(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v17;

  v4 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v7 = v6;
  v17 = 0;
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), *a2, v6, &v17);

  v9 = v17;
  if (v8)
  {
    v10 = sub_1000268EC();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v17;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14);
    v15 = sub_1000268EC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v8;
}

void sub_1000D518C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100026600();
  sub_1000265F8();
  swift_release();
  v1 = sub_10000E440();
  sub_10002666C(v1);

  sub_1000C4E10(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent21ArchiveTransferSource_state));
  v2 = sub_1000268EC();
  sub_10002666C(v2);
  sub_1000050D4();
}

uint64_t sub_1000D51FC()
{
  return sub_1000936C8(sub_1000D518C);
}

uint64_t sub_1000D5208()
{
  return type metadata accessor for ArchiveTransferSource(0);
}

uint64_t type metadata accessor for ArchiveTransferSource(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B03C8, (uint64_t)&nominal type descriptor for ArchiveTransferSource);
}

uint64_t sub_1000D5224(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[2] = (char *)&value witness table for () + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5] = "\b";
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 7, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1000D52E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_10000E440();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000601B4();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_id, v2);
  v5 = UUID.uuidString.getter(v4);
  v7 = v6;
  sub_100060064(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v8 = sub_1000599D0(8, v5, v7);
  v9 = static String._fromSubstring(_:)(v8);
  swift_bridgeObjectRelease();
  return v9;
}

void sub_1000D539C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  sub_10002626C();
  v3 = v0;
  v47 = v4;
  v48 = v5;
  v45 = v6;
  v46 = v7;
  v43 = v8;
  v44 = v9;
  v42 = v10;
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_10002641C();
  v15 = v14 - v13;
  v16 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_10000E490();
  __chkstk_darwin(v17);
  v18 = sub_1000D9530();
  type metadata accessor for DispatchQoS(v18);
  sub_10000E490();
  __chkstk_darwin(v19);
  sub_1000601B4();
  v20 = OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_completions;
  v21 = type metadata accessor for Completions();
  v22 = sub_1000088D8(v21, 24);
  *(_QWORD *)(v22 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + v20) = v22;
  v23 = OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_dataQueue;
  v24 = sub_1000055B0(&qword_1002B0848);
  sub_1000088D8(v24, 40);
  *(_QWORD *)(v3 + v23) = sub_1000D15B0();
  *(_BYTE *)(v3 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_state) = 0;
  v25 = OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_queue;
  v26 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v26);
  v49 = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC980, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = v27;
  v29 = sub_10003B038();
  sub_1000D95A4((unint64_t *)&unk_1002AC990);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v29, v30, v16, v28);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v40);
  *(_QWORD *)(v3 + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002FLL, 0x8000000100256F90, v1, v2, v15, 0);
  v31 = v3 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_id;
  v32 = sub_10000E440();
  v41 = *(_QWORD *)(v32 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v31, v42, v32);
  v33 = v3 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_outputMode;
  v34 = sub_1000268EC();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v33, v43, v34);
  v36 = type metadata accessor for ArchiveTransferDestination.Mode(0);
  swift_storeEnumTagMultiPayload(v33, v36, 1);
  v37 = type metadata accessor for Completion();
  sub_1000088D8(v37, 48);
  sub_10000AE54(v44, v45);
  v38 = Completion.init(file:line:body:)(v46, v47, v48, v44, v45);
  sub_1000088D0();
  sub_1000C4E20((uint64_t)v38);
  swift_release();
  sub_10000B348();
  sub_10000B02C(v44, v45);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v43, v34);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v32);
  sub_10000E4E0();
}

void sub_1000D5688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  uint64_t v14;

  sub_10002626C();
  v3 = sub_1000D960C();
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_1000D945C();
  sub_1000D94F0();
  __chkstk_darwin(v5);
  sub_10000E478();
  v6 = *(void **)(v0 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_queue);
  v13[5] = sub_1000D903C;
  v14 = v0;
  v13[1] = _NSConcreteStackBlock;
  v13[2] = 1107296256;
  v7 = sub_1000D9558((uint64_t)sub_10000E610);
  v8 = v6;
  sub_1000600C0();
  sub_1000D95C8();
  v13[0] = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v10 = v9;
  v11 = sub_10003B038();
  sub_1000D95A4((unint64_t *)&qword_1002AA6D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v13, v11, v12, v3, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v7);
  _Block_release(v7);

  sub_1000D9488();
  sub_1000D94C8();
  sub_1000D95D0();
  sub_10000E4E0();
}

uint64_t sub_1000D57DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t aBlock[7];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v6);
  v10 = OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_state;
  if (!*(_BYTE *)(a1 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_state))
  {
    v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = v9;
    v42 = v2;
    v43 = result;
    v41 = v3;
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v44 = v5;
    v11 = type metadata accessor for Logger(0);
    sub_100006FB4(v11, (uint64_t)qword_1002B00B0);
    v12 = swift_retain_n(a1, 2);
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.default.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      aBlock[0] = v17;
      *(_DWORD *)v16 = 136446210;
      v18 = sub_1000D52E4();
      v47 = sub_100006FCC(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v16 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%{public}s: starting archive destination", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    *(_BYTE *)(a1 + v10) = 1;
    swift_retain();
    sub_1000D608C();
    swift_release();
    v20 = swift_retain_n(a1, 2);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      aBlock[0] = v25;
      *(_DWORD *)v24 = 136446210;
      v26 = sub_1000D52E4();
      v47 = sub_100006FCC(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v24 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "%{public}s: archive complete", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v29 = v41;
    v28 = v42;
    v30 = v43;
    v31 = v44;
    v32 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v33 = (void *)static OS_dispatch_queue.main.getter(v32);
    aBlock[4] = (uint64_t)sub_1000D905C;
    aBlock[5] = a1;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E610;
    aBlock[3] = (uint64_t)&unk_10028A390;
    v34 = _Block_copy(aBlock);
    swift_retain();
    v35 = swift_release();
    v36 = v45;
    static DispatchQoS.unspecified.getter(v35);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = v37;
    v39 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v39, v40, v28, v38);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v31, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v36, v30);
  }
  return result;
}

uint64_t sub_1000D5FB4()
{
  sub_1000088D0();
  sub_1000C4E9C(0);
  return swift_release();
}

uint64_t sub_1000D5FE8(uint64_t a1)
{
  sub_1000088D0();
  swift_errorRetain(a1);
  sub_1000D1364();
  sub_10000B348();
  return swift_errorRelease(a1);
}

uint64_t sub_1000D6030(uint64_t a1, unint64_t a2)
{
  sub_1000088D0();
  sub_10002517C(a1, a2);
  sub_1000D1364();
  sub_10000B348();
  return sub_100022AEC(a1, a2);
}

void sub_1000D608C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  double v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  NSString *v81;
  NSNumber v82;
  Class isa;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  double v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  _BYTE v94[4];
  int v95;
  void *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  id v106[4];

  v1 = v0;
  sub_1000055B0(qword_1002ABCC8);
  sub_10000E490();
  __chkstk_darwin(v2);
  v4 = &v94[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1000268EC();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10003D69C();
  v98 = v7;
  sub_1000A3464();
  v9 = __chkstk_darwin(v8);
  v11 = &v94[-v10];
  v12 = __chkstk_darwin(v9);
  v14 = &v94[-v13];
  __chkstk_darwin(v12);
  v16 = &v94[-v15];
  v17 = type metadata accessor for ArchiveTransferDestination.Mode(0);
  sub_10000E490();
  __chkstk_darwin(v18);
  sub_10003D69C();
  v101 = v19;
  sub_1000A3464();
  __chkstk_darwin(v20);
  v22 = &v94[-v21];
  v99 = v1 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_outputMode;
  sub_1000D889C(v1 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_outputMode, (uint64_t)&v94[-v21]);
  v100 = v17;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v17);
  v102 = v6;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1000D9504((uint64_t)v16, (uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v24 = sub_10000F6E4();
    sub_100006FB4(v24, (uint64_t)qword_1002B00B0);
    sub_1000D9504((uint64_t)v14, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    v25 = sub_1000404AC(v1);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v26, v27);
    v29 = v28;
    if (os_log_type_enabled(v26, v28))
    {
      v30 = sub_10000797C(22);
      v103 = v5;
      v31 = v30;
      v96 = (void *)sub_10000797C(64);
      v106[0] = v96;
      *(_DWORD *)v31 = 136446467;
      v95 = v29;
      v32 = sub_1000D52E4();
      v105 = sub_1000D9524(v32, v33);
      v97 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v31 + 4);
      sub_10000F650(v1);
      sub_10000E420();
      *(_WORD *)(v31 + 12) = 2081;
      sub_10000E330(&qword_1002AA530, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v103, v34);
      v105 = sub_1000D9524(v35, v36);
      v11 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v31 + 14);
      sub_10000E420();
      v37 = *(void (**)(_BYTE *, uint64_t))(v102 + 8);
      v37(v14, v103);
      sub_100026A60((void *)&_mh_execute_header, v26, (os_log_type_t)v95, "%{public}s: creating unarchiver: dest=%{private}s", (uint8_t *)v31);
      v38 = (uint64_t)v96;
      sub_1000D9518(v39, v40, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v38);
      v41 = v31;
      v5 = v103;
      sub_100007958(v41);

    }
    else
    {

      v37 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v37(v14, v5);
      sub_10000F650(v1);
    }
    v37(v16, v5);
  }
  else
  {
    swift_release();
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v42 = sub_10000F6E4();
    sub_100006FB4(v42, (uint64_t)qword_1002B00B0);
    v43 = sub_1000404AC(v1);
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.default.getter(v44, v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = sub_10000797C(12);
      v97 = v11;
      v48 = (uint8_t *)v47;
      v49 = (void *)sub_10000797C(32);
      v103 = v5;
      v50 = (uint64_t)v49;
      v106[0] = v49;
      *(_DWORD *)v48 = 136446210;
      v51 = sub_1000D52E4();
      v105 = sub_1000D9524(v51, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v48 + 4);
      sub_10000F650(v1);
      sub_10000E420();
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "%{public}s: creating unarchiver: output=callback", v48, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v53 = v50;
      v5 = v103;
      sub_100007958(v53);
      v54 = (uint64_t)v48;
      v11 = v97;
      sub_100007958(v54);

    }
    else
    {

      sub_10000F650(v1);
    }
  }
  type metadata accessor for ArchiveReader();
  sub_100026AE4();
  v55 = v104;
  v56 = sub_1000D00C4(2, (uint64_t)sub_1000D88E0, v1);
  swift_release();
  if (!v55)
  {
    v57 = objc_msgSend(objc_allocWithZone((Class)NSFileManager), "init");
    sub_1000D9628();
    v59 = v58;
    v104 = v57;
    v60 = v102;
    while (v59)
    {
      sub_1000CFD80((uint64_t)v4);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v5) == 1)
      {
        sub_10000B348();
        sub_100048AE8((uint64_t)v4);
      }
      else
      {
        v61 = sub_1000D95F8();
        sub_1000D9504(v61, v62, v63);
        v64 = objc_autoreleasePoolPush();
        sub_1000D6B60(v1, (uint64_t)v56, (uint64_t)v11, v59, v104);
        objc_autoreleasePoolPop(v64);
        sub_1000D95AC();
        sub_10000B348();
      }
      sub_1000D9628();
      v59 = v65;
    }
    v66 = v101;
    sub_1000D889C(v99, v101);
    if (swift_getEnumCaseMultiPayload(v66, v100) == 1)
    {
      v67 = sub_1000D9504(v98, v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 32));
      URL.path.getter(v67);
      v68 = v60;
      v69 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v70 = swift_bridgeObjectRelease().n128_u64[0];
      v106[0] = 0;
      v71 = v104;
      v72 = objc_msgSend(v104, "attributesOfItemAtPath:error:", v69, v106, v70);

      v73 = v106[0];
      if (v72)
      {
        v103 = v5;
        type metadata accessor for FileAttributeKey(0);
        sub_10000E330(&qword_1002AA808, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10021CDD4);
        v74 = sub_1000D9614();
        v78 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v74, v75, v76, v77);
        v79 = v73;

        v105 = v78;
        v80 = (void *)sub_1000078E0(0, &qword_1002AC398, NSNumber_ptr);
        v81 = NSFileBusy;
        v82.super.super.isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
        v106[3] = v80;
        v106[0] = v82.super.super.isa;
        sub_1000C2A68((uint64_t)v106, v81);
        sub_1000D9614();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v84 = sub_10000E420();
        v85 = v98;
        URL.path.getter(v84);
        v86 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v87 = swift_bridgeObjectRelease().n128_u64[0];
        v106[0] = 0;
        LODWORD(v81) = objc_msgSend(v71, "setAttributes:ofItemAtPath:error:", isa, v86, v106, v87);

        v88 = v106[0];
        if ((_DWORD)v81)
        {
          v89 = v106[0];
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v85, v103);

          sub_1000955CC();
        }
        else
        {
          v92 = v106[0];
          _convertNSErrorToError(_:)(v88);

          swift_willThrow(v93);
          sub_1000955CC();
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v85, v103);
        }
      }
      else
      {
        v90 = v106[0];
        _convertNSErrorToError(_:)(v73);

        swift_willThrow(v91);
        sub_1000955CC();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v98, v5);
      }
    }
    else
    {

      sub_1000955CC();
      sub_1000D7CFC(v66);
    }
  }
  sub_10003AF60();
}

uint64_t sub_1000D6898(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  swift_retain();
  sub_1000D1454(&v19);
  swift_release();
  v2 = v20;
  if ((~v20 & 0x3000000000000000) == 0)
    return 0;
  v3 = v19;
  if ((v20 & 0x2000000000000000) != 0 && v19)
  {
    sub_1000D794C(v19, v20);
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v4 = type metadata accessor for Logger(0);
    sub_100006FB4(v4, (uint64_t)qword_1002B00B0);
    sub_1000D8FF4(v3, v2);
    swift_retain();
    sub_1000D8FF4(v3, v2);
    swift_retain();
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v21 = v10;
      *(_DWORD *)v9 = 136446466;
      v11 = sub_1000D52E4();
      v18 = sub_100006FCC(v11, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      v18 = v3;
      sub_1000D794C(v3, v2);
      v13 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
      v14 = String.init<A>(describing:)(&v18, v13);
      v18 = sub_100006FCC(v14, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 14);
      swift_bridgeObjectRelease();
      sub_1000D8FE0(v3, v2);
      sub_1000D8FE0(v3, v2);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "%{public}s: error during data read, error=%{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
      sub_1000D8FE0(v3, v2);
      sub_1000D8FE0(v3, v2);
    }

    swift_willThrow(v16);
    sub_1000D8FE0(v3, v2);
  }
  return v3;
}

uint64_t sub_1000D6B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(uint64_t, uint64_t, unint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  __n128 v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, unint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  void *v43;
  NSString *v44;
  NSNumber v45;
  _BYTE *v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  unint64_t v62;
  __n128 v63;
  void (*v64)(_BYTE *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __n128 v68;
  _BYTE *v69;
  void (*v70)(_BYTE *, uint64_t);
  void *v71;
  void (*v72)(_BYTE *, uint64_t);
  _BYTE *v73;
  uint64_t v74;
  int v75;
  __n128 v76;
  _BYTE *v77;
  _BYTE *v78;
  void *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  char v85;
  __n128 v86;
  _BYTE *v87;
  uint64_t v88;
  NSURL *v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  NSString v98;
  NSString v99;
  double v100;
  unsigned __int8 v101;
  id v102;
  uint64_t v103;
  NSString v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  NSString v114;
  unsigned __int8 v115;
  void *v116;
  void *v117;
  unsigned int v118;
  id v119;
  id v120;
  _BYTE *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  unsigned __int8 v131;
  id v132;
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  id v138;
  id v139;
  Class isa;
  __n128 v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  NSString v145;
  double v146;
  unsigned int v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[12];
  int v157;
  void *v158;
  uint64_t v159;
  void (*v160)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  void *v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  id v174[4];

  v169 = a5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v164 = &v156[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v168 = &v156[-v14];
  v15 = __chkstk_darwin(v13);
  v163 = &v156[-v16];
  v17 = __chkstk_darwin(v15);
  v167 = &v156[-v18];
  v19 = __chkstk_darwin(v17);
  v166 = &v156[-v20];
  v21 = __chkstk_darwin(v19);
  v170 = &v156[-v22];
  __chkstk_darwin(v21);
  v24 = &v156[-v23];
  v25 = type metadata accessor for ArchiveTransferDestination.Mode(0);
  __chkstk_darwin(v25);
  v27 = (void (**)(uint64_t, uint64_t, unint64_t))&v156[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v165 = a1;
  sub_1000D889C(a1 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_outputMode, (uint64_t)v27);
  if (swift_getEnumCaseMultiPayload(v27, v25) == 1)
  {
    v162 = a2;
    v28 = v10;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v10 + 32))(v24, v27, v9);
    v161 = a4;
    v173 = sub_1000CFBE0();
    v29 = ((uint64_t (*)(void))URL.relativePath.getter)();
    if (v29 == 46 && v30 == 0xE100000000000000)
    {
      v33 = swift_bridgeObjectRelease();
      v35 = v166;
      v34 = v167;
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, 46, 0xE100000000000000, 0);
      v33 = swift_bridgeObjectRelease();
      v35 = v166;
      v34 = v167;
      if ((v32 & 1) == 0)
      {
        v36 = URL.relativePath.getter(v33);
        URL.appendingPathComponent(_:)(v36);
        swift_bridgeObjectRelease();
        v37 = v28;
        goto LABEL_12;
      }
    }
    v37 = v28;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v28 + 16))(v170, v24, v9, v33);
    v43 = (void *)sub_1000078E0(0, &qword_1002AC398, NSNumber_ptr);
    v44 = NSFileBusy;
    v45.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    v174[3] = v43;
    v174[0] = v45.super.super.isa;
    sub_1000C2A68((uint64_t)v174, v44);
LABEL_12:
    v167 = v24;
    v46 = v34;
    if (qword_1002A98B0 != -1)
      swift_once(&qword_1002A98B0, sub_1000D1634);
    v47 = type metadata accessor for Logger(0);
    sub_100006FB4(v47, (uint64_t)qword_1002B00B0);
    v48 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v37 + 16);
    v48(v35, a3, v9);
    v49 = v170;
    v160 = (void (*)(_BYTE *, _BYTE *, uint64_t))v48;
    v48(v46, (uint64_t)v170, v9);
    v50 = v165;
    v51 = swift_retain_n(v165, 2);
    v52 = Logger.logObject.getter(v51);
    v54 = static os_log_type_t.default.getter(v52, v53);
    v55 = v54;
    if (os_log_type_enabled(v52, v54))
    {
      v56 = swift_slowAlloc(32, -1);
      v159 = a3;
      v57 = v56;
      v158 = (void *)swift_slowAlloc(96, -1);
      v174[0] = v158;
      *(_DWORD *)v57 = 136446723;
      v166 = (_BYTE *)v9;
      v157 = v55;
      v58 = sub_1000D52E4();
      v172 = sub_100006FCC(v58, v59, (uint64_t *)v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v57 + 4);
      swift_release_n(v50, 2);
      v60 = swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2081;
      v61 = URL.relativeString.getter(v60);
      v172 = sub_100006FCC(v61, v62, (uint64_t *)v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v57 + 14);
      v63 = swift_bridgeObjectRelease();
      v64 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
      v65 = ((uint64_t (*)(_BYTE *, _BYTE *, __n128))v64)(v35, v166, v63);
      *(_WORD *)(v57 + 22) = 2081;
      v9 = (uint64_t)v166;
      v66 = URL.path.getter(v65);
      v172 = sub_100006FCC(v66, v67, (uint64_t *)v174);
      v49 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v57 + 24);
      v68 = swift_bridgeObjectRelease();
      v69 = v46;
      v70 = v64;
      ((void (*)(_BYTE *, uint64_t, __n128))v64)(v69, v9, v68);
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v157, "%{public}s: archive entry: src=%{private}s dest=%{private}s", (uint8_t *)v57, 0x20u);
      v71 = v158;
      swift_arrayDestroy(v158, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      swift_release_n(v50, 2);
      v72 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
      v72(v35, v9);
      v73 = v46;
      v70 = v72;
      v72(v73, v9);
    }

    swift_retain();
    v75 = sub_1000CFA80(v74);
    v77 = v167;
    v78 = v168;
    v79 = v169;
    v80 = v162;
    switch(v75)
    {
      case 6:
        v92 = v167;
        swift_bridgeObjectRelease();
        sub_1000CFD58();
        if (!v93)
        {
          v70(v170, v9);
          goto LABEL_40;
        }
        v94 = v170;
        v95 = ((uint64_t (*)(void))URL.absoluteURL.getter)();
        URL.path.getter(v95);
        v96 = v78;
        v97 = (_BYTE *)v9;
        v70(v96, v9);
        v98 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v99 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v100 = swift_bridgeObjectRelease().n128_u64[0];
        v174[0] = 0;
        v101 = objc_msgSend(v79, "createSymbolicLinkAtPath:withDestinationPath:error:", v98, v99, v174, v100);

        v102 = v174[0];
        if ((v101 & 1) != 0)
        {
          v70(v94, (uint64_t)v97);
          v9 = (uint64_t)v97;
          v77 = v92;
          goto LABEL_46;
        }
        v122 = v102;
        v123 = _convertNSErrorToError(_:)(v102);

        v171 = v123;
        swift_willThrow(v124);
        v70(v94, (uint64_t)v97);
        v121 = v92;
        break;
      case 4:
        v92 = v167;
        v103 = ((uint64_t (*)(void))URL.absoluteURL.getter)();
        URL.path.getter(v103);
        v70(v78, v9);
        v104 = String._bridgeToObjectiveC()();
        objc_msgSend(v79, "createFileAtPath:contents:attributes:", v104, 0, 0, swift_bridgeObjectRelease().n128_f64[0]);

        sub_1000078E0(0, &qword_1002AA6B8, NSFileHandle_ptr);
        v105 = (uint64_t)v164;
        v160(v164, v49, v9);
        v106 = v171;
        v107 = sub_1000D5080(v105, (SEL *)&selRef_fileHandleForWritingToURL_error_);
        v171 = v106;
        if (v106)
          goto LABEL_33;
        v108 = v107;
        v109 = objc_msgSend(v107, "fileDescriptor");
        swift_retain();
        v110 = (uint64_t)v109;
        v111 = v171;
        sub_1000D0274(v112, v80, v110);
        v171 = v111;
        if (v111)
        {

LABEL_33:
          v70(v49, v9);
          swift_bridgeObjectRelease();
LABEL_40:
          v121 = v92;
LABEL_48:
          v125 = v9;
          return ((uint64_t (*)(_BYTE *, uint64_t))v70)(v121, v125);
        }
        v166 = (_BYTE *)v9;
        v174[0] = 0;
        v137 = objc_msgSend(v108, "closeAndReturnError:", v174);
        v138 = v174[0];
        if ((v137 & 1) == 0)
        {
          v149 = v174[0];
          swift_bridgeObjectRelease();
          v150 = _convertNSErrorToError(_:)(v138);

          v171 = v150;
          swift_willThrow(v151);

          v152 = v166;
          v70(v170, (uint64_t)v166);
          v121 = v167;
          v125 = (uint64_t)v152;
          return ((uint64_t (*)(_BYTE *, uint64_t))v70)(v121, v125);
        }
        type metadata accessor for FileAttributeKey(0);
        sub_10000E330(&qword_1002AA808, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10021CDD4);
        v139 = v138;
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v141 = swift_bridgeObjectRelease();
        v142 = v170;
        v143 = URL.absoluteURL.getter(v141);
        URL.path.getter(v143);
        v144 = v78;
        v97 = v166;
        v70(v144, (uint64_t)v166);
        v145 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v146 = swift_bridgeObjectRelease().n128_u64[0];
        v174[0] = 0;
        v147 = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", isa, v145, v174, v146);

        v148 = v174[0];
        if (v147)
        {

          v70(v142, (uint64_t)v97);
          v9 = (uint64_t)v97;
          v77 = v167;
          goto LABEL_46;
        }
        v153 = v148;
        v154 = _convertNSErrorToError(_:)(v148);

        v171 = v154;
        swift_willThrow(v155);

        v70(v142, (uint64_t)v97);
        v121 = v167;
        break;
      case 2:
        v81 = v167;
        v82 = URL.relativePath.getter(v76);
        if (v82 == 46 && v83 == 0xE100000000000000)
        {
          v113 = swift_bridgeObjectRelease();
          v87 = v163;
          v88 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t, __n128))v160)(v163, v49, v9, v113);
        }
        else
        {
          v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, 46, 0xE100000000000000, 0);
          v86 = swift_bridgeObjectRelease();
          v87 = v163;
          v88 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t, __n128))v160)(v163, v49, v9, v86);
          if ((v85 & 1) == 0)
          {
            v70(v87, v9);
LABEL_44:
            URL._bridgeToObjectiveC()(v89);
            v130 = (void *)v129;
            v174[0] = 0;
            v131 = sub_1000D8EA0(v129, 0, v173, (uint64_t)v174, v79);

            v132 = v174[0];
            if ((v131 & 1) == 0)
            {
              v134 = v174[0];
              v135 = _convertNSErrorToError(_:)(v132);

              v171 = v135;
              swift_willThrow(v136);
              v70(v49, v9);
              v121 = v81;
              goto LABEL_48;
            }
            v133 = v174[0];
            v70(v49, v9);
            v77 = v81;
            goto LABEL_46;
          }
        }
        URL.path.getter(v88);
        v114 = String._bridgeToObjectiveC()();
        v115 = objc_msgSend(v79, "fileExistsAtPath:", v114, swift_bridgeObjectRelease().n128_f64[0]);

        v70(v87, v9);
        if ((v115 & 1) != 0)
        {
          URL._bridgeToObjectiveC()(v89);
          v117 = v116;
          v174[0] = 0;
          v118 = objc_msgSend(v79, "removeItemAtURL:error:", v116, v174);

          v119 = v174[0];
          if (v118)
          {
            v120 = v174[0];
          }
          else
          {
            v126 = v174[0];
            v127 = _convertNSErrorToError(_:)(v119);

            swift_willThrow(v128);
            swift_errorRelease(v127);
            v171 = 0;
          }
        }
        goto LABEL_44;
      default:
        v70(v49, v9);
        swift_bridgeObjectRelease();
LABEL_46:
        v121 = v77;
        goto LABEL_48;
    }
    v125 = (uint64_t)v97;
    return ((uint64_t (*)(_QWORD, _QWORD))v70)(v121, v125);
  }
  v38 = *v27;
  v39 = v171;
  v40 = sub_1000D0890();
  v171 = v39;
  if (v39)
    return swift_release();
  v90 = v40;
  v91 = v41;
  v38(a3, v40, v41);
  swift_release();
  result = sub_100022AEC(v90, v91);
  v171 = 0;
  return result;
}

void sub_1000D76F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000D7CFC(v0 + OBJC_IVAR____TtC13EnsembleAgent26ArchiveTransferDestination_outputMode);
  swift_release();
  swift_release();
  v1 = sub_10000E440();
  sub_10002666C(v1);

  sub_1000050D4();
}

uint64_t sub_1000D775C()
{
  return sub_1000936C8(sub_1000D76F0);
}

uint64_t sub_1000D7768()
{
  return type metadata accessor for ArchiveTransferDestination(0);
}

uint64_t type metadata accessor for ArchiveTransferDestination(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B05A8, (uint64_t)&nominal type descriptor for ArchiveTransferDestination);
}

uint64_t sub_1000D7784(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for ArchiveTransferDestination.Mode(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_1002235B0;
      v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      result = swift_updateClassMetadata2(a1, 256, 6, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ArchiveTransferDestination.Mode(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B0778, (uint64_t)&nominal type descriptor for ArchiveTransferDestination.Mode);
}

uint64_t sub_1000D7848(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D7894 + 4 * byte_100223470[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D78C8 + 4 * byte_10022346B[v4]))();
}

uint64_t sub_1000D78C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D78D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D78D8);
  return result;
}

uint64_t sub_1000D78E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D78ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D78F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D78F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ArchiveTransferDestination.State()
{
  sub_10003B1DC();
}

uint64_t *sub_1000D7910(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1000D794C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t sub_1000D794C(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_errorRetain(result);
  else
    return sub_10002517C(result, a2);
}

uint64_t sub_1000D7958(uint64_t a1)
{
  return sub_1000D7964(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1000D7964(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_errorRelease(result);
  else
    return sub_100022AEC(result, a2);
}

uint64_t *sub_1000D7970(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1000D794C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000D7964(v5, v6);
  return a1;
}

uint64_t *sub_1000D79B4(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000D7964(v3, v4);
  return a1;
}

uint64_t sub_1000D79EC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2;
    }
    else
    {
      v2 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
      if (v2 >= 2)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_1000D7A38(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_1000D7A80(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_1000D7A8C(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1000D7A9C(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

void type metadata accessor for ArchiveTransferDestination.Message()
{
  sub_10003B1DC();
}

uint64_t *sub_1000D7AC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_retain(v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000D7B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_release(*(_QWORD *)(a1 + 8));
  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_1000D7BCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_retain(v10);
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

_QWORD *sub_1000D7C5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000D7CFC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_1000D7CFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArchiveTransferDestination.Mode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000D7D38(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000D7DC4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000D7CFC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000D7E60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for () + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

_QWORD *sub_1000D7ED4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000D7F10(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *sub_1000D7F28(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

unint64_t *sub_1000D7FB4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t sub_1000D8014(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t sub_1000D8068(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t sub_1000D80C4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000D80DC(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

void type metadata accessor for ArchiveTransferSource.State()
{
  sub_10003B1DC();
}

uint64_t sub_1000D8108(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t *sub_1000D8160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, *(_QWORD *)(a3 + 24)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1000D8230(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return result;
}

void *sub_1000D827C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1000D830C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v5);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_1000D83E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1000D8474(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a1, 1, v5);
  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_1000D854C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 > v7)
  {
    v10 = 8 * v8;
    if (v8 > 3)
      goto LABEL_8;
    v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v8);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v8 > 3)
          v13 = 0;
        if ((_DWORD)v8)
        {
          if (v8 > 3)
            LODWORD(v8) = 4;
          __asm { BR              X12 }
        }
        return v7 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v15 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, v6, v4);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_1000D8678(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8 * v11;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        v6 = &dword_100000004;
      }
      else if (v15 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v15 > 1;
      }
    }
    else
    {
      v6 = &_mh_execute_header.magic + 1;
    }
  }
  if (v9 < a2)
  {
    v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_1000D880C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1000D8814()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1000D8838(uint64_t a1, uint64_t a2)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_1000D8844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for MessageQueue.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageQueue.Value);
}

unint64_t sub_1000D8860()
{
  unint64_t result;

  result = qword_1002B0830;
  if (!qword_1002B0830)
  {
    result = swift_getWitnessTable(&unk_100223638, &unk_10028A1A0);
    atomic_store(result, (unint64_t *)&qword_1002B0830);
  }
  return result;
}

uint64_t sub_1000D889C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArchiveTransferDestination.Mode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D88E0()
{
  uint64_t v0;

  return sub_1000D6898(v0);
}

unint64_t sub_1000D88F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000055B0(&qword_1002AC350);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000D8F94(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_1000D8A20(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100005778(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000D8A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000D8A84(a1, a2, v5);
}

unint64_t sub_1000D8A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1000D8BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = __DataStorage._bytes.getter();
  v8 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_18:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_18;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = *(_QWORD *)(a4 + 16);
  if (v8)
    v14 = v12;
  else
    v14 = 0;
  v15 = archive_write_data(*(_QWORD *)(a4 + 16), v8, v14);
  if (v15 < 0)
  {
    v16 = archive_errno(v13);
    v17 = archive_error_string(v13);
    if (v17)
    {
      v18 = String.init(cString:)(v17);
      v20 = v19;
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v21 = sub_1000D8F58();
    v22 = swift_allocError(&unk_10028A650, v21, 0, 0);
    *(_DWORD *)v23 = v16;
    *(_QWORD *)(v23 + 8) = v18;
    *(_QWORD *)(v23 + 16) = v20;
    swift_willThrow(v22);
  }
  swift_release();
  return v15;
}

uint64_t sub_1000D8CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a4 + 16);
  if (!a1)
    a3 = 0;
  v5 = archive_write_data(*(_QWORD *)(a4 + 16), a1, a3);
  if (v5 < 0)
  {
    v6 = archive_errno(v4);
    v7 = archive_error_string(v4);
    if (v7)
    {
      v8 = String.init(cString:)(v7);
      v10 = v9;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    v11 = sub_1000D8F58();
    v12 = swift_allocError(&unk_10028A650, v11, 0, 0);
    *(_DWORD *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 16) = v10;
    swift_willThrow(v12);
  }
  swift_release();
  return v5;
}

uint64_t sub_1000D8D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_1000D9278, a3, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v5 = _StringObject.sharedUTF8.getter(a1, a2);
    }
    sub_1000D8E80(v5, v6, (uint64_t (*)(void))sub_1000D9278);
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  archive_entry_set_pathname_utf8(*(_QWORD *)(a3 + 16), v8);
  return swift_release();
}

uint64_t sub_1000D8E80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

id sub_1000D8EA0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa;
  id v10;

  type metadata accessor for FileAttributeKey(0);
  sub_10000E330(&qword_1002AA808, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10021CDD4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a5, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", a1, a2 & 1, isa, a4, swift_bridgeObjectRelease().n128_f64[0]);

  return v10;
}

unint64_t sub_1000D8F58()
{
  unint64_t result;

  result = qword_1002B0838;
  if (!qword_1002B0838)
  {
    result = swift_getWitnessTable(&unk_100223698, &unk_10028A650);
    atomic_store(result, (unint64_t *)&qword_1002B0838);
  }
  return result;
}

uint64_t sub_1000D8F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AC358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D8FE0(uint64_t result, unint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_1000D7964(result, a2);
  return result;
}

uint64_t sub_1000D8FF4(uint64_t result, unint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_1000D794C(result, a2);
  return result;
}

Swift::Int sub_1000D9008(uint64_t a1, uint64_t a2)
{
  return sub_1000D13B4(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

Swift::Int sub_1000D9024()
{
  uint64_t v0;

  return sub_1000D9008(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D903C()
{
  uint64_t v0;

  return sub_1000D57DC(v0);
}

uint64_t sub_1000D9044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D9054(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D905C()
{
  return sub_1000D5FB4();
}

uint64_t sub_1000D9074()
{
  uint64_t v0;

  sub_100026600();

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000D909C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D42A0(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_1000D90B4()
{
  uint64_t *v0;

  sub_1000D4B20(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000D90D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D90E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100026600();
  sub_1000265F8();

  v1 = sub_1000D9478();
  return swift_deallocObject(v1, v2, v3);
}

Swift::Int sub_1000D9108(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D4860(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D9114@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = archive_read_disk_open(*(_QWORD *)(v2 + 16), a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000D9148(unint64_t result)
{
  if (result >= 4)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1000D9158()
{
  return sub_1000D9178((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000D9164()
{
  uint64_t v0;

  return sub_1000D296C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D916C()
{
  return sub_1000D9178((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1000D9178(void (*a1)(_QWORD))
{
  uint64_t v1;

  sub_100026600();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

void sub_1000D91AC()
{
  uint64_t v0;

  sub_1000C4E9C(*(_QWORD *)(v0 + 24));
  sub_1000050D4();
}

uint64_t sub_1000D91CC()
{
  return sub_1000D34C4();
}

uint64_t sub_1000D91D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100026600();
  sub_100026A7C();
  v0 = sub_1000D9478();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000D91F0()
{
  uint64_t *v0;

  sub_1000D1A04(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000D91FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000265F8();
  v0 = sub_1000D9478();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000D9214()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
  sub_1000050D4();
}

uint64_t sub_1000D923C()
{
  uint64_t v0;

  sub_1000265F8();
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D926C()
{
  uint64_t v0;

  return sub_1000D27E8(*(void (**)(uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000D9278(uint64_t a1)
{
  uint64_t v1;

  return archive_entry_set_pathname_utf8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t destroy for HIDAccelerationTable(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

void sub_1000D92B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  sub_1000050D4();
}

uint64_t sub_1000D92E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000D9328(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VibrantAppearance(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VibrantAppearance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for ArchiveError()
{
  sub_10003B1DC();
}

uint64_t sub_1000D945C()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_1000D9478()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D9488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1000D949C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_1000D94BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000D94C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D94D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v0, v2);
}

uint64_t sub_1000D9504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_1000D950C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  return swift_willThrow(a1);
}

uint64_t sub_1000D9518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 2, a3);
}

uint64_t sub_1000D9524(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t sub_1000D9530()
{
  return 0;
}

void sub_1000D954C()
{
  uint64_t v0;

}

void *sub_1000D9558@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

void sub_1000D9564(uint64_t a1, ...)
{
  void *v1;
  va_list va;

  va_start(va, a1);
  sub_1000C2A68((uint64_t)va, v1);
}

uint64_t sub_1000D9574()
{
  return URL.path.getter();
}

uint64_t sub_1000D9594()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_1000D95A4(unint64_t *a1)
{
  uint64_t *v1;

  sub_10006D048(a1, v1);
}

uint64_t sub_1000D95AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000D95BC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000D95C8()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_1000D95D0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 88));
}

uint64_t sub_1000D95D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000D8BC8(a1, a2, a3, v3);
}

uint64_t sub_1000D95E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D95F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000D9604()
{
  return URL.path.getter();
}

uint64_t sub_1000D960C()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_1000D9614()
{
  uint64_t v0;

  return v0;
}

void sub_1000D9628()
{
  sub_1000D07C4();
}

void sub_1000D9634()
{
  sub_1000D07C4();
}

uint64_t PropertyListTypeDecoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  id v12[5];
  uint64_t v13[2];
  uint64_t v14;

  if ((_UNKNOWN *)a1 == &type metadata for Data
    && (sub_1000DF4E8(a1, (uint64_t)v13),
        v7 = sub_1000078E0(0, (unint64_t *)&qword_1002B0850, NSData_ptr),
        a1 = swift_dynamicCast(v12, v13, (char *)&type metadata for Any + 8, v7, 6),
        (a1 & 1) != 0))
  {

    sub_1000DF4E8(v8, (uint64_t)v13);
    return swift_dynamicCast(a4, v13, (char *)&type metadata for Any + 8, a2, 7);
  }
  else
  {
    sub_1000DF4E8(a1, (uint64_t)&v14);
    v10 = type metadata accessor for CodingUserInfoKey(0);
    v11 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v10, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
    v13[0] = (uint64_t)_swiftEmptyArrayStorage;
    v13[1] = v11;
    v12[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
    v12[4] = (id)sub_100089EF4();
    v12[0] = (id)swift_allocObject(&unk_10028A6E8, 64, 7);
    sub_100089F64(v13, (uint64_t *)v12[0] + 2);
    dispatch thunk of Decodable.init(from:)(v12, a2, a3);
    return sub_100089FA0((uint64_t)v13);
  }
}

uint64_t sub_1000D97A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100005988((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t PropertyListTypeEncoder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PropertyListTypeEncoder.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PropertyListTypeDecoder()
{
  return objc_opt_self(_TtC13EnsembleAgent23PropertyListTypeDecoder);
}

uint64_t destroy for PropertyListTypeDecoder.RootDecoder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100005988((_QWORD *)(a1 + 16));
}

uint64_t *initializeWithCopy for PropertyListTypeDecoder.RootDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(uint64_t *, _QWORD *, uint64_t);

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2 + 2;
  v6 = a2[5];
  a1[5] = v6;
  v7 = **(void (***)(uint64_t *, _QWORD *, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v7(a1 + 2, v5, v6);
  return a1;
}

_QWORD *assignWithCopy for PropertyListTypeDecoder.RootDecoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000D9918(a1 + 2, a2 + 2);
  return a1;
}

_QWORD *sub_1000D9918(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for PropertyListTypeDecoder.RootDecoder(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  sub_100005988((_QWORD *)(a1 + 16));
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDReportAccumulator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDReportAccumulator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.RootDecoder()
{
  return &type metadata for PropertyListTypeDecoder.RootDecoder;
}

uint64_t sub_1000D9B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];

  v1 = sub_1000078E0(0, &qword_1002B0910, NSDictionary_ptr);
  sub_100007918(v0 + 16, (uint64_t)v9);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v1, 6) & 1) != 0)
    return v8;
  v3 = type metadata accessor for DecodingError(0);
  swift_allocError(v3, &protocol witness table for DecodingError, 0, 0);
  v5 = v4;
  sub_1000055B0(&qword_1002ABBD0);
  *v5 = v1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v6, 0, 0xE000000000000000, 0);
  v7 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v5, enum case for DecodingError.typeMismatch(_:), v3);
  return swift_willThrow(v7);
}

uint64_t sub_1000D9C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  _QWORD v11[2];

  result = sub_1000D9B68();
  if (!v4)
  {
    v11[0] = *v3;
    v11[1] = result;
    v9 = type metadata accessor for PropertyListTypeDecoder.KeyedDecoder(0, a2, a3, v8);
    swift_bridgeObjectRetain();
    WitnessTable = swift_getWitnessTable(&unk_100223878, v9);
    return KeyedDecodingContainer.init<A>(_:)(v11, a2, v9, WitnessTable);
  }
  return result;
}

void sub_1000D9D08(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v3 = sub_1000078E0(0, &qword_1002B0900, NSArray_ptr);
  sub_100007918((uint64_t)(v1 + 2), (uint64_t)v11);
  if ((swift_dynamicCast(&v12, v11, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
  {
    v4 = v12;
    v5 = *v1;
    a1[3] = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
    a1[4] = sub_1000DB098();
    *a1 = v5;
    a1[1] = 0;
    a1[2] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = type metadata accessor for DecodingError(0);
    swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
    v8 = v7;
    sub_1000055B0(&qword_1002ABBD0);
    *v8 = v3;
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v9, 0, 0xE000000000000000, 0);
    v10 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v8, enum case for DecodingError.typeMismatch(_:), v6);
    swift_willThrow(v10);
  }
}

uint64_t *sub_1000D9E44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  a1[3] = (uint64_t)&type metadata for PropertyListTypeDecoder.RootDecoder;
  a1[4] = sub_1000DB05C();
  v3 = swift_allocObject(&unk_10028A6E8, 64, 7);
  *a1 = v3;
  return sub_100089F64(v1, (uint64_t *)(v3 + 16));
}

uint64_t sub_1000D9EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];

  v1 = sub_1000078E0(0, qword_1002B0918, NSNull_ptr);
  sub_100007918(v0 + 16, (uint64_t)v11);
  v2 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v1, 6);
  if ((_DWORD)v2)
  {

  }
  else
  {
    v3 = type metadata accessor for DecodingError(0);
    v4 = swift_allocError(v3, &protocol witness table for DecodingError, 0, 0);
    v6 = v5;
    sub_1000055B0(&qword_1002ABBD0);
    *v6 = v1;
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v7, 0, 0xE000000000000000, 0);
    v8 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v6, enum case for DecodingError.typeMismatch(_:), v3);
    swift_willThrow(v8);
    swift_errorRelease(v4);
  }
  return v2;
}

uint64_t sub_1000D9FC4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BYTE v9[32];

  sub_100007918(v0 + 16, (uint64_t)v9);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v1 = v8 & 1;
  }
  else
  {
    v2 = type metadata accessor for DecodingError(0);
    swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
    v4 = v3;
    sub_1000055B0(&qword_1002ABBD0);
    *v4 = &type metadata for Bool;
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
    swift_willThrow(v6);
  }
  return v1 & 1;
}

uint64_t sub_1000DA0C0()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for String;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA1B4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  result = swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((result & 1) == 0)
  {
    v2 = type metadata accessor for DecodingError(0);
    swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
    v4 = v3;
    sub_1000055B0(&qword_1002ABBD0);
    *v4 = &type metadata for Double;
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
    return swift_willThrow(v6);
  }
  return result;
}

uint64_t sub_1000DA2A8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  result = swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Float, 6);
  if ((result & 1) == 0)
  {
    v2 = type metadata accessor for DecodingError(0);
    swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
    v4 = v3;
    sub_1000055B0(&qword_1002ABBD0);
    *v4 = &type metadata for Float;
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
    return swift_willThrow(v6);
  }
  return result;
}

uint64_t sub_1000DA39C()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for Int;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA490()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[2];
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(v7, v8, (char *)&type metadata for Any + 8, &type metadata for Int8, 6) & 1) != 0)
    return v7[0];
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for Int8;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA584()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Int16, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for Int16;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA678()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Int32, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for Int32;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA76C()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for Int64;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA860()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for UInt;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DA954()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[2];
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(v7, v8, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6) & 1) != 0)
    return v7[0];
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for UInt8;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DAA48()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for UInt16, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for UInt16;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DAB3C()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for UInt32;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DAC30()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_100007918(v0 + 16, (uint64_t)v8);
  if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) != 0)
    return v7;
  v2 = type metadata accessor for DecodingError(0);
  swift_allocError(v2, &protocol witness table for DecodingError, 0, 0);
  v4 = v3;
  sub_1000055B0(&qword_1002ABBD0);
  *v4 = &type metadata for UInt64;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v5, 0, 0xE000000000000000, 0);
  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for DecodingError.typeMismatch(_:), v2);
  return swift_willThrow(v6);
}

uint64_t sub_1000DAD24@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14[5];
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];

  sub_100007918((uint64_t)(v4 + 2), (uint64_t)v17);
  if (a1 == &type metadata for Data
    && (sub_100007918((uint64_t)v17, (uint64_t)&v15),
        v9 = sub_1000078E0(0, (unint64_t *)&qword_1002B0850, NSData_ptr),
        (swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0))
  {

    sub_100005778(v17, &v15);
    return swift_dynamicCast(a4, &v15, (char *)&type metadata for Any + 8, a2, 7);
  }
  else
  {
    v11 = *v4;
    sub_100007918((uint64_t)v17, (uint64_t)&v16);
    v12 = type metadata accessor for CodingUserInfoKey(0);
    swift_bridgeObjectRetain();
    v13 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v12, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
    *(_QWORD *)&v15 = v11;
    *((_QWORD *)&v15 + 1) = v13;
    v14[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
    v14[4] = (id)sub_100089EF4();
    v14[0] = (id)swift_allocObject(&unk_10028A6E8, 64, 7);
    sub_100089F64((uint64_t *)&v15, (uint64_t *)v14[0] + 2);
    dispatch thunk of Decodable.init(from:)(v14, a2, a3);
    sub_100089FA0((uint64_t)&v15);
    return sub_100005988(v17);
  }
}

uint64_t sub_1000DAEBC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000DAEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D9C70(a1, a2, a3);
}

void sub_1000DAED8(_QWORD *a1@<X8>)
{
  sub_1000D9D08(a1);
}

uint64_t *sub_1000DAEEC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D9E44(a1);
}

uint64_t sub_1000DAF04()
{
  return sub_1000D9FC4() & 1;
}

uint64_t sub_1000DAF1C()
{
  return sub_1000DA0C0();
}

uint64_t sub_1000DAF30()
{
  return sub_1000DA1B4();
}

uint64_t sub_1000DAF44()
{
  return sub_1000DA2A8();
}

uint64_t sub_1000DAF58()
{
  return sub_1000DA39C();
}

uint64_t sub_1000DAF6C()
{
  return sub_1000DA490();
}

uint64_t sub_1000DAF80()
{
  return sub_1000DA584();
}

uint64_t sub_1000DAF94()
{
  return sub_1000DA678();
}

uint64_t sub_1000DAFA8()
{
  return sub_1000DA76C();
}

uint64_t sub_1000DAFBC()
{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t sub_1000DAFD0()
{
  return sub_1000DA860();
}

uint64_t sub_1000DAFE4()
{
  return sub_1000DA954();
}

uint64_t sub_1000DAFF8()
{
  return sub_1000DAA48();
}

uint64_t sub_1000DB00C()
{
  return sub_1000DAB3C();
}

uint64_t sub_1000DB020()
{
  return sub_1000DAC30();
}

uint64_t sub_1000DB034()
{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t sub_1000DB048@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000DAD24(a1, a2, a3, a4);
}

unint64_t sub_1000DB05C()
{
  unint64_t result;

  result = qword_1002B08F8;
  if (!qword_1002B08F8)
  {
    result = swift_getWitnessTable(&unk_100223734, &type metadata for PropertyListTypeDecoder.RootDecoder);
    atomic_store(result, (unint64_t *)&qword_1002B08F8);
  }
  return result;
}

unint64_t sub_1000DB098()
{
  unint64_t result;

  result = qword_1002B0908;
  if (!qword_1002B0908)
  {
    result = swift_getWitnessTable(&unk_1002239F8, &type metadata for PropertyListTypeDecoder.UnkeyedDecoder);
    atomic_store(result, (unint64_t *)&qword_1002B0908);
  }
  return result;
}

uint64_t type metadata accessor for PropertyListTypeDecoder.KeyedDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListTypeDecoder.KeyedDecoder);
}

uint64_t sub_1000DB0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t *_s13EnsembleAgent23PropertyListTypeEncoderC14UnkeyedEncoderVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

void _s13EnsembleAgent23PropertyListTypeEncoderC14UnkeyedEncoderVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

}

uint64_t *_s13EnsembleAgent23PropertyListTypeEncoderC14UnkeyedEncoderVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  return a1;
}

_QWORD *_s13EnsembleAgent23PropertyListTypeEncoderC14UnkeyedEncoderVwta_0(_QWORD *a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;

  return a1;
}

void destroy for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

}

uint64_t *_s13EnsembleAgent23PropertyListTypeDecoderC14UnkeyedDecoderVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  a1[2] = (uint64_t)v5;
  swift_bridgeObjectRetain(v3);
  v6 = v5;
  return a1;
}

uint64_t *assignWithCopy for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = (uint64_t)v6;
  v8 = v6;

  return a1;
}

uint64_t *assignWithTake for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = (void *)a1[2];
  a1[1] = a2[1];
  a1[2] = v5;

  return a1;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.UnkeyedDecoder()
{
  return &type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
}

uint64_t sub_1000DB2EC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_1000DB2F4(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v8 = objc_msgSend(a2, "allKeys");
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, (char *)&type metadata for Any + 8);

  v14[7] = v9;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a1;
  v14[5] = a2;
  v10 = sub_1000055B0(&qword_1002B09B0);
  v11 = sub_1000DF230();
  v12 = Sequence.compactMap<A>(_:)(sub_1000DF204, v14, v10, a3, v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000DB3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  _QWORD v8[2];
  _QWORD v9[4];

  sub_100007918(a1, (uint64_t)v9);
  if (swift_dynamicCast(v8, v9, (char *)&type metadata for Any + 8, &type metadata for String, 0))
  {
    dispatch thunk of CodingKey.init(stringValue:)(v8[0], v8[1], a2, a3);
  }
  else if (swift_dynamicCast(v8, v9, (char *)&type metadata for Any + 8, &type metadata for Int, 0))
  {
    dispatch thunk of CodingKey.init(intValue:)(v8[0], a2, a3);
  }
  else
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a4, 1, 1, a2);
  }
  return sub_100005988(v9);
}

uint64_t sub_1000DB490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(a3, a1, a2, 0);
}

uint64_t sub_1000DB4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;

  v35 = a2;
  v38 = a3;
  v34 = a8;
  v13 = type metadata accessor for Optional(0, a6);
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - v14;
  *(_QWORD *)&v36[0] = dispatch thunk of CodingKey.stringValue.getter(a5, a7);
  *((_QWORD *)&v36[0] + 1) = v16;
  swift_bridgeObjectRetain();
  v17 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v36, &type metadata for String);
  v18 = objc_msgSend(a4, "__swift_objectForKeyedSubscript:", v17);
  swift_unknownObjectRelease(v17);
  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v36, v18);
    swift_unknownObjectRelease(v18);
    sub_100005778(v36, v37);
    swift_bridgeObjectRelease();
    sub_100007918((uint64_t)v37, (uint64_t)v36);
    if ((swift_dynamicCast(v15, v36, (char *)&type metadata for Any + 8, a6, 6) & 1) != 0)
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v15, 0, 1, a6);
      sub_100005988(v37);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v34, v15, a6);
    }
    else
    {
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v15, 1, 1, a6);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
      v26 = type metadata accessor for DecodingError(0);
      swift_allocError(v26, &protocol witness table for DecodingError, 0, 0);
      v28 = v27;
      sub_1000055B0(&qword_1002ABBD0);
      *v28 = v35;
      sub_1000DB490(0, 0xE000000000000000, v38);
      v29 = swift_bridgeObjectRelease();
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26, v29);
      swift_willThrow(v30);
      return sub_100005988(v37);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = type metadata accessor for DecodingError(0);
    swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    sub_1000055B0(&qword_1002B09A8);
    v22[3] = a5;
    v22[4] = a7;
    v23 = sub_100005534(v22);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v23, a1, a5);
    sub_1000DB490(0, 0xE000000000000000, v38);
    v24 = swift_bridgeObjectRelease();
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for DecodingError.keyNotFound(_:), v20, v24);
    return swift_willThrow(v25);
  }
}

BOOL sub_1000DB7E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  _OWORD v10[2];

  *(_QWORD *)&v10[0] = dispatch thunk of CodingKey.stringValue.getter(a4, a5);
  *((_QWORD *)&v10[0] + 1) = v6;
  swift_bridgeObjectRetain();
  v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v10, &type metadata for String);
  v8 = objc_msgSend(a3, "__swift_objectForKeyedSubscript:", v7, v10[0]);
  swift_unknownObjectRelease(v7);
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v10, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100005570((uint64_t)v10);
  swift_bridgeObjectRelease();
  return v8 != 0;
}

BOOL sub_1000DB8AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  id v21;

  v11 = type metadata accessor for DecodingError(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000078E0(0, qword_1002B0918, NSNull_ptr);
  sub_1000DB4E4(a1, v15, a2, a3, a4, v15, a5, (uint64_t)&v21);
  if (!v5)
  {

    return v5 == 0;
  }
  v21 = v5;
  swift_errorRetain(v5);
  v16 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if (!swift_dynamicCast(v14, &v21, v16, v11, 0))
  {
LABEL_7:
    swift_errorRelease(v21);
    return v5 == 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) != enum case for DecodingError.typeMismatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_7;
  }
  swift_errorRelease(v5);
  (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
  v17 = &v14[*(int *)(sub_1000055B0(&qword_1002ABBD0) + 48)];
  v18 = type metadata accessor for DecodingError.Context(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  swift_errorRelease(v21);
  return v5 == 0;
}

uint64_t sub_1000DBA60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  char v8;

  sub_1000DB4E4(a1, (uint64_t)&type metadata for Bool, a2, a3, a4, (uint64_t)&type metadata for Bool, a5, (uint64_t)&v8);
  if (!v5)
    v6 = v8;
  return v6 & 1;
}

uint64_t sub_1000DBAAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = sub_1000DB4E4(a1, (uint64_t)&type metadata for String, a2, a3, a4, (uint64_t)&type metadata for String, a5, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

double sub_1000DBAF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double result;
  double v7;

  sub_1000DB4E4(a1, (uint64_t)&type metadata for Double, a2, a3, a4, (uint64_t)&type metadata for Double, a5, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

float sub_1000DBB3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  float result;
  float v7;

  sub_1000DB4E4(a1, (uint64_t)&type metadata for Float, a2, a3, a4, (uint64_t)&type metadata for Float, a5, (uint64_t)&v7);
  if (!v5)
    return v7;
  return result;
}

void sub_1000DBB84()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_1000DF480();
  sub_1000DF4E0(v0, v1, v2, v3, v4, v5, (uint64_t)&v6);
  sub_10008A5D8();
}

void sub_1000DBBB0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  sub_1000DF480();
  sub_1000DF4E0(v0, v1, v2, v3, v4, v5, (uint64_t)&v6);
  sub_10008A5D8();
}

void sub_1000DBBDC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  sub_1000DF480();
  sub_1000DF4E0(v0, v1, v2, v3, v4, v5, (uint64_t)&v6);
  sub_10008A5D8();
}

void sub_1000DBC08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000DF480();
  sub_1000DF4E0(v0, v1, v2, v3, v4, v5, (uint64_t)&v6);
  sub_10008A5D8();
}

uint64_t sub_1000DBC34@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26[5];
  _BYTE v27[72];
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  result = sub_1000DB4E4(a2, (uint64_t)&type metadata for Any + 8, a3, a4, a5, (uint64_t)&type metadata for Any + 8, a7, (uint64_t)v30);
  if (!v9)
  {
    v31 = 0;
    if (a1 == &type metadata for Data
      && (sub_100007918((uint64_t)v30, (uint64_t)&v28),
          v19 = sub_1000078E0(0, (unint64_t *)&qword_1002B0850, NSData_ptr),
          (swift_dynamicCast(v26, &v28, (char *)&type metadata for Any + 8, v19, 6) & 1) != 0))
    {

      sub_100005778(v30, &v28);
      return swift_dynamicCast(a9, &v28, (char *)&type metadata for Any + 8, a6, 7);
    }
    else
    {
      v20 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
      inited = swift_initStackObject(v20, v27);
      *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
      *(_QWORD *)(inited + 56) = a5;
      *(_QWORD *)(inited + 64) = a7;
      v22 = sub_100005534((_QWORD *)(inited + 32));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v22, a2, a5);
      *(_QWORD *)&v28 = a3;
      swift_bridgeObjectRetain();
      sub_1001927F0();
      v23 = v28;
      sub_100007918((uint64_t)v30, (uint64_t)&v29);
      v24 = type metadata accessor for CodingUserInfoKey(0);
      v25 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v24, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
      *(_QWORD *)&v28 = v23;
      *((_QWORD *)&v28 + 1) = v25;
      v26[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
      v26[4] = (id)sub_100089EF4();
      v26[0] = (id)swift_allocObject(&unk_10028A6E8, 64, 7);
      sub_100089F64((uint64_t *)&v28, (uint64_t *)v26[0] + 2);
      dispatch thunk of Decodable.init(from:)(v26, a6, a8);
      sub_100089FA0((uint64_t)&v28);
      return sub_100005988(v30);
    }
  }
  return result;
}

void sub_1000DBE4C(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t inited;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t WitnessTable;
  _QWORD v27[2];
  _BYTE v28[72];
  uint64_t v29;

  v17 = sub_1000078E0(0, &qword_1002B0910, NSDictionary_ptr);
  sub_1000DB4E4(a1, v17, a2, a3, a4, v17, a6, (uint64_t)v27);
  if (!v8)
  {
    v29 = a8;
    v18 = (void *)v27[0];
    v19 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
    inited = swift_initStackObject(v19, v28);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    *(_QWORD *)(inited + 56) = a4;
    *(_QWORD *)(inited + 64) = a6;
    v21 = sub_100005534((_QWORD *)(inited + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v21, a1, a4);
    v27[0] = a2;
    v22 = v18;
    swift_bridgeObjectRetain();
    sub_1001927F0();
    v27[1] = v22;
    v24 = type metadata accessor for PropertyListTypeDecoder.KeyedDecoder(0, a5, a7, v23);
    swift_bridgeObjectRetain();
    v25 = v22;
    WitnessTable = swift_getWitnessTable(&unk_100223878, v24);
    KeyedDecodingContainer.init<A>(_:)(v27, a5, v24, WitnessTable);
    swift_bridgeObjectRelease();

  }
}

void sub_1000DBFCC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  _QWORD *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v13 = sub_1000078E0(0, &qword_1002B0900, NSArray_ptr);
  sub_1000DB4E4(a1, v13, a2, a3, a4, v13, a5, (uint64_t)&v21);
  if (!v6)
  {
    v14 = v21;
    v15 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
    inited = swift_initStackObject(v15, &v20);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    *(_QWORD *)(inited + 56) = a4;
    *(_QWORD *)(inited + 64) = a5;
    v17 = sub_100005534((_QWORD *)(inited + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v17, a1, a4);
    v21 = (void *)a2;
    v18 = v14;
    swift_bridgeObjectRetain();
    sub_1001927F0();
    v19 = v21;
    a6[3] = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
    a6[4] = sub_1000DB098();

    *a6 = v19;
    a6[1] = 0;
    a6[2] = v18;
  }
}

void sub_1000DC0F8()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeDecoder.swift", 43, 2, 265, 0);
  __break(1u);
}

void sub_1000DC158()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeDecoder.swift", 43, 2, 269, 0);
  __break(1u);
}

uint64_t sub_1000DC1B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DB2F4(*(_QWORD *)v1, *(id *)(v1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL sub_1000DC1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DB7E4(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

BOOL sub_1000DC1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DB8AC(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_1000DC1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DBA60(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t sub_1000DC220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DBAAC(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

double sub_1000DC240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DBAF4(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

float sub_1000DC260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000DBB3C(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void sub_1000DC280()
{
  sub_1000DBC08();
}

void sub_1000DC2A8()
{
  sub_1000DBB84();
}

void sub_1000DC2D0()
{
  sub_1000DBBB0();
}

void sub_1000DC2F8()
{
  sub_1000DBBDC();
}

void sub_1000DC320()
{
  sub_1000DBC08();
}

uint64_t sub_1000DC348()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

void sub_1000DC35C()
{
  sub_1000DBC08();
}

void sub_1000DC384()
{
  sub_1000DBB84();
}

void sub_1000DC3AC()
{
  sub_1000DBBB0();
}

void sub_1000DC3D4()
{
  sub_1000DBBDC();
}

void sub_1000DC3FC()
{
  sub_1000DBC08();
}

uint64_t sub_1000DC424()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_1000DC438@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  return sub_1000DBC34(a1, a2, *(_QWORD *)v6, *(void **)(v6 + 8), *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4, a6);
}

uint64_t sub_1000DC460()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000DC474()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000DC488()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DC4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC628(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000DC4C4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DC4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC5B0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

void sub_1000DC500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC5EC(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

void sub_1000DC51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC628(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000DC538()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1000DC558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC680(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000DC574()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DC594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC5B0(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

void sub_1000DC5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  __int16 v4;

  v4 = a4();
  sub_1000DF4F0(v4 & 0x1FF);
  sub_10008A5D8();
}

void sub_1000DC5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC5EC(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

void sub_1000DC5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;

  v4 = a4();
  sub_1000DF4F0(v4 & 0x1FFFF);
  sub_10008A5D8();
}

void sub_1000DC60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DC628(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

void sub_1000DC628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4;

  v4 = a4();
  sub_1000DF4C8(v4);
  sub_10008A5D8();
}

uint64_t sub_1000DC644()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1000DC664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DC680(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000DC680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1000DC6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

void sub_1000DC6CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;

  sub_1000DBE4C(a1, *(_QWORD *)v5, *(void **)(v5 + 8), *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3, a5);
}

void sub_1000DC6F4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  sub_1000DBFCC(a1, *(_QWORD *)v3, *(void **)(v3 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void sub_1000DC714()
{
  sub_1000DC0F8();
}

void sub_1000DC734()
{
  sub_1000DC158();
}

id sub_1000DC754(int a1, int a2, id a3)
{
  return objc_msgSend(a3, "count");
}

BOOL sub_1000DC778(int a1, uint64_t a2, id a3)
{
  return (uint64_t)objc_msgSend(a3, "count") <= a2;
}

uint64_t sub_1000DC7B8()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
}

uint64_t sub_1000DC800()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void sub_1000DC82C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  sub_1000DC7AC();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
}

uint64_t HIDServiceProperties.HIDAccelCurve.gainLinear.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1000DC864@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = sub_1000DC7B8();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000DC890(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DF1A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DC8B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DF1A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DC8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[72];

  v8 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
  inited = swift_initStackObject(v8, v15);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v10 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11;
  *(_QWORD *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
  *(_QWORD *)(inited + 64) = sub_1000DF1A4();
  v13 = swift_allocObject(&unk_10028A878, 41, 7);
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = a4;
  *(_BYTE *)(v13 + 40) = 0;
  swift_bridgeObjectRetain();
  sub_1001927F0();
  swift_bridgeObjectRetain();
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(a3, a1, a2, 0);
}

uint64_t sub_1000DC9E8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  _BYTE v17[32];
  _QWORD v18[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Bool;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    swift_willThrow(v11);
    return v7 & 1;
  }
  v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
  _bridgeAnyObjectToAny(_:)(v18, v3);
  swift_unknownObjectRelease(v3);
  sub_100007918((uint64_t)v18, (uint64_t)v17);
  if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
    v12 = type metadata accessor for DecodingError(0);
    swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
    v14 = v13;
    sub_1000055B0(&qword_1002ABBD0);
    *v14 = &type metadata for Bool;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
    swift_willThrow(v15);
    sub_100005988(v18);
    return v7 & 1;
  }
  result = sub_100005988(v18);
  v5 = v0[1];
  v6 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v7 = v16 & 1;
    v0[1] = v6;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DCBD4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  _QWORD v18[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for String;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v18, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v18, (uint64_t)v17);
    if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      result = sub_100005988(v18);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for String;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v18);
    }
  }
  return result;
}

uint64_t sub_1000DCDB8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Double;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
        __break(1u);
      else
        v0[1] = v7;
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Double;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DCFA0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Float;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Float, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
        __break(1u);
      else
        v0[1] = v7;
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Float;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DD188()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Int;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Int;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DD370()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[2];
  _BYTE v17[32];
  _QWORD v18[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Int8;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v18, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v18, (uint64_t)v17);
    if ((swift_dynamicCast(v16, v17, (char *)&type metadata for Any + 8, &type metadata for Int8, 6) & 1) != 0)
    {
      v16[1] = 0;
      result = sub_100005988(v18);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16[0];
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Int8;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v18);
    }
  }
  return result;
}

uint64_t sub_1000DD558()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Int16;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Int16, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Int16;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DD740()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Int32;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Int32, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Int32;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DD928()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for Int64;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for Int64;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DDB10()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for UInt;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for UInt;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DDCF8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[2];
  _BYTE v17[32];
  _QWORD v18[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for UInt8;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v18, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v18, (uint64_t)v17);
    if ((swift_dynamicCast(v16, v17, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6) & 1) != 0)
    {
      v16[1] = 0;
      result = sub_100005988(v18);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16[0];
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for UInt8;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v18);
    }
  }
  return result;
}

uint64_t sub_1000DDEE0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for UInt16;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for UInt16, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for UInt16;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DE0C8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for UInt32;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for UInt32;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DE2B0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v1 = v0[1];
  v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, "count"))
  {
    v8 = type metadata accessor for DecodingError(0);
    swift_allocError(v8, &protocol witness table for DecodingError, 0, 0);
    v10 = v9;
    sub_1000055B0(&qword_1002ABBD0);
    *v10 = &type metadata for UInt64;
    sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for DecodingError.valueNotFound(_:), v8);
    return swift_willThrow(v11);
  }
  else
  {
    v3 = objc_msgSend(v2, "objectAtIndexedSubscript:", v1);
    _bridgeAnyObjectToAny(_:)(v19, v3);
    swift_unknownObjectRelease(v3);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v16, v18, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) != 0)
    {
      v17 = 0;
      result = sub_100005988(v19);
      v5 = v0[1];
      v6 = __OFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        result = v16;
        v0[1] = v7;
      }
    }
    else
    {
      v12 = type metadata accessor for DecodingError(0);
      swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
      v14 = v13;
      sub_1000055B0(&qword_1002ABBD0);
      *v14 = &type metadata for UInt64;
      sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
      v15 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow(v15);
      return sub_100005988(v19);
    }
  }
  return result;
}

uint64_t sub_1000DE498@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = v1[1];
  v4 = (void *)v1[2];
  if (v3 >= (uint64_t)objc_msgSend(v4, "count"))
  {
    v7 = type metadata accessor for DecodingError(0);
    swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
    v9 = v8;
    sub_1000055B0(&qword_1002ABBD0);
    *v9 = (char *)&type metadata for Any + 8;
    sub_1000DC8E0(0, 0xE000000000000000, *v1, v1[1]);
    v10 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, enum case for DecodingError.valueNotFound(_:), v7);
    return swift_willThrow(v10);
  }
  else
  {
    v5 = objc_msgSend(v4, "objectAtIndexedSubscript:", v3);
    _bridgeAnyObjectToAny(_:)(a1, v5);
    result = swift_unknownObjectRelease(v5);
    v1[1] = v3 + 1;
  }
  return result;
}

uint64_t sub_1000DE5A4(unint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v3 = sub_1000078E0(0, a1, a2);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  if (v4 >= (uint64_t)objc_msgSend(v5, "count"))
  {
    v11 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v11, (uint64_t)&protocol witness table for DecodingError);
    sub_1000055B0(&qword_1002ABBD0);
    v12 = sub_1000DF494();
    v13 = sub_1000DF4B4(v12, enum case for DecodingError.valueNotFound(_:));
    return swift_willThrow(v13);
  }
  else
  {
    v6 = objc_msgSend(v5, "objectAtIndexedSubscript:", v4);
    _bridgeAnyObjectToAny(_:)(v19, v6);
    swift_unknownObjectRelease(v6);
    sub_100007918((uint64_t)v19, (uint64_t)v18);
    if ((swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
    {
      result = sub_100005988(v19);
      v8 = *(_QWORD *)(v2 + 8);
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
      {
        __break(1u);
      }
      else
      {
        result = v17;
        *(_QWORD *)(v2 + 8) = v10;
      }
    }
    else
    {
      v14 = type metadata accessor for DecodingError(0);
      sub_1000264A0(v14, (uint64_t)&protocol witness table for DecodingError);
      sub_1000055B0(&qword_1002ABBD0);
      v15 = sub_1000DF494();
      v16 = sub_1000DF4B4(v15, enum case for DecodingError.typeMismatch(_:));
      swift_willThrow(v16);
      return sub_100005988(v19);
    }
  }
  return result;
}

BOOL sub_1000DE724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for DecodingError(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)sub_1000DE5A4(qword_1002B0918, NSNull_ptr);
  if (!v0)
  {

    return v0 == 0;
  }
  v11 = v0;
  swift_errorRetain(v0);
  v6 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if (!swift_dynamicCast(v4, &v11, v6, v1, 0))
  {
LABEL_7:
    swift_errorRelease(v11);
    return v0 == 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v4, v1) != enum case for DecodingError.typeMismatch(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    goto LABEL_7;
  }
  swift_errorRelease(v0);
  (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
  v7 = &v4[*(int *)(sub_1000055B0(&qword_1002ABBD0) + 48)];
  v8 = type metadata accessor for DecodingError.Context(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_errorRelease(v11);
  return v0 == 0;
}

uint64_t sub_1000DE888()
{
  return sub_1000DC9E8() & 1;
}

uint64_t sub_1000DE8A0()
{
  return sub_1000DCBD4();
}

uint64_t sub_1000DE8B4()
{
  return sub_1000DCDB8();
}

uint64_t sub_1000DE8C8()
{
  return sub_1000DCFA0();
}

uint64_t sub_1000DE8DC()
{
  return sub_1000DD188();
}

uint64_t sub_1000DE8F0()
{
  return sub_1000DD370();
}

uint64_t sub_1000DE904()
{
  return sub_1000DD558();
}

uint64_t sub_1000DE918()
{
  return sub_1000DD740();
}

uint64_t sub_1000DE92C()
{
  return sub_1000DD928();
}

uint64_t sub_1000DE940()
{
  return sub_1000DDB10();
}

uint64_t sub_1000DE954()
{
  return sub_1000DDCF8();
}

uint64_t sub_1000DE968()
{
  return sub_1000DDEE0();
}

uint64_t sub_1000DE97C()
{
  return sub_1000DE0C8();
}

uint64_t sub_1000DE990()
{
  return sub_1000DE2B0();
}

uint64_t sub_1000DE9A4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23[5];
  _BYTE v24[72];
  __int128 v25;
  uint64_t v26;
  _OWORD v27[2];

  result = sub_1000DE498(v27);
  if (!v5)
  {
    if (a1 == &type metadata for Data
      && (sub_100007918((uint64_t)v27, (uint64_t)&v25),
          v11 = sub_1000078E0(0, (unint64_t *)&qword_1002B0850, NSData_ptr),
          (swift_dynamicCast(v23, &v25, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0))
    {

      sub_100005778(v27, &v25);
      return swift_dynamicCast(a4, &v25, (char *)&type metadata for Any + 8, a2, 7);
    }
    else
    {
      v12 = *v4;
      v13 = sub_1000055B0((uint64_t *)&unk_1002ACE20);
      inited = swift_initStackObject(v13, v24);
      *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
      *(_QWORD *)&v25 = v4[1];
      v15 = v25;
      v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v18 = v17;
      *(_QWORD *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(_QWORD *)(inited + 64) = sub_1000DF1A4();
      v19 = swift_allocObject(&unk_10028A878, 41, 7);
      *(_QWORD *)(inited + 32) = v19;
      *(_QWORD *)(v19 + 16) = v16;
      *(_QWORD *)(v19 + 24) = v18;
      *(_QWORD *)(v19 + 32) = v15;
      *(_BYTE *)(v19 + 40) = 0;
      *(_QWORD *)&v25 = v12;
      swift_bridgeObjectRetain();
      sub_1001927F0();
      v20 = v25;
      sub_100007918((uint64_t)v27, (uint64_t)&v26);
      v21 = type metadata accessor for CodingUserInfoKey(0);
      v22 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v21, (char *)&type metadata for Any + 8, &protocol witness table for CodingUserInfoKey);
      *(_QWORD *)&v25 = v20;
      *((_QWORD *)&v25 + 1) = v22;
      v23[3] = &type metadata for PropertyListTypeDecoder.RootDecoder;
      v23[4] = (id)sub_100089EF4();
      v23[0] = (id)swift_allocObject(&unk_10028A6E8, 64, 7);
      sub_100089F64((uint64_t *)&v25, (uint64_t *)v23[0] + 2);
      dispatch thunk of Decodable.init(from:)(v23, a2, a3);
      sub_100089FA0((uint64_t)&v25);
      return sub_100005988(v27);
    }
  }
  return result;
}

uint64_t sub_1000DEBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  _QWORD v11[2];

  result = sub_1000DE5A4(&qword_1002B0910, NSDictionary_ptr);
  if (!v4)
  {
    v11[0] = *v3;
    v11[1] = result;
    v9 = type metadata accessor for PropertyListTypeDecoder.KeyedDecoder(0, a2, a3, v8);
    swift_bridgeObjectRetain();
    WitnessTable = swift_getWitnessTable(&unk_100223878, v9);
    return KeyedDecodingContainer.init<A>(_:)(v11, a2, v9, WitnessTable);
  }
  return result;
}

double sub_1000DEC88@<D0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1000DE5A4(&qword_1002B0900, NSArray_ptr);
  if (!v2)
  {
    v6 = v4;
    v7 = *v1;
    a1[3] = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
    a1[4] = sub_1000DB098();
    *a1 = v7;
    a1[1] = 0;
    a1[2] = v6;
    *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  }
  return result;
}

void sub_1000DECF8()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6D656C706D696E75, 0xED00006465746E65, "EnsembleAgent/PropertyListTypeDecoder.swift", 43, 2, 417, 0);
  __break(1u);
}

id sub_1000DED58()
{
  uint64_t v0;

  return sub_1000DC754(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(id *)(v0 + 16));
}

BOOL sub_1000DED78()
{
  uint64_t v0;

  return sub_1000DC778(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(id *)(v0 + 16));
}

uint64_t sub_1000DED84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

BOOL sub_1000DED8C()
{
  return sub_1000DE724();
}

uint64_t sub_1000DEDA4()
{
  return sub_1000DE888() & 1;
}

uint64_t sub_1000DEDBC()
{
  return sub_1000DE8A0();
}

uint64_t sub_1000DEDD0()
{
  return sub_1000DE8B4();
}

uint64_t sub_1000DEDE4()
{
  return sub_1000DE8C8();
}

uint64_t sub_1000DEDF8()
{
  return sub_1000DE8DC();
}

uint64_t sub_1000DEE0C()
{
  return sub_1000DE8F0();
}

uint64_t sub_1000DEE20()
{
  return sub_1000DE904();
}

uint64_t sub_1000DEE34()
{
  return sub_1000DE918();
}

uint64_t sub_1000DEE48()
{
  return sub_1000DE92C();
}

uint64_t sub_1000DEE5C()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_1000DEE70()
{
  return sub_1000DE940();
}

uint64_t sub_1000DEE84()
{
  return sub_1000DE954();
}

uint64_t sub_1000DEE98()
{
  return sub_1000DE968();
}

uint64_t sub_1000DEEAC()
{
  return sub_1000DE97C();
}

uint64_t sub_1000DEEC0()
{
  return sub_1000DE990();
}

uint64_t sub_1000DEED4()
{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t sub_1000DEEE8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000DE9A4(a1, a2, a3, a4);
}

uint64_t sub_1000DEEFC()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_1000DEF10()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_1000DEF24()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DEF44(uint64_t a1, uint64_t a2)
{
  sub_1000DF0C4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000DEF60()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DEF80(uint64_t a1, uint64_t a2)
{
  sub_1000DF04C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

void sub_1000DEF9C(uint64_t a1, uint64_t a2)
{
  sub_1000DF088(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

void sub_1000DEFB8(uint64_t a1, uint64_t a2)
{
  sub_1000DF0C4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000DEFD4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1000DEFF4(uint64_t a1, uint64_t a2)
{
  return sub_1000DF11C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000DF010()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

void sub_1000DF030(uint64_t a1, uint64_t a2)
{
  sub_1000DF04C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

void sub_1000DF04C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  __int16 v3;

  v3 = a3();
  sub_1000DF4F0(v3 & 0x1FF);
  sub_10008A5D8();
}

void sub_1000DF06C(uint64_t a1, uint64_t a2)
{
  sub_1000DF088(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

void sub_1000DF088(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;

  v3 = a3();
  sub_1000DF4F0(v3 & 0x1FFFF);
  sub_10008A5D8();
}

void sub_1000DF0A8(uint64_t a1, uint64_t a2)
{
  sub_1000DF0C4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

void sub_1000DF0C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;

  v3 = a3();
  sub_1000DF4C8(v3);
  sub_10008A5D8();
}

uint64_t sub_1000DF0E0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_1000DF100(uint64_t a1, uint64_t a2)
{
  return sub_1000DF11C(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000DF11C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t sub_1000DF140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1000DF168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEBE0(a1, a2, a3);
}

double sub_1000DF17C@<D0>(_QWORD *a1@<X8>)
{
  return sub_1000DEC88(a1);
}

void sub_1000DF190()
{
  sub_1000DECF8();
}

unint64_t sub_1000DF1A4()
{
  unint64_t result;

  result = qword_1002B09A0;
  if (!qword_1002B09A0)
  {
    result = swift_getWitnessTable(&unk_100223BC0, &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey);
    atomic_store(result, (unint64_t *)&qword_1002B09A0);
  }
  return result;
}

uint64_t sub_1000DF1E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000DF204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000DB3BC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1000DF230()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B09B8;
  if (!qword_1002B09B8)
  {
    v1 = sub_10000DCA0(&qword_1002B09B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B09B8);
  }
  return result;
}

uint64_t initializeWithCopy for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

__n128 initializeWithTake for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.UnkeyedDecoder.__AKey()
{
  return &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
}

unint64_t sub_1000DF3FC()
{
  unint64_t result;

  result = qword_1002B09C0;
  if (!qword_1002B09C0)
  {
    result = swift_getWitnessTable(&unk_100223B70, &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey);
    atomic_store(result, (unint64_t *)&qword_1002B09C0);
  }
  return result;
}

unint64_t sub_1000DF43C()
{
  unint64_t result;

  result = qword_1002B09C8;
  if (!qword_1002B09C8)
  {
    result = swift_getWitnessTable(&unk_100223B98, &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey);
    atomic_store(result, (unint64_t *)&qword_1002B09C8);
  }
  return result;
}

uint64_t sub_1000DF494()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  return sub_1000DC8E0(0, 0xE000000000000000, *v0, v0[1]);
}

uint64_t sub_1000DF4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t sub_1000DF4C8(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t sub_1000DF4E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_1000DB4E4(a1, a5, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000DF4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100007918(v2, a2);
}

uint64_t sub_1000DF4F0@<X0>(unsigned int a1@<W8>)
{
  return a1;
}

void sub_1000DF4FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000DF54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[11];

  if (BYTE6(v1) == 16)
  {
    v7[0] = 0;
    v7[1] = 0;
    v8[0] = v2;
    v8[1] = v1;
    v3 = sub_1000DF694();
    ((void (*)(_QWORD *, _QWORD *, void *, unint64_t))DataProtocol.copyBytes(to:))(v7, v8, &type metadata for Data, v3);
    UUID.init(uuid:)(LOBYTE(v7[0]), BYTE1(v7[0]), BYTE2(v7[0]), BYTE3(v7[0]), BYTE4(v7[0]), BYTE5(v7[0]));
    sub_1000DF6D0();
    v4 = type metadata accessor for UUID(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, 0, 1, v4);
  }
  else
  {
    sub_1000DF6D0();
    v6 = type metadata accessor for UUID(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, 1, 1, v6);
  }
}

unint64_t sub_1000DF694()
{
  unint64_t result;

  result = qword_1002B09D0;
  if (!qword_1002B09D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B09D0);
  }
  return result;
}

uint64_t sub_1000DF6D0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

void static HIDVirtualService.basicMouseService(queue:)(void *a1)
{
  HIDUtils::HIDServiceProperties v2;
  uint64_t v3;

  v2 = HIDServiceProperties.init(usages:)((Swift::OpaquePointer)&off_100280DD8);
  if (!v3)
  {
    HIDServiceProperties.authenticatedDevice.setter();
    HIDServiceProperties.vendorID.setter(65280, 0);
    HIDServiceProperties.productID.setter();
    HIDServiceProperties.manufacturer.setter();
    HIDServiceProperties.product.setter(0x6D6F747541204355, 0xEC0000006573756FLL);
    HIDServiceProperties.supportsGestureScrolling.setter(1);
    HIDServiceProperties.transport.setter();
    HIDServiceProperties.universalControlVirtualService.setter(1);
    HIDVirtualService.__allocating_init(properties:queue:)(v2.serviceID, (uint64_t)v2.storage.super.super.isa, (uint64_t)a1);
  }
}

void sub_1000DF7F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  _BYTE v3[16];
  uint64_t v4;

  sub_1000E15A4();
  sub_100033B3C();
  v4 = sub_1000E1578();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (unint64_t *)(v0 + 40);
    do
    {
      sub_100119698((uint64_t)v3, *(v2 - 1), *v2);
      v2 += 2;
      --v1;
    }
    while (v1);
    sub_10000E410();
  }
  else
  {
    sub_10000E410();
  }
  sub_10000B338();
}

uint64_t sub_1000DF86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  sub_1000E15A4();
  sub_1000E0FB8();
  v1 = sub_1000E1578();
  v8 = v1;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = v0 + i;
      sub_100119934((uint64_t)&v7, *(_BYTE *)(v4 + 32));
    }
    sub_10000E410();
    return v8;
  }
  else
  {
    v5 = v1;
    sub_10000E410();
  }
  return v5;
}

uint64_t sub_1000DF8F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for HIDUniversalSenderID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_100041014((unint64_t *)&qword_1002B09E8, v10, (uint64_t)&protocol conformance descriptor for HIDUniversalSenderID);
  v11 = Set.init(minimumCapacity:)(v9);
  v18 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1000E0E9C(v13, (uint64_t)v6);
      sub_1001199C0();
      sub_1000E0F24((uint64_t)v8);
      v13 += v14;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(a1);
    return v18;
  }
  else
  {
    v15 = v11;
    swift_bridgeObjectRelease(a1);
  }
  return v15;
}

void sub_1000DFA24(uint64_t a1)
{
  sub_1000DFD38(a1, (void (*)(_QWORD *__return_ptr, uint64_t))sub_100043078);
}

void sub_1000DFA30()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  char v6[17];
  uint64_t v7;

  sub_1000E15A4();
  sub_1000E0F7C();
  v7 = sub_1000E1578();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (unsigned __int8 *)(v0 + 48);
    do
    {
      v3 = *((_QWORD *)v2 - 2);
      v4 = *((_QWORD *)v2 - 1);
      v5 = *v2;
      v2 += 17;
      sub_100119B20(v6, v3, v4, v5);
      --v1;
    }
    while (v1);
    sub_10000E410();
  }
  else
  {
    sub_10000E410();
  }
  sub_10000B338();
}

uint64_t sub_1000DFAA8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v10);
    sub_10000E410();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  type metadata accessor for UniversalControlDevice(0);
  sub_100041014(&qword_1002AC880, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
  result = Set.init(minimumCapacity:)(v3);
  v5 = result;
  v12 = result;
  if (!v2)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_5;
LABEL_16:
    sub_10000E410();
    return v5;
  }
  if (a1 < 0)
    v9 = a1;
  else
    v9 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter(v9);
  result = sub_10000E410();
  if (!v6)
    goto LABEL_16;
LABEL_5:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_100119DD8(&v11, v8);
      swift_release();
    }
    sub_10000E410();
    return v12;
  }
  __break(1u);
  return result;
}

void sub_1000DFC00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  _QWORD v10[5];
  _QWORD v11[4];
  uint64_t v12;

  sub_1000E15A4();
  sub_1000E0FF4();
  v10[4] = sub_1000E1578();
  sub_100043078(v11, v0);
  v1 = v11[0];
  v2 = v11[1];
  v3 = v11[3];
  v4 = v12;
  v5 = (unint64_t)(v11[2] + 64) >> 6;
  if (!v12)
    goto LABEL_3;
LABEL_2:
  sub_1000E1560();
  while (1)
  {
    sub_10011A1BC((uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 32 * v6), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 32 * v6 + 8), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 32 * v6 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 32 * v6 + 24));
    if (v4)
      goto LABEL_2;
LABEL_3:
    v7 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v7 >= v5)
      goto LABEL_20;
    if (!*(_QWORD *)(v2 + 8 * v7))
    {
      if (v3 + 2 >= v5)
        goto LABEL_20;
      if (!*(_QWORD *)(v2 + 8 * (v3 + 2)))
      {
        if (v3 + 3 >= v5)
          goto LABEL_20;
        if (!*(_QWORD *)(v2 + 8 * (v3 + 3)))
        {
          if (v3 + 4 >= v5)
            goto LABEL_20;
          if (!*(_QWORD *)(v2 + 8 * (v3 + 4)))
          {
            if (v3 + 5 >= v5)
              goto LABEL_20;
            if (!*(_QWORD *)(v2 + 8 * (v3 + 5)))
            {
              v8 = v3 + 6;
              while (v8 < v5)
              {
                if (*(_QWORD *)(v2 + 8 * v8++))
                  goto LABEL_17;
              }
LABEL_20:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_17:
    sub_1000E1544();
  }
  __break(1u);
}

void sub_1000DFD38(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD v14[3];
  _QWORD v15[4];
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  sub_100033B3C();
  v14[2] = Set.init(minimumCapacity:)(v4);
  a2(v15, a1);
  v5 = v15[0];
  v6 = v15[1];
  v7 = v15[3];
  v8 = v16;
  v9 = (unint64_t)(v15[2] + 64) >> 6;
  if (!v16)
    goto LABEL_3;
LABEL_2:
  sub_1000E1560();
  while (1)
  {
    sub_100119698((uint64_t)v14, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v10), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v10 + 8));
    if (v8)
      goto LABEL_2;
LABEL_3:
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v11 >= v9)
      goto LABEL_20;
    if (!*(_QWORD *)(v6 + 8 * v11))
    {
      if (v7 + 2 >= v9)
        goto LABEL_20;
      if (!*(_QWORD *)(v6 + 8 * (v7 + 2)))
      {
        if (v7 + 3 >= v9)
          goto LABEL_20;
        if (!*(_QWORD *)(v6 + 8 * (v7 + 3)))
        {
          if (v7 + 4 >= v9)
            goto LABEL_20;
          if (!*(_QWORD *)(v6 + 8 * (v7 + 4)))
          {
            if (v7 + 5 >= v9)
              goto LABEL_20;
            if (!*(_QWORD *)(v6 + 8 * (v7 + 5)))
            {
              v12 = v7 + 6;
              while (v12 < v9)
              {
                if (*(_QWORD *)(v6 + 8 * v12++))
                  goto LABEL_17;
              }
LABEL_20:
              swift_release(v5);
              return;
            }
          }
        }
      }
    }
LABEL_17:
    sub_1000E1544();
  }
  __break(1u);
}

void HIDReportAccumulator.allKeyboardModifiers()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v22 = *v0 + 64;
  v1 = 1 << *(_BYTE *)(*v0 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(*v0 + 64);
  v23 = (unint64_t)(v1 + 63) >> 6;
  v24 = *v0;
  swift_bridgeObjectRetain();
  v4 = 0;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v25 = (v3 - 1) & v3;
  v26 = v4;
  for (i = __clz(__rbit64(v3)) | (v4 << 6); ; i = __clz(__rbit64(v7)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 80 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[6];
    v18 = v14[7];
    v19 = v14[8];
    v20 = v14[9];
    sub_1000E1538();
    sub_1000E152C();
    sub_1000E1520();
    sub_10002517C(v17, v18);
    sub_10002517C(v19, v20);
    v21 = KeyboardReport.modifiers.getter(v15, v16);
    sub_1000E0084(v21);
    sub_1000E14F4();
    sub_1000C2778();
    sub_1000E14E8();
    sub_100022AEC(v17, v18);
    sub_100022AEC(v19, v20);
    v3 = v25;
    v4 = v26;
    if (v25)
      goto LABEL_4;
LABEL_5:
    v6 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v6 >= v23)
      goto LABEL_27;
    v7 = *(_QWORD *)(v22 + 8 * v6);
    v8 = v4 + 1;
    if (!v7)
    {
      sub_1000E1598();
      if (v9 == v10)
        goto LABEL_27;
      sub_1000E158C();
      if (!v7)
      {
        sub_1000E1598();
        if (v9 == v10)
          goto LABEL_27;
        sub_1000E158C();
        if (!v7)
        {
          sub_1000E1598();
          if (v9 == v10)
            goto LABEL_27;
          sub_1000E158C();
          if (!v7)
            break;
        }
      }
    }
LABEL_24:
    v25 = (v7 - 1) & v7;
    v26 = v8;
  }
  v12 = v11 + 4;
  if (v12 >= v23)
  {
LABEL_27:
    swift_release();
    return;
  }
  v7 = *(_QWORD *)(v22 + 8 * v12);
  if (v7)
  {
    v8 = v12;
    goto LABEL_24;
  }
  while (!__OFADD__(v12, 1))
  {
    sub_1000E1598();
    if (v9 == v10)
      goto LABEL_27;
    sub_1000E158C();
    v12 = v13 + 1;
    if (v7)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
}

void sub_1000E0084(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v2 << 6); ; i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    sub_10011A130((uint64_t)&v13, *(_BYTE *)(*(_QWORD *)(a1 + 48) + i));
    if (v6)
      goto LABEL_4;
LABEL_5:
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t HIDReportAccumulator.senders(for:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[6];

  v4 = a1;
  v54 = a1 >> 16;
  v55 = a1 >> 8;
  v52 = HIDWORD(a1);
  v53 = a1 >> 24;
  v50 = HIWORD(a1);
  v51 = a1 >> 40;
  v48 = a2 >> 8;
  v49 = HIBYTE(a1);
  v46 = a2 >> 24;
  v47 = a2 >> 16;
  v44 = a2 >> 40;
  v45 = HIDWORD(a2);
  v42 = HIBYTE(a2);
  v43 = HIWORD(a2);
  v41 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_10002641C();
  v7 = v6 - v5;
  v8 = type metadata accessor for HIDUniversalSenderID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v39 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  v17 = *v2;
  v57 = _swiftEmptyArrayStorage;
  sub_100043078(v58, v17);
  v56 = v58[0];
  v37 = v58[1];
  v18 = v58[3];
  v19 = v58[4];
  v38 = (unint64_t)(v58[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(v17);
  v36 = a2;
  v35 = v4;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_26;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v23 >= v38)
      goto LABEL_33;
    v24 = *(_QWORD *)(v37 + 8 * v23);
    v25 = v18 + 1;
    if (!v24)
    {
      sub_1000E1510();
      if (v26 == v27)
        goto LABEL_33;
      sub_1000E1500();
      if (!v24)
      {
        sub_1000E1510();
        if (v26 == v27)
          goto LABEL_33;
        sub_1000E1500();
        if (!v24)
        {
          sub_1000E1510();
          if (v26 == v27)
            goto LABEL_33;
          sub_1000E1500();
          if (!v24)
          {
            sub_1000E1510();
            if (v26 == v27)
              goto LABEL_33;
            sub_1000E1500();
            if (!v24)
            {
              v25 = v28 + 5;
              if (v28 + 5 >= v38)
                goto LABEL_33;
              v24 = *(_QWORD *)(v37 + 8 * v25);
              if (!v24)
              {
                v29 = v18 + 7;
                while (v29 < v38)
                {
                  v24 = *(_QWORD *)(v37 + 8 * v29++);
                  if (v24)
                  {
                    v25 = v29 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_33:
                swift_release();
                return sub_1000DF8F4((uint64_t)v57);
              }
            }
          }
        }
      }
    }
LABEL_25:
    v19 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    v18 = v25;
LABEL_26:
    v30 = *(_QWORD *)(v9 + 72);
    sub_1000E0E9C(*(_QWORD *)(v56 + 48) + v30 * v22, (uint64_t)v14);
    sub_1000E0EE0((uint64_t)v14, (uint64_t)v16);
    UUID.init(uuid:)(v4, v55, v54, v53, v52, v51, v50, v49);
    v31 = static UUID.== infix(_:_:)(v16, v7);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v7, v41);
    if ((v31 & 1) != 0)
    {
      sub_1000E0EE0((uint64_t)v16, v39);
      v32 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      {
        sub_10005873C();
        v32 = v57;
      }
      v33 = v32[2];
      if (v33 >= v32[3] >> 1)
      {
        sub_10005873C();
        v32 = v57;
      }
      v32[2] = v33 + 1;
      result = sub_1000E0EE0(v39, (uint64_t)v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ v33 * v30);
      v4 = v35;
    }
    else
    {
      result = sub_1000E0F24((uint64_t)v16);
    }
  }
  __break(1u);
  return result;
}

uint64_t HIDReportAccumulator.resetValues(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000E061C(a1, a2, (uint64_t)sub_1000E0F60, (uint64_t (*)(uint64_t, _QWORD *))HIDReportAccumulator.resetValues(matching:));
}

uint64_t HIDReportAccumulator.removeValues(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000E061C(a1, a2, (uint64_t)sub_1000E14C8, (uint64_t (*)(uint64_t, _QWORD *))HIDReportAccumulator.removeValues(matching:));
}

uint64_t sub_1000E061C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD *))
{
  _QWORD v5[4];

  v5[2] = a1;
  v5[3] = a2;
  return a4(a3, v5);
}

uint64_t sub_1000E06B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = a2;
  v13 = a2 >> 8;
  v11 = a2 >> 24;
  v12 = a2 >> 16;
  v9 = a2 >> 40;
  v10 = HIDWORD(a2);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002641C();
  v7 = v6 - v5;
  UUID.init(uuid:)(v2, v13, v12, v11, v10, v9);
  LOBYTE(v2) = static UUID.== infix(_:_:)(a1, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  return v2 & 1;
}

uint64_t sub_1000E07EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  if (a1 == 0x6472616F6279656BLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6472616F6279656BLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x72656D75736E6F63 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656D75736E6F63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x8000000100257040;
    if (a2 == 0x8000000100257040)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100257040, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x8000000100257060;
    if (a2 == 0x8000000100257060)
      goto LABEL_26;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100257060, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_26:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if (a1 == 0x7265746E696F70 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265746E696F70, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000E09F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E0A24 + 4 * byte_100223C10[a1]))(0x6472616F6279656BLL, 0xE800000000000000);
}

uint64_t sub_1000E0A24()
{
  return 0x72656D75736E6F63;
}

unint64_t sub_1000E0A38()
{
  return 0xD000000000000013;
}

unint64_t sub_1000E0A58()
{
  return 0xD000000000000012;
}

uint64_t sub_1000E0A74()
{
  return 0x7265746E696F70;
}

uint64_t sub_1000E0A8C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = v1;
  v5 = sub_1000055B0(&qword_1002B09F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = a1[3];
  v11 = a1[4];
  sub_10000DBE4(a1, v10);
  v12 = sub_1000E1300();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s15DiagnosticStateV10CodingKeysON, &_s15DiagnosticStateV10CodingKeysON, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v28 = 0;
  sub_1000E14CC(v13, v14, (uint64_t)&v28);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    v27 = 1;
    sub_1000E14CC(v15, v16, (uint64_t)&v27);
    v17 = v3[4];
    v18 = v3[5];
    v26 = 2;
    sub_1000E14CC(v17, v18, (uint64_t)&v26);
    v19 = v3[6];
    v20 = v3[7];
    v25 = 3;
    sub_1000E14CC(v19, v20, (uint64_t)&v25);
    v21 = v3[8];
    v22 = v3[9];
    v24 = 4;
    sub_1000E14CC(v21, v22, (uint64_t)&v24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000E0BD4()
{
  unsigned __int8 *v0;

  return sub_1000E09F0(*v0);
}

uint64_t sub_1000E0BDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E07EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E0C00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E1300();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E0C28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E1300();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E0C50(_QWORD *a1)
{
  return sub_1000E0A8C(a1);
}

void sub_1000E0C64(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *v1;
  v4 = v1[1];
  sub_1000E1538();
  KeyboardReport.init()();
  v7 = static HIDReport.== infix(_:_:)(v3, v4, v5, v6);
  sub_1000E14DC();
  if ((v7 & 1) != 0)
  {
    sub_1000E14F4();
    v46 = 0;
    v47 = 0;
  }
  else
  {
    sub_1000E1538();
    HIDReport.debugDescription.getter(v3, v4);
    v46 = v9;
    v47 = v8;
    sub_1000E14F4();
    sub_1000E14F4();
  }
  v10 = v1[2];
  v11 = v1[3];
  sub_1000E152C();
  v12 = ConsumerReport.init()();
  v14 = static HIDReport.== infix(_:_:)(v10, v11, v12, v13);
  sub_1000E14DC();
  if ((v14 & 1) != 0)
  {
    sub_1000C2778();
    v44 = 0;
    v45 = 0;
  }
  else
  {
    sub_1000E152C();
    HIDReport.debugDescription.getter(v10, v11);
    v44 = v16;
    v45 = v15;
    sub_1000C2778();
    sub_1000C2778();
  }
  v17 = v1[4];
  v18 = v1[5];
  sub_1000E1520();
  v19 = AppleVendorKeyboardReport.init()();
  v21 = static HIDReport.== infix(_:_:)(v17, v18, v19, v20);
  sub_1000E14DC();
  if ((v21 & 1) != 0)
  {
    sub_1000E14E8();
    v22 = 0;
    v23 = 0;
  }
  else
  {
    sub_1000E1520();
    HIDReport.debugDescription.getter(v17, v18);
    v22 = v24;
    v23 = v25;
    sub_1000E14E8();
    sub_1000E14E8();
  }
  v26 = v1[6];
  v27 = v1[7];
  sub_1000E1580();
  v28 = AppleVendorTopCaseReport.init()();
  v30 = static HIDReport.== infix(_:_:)(v26, v27, v28, v29);
  sub_1000E14E8();
  if ((v30 & 1) != 0)
  {
    sub_1000E14DC();
    v31 = 0;
    v32 = 0;
  }
  else
  {
    sub_1000E1580();
    HIDReport.debugDescription.getter(v26, v27);
    v31 = v33;
    v32 = v34;
    sub_1000E14DC();
    sub_1000E14DC();
  }
  v36 = v1[8];
  v35 = v1[9];
  PointerReport.init()();
  v38 = v37;
  v40 = v39;
  v41 = static Data.== infix(_:_:)(v36, v35, v37, v39);
  sub_100022AEC(v38, v40);
  if ((v41 & 1) != 0)
  {
    v42 = 0;
    v43 = 0;
  }
  else
  {
    HIDReport.debugDescription.getter(v36, v35);
  }
  *a1 = v47;
  a1[1] = v46;
  a1[2] = v45;
  a1[3] = v44;
  a1[4] = v22;
  a1[5] = v23;
  a1[6] = v31;
  a1[7] = v32;
  a1[8] = v42;
  a1[9] = v43;
}

uint64_t sub_1000E0E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HIDUniversalSenderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HIDUniversalSenderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0F24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HIDUniversalSenderID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E0F60(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E06B8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1000E0F7C()
{
  unint64_t result;

  result = qword_1002B3360;
  if (!qword_1002B3360)
  {
    result = swift_getWitnessTable(&unk_10021EEB0, &type metadata for Connection);
    atomic_store(result, (unint64_t *)&qword_1002B3360);
  }
  return result;
}

unint64_t sub_1000E0FB8()
{
  unint64_t result;

  result = qword_1002B09D8;
  if (!qword_1002B09D8)
  {
    result = swift_getWitnessTable(&unk_10021EF80, &type metadata for Connection.State);
    atomic_store(result, (unint64_t *)&qword_1002B09D8);
  }
  return result;
}

unint64_t sub_1000E0FF4()
{
  unint64_t result;

  result = qword_1002B09E0;
  if (!qword_1002B09E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDisplayID, &type metadata for UniversalControlDisplayID);
    atomic_store(result, (unint64_t *)&qword_1002B09E0);
  }
  return result;
}

uint64_t _s15DiagnosticStateVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

_QWORD *_s15DiagnosticStateVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *_s15DiagnosticStateVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *initializeWithTake for HIDReportAccumulator.Value(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

_QWORD *_s15DiagnosticStateVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t _s15DiagnosticStateVwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s15DiagnosticStateVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s15DiagnosticStateVMa()
{
  return &_s15DiagnosticStateVN;
}

unint64_t sub_1000E1300()
{
  unint64_t result;

  result = qword_1002B09F8;
  if (!qword_1002B09F8)
  {
    result = swift_getWitnessTable(&unk_100223D20, &_s15DiagnosticStateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B09F8);
  }
  return result;
}

uint64_t _s15DiagnosticStateV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000E1388 + 4 * byte_100223C1A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E13BC + 4 * byte_100223C15[v4]))();
}

uint64_t sub_1000E13BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E13C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E13CCLL);
  return result;
}

uint64_t sub_1000E13D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E13E0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000E13E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E13EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15DiagnosticStateV10CodingKeysOMa()
{
  return &_s15DiagnosticStateV10CodingKeysON;
}

unint64_t sub_1000E140C()
{
  unint64_t result;

  result = qword_1002B0A00;
  if (!qword_1002B0A00)
  {
    result = swift_getWitnessTable(&unk_100223CF8, &_s15DiagnosticStateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B0A00);
  }
  return result;
}

unint64_t sub_1000E144C()
{
  unint64_t result;

  result = qword_1002B0A08;
  if (!qword_1002B0A08)
  {
    result = swift_getWitnessTable(&unk_100223C68, &_s15DiagnosticStateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B0A08);
  }
  return result;
}

unint64_t sub_1000E148C()
{
  unint64_t result;

  result = qword_1002B0A10;
  if (!qword_1002B0A10)
  {
    result = swift_getWitnessTable(&unk_100223C90, &_s15DiagnosticStateV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B0A10);
  }
  return result;
}

uint64_t sub_1000E14CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000E14DC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1000E14E8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1000E14F4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1000E1520()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1000E152C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1000E1538()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_1000E1578()
{
  uint64_t v0;

  return Set.init(minimumCapacity:)(v0);
}

uint64_t sub_1000E1580()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

xpc_type_t OS_xpc_object.type.getter()
{
  void *v0;

  return xpc_get_type(v0);
}

uint64_t OS_xpc_object.BOOL.getter()
{
  void *v0;
  xpc_type_t v1;

  v1 = OS_xpc_object.type.getter();
  if (v1 == (xpc_type_t)XPC_TYPE_BOOL.getter())
    return xpc_BOOL_get_value(v0);
  else
    return 2;
}

uint64_t OS_xpc_object.int64.getter(uint64_t a1)
{
  return sub_1000E161C(a1, (uint64_t (*)(void))&XPC_TYPE_INT64.getter, (uint64_t (*)(uint64_t))&_xpc_int64_get_value);
}

uint64_t OS_xpc_object.uint64.getter(uint64_t a1)
{
  return sub_1000E161C(a1, (uint64_t (*)(void))&XPC_TYPE_UINT64.getter, (uint64_t (*)(uint64_t))&_xpc_uint64_get_value);
}

uint64_t sub_1000E161C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  xpc_type_t v6;

  v6 = OS_xpc_object.type.getter();
  if (v6 == (xpc_type_t)a2())
    return a3(v3);
  else
    return 0;
}

void OS_xpc_object.double.getter()
{
  void *v0;
  xpc_type_t v1;

  v1 = OS_xpc_object.type.getter();
  if (v1 == (xpc_type_t)XPC_TYPE_DOUBLE.getter())
    xpc_double_get_value(v0);
  sub_10000B350();
}

const char *OS_xpc_object.charPtr.getter()
{
  void *v0;

  return xpc_string_get_string_ptr(v0);
}

const void *OS_xpc_object.bytes.getter()
{
  void *v0;
  const void *bytes_ptr;

  bytes_ptr = xpc_data_get_bytes_ptr(v0);
  if (bytes_ptr)
    xpc_data_get_length(v0);
  return bytes_ptr;
}

uint64_t Bool.init(xpcobject:)(uint64_t a1)
{
  uint64_t v2;

  v2 = OS_xpc_object.BOOL.getter();
  swift_unknownObjectRelease(a1);
  return v2;
}

xpc_object_t Bool.xpcobject.getter(char a1)
{
  return xpc_BOOL_create(a1 & 1);
}

uint64_t sub_1000E1750@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Bool.init(xpcobject:)(a1);
  *a2 = result;
  return result;
}

xpc_object_t sub_1000E1774()
{
  char *v0;

  return Bool.xpcobject.getter(*v0);
}

void Int.init(xpcobject:)(uint64_t a1)
{
  sub_1000E1804(a1, (void (*)(void))OS_xpc_object.int64.getter);
}

void sub_1000E178C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Int.init(xpcobject:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

xpc_object_t sub_1000E17B8()
{
  int64_t *v0;

  return Int64.xpcobject.getter(*v0);
}

void Int64.init(xpcobject:)(uint64_t a1)
{
  sub_1000E1874(a1, (void (*)(void))OS_xpc_object.int64.getter);
}

void sub_1000E17CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Int64.init(xpcobject:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

void UInt.init(xpcobject:)(uint64_t a1)
{
  sub_1000E1804(a1, (void (*)(void))OS_xpc_object.uint64.getter);
}

void sub_1000E1804(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_1000E1AF0();
  sub_10000B350();
}

void sub_1000E1834(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  UInt.init(xpcobject:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

xpc_object_t sub_1000E1860()
{
  uint64_t *v0;

  return UInt64.xpcobject.getter(*v0);
}

void UInt64.init(xpcobject:)(uint64_t a1)
{
  sub_1000E1874(a1, (void (*)(void))OS_xpc_object.uint64.getter);
}

void sub_1000E1874(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_1000E1AF0();
  sub_10000B350();
}

void sub_1000E18A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  UInt64.init(xpcobject:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

unint64_t UInt32.init(xpcobject:)(uint64_t a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;

  OS_xpc_object.uint64.getter(a1);
  sub_1000E1AF0();
  v3 = v1;
  if (v2 & 1 | (HIDWORD(v1) != 0))
    v3 = 0;
  return v3 | ((unint64_t)(v2 & 1u | (HIDWORD(v1) != 0)) << 32);
}

xpc_object_t UInt32.xpcobject.getter(uint64_t value)
{
  return xpc_uint64_create(value);
}

unint64_t sub_1000E1930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = UInt32.init(xpcobject:)(a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

xpc_object_t sub_1000E195C()
{
  unsigned int *v0;

  return UInt32.xpcobject.getter(*v0);
}

uint64_t String.init(xpcobject:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (xpc_string_get_string_ptr(a1))
  {
    v2 = String.init(validatingUTF8:)();
    v4 = v3;
    swift_unknownObjectRelease(a1);
    if (v4)
      return v2;
    else
      return 0;
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return 0;
  }
}

xpc_object_t String.xpcobject.getter()
{
  uint64_t v0;
  xpc_object_t v1;

  v0 = String.utf8CString.getter();
  v1 = xpc_string_create((const char *)(v0 + 32));
  swift_release(v0);
  return v1;
}

uint64_t sub_1000E19FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = String.init(xpcobject:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

xpc_object_t sub_1000E1A20()
{
  return String.xpcobject.getter();
}

void Double.init(xpcobject:)(uint64_t a1)
{
  sub_1000E1874(a1, OS_xpc_object.double.getter);
}

void sub_1000E1A38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Double.init(xpcobject:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

xpc_object_t sub_1000E1A64()
{
  double *v0;

  return Double.xpcobject.getter(*v0);
}

uint64_t Date.init(xpcobject:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  OS_xpc_object.double.getter();
  if ((v5 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(v4);
    v6 = 0;
  }
  swift_unknownObjectRelease(a1);
  v7 = type metadata accessor for Date(0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a2, v6, 1, v7);
}

xpc_object_t Date.xpcobject.getter()
{
  double v0;

  v0 = Date.timeIntervalSinceReferenceDate.getter();
  return xpc_double_create(v0);
}

uint64_t sub_1000E1AF0()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000E1B00(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000E4BF8(a1, a2, a3, a4, 36, (int)sub_100015F3C, 36, 0x257080, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1000E1B24(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000E4BF8(a1, a2, a3, a4, 45, (int)sub_1000174C0, 45, 0x2571E0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

#error "1000E1D50: call analysis failed (funcsize=133)"

#error "1000E1EDC: call analysis failed (funcsize=96)"

uint64_t sub_1000E1EF8(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000E4BF8(a1, a2, a3, a4, 31, (int)sub_1000BE6DC, 31, 0x2572B0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

#error "1000E211C: call analysis failed (funcsize=133)"

#error "1000E22A8: call analysis failed (funcsize=96)"

#error "1000E2438: call analysis failed (funcsize=96)"

#error "1000E25C4: call analysis failed (funcsize=96)"

#error "1000E2754: call analysis failed (funcsize=96)"

#error "1000E28E0: call analysis failed (funcsize=96)"

#error "1000E2AE8: call analysis failed (funcsize=128)"

#error "1000E2D40: call analysis failed (funcsize=225)"

#error "1000E30A4: call analysis failed (funcsize=135)"

#error "1000E3230: call analysis failed (funcsize=96)"

#error "1000E3448: call analysis failed (funcsize=129)"

#error "1000E35D4: call analysis failed (funcsize=96)"

#error "1000E3760: call analysis failed (funcsize=96)"

#error "1000E38EC: call analysis failed (funcsize=96)"

#error "1000E3AFC: call analysis failed (funcsize=128)"

#error "1000E3C88: call analysis failed (funcsize=96)"

#error "1000E3E14: call analysis failed (funcsize=96)"

#error "1000E401C: call analysis failed (funcsize=127)"

#error "1000E41BC: call analysis failed (funcsize=102)"

void sub_1000E41D8()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[11];
  uint64_t v61;
  uint64_t v62;

  sub_10005FEB0();
  v61 = v1;
  v62 = v2;
  v4 = v3;
  v6 = v5;
  v9 = (void *)sub_1000E4C44(v7, v8, v5, v3);
  v10 = objc_msgSend(v9, "localizedDescription");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = v0();
  if (v15)
  {
    v16 = v14;
    v17 = v15;
    v18 = v9;
    swift_bridgeObjectRetain();
    v19 = sub_100043360();
    v20 = v6;
    Logger.logObject.getter(v19);
    v21 = sub_1000E4BA8();
    if (sub_10002D948(v21))
    {
      v22 = sub_10000797C(42);
      v55 = sub_10000797C(96);
      v60[0] = v55;
      *(_DWORD *)v22 = 136446979;
      v56 = v11;
      swift_bridgeObjectRetain();
      v59 = sub_1000E4C84(v16, v23, v60);
      sub_1000E4A84((uint64_t)&v59, (uint64_t)v60, v24, v22 + 12);
      v25 = sub_1000103C8((uint64_t)v17);
      *(_WORD *)(v22 + 12) = 2082;
      v26 = sub_100043374(v25, "domain");
      v58 = v4;
      v27 = sub_1000E4B7C((uint64_t)v26);
      v29 = v28;

      v59 = sub_100006FCC(v27, v29, v60);
      sub_1000E4A84((uint64_t)&v59, (uint64_t)v60, v30, v22 + 22);

      v31 = sub_10002D89C();
      *(_WORD *)(v22 + 22) = 2048;
      v32 = sub_100043374(v31, "code");

      v59 = (uint64_t)v32;
      sub_1000E4B3C((uint64_t)&v59, (uint64_t)v60, v33, v22 + 32);

      *(_WORD *)(v22 + 32) = 2081;
      sub_100043360();
      v59 = sub_1000E4AE4(v56, v34, v60);
      sub_1000E4B3C((uint64_t)&v59, (uint64_t)v60, v35, v22 + 42);
      sub_1000E49C8();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v0, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v22, 0x2Au);
      sub_1000E4AFC(v55, v36, (uint64_t)&type metadata for Any + 8);
      v37 = v55;
LABEL_6:
      sub_100007958(v37);
      sub_100007958(v22);

      swift_errorRelease(v58);
      sub_1000125AC();
      return;
    }
    sub_1000E49F0();
    v54 = (uint64_t)v17;
  }
  else
  {
    v18 = v9;
    v38 = sub_100043360();
    v20 = v6;
    Logger.logObject.getter(v38);
    v39 = sub_1000E4BA8();
    if (sub_10002D948(v39))
    {
      v22 = sub_10000797C(32);
      v40 = sub_10000797C(64);
      v60[0] = v40;
      *(_DWORD *)v22 = 136446723;
      v58 = v4;
      v57 = v11;
      v41 = sub_100043374(v40, "domain");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v41);

      v59 = sub_10002D814(v42, v43, v60);
      sub_1000E4A8C((uint64_t)&v59, v44, v45, v22 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      v47 = sub_100043374(v46, "code");

      v59 = (uint64_t)v47;
      sub_1000E4A8C((uint64_t)&v59, v48, v49, v22 + 22);

      *(_WORD *)(v22 + 22) = 2081;
      sub_100043360();
      v59 = sub_1000E4AE4(v57, v50, v60);
      sub_1000E4A8C((uint64_t)&v59, v51, v52, v22 + 32);
      sub_1000E49C8();
      sub_1000E4C54((void *)&_mh_execute_header, v20, (os_log_type_t)v0, "%{public}s (%ld) %{private}s", (uint8_t *)v22);
      sub_100026A58(v40, v53, (uint64_t)&type metadata for Any + 8);
      v37 = v40;
      goto LABEL_6;
    }
    v54 = v13;
  }
  sub_100026AF4(v54);

  swift_errorRelease(v4);
}

#error "1000E482C: call analysis failed (funcsize=236)"

uint64_t sub_1000E496C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v4, v3 + 12);
}

uint64_t sub_1000E498C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v6, v7, a4);
}

uint64_t sub_1000E499C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v6, a4);
}

void sub_1000E49AC(id a1)
{

}

uint64_t sub_1000E49C8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

void sub_1000E49D4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x2Au);
}

void sub_1000E49E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{

}

uint64_t sub_1000E49F0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

BOOL sub_1000E49FC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000E4A28()
{
  void *v0;

}

uint64_t sub_1000E4A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

void sub_1000E4A3C()
{
  void *v0;

}

uint64_t sub_1000E4A4C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  unint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  return sub_100006FCC(v4, v3, (uint64_t *)va);
}

uint64_t sub_1000E4A5C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  unint64_t v3;
  va_list va;

  va_start(va, a3);
  return sub_100006FCC(a1, v3, (uint64_t *)va);
}

uint64_t sub_1000E4A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 3, a1 + 8);
}

void sub_1000E4A7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

}

uint64_t sub_1000E4A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_1000E4A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t sub_1000E4A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v7 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v5, v4 + 12);
}

void sub_1000E4AB8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x2Au);
}

uint64_t sub_1000E4ACC()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000E4AD8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000E4AE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100006FCC(a1, v3, a3);
}

void sub_1000E4AEC()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000E4AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 3, a3);
}

void sub_1000E4B04()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2048;
}

uint64_t sub_1000E4B24()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000E4B2C(uint64_t a1)
{
  return _convertErrorToNSError(_:)(a1);
}

uint64_t sub_1000E4B34(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000E4B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_1000E4B44(float a1)
{
  float *v1;
  uint64_t v2;

  *v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000E4B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v4, v5, a4);
}

uint64_t sub_1000E4B60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100006FCC(v4, v3, a3);
}

void sub_1000E4B6C()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000E4B7C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_1000E4B84()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000E4B94()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000E4BA8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000E4BB0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_100006FCC(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

void sub_1000E4BB8(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_1000E4BC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100006FCC(v4, v3, a3);
}

id sub_1000E4BD0(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  return objc_msgSend(a11, a2);
}

void sub_1000E4BD8()
{
  void *v0;

}

void sub_1000E4BE8()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2048;
}

uint64_t sub_1000E4BF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  return sub_1000E1F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

id sub_1000E4C00(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  return objc_msgSend(a12, a2);
}

uint64_t sub_1000E4C08(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

id sub_1000E4C10(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000E4C18(uint64_t a1)
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a1, 1);
}

id sub_1000E4C2C()
{
  void *v0;

  return v0;
}

uint64_t sub_1000E4C34()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_1000E4C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _convertErrorToNSError(_:)(a4);
}

void sub_1000E4C54(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t sub_1000E4C6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100006FCC(v3, v4, a3);
}

void sub_1000E4C78()
{
  void *v0;

}

uint64_t sub_1000E4C84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100006FCC(a1, v3, a3);
}

void sub_1000E4C8C(Swift::String a1)
{
  String.append(_:)(a1);
}

void sub_1000E4C98(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void sub_1000E4CA0()
{
  void *v0;

}

uint64_t sub_1000E4CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_release(a9);
}

void sub_1000E4CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v0);
  v1 = __DataStorage.init(length:)(92);
  sub_1000E72D0(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12, 0, v13);
  v9 = sub_1000E72B4();
  Data._Representation.subscript.setter(v9, v10);
  __asm { BR              X11 }
}

uint64_t sub_1000E4D44()
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000E7368();
  if (v2)
    goto LABEL_4;
  __break(1u);
  do
  {
    __break(1u);
LABEL_4:
    v3 = 8 * v1;
    v1 = 8 * v1 + 8;
  }
  while (__OFADD__(v3, 8));
  sub_1000E72F0(v1);
  return v4;
}

void sub_1000E4D78(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 8) >> 62;
  if ((a2 & 7) != 0)
    __asm { BR              X11 }
  __asm { BR              X11 }
}

void sub_1000E4EA0(uint64_t a1, int a2)
{
  if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
    __break(1u);
  JUMPOUT(0x1000E4DC4);
}

void sub_1000E4EC4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2;
  if ((unint64_t)(a2 - 0x1000000000000000) >> 61 == 7)
    v3 = 8 * a2;
  else
    __break(1u);
  if (!__OFADD__(v3, v2))
    JUMPOUT(0x1000E4E8CLL);
  __break(1u);
  JUMPOUT(0x1000E4F14);
}

void sub_1000E4EE8(uint64_t a1, int a2)
{
  if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x1000E4F0CLL);
  }
  JUMPOUT(0x1000E4E20);
}

void sub_1000E4F5C(uint64_t a1, char a2)
{
  if ((a2 & 7) != 0)
    __asm { BR              X11 }
  __asm { BR              X12 }
}

uint64_t sub_1000E5214()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = sub_1000E7220();
  sub_10004113C(v2);
  v20 = 0x5C00000000;
  v21 = __DataStorage.init(length:)(92);
  sub_1000E6A84((int *)&v20, 0);
  v3 = sub_1000E72B4();
  Data._Representation.subscript.setter(v3, v4);
  if (sub_1000E72E4() != 92 || sub_1000E71C4() != 225)
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v13 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v7, v8, v9, v10, v11, v12, 51);
LABEL_6:
    swift_willThrow(v13);
    sub_1000E71D4();
    sub_1000E71F0();
    return sub_1000E7314();
  }
  sub_1000E73BC();
  sub_1000E73BC();
  sub_1000E71F0();
  sub_100127CC4(8, v1, v0);
  v6 = v5;
  sub_1000E71D4();
  if (v6 != 1)
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v20 = 0xD000000000000021;
    v21 = 0x8000000100257350;
    v15._countAndFlagsBits = sub_1000E7324();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x746365707865202CLL;
    v16._object = (void *)0xEB00000000206465;
    String.append(_:)(v16);
    v17._countAndFlagsBits = sub_1000E7324();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18 = v20;
    v19 = v21;
    sub_100040400();
    swift_bridgeObjectRetain();
    NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6715, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/EventReport.swift", 90, 2, 58);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  sub_1000E71D4();
  return sub_1000E7314();
}

uint64_t sub_1000E5424(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v6);
  sub_10000E478();
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_10002641C();
  v10 = v9 - v8;
  sub_1000E4CB4();
  v20 = v11;
  sub_1000B8544(a1, v10);
  sub_1000E556C(v10);
  sub_1000E6B04(a3, (uint64_t)&type metadata for UInt16, 16);
  UUID.init(uuid:)(a2, a2 >> 8, a2 >> 16, a2 >> 24, HIDWORD(a2), a2 >> 40);
  v12 = sub_1000E7300();
  HIDReport.subscript.setter(v12, 608, v13, v14, v15, v16, v17, v18);
  sub_1000C2CC4(a1);
  return v20;
}

void sub_1000E556C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;

  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v2);
  sub_10000E478();
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_10000E490();
  __chkstk_darwin(v3);
  sub_1000268BC();
  v6 = v4 - v5;
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - v8;
  v10 = sub_1000B9A80();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10002641C();
  v14 = v13 - v12;
  sub_1000B8544(a1, v6);
  v15 = sub_1000E7334(v6);
  if (v17)
  {
    sub_1000C2C88(v6, (uint64_t *)&unk_1002AC150);
    sub_1000E724C((uint64_t)v9, 1);
LABEL_6:
    sub_1000C2CC4((uint64_t)v9);
    sub_1000E73B0(255);
    sub_1000C2CC4(a1);
LABEL_10:
    sub_10000E4E0();
    return;
  }
  UniversalControlLink.normalized()(v15);
  v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v16(v6, v10);
  sub_1000E724C((uint64_t)v9, 0);
  sub_1000E7334((uint64_t)v9);
  if (v17)
    goto LABEL_6;
  v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v9, v10);
  v19 = UniversalControlLink.edge.getter(v18);
  v20 = UniversalControlEdge.intValue.getter(v19);
  if ((v20 & 0x8000000000000000) != 0)
  {
    sub_10006D098();
    v62 = "Negative value is not representable";
    v63 = 35;
  }
  else
  {
    if (v20 < 0x100)
    {
      sub_1000E73B0(v20);
      v21 = UniversalControlLink.display1.getter();
      sub_1000E715C(v21);
      v22 = sub_1000E7300();
      sub_1000E730C(v22, 64, v23, v24, v25, v26, v27, v28);
      v29 = UniversalControlLink.display1.getter();
      sub_1000E70F0(v29, v30, v31);
      v32 = sub_1000E7300();
      sub_1000E730C(v32, 192, v33, v34, v35, v36, v37, v38);
      v40 = UniversalControlLink.display2.getter(v39);
      sub_1000E715C(v40);
      v41 = sub_1000E7300();
      sub_1000E730C(v41, 320, v42, v43, v44, v45, v46, v47);
      v49 = UniversalControlLink.display2.getter(v48);
      sub_1000E70F0(v49, v50, v51);
      v52 = sub_1000E7300();
      sub_1000E730C(v52, 448, v53, v54, v55, v56, v57, v58);
      v59 = UniversalControlLink.fixedOffset1.getter();
      sub_1000E4F5C(v59, 64);
      v60 = UniversalControlLink.fixedOffset2.getter();
      sub_1000E4F5C(v60, 80);
      sub_1000C2C88(a1, (uint64_t *)&unk_1002AC150);
      v16(v14, v10);
      goto LABEL_10;
    }
    sub_10006D098();
    v62 = "Not enough bits to represent the passed value";
    v63 = 45;
  }
  sub_1000E7388((uint64_t)"Fatal error", 11, 2, (uint64_t)v62, v63, v61, (uint64_t)"Swift/Integers.swift");
  __break(1u);
}

void sub_1000E57F4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_10000E440();
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  sub_100127CC4(48, a1, a2);
  v11 = UniversalControlEdge.init(intValue:)(v10);
  if (v11 == 4)
  {
    v12 = sub_1000B9A80();
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a3, 1, 1, v12);
  }
  else
  {
    v13 = v11;
    sub_1000E7240(64);
    v14 = UniversalControlDeviceID.init(uuid:)(v9);
    v34 = v15;
    v35 = v14;
    sub_1000E7240(192);
    v16 = ((uint64_t (*)(void))UUID.uuid.getter)();
    v17 = sub_1000B1CD8(v16);
    v32 = v18;
    v33 = v17;
    sub_1000E73C8();
    sub_1000E7240(64);
    v31 = UniversalControlDeviceID.init(uuid:)(v9);
    v20 = v19;
    sub_1000E7240(192);
    v23 = UUID.uuid.getter(v21, v22);
    v24 = sub_1000B1CD8(v23);
    v26 = v25;
    sub_1000E73C8();
    sub_1000E7394(64, a1);
    v28 = v27;
    sub_1000E7394(80, a1);
    WORD2(v32) = v29;
    WORD1(v32) = v28;
    LOBYTE(v32) = v13;
    UniversalControlLink.init(display1:display2:edge:fixedOffset1:fixedOffset2:)(v35, v34, v33, v32, v31, v20, v24, v26, v32);
    v30 = sub_1000B9A80();
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a3, 0, 1, v30);
    sub_10000E4E0();
  }
}

void sub_1000E5998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  uint64_t v24;

  v0 = sub_1000E7220();
  sub_10004113C(v0);
  v1 = __DataStorage.init(length:)(126);
  sub_1000E7268(v1, COERCE_DOUBLE(0x7E00000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v23, v24);
  sub_1000E7350();
  Data._Representation.subscript.setter(226, 0);
  if (sub_1000E72E4() == 126 && sub_1000E71C4() == 226)
  {
    sub_1000E71F0();
  }
  else
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v22 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v16, v17, v18, v19, v20, v21, 145);
    sub_1000E737C((uint64_t)v22);
    sub_1000E71D4();
    sub_1000E71F0();
  }
  sub_1000E7314();
  sub_1000E72A0();
}

uint64_t sub_1000E5A50(unint64_t a1, uint64_t a2, char a3, unint64_t a4, double a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v29;
  uint64_t v30;

  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v10);
  sub_10002641C();
  v29 = v12 - v11;
  v30 = sub_1000E6244(126, 226, 0.0);
  sub_1000E6B04(a5, (uint64_t)&type metadata for UInt16, 32);
  sub_1000E5CF4(a1, a2, a3 & 1);
  UUID.init(uuid:)(a4, a4 >> 8, a4 >> 16, a4 >> 24, HIDWORD(a4), a4 >> 40);
  HIDReport.subscript.setter(v29, 752, v13, v14, v15, v16, v17, v18);
  UUID.init(uuid:)(a7, a7 >> 8, a7 >> 16, a7 >> 24, HIDWORD(a7), a7 >> 40);
  HIDReport.subscript.setter(v29, 880, v19, v20, v21, v22, v23, v24);
  return v30;
}

void sub_1000E5CF4(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000055B0(&qword_1002ACC90);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002641C();
  v8 = v7 - v6;
  v9 = sub_10000E440();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10002641C();
  v13 = v12 - v11;
  if ((a3 & 1) != 0)
  {
    sub_1000E724C(v8, 1);
    goto LABEL_5;
  }
  UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40);
  sub_1000E724C(v8, 0);
  sub_1000E7334(v8);
  if (v14)
  {
LABEL_5:
    sub_1000E71FC();
    sub_1000C2C88(v8, &qword_1002ACC90);
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v8, v9);
LABEL_6:
  HIDReport.subscript.setter(v13, 48, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000E5E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v4 = sub_10000E440();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000268BC();
  v8 = v6 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - v10;
  HIDReport.subscript.getter(48, a1, a2);
  sub_1000E71FC();
  v12 = sub_1000E6C78();
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v4, v12);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v14 = v13(v8, v4);
  v16 = 0;
  if ((a1 & 1) == 0)
  {
    v17 = UUID.uuid.getter(v14, v15);
    v16 = sub_1000B1CD8(v17);
  }
  v13((uint64_t)v11, v4);
  return v16;
}

uint64_t sub_1000E5F68()
{
  return 227;
}

void sub_1000E5FB4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  sub_1000E7280();
  if (sub_1000E73A8(v0, v1) != 8 || sub_1000E71C4() != 227)
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v8 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v2, v3, v4, v5, v6, v7, 237);
    sub_1000E7234((uint64_t)v8);
    sub_1000E71D4();
  }
  sub_1000E7290();
  sub_1000E7258();
}

uint64_t sub_1000E6054(char a1)
{
  unsigned int v1;

  if (a1 == 2)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

uint64_t sub_1000E6070(char a1, unint64_t a2, double a3, double a4)
{
  if (a1 != 2)
    Data._Representation.subscript.setter((a1 & 1u) + 1, 1);
  sub_1000E6100(a2);
  sub_1000E618C(16, a3);
  sub_1000E618C(32, a4);
  return 227;
}

void sub_1000E6100(unint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;

  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10006D098();
    v2 = "Negative value is not representable";
    v3 = 35;
  }
  else
  {
    if (a1 < 0x10000)
    {
      sub_1000E4F5C(a1, 48);
      return;
    }
    sub_10006D098();
    v2 = "Not enough bits to represent the passed value";
    v3 = 45;
  }
  sub_1000E7388((uint64_t)"Fatal error", 11, 2, (uint64_t)v2, v3, v1, (uint64_t)"Swift/Integers.swift");
  __break(1u);
}

uint64_t sub_1000E618C(uint64_t result, double a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0)
  {
    v3 = result;
    v4 = sub_1000E6BC4();
    v5 = sub_1000E6B88();
    v6 = sub_1000E6C00();
    v7 = sub_1000E6C3C();
    return HIDReport.setScaledValue<A, B>(_:as:unsignedType:atIndex:)(a2, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v3, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v4, v5, v6, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E6230()
{
  return sub_1000E6244(34, 228, 0.0);
}

uint64_t sub_1000E6244(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for __DataStorage(0);
  sub_10004113C(v6);
  v7 = __DataStorage.init(length:)(a1);
  sub_1000E72D0(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17, SLODWORD(a3), v19);
  Data._Representation.subscript.setter(a2, 0);
  return v18;
}

void sub_1000E62C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  uint64_t v24;

  v0 = sub_1000E7220();
  sub_10004113C(v0);
  v1 = __DataStorage.init(length:)(34);
  sub_1000E7268(v1, COERCE_DOUBLE(0x2200000000), v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v23, v24);
  sub_1000E7350();
  Data._Representation.subscript.setter(228, 0);
  if (sub_1000E72E4() == 34 && sub_1000E71C4() == 228)
  {
    sub_1000E71F0();
  }
  else
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v22 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v16, v17, v18, v19, v20, v21, 305);
    sub_1000E737C((uint64_t)v22);
    sub_1000E71D4();
    sub_1000E71F0();
  }
  sub_1000E7314();
  sub_1000E72A0();
}

void sub_1000E637C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  sub_1000E7280();
  if (sub_1000E73A8(v0, v1) != 1 || sub_1000E71C4() != 229)
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v8 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v2, v3, v4, v5, v6, v7, 360);
    sub_1000E7234((uint64_t)v8);
    sub_1000E71D4();
  }
  sub_1000E7290();
  sub_1000E7258();
}

uint64_t sub_1000E641C()
{
  return 230;
}

void sub_1000E6468()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  sub_1000E7280();
  if (sub_1000E73A8(v0, v1) != 1 || sub_1000E71C4() != 230)
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v8 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v2, v3, v4, v5, v6, v7, 384);
    sub_1000E7234((uint64_t)v8);
    sub_1000E71D4();
  }
  sub_1000E7290();
  sub_1000E7258();
}

void sub_1000E6508(uint64_t a1, unint64_t a2)
{
  HIDReport.storage.getter(a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_1000E6540()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  sub_100022AEC(v1, v0);
  if (((unint64_t)BYTE6(v0) - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x1000E65A4);
  }
  v2 = 8 * BYTE6(v0);
  result = v2 + 224;
  if (__OFADD__(v2, 224))
  {
    __break(1u);
    JUMPOUT(0x1000E65D4);
  }
  return result;
}

void sub_1000E65EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000E6508(a1, a2);
  HIDReport.init(bitCount:id:)(v2, 231);
  __asm { BR              X11 }
}

void sub_1000E67D0()
{
  sub_1000E7280();
  __asm { BR              X10 }
}

uint64_t sub_1000E6800()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (BYTE6(v0) < 0x1CuLL || sub_1000E71C4() != 231)
  {
    sub_100040400();
    sub_1000955C0();
    sub_1000E71E0();
    v7 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v1, v2, v3, v4, v5, v6, 430);
    sub_1000E7234((uint64_t)v7);
    sub_1000E71D4();
  }
  return sub_1000E7290();
}

void sub_1000E68A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = sub_10000E440();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000268BC();
  v11 = v9 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - v13;
  type metadata accessor for HIDUniversalSenderID(0);
  sub_10000E490();
  __chkstk_darwin(v15);
  sub_10000E478();
  sub_10002517C(a1, a2);
  sub_1000E65EC(a1, a2);
  v25 = v16;
  v26 = v17;
  sub_1000E0E9C(a3, v3);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v14, v3, v7);
  v18((char *)v11, (uint64_t)v14, v7);
  HIDReport.subscript.setter(v11, 32, v19, v20, v21, v22, v23, v24);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  __asm { BR              X12 }
}

void sub_1000E6A84(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

void sub_1000E6B04(double a1, uint64_t a2, char a3)
{
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  unsigned __int16 v8;

  v7 = static UInt32.logicalMinimum.getter();
  v6 = static UInt16.logicalMaximum.getter();
  v5 = sub_1000E6B88();
  FixedWidthInteger.init(scaledValue:logicalMinimum:logicalMaximum:)((uint64_t)&v7, (uint64_t)&v6, (uint64_t)&type metadata for UInt16, v5, (uint64_t)&v8, a1);
  sub_1000E4F5C(v8, a3);
}

unint64_t sub_1000E6B88()
{
  unint64_t result;

  result = qword_1002B0A18;
  if (!qword_1002B0A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1002B0A18);
  }
  return result;
}

unint64_t sub_1000E6BC4()
{
  unint64_t result;

  result = qword_1002B0A20;
  if (!qword_1002B0A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_1002B0A20);
  }
  return result;
}

unint64_t sub_1000E6C00()
{
  unint64_t result;

  result = qword_1002B28E0;
  if (!qword_1002B28E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1002B28E0);
  }
  return result;
}

unint64_t sub_1000E6C3C()
{
  unint64_t result;

  result = qword_1002B0A28;
  if (!qword_1002B0A28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_1002B0A28);
  }
  return result;
}

unint64_t sub_1000E6C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A9370;
  if (!qword_1002A9370)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1002A9370);
  }
  return result;
}

void sub_1000E6CB8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E6D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  return Data._Representation.replaceSubrange(_:with:count:)(v1, v0, &v5, BYTE6(v3));
}

uint64_t sub_1000E6EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if (v11)
    v16 = v15;
  else
    v16 = 0;
  return Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v11, v16);
}

ValueMetadata *type metadata accessor for TargetReadyReport()
{
  return &type metadata for TargetReadyReport;
}

uint64_t *initializeBufferWithCopyOfBuffer for HIDReport(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10002517C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for HIDReport(uint64_t a1)
{
  return sub_100022AEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for HIDReport(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10002517C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100022AEC(v5, v6);
  return a1;
}

uint64_t *assignWithTake for HIDReport(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100022AEC(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDReport(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for HIDReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetBeginReport()
{
  return &type metadata for TargetBeginReport;
}

uint64_t sub_1000E70F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return UUID.init(uuid:)(a3, a3 >> 8, a3 >> 16, a3 >> 24, HIDWORD(a3), a3 >> 40, HIWORD(a3), HIBYTE(a3));
}

uint64_t sub_1000E715C(unint64_t a1)
{
  return UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40, HIWORD(a1), HIBYTE(a1));
}

uint64_t sub_1000E71C4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.subscript.getter(0, v1, v0);
}

uint64_t sub_1000E71D4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1000E71F0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1000E71FC()
{
  return UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t sub_1000E7220()
{
  return type metadata accessor for __DataStorage(0);
}

uint64_t sub_1000E7234(uint64_t a1)
{
  return swift_willThrow(a1);
}

void sub_1000E7240(char a1)
{
  uint64_t v1;
  uint64_t v2;

  HIDReport.subscript.getter(a1, v2, v1);
}

uint64_t sub_1000E724C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, v2);
}

void sub_1000E7268(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, uint64_t a18)
{
  a17 = a2;
  a18 = a1;
  sub_1000E6A84((int *)&a17, 0);
}

uint64_t sub_1000E7290()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E72B4()
{
  return 225;
}

void sub_1000E72D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12)
{
  a12 = a1;
  sub_1000E6A84(&a11, 0);
}

uint64_t sub_1000E72E4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.count.getter(v1, v0);
}

uint64_t sub_1000E72F0@<X0>(uint64_t a1@<X8>)
{
  return Data._Representation.subscript.setter(1, a1 >> 3);
}

uint64_t sub_1000E7300()
{
  uint64_t v0;

  return v0;
}

void sub_1000E730C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  HIDReport.subscript.setter(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000E7314()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000E7324()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_1000E7334(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

uint64_t sub_1000E737C(uint64_t a1)
{
  return swift_willThrow(a1);
}

uint64_t sub_1000E7388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 20);
}

void sub_1000E7394(char a1, uint64_t a2)
{
  unint64_t v2;

  sub_100128154(a1, a2, v2);
}

Swift::Int sub_1000E739C(Swift::Int a1)
{
  return HIDReport.offset(for:)(a1);
}

uint64_t sub_1000E73A8(uint64_t a1, uint64_t a2)
{
  return Data.count.getter(a1, a2);
}

void sub_1000E73B0(uint64_t a1)
{
  sub_1000E4D78(a1, 48);
}

uint64_t sub_1000E73BC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_1000E73C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t PasteboardRepresentation.ID.label.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v5;

  v1 = UUID.uuidString.getter(a1);
  v3 = sub_1000599D0(8, v1, v2);
  v5._countAndFlagsBits = static String._fromSubstring(_:)(v3);
  sub_10002DA00(v5);
  sub_10000E410();
  sub_10000E594();
  return 0x3A47415244;
}

void PasteboardRepresentation.__allocating_init(id:order:typeIdentifier:superTypes:name:context:)()
{
  uint64_t v0;

  sub_10002626C();
  sub_1000F0008();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  PasteboardRepresentation.init(id:order:typeIdentifier:superTypes:name:context:)();
  sub_10000E4E0();
}

void PasteboardItem.__allocating_init(representations:presentationStyle:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1000323A8();
  swift_allocObject(v4, v5, v6);
  PasteboardItem.init(representations:presentationStyle:)(a1, a2);
  sub_10000B350();
}

uint64_t PasteboardContents.__allocating_init(_:items:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v2 = v1;
  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  v4 = (uint64_t *)(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice);
  sub_10000B2F8(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice, (uint64_t)v11, 0);
  v5 = *v4;
  if (v5)
  {
    swift_retain();
    v7 = dispatch thunk of UniversalControlDevice.id.getter(v6);
    v9 = v8;
    swift_release();
    v5 = swift_allocObject(v2, 40, 7);
    PasteboardContents.init(_:source:items:)(v7, v9, a1);
  }
  else
  {
    sub_10000E410();
  }
  return v5;
}

void static PasteboardRepresentation.isInIncreasingOrder(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[4];

  sub_1000055B0(&qword_1002B0A30);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_1000F0204();
  v6 = PasteboardRepresentation.isDataType.getter();
  if (((v6 ^ PasteboardRepresentation.isDataType.getter()) & 1) != 0)
  {
    if ((PasteboardRepresentation.isDataType.getter() & 1) != 0)
      PasteboardRepresentation.isDataType.getter();
  }
  else if (*(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order) == *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order))
  {
    PasteboardRepresentation.typeWeight.getter();
    v8 = v7;
    PasteboardRepresentation.typeWeight.getter();
    if (v8 == v9)
    {
      v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
      v15[2] = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
      v15[3] = v10;
      v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
      v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
      v15[0] = v11;
      v15[1] = v12;
      v13 = type metadata accessor for Locale(0);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v2, 1, 1, v13);
      v14 = sub_100010CC8();
      sub_10003AFBC();
      sub_100043360();
      StringProtocol.compare<A>(_:options:range:locale:)(v15, 0, 0, 0, 1, v2, &type metadata for String, &type metadata for String, v14, v14);
      sub_100025A28(v2, &qword_1002B0A30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      PasteboardRepresentation.typeWeight.getter();
      PasteboardRepresentation.typeWeight.getter();
    }
  }
  sub_10002644C();
}

uint64_t PasteboardRepresentation.type.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  v3 = *(_QWORD *)(v1 + 8);
  sub_100043360();
  return UTType.init(_:)(v2, v3);
}

uint64_t sub_1000E77A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  if (result < 0)
  {
LABEL_17:
    __break(1u);
  }
  else
  {
    v3 = result;
    v5 = *v2;
    v6 = v2[1];
    v7 = v2[2];
    v8 = *((unsigned __int8 *)v2 + 24);
    v9 = v2[4];
    v10 = v2[5];
    v16 = *((_BYTE *)v2 + 48);
    if (result)
    {
      if ((v2[6] & 1) == 0)
      {
        v11 = *((unsigned __int8 *)v2 + 24);
        v12 = v6;
        v13 = v7;
        while ((v8 & 1) == 0)
        {
          if ((_DWORD)v13 != (_DWORD)v10)
          {
            __break(1u);
            goto LABEL_17;
          }
          if (v12 == v9)
          {
            v8 = 0;
            v12 = v9;
            v13 = v10;
            goto LABEL_12;
          }
          result = sub_10019D074(v12, v13, 0, v5);
          v12 = result;
          v13 = v14;
          v8 = v15 & 1;
          if (!--v3)
            goto LABEL_12;
        }
      }
      goto LABEL_20;
    }
    v12 = v2[1];
    v13 = v2[2];
    v11 = *((unsigned __int8 *)v2 + 24);
LABEL_12:
    if (((v8 | v11) & 1) != 0)
      goto LABEL_21;
    sub_10005E1FC(v6, v7, 0);
    result = sub_100025618(v9, v10, v16 & 1);
    if ((_DWORD)v13 == (_DWORD)v7)
    {
      if (v12 >= v6)
      {
        *(_QWORD *)a2 = v5;
        *(_QWORD *)(a2 + 8) = v6;
        *(_QWORD *)(a2 + 16) = v7;
        *(_BYTE *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = v12;
        *(_QWORD *)(a2 + 40) = v13;
        *(_BYTE *)(a2 + 48) = 0;
        return result;
      }
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1000E78E0(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1000EDB84(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

void sub_1000E794C(uint64_t a1)
{
  sub_1000E7958(a1, (uint64_t (*)(uint64_t))sub_100177088);
}

void sub_1000E7958(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000E5C0(a1);
  v4 = a2(a1);
  sub_1000F0038(v4, v5, v6);
  sub_10000E410();
  sub_10004740C();
  sub_10000E59C();
}

void sub_1000E7990(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E79C8(uint64_t a1)
{
  String.hash(into:)(a1, 0x726564726FLL, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1000E7A5C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E7A98(uint64_t a1)
{
  String.hash(into:)(a1, 0x656369766564, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1000E7B68(uint64_t a1, uint64_t a2)
{
  sub_1000E7B74(a1, a2, (uint64_t (*)(uint64_t))sub_100177088);
}

void sub_1000E7B74(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000A3780(a1, a2);
  v5 = a3(a2);
  sub_1000F0038(v5, v6, v7);
  sub_10000E410();
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_1000E7BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * v7);
        swift_retain(v8);
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
      v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier) == a2
         && v10 == a3;
      if (v11
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v8 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier), v10, a2, a3, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(a1);
        return v8;
      }
      swift_release(v8);
      ++v7;
      if (v9 == v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_1000E7D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  void *v10;
  void *v11;
  _QWORD aBlock[6];

  v1 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_1000268CC();
  v3 = sub_1000269D4();
  swift_storeEnumTagMultiPayload(v3, v4, 12);
  sub_1000EDAD4((uint64_t)&qword_1002AA518);
  v6 = swift_allocError(v1, v5, 0, 0);
  sub_1000EDA70(v0, v7, type metadata accessor for PasteboardAcquisitionError);
  v8 = (void *)_convertErrorToNSError(_:)(v6);
  v9 = objc_msgSend(v8, "domain");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    sub_10000E594();
  }
  swift_errorRelease(v6);
  v10 = (void *)objc_opt_self(NSError);
  aBlock[4] = sub_1000E7E7C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E894C;
  aBlock[3] = &unk_10028B8B0;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v10, "setUserInfoValueProviderForDomain:provider:", v9, v11);
  _Block_release(v11);

}

void sub_1000E7E68()
{
  qword_1002B6FA0 = (uint64_t)&off_100280FC0;
}

void sub_1000E7E7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_1000055B0((uint64_t *)&unk_1002ADCA0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  swift_errorRetain(a1);
  v14 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v10, &v22, v14, v11, 6) & 1) == 0)
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 1, 1, v11);
    sub_100025A28((uint64_t)v10, (uint64_t *)&unk_1002ADCA0);
    goto LABEL_9;
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v11);
  sub_1000EDA70((uint64_t)v10, (uint64_t)v13, type metadata accessor for PasteboardAcquisitionError);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  if (v15 == a2 && v16 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardAcquisitionError);
LABEL_9:
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return;
    }
  }
  PasteboardAcquisitionError.description.getter();
  *(_QWORD *)(a4 + 24) = &type metadata for String;
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v20;
  sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardAcquisitionError);
}

void PasteboardAcquisitionError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;

  v1 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_1000F0204();
  v3 = sub_100026B88();
  sub_1000EDC10(v3, v4, v5);
  v6 = (char *)sub_1000E80D0 + 4 * byte_100223E9E[swift_getEnumCaseMultiPayload(v0, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1000E80D0(uint64_t a1)
{
  uint64_t v1;

  sub_1000F00DC(a1, type metadata accessor for PasteboardAcquisitionError);
  return v1 + 24;
}

uint64_t sub_1000E81F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;
  unint64_t v26;
  char v28;

  if (a1 == 0x6265747361506F6ELL && a2 == 0xEC0000006472616FLL)
  {
    v5 = 0xEC0000006472616FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6265747361506F6ELL, 0xEC0000006472616FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6553617461446F6ELL && a2 == 0xED00006E6F697373)
  {
    v8 = 0xED00006E6F697373;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6553617461446F6ELL, 0xED00006E6F697373, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100257790;
    if (a2 == 0x8000000100257790)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100257790, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x66736E6172546F6ELL && a2 == 0xEA00000000007265)
  {
    v11 = 0xEA00000000007265;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x66736E6172546F6ELL, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x7669656365526F6ELL && a2 == 0xEA00000000007265)
  {
    v13 = 0xEA00000000007265;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7669656365526F6ELL, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6E6F43676E6F7277 && a2 == 0xEC00000074786574)
  {
    v15 = 0xEC00000074786574;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F43676E6F7277, 0xEC00000074786574, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0xD000000000000010)
  {
    v16 = 0x80000001002577B0;
    if (a2 == 0x80000001002577B0)
      goto LABEL_50;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002577B0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0x6C6961466E65706FLL && a2 == 0xEA00000000006465)
  {
    v18 = 0xEA00000000006465;
    goto LABEL_58;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6961466E65706FLL, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if (a1 == 0x52556F4E6E65706FLL && a2 == 0xE90000000000004CLL)
  {
    v20 = 0xE90000000000004CLL;
    goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x52556F4E6E65706FLL, 0xE90000000000004CLL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v20);
    return 8;
  }
  if (a1 == 1684104562 && a2 == 0xE400000000000000)
  {
    v22 = 0xE400000000000000;
    goto LABEL_74;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684104562, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_74:
    swift_bridgeObjectRelease(v22);
    return 9;
  }
  if (a1 == 0x6961466574697277 && a2 == 0xEB0000000064656CLL)
  {
    v24 = 0xEB0000000064656CLL;
    goto LABEL_82;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6961466574697277, 0xEB0000000064656CLL, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_82:
    swift_bridgeObjectRelease(v24);
    return 10;
  }
  if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064)
  {
    v26 = 0xE900000000000064;
    goto LABEL_90;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C6C65636E6163, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v26);
    return 11;
  }
  if (a1 == 0x636972656E6567 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 12;
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636972656E6567, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v28 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t static ReportID.navigationSwipe.getter()
{
  return 13;
}

uint64_t sub_1000E876C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E87A8 + 4 * byte_100223EAB[a1]))(0x6265747361506F6ELL, 0xEC0000006472616FLL);
}

uint64_t sub_1000E87A8()
{
  return 0x6553617461446F6ELL;
}

unint64_t sub_1000E87CC()
{
  return 0xD000000000000010;
}

uint64_t sub_1000E8844()
{
  return 0x6C6961466E65706FLL;
}

uint64_t sub_1000E8864()
{
  return 0x52556F4E6E65706FLL;
}

uint64_t sub_1000E8880()
{
  return 1684104562;
}

uint64_t sub_1000E8890()
{
  return 0x6961466574697277;
}

uint64_t sub_1000E88B0()
{
  return 0x656C6C65636E6163;
}

uint64_t sub_1000E88D0()
{
  return 0x636972656E6567;
}

void sub_1000E88E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    sub_10000E410();
  }
  sub_1000050D4();
}

id sub_1000E894C(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v4)(_QWORD *__return_ptr);
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v13[3];
  uint64_t v14;

  v4 = *(void (**)(_QWORD *__return_ptr))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  swift_retain();
  v5 = a2;
  v4(v13);
  swift_release();

  swift_bridgeObjectRelease();
  v6 = v14;
  if (!v14)
    return 0;
  v7 = sub_10000DBE4(v13, v14);
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v10);
  v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v10, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  sub_100005988(v13);
  return v11;
}

uint64_t sub_1000E8A58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED854();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8A80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED854();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8AA8()
{
  unsigned __int8 *v0;

  return sub_1000E876C(*v0);
}

uint64_t sub_1000E8AB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E81F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E8AD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.navigationSwipe.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000E8AF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED7DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8B20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED7DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8B48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED980();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8B70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED980();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8B98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED818();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8BC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED818();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8BE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDB0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8C10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDB0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8C38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDB48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8C60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDB48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED9F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED9F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8CD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDA98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8D00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDA98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8D28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDA34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8D50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDA34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8D78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED944();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8DA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED944();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8DC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED908();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8DF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED908();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000E8E18(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_1000E88E8(a1, a2);
  *a3 = v4 & 1;
}

uint64_t sub_1000E8E40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED8CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8E68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED8CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8E90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8EB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED890();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8EE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED9BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8F08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ED9BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardAcquisitionError.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80[5];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  sub_10003AFC4();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v24 = sub_1000055B0(&qword_1002B0A38);
  v99 = *(_QWORD *)(v24 - 8);
  v100[0] = v24;
  sub_1000262EC();
  __chkstk_darwin(v25);
  sub_1000F010C(v26, v80[0]);
  v27 = sub_1000055B0(&qword_1002B0A40);
  v97 = *(_QWORD *)(v27 - 8);
  v98 = v27;
  sub_1000262EC();
  __chkstk_darwin(v28);
  sub_1000EFF34(v29, v80[0]);
  v94 = sub_1000055B0(&qword_1002B0A48);
  v93 = *(_QWORD *)(v94 - 8);
  sub_1000262EC();
  __chkstk_darwin(v30);
  sub_1000F00F0(v31, v80[0]);
  v96 = sub_1000055B0(&qword_1002B0A50);
  v95 = *(_QWORD *)(v96 - 8);
  sub_1000262EC();
  __chkstk_darwin(v32);
  sub_1000A3698(v33, v80[0]);
  v90 = sub_1000055B0(&qword_1002B0A58);
  v89 = *(_QWORD *)(v90 - 8);
  sub_1000262EC();
  __chkstk_darwin(v34);
  sub_10000E5DC();
  sub_1000A3740(v35);
  v36 = sub_1000055B0(&qword_1002B0A60);
  v91 = *(_QWORD *)(v36 - 8);
  v92 = v36;
  sub_1000262EC();
  __chkstk_darwin(v37);
  sub_1000A3740((uint64_t)v80 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_1000055B0(&qword_1002B0A68);
  sub_1000A353C(v39, (uint64_t)&a15);
  v88 = v40;
  sub_1000262EC();
  __chkstk_darwin(v41);
  sub_10000E5DC();
  sub_1000A3740(v42);
  v43 = sub_1000055B0(&qword_1002B0A70);
  sub_1000A353C(v43, (uint64_t)&a12);
  v87 = v44;
  sub_1000262EC();
  __chkstk_darwin(v45);
  sub_10000E5DC();
  sub_1000A3740(v46);
  v47 = sub_1000055B0(&qword_1002B0A78);
  sub_1000A353C(v47, (uint64_t)&v103);
  v85 = v48;
  sub_1000262EC();
  __chkstk_darwin(v49);
  sub_10000E5DC();
  sub_1000A3740(v50);
  v51 = sub_1000055B0(&qword_1002B0A80);
  sub_1000A353C(v51, (uint64_t)&a10);
  v86 = v52;
  sub_1000262EC();
  __chkstk_darwin(v53);
  sub_10000E5DC();
  v55 = sub_1000F0190(v54);
  v84 = type metadata accessor for PasteboardDataTransferID(v55);
  sub_1000262EC();
  __chkstk_darwin(v56);
  sub_10000E5DC();
  sub_1000A3740(v57);
  v58 = sub_1000055B0(&qword_1002B0A88);
  sub_1000A353C(v58, (uint64_t)v100);
  v83 = v59;
  sub_1000262EC();
  __chkstk_darwin(v60);
  sub_10000E5DC();
  v62 = sub_1000F0190(v61);
  v82 = type metadata accessor for PasteboardRepresentation.ID(v62);
  sub_1000262EC();
  __chkstk_darwin(v63);
  sub_10000E5DC();
  sub_1000A3740(v64);
  v81 = sub_1000055B0(&qword_1002B0A90);
  v80[4] = *(_QWORD *)(v81 - 8);
  sub_1000262EC();
  __chkstk_darwin(v65);
  sub_10000E5DC();
  v67 = sub_1000F0190(v66);
  v80[1] = type metadata accessor for PasteboardDataSession.ID(v67);
  sub_1000262EC();
  __chkstk_darwin(v68);
  sub_10000E5DC();
  sub_1000A3740(v69);
  v70 = sub_1000055B0(&qword_1002B0A98);
  __chkstk_darwin(v70);
  v71 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_1000262EC();
  __chkstk_darwin(v72);
  v74 = (char *)v80 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1000055B0(&qword_1002B0AA0);
  v100[1] = *(_QWORD *)(v101 - 8);
  sub_1000262EC();
  __chkstk_darwin(v75);
  sub_10000E478();
  v77 = v23[3];
  v76 = v23[4];
  sub_10000DBE4(v23, v77);
  v78 = sub_1000ED7DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PasteboardAcquisitionError.CodingKeys, &type metadata for PasteboardAcquisitionError.CodingKeys, v78, v77, v76);
  sub_1000EDC10(v102, (uint64_t)v74, type metadata accessor for PasteboardAcquisitionError);
  v79 = (char *)sub_1000E9358 + 4 * byte_100223EB8[swift_getEnumCaseMultiPayload(v74, v71)];
  __asm { BR              X10 }
}

void sub_1000E9358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_1000EFFB4(v1, v2 - 208);
  sub_1000F0354();
  v3 = *(_QWORD *)(v2 - 456);
  v5 = *(_QWORD *)(v2 - 128);
  v4 = *(_QWORD *)(v2 - 120);
  sub_1000EFEF8((uint64_t)&type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys, v2 - 92);
  sub_1000F0074((uint64_t)&qword_1002AE380);
  v6 = *(_QWORD *)(v2 - 440);
  sub_1000EFFA4(v0, v8, v6, v7, v2 - 216);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 448) + 8))(v3, v6);
  sub_1000255F0(v0, type metadata accessor for PasteboardDataSession.ID);
  sub_1000F02DC();
  v9(v5, v4);
  sub_10003AF60();
}

void PasteboardAcquisitionError.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113[19];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;

  sub_10003AFC4();
  a19 = v22;
  a20 = v23;
  v136 = v20;
  v25 = v24;
  v128 = v26;
  v130 = sub_1000055B0(&qword_1002B0B18);
  v119 = *(_QWORD *)(v130 - 8);
  sub_1000262EC();
  __chkstk_darwin(v27);
  sub_10000E5DC();
  v127 = v28;
  v29 = sub_1000055B0(&qword_1002B0B20);
  sub_1000A353C(v29, (uint64_t)&a16);
  v118 = v30;
  sub_1000262EC();
  __chkstk_darwin(v31);
  sub_10000E5DC();
  v126 = v32;
  v33 = sub_1000055B0(&qword_1002B0B28);
  sub_1000A353C(v33, (uint64_t)&a13);
  v117 = v34;
  sub_1000262EC();
  __chkstk_darwin(v35);
  sub_1000EFF34(v36, v113[0]);
  v37 = sub_1000055B0(&qword_1002B0B30);
  sub_1000A353C(v37, (uint64_t)&a14);
  v113[10] = v38;
  sub_1000262EC();
  __chkstk_darwin(v39);
  sub_10000E5DC();
  v122 = v40;
  v41 = sub_1000055B0(&qword_1002B0B38);
  sub_1000A353C(v41, (uint64_t)&a10);
  v116 = v42;
  sub_1000262EC();
  __chkstk_darwin(v43);
  sub_10000E5DC();
  v124 = v44;
  v45 = sub_1000055B0(&qword_1002B0B40);
  sub_1000A353C(v45, (uint64_t)&a11);
  v113[9] = v46;
  sub_1000262EC();
  __chkstk_darwin(v47);
  sub_10000E5DC();
  v125 = v48;
  v49 = sub_1000055B0(&qword_1002B0B48);
  sub_1000A353C(v49, (uint64_t)&v137);
  v115 = v50;
  sub_1000262EC();
  __chkstk_darwin(v51);
  sub_1000A3698(v52, v113[0]);
  v53 = sub_1000055B0(&qword_1002B0B50);
  sub_1000A353C(v53, (uint64_t)&v135);
  v113[17] = v54;
  sub_1000262EC();
  __chkstk_darwin(v55);
  sub_1000F00F0(v56, v113[0]);
  v57 = sub_1000055B0(&qword_1002B0B58);
  sub_1000A353C(v57, (uint64_t)&v132);
  v113[14] = v58;
  sub_1000262EC();
  __chkstk_darwin(v59);
  sub_10000E5DC();
  v121 = v60;
  v114 = sub_1000055B0(&qword_1002B0B60);
  v113[8] = *(_QWORD *)(v114 - 8);
  sub_1000262EC();
  __chkstk_darwin(v61);
  sub_10000E5DC();
  v123 = v62;
  v63 = sub_1000055B0(&qword_1002B0B68);
  sub_1000A353C(v63, (uint64_t)&v133);
  v133 = v64;
  sub_1000262EC();
  __chkstk_darwin(v65);
  sub_1000F010C(v66, v113[0]);
  v67 = sub_1000055B0(&qword_1002B0B70);
  sub_1000A353C(v67, (uint64_t)&v130);
  v113[7] = v68;
  sub_1000262EC();
  __chkstk_darwin(v69);
  sub_10000E5DC();
  v120 = v70;
  v71 = sub_1000055B0(&qword_1002B0B78);
  sub_1000A353C(v71, (uint64_t)&v129);
  v113[11] = v72;
  sub_1000262EC();
  __chkstk_darwin(v73);
  sub_1000A3740((uint64_t)v113 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
  v134 = sub_1000055B0(&qword_1002B0B80);
  v132 = *(_QWORD *)(v134 - 8);
  sub_1000262EC();
  __chkstk_darwin(v75);
  sub_1000A3710();
  v131 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_1000262EC();
  __chkstk_darwin(v76);
  v113[6] = (uint64_t)v113 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  v80 = (char *)v113 - v79;
  __chkstk_darwin(v81);
  v83 = (char *)v113 - v82;
  __chkstk_darwin(v84);
  v86 = (char *)v113 - v85;
  __chkstk_darwin(v87);
  v89 = (char *)v113 - v88;
  __chkstk_darwin(v90);
  v92 = (char *)v113 - v91;
  v93 = v25[3];
  v94 = v25[4];
  v135 = v25;
  sub_10000DBE4(v25, v93);
  v95 = sub_1000ED7DC();
  v96 = v136;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardAcquisitionError.CodingKeys, &type metadata for PasteboardAcquisitionError.CodingKeys, v95, v93, v94);
  if (v96)
  {
    v97 = v135;
  }
  else
  {
    v113[3] = (uint64_t)v89;
    v113[2] = (uint64_t)v80;
    v113[4] = (uint64_t)v86;
    v113[5] = (uint64_t)v83;
    v136 = v92;
    v98 = KeyedDecodingContainer.allKeys.getter(v134);
    v99 = *(_QWORD *)(v98 + 16);
    if (v99)
    {
      v113[1] = 0;
      v100 = *(unsigned __int8 *)(v98 + 32);
      sub_1000EFDFC(1, v99, v98, v98 + 32, 0, (2 * v99) | 1);
      v102 = v101;
      v104 = v103;
      swift_bridgeObjectRelease();
      if (v102 == v104 >> 1)
        __asm { BR              X9 }
    }
    v105 = v134;
    v97 = v135;
    v106 = v131;
    v107 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v107, (uint64_t)&protocol witness table for DecodingError);
    v109 = v108;
    sub_1000055B0(&qword_1002ABBD0);
    *v109 = v106;
    v110 = KeyedDecodingContainer.codingPath.getter(v105);
    sub_1000A36F0(v110, v111, 0x8000000100253AD0);
    v112 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v107 - 8) + 104))(v109, enum case for DecodingError.typeMismatch(_:), v107);
    swift_willThrow(v112);
    sub_1000EFEE8();
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v21, v105);
  }
  sub_100005988(v97);
  sub_10003AF60();
}

void sub_1000E9D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000F0354();
  v3 = *(_QWORD *)(v2 - 256);
  sub_1000EFE94((uint64_t)&type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys, v2 - 92);
  sub_1000EFF28();
  if (!v0)
  {
    type metadata accessor for PasteboardDataSession.ID(0);
    sub_1000EFF80((uint64_t)&unk_1002AE2C0);
    v4 = *(_QWORD *)(v2 - 488);
    sub_1000F021C();
    sub_1000A3584(v5, v6, v7, v8);
    v9 = *(_QWORD *)(v2 - 136);
    sub_1000850C0(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 456) + 8));
    sub_1000EFEE8();
    (*(void (**)(uint64_t, _QWORD))(v9 + 8))(v1, *(_QWORD *)(v2 - 120));
    swift_storeEnumTagMultiPayload(v4, *(_QWORD *)(v2 - 144), 0);
    sub_1000F0264(v4, v10, type metadata accessor for PasteboardAcquisitionError);
    JUMPOUT(0x1000EA218);
  }
  sub_1000EFEE8();
  JUMPOUT(0x1000E9CFCLL);
}

void sub_1000E9DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  sub_1000F0314();
  sub_1000EFEB0((uint64_t)&type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys, v3 - 91, *(_QWORD *)(v3 - 120));
  if (v0)
  {
    sub_1000EFEE8();
    sub_1000F02DC();
    sub_1000EFF5C(v9);
    JUMPOUT(0x1000E9B5CLL);
  }
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000EFF80((uint64_t)&unk_1002AE308);
  sub_1000F021C();
  sub_1000A3584(v4, v5, v6, v7);
  v8 = *(_QWORD *)(v3 - 136);
  sub_1000850C0(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000EFEE8();
  sub_1000EFF5C(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  v10 = *(_QWORD *)(v3 - 480);
  swift_storeEnumTagMultiPayload(v10, *(_QWORD *)(v3 - 144), 1);
  sub_1000F0264(v10, v11, type metadata accessor for PasteboardAcquisitionError);
  JUMPOUT(0x1000EA218);
}

void sub_1000E9DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000F02E8();
  v2 = *(_QWORD *)(v1 - 224);
  sub_1000EFEB0((uint64_t)&type metadata for PasteboardAcquisitionError.NoTransferCodingKeys, v1 - 90, *(_QWORD *)(v1 - 120));
  sub_1000EFF28();
  if (!v0)
  {
    type metadata accessor for PasteboardDataTransferID(0);
    sub_1000EFF80((uint64_t)&unk_1002AE2C8);
    sub_1000F021C();
    sub_1000A3584(v3, v4, v5, v6);
    v7 = *(_QWORD *)(v1 - 136);
    sub_1000850C0(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 448) + 8));
    sub_1000EFEE8();
    sub_1000EFF5C(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    v8 = *(_QWORD *)(v1 - 472);
    swift_storeEnumTagMultiPayload(v8, *(_QWORD *)(v1 - 144), 2);
    sub_1000F0264(v8, v9, type metadata accessor for PasteboardAcquisitionError);
    sub_1000EDA70(v8, *(_QWORD *)(v1 - 168), type metadata accessor for PasteboardAcquisitionError);
    JUMPOUT(0x1000E9D00);
  }
  sub_1000EFEE8();
  sub_1000F02DC();
  JUMPOUT(0x1000E9CFCLL);
}

void sub_1000EA064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;

  sub_1000F0244();
  sub_1000EFE94((uint64_t)&type metadata for PasteboardAcquisitionError.WriteFailedCodingKeys, v2 - 67);
  sub_1000EFF28();
  if (!v1)
  {
    v3 = sub_1000EFF18();
    sub_1000EFF78(v3, v4);
    sub_1000EFEE8();
    sub_1000EFEC0();
    v5 = sub_1000EFF08();
    swift_storeEnumTagMultiPayload(v5, v6, 10);
    sub_1000EDA70(v0, *(_QWORD *)(v2 - 168), type metadata accessor for PasteboardAcquisitionError);
    JUMPOUT(0x1000E9D00);
  }
  sub_1000EFEE8();
  JUMPOUT(0x1000E9CFCLL);
}

void sub_1000EA0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;

  sub_1000F0360();
  sub_1000EFE94((uint64_t)&type metadata for PasteboardAcquisitionError.CancelledCodingKeys, v2 - 66);
  sub_1000EFF28();
  if (!v1)
  {
    v3 = sub_1000EFF18();
    sub_1000EFF78(v3, v4);
    sub_1000EFEE8();
    sub_1000EFEC0();
    v5 = sub_1000EFF08();
    swift_storeEnumTagMultiPayload(v5, v6, 11);
    sub_1000EDA70(v0, *(_QWORD *)(v2 - 168), type metadata accessor for PasteboardAcquisitionError);
    JUMPOUT(0x1000E9D00);
  }
  sub_1000EFEE8();
  JUMPOUT(0x1000E9CFCLL);
}

void sub_1000EA0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000F0348();
  v3 = *(_QWORD *)(v2 - 176);
  sub_1000EFEB0((uint64_t)&type metadata for PasteboardAcquisitionError.GenericCodingKeys, v2 - 65, *(_QWORD *)(v2 - 120));
  sub_1000EFF28();
  if (v0)
    JUMPOUT(0x1000EA124);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v3, v1);
  sub_1000EFEE8();
  sub_1000EFEC0();
  sub_1000EFF08();
  JUMPOUT(0x1000EA214);
}

#error "1000EA3A0: call analysis failed (funcsize=5)"

#error "1000EA3B4: call analysis failed (funcsize=5)"

uint64_t PasteboardRepresentation.ID.uuid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10000E440();
  sub_1000C26F8();
  v0 = sub_10000E4F8();
  return sub_100084F8C(v0, v1, v2, v3);
}

uint64_t PasteboardRepresentation.ID.uuid.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_10000E440();
  sub_1000C26F8();
  v0 = sub_100026B88();
  return sub_100084F8C(v0, v1, v2, v3);
}

uint64_t PasteboardRepresentation.ID.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v3;

  v0 = sub_10000E440();
  sub_1000EFF80((uint64_t)&qword_1002AA670);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  sub_10002DA00(v3);
  sub_10000E410();
  return 0x3A47415244;
}

uint64_t PasteboardRepresentation.ID.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  Hasher._combine(_:)(0);
  v2 = sub_10000E440();
  sub_1000EFF80((uint64_t)&qword_1002AD0B0);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t sub_1000EA4E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDBD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EA510(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDBD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardRepresentation.ID.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = v0;
  v5 = sub_1000055B0(&qword_1002B0B88);
  sub_1000C259C();
  __chkstk_darwin(v6);
  sub_10000E478();
  sub_1000EFFE8();
  v7 = sub_1000EDBD4();
  sub_100084FF4((uint64_t)&type metadata for PasteboardRepresentation.ID.CodingKeys, v8, v7);
  v13 = 0;
  v9 = sub_1000A24DC();
  sub_1000C27D0(v9, (uint64_t)&v13, v5, (uint64_t)&type metadata for PasteboardType, v9);
  if (!v1)
  {
    v12 = 1;
    v10 = sub_10000E440();
    sub_1000EFF80((uint64_t)&qword_1002AF0D8);
    sub_1000C27D0(v4, (uint64_t)&v12, v5, v10, v11);
  }
  sub_100060064(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1000C260C();
}

Swift::Int PasteboardRepresentation.ID.hashValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  sub_10000E5C0(a1);
  sub_100047454();
  v1 = sub_10000E440();
  sub_1000EFF80((uint64_t)&qword_1002AD0B0);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return sub_10004740C();
}

void PasteboardRepresentation.ID.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10003AFC4();
  a22 = v27;
  a23 = v28;
  v30 = v29;
  v41 = v31;
  v32 = sub_10000E440();
  v39 = *(_QWORD *)(v32 - 8);
  v40 = v32;
  sub_1000262EC();
  __chkstk_darwin(v33);
  sub_100065E48();
  v42 = sub_1000055B0(&qword_1002B0B98);
  sub_1000C259C();
  __chkstk_darwin(v34);
  sub_1000432FC();
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v35);
  sub_10000E478();
  v36 = v30[3];
  v37 = v30[4];
  sub_10000DBE4(v30, v36);
  v38 = sub_1000EDBD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardRepresentation.ID.CodingKeys, &type metadata for PasteboardRepresentation.ID.CodingKeys, v38, v36, v37);
  if (!v23)
  {
    a13 = 0;
    sub_1000A226C();
    sub_1000C27E8((uint64_t)&type metadata for PasteboardType, (uint64_t)&a13, v42, (uint64_t)&type metadata for PasteboardType);
    a12 = 1;
    sub_1000EFF80((uint64_t)&qword_1002AF0E8);
    sub_1000C27E8(v40, (uint64_t)&a12, v42, v40);
    sub_1000EFF50(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v24, v25, v40);
    sub_1000EDA70(v24, v41, type metadata accessor for PasteboardRepresentation.ID);
  }
  sub_100005988(v30);
  sub_10003AF60();
}

#error "1000EA850: call analysis failed (funcsize=5)"

void sub_1000EA85C()
{
  PasteboardRepresentation.ID.encode(to:)();
}

Swift::Int sub_1000EA87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(0);
  v1 = type metadata accessor for UUID(0);
  sub_1000EDAD4((uint64_t)&qword_1002AD0B0);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void PasteboardRepresentation.id.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000EDC10(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, a1, type metadata accessor for PasteboardRepresentation.ID);
}

void PasteboardRepresentation.name.getter()
{
  sub_10003AFBC();
  sub_10000E4F8();
  sub_1000050D4();
}

uint64_t PasteboardRepresentation.order.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order);
}

void PasteboardRepresentation.typeIdentifier.getter()
{
  sub_10003AFBC();
  sub_10000E4F8();
  sub_1000050D4();
}

uint64_t PasteboardRepresentation.superTypes.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_superTypes));
}

void PasteboardRepresentation.context.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, (uint64_t)v3, 0);
  v1 = sub_100026B88();
  sub_1000EDC38(v1, v2);
  sub_100015540();
}

void PasteboardRepresentation.context.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, (uint64_t)v3, 33);
  v1 = sub_10000E4F8();
  sub_1000EDC80(v1, v2);
  swift_endAccess(v3);
  sub_100015540();
}

void PasteboardRepresentation.context.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, a1, 33);
  sub_1000050D4();
}

unint64_t sub_1000EAA6C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002811A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_1000EAAB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000EAAE4 + 4 * byte_100223EE0[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1000EAAE4()
{
  return 0x726564726FLL;
}

uint64_t sub_1000EAAF8()
{
  return sub_1000F032C();
}

uint64_t sub_1000EAB08()
{
  return 0x6E65644965707974;
}

uint64_t sub_1000EAB2C()
{
  return 0x7079547265707573;
}

uint64_t sub_1000EAB4C()
{
  return 1684632949;
}

uint64_t sub_1000EAB58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000EAB84 + 4 * byte_100223EE6[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1000EAB84()
{
  return 0x726564726FLL;
}

uint64_t sub_1000EAB98()
{
  return 0x616F626574736170;
}

uint64_t sub_1000EABB4()
{
  return 0x6E65644965707974;
}

uint64_t sub_1000EABD8()
{
  return 0x7079547265707573;
}

uint64_t sub_1000EABF8()
{
  return 1684632949;
}

void sub_1000EAC04(char *a1)
{
  sub_10008B30C(*a1);
}

void sub_1000EAC10()
{
  unsigned __int8 *v0;

  sub_1000E7958(*v0, (uint64_t (*)(uint64_t))sub_1000EAAB8);
}

void sub_1000EAC30(uint64_t a1)
{
  char *v1;

  sub_1000E7990(a1, *v1);
}

void sub_1000EAC38(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1000E7B74(a1, *v1, (uint64_t (*)(uint64_t))sub_1000EAAB8);
}

unint64_t sub_1000EAC58@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000EAA6C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000EAC84@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000EAAB8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000EACAC()
{
  unsigned __int8 *v0;

  return sub_1000EAB58(*v0);
}

uint64_t sub_1000EACB4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000EAAB4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000EACD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDCC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EAD00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDCC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PasteboardRepresentation.init(id:order:typeIdentifier:superTypes:name:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE v13[24];

  sub_1000F0008();
  v8 = v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  sub_1000EDA70(v9, v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, type metadata accessor for PasteboardRepresentation.ID);
  sub_10000B2F8(v8, (uint64_t)v13, 33);
  sub_1000EDC80(v0, v8);
  swift_endAccess(v13);
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name);
  *v10 = v3;
  v10[1] = v2;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order) = v7;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_superTypes) = v4;
  v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  *v11 = v6;
  v11[1] = v5;
  return v1;
}

void PasteboardRepresentation.__allocating_init(from:)()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_1000F0180();
  PasteboardRepresentation.init(from:)();
  sub_1000F0080();
}

void PasteboardRepresentation.init(from:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  sub_10003AFC4();
  v4 = v3;
  v32 = *v0;
  v27 = sub_10000E440();
  v25 = *(_QWORD *)(v27 - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_1000EFF34(v6, v24);
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_1000432FC();
  v28 = sub_1000055B0(&qword_1002B0BA0);
  sub_1000EFF68();
  __chkstk_darwin(v8);
  sub_1000A3710();
  v9 = (uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  v11 = v4[3];
  v10 = v4[4];
  sub_10000DBE4(v4, v11);
  v12 = sub_1000EDCC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardRepresentation.CodingKeys, &type metadata for PasteboardRepresentation.CodingKeys, v12, v11, v10);
  if (v1)
  {
    sub_100025A28((uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, &qword_1002AA510);
    swift_deallocPartialClassInstance(v0, v32, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
    sub_10008503C();
  }
  else
  {
    LOBYTE(v30[0]) = 2;
    sub_1000A226C();
    sub_1000F0138((uint64_t)&type metadata for PasteboardType, (uint64_t)v30, v28, (uint64_t)&type metadata for PasteboardType);
    LOBYTE(v30[0]) = 5;
    sub_1000EFF80((uint64_t)&qword_1002AF0E8);
    sub_1000F0138(v27, (uint64_t)v30, v28, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v2, v26, v27);
    v13 = v0;
    sub_1000EDC10(v2, (uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, type metadata accessor for PasteboardRepresentation.ID);
    v14 = sub_1000055B0(&qword_1002B0BB0);
    v29[0] = 0;
    sub_1000EDD04((uint64_t)&unk_1002B0BB8);
    sub_1000F0138(v14, (uint64_t)v29, v28, v14);
    *(_OWORD *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name) = v30[0];
    LOBYTE(v30[0]) = 1;
    *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order) = KeyedDecodingContainer.decode(_:forKey:)(v30, v28);
    LOBYTE(v30[0]) = 3;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(v30, v28);
    v16 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
    *v16 = v15;
    v16[1] = v17;
    v18 = sub_1000055B0((uint64_t *)&unk_1002AC160);
    v29[0] = 4;
    sub_1000EDD04((uint64_t)&qword_1002AD110);
    v21 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, v18, v29, v28, v18, v19, v20);
    if (*(_QWORD *)&v30[0])
      v22 = *(_QWORD **)&v30[0];
    else
      v22 = _swiftEmptyArrayStorage;
    sub_1000F0378((uint64_t)v21, type metadata accessor for PasteboardRepresentation.ID);
    sub_1000EFF98();
    *(uint64_t *)((char *)v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_superTypes) = (uint64_t)v22;
    v31 = 0;
    memset(v30, 0, sizeof(v30));
    v23 = (uint64_t)v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
    sub_10000B2F8((uint64_t)v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, (uint64_t)v29, 33);
    sub_1000EDC80((uint64_t)v30, v23);
    swift_endAccess(v29);
    sub_10008503C();
  }
  sub_10003AF60();
}

void PasteboardRepresentation.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  sub_10003AFC4();
  v3 = v0;
  v5 = v4;
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_100065E48();
  v7 = sub_1000055B0(&qword_1002B0BC0);
  __chkstk_darwin(v7);
  sub_1000268CC();
  v8 = v5[3];
  v9 = v5[4];
  sub_10000DBE4(v5, v8);
  v10 = sub_1000EDCC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PasteboardRepresentation.CodingKeys, &type metadata for PasteboardRepresentation.CodingKeys, v10, v8, v9);
  v11 = OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id;
  LOBYTE(v19) = 2;
  sub_1000A24DC();
  sub_10003AF78();
  if (!v1)
  {
    sub_1000EDC10(v3 + v11, v2, type metadata accessor for PasteboardRepresentation.ID);
    LOBYTE(v19) = 5;
    sub_10000E440();
    sub_1000EFF80((uint64_t)&qword_1002AF0D8);
    sub_10003AF78();
    v14 = sub_1000F02F4();
    v15(v14);
    v19 = *(_OWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name);
    sub_1000055B0(&qword_1002B0BB0);
    sub_1000EDD04((uint64_t)&unk_1002B0BC8);
    sub_10003AF78();
    v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_order);
    LOBYTE(v19) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v7);
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_superTypes);
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_1000EDD04((uint64_t)&qword_1002B2910);
    sub_10003AF78();
    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
    LOBYTE(v19) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v7);
  }
  v12 = sub_1000269D4();
  v13(v12);
  sub_10003AF60();
}

void PasteboardRepresentation.changingType(to:superTypes:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10002626C();
  v2 = *v0;
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_1000268CC();
  sub_1000EDC10((uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, v1, v4);
  v5 = (uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
  sub_10000B2F8(v5, (uint64_t)&v7, 0);
  sub_1000EDC38(v5, (uint64_t)&v6);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000103C0();
  PasteboardRepresentation.init(id:order:typeIdentifier:superTypes:name:context:)();
  sub_10000E4E0();
}

uint64_t PasteboardRepresentation.isDataType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v20;

  sub_1000055B0(&qword_1002AA5F0);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10000E478();
  v4 = type metadata accessor for UTType(0);
  sub_1000EFF68();
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  v13 = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRetain();
  UTType.init(_:)(v12, v13);
  sub_1000F01E8(v1);
  if (v14)
  {
    sub_100025A28(v1, &qword_1002AA5F0);
    v16 = 0;
  }
  else
  {
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 32))(v10, v1, v4);
    static UTType.data.getter(v15);
    v16 = UTType.conforms(to:)(v8);
    v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v8, v4);
    v18 = sub_1000269D4();
    ((void (*)(uint64_t))v17)(v18);
  }
  return v16 & 1;
}

void PasteboardRepresentation.isDynamicType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000055B0(&qword_1002AA5F0);
  sub_1000262EC();
  __chkstk_darwin(v1);
  sub_1000EFFC4();
  sub_1000F0150();
  __chkstk_darwin(v2);
  sub_1000601B4();
  sub_1000F01B8(OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  sub_1000F0160();
  sub_1000F01E8(v0);
  if (v3)
  {
    sub_100025A28(v0, &qword_1002AA5F0);
  }
  else
  {
    v4 = sub_1000F008C();
    UTType.isDynamic.getter(v4);
    sub_1000F00B4();
  }
  sub_10002644C();
}

void PasteboardRepresentation.isPublicType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000055B0(&qword_1002AA5F0);
  sub_1000262EC();
  __chkstk_darwin(v1);
  sub_1000EFFC4();
  sub_1000F0150();
  __chkstk_darwin(v2);
  sub_1000601B4();
  sub_1000F01B8(OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  sub_1000F0160();
  sub_1000F01E8(v0);
  if (v3)
  {
    sub_100025A28(v0, &qword_1002AA5F0);
  }
  else
  {
    v4 = sub_1000F008C();
    UTType.isPublic.getter(v4);
    sub_1000F00B4();
  }
  sub_10002644C();
}

void PasteboardRepresentation.typeWeight.getter()
{
  PasteboardRepresentation.isPublicType.getter();
  PasteboardRepresentation.isDynamicType.getter();
  sub_10000B350();
}

uint64_t PasteboardRepresentation.deinit()
{
  uint64_t v0;

  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, type metadata accessor for PasteboardRepresentation.ID);
  sub_1000F02C4(OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name);
  sub_1000F02C4(OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  swift_bridgeObjectRelease();
  sub_100025A28(v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, &qword_1002AA510);
  return v0;
}

uint64_t PasteboardRepresentation.__deallocating_deinit()
{
  uint64_t v0;

  PasteboardRepresentation.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_1000EB978(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  PasteboardRepresentation.__allocating_init(from:)();
  if (!v1)
    *a1 = v3;
}

void sub_1000EB9A0()
{
  PasteboardRepresentation.encode(to:)();
}

void sub_1000EB9C0(uint64_t a1@<X8>)
{
  _QWORD *v1;

  sub_1000EDC10(*v1 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, a1, type metadata accessor for PasteboardRepresentation.ID);
}

uint64_t PasteboardRepresentation.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;
  Swift::String v13;

  v1 = *v0;
  _StringGuts.grow(_:)(17);
  v2 = sub_1000F0250(v1);
  sub_10000E420();
  v12 = v2;
  v3._countAndFlagsBits = 541346080;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  v4 = sub_10000E440();
  sub_1000EFF80((uint64_t)&qword_1002AA670);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  sub_10002DA00(v13);
  sub_10000E594();
  v6._countAndFlagsBits = 0x3A47415244;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  sub_10000E594();
  sub_1000F0238(1414864940);
  v7 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
  sub_100043360();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  sub_10000E594();
  v10._countAndFlagsBits = 39;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v12;
}

uint64_t sub_1000EBB20()
{
  return PasteboardRepresentation.description.getter();
}

EnsembleAgent::PasteboardItem::CodingKeys_optional __swiftcall PasteboardItem.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v1;
  void *object;
  uint64_t countAndFlagsBits;
  EnsembleAgent::PasteboardItem::CodingKeys_optional result;

  v1 = stringValue._countAndFlagsBits == 0x6E65736572706572 && stringValue._object == (void *)0xEF736E6F69746174;
  if (v1
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (sub_10000E3A4(0x6E65736572706572, 0xEF736E6F69746174) & 1) != 0)
    || countAndFlagsBits == 0xD000000000000011 && object == (void *)0x80000001002576A0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000E3A4(0xD000000000000011, 0x80000001002576A0);
    sub_10000E410();
  }
  sub_1000050D4();
  return result;
}

uint64_t PasteboardItem.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x6E65736572706572;
}

uint64_t sub_1000EBC80()
{
  unsigned __int8 *v0;

  return PasteboardItem.CodingKeys.hashValue.getter(*v0);
}

uint64_t sub_1000EBC88()
{
  char *v0;

  return PasteboardItem.CodingKeys.stringValue.getter(*v0);
}

EnsembleAgent::PasteboardItem::CodingKeys_optional sub_1000EBC90@<W0>(uint64_t a1@<X0>, EnsembleAgent::PasteboardItem::CodingKeys_optional *a2@<X8>)
{
  EnsembleAgent::PasteboardItem::CodingKeys_optional result;

  result.value = PasteboardItem.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void sub_1000EBCB4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000EBCC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDE40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EBCE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDE40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PasteboardItem.PresentationStyle.description.getter(char a1)
{
  if (!a1)
    return 0x6E776F6E6B6E75;
  if (a1 == 1)
    return 0x656E696C6E69;
  return 0x656D686361747461;
}

uint64_t sub_1000EBD68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E776F6E6B6E75, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E696C6E69 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C6E69, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000746ELL);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEA0000000000746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000EBEBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDD8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EBEE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDD8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EBF0C()
{
  char *v0;

  return PasteboardItem.PresentationStyle.description.getter(*v0);
}

uint64_t sub_1000EBF14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000EBD68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EBF38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDD50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EBF60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDD50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EBF88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDDC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EBFB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDDC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EBFD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDE04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EC000(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDE04();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardItem.PresentationStyle.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_10003AFC4();
  a24 = v28;
  a25 = v29;
  a10 = v30;
  v32 = v31;
  v33 = sub_1000055B0(&qword_1002B0BD0);
  v51 = *(_QWORD *)(v33 - 8);
  v52 = v33;
  sub_1000262EC();
  __chkstk_darwin(v34);
  sub_10000E5DC();
  v50 = v35;
  v36 = sub_1000055B0(&qword_1002B0BD8);
  v48 = *(_QWORD *)(v36 - 8);
  v49 = v36;
  sub_1000262EC();
  __chkstk_darwin(v37);
  sub_1000A3710();
  v38 = sub_1000055B0(&qword_1002B0BE0);
  sub_1000EFF68();
  __chkstk_darwin(v39);
  v41 = (char *)&v47 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = *(_QWORD *)(sub_1000055B0(&qword_1002B0BE8) - 8);
  sub_1000262EC();
  __chkstk_darwin(v42);
  sub_10000E478();
  v44 = v32[3];
  v43 = v32[4];
  sub_10000DBE4(v32, v44);
  v45 = sub_1000EDD50();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PasteboardItem.PresentationStyle.CodingKeys, &type metadata for PasteboardItem.PresentationStyle.CodingKeys, v45, v44, v43);
  if (a10)
  {
    if (a10 == 1)
    {
      a14 = 1;
      sub_1000EDDC8();
      sub_1000EFEF8((uint64_t)&type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys, (uint64_t)&a14);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v27, v49);
    }
    else
    {
      sub_1000F0320();
      v46 = v50;
      sub_1000EFEF8((uint64_t)&type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys, (uint64_t)&a15);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v46, v52);
    }
  }
  else
  {
    a13 = 0;
    sub_1000EDE04();
    sub_1000EFEF8((uint64_t)&type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys, (uint64_t)&a13);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v41, v38);
  }
  sub_1000850C0(v25, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
  sub_10003AF60();
}

uint64_t PasteboardItem.PresentationStyle.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  sub_10003AFC4();
  v49 = v4;
  v50 = v5;
  v7 = v6;
  v41 = sub_1000055B0(&qword_1002B0C10);
  v44 = *(_QWORD *)(v41 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v43 = v9;
  v10 = sub_1000055B0(&qword_1002B0C18);
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10000E5DC();
  v42 = v12;
  v38 = sub_1000055B0(&qword_1002B0C20);
  sub_1000C259C();
  __chkstk_darwin(v13);
  sub_10000E478();
  v14 = sub_1000055B0(&qword_1002B0C28);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_1000268CC();
  v17 = v7[3];
  v16 = v7[4];
  sub_10000DBE4(v7, v17);
  v18 = sub_1000EDD50();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardItem.PresentationStyle.CodingKeys, &type metadata for PasteboardItem.PresentationStyle.CodingKeys, v18, v17, v16);
  if (v0)
    goto LABEL_11;
  v36 = v1;
  v37 = v15;
  v45 = v7;
  v19 = KeyedDecodingContainer.allKeys.getter(v14);
  v20 = v19;
  v21 = *(_QWORD *)(v19 + 16);
  if (!v21)
  {
LABEL_8:
    v28 = type metadata accessor for DecodingError(0);
    sub_1000264A0(v28, (uint64_t)&protocol witness table for DecodingError);
    v30 = v29;
    sub_1000055B0(&qword_1002ABBD0);
    *v30 = &type metadata for PasteboardItem.PresentationStyle;
    v31 = KeyedDecodingContainer.codingPath.getter(v14);
    sub_1000A36F0(v31, v32, 0x8000000100253AD0);
    v33 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for DecodingError.typeMismatch(_:), v28);
    swift_willThrow(v33);
    swift_unknownObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v14);
    v7 = v45;
LABEL_11:
    sub_100005988(v7);
    return v14;
  }
  v22 = v14;
  v14 = *(unsigned __int8 *)(v19 + 32);
  v23 = sub_1000EFDFC(1, v21, v19, v19 + 32, 0, (2 * v21) | 1);
  v25 = v24;
  v27 = v26;
  sub_10000E410();
  v20 = v23;
  if (v25 != v27 >> 1)
  {
    v14 = v22;
    goto LABEL_8;
  }
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 == 1)
    {
      v47 = 1;
      sub_1000EDDC8();
      sub_1000EFEF0((uint64_t)&type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys, (uint64_t)&v47, v22, (uint64_t)&type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v40);
    }
    else
    {
      sub_1000F0320();
      sub_1000EFEF0((uint64_t)&type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys, (uint64_t)&v48, v22, (uint64_t)&type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v41);
    }
    v35 = v23;
  }
  else
  {
    v46 = 0;
    sub_1000EDE04();
    sub_1000EFEF0((uint64_t)&type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys, (uint64_t)&v46, v22, (uint64_t)&type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v38);
    v35 = v23;
  }
  swift_unknownObjectRelease(v35);
  sub_1000EFF88(v37);
  sub_100005988(v45);
  return v14;
}

uint64_t sub_1000EC594()
{
  unsigned __int8 *v0;

  return PasteboardItem.PresentationStyle.hashValue.getter(*v0);
}

uint64_t sub_1000EC59C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = PasteboardItem.PresentationStyle.init(from:)();
  if (!v1)
    *a1 = result;
  return result;
}

#error "1000EC5D0: call analysis failed (funcsize=6)"

uint64_t PasteboardItem.presentationStyle.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v2, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

void PasteboardItem.presentationStyle.setter(char a1)
{
  uint64_t v1;
  _BYTE v3[24];

  sub_10000B2F8(v1 + 16, (uint64_t)v3, 1);
  *(_BYTE *)(v1 + 16) = a1;
  sub_100015540();
}

void PasteboardItem.presentationStyle.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 16, a1, 33);
  sub_1000050D4();
}

uint64_t PasteboardItem.representations.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t PasteboardItem.init(representations:presentationStyle:)(uint64_t a1, char a2)
{
  uint64_t v2;
  _BYTE v5[24];

  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = a1;
  sub_10000B2F8(v2 + 16, (uint64_t)v5, 1);
  *(_BYTE *)(v2 + 16) = a2;
  return v2;
}

#error "1000EC6E8: call analysis failed (funcsize=13)"

void PasteboardItem.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[3];

  sub_10003AFC4();
  a22 = v26;
  a23 = v27;
  v28 = v23;
  v30 = v29;
  v31 = *v28;
  v40 = sub_1000055B0(&qword_1002B0C30);
  sub_1000F0150();
  __chkstk_darwin(v32);
  sub_1000432FC();
  *((_BYTE *)v28 + 16) = 0;
  v34 = v30[3];
  v33 = v30[4];
  v41 = v30;
  sub_10000DBE4(v30, v34);
  v35 = sub_1000EDE40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PasteboardItem.CodingKeys, &type metadata for PasteboardItem.CodingKeys, v35, v34, v33);
  if (v24)
  {
    swift_deallocPartialClassInstance(v28, v31, 32, 7);
  }
  else
  {
    v36 = sub_1000055B0(&qword_1002B4A60);
    a13 = 0;
    sub_1000EDECC((uint64_t)&unk_1002B0C40);
    sub_1000F0138(v36, (uint64_t)&a13, v40, v36);
    v28[3] = v42[0];
    a13 = 1;
    v37 = sub_1000EDE90();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v42, &type metadata for PasteboardItem.PresentationStyle, &a13, v40, &type metadata for PasteboardItem.PresentationStyle, v37, v38);
    sub_1000EFF50(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    v39 = v42[0];
    if (LOBYTE(v42[0]) != 3)
    {
      sub_10000B2F8((uint64_t)(v28 + 2), (uint64_t)v42, 1);
      *((_BYTE *)v28 + 16) = v39;
    }
  }
  sub_100005988(v41);
  sub_10003AF60();
}

void PasteboardItem.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  _QWORD v9[3];
  char v10;

  sub_1000055B0(&qword_1002B0C58);
  sub_1000C259C();
  __chkstk_darwin(v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000EFFE8();
  v6 = sub_1000EDE40();
  sub_100084FF4((uint64_t)&type metadata for PasteboardItem.CodingKeys, v7, v6);
  v9[0] = *(_QWORD *)(v0 + 24);
  v10 = 0;
  sub_1000055B0(&qword_1002B4A60);
  sub_1000EDECC((uint64_t)&unk_1002B0C60);
  sub_10003AF78();
  if (!v1)
  {
    sub_10000B2F8(v0 + 16, (uint64_t)v9, 0);
    v10 = *(_BYTE *)(v0 + 16);
    v8[15] = 1;
    sub_1000EDF30();
    sub_10003AF78();
  }
  sub_100060064((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000C260C();
}

void PasteboardItem.first(ofType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRetain();
  v4 = sub_10003AFBC();
  sub_1000E7BAC(v4, a1, a2);
  sub_10000E420();
  sub_100026914();
}

uint64_t PasteboardItem.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t PasteboardItem.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v0 = sub_1000323A8();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000ECA78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = PasteboardItem.__allocating_init(from:)();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_1000ECAA0()
{
  PasteboardItem.encode(to:)();
}

void PasteboardItem.description.getter()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000F0250(*v0);
  v1._countAndFlagsBits = 10272;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2 = v0[3];
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_100043360();
    if (v3)
      goto LABEL_3;
LABEL_16:
    sub_10000E594();
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v6 = sub_100065AF0();
    sub_1000F0170(v6, v7, v8, v6);
    sub_1000F0140();
    sub_1000103C0();
    sub_100065DD0();
    sub_10000E410();
    swift_bridgeObjectRelease();
    sub_1000103C0();
    sub_1000F02A0();
    sub_10000E410();
    return;
  }
  if (v2 < 0)
    v5 = v0[3];
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  sub_100043360();
  v3 = _CocoaArrayWrapper.endIndex.getter(v5);
  if (!v3)
    goto LABEL_16;
LABEL_3:
  sub_1000F0308();
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        sub_1000F02AC();
      else
        sub_1000F01D8();
      PasteboardRepresentation.description.getter();
      sub_1000F0128();
      if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000F022C();
      sub_1000F01A0();
    }
    while (!v4);
    goto LABEL_16;
  }
  __break(1u);
}

void sub_1000ECC5C()
{
  PasteboardItem.description.getter();
}

uint64_t PasteboardContents.items.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

void sub_1000ECC84(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v2 = a1 == 0x616F626574736170 && a2 == 0xEA00000000006472;
  if (v2
    || (v5 = sub_1000F032C(), (sub_10000E3A4(v5, v6) & 1) != 0)
    || (a1 == 0x656372756F73 ? (v7 = a2 == 0xE600000000000000) : (v7 = 0),
        v7
     || (sub_10000E3A4(0x656372756F73, 0xE600000000000000) & 1) != 0
     || (a1 == 0x736D657469 ? (v8 = a2 == 0xE500000000000000) : (v8 = 0), v8)))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000E3A4(0x736D657469, 0xE500000000000000);
    sub_10000E410();
  }
  sub_1000050D4();
}

uint64_t sub_1000ECD8C(char a1)
{
  if (!a1)
    return 0x616F626574736170;
  if (a1 == 1)
    return 0x656372756F73;
  return 0x736D657469;
}

uint64_t sub_1000ECDE0()
{
  char *v0;

  return sub_1000ECD8C(*v0);
}

void sub_1000ECDE8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_1000ECC84(a1, a2);
  *a3 = v4;
}

void sub_1000ECE0C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000ECE18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDF6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ECE40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EDF6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void PasteboardContents.__allocating_init(_:source:items:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1000D9478();
  swift_allocObject(v6, v7, v8);
  PasteboardContents.init(_:source:items:)(a1, a2, a3);
  sub_10000B350();
}

_QWORD *PasteboardContents.init(_:source:items:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

void PasteboardContents.representation(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_10002626C();
  v3 = v2;
  type metadata accessor for PasteboardRepresentation.ID(0);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_1000601B4();
  v5 = *(_QWORD *)(v0 + 32);
  if ((unint64_t)v5 >> 62)
  {
LABEL_30:
    if (v5 < 0)
      v18 = v5;
    else
      v18 = v5 & 0xFFFFFFFFFFFFFF8;
    sub_10003AFBC();
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10003AFBC();
    if (v6)
    {
LABEL_3:
      v7 = 0;
      v8 = v5 & 0xC000000000000001;
      v21 = v5 + 32;
      v22 = v5 & 0xFFFFFFFFFFFFFF8;
      v23 = v5;
      v19 = v5 & 0xC000000000000001;
      v20 = v6;
      do
      {
        if (v8)
        {
          v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v22 + 16))
          {
            __break(1u);
            return;
          }
          v9 = *(_QWORD *)(v21 + 8 * v7);
          swift_retain();
        }
        if (__OFADD__(v7++, 1))
          goto LABEL_29;
        v11 = *(_QWORD *)(v9 + 24);
        if ((unint64_t)v11 >> 62)
        {
          if (v11 < 0)
            v17 = *(_QWORD *)(v9 + 24);
          else
            v17 = v11 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(*(_QWORD *)(v9 + 24), 2);
          v12 = _CocoaArrayWrapper.endIndex.getter(v17);
          sub_10002D89C();
          if (v12)
          {
LABEL_11:
            v5 = 4;
            while (1)
            {
              if ((v11 & 0xC000000000000001) != 0)
              {
                v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v11);
              }
              else
              {
                v13 = *(_QWORD *)(v11 + 8 * v5);
                swift_retain();
              }
              v14 = v5 - 3;
              if (__OFADD__(v5 - 4, 1))
                break;
              sub_1000EDC10(v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, v1, type metadata accessor for PasteboardRepresentation.ID);
              v15 = static UUID.== infix(_:_:)(v1, v3);
              v16 = sub_10000E440();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v1, v16);
              if ((v15 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                sub_10002D89C();
                swift_release();
                goto LABEL_27;
              }
              swift_release();
              ++v5;
              if (v14 == v12)
              {
                swift_release();
                v5 = v23;
                v8 = v19;
                v6 = v20;
                goto LABEL_24;
              }
            }
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        else
        {
          v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v12)
            goto LABEL_11;
        }
        swift_release();
LABEL_24:
        sub_10002D89C();
      }
      while (v7 != v6);
    }
  }
  sub_10000E420();
LABEL_27:
  sub_10000E4E0();
}

uint64_t PasteboardContents.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t PasteboardContents.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v0 = sub_1000D9478();
  return swift_deallocClassInstance(v0, v1, v2);
}

void PasteboardContents.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v3 = sub_1000055B0(&qword_1002B0C78);
  sub_1000C259C();
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EFFE8();
  v7 = sub_1000EDF6C();
  sub_100084FF4((uint64_t)&unk_10028B230, v8, v7);
  LOBYTE(v15) = 0;
  v9 = sub_1000A24DC();
  sub_1000F00E4(v9, (uint64_t)&v15, v3, (uint64_t)&type metadata for PasteboardType, v9);
  if (!v1)
  {
    v15 = *(_OWORD *)(v0 + 16);
    v14 = 1;
    v10 = sub_10003668C();
    sub_1000F00E4((uint64_t)&v15, (uint64_t)&v14, v3, (uint64_t)&type metadata for UniversalControlDeviceID, v10);
    *(_QWORD *)&v15 = *(_QWORD *)(v0 + 32);
    v14 = 2;
    v11 = sub_1000055B0(&qword_1002B0C88);
    sub_1000EDFA8((uint64_t)&unk_1002B0C90);
    sub_1000F00E4((uint64_t)&v15, (uint64_t)&v14, v3, v11, v12);
  }
  sub_100060064((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000C260C();
}

#error "1000ED300: call analysis failed (funcsize=13)"

void PasteboardContents.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  sub_10003AFC4();
  a22 = v27;
  a23 = v28;
  v29 = v23;
  v31 = v30;
  v32 = *v23;
  v38 = sub_1000055B0(&qword_1002B0CA0);
  sub_1000EFF68();
  __chkstk_darwin(v33);
  sub_1000432FC();
  v34 = v31[3];
  v35 = v31[4];
  sub_10000DBE4(v31, v34);
  v36 = sub_1000EDF6C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_10028B230, &unk_10028B230, v36, v34, v35);
  if (v24)
  {
    swift_deallocPartialClassInstance(v23, v32, 40, 7);
  }
  else
  {
    LOBYTE(v39) = 0;
    sub_1000A226C();
    sub_1000F0068((uint64_t)&type metadata for PasteboardType, (uint64_t)&v39, v38, (uint64_t)&type metadata for PasteboardType);
    a13 = 1;
    sub_10003A380();
    sub_1000F0068((uint64_t)&type metadata for UniversalControlDeviceID, (uint64_t)&a13, v38, (uint64_t)&type metadata for UniversalControlDeviceID);
    *((_OWORD *)v23 + 1) = v39;
    v37 = sub_1000055B0(&qword_1002B0C88);
    a13 = 2;
    sub_1000EDFA8((uint64_t)&unk_1002B0CA8);
    sub_1000F0068(v37, (uint64_t)&a13, v38, v37);
    sub_1000EFFE0(v26, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    v29[4] = v39;
  }
  sub_10008503C();
  sub_10003AF60();
}

uint64_t sub_1000ED4C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = PasteboardContents.__allocating_init(from:)();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_1000ED4E8()
{
  PasteboardContents.encode(to:)();
}

void PasteboardContents.description.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10002626C();
  v1 = v0;
  v2 = *v0;
  sub_10000E440();
  sub_1000EFF68();
  __chkstk_darwin(v3);
  sub_1000268CC();
  _StringGuts.grow(_:)(20);
  sub_1000F0250(v2);
  sub_10000E420();
  v4._countAndFlagsBits = 0x2053444920;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5 = UUID.init(uuid:)(*((unsigned __int8 *)v1 + 16), *((unsigned __int8 *)v1 + 17), *((unsigned __int8 *)v1 + 18), *((unsigned __int8 *)v1 + 19), *((unsigned __int8 *)v1 + 20), *((unsigned __int8 *)v1 + 21));
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v9 = sub_1000269D4();
  v10(v9);
  v11 = sub_1000599D0(8, v6, v8);
  v12 = static String._fromSubstring(_:)(v11);
  v14 = v13;
  sub_10000E410();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_1000F0238(1112547372);
  v16._countAndFlagsBits = 1195463236;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 2629671;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  v18 = v1[4];
  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_100043360();
    if (v19)
      goto LABEL_3;
LABEL_16:
    sub_10000E594();
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v22 = sub_100065AF0();
    sub_1000F0170(v22, v23, v24, v22);
    sub_1000F0140();
    sub_1000103C0();
    sub_100065DD0();
    sub_10000E410();
    swift_bridgeObjectRelease();
    sub_1000103C0();
    sub_1000F02A0();
    sub_10000E410();
    return;
  }
  if (v18 < 0)
    v21 = v18;
  else
    v21 = v18 & 0xFFFFFFFFFFFFFF8;
  sub_100043360();
  v19 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (!v19)
    goto LABEL_16;
LABEL_3:
  sub_1000F0308();
  if ((v19 & 0x8000000000000000) == 0)
  {
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
        sub_1000F02AC();
      else
        sub_1000F01D8();
      PasteboardItem.description.getter();
      sub_1000F0128();
      if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000F022C();
      sub_1000F01A0();
    }
    while (!v20);
    goto LABEL_16;
  }
  __break(1u);
}

void sub_1000ED798()
{
  PasteboardContents.description.getter();
  sub_1000050D4();
}

uint64_t type metadata accessor for PasteboardAcquisitionError(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B0D58, (uint64_t)&nominal type descriptor for PasteboardAcquisitionError);
}

uint64_t type metadata accessor for PasteboardRepresentation.ID(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B0EC8, (uint64_t)&nominal type descriptor for PasteboardRepresentation.ID);
}

unint64_t sub_1000ED7DC()
{
  unint64_t result;

  result = qword_1002B0AA8;
  if (!qword_1002B0AA8)
  {
    result = swift_getWitnessTable(&unk_10022589C, &type metadata for PasteboardAcquisitionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AA8);
  }
  return result;
}

unint64_t sub_1000ED818()
{
  unint64_t result;

  result = qword_1002B0AB0;
  if (!qword_1002B0AB0)
  {
    result = swift_getWitnessTable(&unk_10022584C, &type metadata for PasteboardAcquisitionError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AB0);
  }
  return result;
}

unint64_t sub_1000ED854()
{
  unint64_t result;

  result = qword_1002B0AB8;
  if (!qword_1002B0AB8)
  {
    result = swift_getWitnessTable(&unk_1002257FC, &type metadata for PasteboardAcquisitionError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AB8);
  }
  return result;
}

unint64_t sub_1000ED890()
{
  unint64_t result;

  result = qword_1002B0AC0;
  if (!qword_1002B0AC0)
  {
    result = swift_getWitnessTable(&unk_1002257AC, &type metadata for PasteboardAcquisitionError.WriteFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AC0);
  }
  return result;
}

unint64_t sub_1000ED8CC()
{
  unint64_t result;

  result = qword_1002B0AC8;
  if (!qword_1002B0AC8)
  {
    result = swift_getWitnessTable(&unk_10022575C, &type metadata for PasteboardAcquisitionError.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AC8);
  }
  return result;
}

unint64_t sub_1000ED908()
{
  unint64_t result;

  result = qword_1002B0AD0;
  if (!qword_1002B0AD0)
  {
    result = swift_getWitnessTable(&unk_10022570C, &type metadata for PasteboardAcquisitionError.OpenNoURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AD0);
  }
  return result;
}

unint64_t sub_1000ED944()
{
  unint64_t result;

  result = qword_1002B0AD8;
  if (!qword_1002B0AD8)
  {
    result = swift_getWitnessTable(&unk_1002256BC, &type metadata for PasteboardAcquisitionError.OpenFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AD8);
  }
  return result;
}

unint64_t sub_1000ED980()
{
  unint64_t result;

  result = qword_1002B0AE0;
  if (!qword_1002B0AE0)
  {
    result = swift_getWitnessTable(&unk_10022566C, &type metadata for PasteboardAcquisitionError.DuplicateRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AE0);
  }
  return result;
}

unint64_t sub_1000ED9BC()
{
  unint64_t result;

  result = qword_1002B0AE8;
  if (!qword_1002B0AE8)
  {
    result = swift_getWitnessTable(&unk_10022561C, &type metadata for PasteboardAcquisitionError.WrongContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AE8);
  }
  return result;
}

unint64_t sub_1000ED9F8()
{
  unint64_t result;

  result = qword_1002B0AF0;
  if (!qword_1002B0AF0)
  {
    result = swift_getWitnessTable(&unk_1002255CC, &type metadata for PasteboardAcquisitionError.NoReceiverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AF0);
  }
  return result;
}

unint64_t sub_1000EDA34()
{
  unint64_t result;

  result = qword_1002B0AF8;
  if (!qword_1002B0AF8)
  {
    result = swift_getWitnessTable(&unk_10022557C, &type metadata for PasteboardAcquisitionError.NoTransferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AF8);
  }
  return result;
}

void sub_1000EDA70(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100026944(a1, a2, a3);
  sub_1000C26F8();
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32));
  sub_1000050D4();
}

unint64_t sub_1000EDA98()
{
  unint64_t result;

  result = qword_1002B0B00;
  if (!qword_1002B0B00)
  {
    result = swift_getWitnessTable(&unk_10022552C, &type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0B00);
  }
  return result;
}

void sub_1000EDAD4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!sub_1000F027C(a1))
  {
    v5 = v4;
    v6 = v3(v2);
    atomic_store(swift_getWitnessTable(v5, v6), v1);
  }
  sub_1000050D4();
}

unint64_t sub_1000EDB0C()
{
  unint64_t result;

  result = qword_1002B0B08;
  if (!qword_1002B0B08)
  {
    result = swift_getWitnessTable(&unk_1002254DC, &type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0B08);
  }
  return result;
}

unint64_t sub_1000EDB48()
{
  unint64_t result;

  result = qword_1002B0B10;
  if (!qword_1002B0B10)
  {
    result = swift_getWitnessTable(&unk_10022548C, &type metadata for PasteboardAcquisitionError.NoPasteboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0B10);
  }
  return result;
}

uint64_t sub_1000EDB84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

unint64_t sub_1000EDBD4()
{
  unint64_t result;

  result = qword_1002B0B90;
  if (!qword_1002B0B90)
  {
    result = swift_getWitnessTable(&unk_10022543C, &type metadata for PasteboardRepresentation.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0B90);
  }
  return result;
}

void sub_1000EDC10(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_100026944(a1, a2, a3);
  sub_1000C26F8();
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
  sub_1000050D4();
}

uint64_t sub_1000EDC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AA510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EDC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AA510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000EDCC8()
{
  unint64_t result;

  result = qword_1002B0BA8;
  if (!qword_1002B0BA8)
  {
    result = swift_getWitnessTable(&unk_1002253EC, &type metadata for PasteboardRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0BA8);
  }
  return result;
}

void sub_1000EDD04(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!sub_1000F027C(a1))
  {
    v4 = v3;
    v5 = sub_10000DCA0(v2);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }
  sub_100026914();
}

unint64_t sub_1000EDD50()
{
  unint64_t result;

  result = qword_1002B0BF0;
  if (!qword_1002B0BF0)
  {
    result = swift_getWitnessTable(&unk_10022539C, &type metadata for PasteboardItem.PresentationStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0BF0);
  }
  return result;
}

unint64_t sub_1000EDD8C()
{
  unint64_t result;

  result = qword_1002B0BF8;
  if (!qword_1002B0BF8)
  {
    result = swift_getWitnessTable(&unk_10022534C, &type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0BF8);
  }
  return result;
}

unint64_t sub_1000EDDC8()
{
  unint64_t result;

  result = qword_1002B0C00;
  if (!qword_1002B0C00)
  {
    result = swift_getWitnessTable(&unk_1002252FC, &type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0C00);
  }
  return result;
}

unint64_t sub_1000EDE04()
{
  unint64_t result;

  result = qword_1002B0C08;
  if (!qword_1002B0C08)
  {
    result = swift_getWitnessTable(&unk_1002252AC, &type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0C08);
  }
  return result;
}

unint64_t sub_1000EDE40()
{
  unint64_t result;

  result = qword_1002B0C38;
  if (!qword_1002B0C38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.CodingKeys, &type metadata for PasteboardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0C38);
  }
  return result;
}

uint64_t type metadata accessor for PasteboardRepresentation(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B0DB8, (uint64_t)&nominal type descriptor for PasteboardRepresentation);
}

unint64_t sub_1000EDE90()
{
  unint64_t result;

  result = qword_1002B0C50;
  if (!qword_1002B0C50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.PresentationStyle, &type metadata for PasteboardItem.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_1002B0C50);
  }
  return result;
}

void sub_1000EDECC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (!sub_1000F027C(a1))
  {
    v3 = v2;
    sub_10000DCA0(&qword_1002B4A60);
    sub_1000EDAD4(v3);
    atomic_store(sub_1000F00C8(), v1);
  }
  sub_1000F00A0();
}

unint64_t sub_1000EDF30()
{
  unint64_t result;

  result = qword_1002B0C70;
  if (!qword_1002B0C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.PresentationStyle, &type metadata for PasteboardItem.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_1002B0C70);
  }
  return result;
}

unint64_t sub_1000EDF6C()
{
  unint64_t result;

  result = qword_1002B0C80;
  if (!qword_1002B0C80)
  {
    result = swift_getWitnessTable(&unk_10022525C, &unk_10028B230);
    atomic_store(result, (unint64_t *)&qword_1002B0C80);
  }
  return result;
}

void sub_1000EDFA8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (!sub_1000F027C(a1))
  {
    v3 = v2;
    sub_10000DCA0(&qword_1002B0C88);
    sub_1000EDAD4(v3);
    atomic_store(sub_1000F00C8(), v1);
  }
  sub_1000F00A0();
}

uint64_t type metadata accessor for PasteboardItem()
{
  return objc_opt_self(_TtC13EnsembleAgent14PasteboardItem);
}

void sub_1000EE028()
{
  sub_1000EDAD4((uint64_t)&unk_1002B0CB8);
}

void sub_1000EE058()
{
  sub_1000EDAD4((uint64_t)&unk_1002B0CC0);
}

unint64_t sub_1000EE08C()
{
  unint64_t result;

  result = qword_1002B0CC8;
  if (!qword_1002B0CC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.CodingKeys, &type metadata for PasteboardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0CC8);
  }
  return result;
}

unint64_t sub_1000EE0CC()
{
  unint64_t result;

  result = qword_1002B0CD0;
  if (!qword_1002B0CD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.CodingKeys, &type metadata for PasteboardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0CD0);
  }
  return result;
}

unint64_t sub_1000EE10C()
{
  unint64_t result;

  result = qword_1002B0CD8;
  if (!qword_1002B0CD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.CodingKeys, &type metadata for PasteboardItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0CD8);
  }
  return result;
}

unint64_t sub_1000EE14C()
{
  unint64_t result;

  result = qword_1002B0CE0;
  if (!qword_1002B0CE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardItem.PresentationStyle, &type metadata for PasteboardItem.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_1002B0CE0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PasteboardAcquisitionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_10;
      case 1u:
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_10;
      case 2u:
        v14 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_10;
      case 3u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        swift_bridgeObjectRetain(v15);
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_10;
      case 4u:
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        swift_bridgeObjectRetain(v16);
        v9 = a1;
        v10 = a3;
        v11 = 4;
LABEL_10:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for PasteboardAcquisitionError(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3:
    case 4:
      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for PasteboardAcquisitionError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_8;
    case 1u:
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_8;
    case 2u:
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_8;
    case 3u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain(v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_8;
    case 4u:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_8:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for PasteboardAcquisitionError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for PasteboardAcquisitionError);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_9;
      case 1u:
        v10 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_9;
      case 2u:
        v11 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_9;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_9;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_9:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for PasteboardAcquisitionError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *assignWithTake for PasteboardAcquisitionError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for PasteboardAcquisitionError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000EE818(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = type metadata accessor for PasteboardDataSession.ID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PasteboardRepresentation.ID(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for UUID(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        v6[3] = &unk_100224480;
        v6[4] = &unk_100224480;
        swift_initEnumMetadataMultiPayload(a1, 256, 5, v6);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000EE8C0()
{
  return type metadata accessor for PasteboardRepresentation(0);
}

uint64_t sub_1000EE8C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for PasteboardRepresentation.ID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002244E0;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100224480;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_1002244F8;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PasteboardRepresentation.ID(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EEAF8);
}

uint64_t sub_1000EEAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PasteboardRepresentation.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EEB34);
}

uint64_t sub_1000EEB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a2, v4);
}

void type metadata accessor for PasteboardItem.CodingKeys()
{
  sub_10003B1DC();
}

void type metadata accessor for PasteboardItem.PresentationStyle()
{
  sub_10003B1DC();
}

uint64_t type metadata accessor for PasteboardContents()
{
  return objc_opt_self(_TtC13EnsembleAgent18PasteboardContents);
}

void type metadata accessor for PasteboardContents.CodingKeys()
{
  sub_10003B1DC();
}

uint64_t _s13EnsembleAgent14PasteboardItemC17PresentationStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000EEC00 + 4 * byte_100223F05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000EEC34 + 4 * byte_100223F00[v4]))();
}

uint64_t sub_1000EEC34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEC3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EEC44);
  return result;
}

uint64_t sub_1000EEC50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EEC58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000EEC5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEC64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardItem.PresentationStyle.CodingKeys()
{
  return &type metadata for PasteboardItem.PresentationStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardItem.PresentationStyle.UnknownCodingKeys()
{
  return &type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardItem.PresentationStyle.InlineCodingKeys()
{
  return &type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardItem.PresentationStyle.AttachmentCodingKeys()
{
  return &type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys;
}

uint64_t storeEnumTagSinglePayload for PasteboardRepresentation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000EECFC + 4 * byte_100223F0F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000EED30 + 4 * byte_100223F0A[v4]))();
}

uint64_t sub_1000EED30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EED38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EED40);
  return result;
}

uint64_t sub_1000EED4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EED54);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000EED58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EED60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardRepresentation.CodingKeys()
{
  return &type metadata for PasteboardRepresentation.CodingKeys;
}

uint64_t _s13EnsembleAgent14PasteboardItemC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000EEDC8 + 4 * byte_100223F19[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000EEDFC + 4 * byte_100223F14[v4]))();
}

uint64_t sub_1000EEDFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEE04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EEE0CLL);
  return result;
}

uint64_t sub_1000EEE18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EEE20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000EEE24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEE2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardRepresentation.ID.CodingKeys()
{
  return &type metadata for PasteboardRepresentation.ID.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PasteboardAcquisitionError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 12) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v5 = v6 - 13;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PasteboardAcquisitionError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000EEF1C + 4 * byte_100223F23[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000EEF50 + 4 * byte_100223F1E[v4]))();
}

uint64_t sub_1000EEF50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEF58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EEF60);
  return result;
}

uint64_t sub_1000EEF6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EEF74);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1000EEF78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEF80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.CodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.CodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.NoPasteboardCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.NoPasteboardCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.NoDataSessionCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.NoRepresentationCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.NoTransferCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.NoTransferCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.NoReceiverCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.NoReceiverCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.WrongContextCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.WrongContextCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.DuplicateRequestCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.DuplicateRequestCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.OpenFailedCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.OpenFailedCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.OpenNoURLCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.OpenNoURLCodingKeys;
}

uint64_t _s13EnsembleAgent26PasteboardAcquisitionErrorO23NoDataSessionCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000EF070 + 4 * byte_100223F28[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000EF090 + 4 * byte_100223F2D[v4]))();
}

_BYTE *sub_1000EF070(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000EF090(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EF098(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EF0A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EF0A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EF0B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.ReadCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.ReadCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.WriteFailedCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.WriteFailedCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.CancelledCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.CancelledCodingKeys;
}

ValueMetadata *type metadata accessor for PasteboardAcquisitionError.GenericCodingKeys()
{
  return &type metadata for PasteboardAcquisitionError.GenericCodingKeys;
}

unint64_t sub_1000EF100()
{
  unint64_t result;

  result = qword_1002B1068;
  if (!qword_1002B1068)
  {
    result = swift_getWitnessTable(&unk_100224904, &type metadata for PasteboardAcquisitionError.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1068);
  }
  return result;
}

unint64_t sub_1000EF140()
{
  unint64_t result;

  result = qword_1002B1070;
  if (!qword_1002B1070)
  {
    result = swift_getWitnessTable(&unk_100224A0C, &type metadata for PasteboardAcquisitionError.OpenFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1070);
  }
  return result;
}

unint64_t sub_1000EF180()
{
  unint64_t result;

  result = qword_1002B1078;
  if (!qword_1002B1078)
  {
    result = swift_getWitnessTable(&unk_100224BB4, &type metadata for PasteboardAcquisitionError.NoTransferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1078);
  }
  return result;
}

unint64_t sub_1000EF1C0()
{
  unint64_t result;

  result = qword_1002B1080;
  if (!qword_1002B1080)
  {
    result = swift_getWitnessTable(&unk_100224C6C, &type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1080);
  }
  return result;
}

unint64_t sub_1000EF200()
{
  unint64_t result;

  result = qword_1002B1088;
  if (!qword_1002B1088)
  {
    result = swift_getWitnessTable(&unk_100224D24, &type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1088);
  }
  return result;
}

unint64_t sub_1000EF240()
{
  unint64_t result;

  result = qword_1002B1090;
  if (!qword_1002B1090)
  {
    result = swift_getWitnessTable(&unk_100224E2C, &type metadata for PasteboardAcquisitionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1090);
  }
  return result;
}

unint64_t sub_1000EF280()
{
  unint64_t result;

  result = qword_1002B1098;
  if (!qword_1002B1098)
  {
    result = swift_getWitnessTable(&unk_100224EE4, &type metadata for PasteboardRepresentation.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1098);
  }
  return result;
}

unint64_t sub_1000EF2C0()
{
  unint64_t result;

  result = qword_1002B10A0;
  if (!qword_1002B10A0)
  {
    result = swift_getWitnessTable(&unk_100224FD4, &type metadata for PasteboardRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10A0);
  }
  return result;
}

unint64_t sub_1000EF300()
{
  unint64_t result;

  result = qword_1002B10A8;
  if (!qword_1002B10A8)
  {
    result = swift_getWitnessTable(&unk_10022517C, &type metadata for PasteboardItem.PresentationStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10A8);
  }
  return result;
}

unint64_t sub_1000EF340()
{
  unint64_t result;

  result = qword_1002B10B0;
  if (!qword_1002B10B0)
  {
    result = swift_getWitnessTable(&unk_100225234, &unk_10028B230);
    atomic_store(result, (unint64_t *)&qword_1002B10B0);
  }
  return result;
}

unint64_t sub_1000EF380()
{
  unint64_t result;

  result = qword_1002B10B8;
  if (!qword_1002B10B8)
  {
    result = swift_getWitnessTable(&unk_1002251A4, &unk_10028B230);
    atomic_store(result, (unint64_t *)&qword_1002B10B8);
  }
  return result;
}

unint64_t sub_1000EF3C0()
{
  unint64_t result;

  result = qword_1002B10C0;
  if (!qword_1002B10C0)
  {
    result = swift_getWitnessTable(&unk_1002251CC, &unk_10028B230);
    atomic_store(result, (unint64_t *)&qword_1002B10C0);
  }
  return result;
}

unint64_t sub_1000EF400()
{
  unint64_t result;

  result = qword_1002B10C8;
  if (!qword_1002B10C8)
  {
    result = swift_getWitnessTable(&unk_10022509C, &type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10C8);
  }
  return result;
}

unint64_t sub_1000EF440()
{
  unint64_t result;

  result = qword_1002B10D0;
  if (!qword_1002B10D0)
  {
    result = swift_getWitnessTable(&unk_1002250C4, &type metadata for PasteboardItem.PresentationStyle.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10D0);
  }
  return result;
}

unint64_t sub_1000EF480()
{
  unint64_t result;

  result = qword_1002B10D8;
  if (!qword_1002B10D8)
  {
    result = swift_getWitnessTable(&unk_10022504C, &type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10D8);
  }
  return result;
}

unint64_t sub_1000EF4C0()
{
  unint64_t result;

  result = qword_1002B10E0;
  if (!qword_1002B10E0)
  {
    result = swift_getWitnessTable(&unk_100225074, &type metadata for PasteboardItem.PresentationStyle.InlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10E0);
  }
  return result;
}

unint64_t sub_1000EF500()
{
  unint64_t result;

  result = qword_1002B10E8;
  if (!qword_1002B10E8)
  {
    result = swift_getWitnessTable(&unk_100224FFC, &type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10E8);
  }
  return result;
}

unint64_t sub_1000EF540()
{
  unint64_t result;

  result = qword_1002B10F0;
  if (!qword_1002B10F0)
  {
    result = swift_getWitnessTable(&unk_100225024, &type metadata for PasteboardItem.PresentationStyle.AttachmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10F0);
  }
  return result;
}

unint64_t sub_1000EF580()
{
  unint64_t result;

  result = qword_1002B10F8;
  if (!qword_1002B10F8)
  {
    result = swift_getWitnessTable(&unk_1002250EC, &type metadata for PasteboardItem.PresentationStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B10F8);
  }
  return result;
}

unint64_t sub_1000EF5C0()
{
  unint64_t result;

  result = qword_1002B1100;
  if (!qword_1002B1100)
  {
    result = swift_getWitnessTable(&unk_100225114, &type metadata for PasteboardItem.PresentationStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1100);
  }
  return result;
}

unint64_t sub_1000EF600()
{
  unint64_t result;

  result = qword_1002B1108;
  if (!qword_1002B1108)
  {
    result = swift_getWitnessTable(&unk_100224F0C, &type metadata for PasteboardRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1108);
  }
  return result;
}

unint64_t sub_1000EF640()
{
  unint64_t result;

  result = qword_1002B1110;
  if (!qword_1002B1110)
  {
    result = swift_getWitnessTable(&unk_100224F34, &type metadata for PasteboardRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1110);
  }
  return result;
}

unint64_t sub_1000EF680()
{
  unint64_t result;

  result = qword_1002B1118;
  if (!qword_1002B1118)
  {
    result = swift_getWitnessTable(&unk_100224E54, &type metadata for PasteboardRepresentation.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1118);
  }
  return result;
}

unint64_t sub_1000EF6C0()
{
  unint64_t result;

  result = qword_1002B1120;
  if (!qword_1002B1120)
  {
    result = swift_getWitnessTable(&unk_100224E7C, &type metadata for PasteboardRepresentation.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1120);
  }
  return result;
}

unint64_t sub_1000EF700()
{
  unint64_t result;

  result = qword_1002B1128;
  if (!qword_1002B1128)
  {
    result = swift_getWitnessTable(&unk_100224D4C, &type metadata for PasteboardAcquisitionError.NoPasteboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1128);
  }
  return result;
}

unint64_t sub_1000EF740()
{
  unint64_t result;

  result = qword_1002B1130;
  if (!qword_1002B1130)
  {
    result = swift_getWitnessTable(&unk_100224D74, &type metadata for PasteboardAcquisitionError.NoPasteboardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1130);
  }
  return result;
}

unint64_t sub_1000EF780()
{
  unint64_t result;

  result = qword_1002B1138;
  if (!qword_1002B1138)
  {
    result = swift_getWitnessTable(&unk_100224C94, &type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1138);
  }
  return result;
}

unint64_t sub_1000EF7C0()
{
  unint64_t result;

  result = qword_1002B1140;
  if (!qword_1002B1140)
  {
    result = swift_getWitnessTable(&unk_100224CBC, &type metadata for PasteboardAcquisitionError.NoDataSessionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1140);
  }
  return result;
}

unint64_t sub_1000EF800()
{
  unint64_t result;

  result = qword_1002B1148;
  if (!qword_1002B1148)
  {
    result = swift_getWitnessTable(&unk_100224BDC, &type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1148);
  }
  return result;
}

unint64_t sub_1000EF840()
{
  unint64_t result;

  result = qword_1002B1150;
  if (!qword_1002B1150)
  {
    result = swift_getWitnessTable(&unk_100224C04, &type metadata for PasteboardAcquisitionError.NoRepresentationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1150);
  }
  return result;
}

unint64_t sub_1000EF880()
{
  unint64_t result;

  result = qword_1002B1158;
  if (!qword_1002B1158)
  {
    result = swift_getWitnessTable(&unk_100224B24, &type metadata for PasteboardAcquisitionError.NoTransferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1158);
  }
  return result;
}

unint64_t sub_1000EF8C0()
{
  unint64_t result;

  result = qword_1002B1160;
  if (!qword_1002B1160)
  {
    result = swift_getWitnessTable(&unk_100224B4C, &type metadata for PasteboardAcquisitionError.NoTransferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1160);
  }
  return result;
}

unint64_t sub_1000EF900()
{
  unint64_t result;

  result = qword_1002B1168;
  if (!qword_1002B1168)
  {
    result = swift_getWitnessTable(&unk_100224AD4, &type metadata for PasteboardAcquisitionError.NoReceiverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1168);
  }
  return result;
}

unint64_t sub_1000EF940()
{
  unint64_t result;

  result = qword_1002B1170;
  if (!qword_1002B1170)
  {
    result = swift_getWitnessTable(&unk_100224AFC, &type metadata for PasteboardAcquisitionError.NoReceiverCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1170);
  }
  return result;
}

unint64_t sub_1000EF980()
{
  unint64_t result;

  result = qword_1002B1178;
  if (!qword_1002B1178)
  {
    result = swift_getWitnessTable(&unk_100224A84, &type metadata for PasteboardAcquisitionError.WrongContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1178);
  }
  return result;
}

unint64_t sub_1000EF9C0()
{
  unint64_t result;

  result = qword_1002B1180;
  if (!qword_1002B1180)
  {
    result = swift_getWitnessTable(&unk_100224AAC, &type metadata for PasteboardAcquisitionError.WrongContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1180);
  }
  return result;
}

unint64_t sub_1000EFA00()
{
  unint64_t result;

  result = qword_1002B1188;
  if (!qword_1002B1188)
  {
    result = swift_getWitnessTable(&unk_100224A34, &type metadata for PasteboardAcquisitionError.DuplicateRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1188);
  }
  return result;
}

unint64_t sub_1000EFA40()
{
  unint64_t result;

  result = qword_1002B1190;
  if (!qword_1002B1190)
  {
    result = swift_getWitnessTable(&unk_100224A5C, &type metadata for PasteboardAcquisitionError.DuplicateRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1190);
  }
  return result;
}

unint64_t sub_1000EFA80()
{
  unint64_t result;

  result = qword_1002B1198;
  if (!qword_1002B1198)
  {
    result = swift_getWitnessTable(&unk_10022497C, &type metadata for PasteboardAcquisitionError.OpenFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1198);
  }
  return result;
}

unint64_t sub_1000EFAC0()
{
  unint64_t result;

  result = qword_1002B11A0;
  if (!qword_1002B11A0)
  {
    result = swift_getWitnessTable(&unk_1002249A4, &type metadata for PasteboardAcquisitionError.OpenFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11A0);
  }
  return result;
}

unint64_t sub_1000EFB00()
{
  unint64_t result;

  result = qword_1002B11A8;
  if (!qword_1002B11A8)
  {
    result = swift_getWitnessTable(&unk_10022492C, &type metadata for PasteboardAcquisitionError.OpenNoURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11A8);
  }
  return result;
}

unint64_t sub_1000EFB40()
{
  unint64_t result;

  result = qword_1002B11B0;
  if (!qword_1002B11B0)
  {
    result = swift_getWitnessTable(&unk_100224954, &type metadata for PasteboardAcquisitionError.OpenNoURLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11B0);
  }
  return result;
}

unint64_t sub_1000EFB80()
{
  unint64_t result;

  result = qword_1002B11B8;
  if (!qword_1002B11B8)
  {
    result = swift_getWitnessTable(&unk_100224874, &type metadata for PasteboardAcquisitionError.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11B8);
  }
  return result;
}

unint64_t sub_1000EFBC0()
{
  unint64_t result;

  result = qword_1002B11C0;
  if (!qword_1002B11C0)
  {
    result = swift_getWitnessTable(&unk_10022489C, &type metadata for PasteboardAcquisitionError.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11C0);
  }
  return result;
}

unint64_t sub_1000EFC00()
{
  unint64_t result;

  result = qword_1002B11C8;
  if (!qword_1002B11C8)
  {
    result = swift_getWitnessTable(&unk_100224824, &type metadata for PasteboardAcquisitionError.WriteFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11C8);
  }
  return result;
}

unint64_t sub_1000EFC40()
{
  unint64_t result;

  result = qword_1002B11D0;
  if (!qword_1002B11D0)
  {
    result = swift_getWitnessTable(&unk_10022484C, &type metadata for PasteboardAcquisitionError.WriteFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11D0);
  }
  return result;
}

unint64_t sub_1000EFC80()
{
  unint64_t result;

  result = qword_1002B11D8;
  if (!qword_1002B11D8)
  {
    result = swift_getWitnessTable(&unk_1002247D4, &type metadata for PasteboardAcquisitionError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11D8);
  }
  return result;
}

unint64_t sub_1000EFCC0()
{
  unint64_t result;

  result = qword_1002B11E0;
  if (!qword_1002B11E0)
  {
    result = swift_getWitnessTable(&unk_1002247FC, &type metadata for PasteboardAcquisitionError.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11E0);
  }
  return result;
}

unint64_t sub_1000EFD00()
{
  unint64_t result;

  result = qword_1002B11E8;
  if (!qword_1002B11E8)
  {
    result = swift_getWitnessTable(&unk_100224784, &type metadata for PasteboardAcquisitionError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11E8);
  }
  return result;
}

unint64_t sub_1000EFD40()
{
  unint64_t result;

  result = qword_1002B11F0;
  if (!qword_1002B11F0)
  {
    result = swift_getWitnessTable(&unk_1002247AC, &type metadata for PasteboardAcquisitionError.GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11F0);
  }
  return result;
}

unint64_t sub_1000EFD80()
{
  unint64_t result;

  result = qword_1002B11F8;
  if (!qword_1002B11F8)
  {
    result = swift_getWitnessTable(&unk_100224D9C, &type metadata for PasteboardAcquisitionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B11F8);
  }
  return result;
}

unint64_t sub_1000EFDC0()
{
  unint64_t result;

  result = qword_1002B1200;
  if (!qword_1002B1200)
  {
    result = swift_getWitnessTable(&unk_100224DC4, &type metadata for PasteboardAcquisitionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1200);
  }
  return result;
}

uint64_t sub_1000EFDFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain(a3);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000EFE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EFE84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EFE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 120), a1);
}

uint64_t sub_1000EFEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a1);
}

uint64_t sub_1000EFEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v1, v0);
}

uint64_t sub_1000EFED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 120), a1);
}

uint64_t sub_1000EFEE8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000EFEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000EFEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000EFF08()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t sub_1000EFF18()
{
  uint64_t v0;

  return v0;
}

void sub_1000EFF34(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000EFF50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000EFF5C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000EFF78@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

void sub_1000EFF80(uint64_t a1)
{
  sub_1000EDAD4(a1);
}

uint64_t sub_1000EFF88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000EFF98()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 176), *(_QWORD *)(v1 - 168));
}

uint64_t sub_1000EFFA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, *(_QWORD *)(a5 - 256), a4);
}

void sub_1000EFFB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  sub_1000EDA70(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t sub_1000EFFC4()
{
  return type metadata accessor for UTType(0);
}

uint64_t sub_1000EFFE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

_QWORD *sub_1000EFFE8()
{
  _QWORD *v0;

  return sub_10000DBE4(v0, v0[3]);
}

uint64_t sub_1000F0028()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F0038(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_1000F0050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 120), a1);
}

uint64_t sub_1000F0068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_1000F0074(uint64_t a1)
{
  sub_1000EDAD4(a1);
}

uint64_t sub_1000F008C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t sub_1000F00B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000F00C8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getWitnessTable(v0, v1);
}

void sub_1000F00DC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000255F0(v2, a2);
}

uint64_t sub_1000F00E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_1000F00F0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000F010C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000F0128()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000F0138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1000F0140()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000F0160()
{
  uint64_t v0;
  uint64_t v1;

  return UTType.init(_:)(v0, v1);
}

uint64_t sub_1000F0170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v4, a4);
}

uint64_t sub_1000F0180()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000F0190@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

void sub_1000F01A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = v4;
  v5 = v1 + 16 * v0;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v3;
}

uint64_t sub_1000F01B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000F01C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000F01D8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v0 + 8 * v1 + 32));
}

uint64_t sub_1000F01E8(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

void sub_1000F022C()
{
  sub_100058678();
}

void sub_1000F0238(uint64_t a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = a1 & 0xFFFF0000FFFFFFFFLL | 0x272000000000;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
}

unint64_t sub_1000F0244()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 10;
  return sub_1000ED890();
}

uint64_t sub_1000F0250(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0);
}

unint64_t sub_1000F0258()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 69) = 8;
  return sub_1000ED908();
}

void sub_1000F0264(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_1000EDA70(a1, *(_QWORD *)(v3 - 104), a3);
}

unint64_t sub_1000F0270()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 71) = 6;
  return sub_1000ED980();
}

uint64_t sub_1000F027C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unint64_t sub_1000F0288()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 5;
  return sub_1000ED9BC();
}

unint64_t sub_1000F0294()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 89) = 4;
  return sub_1000ED9F8();
}

void sub_1000F02A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 41;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000F02AC()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

unint64_t sub_1000F02B8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 9;
  return sub_1000ED8CC();
}

uint64_t sub_1000F02C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

unint64_t sub_1000F02D0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 70) = 7;
  return sub_1000ED944();
}

unint64_t sub_1000F02E8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 90) = 3;
  return sub_1000EDA34();
}

uint64_t sub_1000F02F4()
{
  uint64_t v0;

  return v0;
}

void sub_1000F0308()
{
  sub_100058678();
}

unint64_t sub_1000F0314()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 91) = 2;
  return sub_1000EDA98();
}

unint64_t sub_1000F0320()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return sub_1000EDD8C();
}

uint64_t sub_1000F032C()
{
  return 0x616F626574736170;
}

unint64_t sub_1000F0348()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 12;
  return sub_1000ED818();
}

unint64_t sub_1000F0354()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 92) = 1;
  return sub_1000EDB0C();
}

unint64_t sub_1000F0360()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 11;
  return sub_1000ED854();
}

uint64_t sub_1000F036C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

void sub_1000F0378(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000255F0(*(_QWORD *)(v2 - 160), a2);
}

void sub_1000F0380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1000E4A0C();
  v7 = v6 + 64;
  sub_1000F3E38();
  swift_bridgeObjectRetain(v8);
  sub_1000F41AC();
LABEL_2:
  v9 = v1;
  v10 = v3;
  while (1)
  {
    v3 = v10;
    v1 = v9;
    if (!v0)
      break;
    sub_1000F4000();
LABEL_19:
    sub_1000F419C();
    if (!v14 || (sub_1000F3F28(v13), (v15 & 1) == 0))
    {
      if (v2)
      {
        sub_1000F417C();
        if (v17)
        {
          __break(1u);
LABEL_28:
          sub_1000269A0();
          sub_1000F3C94();
          v18 = 0;
          while (1)
          {
            if (v2)
            {
              sub_1000F3F64();
            }
            else
            {
              v19 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_53;
              if (v19 >= v5)
                goto LABEL_51;
              ++v18;
              if (!*(_QWORD *)(v7 + 8 * v19))
              {
                v18 = v19 + 1;
                if (v19 + 1 >= v5)
                  goto LABEL_51;
                if (!*(_QWORD *)(v7 + 8 * v18))
                {
                  v18 = v19 + 2;
                  if (v19 + 2 >= v5)
                    goto LABEL_51;
                  if (!*(_QWORD *)(v7 + 8 * v18))
                  {
                    v20 = v19 + 3;
                    if (v20 >= v5)
                      goto LABEL_51;
                    if (!*(_QWORD *)(v7 + 8 * v20))
                    {
                      while (1)
                      {
                        v18 = v20 + 1;
                        if (__OFADD__(v20, 1))
                          goto LABEL_55;
                        if (v18 >= v5)
                          goto LABEL_51;
                        ++v20;
                        if (*(_QWORD *)(v7 + 8 * v18))
                          goto LABEL_44;
                      }
                    }
                    v18 = v20;
                  }
                }
              }
LABEL_44:
              sub_1000F3FE8();
            }
            sub_1000F418C();
            if (v22)
            {
              sub_1000F3F50(v21);
              if ((v23 & 1) != 0)
                continue;
            }
            if (v4)
            {
              sub_1000F40A8();
              if (v17)
              {
                __break(1u);
LABEL_51:
                sub_10002645C();
                sub_1000F3D58();
                sub_1000088AC();
                return;
              }
            }
          }
        }
      }
      goto LABEL_2;
    }
    sub_1000F3FB8();
    if (v16)
    {
      sub_1000F3F0C();
      goto LABEL_2;
    }
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v11 >= v4)
    goto LABEL_28;
  ++v5;
  if (*(_QWORD *)(v7 + 8 * v11))
    goto LABEL_18;
  v5 = v11 + 1;
  if (v11 + 1 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
    goto LABEL_18;
  v5 = v11 + 2;
  if (v11 + 2 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
  {
LABEL_18:
    sub_1000F3FD0();
    goto LABEL_19;
  }
  v12 = v11 + 3;
  if (v12 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v12))
  {
    v5 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v5 >= v4)
      goto LABEL_28;
    ++v12;
    if (*(_QWORD *)(v7 + 8 * v5))
      goto LABEL_18;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_1000F0588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1000E4A0C();
  v7 = v6 + 64;
  sub_1000F3E38();
  swift_bridgeObjectRetain(v8);
  sub_1000F41AC();
LABEL_2:
  v9 = v1;
  v10 = v3;
  while (1)
  {
    v3 = v10;
    v1 = v9;
    if (!v0)
      break;
    sub_1000F4000();
LABEL_19:
    sub_1000F419C();
    if (!v14 || (sub_1000F3F28(v13), (v15 & 1) == 0))
    {
      if (v2)
      {
        sub_1000F417C();
        if (v17)
        {
          __break(1u);
LABEL_28:
          sub_1000269A0();
          sub_1000F3C94();
          v18 = 0;
          while (1)
          {
            if (v2)
            {
              sub_1000F3F64();
            }
            else
            {
              v19 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_53;
              if (v19 >= v5)
                goto LABEL_51;
              ++v18;
              if (!*(_QWORD *)(v7 + 8 * v19))
              {
                v18 = v19 + 1;
                if (v19 + 1 >= v5)
                  goto LABEL_51;
                if (!*(_QWORD *)(v7 + 8 * v18))
                {
                  v18 = v19 + 2;
                  if (v19 + 2 >= v5)
                    goto LABEL_51;
                  if (!*(_QWORD *)(v7 + 8 * v18))
                  {
                    v20 = v19 + 3;
                    if (v20 >= v5)
                      goto LABEL_51;
                    if (!*(_QWORD *)(v7 + 8 * v20))
                    {
                      while (1)
                      {
                        v18 = v20 + 1;
                        if (__OFADD__(v20, 1))
                          goto LABEL_55;
                        if (v18 >= v5)
                          goto LABEL_51;
                        ++v20;
                        if (*(_QWORD *)(v7 + 8 * v18))
                          goto LABEL_44;
                      }
                    }
                    v18 = v20;
                  }
                }
              }
LABEL_44:
              sub_1000F3FE8();
            }
            sub_1000F418C();
            if (v22)
            {
              sub_1000F3F50(v21);
              if ((v23 & 1) != 0)
                continue;
            }
            if (v4)
            {
              sub_1000F40A8();
              if (v17)
              {
                __break(1u);
LABEL_51:
                sub_10002645C();
                sub_1000F3D58();
                sub_1000088AC();
                return;
              }
            }
          }
        }
      }
      goto LABEL_2;
    }
    sub_1000F3FB8();
    if (v16)
    {
      sub_1000F3F0C();
      goto LABEL_2;
    }
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v11 >= v4)
    goto LABEL_28;
  ++v5;
  if (*(_QWORD *)(v7 + 8 * v11))
    goto LABEL_18;
  v5 = v11 + 1;
  if (v11 + 1 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
    goto LABEL_18;
  v5 = v11 + 2;
  if (v11 + 2 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
  {
LABEL_18:
    sub_1000F3FD0();
    goto LABEL_19;
  }
  v12 = v11 + 3;
  if (v12 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v12))
  {
    v5 = v12;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v5 >= v4)
      goto LABEL_28;
    ++v12;
    if (*(_QWORD *)(v7 + 8 * v5))
      goto LABEL_18;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_1000F0790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  sub_1000E4A0C();
  v7 = v6 + 64;
  sub_1000F3E38();
  swift_bridgeObjectRetain();
  sub_1000F41AC();
LABEL_2:
  v8 = v1;
  v9 = v3;
  while (1)
  {
    v3 = v9;
    v1 = v8;
    if (!v0)
      break;
    sub_1000F4000();
LABEL_19:
    sub_1000F419C();
    if (!v13 || (sub_1000F3F28(v12), (v14 & 1) == 0))
    {
      if (v2)
      {
        sub_1000F417C();
        if (v16)
        {
          __break(1u);
LABEL_28:
          sub_1000269A0();
          sub_1000F3C94();
          v17 = 0;
          while (1)
          {
            if (v2)
            {
              sub_1000F3F64();
            }
            else
            {
              v18 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_53;
              if (v18 >= v5)
                goto LABEL_51;
              ++v17;
              if (!*(_QWORD *)(v7 + 8 * v18))
              {
                v17 = v18 + 1;
                if (v18 + 1 >= v5)
                  goto LABEL_51;
                if (!*(_QWORD *)(v7 + 8 * v17))
                {
                  v17 = v18 + 2;
                  if (v18 + 2 >= v5)
                    goto LABEL_51;
                  if (!*(_QWORD *)(v7 + 8 * v17))
                  {
                    v19 = v18 + 3;
                    if (v19 >= v5)
                      goto LABEL_51;
                    if (!*(_QWORD *)(v7 + 8 * v19))
                    {
                      while (1)
                      {
                        v17 = v19 + 1;
                        if (__OFADD__(v19, 1))
                          goto LABEL_55;
                        if (v17 >= v5)
                          goto LABEL_51;
                        ++v19;
                        if (*(_QWORD *)(v7 + 8 * v17))
                          goto LABEL_44;
                      }
                    }
                    v17 = v19;
                  }
                }
              }
LABEL_44:
              sub_1000F3FE8();
            }
            sub_1000F418C();
            if (v21)
            {
              sub_1000F3F50(v20);
              if ((v22 & 1) != 0)
                continue;
            }
            if (v4)
            {
              sub_1000F40A8();
              if (v16)
              {
                __break(1u);
LABEL_51:
                sub_10002645C();
                sub_1000F3D58();
                sub_1000088AC();
                return;
              }
            }
          }
        }
      }
      goto LABEL_2;
    }
    sub_1000F3FB8();
    if (v15)
    {
      sub_1000F3F0C();
      goto LABEL_2;
    }
  }
  v10 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v10 >= v4)
    goto LABEL_28;
  ++v5;
  if (*(_QWORD *)(v7 + 8 * v10))
    goto LABEL_18;
  v5 = v10 + 1;
  if (v10 + 1 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
    goto LABEL_18;
  v5 = v10 + 2;
  if (v10 + 2 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v5))
  {
LABEL_18:
    sub_1000F3FD0();
    goto LABEL_19;
  }
  v11 = v10 + 3;
  if (v11 >= v4)
    goto LABEL_28;
  if (*(_QWORD *)(v7 + 8 * v11))
  {
    v5 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v5 >= v4)
      goto LABEL_28;
    ++v11;
    if (*(_QWORD *)(v7 + 8 * v5))
      goto LABEL_18;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_1000F0998(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  Swift::Int v58;
  uint64_t v59;
  char isUnique;
  uint64_t isUniquea;
  char isUniqueb;
  uint64_t isUniquec;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;

  sub_1000F3DAC(a1, a2);
  v66 = v2;
  sub_1000103C0();
  while (1)
  {
    if (v81)
    {
      sub_1000F4070();
      goto LABEL_21;
    }
    sub_1000F4240();
    if (v5 == v6)
      goto LABEL_41;
    if (!*(_QWORD *)(v64 + 8 * v4))
    {
      sub_1000F40E4();
      if (v5 == v6)
        goto LABEL_41;
      sub_1000F4234();
      if (!v7)
      {
        sub_1000F40E4();
        if (v5 == v6)
          goto LABEL_41;
        sub_1000F4234();
        if (!v8)
        {
          sub_1000F4240();
          if (v5 == v6)
          {
LABEL_41:
            swift_release();
            sub_1000F4028();
            return;
          }
          if (!*(_QWORD *)(v64 + 8 * v9))
            break;
        }
      }
    }
LABEL_20:
    sub_1000F4050();
LABEL_21:
    sub_1000F3E9C();
    v80 = *(_QWORD *)(v13 + 8 * v12);
    v75 = v14;
    v76 = v15;
    v77 = v17;
    v78 = *(unsigned __int8 *)(v16 + 13);
    sub_1000F3CF0();
    if (v18 && (sub_1000F3DF8(), (v19 & 1) != 0))
    {
      sub_1000F42CC();
      if (!v20)
      {
        isUnique = sub_1000F4210();
        sub_1000F3DF8();
        sub_1000F3E84();
        if (v6)
          goto LABEL_45;
        v21 = sub_1000F41EC(&qword_1002B3420);
        if (sub_1000F3E70(v21, v22, v23, v24, v25, v26, v27, v28, v58, v59, isUnique))
        {
          sub_1000F3DF8();
          sub_1000F3F3C();
          if (!v29)
            goto LABEL_47;
        }
        sub_1000F4298();
        if ((v39 & 1) != 0)
          goto LABEL_37;
        sub_1000F3BCC(v30, v31, v32, v33, v34, v35, v36, v37, v58, v59, isUniquea, v64, v65, v66, v67, v68, v69, v70, v71,
          v72,
          v73,
          v74,
          v75,
          SHIDWORD(v75),
          v76,
          SHIDWORD(v76),
          v77,
          SHIDWORD(v77),
          v78,
          SHIDWORD(v78),
          v79);
        if (v6)
          goto LABEL_46;
        goto LABEL_39;
      }
    }
    else
    {
      isUniqueb = sub_1000F4210();
      sub_1000F3DF8();
      sub_1000F3E84();
      if (v6)
        goto LABEL_43;
      v41 = sub_1000F41EC(&qword_1002B3420);
      if (sub_1000F3E70(v41, v42, v43, v44, v45, v46, v47, v48, v58, v59, isUniqueb))
      {
        sub_1000F3DF8();
        sub_1000F3F3C();
        if (!v29)
          goto LABEL_47;
      }
      sub_1000F4298();
      if ((v57 & 1) != 0)
      {
LABEL_37:
        *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v38) = v80;
        goto LABEL_40;
      }
      sub_1000F3BCC(v49, v50, v51, v52, v53, v54, v55, v56, v58, v59, isUniquec, v64, v65, v66, v67, v68, v69, v70, v71,
        v72,
        v73,
        v74,
        v75,
        SHIDWORD(v75),
        v76,
        SHIDWORD(v76),
        v77,
        SHIDWORD(v77),
        v78,
        SHIDWORD(v78),
        v79);
      if (v6)
        goto LABEL_44;
LABEL_39:
      *(_QWORD *)(v3 + 16) = v40;
LABEL_40:
      sub_1000F422C();
    }
  }
  while (!__OFADD__(v9, 1))
  {
    sub_1000F40E4();
    if (v5 == v6)
      goto LABEL_41;
    v9 = v10 + 1;
    if (*(_QWORD *)(v64 + 8 * v11))
      goto LABEL_20;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
  __break(1u);
}

uint64_t sub_1000F0BE8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 v31;
  BOOL v32;
  Swift::Int v33;
  Swift::Bool v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BOOL8 v44;
  Swift::Int v45;
  Swift::Bool v46;
  uint64_t v47;
  char v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t result;
  Swift::Int capacity;
  Swift::Int capacitya;
  uint64_t v54;
  uint64_t v55;
  char isUnique;
  char isUniquea;
  char v58;
  char v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;

  v60 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v74 = v5 & *(_QWORD *)(a1 + 64);
  v61 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v62 = a1;
  swift_bridgeObjectRetain(a1);
  v72 = 0;
  while (1)
  {
    if (v74)
    {
      v6 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      v7 = v6 | (v72 << 6);
      goto LABEL_20;
    }
    v8 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v8 >= v61)
      goto LABEL_40;
    v9 = *(_QWORD *)(v60 + 8 * v8);
    v10 = v72 + 1;
    if (!v9)
    {
      v10 = v72 + 2;
      if (v72 + 2 >= v61)
        goto LABEL_40;
      v9 = *(_QWORD *)(v60 + 8 * v10);
      if (!v9)
      {
        v10 = v72 + 3;
        if (v72 + 3 >= v61)
          goto LABEL_40;
        v9 = *(_QWORD *)(v60 + 8 * v10);
        if (!v9)
          break;
      }
    }
LABEL_19:
    v74 = (v9 - 1) & v9;
    v72 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
    v12 = (unsigned __int8 *)(*(_QWORD *)(v62 + 48) + 16 * v7);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    v18 = v12[10];
    v19 = v12[11];
    v73 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v7);
    v20 = v13 | (v14 << 8);
    v67 = v12[5];
    v68 = v12[8];
    v21 = ((unint64_t)v12[7] << 56) | ((unint64_t)v12[6] << 48) | (v67 << 40) | (v17 << 32) | v20 | (v15 << 16) | (v16 << 24);
    v69 = v12[9];
    v70 = v12[13];
    v22 = v68 | (v69 << 8);
    v71 = v12[12];
    v23 = ((unint64_t)v12[15] << 56) | ((unint64_t)v12[14] << 48) | (v70 << 40) | (v71 << 32) | v22 | (v18 << 16) | (v19 << 24);
    v24 = v21 & 0xFFFFFFFF00000000 | ((unint64_t)v15 << 16) & 0xFFFFFFFF00FFFFFFLL | v20 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v16 << 24);
    v25 = v23 & 0xFFFFFFFF00000000 | ((unint64_t)v18 << 16) & 0xFFFFFFFF00FFFFFFLL | v22 & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v19 << 24);
    v65 = HIWORD(v23);
    v66 = HIBYTE(v23);
    v63 = HIWORD(v21);
    v64 = HIBYTE(v21);
    if (a2[2] && (v26 = sub_1001A8C70(v24, v25), (v27 & 1) != 0))
    {
      if (*(_QWORD *)(a2[7] + 8 * v26) < v73)
      {
        isUnique = swift_isUniquelyReferenced_nonNull_native(a2);
        v28 = sub_1001A8C70(v24, v25);
        v29 = a2[2];
        v58 = v30;
        v31 = (v30 & 1) == 0;
        v32 = __OFADD__(v29, v31);
        v33 = v29 + v31;
        if (v32)
          goto LABEL_45;
        capacity = v33;
        v54 = v28;
        sub_1000055B0(&qword_1002B3420);
        v34 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
        v35 = v54;
        if (v34)
        {
          v36 = sub_1001A8C70(v24, v25);
          if ((v58 & 1) != (v37 & 1))
            goto LABEL_47;
          v35 = v36;
        }
        if ((v58 & 1) != 0)
          goto LABEL_36;
        a2[(v35 >> 6) + 8] |= 1 << v35;
        v38 = (_BYTE *)(a2[6] + 16 * v35);
        *v38 = v13;
        v38[1] = v14;
        v38[2] = v15;
        v38[3] = v16;
        v38[4] = v17;
        v38[5] = v67;
        v38[6] = v63;
        v38[7] = v64;
        v38[8] = v68;
        v38[9] = v69;
        v38[10] = v18;
        v38[11] = v19;
        v38[12] = v71;
        v38[13] = v70;
        v38[14] = v65;
        v38[15] = v66;
        *(_QWORD *)(a2[7] + 8 * v35) = v73;
        v39 = a2[2];
        v32 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v32)
          goto LABEL_46;
        goto LABEL_38;
      }
    }
    else
    {
      isUniquea = swift_isUniquelyReferenced_nonNull_native(a2);
      v41 = sub_1001A8C70(v24, v25);
      v42 = a2[2];
      v59 = v43;
      v44 = (v43 & 1) == 0;
      v32 = __OFADD__(v42, v44);
      v45 = v42 + v44;
      if (v32)
        goto LABEL_43;
      capacitya = v45;
      v55 = v41;
      sub_1000055B0(&qword_1002B3420);
      v46 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquea, capacitya);
      v35 = v55;
      if (v46)
      {
        v47 = sub_1001A8C70(v24, v25);
        if ((v59 & 1) != (v48 & 1))
          goto LABEL_47;
        v35 = v47;
      }
      if ((v59 & 1) != 0)
      {
LABEL_36:
        *(_QWORD *)(a2[7] + 8 * v35) = v73;
        goto LABEL_39;
      }
      a2[(v35 >> 6) + 8] |= 1 << v35;
      v49 = (_BYTE *)(a2[6] + 16 * v35);
      *v49 = v13;
      v49[1] = v14;
      v49[2] = v15;
      v49[3] = v16;
      v49[4] = v17;
      v49[5] = v67;
      v49[6] = v63;
      v49[7] = v64;
      v49[8] = v68;
      v49[9] = v69;
      v49[10] = v18;
      v49[11] = v19;
      v49[12] = v71;
      v49[13] = v70;
      v49[14] = v65;
      v49[15] = v66;
      *(_QWORD *)(a2[7] + 8 * v35) = v73;
      v50 = a2[2];
      v32 = __OFADD__(v50, 1);
      v40 = v50 + 1;
      if (v32)
        goto LABEL_44;
LABEL_38:
      a2[2] = v40;
LABEL_39:
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  v11 = v72 + 4;
  if (v72 + 4 >= v61)
  {
LABEL_40:
    swift_release();
    return (uint64_t)a2;
  }
  v9 = *(_QWORD *)(v60 + 8 * v11);
  if (v9)
  {
    v10 = v72 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v61)
      goto LABEL_40;
    v9 = *(_QWORD *)(v60 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
  __break(1u);
  return result;
}

void sub_1000F1144()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for CompanionLinkDevice(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000268BC();
  v10 = v8 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - v12;
  sub_1000055B0(&qword_1002B1290);
  sub_10000E490();
  __chkstk_darwin(v14);
  sub_100026738();
  __chkstk_darwin(v15);
  sub_1000F4218();
  if (v16 || *(_QWORD *)(v5 + 16) != *(_QWORD *)(v3 + 16))
  {
LABEL_35:
    sub_10000E4E0();
    return;
  }
  v41 = v7;
  v42 = 0;
  v40 = v5;
  v17 = v5 + 64;
  v38 = v17;
  sub_1000F3F7C();
  v39 = v18;
  v37 = v18 - 1;
  while (1)
  {
    if (v17)
    {
      sub_1000F4150();
LABEL_6:
      v20 = *(_QWORD *)(v40 + 56);
      v21 = (_QWORD *)(*(_QWORD *)(v40 + 48) + 16 * v19);
      v22 = v21[1];
      *v0 = *v21;
      v0[1] = v22;
      v23 = v20 + *(_QWORD *)(v7 + 72) * v19;
      v24 = sub_1000F40A0();
      sub_1000F3B54(v23, (uint64_t)v0 + *(int *)(v24 + 48), type metadata accessor for CompanionLinkDevice);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v0, 0, 1, v24);
      swift_bridgeObjectRetain(v22);
      goto LABEL_29;
    }
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    sub_1000F42CC();
    if (v26 != v27)
    {
      if (*(_QWORD *)(v38 + 8 * v25))
        goto LABEL_11;
      v28 = v25 + 1;
      v42 = v25;
      if (v25 + 1 < v39)
      {
        if (*(_QWORD *)(v38 + 8 * v28))
          goto LABEL_14;
        v42 = v25 + 1;
        if (v25 + 2 < v39)
        {
          if (*(_QWORD *)(v38 + 8 * (v25 + 2)))
          {
            v25 += 2;
            goto LABEL_11;
          }
          v42 = v25 + 2;
          if (v25 + 3 < v39)
          {
            if (*(_QWORD *)(v38 + 8 * (v25 + 3)))
            {
              v25 += 3;
              goto LABEL_11;
            }
            v28 = v25 + 4;
            v42 = v25 + 3;
            if (v25 + 4 < v39)
              break;
          }
        }
      }
    }
LABEL_28:
    v30 = sub_1000F40A0();
    sub_1000F40F0(v30);
    v17 = 0;
LABEL_29:
    sub_1000F3B90((uint64_t)v0, (uint64_t)v1, &qword_1002B1290);
    v31 = sub_1000F40A0();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v1, 1, v31) == 1)
      goto LABEL_35;
    v33 = *v1;
    v32 = v1[1];
    sub_10000B210((uint64_t)v1 + *(int *)(v31 + 48), (uint64_t)v13);
    v34 = sub_1000055F0(v33, v32);
    LOBYTE(v33) = v35;
    sub_10000E4A0();
    if ((v33 & 1) == 0)
    {
      sub_100009EF8((uint64_t)v13);
      goto LABEL_35;
    }
    v7 = v41;
    sub_1000F3B54(*(_QWORD *)(v3 + 56) + *(_QWORD *)(v41 + 72) * v34, v10, type metadata accessor for CompanionLinkDevice);
    v36 = static CompanionLinkDevice.== infix(_:_:)(v10, (uint64_t)v13);
    sub_100009EF8(v10);
    sub_100009EF8((uint64_t)v13);
    if ((v36 & 1) == 0)
      goto LABEL_35;
  }
  if (*(_QWORD *)(v38 + 8 * v28))
  {
LABEL_14:
    v25 = v28;
LABEL_11:
    sub_1000F4104(v25);
    goto LABEL_6;
  }
  while (!__OFADD__(v28, 1))
  {
    sub_1000F42CC();
    if (v26 == v27)
    {
      v42 = v37;
      goto LABEL_28;
    }
    v28 = v29 + 1;
    if (*(_QWORD *)(v38 + 8 * v25))
      goto LABEL_11;
  }
LABEL_37:
  __break(1u);
}

void sub_1000F145C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_1000F3FA4();
  if (v0 == v1 || (v2 = v1, v3 = v0, *(_QWORD *)(v0 + 16) != *(_QWORD *)(v1 + 16)))
  {
LABEL_26:
    sub_10002D8A4();
    return;
  }
  v4 = 0;
  v5 = v0 + 64;
  v6 = 1 << *(_BYTE *)(v0 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v0 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v9)
      goto LABEL_26;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_26;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_26;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_26;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v16 = sub_1001A8C70(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11 + 8));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v16) != v15)
      goto LABEL_26;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    goto LABEL_26;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      goto LABEL_26;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_1000F15D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v31 = a1 + 64;
  sub_100084F48();
  v6 = v5 & v4;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v33 = v2;
  v8 = 56;
  v34 = v9;
  while (1)
  {
    if (v6)
    {
      v37 = (v6 - 1) & v6;
      v38 = v3;
      v10 = __clz(__rbit64(v6)) | (v3 << 6);
      goto LABEL_26;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v11 >= v32)
      return;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      sub_1000F428C();
      if (v14 == v15)
        return;
      sub_1000F4280();
      if (!v12)
      {
        sub_1000F428C();
        if (v14 == v15)
          return;
        sub_1000F4280();
        if (!v12)
        {
          sub_1000F428C();
          if (v14 == v15)
            return;
          sub_1000F4280();
          if (!v12)
            break;
        }
      }
    }
LABEL_25:
    v37 = (v12 - 1) & v12;
    v38 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_26:
    v19 = (unint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v20 = *(_QWORD *)(v2 + 56) + v10 * v8;
    v39 = *(unsigned __int8 *)(v20 + 40);
    v21 = *(_QWORD *)(v20 + 48);
    v22 = *v19;
    v23 = v19[1];
    v43 = *(_QWORD *)(v20 + 16);
    swift_bridgeObjectRetain(v43);
    v42 = v21;
    swift_bridgeObjectRetain(v21);
    v24 = sub_1001A8C70(v22, v23);
    if ((v25 & 1) == 0)
      goto LABEL_38;
    v26 = *(_QWORD *)(v34 + 56) + 56 * v24;
    v27 = *(_QWORD *)(v26 + 16);
    v40 = *(_QWORD *)(v26 + 8);
    v41 = *(_QWORD *)v26;
    v35 = *(_QWORD *)(v26 + 32);
    v36 = *(_QWORD *)(v26 + 24);
    v28 = *(_BYTE *)(v26 + 40);
    v29 = *(_QWORD *)(v26 + 48);
    swift_bridgeObjectRetain(v27);
    sub_10002D9F8();
    if (static UniversalControlUUID.compare(lhs:rhs:)(v41, v40) || (sub_100198A54(v27, v43) & 1) == 0)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      sub_10002D89C();
      sub_10000E50C();
      return;
    }
    if ((v28 & 1) != 0)
    {
      if (!v39)
        goto LABEL_37;
    }
    else if ((v39 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(v36, v35))
    {
      goto LABEL_37;
    }
    v30 = sub_100198A54(v29, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002D89C();
    sub_10000E50C();
    v2 = v33;
    v8 = 56;
    v6 = v37;
    v3 = v38;
    if ((v30 & 1) == 0)
      return;
  }
  v17 = v16 + 4;
  if (v17 >= v32)
    return;
  v12 = *(_QWORD *)(v31 + 8 * v17);
  if (v12)
  {
    v13 = v17;
    goto LABEL_25;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_1000F428C();
    if (v14 == v15)
      return;
    sub_1000F4280();
    v17 = v18 + 1;
    if (v12)
      goto LABEL_25;
  }
LABEL_41:
  __break(1u);
}

void sub_1000F18E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for UniversalControlDisplayLayout(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000268BC();
  v52 = v6 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - v9;
  sub_1000055B0((uint64_t *)&unk_1002B3370);
  sub_10000E490();
  __chkstk_darwin(v11);
  sub_1000268BC();
  v14 = (_OWORD *)(v12 - v13);
  __chkstk_darwin(v15);
  v17 = (unint64_t *)((char *)&v46 - v16);
  if (v3 == v1 || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v1 + 16))
  {
LABEL_34:
    sub_10000E4E0();
    return;
  }
  v50 = v1;
  v51 = v5;
  v53 = 0;
  v49 = v3;
  sub_1000F3F7C();
  v47 = v3 + 64;
  v48 = v18;
  v46 = v18 - 1;
  while (1)
  {
    if (v1)
    {
      sub_1000F4150();
      v20 = v49;
      v21 = v51;
LABEL_6:
      v22 = *(_QWORD *)(v20 + 56);
      *v14 = *(_OWORD *)(*(_QWORD *)(v20 + 48) + 16 * v19);
      v23 = v22 + *(_QWORD *)(v21 + 72) * v19;
      v24 = sub_1000F42A4();
      sub_1000C2764((uint64_t)v14 + *(int *)(v24 + 48), v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, 0, 1, v24);
      goto LABEL_28;
    }
    v25 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v21 = v51;
    if (v25 < v48)
    {
      if (*(_QWORD *)(v47 + 8 * v25))
        goto LABEL_10;
      v26 = v53 + 2;
      ++v53;
      if (v25 + 1 < v48)
      {
        if (*(_QWORD *)(v47 + 8 * v26))
          goto LABEL_13;
        v53 = v25 + 1;
        if (v25 + 2 < v48)
        {
          if (*(_QWORD *)(v47 + 8 * (v25 + 2)))
          {
            v25 += 2;
            goto LABEL_10;
          }
          v53 = v25 + 2;
          if (v25 + 3 < v48)
          {
            if (*(_QWORD *)(v47 + 8 * (v25 + 3)))
            {
              v25 += 3;
              goto LABEL_10;
            }
            v26 = v25 + 4;
            v53 = v25 + 3;
            if (v25 + 4 < v48)
              break;
          }
        }
      }
    }
LABEL_27:
    v27 = sub_1000F42A4();
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, 1, 1, v27);
    v1 = 0;
LABEL_28:
    sub_1000F3B90((uint64_t)v14, (uint64_t)v17, (uint64_t *)&unk_1002B3370);
    v28 = sub_1000F42A4();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v17, 1, v28) == 1)
      goto LABEL_34;
    v29 = (uint64_t)v17 + *(int *)(v28 + 48);
    v30 = *v17;
    v31 = v17[1];
    sub_1000C2764((uint64_t)v10, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    v32 = v30;
    v33 = v50;
    v34 = sub_1001A8C70(v32, v31);
    if ((v35 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v4);
      goto LABEL_34;
    }
    v36 = *(_QWORD *)(v33 + 56) + *(_QWORD *)(v21 + 72) * v34;
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v38 = v21;
    v39 = v14;
    v40 = v10;
    v41 = v52;
    sub_1000C2764(v52, v36, v37);
    v42 = sub_1000F3A9C();
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v40, v4, v42);
    v44 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v45 = v41;
    v10 = v40;
    v14 = v39;
    v44(v45, v4);
    v44((uint64_t)v10, v4);
    if ((v43 & 1) == 0)
      goto LABEL_34;
  }
  if (*(_QWORD *)(v47 + 8 * v26))
  {
LABEL_13:
    v25 = v26;
LABEL_10:
    sub_1000F4104(v25);
    goto LABEL_6;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v48)
    {
      v53 = v46;
      goto LABEL_27;
    }
    ++v26;
    if (*(_QWORD *)(v47 + 8 * v25))
      goto LABEL_10;
  }
LABEL_36:
  __break(1u);
}

void sub_1000F1C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  __int128 v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v6 = sub_10000E440();
  v62 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10002641C();
  v60 = v8 - v7;
  sub_1000055B0(&qword_1002B1258);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_100026738();
  __chkstk_darwin(v10);
  sub_1000F4218();
  if (v47 || *(_QWORD *)(v5 + 16) != *(_QWORD *)(v3 + 16))
  {
LABEL_47:
    sub_10000E4E0();
    return;
  }
  v58 = v3;
  v59 = 0;
  v54 = v5;
  v55 = v1;
  sub_100084F48();
  v13 = v12 & v11;
  v52 = v5 + 64;
  v53 = (unint64_t)(v14 + 63) >> 6;
  v56 = v0;
  v57 = v6;
  while (v13)
  {
    v15 = __clz(__rbit64(v13));
    v16 = (v13 - 1) & v13;
    v17 = v15 | (v59 << 6);
LABEL_6:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v62 + 16))(v0, *(_QWORD *)(v54 + 48) + *(_QWORD *)(v62 + 72) * v17, v6);
    v18 = *(_QWORD *)(v54 + 56) + 40 * v17;
    v19 = sub_1000F40A0();
    v20 = v0 + *(int *)(v19 + 48);
    v21 = *(void **)(v18 + 8);
    v22 = *(_BYTE *)(v18 + 32);
    v23 = *(_OWORD *)(v18 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v18;
    *(_QWORD *)(v20 + 8) = v21;
    *(_OWORD *)(v20 + 16) = v23;
    *(_BYTE *)(v20 + 32) = v22;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v0, 0, 1, v19);
    v24 = v21;
LABEL_28:
    sub_1000F3B90(v0, v1, &qword_1002B1258);
    v29 = sub_1000F40A0();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v1, 1, v29) == 1)
      goto LABEL_47;
    v61 = v16;
    v30 = v1 + *(int *)(v29 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v60, v1, v6);
    v32 = *(_QWORD *)v30;
    v31 = *(void **)(v30 + 8);
    v33 = *(_BYTE *)(v30 + 32);
    sub_1001A8E58();
    v35 = v34;
    LOBYTE(v30) = v36;
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v6);
    if ((v30 & 1) == 0 || (v37 = *(_QWORD *)(v3 + 56) + 40 * v35, *(_QWORD *)v37 != v32))
    {
      v38 = v31;
LABEL_46:

      goto LABEL_47;
    }
    v38 = *(void **)(v37 + 8);
    v39 = *(_QWORD *)(v37 + 16);
    v40 = *(_QWORD *)(v37 + 24);
    v41 = *(_BYTE *)(v37 + 32);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v47 = v42 == v45 && v44 == v46;
    if (v47)
    {
      v50 = v38;
      swift_bridgeObjectRelease_n(v44, 2);
      if ((v41 & 1) != 0)
        goto LABEL_37;
LABEL_40:
      if ((v33 & 1) != 0)
      {
LABEL_45:

        goto LABEL_46;
      }
      v51 = static UniversalControlUUID.compare(lhs:rhs:)(v39, v40);

      v6 = v57;
      v3 = v58;
      v1 = v55;
      v0 = v56;
      v13 = v61;
      if (v51)
        goto LABEL_47;
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0);
      v49 = v38;
      sub_10000E50C();
      sub_1000267C4();
      if ((v48 & 1) == 0)
        goto LABEL_45;
      if ((v41 & 1) == 0)
        goto LABEL_40;
LABEL_37:

      v6 = v57;
      v3 = v58;
      v1 = v55;
      v0 = v56;
      v13 = v61;
      if ((v33 & 1) == 0)
        goto LABEL_47;
    }
  }
  v25 = v59 + 1;
  if (__OFADD__(v59, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v25 >= v53)
  {
LABEL_27:
    v28 = sub_1000F40A0();
    sub_1000F40F0(v28);
    v16 = 0;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v52 + 8 * v25);
  if (v26)
  {
LABEL_10:
    v16 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v25 << 6);
    v59 = v25;
    goto LABEL_6;
  }
  v27 = v59 + 2;
  ++v59;
  if (v25 + 1 >= v53)
    goto LABEL_27;
  v26 = *(_QWORD *)(v52 + 8 * v27);
  if (v26)
    goto LABEL_13;
  v59 = v25 + 1;
  if (v25 + 2 >= v53)
    goto LABEL_27;
  v26 = *(_QWORD *)(v52 + 8 * (v25 + 2));
  if (v26)
  {
    v25 += 2;
    goto LABEL_10;
  }
  v59 = v25 + 2;
  if (v25 + 3 >= v53)
    goto LABEL_27;
  v26 = *(_QWORD *)(v52 + 8 * (v25 + 3));
  if (v26)
  {
    v25 += 3;
    goto LABEL_10;
  }
  v27 = v25 + 4;
  v59 = v25 + 3;
  if (v25 + 4 >= v53)
    goto LABEL_27;
  v26 = *(_QWORD *)(v52 + 8 * v27);
  if (v26)
  {
LABEL_13:
    v25 = v27;
    goto LABEL_10;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v53)
    {
      v59 = v53 - 1;
      goto LABEL_27;
    }
    v26 = *(_QWORD *)(v52 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_10;
  }
LABEL_49:
  __break(1u);
}

void sub_1000F208C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  sub_10002626C();
  sub_10000E440();
  sub_10000E490();
  __chkstk_darwin(v0);
  sub_10002641C();
  sub_1000F3ED0();
  v1 = sub_1000F4274();
  v3 = v2;
  v10 = v2 >> 8;
  v11 = v2 >> 16;
  v12 = v2 >> 24;
  v13 = HIDWORD(v2);
  v14 = v2 >> 40;
  v15 = HIWORD(v2);
  v16 = HIBYTE(v2);
  sub_1000F3ED0();
  v4 = sub_1000F4274();
  v6 = v5;
  v17 = v5 >> 8;
  v18 = v5 >> 16;
  v19 = v5 >> 24;
  v20 = HIDWORD(v5);
  v21 = v5 >> 40;
  v22 = HIWORD(v5);
  v23 = HIBYTE(v5);
  v7 = sub_1000055B0((uint64_t *)&unk_1002B3490);
  inited = swift_initStackObject(v7, &v24);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 32) = v1;
  *(_BYTE *)(inited + 40) = v3;
  *(_BYTE *)(inited + 41) = v10;
  *(_BYTE *)(inited + 42) = v11;
  *(_BYTE *)(inited + 43) = v12;
  *(_BYTE *)(inited + 44) = v13;
  *(_BYTE *)(inited + 45) = v14;
  *(_BYTE *)(inited + 46) = v15;
  v9 = sub_1000F416C(inited, v16);
  static SourceDevice.reset = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for UniversalControlDeviceID, &type metadata for UInt64, v9);
  qword_1002B6FE0 = v4;
  LOBYTE(qword_1002B6FE8) = v6;
  BYTE1(qword_1002B6FE8) = v17;
  BYTE2(qword_1002B6FE8) = v18;
  BYTE3(qword_1002B6FE8) = v19;
  BYTE4(qword_1002B6FE8) = v20;
  BYTE5(qword_1002B6FE8) = v21;
  BYTE6(qword_1002B6FE8) = v22;
  HIBYTE(qword_1002B6FE8) = v23;
  sub_10000E4E0();
}

uint64_t *SourceDevice.reset.unsafeMutableAddressor()
{
  if (qword_1002A98C0 != -1)
    swift_once(&qword_1002A98C0, sub_1000F208C);
  return &static SourceDevice.reset;
}

double static SourceDevice.reset.getter()
{
  double result;

  if (qword_1002A98C0 != -1)
    swift_once(&qword_1002A98C0, sub_1000F208C);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t static SourceDevice.makeSourceDevice(localDeviceID:oldSourceDevice:newValue:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  _BYTE v24[56];

  if (!a3)
    goto LABEL_8;
  v13 = a3;
  v14 = qword_1002A98C0;
  swift_bridgeObjectRetain(a3);
  if (v14 != -1)
    swift_once(&qword_1002A98C0, sub_1000F208C);
  v15 = static SourceDevice.reset;
  sub_10002D9F8();
  if (static UniversalControlUUID.compare(lhs:rhs:)(a4, a5))
  {
    sub_10002D89C();
    goto LABEL_9;
  }
  sub_10005FFC0();
  sub_10002D9F8();
  sub_1000F145C();
  v17 = v16;
  swift_bridgeObjectRelease_n(v15, 2);
  sub_1000267C4();
  if ((v17 & 1) != 0)
  {
    sub_1000267C4();
LABEL_8:
    v18 = sub_1000055B0((uint64_t *)&unk_1002B3490);
    inited = swift_initStackObject(v18, v24);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    *(_QWORD *)(inited + 32) = a1;
    *(_WORD *)(inited + 40) = a2;
    *(_BYTE *)(inited + 42) = BYTE2(a2);
    *(_BYTE *)(inited + 43) = BYTE3(a2);
    *(_BYTE *)(inited + 44) = BYTE4(a2);
    *(_BYTE *)(inited + 45) = BYTE5(a2);
    *(_BYTE *)(inited + 46) = BYTE6(a2);
    v20 = sub_1000F416C(inited, SHIBYTE(a2));
    return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for UniversalControlDeviceID, &type metadata for UInt64, v20);
  }
LABEL_9:
  if (!static UniversalControlUUID.compare(lhs:rhs:)(a6, a7))
    return v13;
  sub_10005FFC0();
  result = sub_100041D30(a1, a2, v13);
  if ((v22 & 1) != 0)
    v23 = 0;
  else
    v23 = result;
  if (v23 != -1)
  {
    swift_isUniquelyReferenced_nonNull_native(v13);
    sub_1000F2E28();
    sub_1000F422C();
    sub_1000267C4();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t static SourceDevice.makeSourceDevice(localDeviceID:oldSourceDevice:otherSourceDevice:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v17;
  char v18;

  if (!a3)
    goto LABEL_10;
  if (qword_1002A98C0 != -1)
    swift_once(&qword_1002A98C0, sub_1000F208C);
  sub_1000F41DC();
  if (sub_1000F42AC(a4, a5))
  {
    sub_10000E4A0();
  }
  else
  {
    swift_bridgeObjectRetain(v8);
    sub_10005FFC0();
    sub_1000F145C();
    sub_1000F41CC();
    sub_1000267C4();
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  sub_1000F41DC();
  if (sub_1000F42AC(a7, a8))
  {
    sub_10000E4A0();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v8);
  sub_1000103C0();
  sub_1000F145C();
  sub_1000F41CC();
  swift_bridgeObjectRelease(a6);
  if ((v9 & 1) != 0)
  {
LABEL_10:
    sub_1000103C0();
    return a6;
  }
LABEL_12:
  v17 = sub_1000F0BE8(a6, a3);
  sub_1000F0588();
  if (!v18)
    return v17;
  if (v18 != 3)
    return v17;
  sub_10000E4A0();
  a6 = static SourceDevice.reset;
  sub_1000103C0();
  return a6;
}

void sub_1000F2964()
{
  sub_1000F2A50();
}

uint64_t sub_1000F2978(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  char v7;
  _BOOL8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_1001A8C40(a1);
  sub_1000F3C6C();
  if (v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = v3;
  v7 = v4;
  sub_1000055B0(&qword_1002B12D0);
  v8 = sub_1000F413C();
  if (!v8)
    goto LABEL_5;
  v9 = sub_1001A8C40(v8);
  if ((v7 & 1) != (v10 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PasteboardType);
    __break(1u);
    return result;
  }
  v6 = v9;
LABEL_5:
  v11 = *v1;
  if ((v7 & 1) == 0)
    return sub_10002323C(v6, a1, v11);
  v12 = *(_QWORD *)(v11 + 56);
  result = swift_release();
  *(_QWORD *)(v12 + 8 * v6) = a1;
  return result;
}

void sub_1000F2A3C()
{
  sub_1000F2A50();
}

void sub_1000F2A50()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);

  sub_10002626C();
  v22 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = type metadata accessor for PasteboardDataSession.ID(0);
  sub_10000E490();
  __chkstk_darwin(v12);
  sub_1000F40BC();
  sub_1001A8B6C(v8);
  sub_1000F3C6C();
  if (v15)
  {
    __break(1u);
    goto LABEL_10;
  }
  v16 = v13;
  v17 = v14;
  sub_1000055B0(v4);
  if (sub_1000F3DA0(v6 & 1))
  {
    sub_1001A8B6C(v8);
    if ((v17 & 1) == (v19 & 1))
    {
      v16 = v18;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return;
  }
LABEL_5:
  if ((v17 & 1) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v0 + 56);
    swift_release();
    *(_QWORD *)(v20 + 8 * v16) = v10;
  }
  else
  {
    sub_1000F3B54(v8, v1, type metadata accessor for PasteboardDataSession.ID);
    v21 = sub_1000F42B8();
    v22(v21);
  }
  sub_10000E4E0();
}

void sub_1000F2B48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v13 = sub_1000F4260(v11, v12, v9, v7, v5);
  sub_1001AAE3C(v13);
  sub_1000F3C6C();
  if (v16)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
    return;
  }
  v17 = v14;
  v18 = v15;
  sub_1000055B0(&qword_1002B12A0);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v4 & 1, (Swift::Int)v0))
  {
    sub_1001AAE3C(v6);
    sub_1000F4090();
    if (!v20)
      goto LABEL_10;
    v17 = v19;
  }
  v21 = *v0;
  if ((v18 & 1) != 0)
  {
    v22 = *(_QWORD *)(v21 + 56) + 32 * v17;
    v23 = *(void **)(v22 + 16);

    swift_release();
    *(_QWORD *)v22 = v2;
    *(_QWORD *)(v22 + 8) = v1;
    *(_QWORD *)(v22 + 16) = v10;
    *(_QWORD *)(v22 + 24) = v8;
    sub_10000E4E0();
  }
  else
  {
    sub_100023270(v17, v6, v2, v1, v10, v8, v21);
  }
}

void sub_1000F2C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  sub_1000F424C();
  v4 = type metadata accessor for PasteboardDataSession.ID(0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10002641C();
  v8 = v7 - v6;
  sub_1001A8B6C(v1);
  sub_1000F3C6C();
  if (v11)
  {
    __break(1u);
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  sub_1000055B0(&qword_1002AA538);
  if (sub_1000F40D8(v3 & 1))
  {
    sub_1001A8B6C(v1);
    sub_1000F4090();
    if (!v15)
      goto LABEL_11;
    v12 = v14;
  }
  v16 = *v2;
  if ((v13 & 1) != 0)
  {
    v17 = *(_QWORD *)(v16 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v17 + 8 * v12) = v0;
  }
  else
  {
    sub_1000F3B54(v1, v8, type metadata accessor for PasteboardDataSession.ID);
    sub_1000231C4(v12, v8, v0, v16);
  }
  sub_10000E4E0();
}

uint64_t sub_1000F2D34()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000F3FA4();
  sub_1000F3E04(v2, v3, v4);
  sub_1000F3C6C();
  if (v5)
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002B1230);
  if (sub_1000F3C80())
  {
    sub_1000F4018();
    sub_1000F3E60();
    if (!v6)
      goto LABEL_9;
  }
  if ((v1 & 1) != 0)
  {
    type metadata accessor for CompanionLinkDevice(0);
    sub_10002D8A4();
    return sub_1000F3A58(v7, v8);
  }
  else
  {
    sub_1000F3E28();
    sub_1000232B4(v10, v11, v12, v13, v14);
    return sub_1000F3D8C(v0);
  }
}

void sub_1000F2DE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000F3514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001A8C70, &qword_1002B1228, (uint64_t)&type metadata for UniversalControlDeviceID, sub_10002330C);
}

void sub_1000F2E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000F397C(a1, a2, a3, (void (*)(uint64_t))sub_1001AAE3C, &qword_1002B1220, (uint64_t)&type metadata for UInt64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100023310);
}

void sub_1000F2E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  sub_1000F3FA4();
  sub_1000F3CCC(v2, v3, v4);
  sub_1000F3C6C();
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
    __break(1u);
    return;
  }
  v8 = v5;
  v9 = v6;
  sub_1000055B0(&qword_1002B3420);
  if (sub_1000F3C80())
  {
    sub_1000F3EFC();
    sub_1000F41BC();
    if (!v11)
      goto LABEL_10;
    v8 = v10;
  }
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 56) + 8 * v8) = v0;
    sub_10002D8A4();
  }
  else
  {
    sub_1000F3E28();
    sub_10002D8A4();
    sub_100023314();
  }
}

ValueMetadata *type metadata accessor for SourceDevice()
{
  return &type metadata for SourceDevice;
}

void sub_1000F2ECC()
{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  sub_1000F3FA4();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = *v0;
  sub_1001A8CE4(v4);
  sub_1000F3C6C();
  if (v13)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EventController.TargetKey);
    __break(1u);
    return;
  }
  v14 = v11;
  v15 = v12;
  sub_1000055B0(&qword_1002B1208);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v10))
  {
    sub_1001A8CE4(v5);
    sub_1000F3E60();
    if (!v17)
      goto LABEL_10;
    v14 = v16;
  }
  if ((v15 & 1) != 0)
  {
    v18 = (_QWORD *)(*(_QWORD *)(*v1 + 56) + 16 * v14);
    *v18 = v9;
    v18[1] = v7;
    sub_10002D8A4();
  }
  else
  {
    sub_10002D8A4();
    sub_1000233A4(v19, v20, v21, v22, v23);
  }
}

void sub_1000F3014()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000F3FA4();
  sub_1000F3CCC(v1, v2, v3);
  sub_1000F3C6C();
  if (v4)
  {
    __break(1u);
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
    __break(1u);
    return;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002AC128);
  if (sub_1000F3C80())
  {
    sub_1000F3EFC();
    sub_1000F3E60();
    if (!v5)
      goto LABEL_9;
  }
  if ((v0 & 1) != 0)
  {
    sub_10002D8A4();
    sub_1000F3ADC(v6, v7);
  }
  else
  {
    sub_1000F3E28();
    sub_10002D8A4();
    sub_100023460();
  }
}

void sub_1000F30B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1000F3FA4();
  sub_1000F3CCC(v11, v12, v13);
  sub_1000F3C6C();
  if (v14)
  {
    __break(1u);
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
    __break(1u);
    return;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002B1248);
  if (sub_1000F3C80())
  {
    sub_1000F3EFC();
    sub_1000F3E60();
    if (!v15)
      goto LABEL_9;
  }
  if ((v10 & 1) != 0)
  {
    type metadata accessor for UniversalControlDisplayLayout(0);
    sub_10002D8A4();
    v19(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
  }
  else
  {
    sub_1000F3E28();
    sub_10002D8A4();
    sub_10002353C(v24, v25, v26, v27, v28);
  }
}

void sub_1000F3170(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000F3514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001A8C70, &qword_1002B1250, (uint64_t)&type metadata for UniversalControlDeviceID, sub_10002330C);
}

void sub_1000F3194(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000F3514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001A8C70, &qword_1002B1238, (uint64_t)&type metadata for UniversalControlDeviceID, sub_10002330C);
}

void sub_1000F31B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000F3514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001A8C70, &qword_1002B1218, (uint64_t)&type metadata for UniversalControlDeviceID, sub_10002330C);
}

void sub_1000F31DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000F3FA4();
  sub_1000F3E04(v5, v6, v7);
  sub_1000F3C6C();
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002B12C0);
  if (sub_1000F3C80())
  {
    sub_1000F4018();
    sub_1000F3E60();
    if (!v10)
      goto LABEL_10;
    v3 = v9;
  }
  if ((v4 & 1) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v2 + 56);
    swift_release();
    *(_QWORD *)(v11 + 8 * v3) = v0;
    sub_10002D8A4();
  }
  else
  {
    sub_1000F3E28();
    sub_1000235EC(v12, v13, v14, v15, v16);
    sub_1000F3D8C(v1);
  }
}

void sub_1000F3270()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_10000E440();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000F40BC();
  sub_1001A8E58();
  sub_1000F3C6C();
  if (v12)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v10;
  v14 = v11;
  sub_1000055B0(&qword_1002B1268);
  if (sub_1000F3DA0(v3 & 1))
  {
    sub_1001A8E58();
    sub_1000F4090();
    if (!v16)
      goto LABEL_10;
    v13 = v15;
  }
  if ((v14 & 1) != 0)
  {
    sub_1000F3B18(v7, *(_QWORD *)(*(_QWORD *)v0 + 56) + 40 * v13);
  }
  else
  {
    sub_1000C2764(v1, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    v17 = sub_1000F42B8();
    sub_100023614(v17, v18, v19, v20);
    sub_10000E4E0();
  }
}

uint64_t sub_1000F3370()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000F3FA4();
  v5 = sub_1000F4120(v3, v4);
  sub_1000D8A20(v5, v6);
  sub_1000F3C6C();
  if (v7)
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002B12B0);
  if (sub_1000F3C80())
  {
    sub_1000D8A20(v1, v0);
    sub_1000F3E60();
    if (!v8)
      goto LABEL_9;
  }
  if ((v2 & 1) != 0)
  {
    sub_1000F41F4();
    sub_10002D8A4();
    return sub_100025A50(v9, v10);
  }
  else
  {
    sub_1000F3E28();
    sub_1000236AC(v12, v13, v14, v15, v16);
    return sub_1000F3D8C(v0);
  }
}

void sub_1000F3428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1000F3FA4();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_1001A8EC4(v13);
  sub_1000F3C6C();
  if (v19)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return;
  }
  v20 = v17;
  v21 = v18;
  sub_1000055B0(&qword_1002B1280);
  if (sub_1000F40D8(v12 & 1))
  {
    sub_1001A8EC4(v14);
    sub_1000F41BC();
    if (!v23)
      goto LABEL_10;
    v20 = v22;
  }
  if ((v21 & 1) != 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 56);

    *(_QWORD *)(v24 + 8 * v20) = v16;
    sub_10002D8A4();
  }
  else
  {
    sub_10002D8A4();
    sub_100023310(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10);
  }
}

void sub_1000F34F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000F3514(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))sub_1001A8C70, &qword_1002B12A8, (uint64_t)&type metadata for UniversalControlUUID, sub_100023314);
}

void sub_1000F3514(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t, uint64_t), uint64_t *a6, uint64_t a7, void (*a8)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v15 = sub_1000F4120(a1, a2);
  v16(v15);
  sub_1000F3C6C();
  if (v19)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a7);
    __break(1u);
    return;
  }
  v20 = v17;
  v21 = v18;
  sub_1000055B0(a6);
  if (sub_1000F3DA0(a4 & 1))
  {
    a5(v11, v10);
    sub_1000F4090();
    if (!v23)
      goto LABEL_10;
    v20 = v22;
  }
  if ((v21 & 1) != 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v9 + 56);
    swift_release();
    *(_QWORD *)(v24 + 8 * v20) = v8;
    sub_100088BDC();
  }
  else
  {
    sub_1000F3E28();
    a8();
  }
}

_OWORD *sub_1000F35F0(_OWORD *a1, void *a2)
{
  _QWORD **v2;
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *result;
  uint64_t v14;

  sub_1001A9074((uint64_t)a2);
  sub_1000F3C6C();
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = v4;
  v8 = v5;
  sub_1000055B0(&qword_1002B1278);
  if (!sub_1000F413C())
    goto LABEL_5;
  v9 = sub_1001A9074((uint64_t)a2);
  if ((v8 & 1) != (v10 & 1))
  {
LABEL_9:
    type metadata accessor for FileAttributeKey(0);
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
    __break(1u);
    return result;
  }
  v7 = v9;
LABEL_5:
  if ((v8 & 1) != 0)
  {
    v11 = (_OWORD *)sub_1000F41F4();
    return sub_100005778(v11, v12);
  }
  else
  {
    sub_1000236E8(v7, (uint64_t)a2, a1, *v2);
    return a2;
  }
}

void sub_1000F36D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_1000F3FA4();
  sub_1000F3CCC(v4, v5, v6);
  sub_1000F3C6C();
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
    __break(1u);
    return;
  }
  sub_1000F4044();
  sub_1000055B0(&qword_1002B12B8);
  if (sub_1000F3C80())
  {
    sub_1000F3EFC();
    sub_1000F3E60();
    if (!v9)
      goto LABEL_10;
    v2 = v8;
  }
  if ((v3 & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v1 + 56);
    swift_errorRelease(*(_QWORD *)(v10 + 8 * v2));
    *(_QWORD *)(v10 + 8 * v2) = v0;
    sub_10002D8A4();
  }
  else
  {
    sub_1000F3E28();
    sub_10002D8A4();
    sub_100023314();
  }
}

void sub_1000F376C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v25 = a3;
  v14 = sub_1000F4260(a1, a2, a3, a4, a5);
  sub_1001A8C70(v14, v15);
  sub_1000F3C6C();
  if (v18)
  {
    __break(1u);
    goto LABEL_9;
  }
  v19 = v16;
  v20 = v17;
  sub_1000055B0(&qword_1002B1270);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a7 & 1, (Swift::Int)v7))
    goto LABEL_5;
  v21 = sub_1001A8C70(a5, a6);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
    __break(1u);
    return;
  }
  v19 = v21;
LABEL_5:
  v23 = *v7;
  if ((v20 & 1) != 0)
  {
    v24 = *(_QWORD *)(v23 + 56) + 32 * v19;

    *(_QWORD *)v24 = v9;
    *(_QWORD *)(v24 + 8) = v8;
    *(_BYTE *)(v24 + 16) = v25 & 1;
    *(_BYTE *)(v24 + 17) = HIBYTE(v25) & 1;
    *(_QWORD *)(v24 + 24) = a4;
  }
  else
  {
    sub_100023744(v19, a5, a6, v9, v8, v25 & 0x101, a4, v23);
  }
}

