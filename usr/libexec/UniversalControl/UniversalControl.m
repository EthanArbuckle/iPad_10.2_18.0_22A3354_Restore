int main(int argc, const char **argv, const char **envp)
{
  dword_1002B6C70 = sub_1000050DC();
  exit(dword_1002B6C70);
}

uint64_t sub_100004C74()
{
  uint64_t *v0;

  return sub_100004D74(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004C94(uint64_t a1)
{
  uint64_t *v1;

  return sub_100004C9C(a1, *v1);
}

uint64_t sub_100004C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004CDC(uint64_t a1)
{
  uint64_t *v1;

  return sub_100004CE4(a1, *v1);
}

Swift::Int sub_100004CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004D54()
{
  uint64_t *v0;

  return sub_100004D74(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004D74(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = a2(v3);
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004DB0(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100004E28(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

NSString sub_100004EA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSString result;

  result = sub_100004EC8(a1);
  *a2 = result;
  return result;
}

NSString sub_100004EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString v3;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_100004EFC(uint64_t *a1, uint64_t *a2)
{
  return sub_100009194(*a1, *a2);
}

uint64_t sub_100004F08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

void sub_100004F4C(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  *a1 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  a1[1] = v3;
  sub_1000050D4();
}

uint64_t sub_100004F74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005094((unint64_t *)&qword_1002A8D58, (uint64_t)&unk_10021AB74);
  v3 = sub_100005094(&qword_1002A8D60, (uint64_t)&unk_10021AAC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void type metadata accessor for LaunchOptionsKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1002A8D38)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10027FD30);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1002A8D38);
  }
}

uint64_t sub_100005028()
{
  return sub_100005094(&qword_1002A8D40, (uint64_t)&unk_10021AA8C);
}

uint64_t sub_10000504C()
{
  return sub_100005094(&qword_1002A8D48, (uint64_t)&unk_10021AA60);
}

uint64_t sub_100005070()
{
  return sub_100005094(&qword_1002A8D50, (uint64_t)&unk_10021AAFC);
}

uint64_t sub_100005094(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for LaunchOptionsKey();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000050DC()
{
  void *v0;
  int v1;
  char **v2;
  uint64_t v3;
  objc_class *ObjCClassFromMetadata;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = objc_autoreleasePoolPush();
  sub_1000051C8();
  objc_autoreleasePoolPop(v0);
  v1 = static CommandLine.argc.getter();
  v2 = (char **)static CommandLine.unsafeArgv.getter();
  v3 = type metadata accessor for Application();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v5 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = v6;
    v5 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  v8 = type metadata accessor for AppDelegate();
  v9 = (objc_class *)swift_getObjCClassFromMetadata(v8);
  v10 = NSStringFromClass(v9);
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v12 = v11;
    v10 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }
  v13 = UIApplicationMain(v1, v2, v5, v10);

  return v13;
}

uint64_t sub_1000051C8()
{
  pthread_t v0;
  uint64_t result;

  if ((_set_user_dir_suffix("com.apple.universalcontrol") & 1) != 0)
  {
    BSSetMainThreadPriorityFixedForUI(1);
    v0 = pthread_self();
    return BSPthreadSetFixedPriority(v0, 47);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x80000001002519D0, "UniversalControl_iOS/main_iOS.swift", 35, 2, 14, 0);
    __break(1u);
  }
  return result;
}

id sub_100005260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  NSString v22;
  uint64_t v23;
  Class isa;
  id v25;
  uint64_t v27;
  _QWORD *v28;
  char v29[8];
  _QWORD v30[3];
  void *v31;
  uint64_t v32;

  v7 = v6;
  v32 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (a5)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v31 = &type metadata for String;
    v30[0] = a4;
    v30[1] = a5;
    sub_100005410((uint64_t)v30, v13, v14);
  }
  if (a6)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v17 = v16;
    swift_getErrorValue(a6, v29, &v27);
    v18 = v27;
    v19 = v28;
    v31 = v28;
    v20 = sub_100005534(v30);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v19 - 1) + 16))(v20, v18, v19);
    sub_100005410((uint64_t)v30, v15, v17);
  }
  v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v23 = v32;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v25 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, a3, isa);

  swift_errorRelease(a6);
  return v25;
}

uint64_t sub_100005410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100005778((_OWORD *)a1, v6);
    sub_100005788(v6, a2, a3);
    return swift_bridgeObjectRelease(a3);
  }
  else
  {
    sub_100005570(a1);
    sub_100005654(a2, a3, v6);
    swift_bridgeObjectRelease(a3);
    return sub_100005570((uint64_t)v6);
  }
}

id NSError.init(NSPOSIXErrorDomain:debugDescription:__file:__line:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000054B4(a1, a2, a3, a4, a5, a6, a7, &NSPOSIXErrorDomain);
}

id NSError.init(NSMachErrorDomain:debugDescription:__file:__line:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000054B4(a1, a2, a3, a4, a5, a6, a7, &NSMachErrorDomain);
}

id NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000054B4(a1, a2, a3, a4, a5, a6, a7, &NSOSStatusErrorDomain);
}

id sub_1000054B4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a8);
  return sub_100005260(v11, v12, a1, a2, a3, 0);
}

_QWORD *sub_100005534(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100005570(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002B34C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000055B0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000055F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000059A8(a1, a2, v5);
}

double sub_100005654@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1000055F0(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v16 = *v4;
    v12 = *v4;
    *v4 = 0x8000000000000000;
    v13 = *(_QWORD *)(v12 + 24);
    sub_1000055B0(&qword_1002AC360);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v9 + 8));
    sub_100005778((_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v9), a3);
    _NativeDictionary._delete(at:)(v9, v16, &type metadata for String, (char *)&type metadata for Any + 8);
    v14 = *v4;
    *v4 = v16;
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

_OWORD *sub_100005778(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100005788(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  *v3 = 0x8000000000000000;
  sub_100005804(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v10;
  return swift_bridgeObjectRelease(v8);
}

_OWORD *sub_100005804(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1000055F0(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_1000055B0(&qword_1002AC360);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1000055F0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_QWORD *)(v20[7] + 32 * v16);
    sub_100005988(v21);
    return sub_100005778(a1, v21);
  }
  else
  {
    sub_100005920(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain(a3);
  }
}

_OWORD *sub_100005920(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100005778(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100005988(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1000059A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

id static CATransaction.withTransaction<A>(_:)(void (*a1)(id))
{
  void *v2;

  v2 = (void *)objc_opt_self(CATransaction);
  a1(objc_msgSend(v2, "begin"));
  return objc_msgSend(v2, "commit");
}

id static CATransaction.withDisabledActions<A>(_:_:)(char a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v1 = a1 & 1;
  v2 = (void *)objc_opt_self(CATransaction);
  v3 = objc_msgSend(v2, "disableActions");
  if ((_DWORD)v3 == (_DWORD)v1)
    return (id)sub_100005BA8();
  v4 = v3;
  objc_msgSend(v2, "setDisableActions:", v1);
  sub_100005BA8();
  return objc_msgSend(v2, "setDisableActions:", v4);
}

uint64_t sub_100005BA8()
{
  uint64_t (*v0)(void);

  return v0();
}

id sub_100005BB4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, "rootViewController");
  v3 = objc_msgSend(v2, "view");

  return v3;
}

uint64_t sub_100005C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  char v18;
  uint64_t v19;
  double v20;
  char v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;

  v4 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v25 - v9, a1, v4);
  static UniversalControlDisplay.Orientation.up.getter(v11);
  v12 = sub_10000782C();
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v12);
  v14 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v15 = v14(v8, v4);
  if ((v13 & 1) != 0)
  {
    result = v14(v10, v4);
    v17 = xmmword_10021AC20;
LABEL_10:
    v20 = 0.0;
    goto LABEL_11;
  }
  static UniversalControlDisplay.Orientation.left.getter(v15);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v12);
  v19 = v14(v8, v4);
  if ((v18 & 1) != 0)
  {
    result = v14(v10, v4);
    v17 = xmmword_10021AC10;
    v20 = -1.0;
  }
  else
  {
    static UniversalControlDisplay.Orientation.right.getter(v19);
    v21 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v12);
    v22 = v14(v8, v4);
    if ((v21 & 1) == 0)
    {
      static UniversalControlDisplay.Orientation.down.getter(v22);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v12);
      v14(v8, v4);
      result = v14(v10, v4);
      v24 = -1.0;
      if ((v23 & 1) == 0)
        v24 = 1.0;
      v17 = *(unint64_t *)&v24;
      goto LABEL_10;
    }
    result = v14(v10, v4);
    v17 = xmmword_10021AC00;
    v20 = 1.0;
  }
LABEL_11:
  *(_OWORD *)a2 = v17;
  *(double *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100005E04(void *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  int v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  _QWORD v60[4];
  char v61;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Agent.shared.unsafeMutableAddressor();
  swift_retain();
  v12 = Agent.localDisplay(for:)(a2, a3);
  swift_release();
  if (v12)
  {
    swift_retain();
    v60[0] = dispatch thunk of UniversalControlDisplay.id.getter(v13);
    v60[1] = v14;
    v60[2] = v15;
    v60[3] = v16;
    v61 = 0;
    v17 = WindowSceneController.context(for:)((uint64_t)v60);
    swift_release();
    if (v17)
    {
      v18 = objc_msgSend(*(id *)(v17 + 40), "rootViewController");
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "view");

        if (v20)
        {
          v58 = v20;
          v21 = *(void **)(v17 + 40);
          v22 = type metadata accessor for SecureWindow();
          v23 = swift_dynamicCastClass(v21, v22);
          if (v23)
            v24 = v21;
          v25 = *(void **)(v4 + 16);
          *(_QWORD *)(v4 + 16) = v23;

          if (qword_1002A8D30 != -1)
            swift_once(&qword_1002A8D30, sub_10000890C);
          v26 = sub_100006FB4(v8, (uint64_t)qword_1002B6C78);
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v26, v8);
          v27 = a1;
          v28 = Logger.logObject.getter(v27);
          v30 = static os_log_type_t.default.getter(v28, v29);
          v31 = v30;
          if (os_log_type_enabled(v28, v30))
          {
            v56 = v31;
            v32 = (uint8_t *)sub_10000797C(12);
            v55 = sub_10000797C(32);
            v59 = v55;
            v57 = v4;
            *(_DWORD *)v32 = 136315138;
            v33 = sub_100007734(v27);
            if (v34)
            {
              v35 = v34;
            }
            else
            {
              v33 = 0x64656D616E6E753CLL;
              v35 = 0xE90000000000003ELL;
            }
            v54 = v27;
            v36 = sub_100006FCC(v33, v35, &v59);
            v37 = sub_100007984(v36);
            v38 = v54;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v39, v32 + 4);

            swift_bridgeObjectRelease();
            v40 = (uint64_t)v32;
            _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v56, "Presenting secure layer for '%s'", v32, 0xCu);
            v41 = v55;
            swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
            sub_100007958(v41);
            sub_100007958(v40);

          }
          else
          {

          }
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          v51 = v58;
          v52 = (void *)objc_opt_self(CATransaction);
          objc_msgSend(v52, "begin");
          if (objc_msgSend(v52, "disableActions"))
          {
            sub_100007964();
          }
          else
          {
            objc_msgSend(v52, "setDisableActions:", 1);
            sub_100007964();
            objc_msgSend(v52, "setDisableActions:", 0);
          }
          objc_msgSend(v52, "commit");
          sub_100006820();
          swift_release();
          swift_release();

          return;
        }
      }
      swift_release();
    }
    swift_release();
  }
  if (qword_1002A8D30 != -1)
    swift_once(&qword_1002A8D30, sub_10000890C);
  v42 = sub_100006FB4(v8, (uint64_t)qword_1002B6C78);
  v58 = Logger.logObject.getter(v42);
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v43))
  {
    v44 = (uint8_t *)sub_10000797C(12);
    v45 = sub_10000797C(32);
    v59 = v45;
    *(_DWORD *)v44 = 136315138;
    v46 = CGPoint.description.getter(a2, a3);
    v48 = sub_100006FCC(v46, v47, &v59);
    v49 = sub_100007984(v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v50, v44 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, v43, "Failed to present window on display for %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v45);
    sub_100007958((uint64_t)v44);
  }

}

void sub_1000062F8(void *a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  char v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;
  NSString v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  _QWORD v47[6];
  _QWORD v48[3];
  ValueMetadata *v49;
  unint64_t v50;
  uint64_t v51;

  v46 = a4;
  v42 = a3;
  v43 = a2;
  v5 = sub_1000055B0((uint64_t *)&unk_1002B3320);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v41 = sub_100007734(a1);
  v44 = v10;
  v11 = EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor();
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_BYTE *)v11 + 16);
  v15 = v11[3];
  v16 = v11[4];
  v17 = *((_BYTE *)v11 + 40);
  LOBYTE(a1) = *((_BYTE *)v11 + 41);
  v49 = &type metadata for EnsembleFeatureFlag;
  v50 = sub_100007794();
  v18 = swift_allocObject(&unk_10027FE20, 64, 7);
  v48[0] = v18;
  *(_QWORD *)(v18 + 16) = v13;
  *(_QWORD *)(v18 + 24) = v12;
  *(_BYTE *)(v18 + 32) = v14;
  *(_QWORD *)(v18 + 40) = v15;
  *(_QWORD *)(v18 + 48) = v16;
  *(_BYTE *)(v18 + 56) = v17;
  *(_BYTE *)(v18 + 57) = (_BYTE)a1;
  LOBYTE(v13) = isFeatureEnabled(_:)(v48);
  v19 = sub_100005988(v48);
  if ((v13 & 1) != 0)
  {
    v20 = 0;
    v21 = 1.0;
LABEL_5:
    v43 = 0;
    v42 = 0;
    v22 = 0;
    v23 = 1.0;
    goto LABEL_7;
  }
  dispatch thunk of UniversalControlDisplay.orientation.getter(v19);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    v20 = 0;
    v21 = 1.0;
    sub_1000077EC((uint64_t)v7);
    goto LABEL_5;
  }
  v24 = v40;
  v25 = (uint64_t)v39;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v7, v8);
  sub_100005C14(v25, (uint64_t)v48);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v8);
  v23 = *(double *)v48;
  v22 = v48[1];
  v21 = *(double *)&v49;
  v42 = v48[2];
  v20 = v51;
  v43 = v50;
LABEL_7:
  v26 = v46;
  v27 = v44;
  objc_msgSend(v46, "bounds");
  v32 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SecureLayerView()), "initWithFrame:", v28, v29, v30, v31);
  v33 = v32;
  if (v27)
  {
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v34 = 0;
  }
  objc_msgSend(v32, "setAccessibilityIdentifier:", v34);

  v35 = v45;
  v36 = v45;
  sub_10000668C(v35);
  *(double *)v47 = v23;
  v47[1] = v22;
  v47[2] = v42;
  *(double *)&v47[3] = v21;
  v47[4] = v43;
  v47[5] = v20;
  objc_msgSend(v32, "setTransform:", v47);
  v37 = v32;
  objc_msgSend(v26, "bounds");
  objc_msgSend(v37, "setFrame:");

  objc_msgSend(v26, "addSubview:", v37);
  objc_msgSend(v37, "setNeedsLayout");
  sub_1000066D4();

}

void sub_10000668C(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1
                + OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer) = a1;
  v3 = a1;
  sub_100006CB8(v2);

}

id sub_1000066D4()
{
  void *v0;
  id result;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  objc_super v16;

  v16.receiver = v0;
  v16.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v16, "layoutIfNeeded");
  result = (id)sub_10000786C(objc_msgSend(v0, "layer"));
  if (result)
  {
    v2 = (uint64_t)result;
    result = objc_msgSend(v0, "bounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    if ((unint64_t)v2 >> 62)
    {
      if (v2 >= 0)
        v15 = v2 & 0xFFFFFFFFFFFFFF8;
      else
        v15 = v2;
      swift_bridgeObjectRetain(v2);
      v11 = _CocoaArrayWrapper.endIndex.getter(v15);
      result = (id)swift_bridgeObjectRelease(v2);
      if (v11)
        goto LABEL_4;
    }
    else
    {
      v11 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_4:
        if (v11 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v11; ++i)
        {
          if ((v2 & 0xC000000000000001) != 0)
            v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
          else
            v13 = *(id *)(v2 + 8 * i + 32);
          v14 = v13;
          objc_msgSend(v13, "setFrame:", v4, v6, v8, v10);

        }
      }
    }
    return (id)swift_bridgeObjectRelease(v2);
  }
  return result;
}

void sub_100006820()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  char v16;
  _QWORD *v17;
  id v18;

  v0 = sub_100005BB4();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "subviews");

    v3 = sub_1000078E0(0, &qword_1002A8E38, UIView_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  }
  else
  {
    v4 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_22;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v16 = 0;
    v6 = 0;
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }
      else
      {
        if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_21;
        v7 = *(id *)(v4 + 8 * v6 + 32);
      }
      v8 = v7;
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      v10 = type metadata accessor for SecureLayerView();
      v11 = swift_dynamicCastClass(v8, v10);
      if (!v11
        || (v12 = *(void **)(v11
                           + OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer)) == 0)
      {

LABEL_17:
        ++v6;
        goto LABEL_18;
      }
      v13 = objc_msgSend(v12, "hitTestsAsOpaque");

      if (!v13)
        goto LABEL_17;
      v16 = 1;
      ++v6;
LABEL_18:
      if (v9 == v5)
        goto LABEL_27;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    if (v4 < 0)
      v14 = v4;
    else
      v14 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v4);
  }
  v16 = 0;
LABEL_27:
  swift_bridgeObjectRelease(v4);
  v15 = (void *)v17[2];
  if (v15)
  {
    v18 = v15;
    sub_100008DD0(v16 & 1);

  }
}

void sub_100006A10(void *a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;

  v2 = sub_100005BB4();
  if (!v2)
    return;
  v3 = v2;
  v4 = objc_msgSend(v2, "subviews");
  v5 = sub_1000078E0(0, &qword_1002A8E38, UIView_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a1;
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_4;
LABEL_15:

    sub_100007998();
    return;
  }
LABEL_22:
  if (v6 < 0)
    v17 = v6;
  else
    v17 = v6 & 0xFFFFFFFFFFFFFF8;
  v18 = a1;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v7)
    goto LABEL_15;
LABEL_4:
  v9 = 4;
  while (1)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6);
    else
      v10 = *(id *)(v6 + 8 * v9);
    v11 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    v19 = v10;
    v12 = type metadata accessor for SecureLayerView();
    v13 = swift_dynamicCastClass(v19, v12);
    if (v13)
    {
      v14 = *(void **)(v13
                     + OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer);
      if (v14 && v14 == a1)
        break;
    }

    ++v9;
    if (v11 == v7)
      goto LABEL_15;
  }

  sub_100007998();
  v16 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v16, "begin");
  if (objc_msgSend(v16, "disableActions"))
  {
    objc_msgSend(v19, "removeFromSuperview");
  }
  else
  {
    objc_msgSend(v16, "setDisableActions:", 1);
    objc_msgSend(v19, "removeFromSuperview");
    objc_msgSend(v16, "setDisableActions:", 0);
  }
  objc_msgSend(v16, "commit");
  sub_100006820();

}

uint64_t sub_100006C34()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for SecureLayerHost()
{
  return objc_opt_self(_TtC20UniversalControl_iOS15SecureLayerHost);
}

void sub_100006C78(void *a1, double a2, double a3)
{
  sub_100005E04(a1, a2, a3);
}

void sub_100006C98(void *a1)
{
  sub_100006A10(a1);
}

void sub_100006CB8(void *a1)
{
  char *v1;
  void *v2;
  id v3;
  id v4;

  objc_msgSend(a1, "removeFromSuperlayer");
  v2 = *(void **)&v1[OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer];
  if (v2)
  {
    v4 = v2;
    v3 = objc_msgSend(v1, "layer");
    objc_msgSend(v3, "addSublayer:", v4);

    objc_msgSend(v1, "setNeedsLayout");
  }
}

id sub_100006D50(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer] = 0;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "initWithFrame:", a1, a2, a3, a4);
}

void sub_100006DE0()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView_secureLayer] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100251DF0, "UniversalControl_iOS/SecureLayerHost_iOS.swift", 46, 2, 157, 0);
  __break(1u);
}

id sub_100006EA0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureLayerView()
{
  return objc_opt_self(_TtC20UniversalControl_iOSP33_1C975297EB0024E2AA69CEAAE8602FEB15SecureLayerView);
}

uint64_t sub_100006F04(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

_BYTE **sub_100006F14(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t Path.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100006F44(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v8 = sub_100006FCC(v6, v7, a3);
  v9 = *a1;
  v10 = *a1 + 8;
  v11 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9);
  swift_bridgeObjectRelease();
  *a1 = v10;
}

uint64_t sub_100006FB4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100006FCC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_10000709C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100007918((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100007918((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100005988(v12);
  return v7;
}

_QWORD *sub_10000709C(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000071F0((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1000072B4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_1000071F0(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000072B4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100007348(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10000751C(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10000751C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_100007348(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_1000074B8(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

_QWORD *sub_1000074B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000055B0((uint64_t *)&unk_1002A8E50);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10000751C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002A8E50);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000076B4(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000075F0(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000075F0(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_1000076B4(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100007734(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "name");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_100007794()
{
  unint64_t result;

  result = qword_1002A8FA0;
  if (!qword_1002A8FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnsembleFeatureFlag, &type metadata for EnsembleFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_1002A8FA0);
  }
  return result;
}

uint64_t sub_1000077D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000077EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0((uint64_t *)&unk_1002B3320);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000782C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A8E40;
  if (!qword_1002A8E40)
  {
    v1 = type metadata accessor for UniversalControlDisplay.Orientation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDisplay.Orientation, v1);
    atomic_store(result, (unint64_t *)&qword_1002A8E40);
  }
  return result;
}

uint64_t sub_10000786C(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, "sublayers");

  if (!v2)
    return 0;
  v3 = sub_1000078E0(0, &qword_1002A8E48, CALayer_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_1000078E0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100007918(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100007958(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

void sub_100007964()
{
  unint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  sub_1000062F8(v2, v0, v3, v1);
}

uint64_t sub_10000797C(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_100007984(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = a1;
  return v1 - 152;
}

uint64_t sub_100007998()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

BOOL sub_1000079A4()
{
  char **v0;
  char *v1;
  char *v2;
  char v3;
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  _QWORD v10[5];

  v0 = EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor();
  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  v4 = v0[3];
  v5 = v0[4];
  v6 = *((_BYTE *)v0 + 40);
  v7 = *((_BYTE *)v0 + 41);
  v10[3] = &type metadata for EnsembleFeatureFlag;
  v10[4] = sub_100007794();
  v8 = sub_1000088D8((uint64_t)&unk_10027FE50, 64);
  v10[0] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v2;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v5;
  *(_BYTE *)(v8 + 56) = v6;
  *(_BYTE *)(v8 + 57) = v7;
  LOBYTE(v1) = isFeatureEnabled(_:)(v10);
  sub_100005988(v10);
  return (v1 & 1) == 0;
}

id sub_100007A64()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIMutableApplicationSceneClientSettings), "init");
  objc_msgSend(v0, "setPreferredLevel:", 1000.0);
  objc_msgSend(v0, "setPreferredInterfaceOrientation:", 1);
  return v0;
}

unint64_t sub_100007AD8()
{
  Swift::String v0;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  sub_100215BB4();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

uint64_t type metadata accessor for Application()
{
  return objc_opt_self(_TtC20UniversalControl_iOS11Application);
}

__CFRunLoop *sub_100007BE8()
{
  void *v0;
  objc_class *v1;
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __CFRunLoop *result;
  __CFRunLoop *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  objc_super v16;
  _BYTE v17[24];

  v1 = (objc_class *)sub_100008904();
  v2 = v0;
  v3 = *Agent.shared.unsafeMutableAddressor();
  swift_retain();
  v4 = EventDispatcher.shared.unsafeMutableAddressor();
  swift_beginAccess(v4, v17, 0, 0);
  v5 = *v4;
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyfocusController);
  swift_retain();
  sub_1000088D0();
  result = CFRunLoopGetMain();
  if (result)
  {
    if (kCFRunLoopCommonModes)
    {
      v8 = result;
      v15[0] = v5;
      v9 = type metadata accessor for EventConnection_iOS();
      sub_1000088D8(v9, 56);
      v10 = type metadata accessor for EventDispatcher(0);
      *(_QWORD *)&v2[OBJC_IVAR____TtC20UniversalControl_iOS11AppDelegate_eventConnection] = EventConnection_iOS.init<A>(dispatcher:keyFocusController:runLoop:mode:)((uint64_t)v15, v6, v8, (void *)(id)kCFRunLoopCommonModes, v10, (uint64_t)&protocol witness table for EventDispatcher);

      v16.receiver = v2;
      v16.super_class = v1;
      v11 = objc_msgSendSuper2(&v16, "init", v15[0]);
      v12 = sub_1000088D0();
      Agent.eventConnection.setter(v12);
      v13 = type metadata accessor for SecureLayerHost();
      v14 = sub_1000088D8(v13, 24);
      *(_QWORD *)(v14 + 16) = 0;
      v15[3] = v13;
      v15[4] = &off_10027FDF8;
      v15[0] = v14;
      Agent.secureLayerHost.setter((uint64_t)v15);
      swift_release();

      return (__CFRunLoop *)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100007DD8()
{
  Agent.shared.unsafeMutableAddressor();
  return 1;
}

void sub_100007EF8(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  objc_msgSend(a1, "_setKeepContextAssociationInBackground:", 1);
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SecureRootViewController()), "init");
  v34 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SecureWindow()), "initWithWindowScene:", a1);
  objc_msgSend(v34, "setRootViewController:", v2);
  objc_msgSend(v34, "setHidden:", 0);
  Agent.shared.unsafeMutableAddressor();
  sub_1000088D0();
  WindowSceneController.add(secureWindow:windowScene:)(v34, a1);
  v4 = v3;
  swift_release();
  if (v4)
  {
    EventConnection_iOS.add(context:)(v4);

    sub_1000088C8(v5, v6, v7, v8, v9, v10, v11, v12, v33, v34);
    sub_100008890(v4);
  }
  else
  {
    if (qword_1002A8D30 != -1)
      swift_once(&qword_1002A8D30, sub_10000890C);
    v13 = type metadata accessor for Logger(0);
    sub_100006FB4(v13, (uint64_t)qword_1002B6C78);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)sub_10000797C(12);
      v18 = sub_10000797C(32);
      v35 = v18;
      *(_DWORD *)v17 = 136380675;
      v19 = objc_msgSend(v14, "_sceneIdentifier");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      sub_100006FCC(v20, v22, &v35);
      sub_1000088F0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, v24, v17 + 4);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to add context for window scene: '%{private}s'", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v18);
      v25 = sub_100007958((uint64_t)v17);
      sub_1000088C8(v25, v26, v27, v28, v29, v30, v31, v32, (uint64_t)(v17 + 4), v34);

      sub_1000088AC();
    }
    else
    {

      sub_100008874(v34);
    }
  }
}

void sub_10000816C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;

  Agent.shared.unsafeMutableAddressor();
  sub_1000088D0();
  WindowSceneController.remove(windowScene:)(a1);
  v3 = v2;
  swift_release();
  if (v3)
  {
    EventConnection_iOS.remove(context:)(v3);
    sub_100008890(v3);
  }
  else
  {
    if (qword_1002A8D30 != -1)
      swift_once(&qword_1002A8D30, sub_10000890C);
    v4 = type metadata accessor for Logger(0);
    sub_100006FB4(v4, (uint64_t)qword_1002B6C78);
    v41 = a1;
    v5 = Logger.logObject.getter(v41);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)sub_10000797C(12);
      v8 = sub_10000797C(32);
      v44 = v8;
      *(_DWORD *)v7 = 136380675;
      v9 = objc_msgSend(v41, "_sceneIdentifier");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      sub_100006FCC(v10, v12, &v44);
      sub_1000088F0();
      v15 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v13, v14, v7 + 4);
      sub_1000088C8(v15, v16, v17, v18, v19, v20, v21, v22, v39, v41);
      sub_1000088C8(v23, v24, v25, v26, v27, v28, v29, v30, v40, v42);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to remove context for window scene: '%{private}s'", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v8);
      sub_100007958((uint64_t)v7);

      sub_1000088AC();
    }
    else
    {

      sub_1000088C8(v31, v32, v33, v34, v35, v36, v37, v38, v39, v41);
      sub_100008874(v43);
    }
  }
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC20UniversalControl_iOS11AppDelegate);
}

void sub_100008380(void *a1)
{
  char **v2;
  char *v3;
  char *v4;
  char v5;
  char *v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD v27[5];

  v2 = EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor();
  v3 = *v2;
  v4 = v2[1];
  v5 = *((_BYTE *)v2 + 16);
  v6 = v2[3];
  v7 = v2[4];
  v8 = *((_BYTE *)v2 + 40);
  v9 = *((_BYTE *)v2 + 41);
  v27[3] = &type metadata for EnsembleFeatureFlag;
  v27[4] = sub_100007794();
  v10 = sub_1000088D8((uint64_t)&unk_10027FE50, 64);
  v27[0] = v10;
  *(_QWORD *)(v10 + 16) = v3;
  *(_QWORD *)(v10 + 24) = v4;
  *(_BYTE *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v6;
  *(_QWORD *)(v10 + 48) = v7;
  *(_BYTE *)(v10 + 56) = v8;
  *(_BYTE *)(v10 + 57) = v9;
  LOBYTE(v3) = isFeatureEnabled(_:)(v27);
  sub_100005988(v27);
  if ((v3 & 1) == 0)
  {
    v11 = objc_msgSend(a1, "_sceneIdentifier");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    type metadata accessor for Application();
    v15 = sub_100007AD8();
    if (v12 == v15 && v14 == v16)
    {
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        return;
    }
  }
  v19 = objc_opt_self(UIWindowScene);
  v20 = swift_dynamicCastObjCClass(a1, v19);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = (void *)objc_opt_self(UIApplication);
    v23 = a1;
    v24 = objc_msgSend(v22, "sharedApplication");
    v25 = objc_msgSend(v24, "delegate");

    if (v25)
    {
      v26 = type metadata accessor for AppDelegate();
      sub_1000088E0((uint64_t)v25, v26);
      sub_100007EF8(v21);

      swift_unknownObjectRelease(v25);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000085BC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  v2 = objc_opt_self(UIWindowScene);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (void *)objc_opt_self(UIApplication);
    v6 = a1;
    v7 = objc_msgSend(v5, "sharedApplication");
    v8 = objc_msgSend(v7, "delegate");

    if (v8)
    {
      v9 = type metadata accessor for AppDelegate();
      sub_1000088E0((uint64_t)v8, v9);
      sub_10000816C(v4);

      swift_unknownObjectRelease(v8);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000086D0(UIWindowScene a1)
{
  Agent.shared.unsafeMutableAddressor();
  sub_1000088D0();
  WindowSceneController.update(windowScene:)(a1);
  return swift_release();
}

id sub_100008784()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_100008904();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000087D4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_100008904();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC20UniversalControl_iOS13SceneDelegate);
}

uint64_t sub_100008824()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_100008834()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002A8D58;
  if (!qword_1002A8D58)
  {
    type metadata accessor for LaunchOptionsKey();
    result = swift_getWitnessTable(&unk_10021AB74, v1);
    atomic_store(result, (unint64_t *)&qword_1002A8D58);
  }
  return result;
}

void sub_100008874(id a1)
{

}

uint64_t sub_100008890(uint64_t a1)
{
  return swift_release(a1);
}

void sub_1000088C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

}

uint64_t sub_1000088D0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000088D8(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_1000088E0(uint64_t a1, uint64_t a2)
{
  return swift_dynamicCastClassUnconditional(a1, a2, 0, 0, 0);
}

uint64_t sub_100008904()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_10000890C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6C78);
  sub_100006FB4(v0, (uint64_t)qword_1002B6C78);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x746E656761, 0xE500000000000000);
}

uint64_t *sub_10000897C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

id sub_1000089BC()
{
  void *v0;
  id v1;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for SecureRootViewController();
  v1 = objc_msgSendSuper2(&v3, "initWithNibName:bundle:", 0, 0);
  objc_msgSend(v1, "_setIgnoreAppSupportedOrientations:", 1);
  return v1;
}

void sub_100008A34()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100251DF0, "UniversalControl_iOS/SecureRootViewController_iOS.swift", 55, 2, 16, 0);
  __break(1u);
}

void sub_100008AA0()
{
  _swift_stdlib_reportUnimplementedInitializer("UniversalControl_iOS.SecureRootViewController", 45, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_100008AF0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureRootViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureRootViewController()
{
  return objc_opt_self(_TtC20UniversalControl_iOS24SecureRootViewController);
}

id sub_100008B40(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for SecureWindow();
  v4 = objc_msgSendSuper2(&v7, "initWithWindowScene:", a1);
  v5 = objc_msgSend(v4, "_bindingLayer");
  sub_1000092A8();
  sub_10000922C(0xD000000000000014, 0x8000000100252120, v2);

  objc_msgSend(v4, "setWindowLevel:", UIDragAndDropWindowLevel);
  sub_100008C94();

  return v4;
}

void sub_100008C30()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100251DF0, "UniversalControl_iOS/SecureWindow_iOS.swift", 43, 2, 19, 0);
  __break(1u);
}

id sub_100008C94()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  v2 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v2, "begin");
  if (objc_msgSend(v2, "disableActions"))
  {
    v3 = objc_msgSend(v0, "_bindingLayer");
    v4 = sub_1000092A8();
    v5 = sub_10000929C(v4, "setAllowsHitTesting:");
    sub_10000929C((uint64_t)v5, "setHitTestsAsOpaque:");

  }
  else
  {
    objc_msgSend(v2, "setDisableActions:", 1);
    v6 = objc_msgSend(v0, "_bindingLayer");
    v7 = sub_1000092A8();
    v8 = sub_10000929C(v7, "setAllowsHitTesting:");
    sub_10000929C((uint64_t)v8, "setHitTestsAsOpaque:");

    objc_msgSend(v2, "setDisableActions:", 0);
  }
  objc_msgSend(v2, "commit");
  return objc_msgSend(v2, "flush");
}

void sub_100008DD0(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  id v11;
  int v12;
  uint64_t v13;

  v2 = v1;
  if (qword_1002A8D30 != -1)
    swift_once(&qword_1002A8D30, sub_10000890C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006FB4(v4, (uint64_t)qword_1002B6C78);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    v12 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "SecureWindow wantsHitTest=%{BOOL}d", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_100008C94();
  v10 = v2;
  v11 = objc_msgSend(v10, "_boundContext");
  swift_unknownObjectRelease(v10);
  if (v11)
  {
    objc_msgSend(v11, "waitForRenderingWithTimeout:", 0.1);

  }
}

uint64_t sub_100008F40()
{
  char v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  objc_super v15;
  uint64_t v16;
  ValueMetadata *v17;
  unint64_t v18;

  EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor();
  sub_1000092B4();
  v17 = &type metadata for EnsembleFeatureFlag;
  v18 = sub_100007794();
  v2 = sub_1000092E0((uint64_t)&unk_10027FE78);
  v10 = sub_10000927C(v2, v3, v4, v5, v6, v7, v8, v9, v14, (uint64_t)v15.receiver, (uint64_t)v15.super_class, v16);
  sub_1000092CC(v10, v11, v12);
  if ((v0 & 1) == 0)
    return 2;
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for SecureWindow();
  return (uint64_t)objc_msgSendSuper2(&v15, "_supportedInterfaceOrientationsForRootViewController");
}

id sub_100008FFC()
{
  char v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  objc_super v15;
  uint64_t v16;
  ValueMetadata *v17;
  unint64_t v18;

  EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor();
  sub_1000092B4();
  v17 = &type metadata for EnsembleFeatureFlag;
  v18 = sub_100007794();
  v2 = sub_1000092E0((uint64_t)&unk_10027FE78);
  v10 = sub_10000927C(v2, v3, v4, v5, v6, v7, v8, v9, v14, (uint64_t)v15.receiver, (uint64_t)v15.super_class, v16);
  sub_1000092CC(v10, v11, v12);
  if ((v0 & 1) == 0)
    return 0;
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for SecureWindow();
  return objc_msgSendSuper2(&v15, "_windowOwnsInterfaceOrientation");
}

void sub_100009104(uint64_t a1, uint64_t a2)
{
  _swift_stdlib_reportUnimplementedInitializer("UniversalControl_iOS.SecureWindow", 33, a1, a2, 0);
  __break(1u);
}

id sub_100009144()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureWindow();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureWindow()
{
  return objc_opt_self(_TtC20UniversalControl_iOS12SecureWindow);
}

uint64_t sub_100009194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10000921C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

void sub_10000922C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setName:", v5);

}

uint64_t sub_10000927C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  a12 = a1;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v17;
  *(_BYTE *)(a1 + 57) = v18;
  return isFeatureEnabled(_:)(&a12);
}

id sub_10000929C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000092A8()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000092CC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_100005988((uint64_t *)va);
}

uint64_t static HIDFixed.zero.getter()
{
  return 0;
}

uint64_t sub_1000092E0(uint64_t a1)
{
  return swift_allocObject(a1, 64, 7);
}

uint64_t CompanionLinkClient.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 32, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

void CompanionLinkClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_10000B2F8(v2 + 32, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  swift_unknownObjectRelease(a1);
  sub_10000B338();
}

void CompanionLinkClient.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_10000B2F8(v1 + 32, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v3[3] = Strong;
  v3[4] = v5;
  sub_10000B350();
}

void sub_1000093E0(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 32, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

id CompanionLinkClient.id.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "clientID");
}

void CompanionLinkClient.localDevice.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*(id *)(v1 + 16), "localDevice");
  if (v3)
  {
    sub_10000BA70(v3, a1);
  }
  else
  {
    v4 = type metadata accessor for CompanionLinkDevice(0);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, 1, 1, v4);
  }
}

id RapportStreamSession.session.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

void CompanionLinkClient.registerEvent(id:options:handler:)()
{
  uint64_t v0;
  Class isa;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_10000B314();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = sub_1000088D8((uint64_t)&unk_10027FEA0, 32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v0;
  sub_10000B2EC((uint64_t)sub_100009644, (uint64_t)_NSConcreteStackBlock, 1107296256, v6, v7);
  sub_10000B328();
  v5 = sub_10000B364();
  sub_10000B300(v5, "registerEventID:options:handler:");
  sub_10000B35C();

  sub_10000B2CC();
}

uint64_t sub_100009590(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;

  if (a2)
    v6 = a2;
  else
    v6 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_bridgeObjectRetain(a2);
  a3(a1, v6);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100009618()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000963C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100009590(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100009644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v4);
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_1000096F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100009700(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void CompanionLinkClient.registerRequest(id:options:handler:)()
{
  uint64_t v0;
  Class isa;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_10000B314();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = sub_1000088D8((uint64_t)&unk_10027FEF0, 32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v0;
  sub_10000B2EC((uint64_t)sub_100009870, (uint64_t)_NSConcreteStackBlock, 1107296256, v6, v7);
  sub_10000B328();
  v5 = sub_10000B364();
  sub_10000B300(v5, "registerRequestID:options:handler:");
  sub_10000B35C();

  sub_10000B2CC();
}

uint64_t sub_1000097C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  if (a2)
    v10 = a2;
  else
    v10 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_bridgeObjectRetain(a2);
  a5(a1, v10, a3, a4);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100009868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000097C8(a1, a2, a3, a4, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_100009870(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v7 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a3)
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v9 = _Block_copy(a4);
  v10 = swift_allocObject(&unk_100280190, 24, 7);
  *(_QWORD *)(v10 + 16) = v9;
  swift_retain(v6);
  v7(v8, a3, sub_10000B278, v10);
  swift_release(v6);
  swift_bridgeObjectRelease(v8);
  swift_release(v10);
  return swift_bridgeObjectRelease(a3);
}

void sub_10000995C(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  swift_unknownObjectWeakInit(v1 + 32, 0);
  *(_QWORD *)(v1 + 16) = a1;
  sub_1000050D4();
}

void CompanionLinkClient.__allocating_init()()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  sub_1000088D8(v0, 48);
  sub_10000995C((uint64_t)v1);
  v2 = v1;
  sub_1000088D0();
  sub_1000099F8(v2);

  sub_10000B348();
  sub_1000050D4();
}

void sub_1000099F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  sub_10000B03C(v4);
  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(a1, "setAppID:", v7);

  v8 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v28 = sub_10000B0CC;
  v29 = v8;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000E610;
  v27 = &unk_100280068;
  v9 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setDisconnectHandler:", v9);
  _Block_release(v9);
  v10 = sub_10000B0EC();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  objc_msgSend(a1, "setDispatchQueue:", v11);

  v12 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v12 + 16, v2);
  v28 = sub_10000B128;
  v29 = v12;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000A194;
  v27 = &unk_100280090;
  v13 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setDeviceFoundHandler:", v13);
  _Block_release(v13);
  v14 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v14 + 16, v2);
  v28 = sub_10000B148;
  v29 = v14;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000A194;
  v27 = &unk_1002800B8;
  v15 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setDeviceLostHandler:", v15);
  _Block_release(v15);
  v16 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v16 + 16, v2);
  v28 = sub_10000B168;
  v29 = v16;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000A4D0;
  v27 = &unk_1002800E0;
  v17 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setDeviceChangedHandler:", v17);
  _Block_release(v17);
  v18 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v18 + 16, v2);
  v28 = sub_10000B170;
  v29 = v18;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000E610;
  v27 = &unk_100280108;
  v19 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setInterruptionHandler:", v19);
  _Block_release(v19);
  v20 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v20 + 16, v2);
  v28 = sub_10000B190;
  v29 = v20;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000E610;
  v27 = &unk_100280130;
  v21 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setInvalidationHandler:", v21);
  _Block_release(v21);
  v22 = swift_allocObject(&unk_100280050, 24, 7);
  swift_weakInit(v22 + 16, v2);
  v28 = sub_10000B1B0;
  v29 = v22;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_10000A194;
  v27 = &unk_100280158;
  v23 = _Block_copy(&v24);
  swift_release(v29);
  objc_msgSend(a1, "setLocalDeviceUpdatedHandler:", v23);
  _Block_release(v23);
}

uint64_t CompanionLinkClient.__allocating_init(destination:serviceType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  double v10;
  NSString v11;

  v6 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkClient), "init");
  v7 = sub_1000088D8(v3, 48);
  sub_10000995C((uint64_t)v6);
  v8 = v6;
  sub_1000088D0();
  sub_1000099F8(v8);
  v9 = *(void **)(v7 + 16);
  objc_msgSend(v9, "setDestinationDevice:", *(_QWORD *)(a1 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20)));
  if (a3)
  {
    v11 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v9, "setServiceType:", v11, v10);

  sub_10000B348();
  sub_100009EF8(a1);
  return v7;
}

uint64_t sub_100009EF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100009F34()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_1002A9128 != -1)
      swift_once(&qword_1002A9128, sub_1000119F4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006FB4(v5, (uint64_t)qword_1002B6CF8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient disconnected", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_10000A05C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_1000055B0(&qword_1002A9200);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BA70(a1, (uint64_t)v5);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v6) == 1)
    return sub_10000B1D0((uint64_t)v5);
  sub_10000B210((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_100009EF8((uint64_t)v8);
}

void sub_10000A194(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10000A1E4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_1000055B0(&qword_1002A9200);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BA70(a1, (uint64_t)v5);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v6) == 1)
    return sub_10000B1D0((uint64_t)v5);
  sub_10000B210((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_100009EF8((uint64_t)v8);
}

uint64_t sub_10000A31C(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10000A38C(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10000A38C(void *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _BYTE v17[24];

  v5 = sub_1000055B0(&qword_1002A9200);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BA70(a1, (uint64_t)v7);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v8) == 1)
    return sub_10000B1D0((uint64_t)v7);
  sub_10000B210((uint64_t)v7, (uint64_t)v10);
  swift_beginAccess(v2 + 32, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (Strong)
  {
    v13 = Strong;
    v14 = *(_QWORD *)(v2 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 8))(v10, a2, ObjectType, v14);
    swift_unknownObjectRelease(v13);
  }
  return sub_100009EF8((uint64_t)v10);
}

void sub_10000A4D0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10000A52C()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_1002A9128 != -1)
      swift_once(&qword_1002A9128, sub_1000119F4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006FB4(v5, (uint64_t)qword_1002B6CF8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient interrupted", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_10000A654(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  sub_10000B2F8(a1 + 16, (uint64_t)v5, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    a2();
    return sub_10000B348();
  }
  return result;
}

void sub_10000A6A4()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 32, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, ObjectType, v3);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    if (qword_1002A9128 != -1)
      swift_once(&qword_1002A9128, sub_1000119F4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100006FB4(v5, (uint64_t)qword_1002B6CF8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CompanionLinkClient invalidated", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

void sub_10000A7CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a2 + 16;
  sub_10000B2F8(a2 + 16, (uint64_t)v8, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    a3(a1);
    swift_release(v7);
  }
  sub_10000B338();
}

uint64_t sub_10000A828(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v15[24];

  v3 = sub_1000055B0(&qword_1002A9200);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for CompanionLinkDevice(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BA70(a1, (uint64_t)v5);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v6) == 1)
    return sub_10000B1D0((uint64_t)v5);
  sub_10000B210((uint64_t)v5, (uint64_t)v8);
  swift_beginAccess(v1 + 32, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v1 + 40);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 56))(v8, ObjectType, v12);
    swift_unknownObjectRelease(v11);
  }
  return sub_100009EF8((uint64_t)v8);
}

void CompanionLinkClient.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(void **)(v2 + 16);
  v6 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10027FF40, 40);
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  v7 = sub_10000B2EC((uint64_t)sub_10000AE08, (uint64_t)_NSConcreteStackBlock, 1107296256, v8, v9);
  sub_1000088D0();
  sub_10000AE54(a1, a2);
  sub_10000B364();
  objc_msgSend(v5, "activateWithCompletion:", v7);
  sub_10000B35C();
  sub_10000B2CC();
}

uint64_t sub_10000AA10()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10000AA44(uint64_t a1)
{
  uint64_t v1;

  sub_10000AA6C(a1, *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_10000AA6C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain(a3);
    a2(a1);
    sub_10000B02C((uint64_t)a2, a3);
    return;
  }
  if (!a1)
  {
    if (qword_1002A9128 != -1)
      swift_once(&qword_1002A9128, sub_1000119F4);
    v21 = sub_100006FB4(v7, (uint64_t)qword_1002B6CF8);
    v31 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v22, "CompanionLinkClient activated", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    goto LABEL_22;
  }
  v31 = _convertErrorToNSError(_:)(a1);
  if (*(_BYTE *)(v3 + 24) == 1)
  {
    v11 = -[NSObject domain](v31, "domain");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = -[NSObject code](v31, "code");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    if (v12 == v16 && v14 == v17)
    {
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v19 = v17;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v16, v17, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v19);
      if ((v20 & 1) == 0)
        goto LABEL_23;
    }
    if (v15 == (id)4099)
    {
      if (qword_1002A9128 != -1)
        swift_once(&qword_1002A9128, sub_1000119F4);
      v24 = sub_100006FB4(v7, (uint64_t)qword_1002B6CF8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "CompanionLinkClient invalidated before activation completion", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

LABEL_22:
      return;
    }
  }
LABEL_23:
  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v28 = sub_100006FB4(v7, (uint64_t)qword_1002B6CF8);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v28, v7);
  __chkstk_darwin(v29);
  *(&v30 - 2) = (uint64_t)v31;
  sub_10000FF58((uint64_t (*)(void))sub_10000AE64, 0, (uint64_t (*)(void))sub_10000B008);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10000AE08(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  sub_1000088D0();
  v4 = a2;
  v3(a2);
  sub_10000B348();

}

uint64_t sub_10000AE54(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

unint64_t sub_10000AE64()
{
  return 0xD000000000000025;
}

Swift::Void __swiftcall CompanionLinkClient.cancel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 24) = 1;
  objc_msgSend(*(id *)(v0 + 16), "invalidate");
}

uint64_t CompanionLinkClient.deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 32);
  return v0;
}

uint64_t sub_10000AEBC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t CompanionLinkClient.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 32);
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_10000AF0C()
{
  CompanionLinkClient.cancel()();
}

void sub_10000AF2C()
{
  RapportStreamSession.session.getter();
  sub_1000050D4();
}

void RapportStreamServer.description.getter()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  sub_10000B350();
}

void sub_10000AF94()
{
  RapportStreamServer.description.getter();
}

uint64_t variable initialization expression of RapportStreamServer.activating()
{
  uint64_t v0;

  v0 = type metadata accessor for RapportStreamSession();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v0, &protocol witness table for ObjectIdentifier);
}

uint64_t type metadata accessor for CompanionLinkClient()
{
  return objc_opt_self(_TtC13CompanionLink19CompanionLinkClient);
}

void sub_10000B008()
{
  uint64_t v0;

  swift_errorRetain(*(_QWORD *)(v0 + 16));
  sub_1000050D4();
}

uint64_t sub_10000B02C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10000B03C(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "bundleIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_10000B0A8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000B0CC()
{
  uint64_t v0;

  return sub_10000A654(v0, sub_100009F34);
}

unint64_t sub_10000B0EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AA660;
  if (!qword_1002AA660)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AA660);
  }
  return result;
}

void sub_10000B128(uint64_t a1)
{
  uint64_t v1;

  sub_10000A7CC(a1, v1, (void (*)(uint64_t))sub_10000A05C);
}

void sub_10000B148(uint64_t a1)
{
  uint64_t v1;

  sub_10000A7CC(a1, v1, (void (*)(uint64_t))sub_10000A1E4);
}

uint64_t sub_10000B168(void *a1, unsigned int a2)
{
  uint64_t v2;

  return sub_10000A31C(a1, a2, v2);
}

uint64_t sub_10000B170()
{
  uint64_t v0;

  return sub_10000A654(v0, sub_10000A52C);
}

uint64_t sub_10000B190()
{
  uint64_t v0;

  return sub_10000A654(v0, sub_10000A6A4);
}

void sub_10000B1B0(uint64_t a1)
{
  uint64_t v1;

  sub_10000A7CC(a1, v1, (void (*)(uint64_t))sub_10000A828);
}

uint64_t sub_10000B1D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002A9200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000B210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B254()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000B278(uint64_t a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;

  sub_100013C44(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

HIDUtils::HIDServicePropertyKey_optional __swiftcall HIDServicePropertyKey.init(intValue:)(Swift::Int intValue)
{
  uint64_t v1;
  void *v2;
  HIDUtils::HIDServicePropertyKey_optional result;

  v1 = 0;
  v2 = 0;
  result.value.rawValue._object = v2;
  result.value.rawValue._countAndFlagsBits = v1;
  return result;
}

void *sub_10000B2EC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_10000B2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

id sub_10000B300(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  return objc_msgSend(v3, a2, v2, v4, v5);
}

NSString sub_10000B314()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10000B328()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10000B348()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10000B35C()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_10000B364()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10000B36C()
{
  static RapportActivityLevel.unknown = 0;
}

uint64_t RapportActivityLevel.init(_:)(uint64_t result)
{
  return (int)result;
}

uint64_t *RapportActivityLevel.unknown.unsafeMutableAddressor()
{
  if (qword_1002A90C0 != -1)
    swift_once(&qword_1002A90C0, sub_10000B36C);
  return &static RapportActivityLevel.unknown;
}

uint64_t static RapportActivityLevel.unknown.getter()
{
  return sub_10000B8EC(&qword_1002A90C0, (uint64_t)&static RapportActivityLevel.unknown);
}

void sub_10000B3DC()
{
  static RapportActivityLevel.disabled = 1;
}

uint64_t *RapportActivityLevel.disabled.unsafeMutableAddressor()
{
  if (qword_1002A90C8 != -1)
    swift_once(&qword_1002A90C8, sub_10000B3DC);
  return &static RapportActivityLevel.disabled;
}

uint64_t static RapportActivityLevel.disabled.getter()
{
  return sub_10000B8EC(&qword_1002A90C8, (uint64_t)&static RapportActivityLevel.disabled);
}

void sub_10000B448()
{
  static RapportActivityLevel.coverClosed = 2;
}

uint64_t *RapportActivityLevel.coverClosed.unsafeMutableAddressor()
{
  if (qword_1002A90D0 != -1)
    swift_once(&qword_1002A90D0, sub_10000B448);
  return &static RapportActivityLevel.coverClosed;
}

uint64_t static RapportActivityLevel.coverClosed.getter()
{
  return sub_10000B8EC(&qword_1002A90D0, (uint64_t)&static RapportActivityLevel.coverClosed);
}

void sub_10000B4B4()
{
  static RapportActivityLevel.idle = 3;
}

uint64_t *RapportActivityLevel.idle.unsafeMutableAddressor()
{
  if (qword_1002A90D8 != -1)
    swift_once(&qword_1002A90D8, sub_10000B4B4);
  return &static RapportActivityLevel.idle;
}

uint64_t static RapportActivityLevel.idle.getter()
{
  return sub_10000B8EC(&qword_1002A90D8, (uint64_t)&static RapportActivityLevel.idle);
}

void sub_10000B520()
{
  static RapportActivityLevel.background = 4;
}

uint64_t *RapportActivityLevel.background.unsafeMutableAddressor()
{
  if (qword_1002A90E0 != -1)
    swift_once(&qword_1002A90E0, sub_10000B520);
  return &static RapportActivityLevel.background;
}

uint64_t static RapportActivityLevel.background.getter()
{
  return sub_10000B8EC(&qword_1002A90E0, (uint64_t)&static RapportActivityLevel.background);
}

void sub_10000B58C()
{
  static RapportActivityLevel.audio = 5;
}

uint64_t *RapportActivityLevel.audio.unsafeMutableAddressor()
{
  if (qword_1002A90E8 != -1)
    swift_once(&qword_1002A90E8, sub_10000B58C);
  return &static RapportActivityLevel.audio;
}

uint64_t static RapportActivityLevel.audio.getter()
{
  return sub_10000B8EC(&qword_1002A90E8, (uint64_t)&static RapportActivityLevel.audio);
}

void sub_10000B5F8()
{
  static RapportActivityLevel.screen = 7;
}

uint64_t *RapportActivityLevel.screen.unsafeMutableAddressor()
{
  if (qword_1002A90F0 != -1)
    swift_once(&qword_1002A90F0, sub_10000B5F8);
  return &static RapportActivityLevel.screen;
}

uint64_t static RapportActivityLevel.screen.getter()
{
  return sub_10000B8EC(&qword_1002A90F0, (uint64_t)&static RapportActivityLevel.screen);
}

void sub_10000B664()
{
  static RapportActivityLevel.video = 9;
}

uint64_t *RapportActivityLevel.video.unsafeMutableAddressor()
{
  if (qword_1002A90F8 != -1)
    swift_once(&qword_1002A90F8, sub_10000B664);
  return &static RapportActivityLevel.video;
}

uint64_t static RapportActivityLevel.video.getter()
{
  return sub_10000B8EC(&qword_1002A90F8, (uint64_t)&static RapportActivityLevel.video);
}

void sub_10000B6D0()
{
  static RapportActivityLevel.watch = 10;
}

uint64_t *RapportActivityLevel.watch.unsafeMutableAddressor()
{
  if (qword_1002A9100 != -1)
    swift_once(&qword_1002A9100, sub_10000B6D0);
  return &static RapportActivityLevel.watch;
}

uint64_t static RapportActivityLevel.watch.getter()
{
  return sub_10000B8EC(&qword_1002A9100, (uint64_t)&static RapportActivityLevel.watch);
}

void sub_10000B73C()
{
  static RapportActivityLevel.user = 11;
}

uint64_t *RapportActivityLevel.user.unsafeMutableAddressor()
{
  if (qword_1002A9108 != -1)
    swift_once(&qword_1002A9108, sub_10000B73C);
  return &static RapportActivityLevel.user;
}

uint64_t static RapportActivityLevel.user.getter()
{
  return sub_10000B8EC(&qword_1002A9108, (uint64_t)&static RapportActivityLevel.user);
}

void sub_10000B7A8()
{
  static RapportActivityLevel.driving = 13;
}

uint64_t *RapportActivityLevel.driving.unsafeMutableAddressor()
{
  if (qword_1002A9110 != -1)
    swift_once(&qword_1002A9110, sub_10000B7A8);
  return &static RapportActivityLevel.driving;
}

uint64_t static RapportActivityLevel.driving.getter()
{
  return sub_10000B8EC(&qword_1002A9110, (uint64_t)&static RapportActivityLevel.driving);
}

void sub_10000B814()
{
  static RapportActivityLevel.phoneCall = 14;
}

uint64_t *RapportActivityLevel.phoneCall.unsafeMutableAddressor()
{
  if (qword_1002A9118 != -1)
    swift_once(&qword_1002A9118, sub_10000B814);
  return &static RapportActivityLevel.phoneCall;
}

uint64_t static RapportActivityLevel.phoneCall.getter()
{
  return sub_10000B8EC(&qword_1002A9118, (uint64_t)&static RapportActivityLevel.phoneCall);
}

void sub_10000B880()
{
  static RapportActivityLevel.incorrect = 16;
}

uint64_t *RapportActivityLevel.incorrect.unsafeMutableAddressor()
{
  if (qword_1002A9120 != -1)
    swift_once(&qword_1002A9120, sub_10000B880);
  return &static RapportActivityLevel.incorrect;
}

uint64_t static RapportActivityLevel.incorrect.getter()
{
  return sub_10000B8EC(&qword_1002A9120, (uint64_t)&static RapportActivityLevel.incorrect);
}

uint64_t sub_10000B8EC(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

uint64_t HIDServiceProperties.serviceID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*HIDReport.storage.modify())()
{
  return CGSize.init(_:);
}

_QWORD *sub_10000B940@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000B950(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL static HIDTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_10000B968(uint64_t *a1, uint64_t *a2)
{
  return static HIDTime.== infix(_:_:)(*a1, *a2);
}

void RapportDeviceChangeFlags.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10000B998()
{
  _QWORD *v0;

  return sub_1000137AC(*v0);
}

void sub_10000B9A0(int a1)
{
  Swift::UInt *v1;

  RapportDeviceChangeFlags.hash(into:)(a1, *v1);
}

uint64_t sub_10000B9A8(uint64_t a1)
{
  _QWORD *v1;

  return sub_1000137E4(a1, *v1);
}

uint64_t RapportActivityLevel.description.getter(uint64_t result)
{
  id v1;
  uint64_t v2;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v1 = RPActivityLevelCopyDescription(result);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return v2;
  }
  __break(1u);
  return result;
}

unint64_t sub_10000BA1C()
{
  unint64_t result;

  result = qword_1002A9208;
  if (!qword_1002A9208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportActivityLevel, &type metadata for RapportActivityLevel);
    atomic_store(result, (unint64_t *)&qword_1002A9208);
  }
  return result;
}

uint64_t sub_10000BA58()
{
  uint64_t *v0;

  return RapportActivityLevel.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportActivityLevel()
{
  return &type metadata for RapportActivityLevel;
}

void sub_10000BA70(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;

  sub_1000055B0(&qword_1002ACC90);
  sub_10000E490();
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E440();
  sub_10000E4C4();
  __chkstk_darwin(v10);
  sub_10000E478();
  v11 = sub_10000E408();
  sub_10000E490();
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1;
  sub_10000D980(v15, (SEL *)&selRef_idsDeviceIdentifier);
  if (v16)
  {
    v17 = v16;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease(v17);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v2) != 1)
    {
      v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v19(v3, v9, v2);
      *(_QWORD *)&v14[*(int *)(v11 + 20)] = v15;
      v19(v14, v3, v2);
      sub_10000B210((uint64_t)v14, a2);
      v18 = 0;
      goto LABEL_7;
    }

    sub_10000E36C((uint64_t)v9, &qword_1002ACC90);
  }
  else
  {

  }
  v18 = 1;
LABEL_7:
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a2, v18, 1, v11);
  sub_10000E4E0();
}

void sub_10000BBC8()
{
  sub_10000BF10((SEL *)&selRef_idsDeviceIdentifier);
}

void sub_10000BBD4()
{
  sub_10000BF10((SEL *)&selRef_model);
}

void sub_10000BBE0()
{
  sub_10000BF10((SEL *)&selRef_name);
}

id CompanionLinkDevice.statusFlags.getter()
{
  uint64_t v0;

  v0 = sub_10000E408();
  return objc_msgSend((id)sub_10000E454(v0), "statusFlags");
}

uint64_t type metadata accessor for CompanionLinkDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_1002A9320;
  if (!qword_1002A9320)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompanionLinkDevice);
  return result;
}

CompanionLink::RapportSourceVersion sub_10000BC44()
{
  uint64_t v0;
  id v1;
  Swift::String v2;

  v0 = sub_10000E408();
  v1 = objc_msgSend((id)sub_10000E454(v0), "sourceVersion");
  if (v1)
  {
    sub_10000E540((uint64_t)v1);
    sub_10000E4A8();
  }
  v2._countAndFlagsBits = sub_10000E4F8();
  return RapportSourceVersion.init(stringValue:)(v2);
}

uint64_t CompanionLinkDevice.id.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  sub_10000E440();
  v0 = sub_10000E4F8();
  return v1(v0);
}

id CompanionLinkDevice._endpoint.getter()
{
  uint64_t v0;

  v0 = sub_10000E408();
  return (id)sub_10000E454(v0);
}

uint64_t CompanionLinkDevice.init(id:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v2 = objc_msgSend(objc_allocWithZone((Class)RPCompanionLinkDevice), "init");
  v3 = UUID.uuidString.getter(v2);
  sub_10000D84C(v3, v4, v2);

  *(_QWORD *)(a1 + *(int *)(sub_10000E408() + 20)) = v2;
  sub_10000E440();
  v5 = sub_10000E4F8();
  return v6(v5);
}

void sub_10000BD64()
{
  uint64_t v0;
  id v1;

  v0 = sub_10000E408();
  v1 = objc_msgSend((id)sub_10000E454(v0), "accountID");
  if (v1)
  {
    sub_10000E540((uint64_t)v1);
    sub_10000E4A8();
  }
  sub_10000E4F8();
  sub_10000B350();
}

uint64_t sub_10000BDB4()
{
  uint64_t v0;

  v0 = sub_10000E408();
  return (int)objc_msgSend((id)sub_10000E454(v0), "activityLevel");
}

uint64_t sub_10000BDDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_10000E408();
  v3 = objc_msgSend((id)sub_10000E454(v2), "activityLevelTimeStamp");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = sub_10000E5D4();
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, v5, 1, v6);
}

void sub_10000BE48()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10000E408();
  if (objc_msgSend((id)sub_10000E454(v0), "homeKitUserIdentifiers"))
  {
    v1 = sub_10000E440();
    sub_10000E5FC(v1);
    sub_10000E538();
  }
  sub_1000050D4();
}

void sub_10000BE9C()
{
  sub_10000BF10((SEL *)&selRef_identifier);
}

void sub_10000BEA8()
{
  uint64_t v0;
  id v1;

  v0 = sub_10000E408();
  v1 = objc_msgSend((id)sub_10000E454(v0), "serviceInfo");
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_10000E538();
  sub_1000050D4();
}

void sub_10000BF04()
{
  sub_10000BF10((SEL *)&selRef_serviceType);
}

void sub_10000BF10(SEL *a1)
{
  uint64_t v2;
  id v3;

  v2 = sub_10000E408();
  v3 = objc_msgSend((id)sub_10000E454(v2), *a1);
  if (v3)
  {
    sub_10000E540((uint64_t)v3);
    sub_10000E4A8();
  }
  sub_10000E4F8();
  sub_10000B350();
}

void sub_10000BF60()
{
  uint64_t v0;
  id v1;

  v0 = sub_10000E408();
  v1 = objc_msgSend((id)sub_10000E454(v0), "serviceTypes");
  if (v1)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);
    sub_10000E538();
  }
  sub_1000050D4();
}

uint64_t static CompanionLinkDevice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  char v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  NSDictionary v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  NSDictionary v81;
  Class v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  id v86;
  char v88;
  uint64_t v89;
  id v90;
  void *v91;
  _QWORD *v92;
  id v93;
  void *v94;
  _QWORD *v95;
  char v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  CompanionLink::RapportSourceVersion v101;
  id v102;
  uint64_t v103;
  void *v104;
  void *v105;
  Swift::String v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v6 = sub_10000E5D4();
  v113 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v110 = v7;
  v8 = sub_1000055B0(&qword_1002A9210);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_10000E5DC();
  v116 = v10;
  sub_1000055B0(&qword_1002A9218);
  sub_10000E490();
  v12 = __chkstk_darwin(v11);
  v114 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v115 = (uint64_t)&v108 - v15;
  __chkstk_darwin(v14);
  v117 = (uint64_t)&v108 - v16;
  v17 = sub_10000E408();
  v112 = *(int *)(v17 + 20);
  v18 = *(void **)(a1 + v112);
  v19 = objc_msgSend(v18, "flags");
  v111 = *(int *)(v17 + 20);
  v20 = *(void **)(a2 + v111);
  if (v19 != objc_msgSend(v20, "flags"))
    return 0;
  v21 = objc_msgSend(v18, "accountID");
  if (v21)
  {
    v109 = sub_10000E438((uint64_t)v21);
    v23 = v22;

  }
  else
  {
    v109 = 0;
    v23 = 0;
  }
  v24 = sub_10000E418((uint64_t)v21, "accountID");
  if (!v24)
  {
    sub_10000E57C();
    if (!v23)
      goto LABEL_20;
    goto LABEL_15;
  }
  v25 = sub_10000E4D8((uint64_t)v24);
  v27 = v26;

  if (!v23)
  {
    sub_10000E57C();
    if (!v27)
      goto LABEL_20;
    v30 = v27;
LABEL_18:
    swift_bridgeObjectRelease(v30);
    return 0;
  }
  if (!v27)
  {
LABEL_15:
    v30 = v23;
    goto LABEL_18;
  }
  sub_10000E57C();
  v28 = v109 == v25 && v23 == v27;
  if (v28)
  {
    sub_10000E594();
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v23, v25, v27, 0);
    sub_10000E594();
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) == 0)
      return 0;
  }
LABEL_20:
  v31 = objc_msgSend(v18, "activityLevel");
  if (v31 != objc_msgSend(v20, "activityLevel"))
    return 0;
  v32 = v117;
  sub_10000BDDC(v117);
  v33 = v115;
  sub_10000BDDC(v115);
  v34 = v116;
  v35 = v116 + *(int *)(v8 + 48);
  sub_10000D89C(v32, v116);
  sub_10000D89C(v33, v35);
  sub_10000E514(v34);
  if (!v28)
  {
    v38 = v114;
    sub_10000D89C(v34, v114);
    sub_10000E514(v35);
    if (!v39)
    {
      v40 = v113;
      v41 = v33;
      v42 = v110;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v110, v35, a1);
      sub_10000E330(&qword_1002A9220, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)(v38, v42, a1, v43);
      v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v45(v42, a1);
      v36 = &qword_1002A9218;
      sub_10000E504(v41);
      sub_10000E504(v117);
      v45(v38, a1);
      sub_10000E504(v34);
      if ((v44 & 1) == 0)
        return 0;
      goto LABEL_31;
    }
    sub_10000E36C(v33, &qword_1002A9218);
    sub_10000E36C(v32, &qword_1002A9218);
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v38, a1);
LABEL_29:
    sub_10000E36C(v34, &qword_1002A9210);
    return 0;
  }
  v36 = &qword_1002A9218;
  sub_10000E504(v33);
  sub_10000E504(v32);
  sub_10000E514(v35);
  if (!v28)
    goto LABEL_29;
  sub_10000E36C(v34, &qword_1002A9218);
LABEL_31:
  v46 = sub_10000E3F4(v37, "homeKitUserIdentifiers");
  if (v46)
  {
    v47 = sub_10000E440();
    sub_10000E5FC(v47);
    sub_10000E538();
  }
  else
  {
    v36 = _swiftEmptyArrayStorage;
  }
  v48 = sub_10000E418((uint64_t)v46, "homeKitUserIdentifiers");
  if (v48)
  {
    v49 = v48;
    v50 = sub_10000E440();
    v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

  }
  else
  {
    v51 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v52 = sub_10000C860((uint64_t)v36, v51);
  sub_10000E420();
  v53 = sub_10000E568();
  if ((v52 & 1) == 0)
    return 0;
  v54 = sub_10000E3F4(v53, "identifier");
  if (v54)
  {
    sub_10000E438((uint64_t)v54);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  v56 = sub_10000E418(v55, "identifier");
  if (v56)
  {
    sub_10000E4D8((uint64_t)v56);
    sub_10000E448();
  }
  else
  {
    sub_10000E570();
  }
  if ((uint32_t *)v51 == &stru_1002A5FE8.align && v36 == (uint64_t *)v52)
  {
    v58 = sub_10000E460();
  }
  else
  {
    v51 = sub_10000E3DC();
    sub_10000E420();
    v58 = sub_10000E50C();
    if ((v51 & 1) == 0)
      return 0;
  }
  v59 = sub_10000E3F4(v58, "idsDeviceIdentifier");
  if (v59)
  {
    sub_10000E438((uint64_t)v59);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  v61 = sub_10000E418(v60, "idsDeviceIdentifier");
  if (v61)
  {
    sub_10000E4D8((uint64_t)v61);
    sub_10000E448();
  }
  else
  {
    sub_10000E570();
  }
  if ((uint32_t *)v51 == &stru_1002A5FE8.align && v36 == (uint64_t *)v52)
  {
    v63 = sub_10000E460();
  }
  else
  {
    v51 = sub_10000E3DC();
    sub_10000E420();
    v63 = sub_10000E50C();
    if ((v51 & 1) == 0)
      return 0;
  }
  v64 = sub_10000E3F4(v63, "model");
  if (v64)
  {
    sub_10000E438((uint64_t)v64);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  v66 = sub_10000E418(v65, "model");
  if (v66)
  {
    sub_10000E4D8((uint64_t)v66);
    sub_10000E448();
  }
  else
  {
    sub_10000E570();
  }
  if ((uint32_t *)v51 == &stru_1002A5FE8.align && v36 == (uint64_t *)v52)
  {
    v68 = sub_10000E460();
  }
  else
  {
    v51 = sub_10000E3DC();
    sub_10000E420();
    v68 = sub_10000E50C();
    if ((v51 & 1) == 0)
      return 0;
  }
  v69 = sub_10000E3F4(v68, "name");
  if (v69)
  {
    sub_10000E438((uint64_t)v69);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  v71 = sub_10000E418(v70, "name");
  if (v71)
  {
    sub_10000E4D8((uint64_t)v71);
    sub_10000E448();
  }
  else
  {
    sub_10000E570();
  }
  if ((uint32_t *)v51 == &stru_1002A5FE8.align && v36 == (uint64_t *)v52)
  {
    sub_10000E460();
  }
  else
  {
    v73 = sub_10000E3DC();
    sub_10000E420();
    sub_10000E50C();
    if ((v73 & 1) == 0)
      return 0;
  }
  v74 = sub_10000D8E4();
  v75 = sub_10000E3F4(v74, "serviceInfo");
  v76 = sub_10000E558((uint64_t)v75);

  v77.super.isa = sub_10000E548().super.isa;
  v78 = swift_bridgeObjectRelease(v76);
  v79 = sub_10000E418(v78, "serviceInfo");
  v80 = sub_10000E558((uint64_t)v79);

  v81.super.isa = sub_10000E548().super.isa;
  swift_bridgeObjectRelease(v80);
  v82 = (Class)static NSObject.== infix(_:_:)(v77.super.isa, v81.super.isa);

  if ((v82 & 1) != 0)
  {
    v84 = sub_10000E3F4(v83, "serviceType");
    if (v84)
    {
      sub_10000E438((uint64_t)v84);
      sub_10000E3FC();
    }
    else
    {
      sub_10000E46C();
    }
    v86 = sub_10000E418(v85, "serviceType");
    if (v86)
    {
      sub_10000E4D8((uint64_t)v86);
      sub_10000E448();
    }
    else
    {
      sub_10000E570();
    }
    if ((uint32_t *)v77.super.isa == &stru_1002A5FE8.align && v82 == v81.super.isa)
    {
      v89 = sub_10000E460();
    }
    else
    {
      v88 = sub_10000E3DC();
      sub_10000E420();
      v89 = sub_10000E50C();
      if ((v88 & 1) == 0)
        return 0;
    }
    v90 = sub_10000E3F4(v89, "serviceTypes");
    if (v90)
    {
      v91 = v90;
      v92 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v90, &type metadata for String);

    }
    else
    {
      v92 = _swiftEmptyArrayStorage;
    }
    v93 = sub_10000E418((uint64_t)v90, "serviceTypes");
    if (v93)
    {
      v94 = v93;
      v95 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v93, &type metadata for String);

    }
    else
    {
      v95 = _swiftEmptyArrayStorage;
    }
    v96 = sub_10000C9E4(v92, v95);
    sub_10000E420();
    v97 = sub_10000E568();
    if ((v96 & 1) != 0)
    {
      v98 = sub_10000E3F4(v97, "statusFlags");
      v99 = sub_10000E418((uint64_t)v98, "statusFlags");
      if (v98 == v99)
      {
        v100 = sub_10000E3F4((uint64_t)v99, "sourceVersion");
        if (v100)
        {
          sub_10000E5CC((uint64_t)v100);
          sub_10000E5A8();
        }
        v101.rawValue = sub_10000E5F0().rawValue;
        v102 = sub_10000E418(v101.rawValue, "sourceVersion");
        if (v102)
        {
          v103 = sub_10000E5CC((uint64_t)v102);
          v105 = v104;

        }
        else
        {
          v103 = 0;
          v105 = (void *)0xE000000000000000;
        }
        v106._countAndFlagsBits = v103;
        v106._object = v105;
        if (v101.rawValue == RapportSourceVersion.init(stringValue:)(v106).rawValue)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10000C860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for UUID(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_10000E330((unint64_t *)&qword_1002A9370, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_10000C9E4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  if (result != v7 || v6 != v8)
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v6, v7, v8, 0);
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v11 = a1 + 7;
  v12 = a2 + 7;
  v13 = 1;
  while (v13 < v2)
  {
    result = *(v11 - 1);
    v14 = *v11;
    v15 = *(v12 - 1);
    v16 = *v12;
    if (result != v15 || v14 != v16)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v15, v16, 0);
      if ((result & 1) == 0)
        return 0;
    }
    ++v13;
    v11 += 2;
    v12 += 2;
    if (v2 == v13)
      return 1;
  }
  __break(1u);
  return result;
}

void CompanionLinkDevice.hash(into:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  Class isa;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  CompanionLink::RapportSourceVersion v50;
  uint64_t v51;
  uint64_t v52;

  sub_10000E5D4();
  sub_10000E4C4();
  __chkstk_darwin(v6);
  sub_10000E478();
  sub_1000055B0(&qword_1002A9218);
  sub_10000E490();
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v51 - v11;
  v52 = *(int *)(sub_10000E408() + 20);
  v13 = *(void **)(v1 + v52);
  Hasher._combine(_:)((Swift::UInt32)objc_msgSend(v13, "flags"));
  v14 = objc_msgSend(v13, "accountID");
  if (v14)
  {
    v15 = sub_10000E530((uint64_t)v14);
    v51 = v2;
    v16 = v4;
    v17 = v15;
    v19 = v18;

    sub_10000E58C(1u);
    swift_bridgeObjectRetain(v19);
    v20 = v17;
    v4 = v16;
    v2 = v51;
    String.hash(into:)(a1, v20, v19);
    *(_QWORD *)&v21 = swift_bridgeObjectRelease_n(v19, 2).n128_u64[0];
  }
  else
  {
    sub_10000E58C(0);
  }
  sub_10000E608((int)objc_msgSend(v13, "activityLevel", v21));
  sub_10000BDDC((uint64_t)v12);
  sub_10000D89C((uint64_t)v12, (uint64_t)v10);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v2) == 1)
  {
    sub_10000E58C(0);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v3, v10, v2);
    sub_10000E58C(1u);
    sub_10000E330(&qword_1002A9228, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v2, v22);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  }
  sub_10000E36C((uint64_t)v12, &qword_1002A9218);
  v24 = sub_10000E3F4(v23, "homeKitUserIdentifiers");
  if (v24)
  {
    v25 = v24;
    v26 = sub_10000E440();
    v27 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

  }
  else
  {
    v27 = _swiftEmptyArrayStorage;
  }
  sub_10000DA54((uint64_t)a1, (uint64_t)v27);
  v28 = sub_10000E568();
  v29 = sub_10000E3F4(v28, "identifier");
  if (v29)
  {
    sub_10000E438((uint64_t)v29);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  sub_10000E428();
  v30 = sub_10000E420();
  v31 = sub_10000E3F4(v30, "idsDeviceIdentifier");
  if (v31)
  {
    sub_10000E438((uint64_t)v31);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  sub_10000E428();
  v32 = sub_10000E420();
  v33 = sub_10000E3F4(v32, "model");
  if (v33)
  {
    sub_10000E438((uint64_t)v33);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  sub_10000E428();
  v34 = sub_10000E420();
  v35 = sub_10000E3F4(v34, "name");
  if (v35)
  {
    sub_10000E438((uint64_t)v35);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  sub_10000E428();
  v36 = sub_10000E420();
  v37 = sub_10000E3F4(v36, "serviceInfo");
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v37, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSObject.hash(into:)(a1);

  v40 = sub_10000E3F4(v39, "serviceType");
  if (v40)
  {
    sub_10000E438((uint64_t)v40);
    sub_10000E3FC();
  }
  else
  {
    sub_10000E46C();
  }
  sub_10000E428();
  v41 = sub_10000E420();
  v42 = sub_10000E3F4(v41, "serviceTypes");
  if (v42)
  {
    v43 = v42;
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, &type metadata for String);

  }
  v44 = sub_10000E4F8();
  sub_10000D9E0(v44, v45);
  v46 = sub_10000E420();
  v47 = sub_10000E3F4(v46, "statusFlags");
  sub_10000E608((Swift::UInt)v47);
  v49 = sub_10000E3F4(v48, "sourceVersion");
  if (v49)
  {
    sub_10000E5CC((uint64_t)v49);
    sub_10000E5A8();
  }
  v50.rawValue = sub_10000E5F0().rawValue;
  sub_10000E608(v50.rawValue);
  sub_10000E4E0();
}

void CompanionLinkDevice.hashValue.getter(uint64_t a1)
{
  _BYTE v1[72];

  sub_10000E5C0(a1);
  CompanionLinkDevice.hash(into:)(v1);
  Hasher._finalize()();
  sub_10000E59C();
}

Swift::Int sub_10000CF34(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  CompanionLinkDevice.hash(into:)(v2);
  return Hasher._finalize()();
}

uint64_t CompanionLinkDevice.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  CompanionLink::RapportSourceVersion v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  void *v24;

  v2 = sub_10000E408();
  v3 = sub_10000E418(v2, "description");
  sub_10000E530((uint64_t)v3);
  sub_10000E5B4();
  v23 = v0;
  v24 = v1;
  v5 = sub_10000E418(v4, "statusFlags");
  v6 = RPStatusFlagsCopyDescription((unint64_t)v5);
  sub_10000E530((uint64_t)v6);
  sub_10000E5B4();
  v7._countAndFlagsBits = v0;
  v7._object = v1;
  String.append(_:)(v7);
  sub_10000E568();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3C204653202CLL;
  v10 = &v23;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v11 = sub_10000E594();
  v12 = sub_10000E418(v11, "sourceVersion");
  if (v12)
  {
    sub_10000E540((uint64_t)v12);
    sub_10000E4A8();
  }
  else
  {
    v10 = (uint64_t *)0xE000000000000000;
  }
  v13._countAndFlagsBits = sub_10000E4F8();
  v14.rawValue = RapportSourceVersion.init(stringValue:)(v13).rawValue;
  v15 = (id)RPVersionToSourceVersionString(v14.rawValue);
  if (v15)
  {
    v16 = sub_10000E530((uint64_t)v15);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = (void *)0xE000000000000000;
  }
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  sub_10000E410();
  v20._countAndFlagsBits = 39;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x27205653202CLL;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  sub_10000E410();
  return v23;
}

BOOL static ReportID.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Material.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void sub_10000D114(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v3 = a1 == 6580577 && a2 == 0xE300000000000000;
  if (!v3 && (sub_10000E3A4(6580577, 0xE300000000000000) & 1) == 0)
  {
    v5 = a1 == 25705 && a2 == 0xE200000000000000;
    if (!v5 && (sub_10000E3A4(25705, 0xE200000000000000) & 1) == 0)
    {
      v6 = a1 == 7562345 && a2 == 0xE300000000000000;
      if (!v6 && (sub_10000E3A4(7562345, 0xE300000000000000) & 1) == 0)
      {
        v7 = a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000;
        if (!v7 && (sub_10000E3A4(0x6C65646F6DLL, 0xE500000000000000) & 1) == 0)
        {
          v8 = a1 == 1701667182 && a2 == 0xE400000000000000;
          if (!v8 && (sub_10000E3A4(1701667182, 0xE400000000000000) & 1) == 0)
          {
            v9 = a1 == 2020569712 && a2 == 0xE400000000000000;
            if (!v9 && (sub_10000E3A4(2020569712, 0xE400000000000000) & 1) == 0)
            {
              v10 = a1 == 1868983913 && a2 == 0xE400000000000000;
              if (!v10 && (sub_10000E3A4(1868983913, 0xE400000000000000) & 1) == 0)
              {
                v11 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
                if (!v11 && (sub_10000E3A4(0x65636976726573, 0xE700000000000000) & 1) == 0)
                {
                  v12 = a1 == 0x7365636976726573 && a2 == 0xE800000000000000;
                  if (!v12 && (sub_10000E3A4(0x7365636976726573, 0xE800000000000000) & 1) == 0)
                  {
                    v13 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
                    if (!v13
                      && (sub_10000E3A4(0x737574617473, 0xE600000000000000) & 1) == 0
                      && (a1 != 0x6E6F6973726576 || a2 != 0xE700000000000000))
                    {
                      sub_10000E3A4(0x6E6F6973726576, 0xE700000000000000);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_10000E410();
  sub_10000B350();
}

void sub_10000D3E0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_10000E5C0(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_10000E59C();
}

uint64_t sub_10000D414(char a1)
{
  return qword_10021B140[a1];
}

BOOL sub_10000D438(char *a1, char *a2)
{
  return static ReportID.== infix(_:_:)(*a1, *a2);
}

void sub_10000D444()
{
  unsigned __int8 *v0;

  sub_10000D3E0(*v0);
}

void sub_10000D44C(uint64_t a1)
{
  unsigned __int8 *v1;

  Material.hash(into:)(a1, *v1);
}

Swift::Int sub_10000D454(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10000D494()
{
  char *v0;

  return sub_10000D414(*v0);
}

void sub_10000D49C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_10000D114(a1, a2);
  *a3 = v4;
}

uint64_t HIDServicePropertyKey.intValue.getter()
{
  return 0;
}

void sub_10000D4CC(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_10000D4D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000DC08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D500(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000DC08();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CompanionLinkDevice.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v4 = v2;
  v5 = v1;
  sub_1000055B0(&qword_1002A9230);
  sub_10000E4C4();
  __chkstk_darwin(v7);
  sub_10000E478();
  v8 = a1[3];
  v9 = a1[4];
  sub_10000DBE4(a1, v8);
  v10 = sub_10000DC08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionLinkDevice.CodingKeys, &type metadata for CompanionLinkDevice.CodingKeys, v10, v8, v9);
  v11 = *(id *)(v5 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20));
  sub_10000D980(v11, (SEL *)&selRef_accountID);
  if (v13)
  {
    LOBYTE(v42) = 0;
    sub_10000E3CC(v12, v13, (uint64_t)&v42);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v14 = v11;
  sub_10000D980(v14, (SEL *)&selRef_identifier);
  if (v16)
  {
    sub_10000E3B4(v15, v16, 1);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v17 = v14;
  sub_10000D980(v17, (SEL *)&selRef_idsDeviceIdentifier);
  if (v19)
  {
    sub_10000E3B4(v18, v19, 2);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v20 = v17;
  sub_10000D980(v20, (SEL *)&selRef_model);
  if (v22)
  {
    sub_10000E3B4(v21, v22, 3);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v23 = v20;
  sub_10000D980(v23, (SEL *)&selRef_name);
  if (v25)
  {
    sub_10000E3B4(v24, v25, 4);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v26 = objc_msgSend(v23, "proximity");
  if ((_DWORD)v26)
  {
    LOBYTE(v42) = 5;
    v2 = v4;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v42, v3);
    if (v4)
      goto LABEL_18;
  }
  v27 = v23;
  sub_10000D980(v27, (SEL *)&selRef_serviceType);
  if (v29)
  {
    sub_10000E3B4(v28, v29, 7);
    v4 = v2;
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  v30 = v27;
  v31 = sub_10000D920(v30);
  if (!v31)
    goto LABEL_25;
  v42 = v31;
  v41 = 8;
  v32 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v33 = sub_10000DC44();
  v2 = v4;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v3, v32, v33);
  if (v4)
  {
LABEL_27:
    sub_10000E4B4();
    goto LABEL_28;
  }
  sub_10000E4A0();
LABEL_25:
  v34 = objc_msgSend(v30, "statusFlags");
  if (v34)
  {
    v35 = RPStatusFlagsCopyDescription((unint64_t)v34);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    LOBYTE(v42) = 9;
    sub_10000E3CC(v36, v38, (uint64_t)&v42);
    if (v2)
      goto LABEL_27;
    sub_10000E4A0();
  }
  sub_10000D980(v30, (SEL *)&selRef_sourceVersion);
  if (!v40)
  {
LABEL_18:
    sub_10000E4B4();
    return;
  }
  sub_10000E3B4(v39, v40, 10);
  sub_10000E4B4();
LABEL_28:
  swift_bridgeObjectRelease();
}

void sub_10000D830(_QWORD *a1)
{
  CompanionLinkDevice.encode(to:)(a1);
}

uint64_t static UInt64.logicalMinimum.getter()
{
  return 0;
}

void sub_10000D84C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setIdentifier:", v5);

}

uint64_t sub_10000D89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002A9218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000D8E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC3A0;
  if (!qword_1002AC3A0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AC3A0);
  }
  return result;
}

uint64_t sub_10000D920(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "serviceTypes");

  if (!v2)
    return 0;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

void sub_10000D980(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  sub_10000B350();
}

void sub_10000D9E0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (_QWORD *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_10000DA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v11);
  if (!v11)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 1, 1, v4);
  v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v13 = *(_QWORD *)(v5 + 72);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  while (1)
  {
    v14(v10, v12, v4);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v4);
    result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v4);
    if ((_DWORD)result == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 += v13;
    if (!--v11)
      return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 1, 1, v4);
  }
  return result;
}

_QWORD *sub_10000DBE4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10000DC08()
{
  unint64_t result;

  result = qword_1002A9238;
  if (!qword_1002A9238)
  {
    result = swift_getWitnessTable(&unk_10021B0E8, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9238);
  }
  return result;
}

unint64_t sub_10000DC44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B2910;
  if (!qword_1002B2910)
  {
    v1 = sub_10000DCA0((uint64_t *)&unk_1002AC160);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B2910);
  }
  return result;
}

uint64_t sub_10000DCA0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_10000DCE4()
{
  sub_10000E330(&qword_1002AD0B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_10000DD10()
{
  sub_10000E330(&qword_1002A92C0, type metadata accessor for CompanionLinkDevice, (uint64_t)&protocol conformance descriptor for CompanionLinkDevice);
}

uint64_t *initializeBufferWithCopyOfBuffer for CompanionLinkDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for CompanionLinkDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t initializeWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000DFA0);
}

void sub_10000DFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000E440();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, a2, v4);
  else
    sub_10000B350();
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E018);
}

uint64_t sub_10000E018(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = sub_10000E440();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10000E088(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for CompanionLinkDevice.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompanionLinkDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10000E1E0 + 4 * byte_10021AF05[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10000E214 + 4 * asc_10021AF00[v4]))();
}

uint64_t sub_10000E214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E21C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000E224);
  return result;
}

uint64_t sub_10000E230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000E238);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10000E23C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000E250(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000E258(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompanionLinkDevice.CodingKeys()
{
  return &type metadata for CompanionLinkDevice.CodingKeys;
}

unint64_t sub_10000E274()
{
  unint64_t result;

  result = qword_1002A9358;
  if (!qword_1002A9358)
  {
    result = swift_getWitnessTable(&unk_10021B0C0, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9358);
  }
  return result;
}

unint64_t sub_10000E2B4()
{
  unint64_t result;

  result = qword_1002A9360;
  if (!qword_1002A9360)
  {
    result = swift_getWitnessTable(&unk_10021B030, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9360);
  }
  return result;
}

unint64_t sub_10000E2F4()
{
  unint64_t result;

  result = qword_1002A9368;
  if (!qword_1002A9368)
  {
    result = swift_getWitnessTable(&unk_10021B058, &type metadata for CompanionLinkDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9368);
  }
  return result;
}

void sub_10000E330(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_1000050D4();
}

void sub_10000E36C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000055B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_1000050D4();
}

uint64_t sub_10000E3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_10000E3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 72) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 72, v3);
}

uint64_t sub_10000E3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10000E3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v1, v0, v3, v2, 0);
}

id sub_10000E3F4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_10000E3FC()
{
  void *v0;

}

uint64_t sub_10000E408()
{
  return type metadata accessor for CompanionLinkDevice(0);
}

uint64_t sub_10000E410()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_10000E418(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10000E420()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000E428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(v0, v2, v1);
}

uint64_t sub_10000E438(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_10000E440()
{
  return type metadata accessor for UUID(0);
}

void sub_10000E448()
{
  void *v0;

}

uint64_t sub_10000E454(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_10000E460()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10000E4A0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000E4A8()
{
  void *v0;

}

uint64_t sub_10000E4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10000E4D8(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_10000E4F8()
{
  uint64_t v0;

  return v0;
}

void sub_10000E504(uint64_t a1)
{
  uint64_t *v1;

  sub_10000E36C(a1, v1);
}

uint64_t sub_10000E50C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000E514(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

uint64_t sub_10000E530(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void sub_10000E538()
{
  void *v0;

}

uint64_t sub_10000E540(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

NSDictionary sub_10000E548()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10000E558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v2, v1, v3);
}

uint64_t sub_10000E568()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000E58C(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_10000E594()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10000E5A8()
{
  void *v0;

}

void sub_10000E5B4()
{
  void *v0;

}

_QWORD *sub_10000E5C0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

uint64_t sub_10000E5CC(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_10000E5D4()
{
  return type metadata accessor for Date(0);
}

CompanionLink::RapportSourceVersion sub_10000E5F0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  return RapportSourceVersion.init(stringValue:)(v2);
}

uint64_t sub_10000E5FC(uint64_t a1)
{
  uint64_t v1;

  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

void sub_10000E608(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_10000E610(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t CompanionLinkSession.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t CompanionLinkSession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_10000B2F8(v2 + 16, (uint64_t)v6, 1);
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  return swift_unknownObjectRelease(a1);
}

void CompanionLinkSession.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_10000B2F8(v1 + 16, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  sub_10000B350();
}

void sub_10000E738(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    sub_10000F718();
  }
  free(v3);
}

void CompanionLinkSession.label.getter()
{
  sub_10000E818((SEL *)&selRef_label);
}

void CompanionLinkSession.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000F4C0(a1, a2, *(void **)(v2 + 32), (SEL *)&selRef_setLabel_);
}

void CompanionLinkServer.label.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CompanionLinkSession.label.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_1000050D4();
}

void sub_10000E800(uint64_t a1, char a2)
{
  sub_10000E8D0(a1, a2);
}

void CompanionLinkSession.serviceType.getter()
{
  sub_10000E818((SEL *)&selRef_serviceType);
}

void sub_10000E818(SEL *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(v1 + 32), *a1);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_10000B350();
}

void CompanionLinkSession.serviceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000F4C0(a1, a2, *(void **)(v2 + 32), (SEL *)&selRef_setServiceType_);
}

void CompanionLinkServer.serviceType.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CompanionLinkSession.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_1000050D4();
}

void sub_10000E8C4(uint64_t a1, char a2)
{
  sub_10000E8D0(a1, a2);
}

void sub_10000E8D0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
    sub_10000F6D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000F6D0();
  }
}

uint64_t CompanionLinkServer.__allocating_init(serviceType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = sub_10000F788(v2);
  CompanionLinkServer.init(serviceType:)(a1, a2);
  return v5;
}

uint64_t CompanionLinkServer.init(serviceType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  *(_QWORD *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit(v2 + 16, 0);
  v6 = objc_msgSend(objc_allocWithZone((Class)RPServer), "init");
  *(_QWORD *)(v3 + 32) = v6;
  v7 = sub_10000F658();
  v8 = sub_10000F674(v7);
  v56 = v7;
  v16 = sub_10000F730(v8, v9, v10, v11, v12, v13, v14, v15, (uint64_t)_NSConcreteStackBlock);
  v17 = v6;
  swift_release(v56);
  objc_msgSend(v17, "setAcceptHandler:", v16);
  _Block_release(v16);

  v18 = *(void **)(v3 + 32);
  sub_10000B0EC();
  v19 = v18;
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  sub_10000F710(v19, "setDispatchQueue:");

  v21 = *(void **)(v3 + 32);
  v22 = sub_10000F658();
  sub_10000F674(v22);
  sub_10000F700();
  sub_10000F730(v23, v24, v25, v26, v27, v28, v29, v30, v53);
  sub_10000F764();
  sub_10000F758();
  sub_10000F710(v21, "setErrorHandler:");
  sub_10000F7A8();

  v31 = *(void **)(v3 + 32);
  v32 = sub_10000F658();
  sub_10000F674(v32);
  sub_10000F700();
  sub_10000F730(v33, v34, v35, v36, v37, v38, v39, v40, v54);
  sub_10000F764();
  sub_10000F758();
  sub_10000F710(v31, "setInterruptionHandler:");
  sub_10000F7A8();

  v41 = *(void **)(v3 + 32);
  v42 = sub_10000F658();
  sub_10000F674(v42);
  sub_10000F700();
  sub_10000F730(v43, v44, v45, v46, v47, v48, v49, v50, v55);
  v51 = v41;
  swift_release(v56);
  sub_10000F710(v51, "setInvalidationHandler:");
  sub_10000F7A8();

  sub_10000F4C0(a1, a2, *(void **)(v3 + 32), (SEL *)&selRef_setServiceType_);
  return v3;
}

uint64_t sub_10000EBD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10000EF08(a1);
    return swift_release(v7);
  }
  return result;
}

void sub_10000EC2C(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_1002804A0, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);

}

uint64_t sub_10000ECC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10000F0F4(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10000ED1C(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = a1 + 16;
  sub_10000F630(a1);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    a2();
    return swift_release(v5);
  }
  return result;
}

Swift::Void __swiftcall CompanionLinkServer.activate()()
{
  sub_10000ED8C("[%{public}s] activate", (SEL *)&selRef_activate);
}

Swift::Void __swiftcall CompanionLinkServer.cancel()()
{
  sub_10000ED8C("[%{public}s] cancel", (SEL *)&selRef_invalidate);
}

id sub_10000ED8C(const char *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v5 = sub_10000F6E4();
  sub_100006FB4(v5, (uint64_t)qword_1002B6CF8);
  v6 = sub_10000F794();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)sub_10000797C(12);
    v10 = sub_10000797C(32);
    v16 = v10;
    *(_DWORD *)v9 = 136446210;
    CompanionLinkSession.label.getter();
    v15 = sub_10000F668(v11, v12, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
    sub_10000F650(v2);
    sub_10000E420();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v10);
    sub_100007958((uint64_t)v9);

  }
  else
  {

    sub_10000F650(v2);
  }
  return objc_msgSend(*(id *)(v2 + 32), *a2);
}

uint64_t sub_10000EF08(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for CompanionLinkSession();
  sub_10000F788(v4);
  v5 = sub_10000F818(a1);
  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v6 = sub_10000F6E4();
  sub_10000F680(v6, (uint64_t)qword_1002B6CF8);
  v7 = sub_10000F794();
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = sub_10000797C(22);
    v36 = sub_10000797C(64);
    *(_DWORD *)v10 = 136446466;
    CompanionLinkSession.label.getter();
    v14 = sub_10000F668(v11, v12, v13);
    sub_10000F738(v14, v15, v16, v10 + 12, v17, v18, v19, v20, v14);
    sub_10000F644();
    sub_10000E420();
    *(_WORD *)(v10 + 12) = 2082;
    CompanionLinkSession.serviceType.getter();
    v24 = sub_10000F668(v21, v22, v23);
    sub_10000F738(v24, v25, v26, v10 + 22, v27, v28, v29, v30, v24);
    sub_10000F650(v5);
    sub_10000E420();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] accept: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    sub_100007958(v36);
    sub_100007958(v10);

  }
  else
  {

    sub_10000F650(v5);
    v31 = sub_10000F644();
  }
  sub_10000F630(v31);
  v32 = sub_10000F7A0();
  if (v32)
  {
    v33 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8))(v2, v5, ObjectType, v33);
    sub_10000F718();
  }
  return swift_release(v5);
}

uint64_t sub_10000F0F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_10000F6E4();
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A9128 != -1)
      swift_once(&qword_1002A9128, sub_1000119F4);
    v7 = sub_100006FB4(v2, (uint64_t)qword_1002B6CF8);
    v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    __chkstk_darwin(v8);
    *(&v9 - 2) = a1;
    sub_10000FF58((uint64_t (*)(void))HIDServicePropertyKey.init(intValue:), 0, sub_10000F5C4);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return swift_errorRelease(a1);
  }
  return result;
}

void sub_10000F208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v0 = sub_10000F6E4();
  v1 = sub_10000F680(v0, (uint64_t)qword_1002B6CF8);
  v2 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (sub_10000F720(v3))
  {
    v4 = (_DWORD *)sub_10000797C(12);
    v5 = sub_10000797C(32);
    *v4 = 136446210;
    CompanionLinkSession.label.getter();
    v9 = sub_10000F668(v6, v7, v8);
    sub_10000F69C(v9, v10, v11, v12, v13, v14, v15, v16, v22, v5);
    sub_10000F644();
    sub_10000E420();
    sub_10000F6EC((void *)&_mh_execute_header, v17, v18, "[%{public}s] interrupted");
    sub_10000F748((uint64_t)&type metadata for Any);
    sub_100007958(v5);
    sub_100007958((uint64_t)v4);

  }
  else
  {

    v19 = sub_10000F644();
  }
  sub_10000F630(v19);
  v20 = sub_10000F7A0();
  if (v20)
  {
    v21 = sub_10000F770(v20);
    sub_10000F77C(v21, v2[2]);
    sub_10000F718();
  }
  sub_10000F6B8();
}

void sub_10000F32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v0 = sub_10000F6E4();
  v1 = sub_10000F680(v0, (uint64_t)qword_1002B6CF8);
  v2 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (sub_10000F720(v3))
  {
    v4 = (_DWORD *)sub_10000797C(12);
    v5 = sub_10000797C(32);
    *v4 = 136446210;
    CompanionLinkSession.label.getter();
    v9 = sub_10000F668(v6, v7, v8);
    sub_10000F69C(v9, v10, v11, v12, v13, v14, v15, v16, v22, v5);
    sub_10000F644();
    sub_10000E420();
    sub_10000F6EC((void *)&_mh_execute_header, v17, v18, "[%{public}s] invalidated");
    sub_10000F748((uint64_t)&type metadata for Any);
    sub_100007958(v5);
    sub_100007958((uint64_t)v4);

  }
  else
  {

    v19 = sub_10000F644();
  }
  sub_10000F630(v19);
  v20 = sub_10000F7A0();
  if (v20)
  {
    v21 = sub_10000F770(v20);
    sub_10000F77C(v21, v2[3]);
    sub_10000F718();
  }
  sub_10000F6B8();
}

uint64_t CompanionLinkSession.deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 16);

  return v0;
}

uint64_t CompanionLinkSession.__deallocating_deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 16);

  return swift_deallocClassInstance(v0, 40, 7);
}

void sub_10000F4A0()
{
  CompanionLinkServer.cancel()();
}

void sub_10000F4C0(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v7;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, *a4, v7);

}

uint64_t sub_10000F518()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F53C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10000EBD0(a1, a2, a3, v3);
}

uint64_t sub_10000F544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000F554(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000F55C(uint64_t a1)
{
  uint64_t v1;

  return sub_10000ECC0(a1, v1);
}

uint64_t sub_10000F564()
{
  uint64_t v0;

  return sub_10000ED1C(v0, sub_10000F208);
}

uint64_t sub_10000F584()
{
  uint64_t v0;

  return sub_10000ED1C(v0, sub_10000F32C);
}

uint64_t type metadata accessor for CompanionLinkServer()
{
  return objc_opt_self(_TtC13CompanionLink19CompanionLinkServer);
}

uint64_t sub_10000F5C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_errorRetain(v1);
  return v1;
}

uint64_t sub_10000F5EC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000F610(uint64_t a1)
{
  uint64_t v1;

  sub_10001265C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000F630(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1, va, 0, 0);
}

uint64_t sub_10000F644()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10000F650(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

uint64_t sub_10000F658()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_10000F668(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_100006FCC(a1, a2, (uint64_t *)va);
}

uint64_t sub_10000F674(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_10000F680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100006FB4(a1, a2);
  return swift_retain_n(v2, 2);
}

uint64_t sub_10000F69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v11, v10);
}

void sub_10000F6D0()
{
  SEL *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  sub_10000F4C0(v2, v1, v3, v0);
}

uint64_t sub_10000F6E4()
{
  return type metadata accessor for Logger(0);
}

void sub_10000F6EC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

id sub_10000F710(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_10000F718()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

BOOL sub_10000F720(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void *sub_10000F730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _Block_copy(&a9);
}

uint64_t sub_10000F738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v10, v9, a4);
}

uint64_t sub_10000F748@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_10000F758()
{
  uint64_t v0;

  return swift_release(v0);
}

id sub_10000F764()
{
  void *v0;

  return v0;
}

uint64_t sub_10000F770(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10000F77C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t sub_10000F788(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_10000F794()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10000F7A0()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0);
}

void sub_10000F7A8()
{
  const void *v0;

  _Block_release(v0);
}

void (*CompanionLinkSession.label.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CompanionLinkSession.label.getter();
  *a1 = v3;
  a1[1] = v4;
  return sub_10000E800;
}

void (*CompanionLinkSession.serviceType.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  CompanionLinkSession.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  return sub_10000E8C4;
}

uint64_t sub_10000F818(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit(v1 + 16, 0);
  *(_QWORD *)(v1 + 32) = a1;
  sub_10000FF44((uint64_t)&unk_1002804F0, (uint64_t)_NSConcreteStackBlock, 1107296256, v7, v9);
  v3 = a1;
  swift_retain(v1);
  v4 = sub_10000FF50();
  sub_10000FF24(v4, "setInterruptionHandler:");
  sub_10000FF30();
  sub_10000FF44((uint64_t)&unk_100280518, (uint64_t)_NSConcreteStackBlock, 1107296256, v8, v10);
  swift_retain(v1);
  v5 = sub_10000FF50();
  sub_10000FF24(v5, "setInvalidationHandler:");

  sub_10000FF30();
  return v1;
}

void CompanionLinkSession.activate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v5 = sub_10000F6E4();
  sub_100006FB4(v5, (uint64_t)qword_1002B6CF8);
  v6 = swift_retain_n(v2, 4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = sub_10000797C(22);
    v10 = sub_10000797C(64);
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136446466;
    CompanionLinkSession.label.getter();
    v27 = sub_10000FF18(v11, v12, v13, v14);
    sub_10000FF08(v27, v15, v16, v9 + 12, v17);
    sub_10000FF38();
    sub_10000E420();
    *(_WORD *)(v9 + 12) = 2082;
    CompanionLinkSession.serviceType.getter();
    v28 = sub_10000FF18(v18, v19, v20, v21);
    sub_10000FF08(v28, v22, v23, v9 + 22, v24);
    sub_10000FF38();
    sub_10000E420();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] activate: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    sub_100007958(v10);
    sub_100007958(v9);

  }
  else
  {

    swift_release_n(v2, 4);
  }
  v25 = *(void **)(v2 + 32);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000AE08;
  aBlock[3] = &unk_1002804C8;
  v26 = _Block_copy(aBlock);
  swift_retain();
  sub_10000FF50();
  objc_msgSend(v25, "activateWithCompletion:", v26);
  sub_10000FF30();
}

Swift::Void __swiftcall CompanionLinkSession.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v1 = sub_10000F6E4();
  sub_100006FB4(v1, (uint64_t)qword_1002B6CF8);
  v2 = sub_10000FEE0();
  v3 = (void *)Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (sub_10000F720(v4))
  {
    v5 = (_DWORD *)sub_10000797C(12);
    v6 = sub_10000797C(32);
    *v5 = 136446210;
    CompanionLinkSession.label.getter();
    v10 = sub_10000F668(v7, v8, v9);
    sub_10000F69C(v10, v11, v12, v13, v14, v15, v16, v17, v20, v6);
    sub_10000F644();
    sub_10000E420();
    sub_10000F6EC((void *)&_mh_execute_header, v18, v19, "[%{public}s] cancel");
    sub_10000F748((uint64_t)&type metadata for Any);
    sub_100007958(v6);
    sub_100007958((uint64_t)v5);

  }
  else
  {

    sub_10000F644();
  }
  objc_msgSend(*(id *)(v0 + 32), "invalidate");
}

void sub_10000FC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v1 = sub_10000F6E4();
  sub_100006FB4(v1, (uint64_t)qword_1002B6CF8);
  v2 = sub_10000FEE0();
  v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (sub_10000F720(v4))
  {
    v5 = (_DWORD *)sub_10000797C(12);
    v6 = sub_10000797C(32);
    *v5 = 136446210;
    CompanionLinkSession.label.getter();
    v10 = sub_10000F668(v7, v8, v9);
    sub_10000F69C(v10, v11, v12, v13, v14, v15, v16, v17, v23, v6);
    sub_10000F644();
    sub_10000E420();
    sub_10000F6EC((void *)&_mh_execute_header, v18, v19, "[%{public}s] interrupted");
    sub_10000F748((uint64_t)&type metadata for Any);
    sub_100007958(v6);
    sub_100007958((uint64_t)v5);

  }
  else
  {

    v20 = sub_10000F644();
  }
  sub_10000FEF0(v20);
  Strong = swift_unknownObjectWeakLoadStrong(v0);
  if (Strong)
  {
    v22 = sub_10000F770(Strong);
    sub_10000F77C(v22, v3[1]);
    sub_10000F718();
  }
  sub_10000F6B8();
}

void sub_10000FD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;

  if (qword_1002A9128 != -1)
    swift_once(&qword_1002A9128, sub_1000119F4);
  v1 = sub_10000F6E4();
  sub_100006FB4(v1, (uint64_t)qword_1002B6CF8);
  v2 = sub_10000FEE0();
  v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (sub_10000F720(v4))
  {
    v5 = (_DWORD *)sub_10000797C(12);
    v6 = sub_10000797C(32);
    *v5 = 136446210;
    CompanionLinkSession.label.getter();
    v10 = sub_10000F668(v7, v8, v9);
    sub_10000F69C(v10, v11, v12, v13, v14, v15, v16, v17, v23, v6);
    sub_10000F644();
    sub_10000E420();
    sub_10000F6EC((void *)&_mh_execute_header, v18, v19, "[%{public}s] invalidated");
    sub_10000F748((uint64_t)&type metadata for Any);
    sub_100007958(v6);
    sub_100007958((uint64_t)v5);

  }
  else
  {

    v20 = sub_10000F644();
  }
  sub_10000FEF0(v20);
  Strong = swift_unknownObjectWeakLoadStrong(v0);
  if (Strong)
  {
    v22 = sub_10000F770(Strong);
    sub_10000F77C(v22, v3[2]);
    sub_10000F718();
  }
  sub_10000F6B8();
}

uint64_t sub_10000FE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000FEA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for CompanionLinkSession()
{
  return objc_opt_self(_TtC13CompanionLink20CompanionLinkSession);
}

uint64_t sub_10000FEE0()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10000FEF0(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1 + 16, va, 0, 0);
}

uint64_t sub_10000FF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v6, v5, a4);
}

uint64_t sub_10000FF18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_100006FCC(a1, a2, (uint64_t *)va);
}

id sub_10000FF24(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_10000FF30()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_10000FF38()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void *sub_10000FF44@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = v5;
  a5 = a1;
  return _Block_copy(&a2);
}

uint64_t sub_10000FF50()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_10000FF58(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  id v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  uint64_t v216;
  uint64_t v217;

  v4 = a3();
  v5 = (void *)_convertErrorToNSError(_:)(v4);
  swift_errorRelease(v4);
  v6 = objc_msgSend(v5, "localizedDescription");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = a1();
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v200 = v5;
    swift_bridgeObjectRetain(v13);
    v14 = sub_1000103C0();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (sub_1000103A0(v16))
    {
      v17 = sub_10000797C(42);
      v185 = sub_10000797C(96);
      v217 = v185;
      *(_DWORD *)v17 = 136446979;
      swift_bridgeObjectRetain(v13);
      v216 = sub_100006FCC(v12, v13, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v17 + 4, v17 + 12);
      v18 = sub_1000103C8(v13);
      *(_WORD *)(v17 + 12) = 2082;
      v25 = sub_100010398(v18, "domain", v19, v20, v21, v22, v23, v24, v185, v200);
      v26 = v7;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v216 = sub_100006FCC(v27, v29, &v217);
      v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, &v217, v17 + 14, v17 + 22);
      sub_1000088C8(v30, v31, v32, v33, v34, v35, v36, v37, v186, v201);
      sub_1000088C8(v38, v39, v40, v41, v42, v43, v44, v45, v187, v202);
      v46 = swift_bridgeObjectRelease(v29);
      *(_WORD *)(v17 + 22) = 2048;
      v53 = sub_100010398(v46, "code", v47, v48, v49, v50, v51, v52, v188, v203);
      sub_1000088C8((int)v53, v54, v55, v56, v57, v58, v59, v60, v189, v204);
      v216 = (uint64_t)v53;
      v66 = sub_1000103B0(v61, v62, v63, v17 + 32, v64, v65);
      sub_1000088C8(v66, v67, v68, v69, v70, v71, v72, v73, v190, v205);
      *(_WORD *)(v17 + 32) = 2081;
      sub_1000103C0();
      v216 = sub_100006FCC(v26, v9, &v217);
      sub_1000103B0(v216, v74, v75, v17 + 42, v76, v77);
      sub_1000103C8(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v17, 0x2Au);
      swift_arrayDestroy(v191, 3, (char *)&type metadata for Any + 8);
      v78 = v191;
LABEL_6:
      sub_100007958(v78);
      sub_100007958(v17);

      sub_1000088C8(v143, v144, v145, v146, v147, v148, v149, v150, v191, v206);
      return;
    }
    swift_bridgeObjectRelease_n(v9, 2);
    v151 = v13;
  }
  else
  {
    v200 = v5;
    v79 = sub_1000103C0();
    v15 = Logger.logObject.getter(v79);
    v80 = static os_log_type_t.error.getter();
    if (sub_1000103A0(v80))
    {
      v17 = sub_10000797C(32);
      v81 = sub_10000797C(64);
      v217 = v81;
      *(_DWORD *)v17 = 136446723;
      v88 = sub_100010398(v81, "domain", v82, v83, v84, v85, v86, v87, v184, v200);
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v216 = sub_100006FCC(v89, v91, &v217);
      v96 = sub_100010388(v216, v92, v93, v17 + 12, v94, v95);
      sub_1000088C8(v96, v97, v98, v99, v100, v101, v102, v103, v192, v207);
      sub_1000088C8(v104, v105, v106, v107, v108, v109, v110, v111, v193, v208);
      v112 = swift_bridgeObjectRelease(v91);
      *(_WORD *)(v17 + 12) = 2048;
      LODWORD(v89) = sub_100010398(v112, "code", v113, v114, v115, v116, v117, v118, v194, v209);
      sub_1000088C8(v89, v119, v120, v121, v122, v123, v124, v125, v195, v210);
      v131 = sub_100010388(v126, v127, v128, v17 + 22, v129, v130);
      sub_1000088C8(v131, v132, v133, v134, v135, v136, v137, v138, v196, v211);
      *(_WORD *)(v17 + 22) = 2081;
      sub_1000103C0();
      v216 = sub_100006FCC(v7, v9, &v217);
      sub_100010388(v216, v139, v140, v17 + 32, v141, v142);
      sub_1000103C8(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s (%ld) %{private}s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      v78 = v81;
      goto LABEL_6;
    }
    v151 = v9;
  }
  swift_bridgeObjectRelease_n(v151, 2);

  sub_1000088C8(v152, v153, v154, v155, v156, v157, v158, v159, v184, v200);
  sub_1000088C8(v160, v161, v162, v163, v164, v165, v166, v167, v197, v212);
  sub_1000088C8(v168, v169, v170, v171, v172, v173, v174, v175, v198, v213);
  sub_1000088C8(v176, v177, v178, v179, v180, v181, v182, v183, v199, v214);

}

uint64_t sub_100010388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v6, a4);
}

id sub_100010398(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2);
}

BOOL sub_1000103A0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000103B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v6, a4);
}

uint64_t sub_1000103C0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000103C8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t RapportStatusFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = RPStatusFlagsCopyDescription(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void *RapportStatusFlags.asleep.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.asleep;
}

uint64_t static DigitizerEventMask.identity.getter()
{
  return 32;
}

void *RapportStatusFlags.AWDL.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDL;
}

uint64_t static HIDEventPhase.canceled.getter()
{
  return 8;
}

void *RapportStatusFlags.AWDLDegraded.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLDegraded;
}

uint64_t static DigitizerEventMask.swipeDown.getter()
{
  return 0x2000000;
}

void *RapportStatusFlags.AWDLRetro.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.AWDLRetro;
}

uint64_t static DigitizerEventMask.swipeLeft.getter()
{
  return 0x4000000;
}

void *RapportStatusFlags.BLE.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.BLE;
}

uint64_t static ReportID.consumer.getter()
{
  return 2;
}

void *RapportStatusFlags.local.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.local;
}

uint64_t static RapportStatusFlags.local.getter()
{
  return 0x200000000;
}

void *RapportStatusFlags.owner.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.owner;
}

uint64_t static RapportStatusFlags.owner.getter()
{
  return 0x80000;
}

void *RapportStatusFlags.WiFi.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFi;
}

uint64_t static ReportID.appleVendorTopCase.getter()
{
  return 4;
}

void *RapportStatusFlags.WiFiP2P.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.WiFiP2P;
}

uint64_t static DigitizerEventMask.resting.getter()
{
  return 512;
}

void *RapportStatusFlags.USB.unsafeMutableAddressor()
{
  return &static RapportStatusFlags.USB;
}

uint64_t static DigitizerEventMask.swipeUp.getter()
{
  return 0x1000000;
}

_QWORD *sub_1000104E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000104EC(uint64_t *a1@<X8>)
{
  *a1 = static UInt64.logicalMinimum.getter();
  sub_1000050D4();
}

uint64_t sub_10001050C(_QWORD *a1)
{
  _QWORD *v1;

  return sub_100013C28(*a1, *v1);
}

uint64_t sub_100010518@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100013824(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_100010544(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_10001382C(*a1, *v2);
  sub_1000050D4();
}

void sub_10001056C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  *a2 = sub_100013834(*a1, *v2);
  sub_1000050D4();
}

BOOL sub_100010594(_QWORD *a1, uint64_t *a2)
{
  return sub_10001383C(a1, *a2);
}

uint64_t sub_10001059C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100013868(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000105CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10001388C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1000105FC(uint64_t *a1)
{
  sub_1000138A4(*a1);
}

void sub_100010604(uint64_t *a1)
{
  sub_1000138B0(*a1);
}

void sub_10001060C(uint64_t *a1)
{
  sub_1000138BC(*a1);
}

uint64_t sub_100010614@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000138C8(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100010640(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000138D0(*a1, *v1);
}

BOOL sub_10001064C(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000138DC(*a1, *v1);
}

BOOL sub_100010658(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000138E8(*a1, *v1);
}

BOOL sub_100010664()
{
  uint64_t *v0;

  return sub_100013818(*v0);
}

uint64_t sub_10001066C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void sub_100010684(uint64_t *a1)
{
  sub_1000138F4(*a1);
}

uint64_t sub_10001068C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100013750();
  *a1 = result;
  return result;
}

void RapportStatusFlags.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
  sub_1000050D4();
}

unint64_t sub_1000106D4()
{
  unint64_t result;

  result = qword_1002A95E8;
  if (!qword_1002A95E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1002A95E8);
  }
  return result;
}

unint64_t sub_100010714()
{
  unint64_t result;

  result = qword_1002A95F0;
  if (!qword_1002A95F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1002A95F0);
  }
  return result;
}

unint64_t sub_100010754()
{
  unint64_t result;

  result = qword_1002A95F8;
  if (!qword_1002A95F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1002A95F8);
  }
  return result;
}

unint64_t sub_100010794()
{
  unint64_t result;

  result = qword_1002A9600;
  if (!qword_1002A9600)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportStatusFlags, &type metadata for RapportStatusFlags);
    atomic_store(result, (unint64_t *)&qword_1002A9600);
  }
  return result;
}

void sub_1000107D0(int a1)
{
  Swift::UInt *v1;

  RapportStatusFlags.hash(into:)(a1, *v1);
}

uint64_t sub_1000107D8()
{
  unint64_t *v0;

  return RapportStatusFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportStatusFlags()
{
  return &type metadata for RapportStatusFlags;
}

void RapportEndpoint.idsDeviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  sub_100010A94(a1, a2, (SEL *)&selRef_idsDeviceIdentifier);
}

void RapportEndpoint.model.getter(uint64_t a1, uint64_t a2)
{
  sub_100010A94(a1, a2, (SEL *)&selRef_model);
}

void RapportEndpoint.name.getter(uint64_t a1, uint64_t a2)
{
  sub_100010A94(a1, a2, (SEL *)&selRef_name);
}

CompanionLink::RapportSourceVersion RapportEndpoint.sourceVersion.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  Swift::String v5;

  v3 = (void *)sub_100010BB4(a1, a2);
  v4 = objc_msgSend(v3, "sourceVersion");

  if (v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    sub_10000E4A8();
  }
  else
  {
    v3 = 0;
    v2 = (void *)0xE000000000000000;
  }
  v5._countAndFlagsBits = (uint64_t)v3;
  v5._object = v2;
  return RapportSourceVersion.init(stringValue:)(v5);
}

void RapportEndpoint.accountID.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v3 = objc_msgSend((id)sub_100010BB4(a1, a2), "accountID");
  sub_100010BBC();
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  sub_10000B350();
}

void RapportEndpoint.activityLevel.getter(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)sub_100010BB4(a1, a2);
  objc_msgSend(v2, "activityLevel");

  sub_1000050D4();
}

uint64_t RapportEndpoint.activityLevelTimeStamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)sub_100010BB4(a1, a2);
  v5 = objc_msgSend(v4, "activityLevelTimeStamp");

  if (v5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = type metadata accessor for Date(0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a3, v6, 1, v7);
}

void RapportEndpoint.homeKitUserIdentifiers.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend((id)sub_100010BB4(a1, a2), "homeKitUserIdentifiers");
  sub_100010BBC();
  if (v2)
  {
    v4 = type metadata accessor for UUID(0);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v4);
    sub_10000E538();
  }
  sub_1000050D4();
}

void RapportEndpoint.identifier.getter(uint64_t a1, uint64_t a2)
{
  sub_100010A94(a1, a2, (SEL *)&selRef_identifier);
}

void RapportEndpoint.serviceInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v3 = objc_msgSend((id)sub_100010BB4(a1, a2), "serviceInfo");
  sub_10000E538();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100010BBC();
  sub_1000050D4();
}

void RapportEndpoint.serviceType.getter(uint64_t a1, uint64_t a2)
{
  sub_100010A94(a1, a2, (SEL *)&selRef_serviceType);
}

void sub_100010A94(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v4;
  id v5;

  v4 = (void *)sub_100010BB4(a1, a2);
  v5 = objc_msgSend(v4, *a3);

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    sub_10000E4A8();
  }
  sub_10000B350();
}

void RapportEndpoint.serviceTypes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v3 = objc_msgSend((id)sub_100010BB4(a1, a2), "serviceTypes");
  sub_100010BBC();
  if (v2)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
    sub_10000E538();
  }
  sub_1000050D4();
}

id sub_100010B58()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for CompanionLinkDevice(0) + 20)), "statusFlags");
}

void RapportEndpoint.statusFlags.getter(uint64_t a1, uint64_t a2)
{
  objc_msgSend((id)sub_100010BB4(a1, a2), "statusFlags");
  sub_10000E538();
  sub_1000050D4();
}

uint64_t sub_100010BB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_100010BBC()
{
  void *v0;

}

void RapportSourceVersion.stringValue.getter(uint64_t a1)
{
  id v1;

  v1 = (id)RPVersionToSourceVersionString(a1);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    sub_10000E4A8();
  }
  sub_10000B350();
}

CompanionLink::RapportSourceVersion __swiftcall RapportSourceVersion.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CompanionLink::RapportSourceVersion result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  Swift::String v10;

  object = stringValue._object;
  v10 = stringValue;
  v9[0] = 46;
  v9[1] = 0xE100000000000000;
  v2 = sub_100010CC8();
  v3 = StringProtocol.components<A>(separatedBy:)(v9, &type metadata for String, &type metadata for String, v2, v2);
  swift_bridgeObjectRelease(object);
  v4 = sub_1000119D0(0, 10000);
  result.rawValue = sub_1000119D0(1, 100);
  v6 = __OFADD__(v4, result.rawValue);
  v7 = v4 + result.rawValue;
  if (v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  v8 = sub_1000119D0(2, 1);
  swift_bridgeObjectRelease(v3);
  result.rawValue = v7 + v8;
  if (__OFADD__(v7, v8))
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_100010CC8()
{
  unint64_t result;

  result = qword_1002A9608;
  if (!qword_1002A9608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002A9608);
  }
  return result;
}

void *RapportSourceVersion.skyAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyAligned;
}

uint64_t static RapportSourceVersion.skyAligned.getter()
{
  return 3000000;
}

void *RapportSourceVersion.starAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.starAligned;
}

uint64_t static RapportSourceVersion.starAligned.getter()
{
  return 3050000;
}

void *RapportSourceVersion.skyBAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyBAligned;
}

uint64_t static RapportSourceVersion.skyBAligned.getter()
{
  return 3100000;
}

void *RapportSourceVersion.skyCAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyCAligned;
}

uint64_t static RapportSourceVersion.skyCAligned.getter()
{
  return 3200000;
}

void *RapportSourceVersion.skyDAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyDAligned;
}

uint64_t static RapportSourceVersion.skyDAligned.getter()
{
  return 3300000;
}

void *RapportSourceVersion.skyEchoAligned.unsafeMutableAddressor()
{
  return &static RapportSourceVersion.skyEchoAligned;
}

uint64_t static RapportSourceVersion.skyEchoAligned.getter()
{
  return 3400000;
}

uint64_t sub_100010D94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];

  v7 = 0;
  if (result >= a3)
    return v7;
  if (result < 0)
  {
    __break(1u);
    goto LABEL_59;
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)result)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain(v6);
    v13 = (uint64_t)sub_1000111B0(v5, v6, 10);
    LOBYTE(v5) = v27;
    swift_bridgeObjectRelease(v6);
    goto LABEL_47;
  }
  v4 = a2;
  v8 = a4 + 16 * result;
  v5 = *(_QWORD *)(v8 + 32);
  v6 = *(_QWORD *)(v8 + 40);
  v9 = HIBYTE(v6) & 0xF;
  v10 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v6) & 0xF;
  else
    v11 = v5 & 0xFFFFFFFFFFFFLL;
  if (!v11)
    return 0;
  if ((v6 & 0x1000000000000000) != 0)
    goto LABEL_60;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
      v12 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    v13 = (uint64_t)sub_100011294(v12, v10, 10);
    LOBYTE(v5) = v14 & 1;
LABEL_47:
    if ((v5 & 1) == 0)
    {
      v7 = v13 * v4;
      if ((unsigned __int128)(v13 * (__int128)v4) >> 64 == (v13 * v4) >> 63)
        return v7;
      __break(1u);
    }
    return 0;
  }
  v28[0] = *(_QWORD *)(v8 + 32);
  v28[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (!v9)
      goto LABEL_63;
    if (v9 == 1 || (BYTE1(v5) - 48) > 9u)
      goto LABEL_34;
    v13 = (BYTE1(v5) - 48);
    if (v9 != 2)
    {
      if ((BYTE2(v5) - 48) > 9u)
        goto LABEL_34;
      v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
      v15 = v9 - 3;
      if (v9 != 3)
      {
        v16 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            goto LABEL_34;
          v18 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v18 + v17;
          if (__OFADD__(v18, v17))
            goto LABEL_34;
          LOBYTE(v5) = 0;
          ++v16;
          if (!--v15)
            goto LABEL_47;
        }
      }
    }
LABEL_46:
    LOBYTE(v5) = 0;
    goto LABEL_47;
  }
  if (v5 != 45)
  {
    if (!v9 || (v5 - 48) > 9u)
      goto LABEL_34;
    v13 = (v5 - 48);
    if (v9 != 1)
    {
      if ((BYTE1(v5) - 48) > 9u)
        goto LABEL_34;
      v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
      v19 = v9 - 2;
      if (v9 != 2)
      {
        v20 = (unsigned __int8 *)v28 + 2;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_34;
          v22 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            goto LABEL_34;
          v13 = v22 + v21;
          if (__OFADD__(v22, v21))
            goto LABEL_34;
          LOBYTE(v5) = 0;
          ++v20;
          if (!--v19)
            goto LABEL_47;
        }
      }
    }
    goto LABEL_46;
  }
  if (v9)
  {
    if (v9 != 1 && (BYTE1(v5) - 48) <= 9u)
    {
      if (v9 == 2)
      {
        LOBYTE(v5) = 0;
        v13 = -(uint64_t)(BYTE1(v5) - 48);
        goto LABEL_47;
      }
      if ((BYTE2(v5) - 48) <= 9u)
      {
        v13 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
        v23 = v9 - 3;
        if (v9 == 3)
          goto LABEL_46;
        v24 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v25 = *v24 - 48;
          if (v25 > 9)
            break;
          v26 = 10 * v13;
          if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
            break;
          v13 = v26 - v25;
          if (__OFSUB__(v26, v25))
            break;
          LOBYTE(v5) = 0;
          ++v24;
          if (!--v23)
            goto LABEL_47;
        }
      }
    }
LABEL_34:
    v13 = 0;
    LOBYTE(v5) = 1;
    goto LABEL_47;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

void sub_1000110A0()
{
  uint64_t *v0;

  RapportSourceVersion.stringValue.getter(*v0);
}

BOOL static RapportSourceVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_1000110B8()
{
  unint64_t result;

  result = qword_1002A9610;
  if (!qword_1002A9610)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportSourceVersion, &type metadata for RapportSourceVersion);
    atomic_store(result, (unint64_t *)&qword_1002A9610);
  }
  return result;
}

BOOL sub_1000110F4(uint64_t *a1, uint64_t *a2)
{
  return static RapportSourceVersion.< infix(_:_:)(*a1, *a2);
}

BOOL sub_100011100(uint64_t *a1, uint64_t *a2)
{
  return sub_10001110C(*a1, *a2);
}

BOOL sub_10001110C(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_100011118(uint64_t *a1, uint64_t *a2)
{
  return sub_100011124(*a1, *a2);
}

BOOL sub_100011124(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_100011130(uint64_t *a1, uint64_t *a2)
{
  return sub_10001114C(*a1, *a2);
}

ValueMetadata *type metadata accessor for RapportSourceVersion()
{
  return &type metadata for RapportSourceVersion;
}

BOOL sub_10001114C(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_100011158(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v9 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_1000119DC(v9);
    return v10 | 4;
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_1000119DC(v6);
    return v7 | 8;
  }
}

unsigned __int8 *sub_1000111B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_100011510(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_100011294(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_100011294(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100011510(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = sub_10001156C((uint64_t)sub_100011568, 0, a1, a2);
  v4 = v3;
  v7 = sub_1000115A0(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_10001156C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3;
  v5 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  return String.subscript.getter(15, v5 | (v4 << 16));
}

uint64_t sub_1000115A0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1000116E4(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1000074B8(v12, 0);
      v5 = sub_1000117D0((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release();
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1000116E4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100011158(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100011158(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000117D0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = sub_100011158(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = sub_100011158(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000119D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return sub_100010D94(a1, a2, v3, v2);
}

unint64_t sub_1000119DC(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1000119F4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6CF8);
  sub_100006FB4(v0, (uint64_t)qword_1002B6CF8);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x74726F70706172, 0xE700000000000000);
}

void sub_100011A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, void *a7, uint64_t a8)
{
  sub_100011A84(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000050D4();
}

void sub_100011A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  _QWORD v16[6];

  v12 = *(id *)(v8 + 16);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a7)
  {
    v16[4] = a7;
    v16[5] = a8;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_10000AE08;
    v16[3] = &unk_100280890;
    a7 = _Block_copy(v16);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v12, "sendEventID:event:destinationID:options:completion:", v13, v14.super.isa, v15, isa, a7);
  _Block_release(a7);

}

void RapportMessageable.sendEvent(id:event:destinationID:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, void *a7)
{
  void *v7;
  NSString v10;
  NSDictionary v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000125F8();
  v10 = sub_10001260C();
  v11.super.isa = sub_100012654().super.isa;
  v12 = String._bridgeToObjectiveC()();
  if (isa)
    isa = sub_100012654().super.isa;
  if (a7)
  {
    a7 = sub_10000B2EC((uint64_t)sub_10000AE08, (uint64_t)_NSConcreteStackBlock, 1107296256, v13, v14);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v7, "sendEventID:event:destinationID:options:completion:", v10, v11.super.isa, v12, isa, a7);
  _Block_release(a7);
  sub_100012644();

  sub_1000125AC();
}

uint64_t sub_100011D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011D34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100011D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8)
{
  sub_100011D58(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000050D4();
}

void sub_100011D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id v12;
  NSString v13;
  NSDictionary v14;
  NSString v15;
  void *v16;
  _QWORD v17[6];

  v12 = *(id *)(v8 + 16);
  v13 = String._bridgeToObjectiveC()();
  v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v15 = String._bridgeToObjectiveC()();
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v17[4] = a7;
  v17[5] = a8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_1000124A8;
  v17[3] = &unk_100280868;
  v16 = _Block_copy(v17);
  swift_retain();
  swift_release();
  objc_msgSend(v12, "sendRequestID:request:destinationID:options:responseHandler:", v13, v14.super.isa, v15, isa, v16);
  _Block_release(v16);

}

void RapportMessageable.sendRequest(id:request:destinationID:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class isa)
{
  NSString v7;
  NSDictionary v8;
  NSString v9;
  void *v10;
  void *v11;
  SEL v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000125F8();
  v7 = sub_10001260C();
  v8.super.isa = sub_100012654().super.isa;
  v9 = String._bridgeToObjectiveC()();
  if (isa)
    isa = sub_100012654().super.isa;
  v10 = sub_10000B2EC((uint64_t)sub_1000124A8, (uint64_t)_NSConcreteStackBlock, 1107296256, v13, v14);
  swift_retain();
  swift_release();
  v11 = (void *)sub_10001262C();
  objc_msgSend(v11, v12);
  _Block_release(v10);
  sub_100012644();

  sub_1000125AC();
}

void sub_100011FE0(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  sub_100011FFC(a1, a2, a3, a4, a5, a6);
  sub_1000050D4();
}

void sub_100011FFC(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, void *a5, uint64_t a6)
{
  uint64_t v6;
  id v10;
  NSString v11;
  NSDictionary v12;
  _QWORD v13[6];

  v10 = *(id *)(v6 + 16);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10000AE08;
    v13[3] = &unk_100280840;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v10, "sendEventID:event:options:completion:", v11, v12.super.isa, isa, a5);
  _Block_release(a5);

}

void RapportMessageable.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  Class isa;
  NSString v11;
  NSDictionary v12;
  uint64_t v13;
  uint64_t v14;

  v9 = (void *)a5;
  isa = (Class)a4;
  sub_1000125E0(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_10001261C();
  v12.super.isa = sub_10001264C().super.isa;
  if (isa)
    isa = sub_10001264C().super.isa;
  if (v9)
  {
    v9 = sub_10000B2EC((uint64_t)sub_10000AE08, (uint64_t)_NSConcreteStackBlock, 1107296256, v13, v14);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v8, "sendEventID:event:options:completion:", v11, v12.super.isa, isa, v9);
  _Block_release(v9);
  sub_100012644();

  sub_1000125C8();
}

void sub_100012250(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  sub_10001226C(a1, a2, a3, a4, a5, a6);
  sub_1000050D4();
}

void sub_10001226C(uint64_t a1, uint64_t a2, uint64_t a3, Class isa, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  id v10;
  NSString v11;
  NSDictionary v12;
  void *v13;
  _QWORD v14[6];

  v10 = *(id *)(v6 + 16);
  v11 = String._bridgeToObjectiveC()();
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v14[4] = a5;
  v14[5] = a6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1000124A8;
  v14[3] = &unk_100280818;
  v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v10, "sendRequestID:request:options:responseHandler:", v11, v12.super.isa, isa, v13);
  _Block_release(v13);

}

void RapportMessageable.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Class isa;
  NSString v9;
  NSDictionary v10;
  void *v11;
  void *v12;
  SEL v13;
  uint64_t v14;
  uint64_t v15;

  isa = (Class)a4;
  sub_1000125E0(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = sub_10001261C();
  v10.super.isa = sub_10001264C().super.isa;
  if (isa)
    isa = sub_10001264C().super.isa;
  v11 = sub_10000B2EC((uint64_t)sub_1000124A8, (uint64_t)_NSConcreteStackBlock, 1107296256, v14, v15);
  swift_retain();
  swift_release();
  v12 = (void *)sub_10001262C();
  objc_msgSend(v12, v13);
  _Block_release(v11);
  sub_100012644();

  sub_1000125C8();
}

uint64_t sub_1000124A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, void *);
  uint64_t v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (!a2)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (v5)
LABEL_3:
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
LABEL_4:
  swift_retain(v6);
  v9 = a4;
  v7(v8, v5, a4);
  swift_release(v6);

  swift_bridgeObjectRelease(v5);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1000125E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 24))(a7, a8);
}

uint64_t sub_1000125F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 24))(*(_QWORD *)(v0 + 16));
}

NSString sub_10001260C()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_10001261C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10001262C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100012644()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

NSDictionary sub_10001264C()
{
  return Dictionary._bridgeToObjectiveC()();
}

NSDictionary sub_100012654()
{
  return Dictionary._bridgeToObjectiveC()();
}

void sub_10001265C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t RapportStreamServer.delegate.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 24, (uint64_t)v2, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t RapportStreamServer.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  sub_10000B2F8(v2 + 24, (uint64_t)v6, 1);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return swift_unknownObjectRelease(a1);
}

void RapportStreamServer.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_10000B2F8(v1 + 24, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  sub_10000B350();
}

void sub_1000127A4(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t RapportStreamServer.__allocating_init(server:)()
{
  uint64_t v0;

  sub_10001370C();
  sub_10001372C();
  return v0;
}

_QWORD *RapportStreamServer.init(server:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1[4] = 0;
  swift_unknownObjectWeakInit(v1 + 3, 0);
  v3 = type metadata accessor for RapportStreamSession();
  v1[5] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v3, &protocol witness table for ObjectIdentifier);
  v1[2] = a1;
  v4 = sub_1000136F4();
  sub_100013720(v4);
  v5 = sub_10000B2EC((uint64_t)sub_10000E610, (uint64_t)_NSConcreteStackBlock, 1107296256, v14, v17);
  v6 = a1;
  v7 = swift_release();
  sub_100013744(v7, "setInvalidationHandler:");
  _Block_release(v5);
  v8 = sub_1000136F4();
  sub_100013720(v8);
  v9 = sub_10000B2EC((uint64_t)sub_100012CC0, (uint64_t)_NSConcreteStackBlock, 1107296256, v15, v18);
  v10 = swift_release();
  sub_100013744(v10, "setStreamAcceptHandler:");
  _Block_release(v9);
  v11 = sub_1000136F4();
  sub_100013720(v11);
  v12 = sub_10000B2EC((uint64_t)sub_100012F48, (uint64_t)_NSConcreteStackBlock, 1107296256, v16, v19);
  swift_release();
  objc_msgSend(v6, "setStreamPrepareHandlerEx:", v12);

  _Block_release(v12);
  return v1;
}

uint64_t sub_1000129E4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100012A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100012A7C();
    return swift_release();
  }
  return result;
}

uint64_t sub_100012A5C()
{
  uint64_t v0;

  return sub_100012A08(v0);
}

uint64_t sub_100012A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012A74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012A7C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_100012AF4(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v7 = a4 + 16;
  swift_beginAccess(a4 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    sub_100012B74(a1, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_100012B6C(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;

  return sub_100012AF4(a1, a2, a3, v3);
}

void sub_100012B74(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;
  _BYTE v15[24];

  v4 = v3;
  swift_beginAccess(v3 + 40, v15, 33, 0);
  v8 = sub_1000133F4((uint64_t)a1);
  swift_endAccess(v15);
  if (!v8)
  {
    v9 = type metadata accessor for RapportStreamSession();
    swift_allocObject(v9, 40, 7);
    v8 = RapportStreamSession.init(session:)(a1);
  }
  swift_beginAccess(v3 + 24, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 24);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(v4 + 32);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v12 + 16))(v4, v8, a2, a3, ObjectType, v12);
    swift_release();
    swift_unknownObjectRelease(v11);
  }
  else
  {
    sub_1000136A0();
    v14 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6714, 0xD00000000000001DLL, 0x8000000100252440, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/CompanionLink/RapportStreamServer.swift", 98, 2, 56);
    a2();
    swift_release();

  }
}

void sub_100012CC0(uint64_t a1, void *a2, void *aBlock)
{
  void (*v4)(void);
  void *v5;
  id v6;

  v4 = *(void (**)(void))(a1 + 32);
  v5 = _Block_copy(aBlock);
  *(_QWORD *)(swift_allocObject(&unk_100280990, 24, 7) + 16) = v5;
  swift_retain();
  v6 = a2;
  v4();
  swift_release();
  swift_release();

}

uint64_t sub_100012D54(void *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  if (swift_weakLoadStrong(v5))
  {
    v6 = sub_100012DDC(a1, a2);
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_100012DD4(void *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_100012D54(a1, a2, v2);
}

uint64_t sub_100012DDC(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v18;
  id v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v3 = v2;
  v6 = type metadata accessor for RapportStreamSession();
  swift_allocObject(v6, 40, 7);
  v7 = a1;
  v8 = RapportStreamSession.init(session:)(v7);
  swift_beginAccess(v3 + 24, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 24);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(_QWORD *)(v3 + 32);
    ObjectType = swift_getObjectType(Strong);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v3, v8, ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
    swift_beginAccess(v3 + 40, v20, 33, 0);
    swift_retain();
    sub_1000134C4(v16, (uint64_t)v7);
    swift_endAccess(v20);
    if ((v15 & 1) != 0)
    {
      if (a2)
      {
        swift_errorRetain(v13);
        v18 = (void *)_convertErrorToNSError(_:)(v13);
        v19 = v18;
        *a2 = v18;
        swift_release();
        sub_100013530(v13, 1);
      }
      else
      {
        swift_release();
      }
      sub_100013530(v13, 1);
      return 0;
    }
    else
    {
      swift_release();
      return v13 & 1;
    }
  }
  else
  {
    swift_release();
    return 1;
  }
}

uint64_t sub_100012F48(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  char v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = v4();
  swift_release(v3);

  return v6 & 1;
}

uint64_t RapportStreamServer.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPStreamServer), "init");
  sub_10001370C();
  sub_10001372C();
  return v0;
}

id RapportStreamSession.messenger.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "messenger");
}

uint64_t RapportStreamSession.messenger.setter(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + 16), "setMessenger:", a1);
  return sub_100013704(a1);
}

uint64_t (*RapportStreamServer.messenger.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "messenger");
  return sub_100013084;
}

uint64_t sub_100013084(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  objc_msgSend((id)a1[1], "setMessenger:", *a1);
  return sub_100013704(v1);
}

void RapportStreamServer.serviceType.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), "serviceType");
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  sub_10000B350();
}

void RapportStreamServer.serviceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v5;

  v3 = *(void **)(v2 + 16);
  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v3, "setServiceType:", v5);

}

void (*RapportStreamServer.serviceType.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamServer.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  return sub_1000131A8;
}

void sub_1000131A8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
    sub_100013738();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100013738();
  }
}

void RapportStreamServer.activate(completion:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  v2 = sub_10000B2EC((uint64_t)sub_10000AE08, (uint64_t)_NSConcreteStackBlock, 1107296256, v3, v4);
  swift_retain();
  swift_release();
  objc_msgSend(v1, "activateWithCompletion:", v2);
  _Block_release(v2);
}

Swift::Void __swiftcall RapportStreamServer.cancel()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "invalidate");
}

uint64_t RapportStreamServer.deinit()
{
  uint64_t v0;

  sub_10000AEBC(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RapportStreamServer.__deallocating_deinit()
{
  uint64_t v0;

  RapportStreamServer.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_1000132E8()
{
  RapportStreamServer.cancel()();
}

uint64_t type metadata accessor for RapportStreamServer()
{
  return objc_opt_self(_TtC13CompanionLink19RapportStreamServer);
}

unint64_t sub_100013328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100013358(a1, v3);
}

unint64_t sub_100013358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1000133F4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v3 = sub_100013328(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v12 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_1000055B0(&qword_1002A9728);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v5);
  v10 = type metadata accessor for RapportStreamSession();
  _NativeDictionary._delete(at:)(v5, v12, &type metadata for ObjectIdentifier, v10);
  *v2 = v12;
  swift_bridgeObjectRelease();
  return v9;
}

double sub_1000134C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  sub_10001353C(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100013530(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

unint64_t sub_10001353C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100013328(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_1000055B0(&qword_1002A9728);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100013328(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_100013638(v14, a2, a1, v18);
  v19 = v18[7];
  result = swift_release();
  *(_QWORD *)(v19 + 8 * v14) = a1;
  return result;
}

unint64_t sub_100013638(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_10001367C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000136A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AAB80;
  if (!qword_1002AAB80)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AAB80);
  }
  return result;
}

uint64_t sub_1000136F4()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_100013704(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10001370C()
{
  uint64_t v0;

  return swift_allocObject(v0, 48, 7);
}

uint64_t sub_100013720(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

_QWORD *sub_10001372C()
{
  void *v0;

  return RapportStreamServer.init(server:)(v0);
}

void sub_100013738()
{
  uint64_t v0;
  uint64_t v1;

  RapportStreamServer.serviceType.setter(v1, v0);
}

id sub_100013744(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100013754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t RapportDeviceChangeFlags.init(_:)(uint64_t result)
{
  return result;
}

void sub_1000137B0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v9[9];

  v0 = Hasher.init(_seed:)(v9, 0);
  sub_100013C38(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9[0]);
  Hasher._finalize()();
  sub_10000E59C();
}

void sub_1000137E8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v10[9];

  v1 = Hasher.init(_seed:)(v10, a1);
  sub_100013C38(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  Hasher._finalize()();
  sub_10000E59C();
}

BOOL sub_100013818(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_100013824(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_10001382C(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t sub_100013834(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

BOOL sub_10001383C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100013868(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = *v1 & a1;
  if (result)
    *v1 &= ~a1;
  return result;
}

uint64_t sub_10001388C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

void sub_1000138A4(uint64_t a1)
{
  _QWORD *v1;

  sub_100013C30(*v1 | a1);
}

void sub_1000138B0(uint64_t a1)
{
  _QWORD *v1;

  sub_100013C30(*v1 & a1);
}

void sub_1000138BC(uint64_t a1)
{
  _QWORD *v1;

  sub_100013C30(*v1 ^ a1);
}

uint64_t sub_1000138C8(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1000138D0(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1000138DC(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1000138E8(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

void sub_1000138F4(uint64_t a1)
{
  _QWORD *v1;

  sub_100013C30(*v1 & ~a1);
}

void *RapportDeviceChangeFlags.advertisementData.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.advertisementData;
}

uint64_t static ReportID.keyboard.getter()
{
  return 1;
}

void *RapportDeviceChangeFlags.attributes.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.attributes;
}

void *RapportDeviceChangeFlags.distance.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.distance;
}

void *RapportDeviceChangeFlags.IE.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.IE;
}

void *RapportDeviceChangeFlags.name.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.name;
}

uint64_t static ReportID.rotation.getter()
{
  return 16;
}

void *RapportDeviceChangeFlags.RSSI.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.RSSI;
}

void *RapportDeviceChangeFlags.SSID.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.SSID;
}

uint64_t static DigitizerEventMask.attribute.getter()
{
  return 64;
}

void *RapportDeviceChangeFlags.proximity.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.proximity;
}

uint64_t static Int8.logicalMinimum.getter()
{
  return 128;
}

void *RapportDeviceChangeFlags.relativeLocation.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.relativeLocation;
}

uint64_t static DigitizerEventMask.start.getter()
{
  return 256;
}

void *RapportDeviceChangeFlags.removed.unsafeMutableAddressor()
{
  return &static RapportDeviceChangeFlags.removed;
}

uint64_t sub_1000139A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static UInt64.logicalMinimum.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000139C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10001382C(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000139F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100013834(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100013A1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100013754(a1);
  *a2 = result;
  return result;
}

void sub_100013A40()
{
  sub_1000137B0();
}

void sub_100013A58(uint64_t a1)
{
  sub_1000137E8(a1);
}

uint64_t RapportDeviceChangeFlags.description.getter(unint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t result;

  if (HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  else
  {
    v1 = RPDeviceChangeFlagsCopyDescription(a1);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return v2;
  }
  return result;
}

unint64_t sub_100013B14()
{
  unint64_t result;

  result = qword_1002A9730;
  if (!qword_1002A9730)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1002A9730);
  }
  return result;
}

unint64_t sub_100013B54()
{
  unint64_t result;

  result = qword_1002A9738;
  if (!qword_1002A9738)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1002A9738);
  }
  return result;
}

unint64_t sub_100013B94()
{
  unint64_t result;

  result = qword_1002A9740;
  if (!qword_1002A9740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1002A9740);
  }
  return result;
}

unint64_t sub_100013BD4()
{
  unint64_t result;

  result = qword_1002A9748;
  if (!qword_1002A9748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RapportDeviceChangeFlags, &type metadata for RapportDeviceChangeFlags);
    atomic_store(result, (unint64_t *)&qword_1002A9748);
  }
  return result;
}

uint64_t sub_100013C10()
{
  unint64_t *v0;

  return RapportDeviceChangeFlags.description.getter(*v0);
}

ValueMetadata *type metadata accessor for RapportDeviceChangeFlags()
{
  return &type metadata for RapportDeviceChangeFlags;
}

void sub_100013C30(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
}

void sub_100013C38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void sub_100013C44(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  NSDictionary v7;
  uint64_t v8;
  id v9;

  isa = a2;
  if (a1)
  {
    v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (!isa)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7.super.isa = 0;
  if (a2)
LABEL_3:
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_4:
  if (a3)
    v8 = _convertErrorToNSError(_:)(a3);
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v7.super.isa, isa);

}

uint64_t RapportStreamSession.__allocating_init(session:)()
{
  uint64_t v0;

  sub_10001552C();
  sub_100015578();
  return v0;
}

uint64_t RapportStreamSession.delegate.getter(uint64_t a1)
{
  sub_1000154B8(a1);
  return sub_100015564();
}

void RapportStreamSession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_10000B2F8(v2 + 24, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  swift_unknownObjectRelease(a1);
  sub_10000B338();
}

void RapportStreamSession.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  sub_10000B2F8(v1 + 24, (uint64_t)v3, 33);
  v4 = sub_100015564();
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = v4;
  v3[4] = v5;
  sub_10000B350();
}

uint64_t RapportStreamSession.init(session:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit(v1 + 24, 0);
  *(_QWORD *)(v1 + 16) = a1;
  v4 = sub_1000136F4();
  v5 = sub_10001548C(v4);
  v134 = v2;
  v13 = sub_10000F730(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)_NSConcreteStackBlock);
  v14 = a1;
  v15 = swift_release();
  sub_100013744(v15, "setFlowControlWriteChangedHandler:");
  sub_1000154EC();
  v16 = sub_1000136F4();
  sub_10001548C(v16);
  sub_1000154CC();
  v25 = sub_10000F730(v17, v18, v19, v20, v21, v22, v23, v24, v116);
  v33 = sub_1000154AC((uint64_t)v25, v26, v27, v28, v29, v30, v31, v32, v117, 1107296256, (uint64_t)sub_10000E610, (uint64_t)&unk_100280B90, (uint64_t)sub_100014094, v134);
  sub_100013744(v33, "setInvalidationHandler:");
  sub_1000154EC();
  v34 = sub_1000136F4();
  sub_10001548C(v34);
  sub_1000154CC();
  v43 = sub_10000F730(v35, v36, v37, v38, v39, v40, v41, v42, v118);
  sub_1000154AC((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v119, v126, (uint64_t)sub_10000E610, (uint64_t)&unk_100280BB8, v130, v135);
  RPStreamSessionSetDisconnectHandler(v14, v13);
  sub_1000154EC();
  v51 = sub_1000136F4();
  sub_10001548C(v51);
  sub_1000154CC();
  v60 = sub_10000F730(v52, v53, v54, v55, v56, v57, v58, v59, v120);
  v68 = sub_1000154AC((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, v121, v127, (uint64_t)sub_100014340, (uint64_t)&unk_100280BE0, v131, v136);
  sub_100013744(v68, "setReceivedEventHandler:");
  sub_1000154EC();
  v69 = sub_1000136F4();
  sub_10001548C(v69);
  sub_1000154CC();
  v78 = sub_10000F730(v70, v71, v72, v73, v74, v75, v76, v77, v122);
  v86 = sub_1000154AC((uint64_t)v78, v79, v80, v81, v82, v83, v84, v85, v123, v128, (uint64_t)sub_1000145BC, (uint64_t)&unk_100280C08, v132, v137);
  sub_100013744(v86, "setReceivedRequestHandler:");
  sub_1000154EC();
  v87 = sub_1000136F4();
  sub_10001548C(v87);
  sub_1000154CC();
  v96 = sub_10000F730(v88, v89, v90, v91, v92, v93, v94, v95, v124);
  v104 = sub_1000154AC((uint64_t)v96, v97, v98, v99, v100, v101, v102, v103, v125, v129, (uint64_t)sub_10000E610, (uint64_t)&unk_100280C30, v133, v138);
  sub_100013744(v104, "setStatusChangedHandler:");
  sub_1000154EC();
  v105 = sub_1000136F4();
  v106 = swift_weakInit(v105 + 16, v1);
  v114 = sub_10000F730(v106, v107, v108, v109, v110, v111, v112, v113, (uint64_t)_NSConcreteStackBlock);
  swift_release();
  objc_msgSend(v14, "setConnectionReadyHandler:", v114);

  _Block_release(v114);
  return v1;
}

uint64_t sub_100014070()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100014094()
{
  uint64_t v0;

  sub_1000146D0(v0);
}

uint64_t sub_1000140AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000140BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000140C4(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  _BYTE v4[24];

  v3 = a1 + 16;
  sub_10000B2F8(a1 + 16, (uint64_t)v4, 0);
  if (swift_weakLoadStrong(v3))
  {
    a2();
    swift_release();
  }
  sub_100015540();
}

void sub_100014110()
{
  uint64_t v0;

  sub_1000140C4(v0, (void (*)(void))sub_100014130);
}

uint64_t sub_100014130()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_1000141A8()
{
  uint64_t v0;

  sub_1000140C4(v0, (void (*)(void))sub_100012A7C);
}

uint64_t sub_1000141C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v9 = a5 + 16;
  swift_beginAccess(a5 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    sub_100014258(a1, a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t sub_100014250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000141C8(a1, a2, a3, a4, v4);
}

uint64_t sub_100014258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v13[24];

  swift_beginAccess(v4 + 24, v13, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4 + 24);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(v4 + 32);
    if (a4)
      v10 = a4;
    else
      v10 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    ObjectType = swift_getObjectType(v8);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24);
    swift_bridgeObjectRetain(a4);
    v12(v4, a3, v10, ObjectType, v9);
    swift_bridgeObjectRelease(v10);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_100014340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v6);
  v7(v8, v10, v11, a4);
  swift_release(v6);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100014414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  _BYTE v15[24];

  v13 = a7 + 16;
  swift_beginAccess(a7 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v13);
  if (result)
  {
    sub_1000144BC(a1, a2, a3, a4, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000144B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_100014414(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_1000144BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v17[24];

  swift_beginAccess(v6 + 24, v17, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v6 + 24);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)(v6 + 32);
    if (a4)
      v14 = a4;
    else
      v14 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    ObjectType = swift_getObjectType(v12);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32);
    swift_bridgeObjectRetain(a4);
    v16(v6, a3, v14, a5, a6, ObjectType, v13);
    swift_bridgeObjectRelease(v14);
    return swift_unknownObjectRelease(v12);
  }
  return result;
}

uint64_t sub_1000145BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t, __n128);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __n128 v16;

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, objc_class *, uint64_t), uint64_t, __n128))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12 = v11;
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v14 = _Block_copy(a5);
  v15 = swift_allocObject(&unk_100280D48, 24, 7);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = swift_retain(v8);
  v9(v10, v12, v13, a4, sub_10000B278, v15, v16);
  swift_release();
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_release();
  return swift_bridgeObjectRelease(a4);
}

void sub_1000146D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;

  v1 = a1 + 16;
  sub_1000154B8(a1);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_10001470C(Strong);
    swift_release();
  }
  sub_100015540();
}

void sub_10001470C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  sub_1000154B8(a1);
  v2 = sub_100015564();
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)(v1 + 32);
    ObjectType = swift_getObjectType(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v1, ObjectType, v4);
    swift_unknownObjectRelease(v3);
  }
  sub_10000B338();
}

void sub_100014764()
{
  uint64_t v0;

  sub_1000140C4(v0, (void (*)(void))sub_100014784);
}

uint64_t sub_100014784()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  swift_beginAccess(v0 + 24, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 32);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, ObjectType, v3);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t RapportStreamSession.__allocating_init()()
{
  uint64_t v0;

  objc_msgSend(objc_allocWithZone((Class)RPStreamSession), "init");
  sub_10001552C();
  sub_100015578();
  return v0;
}

uint64_t RapportStreamSession.deinit()
{
  uint64_t v0;

  RapportStreamSession.cancel()();

  sub_10000AEBC(v0 + 24);
  return v0;
}

Swift::Void __swiftcall RapportStreamSession.cancel()()
{
  uint64_t v0;
  _BYTE v1[24];

  objc_msgSend(*(id *)(v0 + 16), "invalidate");
  sub_10000B2F8(v0 + 24, (uint64_t)v1, 1);
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectWeakAssign(v0 + 24, 0);
  sub_100015540();
}

uint64_t RapportStreamSession.__deallocating_deinit()
{
  uint64_t v0;

  RapportStreamSession.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

void RapportStreamSession.serviceType.getter()
{
  sub_100014C68((SEL *)&selRef_serviceType);
}

void RapportStreamSession.serviceType.setter(uint64_t a1, uint64_t a2)
{
  sub_100014CC8(a1, a2, (SEL *)&selRef_setServiceType_);
}

void RapportStreamSession.serviceType.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.serviceType.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_1000050D4();
}

void sub_100014914(uint64_t a1, char a2)
{
  sub_100014A60(a1, a2);
}

id RapportStreamSession.dispatchQueue.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "dispatchQueue");
}

id RapportStreamSession.flowControlWriteState.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "flowControlWriteState");
}

void RapportStreamSession.messenger.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = objc_msgSend(v3, "messenger");
  sub_1000050D4();
}

id RapportStreamSession.statusFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "statusFlags");
}

id RapportStreamSession.streamFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamFlags");
}

id RapportStreamSession.streamFlags.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setStreamFlags:", a1);
}

void RapportStreamSession.streamFlags.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = objc_msgSend((id)sub_100015504(a1), "streamFlags");
  sub_1000050D4();
}

id sub_100014A00(uint64_t a1, uint64_t a2)
{
  return sub_100014C44(a1, a2, (SEL *)&selRef_setStreamFlags_);
}

void RapportStreamSession.streamID.getter()
{
  sub_100014C68((SEL *)&selRef_streamID);
}

void RapportStreamSession.streamID.setter(uint64_t a1, uint64_t a2)
{
  sub_100014CC8(a1, a2, (SEL *)&selRef_setStreamID_);
}

void RapportStreamSession.streamID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.streamID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_1000050D4();
}

void sub_100014A54(uint64_t a1, char a2)
{
  sub_100014A60(a1, a2);
}

void sub_100014A60(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
    sub_10001556C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001556C();
  }
}

void RapportStreamSession.streamKey.getter()
{
  uint64_t v0;

  if (objc_msgSend(*(id *)(v0 + 16), "streamKey"))
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10000E4A8();
  }
  sub_10000B350();
}

id RapportStreamSession.streamQoS.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamQoS");
}

id RapportStreamSession.streamQoS.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setStreamQoS:", a1);
}

void RapportStreamSession.streamQoS.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = objc_msgSend((id)sub_100015504(a1), "streamQoS");
  sub_1000050D4();
}

id sub_100014B60(uint64_t a1, uint64_t a2)
{
  return sub_100014C44(a1, a2, (SEL *)&selRef_setStreamQoS_);
}

id RapportStreamSession.streamSocket.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamSocket");
}

id RapportStreamSession.streamType.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "streamType");
}

id RapportStreamSession.streamType.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setStreamType:", a1);
}

void RapportStreamSession.streamType.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = objc_msgSend((id)sub_100015504(a1), "streamType");
  sub_1000050D4();
}

id sub_100014BD4(uint64_t a1, uint64_t a2)
{
  return sub_100014C44(a1, a2, (SEL *)&selRef_setStreamType_);
}

id RapportStreamSession.trafficFlags.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "trafficFlags");
}

id RapportStreamSession.trafficFlags.setter(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "setTrafficFlags:", a1);
}

void RapportStreamSession.trafficFlags.modify(_QWORD *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = objc_msgSend((id)sub_100015504(a1), "trafficFlags");
  sub_1000050D4();
}

id sub_100014C38(uint64_t a1, uint64_t a2)
{
  return sub_100014C44(a1, a2, (SEL *)&selRef_setTrafficFlags_);
}

id sub_100014C44(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(*(id *)a1, *a3, *(unsigned int *)(a1 + 8));
}

void RapportStreamSession.trafficSessionID.getter()
{
  sub_100014C68((SEL *)&selRef_trafficSessionID);
}

void sub_100014C68(SEL *a1)
{
  uint64_t v1;
  id v2;

  v2 = objc_msgSend(*(id *)(v1 + 16), *a1);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10000E4A8();
  }
  sub_10000B350();
}

void RapportStreamSession.trafficSessionID.setter(uint64_t a1, uint64_t a2)
{
  sub_100014CC8(a1, a2, (SEL *)&selRef_setTrafficSessionID_);
}

void sub_100014CC8(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  void *v5;
  id v6;

  v5 = *(void **)(v3 + 16);
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    sub_10000E594();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v5, *a3, v6);

}

void RapportStreamSession.trafficSessionID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  RapportStreamSession.trafficSessionID.getter();
  *a1 = v3;
  a1[1] = v4;
  sub_1000050D4();
}

void sub_100014D58(uint64_t a1, char a2)
{
  sub_100014A60(a1, a2);
}

void RapportStreamSession.activate(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014D8C(a1, a2, (uint64_t)&unk_100280C80, (SEL *)&selRef_activateWithCompletion_, a5, a6, a7, a8);
}

void RapportStreamSession.prepare(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014D8C(a1, a2, (uint64_t)&unk_100280CA8, (SEL *)&selRef_prepareWithCompletion_, a5, a6, a7, a8);
}

void sub_100014D8C(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v11;
  void *v12;

  v11 = *(void **)(v8 + 16);
  v12 = sub_10000F730(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)_NSConcreteStackBlock);
  swift_retain(a2);
  swift_release();
  objc_msgSend(v11, *a4, v12);
  sub_1000154EC();
}

void RapportStreamSession.sendEvent(id:event:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, Class a4, void *a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSDictionary v11;
  NSDictionary v12;
  NSDictionary v13;
  NSDictionary v14;
  NSDictionary v15;
  NSDictionary v16;
  NSDictionary v17;
  NSDictionary v18;
  Class isa;

  v10 = sub_100015584();
  v11.super.isa = sub_10001264C().super.isa;
  isa = v11.super.isa;
  if (a4)
  {
    v11.super.isa = sub_10001264C().super.isa;
    a4 = v11.super.isa;
  }
  if (a5)
  {
    a5 = sub_10000F730((uint64_t)v11.super.isa, (uint64_t)v12.super.isa, (uint64_t)v13.super.isa, (uint64_t)v14.super.isa, (uint64_t)v15.super.isa, (uint64_t)v16.super.isa, (uint64_t)v17.super.isa, (uint64_t)v18.super.isa, (uint64_t)_NSConcreteStackBlock);
    swift_retain(a6);
    swift_release();
  }
  objc_msgSend(v6, "sendEventID:event:options:completion:", v10, isa, a4, a5);
  _Block_release(a5);

  sub_1000125C8();
}

void RapportStreamSession.sendRequest(id:request:options:response:)(uint64_t a1, uint64_t a2, uint64_t a3, Class a4)
{
  void *v4;
  NSString v6;
  NSDictionary v7;
  NSDictionary v8;
  NSDictionary v9;
  NSDictionary v10;
  NSDictionary v11;
  NSDictionary v12;
  NSDictionary v13;
  NSDictionary v14;
  Class isa;
  void *v16;

  v6 = sub_100015584();
  v7.super.isa = sub_10001264C().super.isa;
  isa = v7.super.isa;
  if (a4)
  {
    v7.super.isa = sub_10001264C().super.isa;
    a4 = v7.super.isa;
  }
  v16 = sub_10000F730((uint64_t)v7.super.isa, (uint64_t)v8.super.isa, (uint64_t)v9.super.isa, (uint64_t)v10.super.isa, (uint64_t)v11.super.isa, (uint64_t)v12.super.isa, (uint64_t)v13.super.isa, (uint64_t)v14.super.isa, (uint64_t)_NSConcreteStackBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, "sendRequestID:request:options:responseHandler:", v6, isa, a4, v16);
  _Block_release(v16);

  sub_1000125C8();
}

void sub_100015024()
{
  RapportStreamSession.cancel()();
}

void sub_100015044(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, void *a5, uint64_t a6)
{
  RapportStreamSession.sendEvent(id:event:options:completion:)(a1, a2, a3, a4, a5, a6);
}

void sub_100015064(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4)
{
  RapportStreamSession.sendRequest(id:request:options:response:)(a1, a2, a3, a4);
}

uint64_t RapportStreamSession.description.getter()
{
  Swift::String *v0;
  void *countAndFlagsBits;
  uint64_t v2;
  unsigned int v3;
  NSString *v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  NSString *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  id v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Swift::String v101;
  _QWORD v102[2];
  Swift::String v103;
  Swift::String v104;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v102, "StreamSession ");
  HIBYTE(v102[1]) = -18;
  countAndFlagsBits = (void *)v0[1]._countAndFlagsBits;
  v3 = sub_10000E418(v2, "streamType");
  v4 = RPStreamTypeCopyDescription(v3);
  sub_10000E530((uint64_t)v4);
  sub_100015514();
  sub_100015520();
  v5 = sub_10000E50C();
  v6 = sub_10000E418(v5, "streamFlags");
  v7 = RPStreamFlagsCopyDescription(v6);
  sub_10000E530((uint64_t)v7);
  sub_100015514();
  sub_100015520();
  sub_10000E50C();
  sub_1000154DC();
  sub_10001549C(v8, v9, v10, v11, v12, v13, v14, v15, v94, v100, 0x3C204C46202CLL, (void *)0xE600000000000000);
  sub_10000E568();
  v16 = RPStatusFlagsCopyDescription((unint64_t)objc_msgSend(countAndFlagsBits, "statusFlags"));
  sub_10000E530((uint64_t)v16);
  sub_100015514();
  sub_100015520();
  sub_10000E50C();
  sub_1000154DC();
  sub_10001549C(v17, v18, v19, v20, v21, v22, v23, v24, v95, v100, 0x3C204653202CLL, (void *)0xE600000000000000);
  v25 = sub_10000E568();
  v26 = sub_10000E418(v25, "flowControlWriteState");
  v27 = sub_100015380(v26);
  v103._countAndFlagsBits = String.init(cString:)(v27);
  sub_10001555C(v103);
  v28 = sub_10000E568();
  sub_10001549C(v28, v29, v30, v31, v32, v33, v34, v35, v96, v100, 0x204346202CLL, (void *)0xE500000000000000);
  sub_10000E568();
  RapportStreamSession.serviceType.getter();
  if (v36._object)
  {
    sub_10001555C(v36);
    v37 = sub_10000E568();
    sub_10001549C(v37, v38, v39, v40, v41, v42, v43, v44, v97, v100, 0x205453202CLL, (void *)0xE500000000000000);
    sub_10000E568();
  }
  RapportStreamSession.streamID.getter();
  if (v45._object)
  {
    v101._countAndFlagsBits = 0x27204449202CLL;
    v101._object = (void *)0xE600000000000000;
    sub_10001555C(v45);
    sub_10000E594();
    v0 = &v101;
    v46._countAndFlagsBits = 39;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    sub_1000154F4(v47, v48, v49, v50, v51, v52, v53, v54, v97, v100, v101._countAndFlagsBits, v101._object);
    v45._countAndFlagsBits = sub_10000E594();
  }
  v55 = (uint64_t)sub_10000E418(v45._countAndFlagsBits, "streamSocket");
  if ((_DWORD)v55 != -1)
  {
    v101._countAndFlagsBits = 0x204446202CLL;
    v101._object = (void *)0xE500000000000000;
    HIDWORD(v100) = v55;
    v0 = (Swift::String *)((char *)&v100 + 4);
    v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    sub_10001555C(v104);
    v56 = sub_10000E594();
    sub_1000154F4(v56, v57, v58, v59, v60, v61, v62, v63, v97, v100, v101._countAndFlagsBits, v101._object);
    v55 = sub_10000E594();
  }
  v101._countAndFlagsBits = 0x20534F51202CLL;
  v101._object = (void *)0xE600000000000000;
  v64 = sub_10000E418(v55, "streamQoS");
  v65 = RPStreamQoSCopyDescription(v64);
  sub_10000E530((uint64_t)v65);

  sub_10001554C(v66, v67, v68, v69, v70, v71, v72, v73, v97, v100, v101._countAndFlagsBits);
  v74 = sub_10000E568();
  sub_1000154F4(v74, v75, v76, v77, v78, v79, v80, v81, v98, v100, v101._countAndFlagsBits, v101._object);
  v82 = sub_10000E594();
  v101._countAndFlagsBits = 0x3C204654202CLL;
  v101._object = (void *)0xE600000000000000;
  v83 = sub_10000E418(v82, "trafficFlags");
  v84 = CUTrafficFlagsCopyDescription(v83);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v84);

  sub_10001554C(v85, v86, v87, v88, v89, v90, v91, v92, v99, v100, v101._countAndFlagsBits);
  sub_10000E568();
  sub_1000154DC();
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  return v102[0];
}

const char *sub_100015380(unsigned int a1)
{
  if (a1 > 2)
    return "?";
  else
    return off_100280D60[a1];
}

uint64_t sub_1000153A4()
{
  return RapportStreamSession.description.getter();
}

BOOL static RapportStreamSession.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL sub_1000153D8(uint64_t *a1, uint64_t *a2)
{
  return static RapportStreamSession.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for RapportStreamSession()
{
  return objc_opt_self(_TtC13CompanionLink20RapportStreamSession);
}

uint64_t sub_100015418()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001548C(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

void sub_10001549C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t sub_1000154AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_release(a14);
}

uint64_t sub_1000154B8(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return swift_beginAccess(v1, va, 0, 0);
}

void sub_1000154DC()
{
  Swift::String v0;

  v0._countAndFlagsBits = 62;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_1000154EC()
{
  const void *v0;

  _Block_release(v0);
}

void sub_1000154F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t sub_100015504(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + 16);
  *a1 = result;
  return result;
}

void sub_100015514()
{
  void *v0;

}

void sub_100015520()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_10001552C()
{
  uint64_t v0;

  return swift_allocObject(v0, 40, 7);
}

void sub_10001554C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  Swift::String v13;

  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

void sub_10001555C(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100015564()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t sub_10001556C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_100015578()
{
  void *v0;

  return RapportStreamSession.init(session:)(v0);
}

NSString sub_100015584()
{
  return String._bridgeToObjectiveC()();
}

void NSItemProviderRepresentationVisibility.description.getter(uint64_t a1)
{
  Swift::String v1;
  Swift::String v2;

  if (a1 && a1 != 3 && a1 != 1)
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v1);
    sub_10000E410();
    v2._countAndFlagsBits = 41;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    sub_100015540();
  }
}

void sub_10001565C()
{
  uint64_t *v0;

  NSItemProviderRepresentationVisibility.description.getter(*v0);
}

double sub_100015664@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_100015688(a1, a2, (uint64_t)"acquire_rep", 11, a3);
}

double sub_100015678@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_100015688(a1, a2, (uint64_t)"send_rep", 8, a3);
}

double sub_100015688@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;

  v36 = a4;
  v35 = a3;
  v39 = a5;
  v38 = type metadata accessor for OSSignpostID(0);
  v34 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000055B0(&qword_1002B1CD0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  v33 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v33);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OSSignposter(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v32 - v22;
  swift_bridgeObjectRetain(a2);
  v37 = a1;
  v40 = a1;
  v41 = a2;
  v24 = sub_1000C3080();
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v25(v23, v24, v17);
  v25(v14, (uint64_t)v23, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  v42 = 0;
  v43 = 0;
  v44 = 256;
  sub_1000C30C4((uint64_t)v14, 0, 0, 256, 0, (uint64_t)v16);
  sub_1000259FC((uint64_t)v16, (uint64_t)v12, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17) == 1)
  {
    sub_100025A28((uint64_t)v12, &qword_1002B1CD0);
  }
  else
  {
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v21, v12, v17);
    v32 = a2;
    v27 = v33;
    v28 = &v16[*(int *)(v33 + 20)];
    *(_QWORD *)v28 = v35;
    *((_QWORD *)v28 + 1) = v36;
    v28[16] = 2;
    v28[17] = 0;
    OSSignposter.makeSignpostID()(v26);
    sub_1000159C4();
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v38);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    *(_QWORD *)&v16[*(int *)(v27 + 24)] = v30;
    swift_release();
  }
  sub_100022838((uint64_t)v16, v39, type metadata accessor for SignpostInterval);
  sub_1000255F0((uint64_t)v16, type metadata accessor for SignpostInterval);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1000159C4()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_signpost_id_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  os_signpost_type_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_100026B20();
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10002641C();
  v12 = v11 - v10;
  v13 = swift_bridgeObjectRetain_n(v1, 2);
  v14 = OSSignposter.logHandle.getter(v13);
  v27 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    sub_100026AF4(v1);

LABEL_11:
    sub_100026924();
    v23 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v24 = sub_100026B30();
    OSSignpostIntervalState.init(id:isOpen:)(v24, 1);
    sub_10000E4E0();
    return;
  }
  v26 = v3;
  if ((v5 & 1) != 0)
  {
    if ((unint64_t)v7 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v7 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (v7 >> 16 <= 0x10)
      {
        v25 = (const char *)&v29;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (v7)
  {
    v25 = v7;
LABEL_10:
    sub_100026924();
    v15 = (uint8_t *)sub_10000797C(12);
    v16 = sub_10000797C(32);
    v28 = v16;
    *(_DWORD *)v15 = 136446210;
    swift_bridgeObjectRetain(v1);
    v17 = sub_100006FCC(v26, v1, &v28);
    v18 = sub_100026AAC(v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, v19, v15 + 4);
    swift_bridgeObjectRelease_n(v1, 3);
    v21 = OSSignpostID.rawValue.getter(v20);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, v27, v21, v25, "%{public}s", v15, 0xCu);
    sub_1000263F4(v16, v22, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v16);
    sub_100007958((uint64_t)v15);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_11;
  }
LABEL_15:
  sub_100026AF4(v1);
  __break(1u);
}

void sub_100015BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000259FC(v0, (uint64_t)v3, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100025A28((uint64_t)v3, &qword_1002B1CD0);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v8 = type metadata accessor for SignpostInterval(0);
  if ((*(_BYTE *)(v0 + *(int *)(v8 + 20) + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + *(int *)(v8 + 24));
    swift_retain();
    if (v9)
    {
      sub_100015D8C();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_release();
      return;
    }
  }
  __break(1u);
}

void sub_100015D8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  os_signpost_type_t v20;
  const char *v21;
  uint64_t v22;

  sub_10002626C();
  v3 = v2;
  v21 = v4;
  v5 = type metadata accessor for OSSignpostError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = sub_100026B20();
  sub_1000267FC();
  __chkstk_darwin(v11);
  sub_1000268CC();
  v13 = OSSignposter.logHandle.getter(v12);
  v14 = OSSignpostIntervalState.signpostID.getter();
  v20 = static os_signpost_type_t.end.getter(v14);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_13:

    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v10);
    sub_10000E4E0();
    return;
  }
  if ((v3 & 1) == 0)
  {
    v15 = v21;
    if (v21)
    {
LABEL_9:
      swift_retain();
      checkForErrorAndConsumeState(state:)(v16);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v6 + 88))(v9, v5) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v17 = "[Error] Interval already ended";
      }
      else
      {
        sub_100026A08(v9, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
        v17 = "";
      }
      v18 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v18 = 0;
      v19 = OSSignpostID.rawValue.getter(v18);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, v20, v19, v15, v17, v18, 2u);
      sub_100007958((uint64_t)v18);
      goto LABEL_13;
    }
    __break(1u);
  }
  if ((unint64_t)v21 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v21 >> 11 != 27)
  {
    if (v21 >> 16 <= 0x10)
    {
      v15 = (const char *)&v22;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_100015F3C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_10000E440();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = UUID.init(uuid:)(v0[24], v0[25], v0[26], v0[27], v0[28], v0[29]);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  v10 = sub_1000599D0(8, v7, v9);
  v11 = static String._fromSubstring(_:)(v10);
  sub_10000E410();
  return v11;
}

uint64_t sub_100016014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65[5];
  __int128 v66;
  uint64_t v67;
  _BYTE v68[32];

  v4 = v2;
  v7 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100281C30, 40);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v4;
  v8 = type metadata accessor for Completion();
  sub_1000088D8(v8, 48);
  sub_100026B30();
  swift_retain();
  sub_10002679C();
  v9 = Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100252B40, 119, (uint64_t)sub_100022740, (uint64_t)v7);
  v10 = (v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_state);
  sub_10000B2F8(v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_state, (uint64_t)v68, 0);
  sub_100022774((uint64_t)v10, (uint64_t)&v66);
  if (!v67)
  {
    v29 = sub_10002643C();
    Logger.logObject.getter(v29);
    v30 = sub_1000268E4();
    if (sub_10002642C(v30))
    {
      v31 = sub_10000797C(12);
      v65[0] = sub_10000797C(32);
      v32 = sub_10002648C(4.8751e-34);
      v40 = sub_100026B08(v32, v33, v34, v35, v36, v37, v38, v39, v59, v60, v61, v62);
      sub_100026574(v40, v41, v42, v43, v44);
      sub_10000FF38();
      sub_10000E420();
      sub_10002640C((void *)&_mh_execute_header, v10, v45, "%{public}s: Waiting For PBItemCollection activation");
      sub_1000263F4(v65[0], v46, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v65[0]);
      sub_100007958(v31);
    }
    else
    {
      sub_10000FF38();
    }

    sub_1000088D0();
    sub_1000C4E20((uint64_t)v9);
    sub_10000B348();
    return sub_10002645C();
  }
  if (v67 == 1)
  {
    v11 = sub_10002643C();
    Logger.logObject.getter(v11);
    v12 = sub_1000268E4();
    if (sub_10002642C(v12))
    {
      v13 = sub_10000797C(12);
      v65[0] = sub_10000797C(32);
      v14 = sub_10002648C(4.8751e-34);
      v22 = sub_100026B08(v14, v15, v16, v17, v18, v19, v20, v21, v59, v60, v61, v62);
      sub_100026574(v22, v23, v24, v25, v26);
      sub_10000FF38();
      sub_10000E420();
      sub_10002640C((void *)&_mh_execute_header, v10, v27, "%{public}s: PBItemCollection already activated");
      sub_1000263F4(v65[0], v28, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v65[0]);
      sub_100007958(v13);
    }
    else
    {
      sub_10000FF38();
    }

    sub_100026768();
    return sub_10002645C();
  }
  sub_100025A50(&v66, (uint64_t)v65);
  sub_1000088D0();
  sub_1000C4E20((uint64_t)v9);
  sub_10000B348();
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  sub_100026478((uint64_t)v10, (uint64_t)&v60);
  sub_1000227A8((uint64_t)v63, (uint64_t)v10);
  swift_endAccess(&v60);
  v47 = sub_10002643C();
  Logger.logObject.getter(v47);
  v48 = sub_1000268E4();
  if (sub_10002642C(v48))
  {
    v49 = sub_10000797C(12);
    v50 = sub_10000797C(32);
    *(_QWORD *)&v63[0] = v50;
    v51 = sub_10002648C(4.8751e-34);
    v60 = sub_100006FCC(v51, v52, (uint64_t *)v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v3);
    sub_10000FF38();
    sub_10000E420();
    sub_10002640C((void *)&_mh_execute_header, v10, v53, "%{public}s: Activating PBItemCollection");
    sub_1000263F4(v50, v54, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v50);
    sub_100007958(v49);
  }
  else
  {
    sub_10000FF38();
  }

  v56 = sub_10000DBE4(v65, v65[3]);
  v57 = *(void **)(v4
                 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_collection);
  v58 = (_QWORD *)*v56;
  swift_retain_n(v4, 2);
  sub_100093084(v57, v58, v4);
  sub_1000269A0();
  sub_10002645C();
  return sub_100005988(v65);
}

#error "100016598: call analysis failed (funcsize=205)"

uint64_t sub_100016728(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = swift_retain_n(a1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100015F3C();
    v11 = sub_100006FCC(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "%{public}s: PBItemCollection item requests submitted", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  return Completion.callAsFunction(_:)(0);
}

uint64_t sub_1000168A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000259D0((_QWORD *)(v0
                         + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_state));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_collection));
  return v0;
}

uint64_t sub_10001690C()
{
  return sub_10001860C(sub_1000168A0);
}

uint64_t sub_100016918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = v6;
  v43 = a5;
  v44 = a6;
  v41 = a1;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v39 = *(_QWORD *)(v11 + 64);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v39 - v15;
  v17 = OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_completions;
  v18 = type metadata accessor for Completions();
  v19 = swift_allocObject(v18, 24, 7);
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v7 + v17) = v19;
  v20 = OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress;
  *(_QWORD *)(v7 + v20) = objc_msgSend((id)objc_opt_self(NSProgress), "discreteProgressWithTotalUnitCount:", 100);
  v21 = v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = -1;
  sub_100022838(a4, v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_id, type metadata accessor for PasteboardDataTransferID);
  v22 = v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_logger;
  v40 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v40 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v22, a1, v40);
  v23 = NSTemporaryDirectory();
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  URL.init(fileURLWithPath:)(v24, v26);
  swift_bridgeObjectRelease();
  v28 = UUID.uuidString.getter(v27);
  URL.appendingPathComponent(_:)(v28);
  v29 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v29);
  v30 = v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v31(v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v30, v10);
  v32 = *(unsigned __int8 *)(v11 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(&unk_100281EB0, v33 + v39, v32 | 7);
  v35 = v44;
  *(_QWORD *)(v34 + 16) = v43;
  *(_QWORD *)(v34 + 24) = v35;
  v31(v34 + v33, v16, v10);
  v36 = type metadata accessor for Completion();
  swift_allocObject(v36, 48, 7);
  swift_retain();
  v37 = Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100252B40, 179, (uint64_t)sub_100025778, v34);
  swift_retain();
  sub_1000C4E20((uint64_t)v37);
  swift_release();
  objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress), "publish");
  swift_release();
  swift_release();
  sub_1000255F0(a4, type metadata accessor for PasteboardDataTransferID);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v40);
  return v7;
}

void sub_100016C30(uint64_t a1, void (*a2)(_QWORD, unint64_t, id, uint64_t, id (*)(), uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  if (a1)
  {
    swift_errorRetain(a1);
    a2(0, 0xF000000000000000, 0, a1, 0, 0);
    swift_errorRelease(a1);
  }
  else
  {
    sub_1000078E0(0, &qword_1002AA678, PBSecurityScopedURLWrapper_ptr);
    v10 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v10((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
    v11 = sub_100016DBC((uint64_t)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), 0);
    v10((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
    v12 = *(unsigned __int8 *)(v8 + 80);
    v13 = (v12 + 16) & ~v12;
    v14 = swift_allocObject(&unk_100281ED8, v13 + v9, v12 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    a2(0, 0xF000000000000000, v11, 0, sub_10002580C, v14);
    swift_release();

  }
}

id sub_100016DBC(uint64_t a1, char a2)
{
  uint64_t v2;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v9 = objc_msgSend(v5, "initWithURL:readonly:", v7, a2 & 1);

  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  return v9;
}

id sub_100016E40()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v6;
  uint64_t v7;
  id v8;
  id v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSFileManager), "init");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v9 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v9);

  if (v4)
    return v9;
  v8 = v9;
  v6 = v9;
  v7 = _convertNSErrorToError(_:)(v8);

  swift_willThrow();
  return (id)swift_errorRelease(v7);
}

uint64_t sub_100016F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v9[6];

  swift_retain();
  sub_1000C4E20(a1);
  swift_release();
  v3 = OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress), "setCancellable:", 1);
  v4 = *(void **)(v1 + v3);
  v5 = swift_allocObject(&unk_100282040, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v9[4] = sub_10002598C;
  v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10000E610;
  v9[3] = &unk_100282058;
  v6 = _Block_copy(v9);
  v7 = v4;
  swift_retain();
  sub_10000AE54((uint64_t)sub_10002598C, v5);
  swift_release();
  objc_msgSend(v7, "setCancellationHandler:", v6);
  _Block_release(v6);

  return swift_release_n(v5, 2);
}

uint64_t sub_10001707C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  _BYTE v26[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v26, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v11 = result;
    v12 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v13 = static OS_dispatch_queue.main.getter(v12);
    v24 = v3;
    v14 = (void *)v13;
    aBlock[4] = sub_100025994;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E610;
    aBlock[3] = &unk_100282080;
    v15 = _Block_copy(aBlock);
    v23 = v6;
    v16 = v15;
    swift_retain();
    v17 = swift_release();
    static DispatchQoS.unspecified.getter(v17);
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100021264((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v19 = v18;
    v20 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
    sub_10002599C((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v2, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v16);
    _Block_release(v16);
    swift_release();

    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  }
  return result;
}

uint64_t sub_1000172B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = swift_retain_n(a1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    sub_1000174C0(v7);
    v17 = sub_100006FCC(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "%{public}s: Cancelled via NSProgress", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v10 = type metadata accessor for PasteboardAcquisitionError(0);
  sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
  v12 = swift_allocError(v10, v11, 0, 0);
  swift_storeEnumTagMultiPayload(v13, v10, 11);
  v14 = type metadata accessor for Completion();
  swift_allocObject(v14, 48, 7);
  v15 = Completion.init(file:line:)();
  sub_100017EDC(v12, (uint64_t)v15);
  swift_release();
  return swift_errorRelease(v12);
}

void sub_1000174C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;

  v1 = UUID.uuidString.getter(a1);
  v3 = sub_100026344(v1, v2);
  static String._fromSubstring(_:)(v3);
  sub_10000E410();
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._object = (void *)0x8000000100252D20;
  v5._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v5);
  sub_100026914();
}

void sub_10001753C(char a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned __int8 v32;
  _QWORD v33[2];

  v4 = v3;
  v33[1] = a3;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    sub_100022838(v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_id, (uint64_t)v17, type metadata accessor for PasteboardDataTransferID);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url, v7);
    v26 = type metadata accessor for ArchiveTransferDestination(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    swift_retain();
    sub_1000D539C();
    v28 = v27;
    sub_1000D5688();
    if (a2 >= 0x7FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = a2;
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress), "setTotalUnitCount:", v29);
    v30 = v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target;
    v31 = *(void **)(v4
                   + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target);
    *(_QWORD *)v30 = v28;
    v32 = *(_BYTE *)(v30 + 8);
    *(_BYTE *)(v30 + 8) = 0;
    swift_retain();
    sub_1000258E0(v31, v32);
    Completion.callAsFunction(_:)(0);
    swift_release();
  }
  else
  {
    swift_retain();
    v19 = sub_100017B14(v18);
    v20 = v19;
    if ((v21 & 1) != 0)
    {
      sub_100025938(v19, 1);
      sub_100025938(v20, 1);
      swift_retain();
      sub_1000C4E9C((uint64_t)v20);
      sub_100025944(v20, 1);
      swift_release();
      swift_errorRetain(v20);
      Completion.callAsFunction(_:)((uint64_t)v20);
      sub_100025944(v20, 1);
      sub_100025944(v20, 1);
      swift_errorRelease(v20);
    }
    else
    {
      v22 = v4 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target;
      v23 = *(void **)(v4
                     + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target);
      *(_QWORD *)v22 = v19;
      v24 = *(_BYTE *)(v22 + 8);
      *(_BYTE *)(v22 + 8) = 2;
      sub_100025938(v19, 0);
      v25 = v20;
      sub_1000258E0(v23, v24);
      Completion.callAsFunction(_:)(0);
      sub_100025944(v20, 0);
      sub_100025944(v20, 0);
    }
  }
}

void sub_100017878(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[11];

  if (a1)
  {
    v23 = a1;
    swift_errorRetain(a1);
    sub_1000E45AC((int)sub_100025958, a2, (int)sub_100026210, (int)v22, v4, v5, v6, v7, v22[0], (id)v22[1], v23, v24, v25, v26[0], v26[1], v26[2], v26[3], v26[4], v26[5],
      v26[6],
      v26[7],
      v26[8],
      v26[9],
      v26[10]);
    swift_errorRelease(a1);
  }
  else
  {
    v8 = swift_retain_n(a2, 2);
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v26[0] = v13;
      *(_DWORD *)v12 = 136446466;
      sub_1000174C0(v13);
      v25 = sub_100006FCC(v14, v15, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v12 + 4);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v25 = 0;
      v16 = sub_1000055B0(&qword_1002AA6B0);
      v17 = String.init<A>(describing:)(&v25, v16);
      v25 = sub_100006FCC(v17, v18, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v12 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "%{public}s: Archive transfer finished, error=%{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

  }
  v19 = a2 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target;
  v20 = *(void **)(a2
                 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target);
  v21 = *(unsigned __int8 *)(a2
                           + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target
                           + 8);
  if (*(_BYTE *)(a2
                + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target
                + 8))
  {
    if (v21 != 1)
      return;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 8) = -1;
    sub_100021990(v20, 1u);
    sub_1000258E0(v20, 1u);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 264))(a1);
  }
  else
  {
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(v19 + 8) = 1;
  }
  sub_1000258E0(v20, v21);
}

id sub_100017B14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  NSString v13;
  id v14;
  _BYTE v16[16];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v16[-v7];
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFileManager), "init");
  v10 = a1 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url;
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16);
  v12 = v11(v8, a1 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url, v2);
  URL.path.getter(v12);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "createFileAtPath:contents:attributes:", v13, 0, 0, swift_bridgeObjectRelease().n128_f64[0]);

  sub_1000078E0(0, &qword_1002AA6B8, NSFileHandle_ptr);
  v11(v6, v10, v2);
  v14 = sub_1000CF830((uint64_t)v6);
  swift_release();
  return v14;
}

#error "100017E94: call analysis failed (funcsize=141)"

void sub_100017EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  id v15;
  NSURL *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  int v34;
  unsigned __int8 v35;
  id v36;
  id v37;
  void *v38;
  unsigned __int8 v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id var60[14];

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    __chkstk_darwin(v8);
    *(&v43 - 2) = a1;
    swift_errorRetain(a1);
    sub_1000E45AC((int)sub_100025908, v2, (int)sub_10000B008, (int)(&v43 - 4), v11, v12, v13, v14, v43, v44, (uint64_t)var60[0], (uint64_t)var60[1], (uint64_t)var60[2], (uint64_t)var60[3], (uint64_t)var60[4], (uint64_t)var60[5], (uint64_t)var60[6], (uint64_t)var60[7], (uint64_t)var60[8],
      (uint64_t)var60[9],
      (uint64_t)var60[10],
      (uint64_t)var60[11],
      (uint64_t)var60[12],
      (uint64_t)var60[13]);
    v15 = objc_msgSend(objc_allocWithZone((Class)NSFileManager), "init");
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v2 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url, v6);
    URL._bridgeToObjectiveC()(v16);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    var60[0] = 0;
    v19 = objc_msgSend(v15, "removeItemAtURL:error:", v18, var60);

    v20 = var60[0];
    if (!v19)
    {
      v21 = v20;
      v22 = _convertNSErrorToError(_:)(v20);

      swift_willThrow(v23);
      swift_errorRelease(v22);
    }
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress), "cancel");
    swift_errorRelease(a1);
  }
  else
  {
    v24 = swift_retain_n(v2, 2);
    v25 = Logger.logObject.getter(v24);
    v27 = static os_log_type_t.default.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (void *)swift_slowAlloc(32, -1);
      var60[0] = v29;
      *(_DWORD *)v28 = 136446210;
      sub_1000174C0((uint64_t)v29);
      v43 = sub_100006FCC(v30, v31, (uint64_t *)var60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v28 + 4);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "%{public}s: Remote finished successfully", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
    }

  }
  swift_retain();
  sub_1000C4E20(a2);
  swift_release();
  v32 = v3 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target;
  v33 = *(void **)(v3
                 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target);
  v34 = *(unsigned __int8 *)(v3
                           + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target
                           + 8);
  if (*(_BYTE *)(v3
                + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target
                + 8))
  {
    if (v34 != 1)
    {
      if (v34 == 2)
      {
        var60[0] = 0;
        sub_100021990(v33, 2u);
        sub_100021990(v33, 2u);
        v35 = objc_msgSend(v33, "closeAndReturnError:", var60);
        v36 = var60[0];
        if ((v35 & 1) != 0)
        {
          v37 = var60[0];
          sub_1000258E0(v33, 2u);
        }
        else
        {
          v40 = var60[0];
          v41 = _convertNSErrorToError(_:)(v36);

          swift_willThrow(v42);
          sub_1000258E0(v33, 2u);
          swift_errorRelease(v41);
        }
        sub_1000258E0(v33, 2u);
      }
      goto LABEL_20;
    }
    if (v33)
    {
LABEL_20:
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 264))(a1);
      return;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 264))(a1);
    v38 = 0;
    v39 = 1;
  }
  else
  {
    if (a1)
    {
      swift_errorRetain(a1);
      sub_1000258F4(v33, 0);
      sub_1000D5FE8(a1);
      swift_errorRelease(a1);
    }
    else
    {
      sub_100021990(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target), 0);
    }
    v38 = *(void **)v32;
    *(_QWORD *)v32 = v33;
    v39 = *(_BYTE *)(v32 + 8);
    *(_BYTE *)(v32 + 8) = 1;
  }
  sub_1000258E0(v38, v39);
}

void sub_100018340(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;

  sub_100026640(a1, a2);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  sub_1000174C0(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_1000267B4();
  sub_100026914();
}

id sub_100018398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v13 = v8;
    *(_DWORD *)v7 = 136446210;
    sub_1000174C0(v8);
    v12 = sub_100006FCC(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v7 + 4);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "%{public}s: Receiver completed", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release_n(v1, 2);
  }

  swift_retain();
  sub_1000C4E9C(a1);
  swift_release();
  return objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress), "unpublish");
}

uint64_t sub_100018544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_id, type metadata accessor for PasteboardDataTransferID);
  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress));
  sub_1000258E0(*(void **)(v0 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target), *(_BYTE *)(v0+ OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_target+ 8));
  v3 = v0 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100018600()
{
  return sub_10001860C(sub_100018544);
}

uint64_t sub_10001860C(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

BOOL static DeviceMovementObserver.Status.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void DeviceMovementObserver.Status.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int DeviceMovementObserver.Status.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void sub_1000186A4(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100022838(v1 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_id, a1, type metadata accessor for PasteboardDataTransferID);
}

void sub_1000186D4(char a1, unint64_t a2, uint64_t a3)
{
  sub_10001753C(a1 & 1, a2, a3);
}

BOOL sub_1000186E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static DeviceMovementObserver.Status.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000186F0()
{
  char *v0;

  return DeviceMovementObserver.Status.hashValue.getter(*v0);
}

void sub_1000186F8(uint64_t a1)
{
  char *v1;

  DeviceMovementObserver.Status.hash(into:)(a1, *v1);
}

id sub_100018700(uint64_t a1, unint64_t a2, __int16 a3)
{
  id *v6;
  id v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString *v32;
  NSString *v33;
  Class v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString *v42;
  NSString *v43;
  Class isa;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v53;
  void *v54;
  id v55;
  _BYTE v56[72];
  _BYTE v57[72];
  _BYTE v58[72];

  v6 = (id *)&NSRTFDTextDocumentType;
  if ((a3 & 1) == 0)
    v6 = (id *)&NSRTFTextDocumentType;
  v7 = *v6;
  v8 = sub_1000055B0(&qword_1002AA688);
  inited = swift_initStackObject(v8, v58);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 32) = NSDocumentTypeDocumentOption;
  type metadata accessor for DocumentType(0);
  v11 = v10;
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 40) = v7;
  sub_10002517C(a1, a2);
  type metadata accessor for DocumentReadingOptionKey(0);
  v13 = v12;
  sub_100021264(&qword_1002AA690, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
  v15 = v14;
  v16 = NSDocumentTypeDocumentOption;
  v17 = v7;
  v18 = Dictionary.init(dictionaryLiteral:)(inited, v13, (char *)&type metadata for Any + 8, v15);
  v19 = objc_allocWithZone((Class)NSAttributedString);
  v20 = v18;
  v21 = v17;
  v22 = sub_10002086C(a1, a2, v20, 0);
  if (v53)
    goto LABEL_14;
  v23 = v22;
  v54 = v21;
  v24 = a3;
  v25 = objc_msgSend(v22, "length");
  v26 = sub_1000055B0(&qword_1002AA698);
  if ((v24 & 0x100) != 0)
  {
    v37 = swift_initStackObject(v26, v57);
    *(_OWORD *)(v37 + 16) = xmmword_10021BBA0;
    *(_QWORD *)(v37 + 64) = v11;
    *(_QWORD *)(v37 + 32) = NSDocumentTypeDocumentAttribute;
    *(_QWORD *)(v37 + 40) = NSRTFDTextDocumentType;
    type metadata accessor for DocumentAttributeKey(0);
    v39 = v38;
    sub_100021264((unint64_t *)&unk_1002AA6A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
    v41 = v40;
    v42 = NSDocumentTypeDocumentAttribute;
    v43 = NSRTFDTextDocumentType;
    Dictionary.init(dictionaryLiteral:)(v37, v39, (char *)&type metadata for Any + 8, v41);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v55 = 0;
    v45 = objc_msgSend(v23, "fileWrapperFromRange:documentAttributes:error:", 0, v25, isa, &v55, swift_bridgeObjectRelease().n128_f64[0]);

    v11 = v55;
    if (v45)
    {
      v46 = v55;
      v47 = sub_1000242E4(v45);
      v21 = v54;
      if (v48 >> 60 != 15)
      {
        v11 = (id)v47;

        return v11;
      }
      sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
      v49 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6742, 0xD000000000000016, 0x8000000100252E70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/PasteboardController_iOS.swift", 103, 2, 335);
      swift_willThrow(v49);

      goto LABEL_13;
    }
    v51 = v55;
    _convertNSErrorToError(_:)(v11);

LABEL_12:
    swift_willThrow(v50);
    v21 = v54;
LABEL_13:

LABEL_14:
    return v11;
  }
  v27 = swift_initStackObject(v26, v56);
  *(_OWORD *)(v27 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v27 + 64) = v11;
  *(_QWORD *)(v27 + 32) = NSDocumentTypeDocumentAttribute;
  *(_QWORD *)(v27 + 40) = NSRTFTextDocumentType;
  type metadata accessor for DocumentAttributeKey(0);
  v29 = v28;
  sub_100021264((unint64_t *)&unk_1002AA6A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
  v31 = v30;
  v32 = NSDocumentTypeDocumentAttribute;
  v33 = NSRTFTextDocumentType;
  Dictionary.init(dictionaryLiteral:)(v27, v29, (char *)&type metadata for Any + 8, v31);
  v34 = Dictionary._bridgeToObjectiveC()().super.isa;
  v55 = 0;
  v35 = objc_msgSend(v23, "dataFromRange:documentAttributes:error:", 0, v25, v34, &v55, swift_bridgeObjectRelease().n128_f64[0]);

  v36 = v55;
  if (!v35)
  {
    v11 = v36;
    _convertNSErrorToError(_:)(v36);

    goto LABEL_12;
  }
  v11 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);

  return v11;
}

uint64_t sub_100018B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a7;
  v27 = a8;
  v24 = a5;
  v25 = a6;
  v13 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(v8
           + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF25RTFRepresentationReceiver_converter) = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  sub_100022838(a4, (uint64_t)v15, type metadata accessor for PasteboardDataTransferID);
  v20 = v28;
  v21 = sub_100016918((uint64_t)v19, a2, a3, (uint64_t)v15, v26, v27);
  sub_1000255F0(a4, type metadata accessor for PasteboardDataTransferID);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  if (!v20)
    *(_WORD *)(v21
             + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF25RTFRepresentationReceiver_converter) = v24 & 1 | ((v25 & 1) << 8);
  return v21;
}

id sub_100018D04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  char *v7;
  __int16 v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (id)__chkstk_darwin(v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    sub_100018398(a1);
    return (id)swift_errorRelease(a1);
  }
  else
  {
    v8 = *(_WORD *)(v1
                  + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF25RTFRepresentationReceiver_converter);
    if (v8 == 2)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_url, v3);
      v9 = swift_retain();
      v10 = Data.init(contentsOf:options:)(v7, 0, v9);
      v12 = v11;
      v13 = sub_100018700(v10, v11, v8 & 0x101);
      v15 = v14;
      Data.write(to:options:)(v7, 1, v13, v14);
      sub_100022AEC((uint64_t)v13, v15);
      sub_100022AEC(v10, v12);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      swift_release();
      return sub_100018398(0);
    }
  }
  return result;
}

uint64_t sub_100018EB8()
{
  uint64_t v0;

  v0 = sub_100018544();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100018ED8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[24];
  uint64_t v157;
  _QWORD v158[5];

  sub_10002626C();
  v1 = (uint64_t)v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v146 = *v0;
  v14 = sub_1000262CC();
  v142 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v143 = v15;
  v150 = (uint64_t)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100026B20();
  v130 = *(_QWORD *)(v131 - 8);
  sub_1000262EC();
  __chkstk_darwin(v16);
  sub_10000E5DC();
  v129 = v17;
  sub_1000055B0(&qword_1002B1CD0);
  sub_10000E490();
  __chkstk_darwin(v18);
  sub_10000E5DC();
  v132 = v19;
  v134 = sub_100026B28();
  v133 = *(_QWORD *)(v134 - 8);
  sub_1000262EC();
  __chkstk_darwin(v20);
  sub_10000E5DC();
  v128 = v21;
  v137 = sub_100026774();
  v140 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  sub_100026A98();
  v148 = v22;
  __chkstk_darwin(v23);
  sub_100026A8C();
  sub_100026AFC(v24);
  v141 = v25;
  __chkstk_darwin(v26);
  sub_100026A8C();
  v149 = v27;
  v28 = sub_1000262F8();
  v138 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_100026A98();
  v147 = v29;
  v139 = v30;
  __chkstk_darwin(v31);
  sub_100026A8C();
  v136 = v32;
  v33 = sub_10000F6E4();
  v151 = *(_QWORD *)(v33 - 8);
  v152 = v33;
  sub_1000262EC();
  __chkstk_darwin(v34);
  sub_1000268BC();
  v37 = v35 - v36;
  __chkstk_darwin(v38);
  sub_100026A8C();
  v40 = v39;
  v144 = v7;
  v145 = v5;
  v41 = v7;
  v42 = v9;
  sub_100019A7C(0xD00000000000002FLL, 0x8000000100252B10, v41, v5, v9, v11, v3, v43, v119, v120, (uint64_t)v121, v122, v123, v124, v125, v126, v127, v128, v129,
    v130);
  v153 = v44;
  v154 = v13;
  v45 = v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
  sub_10000B2F8(v13 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, (uint64_t)v156, 0);
  sub_1000259FC(v45, (uint64_t)&v157, &qword_1002AA510);
  if (!v158[2])
  {
    sub_100025A28((uint64_t)&v157, &qword_1002AA510);
    goto LABEL_6;
  }
  v46 = sub_1000055B0((uint64_t *)&unk_1002AA520);
  if ((swift_dynamicCast(&v155, &v157, v46, v146, 6) & 1) == 0)
  {
LABEL_6:
    sub_1000269EC();
    sub_100019BA0(v37);
    sub_10000FF50();
    v68 = v154;
    v69 = swift_retain_n(v154, 4);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v11 = sub_10000797C(22);
      v72 = sub_10000797C(64);
      v155 = v72;
      *(_DWORD *)v11 = 136446466;
      v73 = PasteboardRepresentation.ID.label.getter(v72);
      v157 = sub_100006FCC(v73, v74, &v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v11 + 4);
      sub_10000F650(v68);
      sub_10000E420();
      *(_WORD *)(v11 + 12) = 2082;
      sub_1000259FC(v45, (uint64_t)&v157, &qword_1002AA510);
      v75 = sub_1000055B0(&qword_1002AA510);
      v76 = String.init<A>(describing:)(&v157, v75);
      v157 = sub_100006FCC(v76, v77, &v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v11 + 14);
      sub_10000F650(v68);
      sub_1000267C4();
      sub_100026A60((void *)&_mh_execute_header, v70, v71, "Pasteboard Representation %{public}s Missing iOS Context: %{public}s", (uint8_t *)v11);
      sub_100026A58(v72, v78, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v72);
      sub_100007958(v11);

    }
    else
    {

      swift_release_n(v68, 4);
    }
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v37, v152);
    v79 = sub_100026760();
    sub_100026A50(&qword_1002AA518, v80, type metadata accessor for PasteboardAcquisitionError);
    v82 = sub_1000264A0(v79, v81);
    sub_100026788(v82, v83);
    Completion.callAsFunction(_:)(v11);
    swift_errorRelease(v11);
    goto LABEL_17;
  }
  v48 = *(_QWORD *)(v155 + 40);
  v47 = *(_QWORD *)(v155 + 48);
  v146 = v155;
  sub_1000103C0();
  sub_1000269EC();
  v49 = v40;
  sub_100019BA0(v40);
  sub_10000FF50();
  v50 = v136;
  sub_100022838(v11, v136, type metadata accessor for PasteboardDataTransferID);
  v51 = sub_10002677C();
  v52 = Logger.logObject.getter(v51);
  v54 = static os_log_type_t.default.getter(v52, v53);
  v55 = sub_100026AC0(v52);
  v126 = v47;
  v125 = v48;
  if (v55)
  {
    v56 = sub_10000797C(22);
    LODWORD(v123) = v54;
    v57 = v56;
    v58 = sub_10000797C(64);
    v124 = v58;
    v157 = v58;
    *(_DWORD *)v57 = 136446466;
    v120 = v57 + 4;
    v121 = v52;
    v59 = UUID.uuidString.getter(v58);
    v61 = sub_100026344(v59, v60);
    v62 = static String._fromSubstring(_:)(v61);
    v122 = v49;
    v64 = v63;
    sub_10000E420();
    v155 = sub_100006FCC(v62, v64, &v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v120);
    sub_1000267C4();
    sub_1000255F0(v50, type metadata accessor for PasteboardDataTransferID);
    *(_WORD *)(v57 + 12) = 2082;
    sub_1000103C0();
    v155 = sub_100006FCC(v48, v47, &v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 14);
    swift_bridgeObjectRelease_n(v47, 3);
    v65 = v121;
    sub_100026A60((void *)&_mh_execute_header, v121, (os_log_type_t)v123, "Pasteboard Representation %{public}s Load: ty=%{public}s", (uint8_t *)v57);
    v66 = v124;
    sub_100026A58(v124, v67, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v66);
    sub_100007958(v57);

    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v122, v152);
  }
  else
  {
    sub_1000255F0(v50, type metadata accessor for PasteboardDataTransferID);

    sub_100026AF4(v47);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v49, v152);
  }
  v84 = v135;
  v85 = v134;
  v86 = v133;
  v87 = v132;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v88 = sub_100006FB4(v85, (uint64_t)qword_1002B6F70);
  sub_100026A74(v84, v88, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 16));
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v84, 0, 1, v85);
  v89 = v137;
  v90 = v84 + *(int *)(v137 + 20);
  *(_QWORD *)v90 = 0;
  *(_QWORD *)(v90 + 8) = 0;
  *(_WORD *)(v90 + 16) = 256;
  v91 = *(int *)(v89 + 24);
  *(_QWORD *)(v84 + v91) = 0;
  sub_1000259FC(v84, v87, &qword_1002B1CD0);
  v92 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v87, 1, v85);
  v127 = v1;
  if (v92 == 1)
  {
    sub_100025A28(v87, &qword_1002B1CD0);
  }
  else
  {
    v93 = v128;
    v94 = sub_1000269D4();
    v97 = sub_100026A74(v94, v95, v96);
    *(_QWORD *)v90 = "acquire_rep";
    *(_QWORD *)(v90 + 8) = 11;
    *(_WORD *)(v90 + 16) = 2;
    v98 = OSSignposter.logHandle.getter(v97);
    v99 = v129;
    OSSignpostID.init(log:)(v98);
    sub_1000269D4();
    sub_1000159C4();
    v101 = v100;
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v99, v131);
    sub_100026A08(v93, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
    swift_release();
    *(_QWORD *)(v84 + v91) = v101;
  }
  v102 = v145;
  v152 = HIBYTE(v145);
  v137 = HIWORD(v145);
  v136 = v145 >> 40;
  sub_100026AFC(HIDWORD(v145));
  v134 = v102 >> 24;
  v133 = v102 >> 16;
  v132 = v102 >> 8;
  v103 = v144;
  v131 = HIBYTE(v144);
  v130 = HIWORD(v144);
  v129 = v144 >> 40;
  v128 = HIDWORD(v144);
  v124 = v144 >> 24;
  v123 = v144 >> 16;
  v122 = v144 >> 8;
  v104 = v149;
  sub_100025588(v84, v149, type metadata accessor for SignpostInterval);
  v151 = *(_QWORD *)(v146 + 24);
  sub_100022838(v11, v147, type metadata accessor for PasteboardDataTransferID);
  sub_100022838(v104, v148, type metadata accessor for SignpostInterval);
  sub_100022838(v42, v150, type metadata accessor for PasteboardDataSession.ID);
  v105 = *(unsigned __int8 *)(v138 + 80);
  v106 = (v105 + 24) & ~v105;
  v107 = (v139 + v106 + 7) & 0xFFFFFFFFFFFFFFF8;
  v108 = (v107 + 15) & 0xFFFFFFFFFFFFFFF8;
  v109 = (v108 + 23) & 0xFFFFFFFFFFFFFFF8;
  v110 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8;
  v111 = *(unsigned __int8 *)(v140 + 80);
  v112 = (v111 + v110 + 8) & ~v111;
  v113 = *(unsigned __int8 *)(v142 + 80);
  v114 = (v141 + v113 + v112) & ~v113;
  v143 += v114;
  v115 = swift_allocObject(&unk_100281C08, v143 + 16, v105 | v111 | v113 | 7);
  *(_QWORD *)(v115 + 16) = v127;
  sub_100025588(v147, v115 + v106, type metadata accessor for PasteboardDataTransferID);
  *(_QWORD *)(v115 + v107) = v153;
  v116 = (_QWORD *)(v115 + v108);
  v117 = v126;
  *v116 = v125;
  v116[1] = v117;
  *(_QWORD *)(v115 + v109) = v146;
  *(_QWORD *)(v115 + v110) = v154;
  sub_100025588(v148, v115 + v112, type metadata accessor for SignpostInterval);
  sub_100025588(v150, v115 + v114, type metadata accessor for PasteboardDataSession.ID);
  v118 = (_BYTE *)(v115 + v143);
  *v118 = v103;
  v118[1] = v122;
  v118[2] = v123;
  v118[3] = v124;
  v118[4] = v128;
  v118[5] = v129;
  v118[6] = v130;
  v118[7] = v131;
  v118[8] = v102;
  v118[9] = v132;
  v118[10] = v133;
  v118[11] = v134;
  v118[12] = v135;
  v118[13] = v136;
  v118[14] = v137;
  v118[15] = v152;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100016014((uint64_t)sub_100022644, v115);
  swift_release();
  sub_1000269A0();
  sub_1000255F0(v149, type metadata accessor for SignpostInterval);
LABEL_17:
  swift_release();
  sub_10000E4E0();
}

void sub_100019A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  sub_10002626C();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = sub_1000262F8();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v32);
  v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022838(v27, (uint64_t)v35, type metadata accessor for PasteboardDataTransferID);
  v36 = *(unsigned __int8 *)(v33 + 80);
  v37 = (v36 + 24) & ~v36;
  v38 = (v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_100281D98, v39 + 16, v36 | 7);
  *(_QWORD *)(v40 + 16) = v23;
  sub_100025588((uint64_t)v35, v40 + v37, type metadata accessor for PasteboardDataTransferID);
  *(_QWORD *)(v40 + v38) = v25;
  v41 = (_QWORD *)(v40 + v39);
  *v41 = v31;
  v41[1] = v29;
  v42 = type metadata accessor for Completion();
  sub_1000088D8(v42, 48);
  sub_10002679C();
  sub_1000088D0();
  sub_1000103C0();
  Completion.init(file:line:body:)(0xD000000000000063, 0x8000000100252C60, 391, (uint64_t)sub_100025534, v40);
  sub_10000E4E0();
}

uint64_t sub_100019BA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = qword_1002A99A0;
  swift_retain();
  if (v2 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100006FB4(v3, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
  return swift_release();
}

void sub_100019C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  NSString v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t aBlock[6];

  v97 = a8;
  v104 = a3;
  v105 = a7;
  v101 = a6;
  v102 = a4;
  v103 = a5;
  v14 = type metadata accessor for PasteboardDataSession.ID(0);
  v96 = *(_QWORD **)(v14 - 8);
  v15 = v96[8];
  __chkstk_darwin(v14);
  v98 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SignpostInterval(0);
  v95 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v95 + 64);
  __chkstk_darwin(v16);
  v100 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PasteboardDataTransferID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = __chkstk_darwin(v18);
  __chkstk_darwin(v21);
  v99 = (unint64_t)&v80 - v22;
  v23 = type metadata accessor for Logger(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  if (a2)
  {
    swift_retain();
    swift_errorRetain(a2);
    sub_100019BA0((uint64_t)v27);
    v29 = swift_release();
    __chkstk_darwin(v29);
    *(&v80 - 2) = v102;
    swift_errorRetain(a2);
    sub_1000E1B48(sub_100022AA4, &v80 - 4, v27, a2);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    swift_errorRetain(a2);
    Completion.callAsFunction(_:)(a2);
    swift_errorRelease(a2);
    v30 = a2;
LABEL_3:
    swift_errorRelease(v30);
    return;
  }
  v31 = (char *)&v80 - v28;
  v92 = v24;
  v93 = v23;
  v88 = v19;
  v89 = v20;
  v90 = v17;
  v94 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v15;
  v32 = v101;
  swift_retain();
  sub_100019BA0((uint64_t)v31);
  swift_release();
  v33 = v102;
  v34 = v99;
  sub_100022838(v102, v99, type metadata accessor for PasteboardDataTransferID);
  v35 = swift_bridgeObjectRetain_n(v105, 2);
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.default.getter(v36, v37);
  if (os_log_type_enabled(v36, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v87 = v40;
    aBlock[0] = v40;
    *(_DWORD *)v39 = 136446466;
    v86 = v39 + 4;
    v41 = UUID.uuidString.getter(v40);
    v43 = sub_1000599D0(8, v41, v42);
    v44 = static String._fromSubstring(_:)(v43);
    v45 = v33;
    v47 = v46;
    swift_bridgeObjectRelease();
    v106 = sub_100006FCC(v44, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v86);
    swift_bridgeObjectRelease();
    sub_1000255F0(v34, type metadata accessor for PasteboardDataTransferID);
    *(_WORD *)(v39 + 12) = 2082;
    v48 = v105;
    swift_bridgeObjectRetain(v105);
    v106 = sub_100006FCC(v32, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, aBlock, v39 + 14);
    v49 = v48;
    v33 = v45;
    swift_bridgeObjectRelease_n(v49, 3);
    _os_log_impl((void *)&_mh_execute_header, v36, v38, "Pasteboard Provider %{public}s Activated: %{public}s", (uint8_t *)v39, 0x16u);
    v50 = v87;
    swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    (*(void (**)(char *, uint64_t))(v92 + 8))(v31, v93);
  }
  else
  {
    sub_1000255F0(v34, type metadata accessor for PasteboardDataTransferID);

    v51 = swift_bridgeObjectRelease_n(v105, 2);
    (*(void (**)(char *, uint64_t, __n128))(v92 + 8))(v31, v93, v51);
  }
  v52 = v91;
  v53 = v94;
  v54 = (uint64_t)v98;
  v55 = *(void **)(v97 + 32);
  v56 = String._bridgeToObjectiveC()();
  v57 = objc_msgSend(v55, "representationConformingToType:", v56);

  if (!v57)
  {
    v75 = type metadata accessor for PasteboardAcquisitionError(0);
    sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
    v77 = swift_allocError(v75, v76, 0, 0);
    v79 = v78;
    sub_100022838(a9 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_id, v78, type metadata accessor for PasteboardRepresentation.ID);
    swift_storeEnumTagMultiPayload(v79, v75, 1);
    Completion.callAsFunction(_:)(v77);
    v30 = v77;
    goto LABEL_3;
  }
  v102 = HIBYTE(a13);
  v98 = (char *)(a13 >> 40);
  v99 = HIWORD(a13);
  v97 = HIDWORD(a13);
  v92 = a13 >> 16;
  v93 = a13 >> 24;
  v91 = a13 >> 8;
  v87 = HIBYTE(a12);
  v86 = HIWORD(a12);
  v85 = a12 >> 40;
  v84 = HIDWORD(a12);
  v83 = a12 >> 24;
  v82 = a12 >> 16;
  v81 = a12 >> 8;
  sub_100022838(a10, v100, type metadata accessor for SignpostInterval);
  sub_100022838(a11, v54, type metadata accessor for PasteboardDataSession.ID);
  sub_100022838(v33, v53, type metadata accessor for PasteboardDataTransferID);
  v58 = *(unsigned __int8 *)(v95 + 80);
  v59 = (v58 + 16) & ~v58;
  v60 = (v90 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = *((unsigned __int8 *)v96 + 80);
  v62 = (v61 + v60 + 8) & ~v61;
  v63 = *(unsigned __int8 *)(v88 + 80);
  v64 = (v52 + v63 + v62) & ~v63;
  v65 = (v89 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
  v67 = swift_allocObject(&unk_100281CA8, v66 + 32, v58 | v61 | v63 | 7);
  v96 = v57;
  v68 = v54;
  v69 = v67;
  sub_100025588(v100, v67 + v59, type metadata accessor for SignpostInterval);
  *(_QWORD *)(v69 + v60) = v104;
  sub_100025588(v68, v69 + v62, type metadata accessor for PasteboardDataSession.ID);
  sub_100025588(v94, v69 + v64, type metadata accessor for PasteboardDataTransferID);
  *(_QWORD *)(v69 + v65) = v103;
  v70 = v69 + v66;
  v71 = v105;
  *(_QWORD *)v70 = v101;
  *(_QWORD *)(v70 + 8) = v71;
  *(_BYTE *)(v70 + 16) = a12;
  *(_BYTE *)(v70 + 17) = v81;
  *(_BYTE *)(v70 + 18) = v82;
  *(_BYTE *)(v70 + 19) = v83;
  *(_BYTE *)(v70 + 20) = v84;
  *(_BYTE *)(v70 + 21) = v85;
  *(_BYTE *)(v70 + 22) = v86;
  *(_BYTE *)(v70 + 23) = v87;
  *(_BYTE *)(v70 + 24) = a13;
  *(_BYTE *)(v70 + 25) = v91;
  *(_BYTE *)(v70 + 26) = v92;
  *(_BYTE *)(v70 + 27) = v93;
  *(_BYTE *)(v70 + 28) = v97;
  *(_BYTE *)(v70 + 29) = (_BYTE)v98;
  *(_BYTE *)(v70 + 30) = v99;
  *(_BYTE *)(v70 + 31) = v102;
  aBlock[4] = (uint64_t)sub_1000229B0;
  aBlock[5] = v69;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10001BA84;
  aBlock[3] = (uint64_t)&unk_100281CC0;
  v72 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v71);
  swift_retain();
  swift_release();
  v73 = v96;
  v74 = objc_msgSend(v96, "loadWithCompletionHandler:", v72);
  _Block_release(v72);

}

void sub_10001A474(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint8_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD v190[3];
  char v191[8];
  uint64_t v192;
  uint64_t v193[2];

  v188 = a7;
  v176 = a3;
  v184 = a1;
  v185 = a2;
  v187 = type metadata accessor for PasteboardAcquisitionError(0);
  __chkstk_darwin(v187);
  v20 = (char *)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for URL(0);
  v171 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v173 = (uint64_t)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PasteboardDataSession.ID(0);
  v180 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v182 = v23;
  v183 = (uint64_t)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PasteboardDataTransferID(0);
  v178 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v172 = (uint64_t)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v169 = (uint64_t)&v165 - v28;
  v29 = __chkstk_darwin(v27);
  v181 = (uint64_t)&v165 - v30;
  v179 = v31;
  __chkstk_darwin(v29);
  v177 = (void (*)(uint64_t, uint64_t))((char *)&v165 - v32);
  v33 = (_QWORD *)type metadata accessor for Logger(0);
  v189 = *(v33 - 1);
  v34 = __chkstk_darwin(v33);
  v174 = (uint64_t)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v170 = (uint64_t)&v165 - v37;
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v165 - v39;
  __chkstk_darwin(v38);
  v42 = (char *)&v165 - v41;
  v43 = *(uint8_t **)(a8 + 16);
  if (a5)
  {
    swift_retain();
    sub_10001B688(a5, a6, a9);
    sub_10000B02C(a5, a6);
  }
  v186 = v43;
  v44 = a11;
  if (a4)
  {
    swift_errorRetain(a4);
    swift_retain();
    sub_100019BA0((uint64_t)v42);
    v45 = swift_release();
    __chkstk_darwin(v45);
    *(&v165 - 2) = a10;
    swift_errorRetain(a4);
    sub_1000E1B48(sub_100025274, &v165 - 4, v42, a4);
    (*(void (**)(char *, _QWORD *))(v189 + 8))(v42, v33);
    sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
    v46 = v187;
    v48 = swift_allocError(v187, v47, 0, 0);
    v50 = v49;
    swift_getErrorValue(a4, v191, v190);
    *v50 = Error.localizedDescription.getter(v190[1], v190[2]);
    v50[1] = v51;
    swift_storeEnumTagMultiPayload(v50, v46, 3);
    Completion.callAsFunction(_:)(v48);
    swift_errorRelease(v48);
    v52 = a4;
LABEL_5:
    swift_errorRelease(v52);
    goto LABEL_20;
  }
  v53 = sub_1001A4E0C(a10, a9);
  swift_unknownObjectRelease(v53);
  if (v53)
  {
    v54 = v187;
    swift_storeEnumTagMultiPayload(v20, v187, 8);
    swift_retain();
    sub_100019BA0((uint64_t)v42);
    v55 = swift_release();
    v56 = __chkstk_darwin(v55);
    *(&v165 - 4) = a10;
    *(&v165 - 3) = a12;
    *(&v165 - 2) = a13;
    __chkstk_darwin(v56);
    *(&v165 - 2) = (uint64_t)v20;
    sub_1000E45AC((int)sub_100022B54, v57, (int)sub_10002620C, (int)(&v165 - 4), v58, v59, v60, v61, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175,
      (uint64_t)v176,
      (uint64_t)v177,
      v178,
      v179,
      v180);
    (*(void (**)(char *, _QWORD *))(v189 + 8))(v42, v33);
    sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
    v63 = swift_allocError(v54, v62, 0, 0);
    sub_100022838((uint64_t)v20, v64, type metadata accessor for PasteboardAcquisitionError);
    Completion.callAsFunction(_:)(v63);
    swift_errorRelease(v63);
    sub_1000255F0((uint64_t)v20, type metadata accessor for PasteboardAcquisitionError);
    goto LABEL_20;
  }
  v168 = a10;
  v167 = a9;
  v65 = v185;
  if (v185 >> 60 == 15)
  {
    if (!v176)
    {
      swift_retain();
      v130 = v170;
      sub_100019BA0(v170);
      swift_release();
      v131 = v169;
      sub_100022838(v168, v169, type metadata accessor for PasteboardDataTransferID);
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v133, v134))
      {
        v135 = (uint8_t *)swift_slowAlloc(12, -1);
        v136 = swift_slowAlloc(32, -1);
        v193[0] = v136;
        v185 = a11;
        *(_DWORD *)v135 = 136446210;
        v186 = v135 + 4;
        v137 = UUID.uuidString.getter(v136);
        v139 = sub_1000599D0(8, v137, v138);
        v140 = static String._fromSubstring(_:)(v139);
        v141 = v131;
        v143 = v142;
        swift_bridgeObjectRelease();
        v192 = sub_100006FCC(v140, v143, v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v186);
        swift_bridgeObjectRelease();
        sub_1000255F0(v141, type metadata accessor for PasteboardDataTransferID);
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Pasteboard Provider %{public}s Opened With No URL or Data", v135, 0xCu);
        swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v135, -1, -1);

        (*(void (**)(uint64_t, _QWORD *))(v189 + 8))(v170, v33);
      }
      else
      {
        sub_1000255F0(v131, type metadata accessor for PasteboardDataTransferID);

        (*(void (**)(uint64_t, _QWORD *))(v189 + 8))(v130, v33);
      }
      sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
      v161 = v187;
      v163 = swift_allocError(v187, v162, 0, 0);
      swift_storeEnumTagMultiPayload(v164, v161, 9);
      Completion.callAsFunction(_:)(v163);
      v52 = v163;
      goto LABEL_5;
    }
    v170 = a14;
    v187 = a15;
    v185 = a11;
    v66 = v176;
    v67 = objc_msgSend(v66, "url");
    v68 = v173;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v67);

    LODWORD(v184) = URL.startAccessingSecurityScopedResource()();
    v177 = *(void (**)(uint64_t, uint64_t))(v171 + 8);
    v177(v68, v175);
    swift_retain();
    v69 = v174;
    sub_100019BA0(v174);
    swift_release();
    v70 = v172;
    sub_100022838(v168, v172, type metadata accessor for PasteboardDataTransferID);
    v71 = v66;
    v72 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.default.getter(v72, v73);
    v75 = v74;
    if (os_log_type_enabled(v72, v74))
    {
      v76 = swift_slowAlloc(28, -1);
      v77 = swift_slowAlloc(64, -1);
      v171 = v77;
      v193[0] = v77;
      *(_DWORD *)v76 = 136446723;
      LODWORD(v169) = v75;
      v78 = UUID.uuidString.getter(v77);
      v80 = sub_1000599D0(8, v78, v79);
      v81 = static String._fromSubstring(_:)(v80);
      v166 = v72;
      v82 = v70;
      v83 = v71;
      v84 = v81;
      v86 = v85;
      swift_bridgeObjectRelease();
      v192 = sub_100006FCC(v84, v86, v193);
      v176 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v76 + 4);
      swift_bridgeObjectRelease();
      sub_1000255F0(v82, type metadata accessor for PasteboardDataTransferID);
      *(_WORD *)(v76 + 12) = 1024;
      v87 = objc_msgSend(v83, "isReadonly");

      LODWORD(v192) = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, (char *)&v192 + 4, v76 + 14);

      *(_WORD *)(v76 + 18) = 2081;
      v88 = objc_msgSend(v83, "url");
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v88);

      sub_100021264(&qword_1002AA530, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      v89 = v175;
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v175, v90);
      v93 = v92;
      v177(v68, v89);
      v192 = sub_100006FCC(v91, v93, v193);
      v71 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v76 + 20);

      swift_bridgeObjectRelease();
      v94 = v166;
      _os_log_impl((void *)&_mh_execute_header, v166, (os_log_type_t)v169, "Pasteboard Provider %{public}s Open URL (readonly=%{BOOL}d): %{private}s", (uint8_t *)v76, 0x1Cu);
      v95 = v171;
      swift_arrayDestroy(v171, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v76, -1, -1);

      (*(void (**)(uint64_t, id))(v189 + 8))(v174, v176);
    }
    else
    {

      sub_1000255F0(v70, type metadata accessor for PasteboardDataTransferID);
      (*(void (**)(uint64_t, _QWORD *))(v189 + 8))(v69, v33);
    }
    v144 = (uint64_t)v186;
    v145 = objc_msgSend(v71, "url", swift_retain().n128_f64[0]);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v145);

    v146 = v168;
    v147 = v181;
    sub_100022838(v168, v181, type metadata accessor for PasteboardDataTransferID);
    v148 = type metadata accessor for PasteboardFileDataProvider(0);
    swift_allocObject(v148, *(unsigned int *)(v148 + 48), *(unsigned __int16 *)(v148 + 52));
    PasteboardFileDataProvider.init(controller:url:id:)();
    v189 = v149;
    v150 = v167;
    sub_100024AA4(v149, v146, v167, v144);
    sub_100022838(v146, v147, type metadata accessor for PasteboardDataTransferID);
    v151 = v183;
    sub_100022838(v150, v183, type metadata accessor for PasteboardDataSession.ID);
    v152 = *(unsigned __int8 *)(v178 + 80);
    v153 = (v152 + 40) & ~v152;
    v154 = *(unsigned __int8 *)(v180 + 80);
    v155 = v71;
    v156 = (v179 + v154 + v153) & ~v154;
    v157 = (v182 + v156 + 7) & 0xFFFFFFFFFFFFFFF8;
    v158 = swift_allocObject(&unk_100281D20, v157 + 8, v152 | v154 | 7);
    *(_BYTE *)(v158 + 16) = v184 & 1;
    *(_QWORD *)(v158 + 24) = v155;
    *(_QWORD *)(v158 + 32) = v144;
    sub_100025588(v147, v158 + v153, type metadata accessor for PasteboardDataTransferID);
    sub_100025588(v151, v158 + v156, type metadata accessor for PasteboardDataSession.ID);
    *(_QWORD *)(v158 + v157) = v185;
    v159 = type metadata accessor for Completion();
    swift_allocObject(v159, 48, 7);
    swift_retain();
    swift_retain();
    v160 = v155;
    Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100252B40, 477, (uint64_t)sub_100025110, v158);
    sub_1000BC138();

    swift_release();
    swift_release();
  }
  else
  {
    v170 = a14;
    v187 = a15;
    swift_retain();
    v96 = v184;
    sub_100025168(v184, v65);
    sub_100019BA0((uint64_t)v40);
    swift_release();
    v97 = v168;
    v98 = v177;
    sub_100022838(v168, (uint64_t)v177, type metadata accessor for PasteboardDataTransferID);
    sub_10002517C(v96, v65);
    v99 = sub_10002517C(v96, v65);
    v100 = Logger.logObject.getter(v99);
    v102 = static os_log_type_t.default.getter(v100, v101);
    if (os_log_type_enabled(v100, v102))
    {
      v103 = swift_slowAlloc(22, -1);
      v104 = swift_slowAlloc(32, -1);
      v176 = v33;
      v105 = v104;
      v193[0] = v104;
      *(_DWORD *)v103 = 136446466;
      v175 = v103 + 4;
      v106 = UUID.uuidString.getter(v104);
      v108 = sub_1000599D0(8, v106, v107);
      v109 = (uint64_t)v98;
      v110 = static String._fromSubstring(_:)(v108);
      v112 = v111;
      swift_bridgeObjectRelease();
      v192 = sub_100006FCC(v110, v112, v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v175);
      v44 = a11;
      v65 = v185;
      swift_bridgeObjectRelease();
      sub_1000255F0(v109, type metadata accessor for PasteboardDataTransferID);
      *(_WORD *)(v103 + 12) = 2048;
      v113 = Data.count.getter(v184, v65);
      sub_100022AD8(v184, v65);
      v192 = v113;
      v96 = v184;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, v193, v103 + 14);
      sub_100022AD8(v96, v65);
      _os_log_impl((void *)&_mh_execute_header, v100, v102, "Pasteboard Provider %{public}s Data (%ld bytes)", (uint8_t *)v103, 0x16u);
      swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1, -1);
      v114 = v103;
      v97 = v168;
      swift_slowDealloc(v114, -1, -1);

      (*(void (**)(char *, id))(v189 + 8))(v40, v176);
    }
    else
    {
      sub_100022AD8(v96, v65);
      sub_1000255F0((uint64_t)v98, type metadata accessor for PasteboardDataTransferID);
      sub_100022AD8(v96, v65);

      (*(void (**)(char *, _QWORD *))(v189 + 8))(v40, v33);
    }
    v115 = v97;
    v116 = v97;
    v117 = v181;
    sub_100022838(v115, v181, type metadata accessor for PasteboardDataTransferID);
    v118 = type metadata accessor for PasteboardDataProvider(0);
    swift_allocObject(v118, *(unsigned int *)(v118 + 48), *(unsigned __int16 *)(v118 + 52));
    sub_100025168(v96, v65);
    v119 = (uint64_t)v186;
    swift_retain();
    PasteboardDataProvider.init(controller:data:id:)();
    v189 = v120;
    v121 = v167;
    sub_100024418(v120, v116, v167, v119);
    sub_100022838(v116, v117, type metadata accessor for PasteboardDataTransferID);
    v122 = v183;
    sub_100022838(v121, v183, type metadata accessor for PasteboardDataSession.ID);
    v123 = *(unsigned __int8 *)(v178 + 80);
    v124 = (v123 + 24) & ~v123;
    v125 = *(unsigned __int8 *)(v180 + 80);
    v126 = (v179 + v125 + v124) & ~v125;
    v127 = (v182 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    v128 = swift_allocObject(&unk_100281D48, v127 + 8, v123 | v125 | 7);
    *(_QWORD *)(v128 + 16) = v119;
    sub_100025588(v117, v128 + v124, type metadata accessor for PasteboardDataTransferID);
    sub_100025588(v122, v128 + v126, type metadata accessor for PasteboardDataSession.ID);
    *(_QWORD *)(v128 + v127) = v44;
    v129 = type metadata accessor for Completion();
    swift_allocObject(v129, 48, 7);
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100252B40, 460, (uint64_t)sub_10002521C, v128);
    sub_1000BB124();
    swift_release();
    swift_release();
    sub_100022AD8(v184, v185);
  }
LABEL_20:
  sub_10001B548(v188);
}

void sub_10001B548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignposter(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000259FC(a1, (uint64_t)v4, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_100025A28((uint64_t)v4, &qword_1002B1CD0);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v9 = type metadata accessor for SignpostInterval(0);
  if ((*(_BYTE *)(a1 + *(int *)(v9 + 20) + 17) & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + *(int *)(v9 + 24)))
  {
LABEL_8:
    __break(1u);
    return;
  }
  sub_100015D8C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10001B688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  _QWORD *v11;
  void (*v12)(_QWORD *);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  _BYTE v20[24];

  v7 = type metadata accessor for PasteboardDataSession.ID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022838(a3, (uint64_t)v9, v10);
  swift_beginAccess(v3 + 56, v20, 33, 0);
  v12 = sub_10001BC74(v19, (uint64_t)v9);
  if (*v11)
  {
    v13 = v11;
    v14 = swift_allocObject(&unk_100281D70, 32, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a2;
    swift_retain();
    sub_1000CA69C();
    v15 = *(_QWORD *)(*v13 + 16);
    sub_1000CA73C(v15);
    v16 = *v13;
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = v16 + 16 * v15;
    *(_QWORD *)(v17 + 32) = sub_1000252CC;
    *(_QWORD *)(v17 + 40) = v14;
  }
  ((void (*)(_QWORD *, _QWORD))v12)(v19, 0);
  swift_endAccess(v20);
  sub_1000255F0((uint64_t)v9, type metadata accessor for PasteboardDataSession.ID);
}

uint64_t sub_10001B7B8(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  uint64_t v12;

  v12 = sub_100026640(a1, a2);
  v2._object = (void *)0x8000000100252C00;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  v4 = UUID.uuidString.getter(v3);
  v6 = sub_100026344(v4, v5);
  v7 = static String._fromSubstring(_:)(v6);
  v9 = v8;
  sub_10000E420();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  sub_10000E50C();
  sub_1000267B4();
  return v12;
}

uint64_t sub_10001B84C(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;

  v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(40, 2);
  v5._object = (void *)0x8000000100252C00;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  v7 = UUID.uuidString.getter(v6);
  v9 = sub_1000599D0(8, v7, v8);
  v10 = static String._fromSubstring(_:)(v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100252C40;
  v14._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v14);
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  return v18;
}

uint64_t sub_10001B94C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1001A4FD8();
  swift_unknownObjectRelease(v2);
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_10001B994(uint64_t a1, char a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v10 = objc_msgSend(a3, "url");
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL.stopAccessingSecurityScopedResource()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v11 = sub_1001A4FD8();
  swift_unknownObjectRelease(v11);
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_10001BA84(uint64_t a1, void *a2, void *a3, void *a4, const void *a5)
{
  void *v8;
  void (*v9)(void *, unint64_t, void *, void *, void *, uint64_t);
  id v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;

  v8 = a2;
  v9 = *(void (**)(void *, unint64_t, void *, void *, void *, uint64_t))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v10 = v8;
    v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    swift_retain();
    v12 = 0xF000000000000000;
  }
  v13 = _Block_copy(a5);
  if (v13)
  {
    v14 = swift_allocObject(&unk_100281CF8, 24, 7);
    *(_QWORD *)(v14 + 16) = v13;
    v13 = sub_100022B4C;
  }
  else
  {
    v14 = 0;
  }
  v15 = a3;
  v16 = a4;
  v9(v8, v12, a3, a4, v13, v14);

  sub_10000B02C((uint64_t)v13, v14);
  sub_100022AD8((uint64_t)v8, v12);
  return swift_release();
}

uint64_t sub_10001BB94()
{
  uint64_t v0;

  sub_100026600();
  sub_1000265F8();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001BBC0()
{
  uint64_t v0;

  sub_10001BB94();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_10001BBE0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

void sub_10001BBEC()
{
  sub_100018ED8();
}

uint64_t variable initialization expression of PasteboardController_iOS.dataSessionCleanupHandlers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000262CC();
  v1 = sub_1000055B0(&qword_1002A99B0);
  sub_100021264(&qword_1002A99B8, 255, type metadata accessor for PasteboardDataSession.ID);
  return sub_1000265E0((uint64_t)_swiftEmptyArrayStorage, v0, v1, v2);
}

void (*sub_10001BC74(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for PasteboardDataSession.ID(0);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_100022838(a2, (uint64_t)v6, type metadata accessor for PasteboardDataSession.ID);
  v4[5] = sub_100022B60(v4, (uint64_t)v6);
  return sub_10001BD00;
}

void sub_10001BD00(_QWORD *a1)
{
  void *v1;
  void *v2;

  sub_100026680(a1);
  sub_1000255F0((uint64_t)v2, type metadata accessor for PasteboardDataSession.ID);
  free(v2);
  sub_100026300(v1);
}

void (*sub_10001BD34())(_QWORD *a1)
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_100026954();
  v2 = malloc(0x30uLL);
  *v1 = v2;
  v2[4] = v0;
  sub_1000103C0();
  v3 = (_QWORD *)sub_1000269D4();
  v2[5] = sub_100022C54(v3, v4);
  return sub_10001BD84;
}

void sub_10001BD84(_QWORD *a1)
{
  void *v1;

  sub_100026680(a1);
  sub_10000E420();
  sub_100026300(v1);
}

_QWORD *sub_10001BDA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000262CC();
  sub_1000088D0();
  v4 = sub_1000055B0(&qword_1002A99B0);
  sub_100021264(&qword_1002A99B8, 255, type metadata accessor for PasteboardDataSession.ID);
  *(_QWORD *)(v1 + 56) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v3, v4, v5);
  sub_10000B348();
  return sub_1001A6FA0(a1);
}

uint64_t sub_10001BE34()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
}

void PasteboardController_iOS.deinit()
{
  uint64_t v0;

  v0 = _BasePasteboardController.deinit();
  sub_1000269BC(v0);
  sub_1000050D4();
}

uint64_t PasteboardController_iOS.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = _BasePasteboardController.deinit();
  sub_1000269BC(v1);
  return swift_deallocClassInstance(v0, 64, 7);
}

void sub_10001BE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  _BOOL8 v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10002626C();
  v2 = v1;
  sub_1000262CC();
  sub_10000E490();
  __chkstk_darwin(v3);
  sub_10002641C();
  v6 = v5 - v4;
  v7 = sub_10000F6E4();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100026500();
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v9 = sub_100006FB4(v7, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v0, v9, v7);
  sub_100022838(v2, v6, type metadata accessor for PasteboardDataSession.ID);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  v14 = os_log_type_enabled(v11, v13);
  if (v14)
  {
    v15 = (uint8_t *)sub_10000797C(12);
    v24 = sub_10000797C(32);
    *(_DWORD *)v15 = 136446210;
    v16 = PasteboardDataSession.ID.label.getter();
    v18 = sub_100026754(v16, v17);
    v19 = sub_1000267E4(v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v21);
    v22 = sub_10000E420();
    sub_1000268B4(v22, type metadata accessor for PasteboardDataSession.ID);
    sub_100026484((void *)&_mh_execute_header, v11, v13, "Session %{public}s Begin", v15);
    sub_1000263F4(v24, v23, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v24);
    sub_100007958((uint64_t)v15);
  }
  else
  {
    sub_1000268B4(v14, type metadata accessor for PasteboardDataSession.ID);
  }

  sub_100026A84(v0, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  sub_1001A48AC();
  sub_100026464();
  sub_1001AA928((uint64_t)_swiftEmptyArrayStorage, v2);
  sub_100026860();
  sub_10000E4E0();
}

void sub_10001C094()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  _BOOL8 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10002626C();
  v3 = v2;
  sub_1000262CC();
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_1000268BC();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - v9;
  v11 = sub_10000F6E4();
  sub_1000267FC();
  __chkstk_darwin(v12);
  sub_10002671C();
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - v14;
  sub_100026464();
  v16 = sub_1001A9F90();
  sub_100026860();
  if (v16)
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v17 = sub_100006FB4(v11, (uint64_t)qword_1002B7198);
    sub_100026A00((uint64_t)v15, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    sub_100022838(v3, (uint64_t)v10, type metadata accessor for PasteboardDataSession.ID);
    Logger.logObject.getter(v18);
    v19 = sub_1000268E4();
    v20 = os_log_type_enabled(v1, v19);
    if (v20)
    {
      v49 = v0;
      v21 = (uint8_t *)sub_10000797C(12);
      v22 = sub_10000797C(32);
      v50 = v22;
      v48 = v11;
      *(_DWORD *)v21 = 136446210;
      v23 = PasteboardDataSession.ID.label.getter();
      v25 = sub_100026754(v23, v24);
      v26 = sub_1000267E4(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27, v28);
      v29 = sub_10000E420();
      sub_1000268B4(v29, type metadata accessor for PasteboardDataSession.ID);
      sub_100026484((void *)&_mh_execute_header, v1, v19, "Session %{public}s End", v21);
      sub_1000263F4(v22, v30, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v22);
      sub_100007958((uint64_t)v21);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v48);
    }
    else
    {
      sub_1000268B4(v20, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(char *, uint64_t))(v0 + 8))(v15, v11);
    }
    v44 = *(_QWORD *)(v16 + 16);
    if (v44)
    {
      v45 = v16 + 40;
      do
      {
        v46 = *(void (**)(uint64_t))(v45 - 8);
        v47 = sub_1000088D0();
        v46(v47);
        sub_10000B348();
        v45 += 16;
        --v44;
      }
      while (v44);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v31 = sub_100006FB4(v11, (uint64_t)qword_1002B7198);
    sub_100026A00((uint64_t)v1, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    sub_100022838(v3, v7, type metadata accessor for PasteboardDataSession.ID);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (sub_100026AC0(v33))
    {
      v35 = (uint8_t *)sub_10000797C(12);
      v36 = sub_10000797C(32);
      v50 = v36;
      v49 = v0;
      *(_DWORD *)v35 = 136446210;
      v37 = PasteboardDataSession.ID.label.getter();
      v39 = sub_100026754(v37, v38);
      v40 = sub_1000267CC(v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v42);
      sub_10000E420();
      sub_1000255F0(v7, type metadata accessor for PasteboardDataSession.ID);
      sub_100026484((void *)&_mh_execute_header, v33, v34, "Pasteboard Data Session %{public}s Not Open", v35);
      sub_1000263F4(v36, v43, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v36);
      sub_100007958((uint64_t)v35);

      (*(void (**)(NSObject *, uint64_t))(v49 + 8))(v1, v11);
    }
    else
    {
      sub_1000255F0(v7, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(NSObject *, uint64_t))(v0 + 8))(v1, v11);
    }
  }
  sub_10000E4E0();
}

#error "10001C53C: call analysis failed (funcsize=172)"

uint64_t sub_10001C70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100026760();
  sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
  sub_1000264A0(v0, v1);
  v2 = sub_100026B30();
  sub_100022838(v2, v3, type metadata accessor for PasteboardAcquisitionError);
  return v0;
}

void sub_10001C778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34[4];
  uint64_t v35;
  _QWORD v36[5];
  uint64_t v37;

  sub_10002626C();
  v2 = v1;
  v4 = v3;
  v5 = sub_10000F6E4();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000268CC();
  v7 = v2 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context;
  sub_10000B2F8(v2 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_context, (uint64_t)&v37, 0);
  sub_1000259FC(v7, (uint64_t)v36, &qword_1002AA510);
  if (v36[3])
  {
    sub_1000259FC((uint64_t)v36, (uint64_t)&v33, &qword_1002AA510);
    v8 = sub_1000055B0((uint64_t *)&unk_1002AA520);
    v9 = type metadata accessor for PasteboardContext_iOS();
    if (swift_dynamicCast(&v35, &v33, v8, v9, 0))
    {
      sub_100018ED8();
      sub_10002645C();
      sub_100005988(&v33);
      goto LABEL_11;
    }
    sub_100005988(&v33);
  }
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v10 = sub_100006FB4(v5, (uint64_t)qword_1002B7198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v0, v10, v5);
  v11 = swift_retain_n(v2, 4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (sub_100026840(v13))
  {
    v14 = sub_10000797C(22);
    v32 = sub_10000797C(64);
    v35 = v32;
    *(_DWORD *)v14 = 136446466;
    v33 = 0x3A47415244;
    v34[0] = 0xE500000000000000;
    v15 = sub_10000E440();
    sub_100026A50(&qword_1002AA670, v16, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v33 = sub_100006FCC(v33, v34[0], &v35);
    sub_100026B3C(v33, (uint64_t)v34, v19, v14 + 12);
    sub_10000F650(v2);
    sub_10000E420();
    *(_WORD *)(v14 + 12) = 2082;
    sub_1000259FC(v7, (uint64_t)&v33, &qword_1002AA510);
    v20 = sub_1000055B0(&qword_1002AA510);
    v21 = String.init<A>(describing:)(&v33, v20);
    v33 = sub_100026B14(v21, v22);
    sub_100026B3C(v33, (uint64_t)v34, v23, v14 + 22);
    sub_10000F650(v2);
    sub_10000E420();
    sub_100026A60((void *)&_mh_execute_header, v12, v4, "Pasteboard Representation %{public}s Missing Context: %{public}s", (uint8_t *)v14);
    sub_100026A58(v32, v24, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v32);
    sub_100007958(v14);

  }
  else
  {

    swift_release_n(v2, 4);
  }
  v25 = sub_1000269E0();
  v26(v25);
  v27 = sub_100026760();
  sub_100026A50(&qword_1002AA518, v28, type metadata accessor for PasteboardAcquisitionError);
  v30 = sub_1000264A0(v27, v29);
  sub_100026788(v30, v31);
  Completion.callAsFunction(_:)(v5);
  swift_errorRelease(v5);
LABEL_11:
  sub_100025A28((uint64_t)v36, &qword_1002AA510);
  sub_10000E4E0();
}

void sub_10001CAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_1000262F8();
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  ObjectType = swift_getObjectType(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  v13 = sub_1001A4FD8();
  swift_unknownObjectRelease(v13);
  sub_1000255F0(v11, type metadata accessor for PasteboardDataTransferID);
  v14 = sub_100026760();
  sub_100021264(&qword_1002AA518, 255, type metadata accessor for PasteboardAcquisitionError);
  v16 = sub_1000264A0(v14, v15);
  sub_100022838(v3, v17, type metadata accessor for PasteboardAcquisitionError);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(v16, v1, ObjectType, v5);
  swift_errorRelease(v16);
  sub_10000E4E0();
}

void sub_10001CC00()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  sub_10002626C();
  v1 = v0;
  v2 = sub_100024344(v0);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBMetadataSuggestedNameKey);
    sub_100041C44(v4, v5, v3, &v23);
    sub_10000E50C();
    v6 = sub_1000267C4();
    if (*((_QWORD *)&v24 + 1))
    {
      sub_1000266E4(v6, v7, v8, (uint64_t)&type metadata for String);
      goto LABEL_6;
    }
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  sub_100025A28((uint64_t)&v23, &qword_1002B34C0);
LABEL_6:
  v9 = sub_100024344(v1);
  if (!v9)
  {
    v23 = 0u;
    v24 = 0u;
    goto LABEL_13;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBMetadataPreferredPresentationStyleKey);
  sub_100041C44(v11, v12, v10, &v23);
  sub_1000267C4();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_13:
    sub_100025A28((uint64_t)&v23, &qword_1002B34C0);
    goto LABEL_14;
  }
  if ((sub_1000266E4(v13, v14, v15, (uint64_t)&type metadata for Int) & 1) == 0)
  {
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  if (v22 == 1)
    v16 = 1;
  else
    v16 = 2 * (v22 == 2);
LABEL_15:
  v17 = objc_msgSend(v1, "availableTypes");
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  __chkstk_darwin(v19);
  sub_10001DF34(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000255BC);
  swift_bridgeObjectRelease();
  sub_10000E50C();
  v20 = type metadata accessor for PasteboardItem();
  sub_1000088D8(v20, 32);
  v21 = sub_100026B30();
  PasteboardItem.init(representations:presentationStyle:)(v21, v16);
  sub_10000E4E0();
}

uint64_t sub_10001CDF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7, uint64_t a8, char *a9, char *a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __n128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  NSString v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char *v98;
  char v99;
  uint64_t v100;
  char *v101;
  uint64_t (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  uint64_t v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  id v144;
  uint64_t v145;
  char *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167[5];
  uint64_t v168;
  uint64_t v169;

  v150 = a8;
  v147 = a7;
  v160 = a6;
  v157 = a5;
  v148 = a4;
  v159 = a1;
  v12 = type metadata accessor for PasteboardRepresentation.ID(0);
  __chkstk_darwin(v12);
  v149 = (uint64_t)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v152 = (char *)&v144 - v15;
  __chkstk_darwin(v16);
  v153 = (uint64_t)&v144 - v17;
  v18 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v18);
  v146 = (char *)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (uint64_t)&v144 - v21;
  __chkstk_darwin(v23);
  v154 = (uint64_t)&v144 - v24;
  __chkstk_darwin(v25);
  v27 = (uint64_t)&v144 - v26;
  v28 = type metadata accessor for UTType(0);
  v166 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v164 = (char *)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v144 - v31;
  __chkstk_darwin(v33);
  v165 = (char *)&v144 - v34;
  __chkstk_darwin(v35);
  v156 = (char *)&v144 - v36;
  v163 = type metadata accessor for Logger(0);
  v37 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v151 = (char *)&v144 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)&v144 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v144 - v43;
  __chkstk_darwin(v45);
  v47 = (uint64_t *)((char *)&v144 - v46);
  if (qword_1002A98B8 != -1)
    goto LABEL_62;
  while (1)
  {
    sub_10006DC80(a2, a3, (_QWORD *)qword_1002B6FA0);
    if ((v48 & 1) != 0)
    {
      if (qword_1002A99A0 != -1)
        swift_once(&qword_1002A99A0, sub_1001A6F18);
      v49 = v163;
      v50 = sub_100006FB4(v163, (uint64_t)qword_1002B7198);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v37 + 16))(v47, v50, v49);
      v51 = swift_bridgeObjectRetain_n(a3, 2);
      v52 = Logger.logObject.getter(v51);
      v54 = static os_log_type_t.default.getter(v52, v53);
      if (os_log_type_enabled(v52, v54))
      {
        v55 = swift_slowAlloc(32, -1);
        v166 = swift_slowAlloc(32, -1);
        v167[0] = v166;
        *(_DWORD *)v55 = 134218498;
        v168 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v55 + 4);
        *(_WORD *)(v55 + 12) = 2048;
        v168 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v55 + 14);
        *(_WORD *)(v55 + 22) = 2082;
        swift_bridgeObjectRetain();
        v168 = sub_100006FCC(a2, a3, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v55 + 24);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v52, v54, "pasteboard item: item=%ld rep=%ld type=%{public}s skipped, disallowed type", (uint8_t *)v55, 0x20u);
        v56 = v166;
        swift_arrayDestroy(v166, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v47, v49);
      return 0;
    }
    v162 = v28;
    v57 = String._bridgeToObjectiveC()();
    v58 = objc_msgSend(v160, "visibilityForType:", v57);

    if (v58)
    {
      if (qword_1002A99A0 != -1)
        swift_once(&qword_1002A99A0, sub_1001A6F18);
      v59 = v163;
      v60 = sub_100006FB4(v163, (uint64_t)qword_1002B7198);
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v44, v60, v59);
      v61 = swift_bridgeObjectRetain_n(a3, 2);
      v62 = Logger.logObject.getter(v61);
      v64 = static os_log_type_t.default.getter(v62, v63);
      if (os_log_type_enabled(v62, v64))
      {
        v65 = swift_slowAlloc(42, -1);
        v166 = swift_slowAlloc(64, -1);
        v167[0] = v166;
        *(_DWORD *)v65 = 134218754;
        v168 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v65 + 4);
        *(_WORD *)(v65 + 12) = 2048;
        v168 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v65 + 14);
        v161 = v37;
        *(_WORD *)(v65 + 22) = 2082;
        swift_bridgeObjectRetain();
        v168 = sub_100006FCC(a2, a3, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v65 + 24);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v65 + 32) = 2082;
        NSItemProviderRepresentationVisibility.description.getter((uint64_t)v58);
        v168 = sub_100006FCC(v66, v67, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v65 + 34);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v62, v64, "pasteboard item: item=%ld rep=%ld type=%{public}s skipped, disallowed visibility=%{public}s", (uint8_t *)v65, 0x2Au);
        v68 = v166;
        swift_arrayDestroy(v166, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v65, -1, -1);

        (*(void (**)(char *, uint64_t))(v161 + 8))(v44, v163);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v59);
      }
      return 0;
    }
    swift_bridgeObjectRetain();
    UTType.init(_:)(a2, a3);
    v28 = v162;
    v69 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v27, 1, v162);
    v158 = a3;
    if (v69 == 1)
    {
      sub_100025A28(v27, &qword_1002AA5F0);
    }
    else
    {
      v72 = v166;
      v73 = v156;
      v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v166 + 32))(v156, v27, v28);
      v75 = v165;
      static UTType.fileURL.getter(v74);
      v76 = UTType.conforms(to:)(v75);
      v77 = *(void (**)(char *, uint64_t))(v72 + 8);
      v77(v75, v28);
      if ((v76 & 1) != 0)
      {
        if (qword_1002A99A0 != -1)
          swift_once(&qword_1002A99A0, sub_1001A6F18);
        v78 = v163;
        v79 = sub_100006FB4(v163, (uint64_t)qword_1002B7198);
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v41, v79, v78);
        v80 = v156;
        v81 = (*(uint64_t (**)(char *, char *, uint64_t))(v166 + 16))(v32, v156, v28);
        v82 = Logger.logObject.getter(v81);
        v84 = static os_log_type_t.default.getter(v82, v83);
        if (os_log_type_enabled(v82, v84))
        {
          v85 = swift_slowAlloc(32, -1);
          v166 = swift_slowAlloc(32, -1);
          v167[0] = v166;
          *(_DWORD *)v85 = 134218498;
          v168 = v157;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v85 + 4);
          *(_WORD *)(v85 + 12) = 2048;
          v168 = v159;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v85 + 14);
          *(_WORD *)(v85 + 22) = 2082;
          v161 = v37;
          sub_100021264(&qword_1002AA5F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UTType);
          v86 = v162;
          v88 = dispatch thunk of CustomStringConvertible.description.getter(v162, v87);
          v168 = sub_100006FCC(v88, v89, v167);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v85 + 24);
          v90 = swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t, __n128))v77)(v32, v86, v90);
          _os_log_impl((void *)&_mh_execute_header, v82, v84, "pasteboard item: item=%ld rep=%ld type=%{public}s skipped", (uint8_t *)v85, 0x20u);
          v91 = v166;
          swift_arrayDestroy(v166, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v85, -1, -1);

          (*(void (**)(char *, uint64_t))(v161 + 8))(v41, v163);
          v92 = v156;
          v93 = v86;
        }
        else
        {

          v77(v32, v28);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v78);
          v92 = v80;
          v93 = v28;
        }
        v77(v92, v93);
        return 0;
      }
      v77(v73, v28);
      a3 = v158;
    }
    v94 = String._bridgeToObjectiveC()();
    v144 = objc_msgSend(v160, "preferredRepresentationForType:", v94);

    swift_bridgeObjectRetain();
    v95 = v154;
    UTType.init(_:)(a2, a3);
    sub_1000259FC(v95, v22, &qword_1002AA5F0);
    v96 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v22, 1, v28);
    v161 = v37;
    v145 = a2;
    if (v96 == 1)
      break;
    v44 = (char *)UTType.supertypes.getter();
    v156 = *(char **)(v166 + 8);
    ((void (*)(uint64_t, uint64_t))v156)(v22, v28);
    v32 = (char *)*((_QWORD *)v44 + 2);
    if (!v32)
    {
      swift_bridgeObjectRelease();
      v156 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_40;
    }
    v167[0] = (uint64_t)_swiftEmptyArrayStorage;
    v47 = v167;
    sub_100058678();
    v27 = sub_10019D15C((uint64_t)v44);
    v41 = v98;
    v22 = v99 & 1;
    v155 = v44 + 56;
    while ((v27 & 0x8000000000000000) == 0 && v27 < 1 << v44[32])
    {
      if (((*(_QWORD *)&v155[((unint64_t)v27 >> 3) & 0xFFFFFFFFFFFFF8] >> v27) & 1) == 0)
        goto LABEL_60;
      if (*((_DWORD *)v44 + 9) != (_DWORD)v41)
        goto LABEL_61;
      v101 = v165;
      v100 = v166;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v165, *((_QWORD *)v44 + 6) + *(_QWORD *)(v166 + 72) * v27, v28);
      v102 = *(uint64_t (**)(char *, char *, uint64_t))(v100 + 32);
      v103 = v164;
      v104 = v102(v164, v101, v28);
      v105 = UTType.identifier.getter(v104);
      a2 = v106;
      ((void (*)(char *, uint64_t))v156)(v103, v28);
      v47 = (uint64_t *)v167[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v167[0]) & 1) == 0)
      {
        sub_100058678();
        v47 = (uint64_t *)v167[0];
      }
      v107 = v47[2];
      if (v107 >= (unint64_t)v47[3] >> 1)
      {
        sub_100058678();
        v47 = (uint64_t *)v167[0];
      }
      v47[2] = v107 + 1;
      v108 = &v47[2 * v107];
      v108[4] = v105;
      v108[5] = a2;
      v109 = sub_10019D074(v27, v41, v22 & 1, v44);
      v27 = v109;
      v41 = (char *)v110;
      v22 = v111 & 1;
      --v32;
      v37 = v161;
      v28 = v162;
      a3 = v158;
      if (!v32)
      {
        v156 = (char *)v47;
        sub_100025618(v109, v110, v111 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    swift_once(&qword_1002A98B8, sub_1000E7E68);
  }
  sub_100025A28(v22, &qword_1002AA5F0);
  v156 = 0;
LABEL_40:
  v112 = v163;
  v114 = (uint64_t)v152;
  v113 = v153;
  v115 = v151;
  v164 = a9;
  v165 = a10;
  UUID.init()(v97);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v116 = sub_100006FB4(v112, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v115, v116, v112);
  sub_100022838(v113, v114, type metadata accessor for PasteboardRepresentation.ID);
  v117 = swift_bridgeObjectRetain_n(a3, 4);
  v118 = Logger.logObject.getter(v117);
  v120 = static os_log_type_t.default.getter(v118, v119);
  if (os_log_type_enabled(v118, v120))
  {
    v121 = swift_slowAlloc(68, -1);
    v122 = swift_slowAlloc(96, -1);
    v167[0] = v122;
    *(_DWORD *)v121 = 134219522;
    v168 = v157;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 4);
    *(_WORD *)(v121 + 12) = 2048;
    v168 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 14);
    *(_WORD *)(v121 + 22) = 2082;
    swift_bridgeObjectRetain();
    v123 = v145;
    v168 = sub_100006FCC(v145, a3, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 24);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v121 + 32) = 1024;
    swift_bridgeObjectRetain();
    v124 = (uint64_t)v146;
    v125 = v123;
    v126 = v162;
    UTType.init(_:)(v125, a3);
    v127 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v124, 1, v126);
    if ((_DWORD)v127 == 1)
    {
      sub_100025A28(v124, &qword_1002AA5F0);
      swift_bridgeObjectRelease();
      v128 = 0;
    }
    else
    {
      v129 = UTType.isPublic.getter(v127);
      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v124, v126);
      swift_bridgeObjectRelease();
      v128 = v129 & 1;
    }
    LODWORD(v168) = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, (char *)&v168 + 4, v121 + 34);
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 38) = 2048;
    v168 = (uint64_t)v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 40);
    *(_WORD *)(v121 + 48) = 2082;
    v130 = (uint64_t)v152;
    if ((_BYTE)v147)
    {
      if (v147 == 1)
        v131 = 0x656E696C6E69;
      else
        v131 = 0x656D686361747461;
      if (v147 == 1)
        v132 = 0xE600000000000000;
      else
        v132 = 0xEA0000000000746ELL;
    }
    else
    {
      v132 = 0xE700000000000000;
      v131 = 0x6E776F6E6B6E75;
    }
    v168 = sub_100006FCC(v131, v132, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 50);
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 58) = 2082;
    v134 = PasteboardRepresentation.ID.label.getter(v133);
    v168 = sub_100006FCC(v134, v135, v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v121 + 60);
    swift_bridgeObjectRelease();
    sub_1000255F0(v130, type metadata accessor for PasteboardRepresentation.ID);
    _os_log_impl((void *)&_mh_execute_header, v118, v120, "pasteboard item: item=%ld rep=%ld type=%{public}s public=%{BOOL}d preferred=%lu style=%{public}s rep-id=%{public}s", (uint8_t *)v121, 0x44u);
    swift_arrayDestroy(v122, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    swift_slowDealloc(v121, -1, -1);

    (*(void (**)(char *, uint64_t))(v161 + 8))(v151, v163);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 4);
    sub_1000255F0(v114, type metadata accessor for PasteboardRepresentation.ID);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v115, v112);
  }
  v136 = type metadata accessor for PasteboardContext_iOS();
  v137 = (_QWORD *)swift_allocObject(v136, 56, 7);
  v138 = v150;
  v137[2] = v148;
  v137[3] = v138;
  v139 = v160;
  v140 = v145;
  v137[4] = v160;
  v137[5] = v140;
  v137[6] = a3;
  v141 = v153;
  sub_100022838(v153, v149, type metadata accessor for PasteboardRepresentation.ID);
  v167[4] = (uint64_t)&off_100281B98;
  v167[3] = v136;
  v167[0] = (uint64_t)v137;
  v142 = type metadata accessor for PasteboardRepresentation(0);
  swift_allocObject(v142, *(unsigned int *)(v142 + 48), *(unsigned __int16 *)(v142 + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n(a3, 2);
  swift_retain();
  swift_retain();
  v143 = v139;
  v70 = PasteboardRepresentation.init(id:order:typeIdentifier:superTypes:name:context:)();
  sub_1000255F0(v141, type metadata accessor for PasteboardRepresentation.ID);
  sub_100025A28(v154, &qword_1002AA5F0);
  return v70;
}

void *sub_10001DF34(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  void *result;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  result = &_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    v7 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain(*v7);
      v10 = a2(v6, v8, v9);
      v11 = swift_bridgeObjectRelease(v9);
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v14);
      }
      ++v6;
      v7 += 2;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

id sub_10001E04C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  sub_100026954();
  swift_weakInit(&v0[OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_dataSession], 0);
  v2 = (uint64_t)&v0[OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger];
  v3 = *(_QWORD *)(sub_10000F6E4() - 8);
  sub_100026A74(v2, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v4 = sub_1000269D4();
  swift_weakAssign(v4, v5);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for PasteboardItemProvider_iOS(0);
  v6 = objc_msgSendSuper2(&v8, "init");
  sub_10002645C();
  sub_100026A08(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return v6;
}

id sub_10001E104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(uint64_t *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  id result;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89[2];
  id (*v90)(uint64_t, void *);
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  char v95[24];
  char v96[64];
  uint64_t v97;

  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_100026500();
  v5 = type metadata accessor for UTType(0);
  sub_100026AFC(*(_QWORD *)(v5 - 8));
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_100026738();
  __chkstk_darwin(v7);
  v9 = (char *)&v79 - v8;
  v86 = objc_msgSend(objc_allocWithZone((Class)PBItem), "init");
  v10 = sub_1000055B0(&qword_1002AA680);
  inited = swift_initStackObject(v10, v96);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBMetadataPreferredPresentationStyleKey);
  *(_QWORD *)(inited + 40) = v12;
  sub_10000B2F8(a1 + 16, (uint64_t)v95, 0);
  v13 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = v13;
  v14 = (uint64_t *)&type metadata for String;
  v15 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v97 = v15;
  v16 = *(_QWORD *)(a1 + 24);
  if (v16 < 0 || (v16 & 0x4000000000000000) != 0)
  {
    sub_10002677C();
    sub_100057E14(v16);
    v17 = v33;
    sub_10000E410();
  }
  else
  {
    v17 = v16 & 0xFFFFFFFFFFFFFF8;
    sub_10002677C();
  }
  v89[0] = v17;
  sub_100023878(v89);
  sub_10000E410();
  v18 = v89[0];
  v89[0] = (uint64_t)_swiftEmptyArrayStorage;
  v84 = v18;
  v85 = v9;
  v81 = v1;
  if (v18 < 0 || (v18 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v19 = _CocoaArrayWrapper.endIndex.getter(v34);
  }
  else
  {
    v19 = *(_QWORD *)(v18 + 16);
    swift_retain();
  }
  v20 = (uint64_t)&OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name;
  v83 = v19;
  if (v19)
  {
    if (v19 < 1)
      goto LABEL_78;
    v21 = 0;
    v22 = v84 & 0xC000000000000001;
    do
    {
      if (v22)
      {
        v23 = sub_100026AD0(v21);
        v24 = v23;
      }
      else
      {
        v24 = *(_QWORD *)(v84 + 8 * v21 + 32);
        v23 = sub_10002679C();
      }
      if (*(_QWORD *)(v24 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name + 8))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(v89[0] + 16));
        v25 = sub_1000269E0();
        v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v26);
        specialized ContiguousArray._endMutation()(v27);
      }
      else
      {
        sub_1000269A0();
      }
      ++v21;
    }
    while (v83 != v21);
    sub_1000266D8();
    v19 = v89[0];
    if (v89[0] < 0)
    {
LABEL_27:
      v35 = sub_1000103C0();
      v29 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v35);
      sub_10002645C();
      if (!v29)
        goto LABEL_28;
      goto LABEL_22;
    }
  }
  else
  {
    sub_1000266D8();
    v19 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_27;
  }
  if ((v19 & 0x4000000000000000) != 0)
    goto LABEL_27;
  v29 = *(uint64_t **)(v19 + 16);
  if (!v29)
  {
LABEL_28:
    sub_10002645C();
    goto LABEL_29;
  }
LABEL_22:
  sub_10013DB94(0, (v19 & 0xC000000000000001) == 0, v19, v28);
  if ((v19 & 0xC000000000000001) != 0)
    goto LABEL_79;
  v29 = *(uint64_t **)(v19 + 32);
  sub_1000088D0();
  sub_10002645C();
  v30 = *(uint64_t *)((char *)v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name);
  v19 = *(uint64_t *)((char *)v29 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_name + 8);
  sub_1000103C0();
  sub_10000B348();
  if (v19)
    goto LABEL_24;
LABEL_29:
  sub_1000243AC(v15, v86);
  v94[0] = &_swiftEmptySetSingleton;
  if (v83)
  {
    if (v83 >= 1)
    {
      v82 = v84 & 0xC000000000000001;
      v79 = v84 + 32;
      swift_retain();
      v15 = 0;
      v14 = &OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier;
      v80 = v2;
      do
      {
        if (v82)
        {
          v20 = sub_100026AD0(v15);
        }
        else
        {
          v20 = *(_QWORD *)(v84 + 8 * v15 + 32);
          sub_100026AE4();
        }
        v36 = (uint64_t *)(v20 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
        sub_1000269F4();
        UTType.init(_:)(v19, v29);
        sub_10002680C(v2);
        if (v68)
        {
          sub_100025A28(v2, &qword_1002AA5F0);
        }
        else
        {
          v37 = v87;
          v38 = v2;
          v39 = (uint64_t *)v85;
          v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 32))(v85, v38, v5);
          v41 = v81;
          static UTType.rtf.getter(v40);
          v29 = v39;
          v42 = UTType.conforms(to:)(v41);
          v43 = *(void (**)(uint64_t *, uint64_t))(v37 + 8);
          v44 = sub_100026694();
          if ((v42 & 1) != 0)
          {
            v45 = static UTType.flatRTFD.getter(v44);
            UTType.identifier.getter(v45);
            sub_100026694();
            v46 = sub_100026998();
            v47 = sub_10000E420();
            static UTType.flatRTFD.getter(v47);
            v48 = sub_10001EDE0();
            v50 = v49;
            sub_100026694();
            v92 = v48;
            v93 = v50;
            sub_100026658((uint64_t)_NSConcreteStackBlock);
            v90 = sub_10001EA50;
            v29 = (uint64_t *)sub_100026590((uint64_t)&unk_100281FB8);
            v51 = swift_release();
            sub_100026398(v51, "v2_addRepresentationType:preferredRepresentation:loader:");
            sub_10000F7A8();

          }
          v43(v39, v5);
          v2 = v80;
          v14 = &OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier;
        }
        ++v15;
        sub_1000269F4();
        v52 = sub_100026998();
        sub_10000E420();
        v53 = sub_1000088D8((uint64_t)&unk_100281DE8, 24);
        sub_100026904(v53);
        v54 = sub_1000088D8((uint64_t)&unk_100281F28, 32);
        v55 = v88;
        *(_QWORD *)(v54 + 16) = v29;
        *(_QWORD *)(v54 + 24) = v55;
        sub_100026BA8(v54, (uint64_t)sub_100026230);
        sub_100026658((uint64_t)_NSConcreteStackBlock);
        v90 = sub_10001EA50;
        sub_100026590((uint64_t)&unk_100281F40);
        v56 = v55;
        v57 = sub_1000269A0();
        sub_100026398(v57, "v2_addRepresentationType:preferredRepresentation:loader:");
        sub_10000F7A8();

        v19 = *v36;
        v58 = v36[1];
        swift_bridgeObjectRetain();
        v29 = v94;
        sub_10011953C(v89, v19, v58);
        sub_100026AEC();
        sub_100026B7C();
      }
      while (v83 != v15);
      v19 = v84;
      sub_10002645C();
      v59 = 0;
      v60 = (_QWORD *)v83;
      while (1)
      {
        if (v82)
        {
          v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v19);
        }
        else
        {
          if (v59 >= *(_QWORD *)(v19 + 16))
            goto LABEL_77;
          v20 = *(_QWORD *)(v79 + 8 * v59);
          sub_100026AE4();
        }
        v5 = *(_QWORD *)(v20 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_superTypes);
        v88 = *(uint64_t **)(v5 + 16);
        if (v88)
          break;
        sub_100026AEC();
LABEL_72:
        if ((_QWORD *)++v59 == v60)
        {
          sub_10002645C();
          goto LABEL_75;
        }
      }
      v81 = v59;
      sub_100026AFC(v5 + 32);
      swift_bridgeObjectRetain();
      v14 = 0;
      v85 = (char *)v5;
      while (1)
      {
        if ((unint64_t)v14 >= *(_QWORD *)(v5 + 16))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          v29 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
          sub_10002645C();
          v78 = (uint64_t *)((char *)v29 + *(_QWORD *)v20);
          v30 = *v78;
          v19 = v78[1];
          sub_1000103C0();
          swift_unknownObjectRelease(v29);
          if (!v19)
            goto LABEL_29;
LABEL_24:
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(PBMetadataSuggestedNameKey);
          v91 = v14;
          v89[0] = v30;
          v89[1] = v19;
          v29 = &v97;
          sub_100005410((uint64_t)v89, v31, v32);
          v15 = v97;
          goto LABEL_29;
        }
        v61 = (uint64_t *)(v87 + 16 * (_QWORD)v14);
        v62 = *v61;
        v63 = v61[1];
        v19 = v94[0];
        if (!*(_QWORD *)(v94[0] + 16))
          break;
        v15 = (uint64_t)v56;
        v56 = (uint64_t *)v20;
        Hasher.init(_seed:)(v89, *(_QWORD *)(v94[0] + 40));
        swift_bridgeObjectRetain();
        sub_1000103C0();
        String.hash(into:)(v89, v62, v63);
        v64 = Hasher._finalize()();
        v5 = -1 << *(_BYTE *)(v19 + 32);
        v20 = v64 & ~v5;
        v60 = (_QWORD *)(v19 + 56);
        sub_100026B68();
        if ((v65 & 1) == 0)
          goto LABEL_67;
        v2 = *(_QWORD *)(v19 + 48);
        v66 = (uint64_t *)(v2 + 16 * v20);
        v67 = v66[1];
        v68 = *v66 == v62 && v67 == v63;
        if (!v68 && (sub_100026850(*v66, v67) & 1) == 0)
        {
          v5 = ~v5;
          while (1)
          {
            v20 = (v20 + 1) & v5;
            sub_100026B68();
            if ((v69 & 1) == 0)
              break;
            v70 = (uint64_t *)(v2 + 16 * v20);
            v71 = v70[1];
            v72 = *v70 == v62 && v71 == v63;
            if (v72 || (sub_100026850(*v70, v71) & 1) != 0)
              goto LABEL_57;
          }
LABEL_67:
          sub_10000E410();
          sub_100026B48();
LABEL_68:
          v19 = (uint64_t)String._bridgeToObjectiveC()();
          v73 = sub_1000088D8((uint64_t)&unk_100281DE8, 24);
          sub_100026904(v73);
          v74 = sub_1000088D8((uint64_t)&unk_100281F78, 32);
          *(_QWORD *)(v74 + 16) = v60;
          *(_QWORD *)(v74 + 24) = v56;
          sub_100026BA8(v74, (uint64_t)sub_100026230);
          sub_100026658((uint64_t)_NSConcreteStackBlock);
          v90 = sub_10001EA50;
          sub_100026590((uint64_t)&unk_100281F90);
          v2 = v93;
          v75 = v56;
          v76 = swift_release();
          sub_100026398(v76, "v2_addRepresentationType:preferredRepresentation:loader:");
          sub_10000F7A8();

          v60 = v94;
          sub_10011953C(v89, v62, v63);
          sub_100026B7C();
          goto LABEL_69;
        }
LABEL_57:
        swift_bridgeObjectRelease();
        sub_10000E410();
        sub_100026B48();
LABEL_69:
        v14 = (uint64_t *)((char *)v14 + 1);
        if (v14 == v88)
        {
          sub_100026AEC();
          swift_bridgeObjectRelease();
          v19 = v84;
          v60 = (_QWORD *)v83;
          v59 = v81;
          goto LABEL_72;
        }
      }
      swift_bridgeObjectRetain();
      goto LABEL_68;
    }
    __break(1u);
    result = (id)swift_release();
    __break(1u);
  }
  else
  {
    sub_1000266D8();
LABEL_75:
    swift_bridgeObjectRelease();
    return v86;
  }
  return result;
}

id sub_10001EA50(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(void (*)(uint64_t, unint64_t, uint64_t, void *, void *, uint64_t), uint64_t, __n128);
  void *v3;
  uint64_t v4;
  __n128 v5;
  void *v6;

  v2 = *(uint64_t (**)(void (*)(uint64_t, unint64_t, uint64_t, void *, void *, uint64_t), uint64_t, __n128))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject(&unk_100281FF0, 24, 7);
  *(_QWORD *)(v4 + 16) = v3;
  v5 = swift_retain();
  v6 = (void *)v2(sub_10002589C, v4, v5);
  swift_release();
  swift_release();
  return v6;
}

void sub_10001EACC(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *v10;
  Class isa;
  _QWORD v13[6];

  v10 = a4;
  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (!v10)
      goto LABEL_6;
    goto LABEL_5;
  }
  isa = 0;
  if (a4)
LABEL_5:
    v10 = (void *)_convertErrorToNSError(_:)(v10);
LABEL_6:
  if (a5)
  {
    v13[4] = a5;
    v13[5] = a6;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10000E610;
    v13[3] = &unk_100282008;
    a5 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  (*(void (**)(uint64_t, Class, uint64_t, void *, void *))(a7 + 16))(a7, isa, a3, v10, a5);
  _Block_release(a5);

}

uint64_t sub_10001EBC8(void (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v6 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    *(_QWORD *)(swift_allocObject(&unk_100281F00, 24, 7) + 16) = a4;
    swift_retain();
    v9 = a4;
    sub_10001F4A0();
    v11 = v10;
    swift_release_n(v8, 2);
    swift_release();
  }
  else
  {
    a1(0, 0xF000000000000000, 0, 0, 0, 0);
    return 0;
  }
  return v11;
}

uint64_t sub_10001ECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v9 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  __chkstk_darwin(v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v15 + 16))(v14, a5 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger);
  v17 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  UUID.init()(v16);
  v20 = type metadata accessor for RepresentationReceiver(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  swift_retain();
  return sub_100016918((uint64_t)v14, v18, v19, (uint64_t)v11, a3, a4);
}

uint64_t sub_10001EDE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[11];
  uint64_t v64;
  uint64_t v65;

  sub_10002626C();
  v64 = v2;
  v65 = v3;
  v59 = (void *)v0;
  v57 = v4;
  v6 = v5;
  v58 = sub_10000F6E4();
  v61 = *(_QWORD *)(v58 - 8);
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10000E5DC();
  v60 = v8;
  sub_1000055B0(&qword_1002AA5F0);
  sub_10000E490();
  __chkstk_darwin(v9);
  sub_100026518();
  v10 = type metadata accessor for UTType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100026738();
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v56 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v56 - v19;
  v21 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
  v22 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
  swift_bridgeObjectRetain();
  UTType.init(_:)(v21, v22);
  sub_10002680C(v0);
  if (!v23)
  {
    v61 = v6;
    v36 = v59;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32))(v20, v0, v10);
    ((void (*)(uint64_t))static UTType.rtf.getter)(v37);
    v38 = sub_100026A68();
    sub_10002635C((uint64_t)v18);
    v39 = *(uint64_t (**)(char *))(v11 + 16);
    v40 = v57;
    v41 = v39(v15);
    if ((v38 & 1) != 0)
    {
      ((void (*)(uint64_t))static UTType.flatRTFD.getter)(v41);
      v38 = UTType.conforms(to:)(v18);
      sub_10002635C((uint64_t)v18);
      v42 = sub_10002635C((uint64_t)v15);
      if ((v38 & 1) != 0)
      {
        sub_10002635C((uint64_t)v20);
        v43 = 0;
        v44 = 1;
        v24 = v36;
LABEL_14:
        v50 = sub_1000088D8((uint64_t)&unk_100281DE8, 24);
        sub_1000268F4(v50);
        v51 = sub_1000088D8((uint64_t)&unk_100281E60, 34);
        *(_QWORD *)(v51 + 16) = v38;
        *(_QWORD *)(v51 + 24) = v24;
        *(_BYTE *)(v51 + 32) = v43;
        *(_BYTE *)(v51 + 33) = v44;
        goto LABEL_17;
      }
    }
    else
    {
      v42 = sub_10002635C((uint64_t)v15);
    }
    ((void (*)(uint64_t))static UTType.flatRTFD.getter)(v42);
    v47 = sub_100026A68();
    sub_10002635C((uint64_t)v18);
    v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v39)(v1, v40, v10);
    if ((v47 & 1) != 0)
    {
      ((void (*)(uint64_t))static UTType.rtf.getter)(v48);
      v38 = v1;
      v49 = UTType.conforms(to:)(v18);
      sub_10002635C((uint64_t)v18);
      sub_10002635C(v1);
      sub_10002635C((uint64_t)v20);
      v24 = v36;
      if ((v49 & 1) != 0)
      {
        v44 = 0;
        v43 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      sub_10002635C(v1);
      sub_10002635C((uint64_t)v20);
      v24 = v36;
    }
    v52 = sub_1000088D8((uint64_t)&unk_100281DE8, 24);
    sub_1000268F4(v52);
    v53 = sub_1000088D8((uint64_t)&unk_100281E38, 32);
    *(_QWORD *)(v53 + 16) = v38;
    *(_QWORD *)(v53 + 24) = v24;
    goto LABEL_17;
  }
  sub_100025A28(v0, &qword_1002AA5F0);
  v24 = v59;
  v25 = v58;
  sub_100026A00(v60, (uint64_t)v59 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16));
  v26 = swift_retain_n(v6, 2);
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.default.getter(v27, v28);
  v30 = v6;
  if (sub_100026AC0(v27))
  {
    v31 = (uint8_t *)sub_10000797C(12);
    v32 = sub_10000797C(32);
    *(_DWORD *)v31 = 136446210;
    v63[0] = v32;
    v33 = PasteboardRepresentation.ID.label.getter(v32);
    v62 = sub_100006FCC(v33, v34, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v31 + 4);
    sub_10000F650(v30);
    sub_10000E420();
    sub_100026484((void *)&_mh_execute_header, v27, v29, "%{public}s: attempted RTF conversion without a source type", v31);
    sub_1000263F4(v32, v35, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v32);
    sub_100007958((uint64_t)v31);

  }
  else
  {

    sub_10000F650(v6);
  }
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v25);
  v45 = sub_1000088D8((uint64_t)&unk_100281DE8, 24);
  swift_weakInit(v45 + 16, v30);
  v46 = sub_1000088D8((uint64_t)&unk_100281E10, 32);
  *(_QWORD *)(v46 + 16) = v45;
  *(_QWORD *)(v46 + 24) = v24;
LABEL_17:
  v54 = v24;
  return sub_100026B88();
}

uint64_t sub_10001F250(void (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  v10 = a3 + 16;
  swift_beginAccess(a3 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (Strong)
  {
    v12 = Strong;
    v13 = swift_allocObject(&unk_100281E88, 26, 7);
    *(_QWORD *)(v13 + 16) = a4;
    *(_BYTE *)(v13 + 24) = a5 & 1;
    *(_BYTE *)(v13 + 25) = a6 & 1;
    swift_retain();
    v14 = a4;
    sub_10001F4A0();
    v16 = v15;
    swift_release_n(v12, 2);
    swift_release();
  }
  else
  {
    a1(0, 0xF000000000000000, 0, 0, 0, 0);
    return 0;
  }
  return v16;
}

uint64_t sub_10001F35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v11 = a6 & 1;
  v12 = a7 & 1;
  v13 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v13);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  __chkstk_darwin(v16);
  v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v19 + 16))(v18, a5 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger);
  v21 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent21PasteboardDataSession_contents);
  v22 = *(_QWORD *)(v21 + 16);
  v23 = *(_QWORD *)(v21 + 24);
  UUID.init()(v20);
  v24 = type metadata accessor for RTFRepresentationReceiver(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  swift_retain();
  return sub_100018B84((uint64_t)v18, v22, v23, (uint64_t)v15, v11, v12, a3, a4);
}

void sub_10001F4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v9)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD v23[11];
  uint64_t v24;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = sub_10000F6E4();
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100026518();
  if (v11
    && (Strong = swift_weakLoadStrong(v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_dataSession)) != 0)
  {
    v15 = Strong;
    sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v16 = sub_1000269EC();
    v17 = (void *)static OS_dispatch_queue.main.getter(v16);
    __chkstk_darwin(v17);
    v23[2] = v1;
    v23[3] = v11;
    v23[4] = v5;
    v23[5] = v3;
    v23[6] = v15;
    v23[7] = v9;
    v23[8] = v7;
    v18 = sub_1000055B0(&qword_1002AA668);
    OS_dispatch_queue.sync<A>(execute:)(&v24, sub_100025624, v23, v18);

    swift_release();
    sub_10000FF50();
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v0, v0 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger, v12);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (sub_10002642C(v21))
    {
      v22 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v0, "Pasteboard Item Provider: Called after PasteboardRepresentation freed", v22, 2u);
      sub_100007958((uint64_t)v22);
    }

    sub_100026A84(v0, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    v9(0, 0xF000000000000000, 0, 0, 0, 0);
  }
  sub_10000E4E0();
}

uint64_t sub_10001F658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t result;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v82 = a7;
  v83 = (void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))a6;
  v84 = a5;
  v79 = a4;
  v80 = a3;
  v85 = a8;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v75 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v76 = (uint64_t)&v71 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - v16;
  v73 = (void *)a1;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[2];
  v77 = a1 + OBJC_IVAR____TtC13EnsembleAgent26PasteboardItemProvider_iOS_logger;
  v78 = v18;
  ((void (*)(char *))v18)((char *)&v71 - v16);
  v19 = swift_retain_n(a2, 4);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v20, v21);
  if (os_log_type_enabled(v20, v22))
  {
    v23 = a2;
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v74 = v10;
    v26 = v25;
    v88 = v25;
    *(_DWORD *)v24 = 136446466;
    v72 = v11;
    v27 = PasteboardRepresentation.ID.label.getter(v25);
    v86 = sub_100006FCC(v27, v28, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v24 + 4);
    swift_release_n(v23, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    v29 = *(_QWORD *)(v23 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
    v30 = *(_QWORD *)(v23 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
    swift_bridgeObjectRetain();
    v86 = sub_100006FCC(v29, v30, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v24 + 14);
    swift_release_n(v23, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "promise redeemed: rep-id=%{public}s type=%{public}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    v31 = v26;
    v10 = v74;
    swift_slowDealloc(v31, -1, -1);
    v32 = v24;
    a2 = v23;
    swift_slowDealloc(v32, -1, -1);

    v33 = (void (*)(char *, uint64_t))v72[1];
  }
  else
  {

    swift_release_n(a2, 4);
    v33 = (void (*)(char *, uint64_t))v11[1];
  }
  v33(v17, v10);
  v34 = v83;
  v35 = v84;
  v36 = v81;
  v37 = v80(a2, v84, v83, v82);
  if (v36)
  {
    v38 = v75;
    v39 = v78(v75, v77, v10);
    __chkstk_darwin(v39);
    *(&v71 - 2) = v36;
    sub_1000E45AC((int)sub_100020048, 0, (int)sub_100026210, (int)(&v71 - 4), v40, v41, v42, v43, v71, v72, (uint64_t)v73, v74, v75, v76, v77, (uint64_t)v78, v79, (uint64_t)v80, v81,
      v82,
      (uint64_t)v83,
      v84,
      (uint64_t)v85,
      v86);
    v33((char *)v38, v10);
    swift_errorRetain(v36);
    v34(0, 0xF000000000000000, 0, v36, 0, 0);
    swift_errorRelease(v36);
    result = swift_errorRelease(v36);
    v45 = 0;
  }
  else
  {
    v46 = v37;
    v47 = a2;
    v48 = (_QWORD *)swift_allocObject(&unk_100281DC0, 48, 7);
    v49 = v73;
    v48[2] = v73;
    v48[3] = v35;
    v48[4] = v46;
    v48[5] = v47;
    v50 = type metadata accessor for Completion();
    swift_allocObject(v50, 48, 7);
    swift_retain();
    v51 = v49;
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD000000000000067, 0x8000000100252B40, 799, (uint64_t)sub_100025678, (uint64_t)v48);
    PasteboardDataSession.activate(completion:)();
    swift_release();
    v78(v76, v77, v10);
    v84 = v47;
    swift_retain_n(v47, 4);
    v52 = swift_retain_n(v46, 2);
    v53 = Logger.logObject.getter(v52);
    v55 = static os_log_type_t.default.getter(v53, v54);
    v56 = v55;
    if (os_log_type_enabled(v53, v55))
    {
      v57 = swift_slowAlloc(32, -1);
      v74 = v10;
      v58 = v57;
      v59 = swift_slowAlloc(96, -1);
      v83 = (void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))v59;
      v88 = v59;
      *(_DWORD *)v58 = 136446722;
      LODWORD(v82) = v56;
      sub_1000174C0(v59);
      v86 = sub_100006FCC(v60, v61, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v58 + 4);
      swift_release_n(v46, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2082;
      v62 = v84;
      v64 = PasteboardRepresentation.ID.label.getter(v63);
      v86 = sub_100006FCC(v64, v65, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v58 + 14);
      swift_release_n(v62, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 22) = 2082;
      v66 = *(_QWORD *)(v62 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier);
      v67 = *(_QWORD *)(v62 + OBJC_IVAR____TtC13EnsembleAgent24PasteboardRepresentation_typeIdentifier + 8);
      swift_bridgeObjectRetain();
      v86 = sub_100006FCC(v66, v67, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v58 + 24);
      swift_release_n(v62, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v82, "promise receiver: id=%{public}s rep-id=%{public}s type=%{public}s", (uint8_t *)v58, 0x20u);
      v68 = (uint64_t)v83;
      swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      v69 = v76;
      v70 = v74;
    }
    else
    {

      swift_release_n(v84, 4);
      swift_release_n(v46, 2);
      v69 = v76;
      v70 = v10;
    }
    v33((char *)v69, v70);
    v45 = objc_retain(*(id *)(v46
                            + OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF22RepresentationReceiver_progress));
    result = swift_release();
  }
  *v85 = v45;
  return result;
}

#error "10001FE30: call analysis failed (funcsize=105)"

uint64_t sub_10001FE84()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v4;

  v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(32, 1);
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = PasteboardDataSession.ID.label.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100252D60;
  v2._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_10001FF14()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(42, 2);
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = PasteboardDataSession.ID.label.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100252D90;
  v2._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v2);
  v3 = type metadata accessor for UUID(0);
  sub_100021264(&qword_1002AA670, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A47415244;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return v9;
}

unint64_t sub_100020048()
{
  return 0xD00000000000001FLL;
}

void sub_100020064()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.PasteboardItemProvider_iOS", 40, "init()", 6, 0);
  __break(1u);
}

id sub_10002009C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PasteboardItemProvider_iOS(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t static Int64.logicalMinimum.getter()
{
  return 0x8000000000000000;
}

uint64_t variable initialization expression of WindowSceneController.contexts()
{
  uint64_t v0;

  v0 = type metadata accessor for WindowSceneController.Context();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v0, &protocol witness table for String);
}

void *variable initialization expression of P2PPeerCoordinator.connectionAssertions()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of PasteboardDataSession.transfers()
{
  return &_swiftEmptyArrayStorage;
}

void variable initialization expression of Agent.windowSceneController()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for WindowSceneController();
  v1 = sub_1000088D8(v0, 24);
  v2 = type metadata accessor for WindowSceneController.Context();
  *(_QWORD *)(v1 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v2, &protocol witness table for String);
  sub_1000050D4();
}

uint64_t static UInt32.logicalMaximum.getter()
{
  return 0xFFFFFFFFLL;
}

unint64_t variable initialization expression of DragSourceCoordinator.state()
{
  return 0x9000000000000000;
}

uint64_t variable initialization expression of PasteboardDataProvider.data()
{
  return 0;
}

uint64_t sub_1000201FC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for Completions();
  result = sub_1000088D8(v0, 24);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

id variable initialization expression of KeyFocusController.service()
{
  return objc_msgSend((id)objc_opt_self(SBSUniversalControlService), "sharedInstance");
}

uint64_t variable initialization expression of EventConnection_iOS.eventRegistrations()
{
  return sub_1000203D4((uint64_t (*)(_QWORD))&type metadata accessor for AnyCancellable, (uint64_t (*)(void))sub_100021228, (uint64_t)&type metadata for UniversalControlUUID);
}

uint64_t variable initialization expression of P2PPeerCoordinator._label()
{
  return 0;
}

unint64_t variable initialization expression of P2PPeerCoordinator.state()
{
  return 0xC000000000000000;
}

uint64_t variable initialization expression of EnsembleHIDController.maskCompletions()
{
  uint64_t v0;

  v0 = type metadata accessor for Completions();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UInt64, v0, &protocol witness table for UInt64);
}

uint64_t variable initialization expression of EnsembleHIDController._localInputDevices()
{
  return Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, &type metadata for UInt64, &type metadata for EnsembleHIDController.LocalInputDevice, &protocol witness table for UInt64);
}

uint64_t variable initialization expression of EventDispatcher.logger@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6EB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t variable initialization expression of EventDispatcher.hotZones()
{
  return sub_100020464();
}

uint64_t variable initialization expression of EventDispatcher.state@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for EventDispatcher.HotZoneState(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 4);
}

double variable initialization expression of MaterialAppearance.backdropScale()
{
  return 0.125;
}

double variable initialization expression of MaterialAppearance.blur()
{
  return 30.0;
}

double variable initialization expression of MaterialAppearance.fillOpacity()
{
  return 1.0;
}

uint64_t variable initialization expression of _BasePasteboardController.pasteboards()
{
  return sub_1000203D4((uint64_t (*)(_QWORD))type metadata accessor for PasteboardContents, (uint64_t (*)(void))sub_100021298, (uint64_t)&type metadata for PasteboardType);
}

uint64_t sub_1000203D4(uint64_t (*a1)(_QWORD), uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1(0);
  v6 = a2();
  return sub_1000265E0((uint64_t)_swiftEmptyArrayStorage, a3, v5, v6);
}

uint64_t variable initialization expression of _BasePasteboardController.dataSessions()
{
  return sub_100020464();
}

uint64_t variable initialization expression of _BasePasteboardController.providers()
{
  return sub_100020464();
}

uint64_t sub_100020464()
{
  unint64_t *v0;
  uint64_t (*v1)(_QWORD);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100026B94();
  v3 = v2(0);
  v4 = v1(0);
  sub_100021264(v0, 255, v2);
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v3, v4, v5);
}

uint64_t sub_1000204D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint8_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v11 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v21 = sub_100006FB4(v14, (uint64_t)qword_1002B7198);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v21, v14);
    __chkstk_darwin(v22);
    *(&v38 - 4) = (uint8_t *)a3;
    *(&v38 - 3) = a5;
    *(&v38 - 2) = a6;
    swift_errorRetain(a1);
    sub_1000E1B48(sub_10002557C, &v38 - 6, v18, a1);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v24 = sub_100006FB4(v14, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v24, v14);
    sub_100022838(a3, (uint64_t)v13, type metadata accessor for PasteboardDataTransferID);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v41 = a4;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v40 = v29;
      v43 = v29;
      *(_DWORD *)v28 = 136446210;
      v38 = v28 + 4;
      v39 = v28;
      v30 = UUID.uuidString.getter(v29);
      v32 = sub_1000599D0(8, v30, v31);
      v33 = static String._fromSubstring(_:)(v32);
      v35 = v34;
      swift_bridgeObjectRelease();
      v42 = sub_100006FCC(v33, v35, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v38);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardDataTransferID);
      v36 = v39;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Pasteboard Provider %{public}s Success", v39, 0xCu);
      v37 = v40;
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_1000255F0((uint64_t)v13, type metadata accessor for PasteboardDataTransferID);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    return Completion.callAsFunction(_:)(0);
  }
}

id sub_10002086C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  Class isa;
  Class v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v17;

  v5 = v4;
  isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for DocumentReadingOptionKey(0);
  sub_100021264(&qword_1002AA690, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
  v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  v17 = 0;
  v11 = objc_msgSend(v5, "initWithData:options:documentAttributes:error:", isa, v10, a4, &v17, swift_bridgeObjectRelease().n128_f64[0]);

  v12 = v17;
  if (v11)
  {
    v13 = v17;
  }
  else
  {
    v14 = v17;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v15);
  }
  sub_100022AEC(a1, a2);
  return v11;
}

uint64_t sub_1000209B8(uint64_t a1, id *a2)
{
  return sub_100026134(a1, a2);
}

uint64_t sub_1000209CC(uint64_t a1, id *a2)
{
  return sub_1000260C4(a1, a2) & 1;
}

void sub_1000209E4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_10000E420();
  sub_1000050D4();
}

uint64_t sub_100020A14(uint64_t a1)
{
  _QWORD *v1;

  return sub_1001A8AFC(a1, *v1);
}

void sub_100020A1C()
{
  uint64_t *v0;

  sub_1000209E4(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_100020A3C(_QWORD *a1@<X8>)
{
  sub_100026A1C(a1);
}

uint64_t sub_100020A44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10021C1F0, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_100020A90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_100026194(a1);
  *a2 = v3;
}

void sub_100020AB4()
{
  uint64_t *v0;

  sub_1000209E4(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100020AD4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100004C9C(a1, *v1);
}

uint64_t sub_100020AEC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021C0E0, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100020B28(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021C0E0, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100020B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000210B4(a1, a2, a3, (uint64_t)&unk_10021C0E0);
}

void sub_100020B80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_1000264CC();
  *v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1000050D4();
}

uint64_t sub_100020BA0(_QWORD *a1, _QWORD *a2)
{
  return sub_10008B2A0(*a1, *a2);
}

void sub_100020BAC(_QWORD *a1@<X8>)
{
  sub_100026A1C(a1);
}

void sub_100020BB4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = variable initialization expression of PasteboardFileDataProvider.archiveSource(a1, a2);
  sub_1000050D4();
}

uint64_t sub_100020BD4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100179BD0(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_100020C00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000263E4(a1);
  *v1 = sub_10008B69C(v2, v3);
  sub_1000050D4();
}

void sub_100020C20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000263E4(a1);
  *v1 = sub_100179BD4(v2, v3);
  sub_1000050D4();
}

BOOL sub_100020C40(_QWORD *a1, uint64_t *a2)
{
  return sub_100095380(a1, *a2);
}

uint64_t sub_100020C48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100095400(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100020C78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10017E524(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100020CA8(_QWORD *a1)
{
  return sub_100095404(*a1);
}

uint64_t sub_100020CB0(_QWORD *a1)
{
  return sub_100095388(*a1);
}

uint64_t sub_100020CB8(_QWORD *a1)
{
  return sub_10017E520(*a1);
}

uint64_t sub_100020CC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10017E51C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100020CEC(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000953A0(*a1, *v1);
}

BOOL sub_100020CF8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10017E530(*a1, *v1);
}

uint64_t sub_100020D04(_QWORD *a1)
{
  return sub_10017E57C(*a1);
}

void sub_100020D0C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_1000264CC();
  *v0 = CGSize.init(_:)(v1);
  sub_1000050D4();
}

void sub_100020D2C(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_100020D5C();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t sub_100020D64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10021C0E0, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_100020DB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_1000264CC();
  *v0 = j_j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1000050D4();
}

uint64_t sub_100020DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100021264(&qword_1002AA690, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
  v3 = v2;
  sub_100021264(&qword_1002AA800, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100020E5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100021264(&qword_1002AA7F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType);
  v3 = v2;
  sub_100021264(&qword_1002AA7F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100020EE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100021264((unint64_t *)&unk_1002AA6A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
  v3 = v2;
  sub_100021264(&qword_1002AA7E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100020F74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100021264(&qword_1002AA818, 255, (uint64_t (*)(uint64_t))type metadata accessor for UniversalControlClientAssertion);
  v3 = v2;
  sub_100021264((unint64_t *)&unk_1002AA820, 255, (uint64_t (*)(uint64_t))type metadata accessor for UniversalControlClientAssertion);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100021000@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100179B54();
  *a1 = result;
  return result;
}

uint64_t sub_100021024(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021C1F0, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100021060(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021C1F0, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000210A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000210B4(a1, a2, a3, (uint64_t)&unk_10021C1F0);
}

Swift::Int sub_1000210B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  WitnessTable = swift_getWitnessTable(a4, a2);
  _CFObject.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

void sub_100021114(_QWORD *a1@<X8>)
{
  NSString v2;

  v2 = sub_100026998();
  sub_10000E420();
  *a1 = v2;
  sub_10000B350();
}

uint64_t sub_100021148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100021264(&qword_1002AA808, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
  v3 = v2;
  sub_100021264(&qword_1002AA810, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_1000211D4(uint64_t a1)
{
  sub_100022238(a1, (uint64_t)&type metadata for String);
}

void sub_1000211E0(uint64_t a1)
{
  sub_1000222D8(a1);
}

void sub_1000211EC(uint64_t a1)
{
  sub_100022468(a1, (uint64_t *)&unk_1002AA6E0);
}

void sub_1000211F8(uint64_t a1)
{
  sub_100022368(a1, type metadata accessor for P2PStream);
}

void sub_100021204(uint64_t a1)
{
  sub_100022368(a1, type metadata accessor for P2PDevice);
}

void sub_100021210(uint64_t a1)
{
  sub_100022238(a1, (uint64_t)&type metadata for UniversalControlDeviceID);
}

void sub_10002121C(uint64_t a1)
{
  sub_1000222D8(a1);
}

unint64_t sub_100021228()
{
  unint64_t result;

  result = qword_1002A9A20;
  if (!qword_1002A9A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlUUID, &type metadata for UniversalControlUUID);
    atomic_store(result, (unint64_t *)&qword_1002A9A20);
  }
  return result;
}

void sub_100021264(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = a3(a2);
    atomic_store(sub_100026A38(v4), a1);
  }
  sub_1000050D4();
}

unint64_t sub_100021298()
{
  unint64_t result;

  result = qword_1002A9A30;
  if (!qword_1002A9A30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PasteboardType, &type metadata for PasteboardType);
    atomic_store(result, (unint64_t *)&qword_1002A9A30);
  }
  return result;
}

void sub_1000212D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_100021264(&qword_1002A9A38, a2, (uint64_t (*)(uint64_t))type metadata accessor for PasteboardController_iOS);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t type metadata accessor for PasteboardController_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent24PasteboardController_iOS);
}

void sub_100021330()
{
  sub_100021264(&qword_1002A9A40, 255, type metadata accessor for PasteboardMessage);
}

uint64_t sub_100021360()
{
  return type metadata accessor for PasteboardCollection(0);
}

uint64_t type metadata accessor for PasteboardCollection(uint64_t a1)
{
  return sub_100021590(a1, qword_1002A9AD8, (uint64_t)&nominal type descriptor for PasteboardCollection);
}

uint64_t sub_10002137C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_10021BCB8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10021BCD0;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100021418()
{
  return type metadata accessor for RepresentationReceiver(0);
}

uint64_t type metadata accessor for RepresentationReceiver(uint64_t a1)
{
  return sub_100021590(a1, qword_1002A9BD8, (uint64_t)&nominal type descriptor for RepresentationReceiver);
}

uint64_t sub_100021434(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[4] = "\t";
      result = type metadata accessor for URL(319);
      if (v5 <= 0x3F)
      {
        v6[5] = *(_QWORD *)(result - 8) + 64;
        return swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_1000214F8()
{
  return type metadata accessor for RTFRepresentationReceiver(0);
}

uint64_t type metadata accessor for RTFRepresentationReceiver(uint64_t a1)
{
  return sub_100021590(a1, qword_1002A9D40, (uint64_t)&nominal type descriptor for RTFRepresentationReceiver);
}

uint64_t sub_100021514(uint64_t a1)
{
  void *v2;

  v2 = &unk_10021BD40;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 272);
}

uint64_t type metadata accessor for PasteboardContext_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent21PasteboardContext_iOS);
}

uint64_t sub_100021574()
{
  return type metadata accessor for PasteboardItemProvider_iOS(0);
}

uint64_t type metadata accessor for PasteboardItemProvider_iOS(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002AA130, (uint64_t)&nominal type descriptor for PasteboardItemProvider_iOS);
}

uint64_t sub_100021590(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1000215C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for SCDynamicStore(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA3E0, (uint64_t)&unk_100281420);
}

void type metadata accessor for CGRegionEnumerator(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA3E8, (uint64_t)&unk_100281450);
}

void type metadata accessor for BSDeviceOrientation(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA3F0, (uint64_t)&unk_100281478);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA3F8, (uint64_t)&unk_100281498);
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA400, (uint64_t)&unk_1002814B8);
}

void type metadata accessor for CFRunLoop(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA408, (uint64_t)&unk_1002814D8);
}

_QWORD *sub_1000216B0(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1000216BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000216DC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA410, (uint64_t)&unk_100281560);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA418, (uint64_t)&unk_100281588);
}

void type metadata accessor for RPStreamQoSType(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA420, (uint64_t)&unk_1002815B0);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA428, (uint64_t)&unk_1002815D0);
}

__n128 initializeWithCopy for Curve(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Curve(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Curve(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA430, (uint64_t)&unk_100281658);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA438, (uint64_t)&unk_100281690);
}

_WORD *initializeBufferWithCopyOfBuffer for RTFConverter(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RTFConverter(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 65281 <= 0xFFFEFFFF)
      v2 = 2;
    else
      v2 = 4;
    if (a2 + 65281 < 0xFF0000)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    else
    {
      v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2))
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 16)) - 65282;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RTFConverter(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000218CC + 4 * byte_10021BBB5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100021900 + 4 * byte_10021BBB0[v4]))();
}

uint64_t sub_100021900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100021908(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100021910);
  return result;
}

uint64_t sub_10002191C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100021924);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100021928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100021930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RTFConverter()
{
  return &type metadata for RTFConverter;
}

uint64_t initializeBufferWithCopyOfBuffer for RepresentationReceiver.Target(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100021990(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_100021990(id result, unsigned __int8 a2)
{
  if (a2 == 2)
    return result;
  if (a2 <= 1u)
    return (id)swift_retain(result);
  return result;
}

void destroy for RepresentationReceiver.Target(uint64_t a1)
{
  sub_1000219C4(*(void **)a1, *(_BYTE *)(a1 + 8));
}

void sub_1000219C4(void *a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {

  }
  else if (a2 <= 1u)
  {
    swift_release(a1);
  }
}

uint64_t assignWithCopy for RepresentationReceiver.Target(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100021990(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000219C4(v5, v6);
  return a1;
}

uint64_t initializeWithTake for RepresentationReceiver.Target(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for RepresentationReceiver.Target(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000219C4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepresentationReceiver.Target(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepresentationReceiver.Target(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100021B0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100021B14(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RepresentationReceiver.Target()
{
  return &type metadata for RepresentationReceiver.Target;
}

uint64_t initializeBufferWithCopyOfBuffer for PasteboardCollection.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

_QWORD *destroy for PasteboardCollection.State(_QWORD *a1)
{
  if (a1[3] >= 0xFFFFFFFFuLL)
    return (_QWORD *)sub_100005988(a1);
  return a1;
}

uint64_t initializeWithCopy for PasteboardCollection.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for PasteboardCollection.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100005988((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_100021C68((_QWORD *)a1, a2);
  return a1;
}

_QWORD *sub_100021C68(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for PasteboardCollection.State(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PasteboardCollection.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    sub_100005988((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PasteboardCollection.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PasteboardCollection.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t sub_100021EE8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_100021F00(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PasteboardCollection.State()
{
  return &type metadata for PasteboardCollection.State;
}

void type metadata accessor for CGRegion(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA440, (uint64_t)&unk_100281860);
}

__n128 initializeWithTake for Completion.State(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA448, (uint64_t)&unk_1002818E8);
}

void type metadata accessor for NSItemProviderRepresentationVisibility(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA450, (uint64_t)&unk_100281910);
}

__n128 initializeWithTake for P2PStreamID(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100021F90(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100021FB0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA458, (uint64_t)&unk_100281988);
}

void *sub_100021FF0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_100021FF8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100022018(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA460, (uint64_t)&unk_100281A08);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA468, (uint64_t)&unk_100281A68);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA470, (uint64_t)&unk_100281A98);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA478, (uint64_t)&unk_100281AC8);
}

void type metadata accessor for CGImageSource(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA480, (uint64_t)&unk_100281AF8);
}

uint64_t sub_1000220C8(uint64_t a1, int a2)
{
  int v2;

  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 16))
    {
      if (*(_QWORD *)(a1 + 8))
        v2 = -1;
      else
        v2 = 0;
    }
    else
    {
      v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100022104(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA488, (uint64_t)&unk_100281B80);
}

void sub_100022154()
{
  sub_100021264((unint64_t *)&qword_1002AA4F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
}

void sub_100022184()
{
  sub_100021264(&qword_1002AA4F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFRunLoop);
}

void sub_1000221B4()
{
  sub_100021264(&qword_1002AA500, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFRunLoop);
}

void sub_1000221E4()
{
  sub_100021264(&qword_1002AA508, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString);
}

void sub_100022214(uint64_t a1)
{
  sub_100022238(a1, (uint64_t)&unk_100283288);
}

void sub_100022220(uint64_t a1)
{
  sub_100022238(a1, (uint64_t)&type metadata for ConnectionMessage);
}

void sub_10002222C(uint64_t a1)
{
  sub_100022238(a1, (uint64_t)&type metadata for UInt64);
}

void sub_100022238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    sub_1000262D4();
    sub_100026284((uint64_t)"Fatal error", v2, v3, (uint64_t)"Can't construct Array with count < 0", v4, v5, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    sub_100015540();
  }
}

void sub_10002229C(uint64_t a1)
{
  sub_100022468(a1, &qword_1002AA560);
}

void sub_1000222A8(uint64_t a1)
{
  sub_100022468(a1, &qword_1002AA580);
}

void sub_1000222B4(uint64_t a1)
{
  sub_100022468(a1, (uint64_t *)&unk_1002AA550);
}

void sub_1000222C0(uint64_t a1)
{
  sub_1000223E4(a1);
}

void sub_1000222CC(uint64_t a1)
{
  sub_1000222D8(a1);
}

void sub_1000222D8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 < 0)
  {
    sub_1000262D4();
    sub_100026284((uint64_t)"Fatal error", v5, v6, (uint64_t)"Can't construct Array with count < 0", v7, v8, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    sub_100026954();
    if (v3)
    {
      v4 = v1(0);
      *(_QWORD *)(sub_100026A44(v4) + 16) = v2;
    }
    v1(0);
    sub_1000266A8();
    sub_10000B338();
  }
}

void sub_100022350(uint64_t a1)
{
  sub_100022368(a1, type metadata accessor for SyncCoordinator);
}

void sub_10002235C(uint64_t a1)
{
  sub_100022368(a1, (uint64_t (*)(_QWORD))type metadata accessor for P2PPeerCoordinator);
}

void sub_100022368(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0)
  {
    sub_1000262D4();
    sub_100026284((uint64_t)"Fatal error", v4, v5, (uint64_t)"Can't construct Array with count < 0", v6, v7, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v3 = a2(0);
      *(_QWORD *)((sub_100026A2C(v3) & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
    }
    sub_100015540();
  }
}

void sub_1000223D8(uint64_t a1)
{
  sub_1000223E4(a1);
}

void sub_1000223E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 < 0)
  {
    sub_1000262D4();
    sub_100026284((uint64_t)"Fatal error", v5, v6, (uint64_t)"Can't construct Array with count < 0", v7, v8, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    sub_100026954();
    if (v3)
    {
      v4 = sub_1000055B0(v1);
      *(_QWORD *)(sub_100026A44(v4) + 16) = v2;
    }
    sub_1000055B0(v1);
    sub_1000266A8();
    sub_10000B338();
  }
}

void sub_10002245C(uint64_t a1)
{
  sub_100022468(a1, &qword_1002ACA60);
}

void sub_100022468(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0)
  {
    sub_1000262D4();
    sub_100026284((uint64_t)"Fatal error", v4, v5, (uint64_t)"Can't construct Array with count < 0", v6, v7, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v3 = sub_1000055B0(a2);
      *(_QWORD *)(sub_100026A2C(v3) + 16) = a1;
    }
    sub_100015540();
  }
}

uint64_t sub_1000224D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(sub_1000262F8() - 8);
  v17 = *(unsigned __int8 *)(v1 + 80);
  v2 = (((*(_QWORD *)(v1 + 64) + ((v17 + 24) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(sub_100026774() - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + ((((v2 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  v16 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_1000262CC() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v14 = *(_QWORD *)(v6 + 64);
  sub_100026600();
  v8 = sub_10000E440();
  v9 = sub_1000269E0();
  v15 = v10;
  ((void (*)(uint64_t))v10)(v9);
  swift_release();
  sub_100026ADC(v0 + v2);
  swift_release();
  swift_release();
  v11 = sub_100026B28();
  if (!sub_1000267A4())
    sub_100026A84(v0 + v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8));
  v12 = (v16 + v7 + v5) & ~v7;
  swift_release();
  v15(v0 + v12, v8);
  return swift_deallocObject(v0, v14 + v12 + 16, v17 | v4 | v7 | 7);
}

void sub_100022644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100026954();
  sub_1000262F8();
  sub_100026874();
  sub_10002688C();
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_100026774();
  sub_100026868();
  v9 = (v8 + v7 + 8) & ~v8;
  v11 = *(_QWORD *)(v10 + 64);
  sub_1000262CC();
  sub_100026868();
  sub_100019C2C(v2, v0, *(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v7), v1 + v9, v1 + ((v11 + v12 + v9) & ~v12), *(_QWORD *)(v1 + *(_QWORD *)(v13 + 64) + ((v11 + v12 + v9) & ~v12)), *(_QWORD *)(v1 + *(_QWORD *)(v13 + 64) + ((v11 + v12 + v9) & ~v12) + 8));
}

uint64_t sub_10002271C()
{
  uint64_t v0;

  sub_1000265F8();
  sub_100026A7C();
  return swift_deallocObject(v0, 40, 7);
}

void sub_100022740(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 32)+ OBJC_IVAR____TtC13EnsembleAgentP33_FA76DA0EEF2E05F0D49C95BAD5FF96BF20PasteboardCollection_collection), a1);
  sub_1000050D4();
}

uint64_t sub_100022774(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PasteboardCollection.State(a2, a1);
  return a2;
}

uint64_t sub_1000227A8(uint64_t a1, uint64_t a2)
{
  assignWithTake for PasteboardCollection.State(a2, a1);
  return a2;
}

uint64_t sub_1000227DC()
{
  uint64_t v0;

  sub_100026600();
  sub_1000265F8();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022800()
{
  uint64_t v0;

  return sub_100016728(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100022808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100022818(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100022820()
{
  return sub_10001C70C();
}

void sub_100022838(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100026944(a1, a2, a3);
  sub_1000265B0(v3);
  sub_1000050D4();
}

uint64_t sub_100022858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(sub_1000262CC() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_1000262F8() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = sub_100026B28();
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0 + v3, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v3, v11);
  v12 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  v13 = (v12 + v7 + v9) & ~v9;
  v14 = (((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = v2 | v6 | v9 | 7;
  swift_release();
  sub_100026A24();
  v16 = v0 + v12;
  v17 = sub_10000E440();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v18(v0 + v13, v17);
  swift_release();
  sub_100026ADC(v0 + v14);
  return swift_deallocObject(v0, v14 + 32, v15);
}

void sub_1000229B0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = *(_QWORD *)(sub_100026774() - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = (*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000262CC();
  sub_100026868();
  v16 = (v14 + v15 + 8) & ~v15;
  sub_1000262F8();
  sub_100026868();
  sub_100026608();
  sub_10001A474(a1, a2, a3, a4, a5, a6, v6 + v13, *(_QWORD *)(v6 + v14), v6 + v16, v6 + v19, *(_QWORD *)(v6 + v17), *(_QWORD *)(v6 + v18), *(_QWORD *)(v6 + v18 + 8), *(_QWORD *)(v6 + v18 + 16), *(_QWORD *)(v6 + v18 + 24));
}

uint64_t sub_100022AA4()
{
  uint64_t v0;

  return sub_10001B7B8(*(_QWORD *)(v0 + 16), 38);
}

uint64_t sub_100022AD8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100022AEC(result, a2);
  return result;
}

uint64_t sub_100022AEC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100022B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 16));
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100022B4C()
{
  uint64_t v0;

  return sub_1000266A0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100022B54()
{
  uint64_t v0;

  return sub_10001B84C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void (*sub_100022B60(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v6 = type metadata accessor for PasteboardDataSession.ID(0);
  v7 = malloc(*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v5[8] = v7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_100022838(a2, (uint64_t)v7, type metadata accessor for PasteboardDataSession.ID);
  v5[9] = sub_100022F68(v5);
  v5[10] = sub_100022D04(v5 + 4, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  return sub_100022C18;
}

void sub_100022C18(uint64_t a1)
{
  void *v1;
  void *v2;

  sub_1000265C8(a1);
  sub_1000255F0((uint64_t)v2, type metadata accessor for PasteboardDataSession.ID);
  sub_100026B5C();
  free(v2);
  sub_1000265EC(v1);
}

void (*sub_100022C54(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  swift_bridgeObjectRetain(a2);
  v5[9] = sub_100022F90(v5);
  v5[10] = sub_100022E34(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100022CDC;
}

void sub_100022CDC(uint64_t a1)
{
  void *v1;

  sub_1000265C8(a1);
  sub_10000E420();
  sub_100026B5C();
  sub_1000265EC(v1);
}

void (*sub_100022D04(_QWORD *a1, uint64_t a2, char a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*result)(uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  sub_1001A8B6C(a2);
  *((_BYTE *)v8 + 32) = v11 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_10;
  }
  v15 = v10;
  v16 = v11;
  sub_1000055B0(&qword_1002AA538);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v14))
  {
    sub_1001A8B6C(a2);
    if ((v16 & 1) == (v18 & 1))
    {
      v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    v21 = type metadata accessor for PasteboardDataSession.ID(0);
    result = (void (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }
LABEL_5:
  v8[3] = v15;
  if ((v16 & 1) != 0)
    v19 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v15);
  else
    v19 = 0;
  *v8 = v19;
  return sub_100022E0C;
}

void sub_100022E0C(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)sub_100026828(a1);
  sub_100022FB0(v2, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_100026300(v1);
}

void (*sub_100022E34(_QWORD *a1, uint64_t a2, char a3))(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  void (*result)(uint64_t);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v10 = sub_1001A8D30(a2);
  *((_BYTE *)v8 + 32) = v11 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_10;
  }
  v15 = v10;
  v16 = v11;
  sub_1000055B0(&qword_1002AA568);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v14))
  {
    v17 = sub_1001A8D30(a2);
    if ((v16 & 1) == (v18 & 1))
    {
      v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    v21 = sub_1000055B0(&qword_1002AA570);
    result = (void (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }
LABEL_5:
  v8[3] = v15;
  if ((v16 & 1) != 0)
    v19 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v15);
  else
    v19 = 0;
  *v8 = v19;
  return sub_100022F40;
}

void sub_100022F40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  char v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)sub_100026828(a1);
  sub_1000230EC(v2, v3, v4, v5, v6);
  swift_bridgeObjectRelease(*v1);
  sub_100026300(v1);
}

void (*sub_100022F68(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100022F88;
}

void sub_100022F88(uint64_t a1)
{
  sub_100026A1C(*(_QWORD **)(a1 + 8));
}

uint64_t (*sub_100022F90(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1000261D4;
}

double sub_100022FB0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v10 = type metadata accessor for PasteboardDataSession.ID(0);
  __chkstk_darwin(v10);
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = (char *)&v20 - v13;
  v15 = *a1;
  if (v15)
  {
    v16 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * a4) = v15;
    }
    else
    {
      sub_100022838(a5, (uint64_t)&v20 - v13, type metadata accessor for PasteboardDataSession.ID);
      sub_1000231C4(a4, (uint64_t)v14, v15, v16);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v11 + 72) * a4, 1, v10);
    v17 = *a3;
    v18 = sub_1000055B0(&qword_1002A99B0);
    sub_100021264(&qword_1002A99B8, 255, type metadata accessor for PasteboardDataSession.ID);
    _NativeDictionary._delete(at:)(a4, v17, v10, v18);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v15).n128_u64[0];
  return result;
}

double sub_1000230EC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v7 = *a1;
  if (*a1)
  {
    v8 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * a4) = v7;
    }
    else
    {
      sub_100023520(a4, a5, v7, v8);
      swift_bridgeObjectRetain(a5);
    }
  }
  else if ((a2 & 1) != 0)
  {
    v9 = *(_QWORD *)(*a3 + 48) + 8 * a4;
    v10 = sub_1000055B0(&qword_1002AA570);
    swift_arrayDestroy(v9, 1, v10);
    v11 = *a3;
    sub_10002599C(&qword_1002AA578, &qword_1002AA570);
    _NativeDictionary._delete(at:)(a4, v11, v10, v10);
  }
  *(_QWORD *)&result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

void sub_1000231C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  v7 = sub_1000262CC();
  sub_1000266C4(v7, v8, type metadata accessor for PasteboardDataSession.ID);
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * a1) = a3;
  sub_1000264C0();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v9;
    sub_10002644C();
  }
}

uint64_t sub_10002323C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = sub_100026960(a1, a3 + 8 * (a1 >> 6));
  *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result) = v5;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    *(_QWORD *)(v4 + 16) = v8;
  return result;
}

uint64_t sub_100023270(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  result = sub_100026960(a1, a7 + 8 * (a1 >> 6));
  *(_QWORD *)(v8[6] + 8 * result) = v9;
  v10 = (_QWORD *)(v8[7] + 32 * result);
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  v10[3] = v14;
  v15 = v8[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    v8[2] = v17;
  return result;
}

void sub_1000232B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  sub_1000263B0(a1, a2, a3, a4, a5);
  *v10 = v8;
  v10[1] = v9;
  v12 = *(_QWORD *)(v11 + 56);
  v13 = type metadata accessor for CompanionLinkDevice(0);
  sub_100025588(v6, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v7, type metadata accessor for CompanionLinkDevice);
  sub_1000264C0();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v14;
    sub_10000B350();
  }
}

void sub_100023314()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  sub_100026240();
  *(_QWORD *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  v2 = (_BYTE *)(*(_QWORD *)(v1 + 48) + 16 * v0);
  *v2 = v3;
  v2[1] = v4;
  v2[2] = v5;
  v2[3] = v6;
  v2[4] = v7;
  v2[5] = v8;
  v2[6] = v9;
  v2[7] = v10;
  v2[8] = v11;
  v2[9] = v12;
  v2[10] = v13;
  v2[11] = v14;
  sub_100026320(v0, v16, v11, v15, v1, SBYTE4(v11), SBYTE5(v11), SBYTE6(v11));
  if (v19)
    __break(1u);
  else
    sub_100026310(v17, v18);
}

unint64_t sub_1000233A4(unint64_t a1, char a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  unint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a5[6] + a1) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * a1);
  *v5 = a3;
  result = a4 >> 40;
  v5[1] = a4;
  v7 = a5[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a5[2] = v9;
  return result;
}

void sub_100023460()
{
  _QWORD *v0;
  unint64_t v1;
  _BYTE *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  sub_100026240();
  v0[(v1 >> 6) + 8] |= 1 << v1;
  v2 = (_BYTE *)(v0[6] + 16 * v1);
  *v2 = v3;
  v2[1] = v4;
  v2[2] = v5;
  v2[3] = v6;
  v2[4] = v7;
  v2[5] = v8;
  v2[6] = v9;
  v2[7] = v10;
  v2[8] = v11;
  v2[9] = v12;
  v2[10] = v13;
  v2[11] = v14;
  v2[12] = v15;
  v2[13] = v16;
  v2[14] = v17;
  v2[15] = v18;
  v19 = v0[7] + 56 * v1;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(v20 + 48);
  v22 = v0[2];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    sub_100026310((uint64_t)v0, v24);
}

unint64_t sub_100023520(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_100026530(a1, a2, a3, a4);
  if (v7)
    __break(1u);
  else
    *(_QWORD *)(v5 + 16) = v6;
  return result;
}

void sub_10002353C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  sub_1000263B0(a1, a2, a3, a4, a5);
  *v9 = v8;
  sub_1000266F8(v8, v9);
  v10[5] = v11;
  v10[6] = v12;
  v10[7] = v13;
  v10[8] = v14;
  v10[9] = v15;
  v10[10] = v16;
  v10[11] = v17;
  v10[12] = v18;
  v10[13] = v19;
  v10[14] = v20;
  v10[15] = v21;
  v23 = *(_QWORD *)(v22 + 56);
  v24 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v7, v6, v24);
  sub_1000264C0();
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 + 16) = v25;
    sub_10000B350();
  }
}

unint64_t sub_1000235EC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  result = sub_10002629C(a1, a2, a3, a4, a5);
  *(_QWORD *)(v8 + 8 * result) = v7;
  v9 = *(_QWORD *)(v6 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v11;
  return result;
}

void sub_100023614(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_10000E440();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7] + 40 * a1;
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(a3 + 32);
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a3;
  *(_OWORD *)(v10 + 16) = v11;
  sub_1000264C0();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    a4[2] = v12;
    sub_10002644C();
  }
}

void sub_1000236AC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char v10;

  v6 = sub_10002629C(a1, a2, a3, a4, a5);
  sub_100025A50(v8, v7 + 40 * v6);
  sub_1000264C0();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a5 + 16) = v9;
    sub_1000050D4();
  }
}

void sub_1000236E8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  char v6;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  sub_100005778(a3, (_OWORD *)(a4[7] + 32 * a1));
  sub_1000264C0();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    a4[2] = v5;
    sub_1000050D4();
  }
}

void sub_100023744(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;

  *(_QWORD *)(a8 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  sub_1000266F8(a2, (_BYTE *)(*(_QWORD *)(a8 + 48) + 16 * a1));
  v9[5] = v10;
  v9[6] = v11;
  *v9 = v12;
  v9[7] = v13;
  v9[9] = v14;
  v9[10] = v15;
  v9[11] = v16;
  v9[12] = v17;
  v9[13] = v18;
  v9[14] = v19;
  v9[8] = v20;
  v9[15] = v21;
  v23 = *(_QWORD *)(v8 + 56) + 32 * v22;
  *(_BYTE *)(v23 + 1) = v24;
  *(_BYTE *)(v23 + 2) = v25;
  *(_BYTE *)(v23 + 3) = v26;
  *(_BYTE *)(v23 + 4) = v27;
  *(_BYTE *)(v23 + 5) = v28;
  *(_BYTE *)(v23 + 6) = v29;
  *(_BYTE *)v23 = v30;
  *(_BYTE *)(v23 + 7) = v31;
  *(_BYTE *)(v23 + 9) = v32;
  *(_BYTE *)(v23 + 10) = v33;
  *(_BYTE *)(v23 + 11) = v34;
  *(_BYTE *)(v23 + 12) = v35;
  *(_BYTE *)(v23 + 13) = v36;
  *(_BYTE *)(v23 + 14) = v37;
  *(_BYTE *)(v23 + 8) = v38;
  *(_BYTE *)(v23 + 15) = v39;
  *(_BYTE *)(v23 + 16) = v40 & 1;
  *(_BYTE *)(v23 + 17) = v41 & 1;
  *(_QWORD *)(v23 + 24) = v42;
  v43 = *(_QWORD *)(v8 + 16);
  v44 = __OFADD__(v43, 1);
  v45 = v43 + 1;
  if (v44)
    __break(1u);
  else
    *(_QWORD *)(v8 + 16) = v45;
}

uint64_t sub_100023878(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10006D08C(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000238F0(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000238F0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  Swift::Int v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t *v31;
  Swift::Int v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  Swift::Int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  Swift::Int v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_129;
    if (v3)
      sub_100023FB8(0, v3, 1, a1);
    return;
  }
  v5 = v4;
  sub_100022368(v3 / 2, type metadata accessor for PasteboardRepresentation);
  v108 = v6;
  v110 = v7;
  v106 = v3;
  v104 = a1;
  if (v3 <= 0)
    goto LABEL_93;
  v105 = v5;
  v8 = 0;
  v9 = *a1;
  v103 = *a1 - 8;
  v10 = _swiftEmptyArrayStorage;
  v109 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = v10;
      v13 = *(_QWORD *)(v9 + 8 * v8);
      v14 = *(_QWORD *)(v9 + 8 * v11);
      type metadata accessor for PasteboardRepresentation(0);
      swift_retain();
      swift_retain();
      static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v13, v14);
      v16 = v15;
      swift_release();
      swift_release();
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v17 = v11;
        while (1)
        {
          v18 = v109 + 8 * v17;
          v20 = *(_QWORD *)(v18 + 8);
          v19 = *(_QWORD *)(v18 + 16);
          swift_retain();
          swift_retain();
          static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v19, v20);
          v22 = v21;
          swift_release();
          swift_release();
          if (((v16 ^ v22) & 1) != 0)
            break;
          v23 = v17 + 3;
          ++v17;
          if (v23 >= v3)
          {
            v8 = v3;
            goto LABEL_11;
          }
        }
        v8 = v17 + 2;
      }
LABEL_11:
      v10 = v12;
      if ((v16 & 1) != 0)
      {
        if (v8 < v11)
          goto LABEL_130;
        if (v11 < v8)
        {
          v24 = (uint64_t *)(v103 + 8 * v8);
          v25 = v8;
          v26 = v11;
          v27 = (uint64_t *)(v109 + 8 * v11);
          do
          {
            if (v26 != --v25)
            {
              if (!v109)
                goto LABEL_136;
              v28 = *v27;
              *v27 = *v24;
              *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_128;
      if (v8 - v11 < v105)
      {
        if (__OFADD__(v11, v105))
          goto LABEL_131;
        if (v11 + v105 >= v3)
          v29 = v3;
        else
          v29 = v11 + v105;
        if (v29 < v11)
        {
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (v8 != v29)
        {
          v107 = v11;
          v102 = v10;
          type metadata accessor for PasteboardRepresentation(0);
          v30 = v109;
          v31 = (uint64_t *)(v103 + 8 * v8);
          do
          {
            v32 = v29;
            v33 = *(_QWORD *)(v30 + 8 * v8);
            v34 = v107;
            v35 = v31;
            while (1)
            {
              v36 = *v35;
              swift_retain();
              swift_retain();
              static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v33, v36);
              v38 = v37;
              swift_release();
              swift_release();
              if ((v38 & 1) == 0)
                break;
              v30 = v109;
              if (!v109)
                goto LABEL_134;
              v39 = *v35;
              v33 = v35[1];
              *v35 = v33;
              v35[1] = v39;
              --v35;
              if (v8 == ++v34)
                goto LABEL_35;
            }
            v30 = v109;
LABEL_35:
            ++v8;
            ++v31;
            v29 = v32;
          }
          while (v8 != v32);
          v8 = v32;
          v10 = v102;
          v11 = v107;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_127;
    v40 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0)
    {
      v10 = v40;
    }
    else
    {
      sub_10006C984();
      v10 = v91;
    }
    v41 = v10[2];
    v42 = v41 + 1;
    v9 = v109;
    if (v41 >= v10[3] >> 1)
    {
      sub_10006C984();
      v9 = v109;
      v10 = v92;
    }
    v10[2] = v42;
    v43 = v10 + 4;
    v44 = &v10[2 * v41 + 4];
    *v44 = v11;
    v44[1] = v8;
    if (v41)
      break;
    v42 = 1;
LABEL_85:
    v3 = v106;
    if (v8 >= v106)
      goto LABEL_94;
  }
  while (1)
  {
    v45 = v42 - 1;
    if (v42 >= 4)
    {
      v50 = &v43[2 * v42];
      v51 = *(v50 - 8);
      v52 = *(v50 - 7);
      v56 = __OFSUB__(v52, v51);
      v53 = v52 - v51;
      if (v56)
        goto LABEL_112;
      v55 = *(v50 - 6);
      v54 = *(v50 - 5);
      v56 = __OFSUB__(v54, v55);
      v48 = v54 - v55;
      v49 = v56;
      if (v56)
        goto LABEL_113;
      v57 = v42 - 2;
      v58 = &v43[2 * v42 - 4];
      v60 = *v58;
      v59 = v58[1];
      v56 = __OFSUB__(v59, v60);
      v61 = v59 - v60;
      if (v56)
        goto LABEL_114;
      v56 = __OFADD__(v48, v61);
      v62 = v48 + v61;
      if (v56)
        goto LABEL_116;
      if (v62 >= v53)
      {
        v80 = &v43[2 * v45];
        v82 = *v80;
        v81 = v80[1];
        v56 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v56)
          goto LABEL_122;
        v73 = v48 < v83;
        goto LABEL_74;
      }
    }
    else
    {
      if (v42 != 3)
      {
        v74 = v10[4];
        v75 = v10[5];
        v56 = __OFSUB__(v75, v74);
        v67 = v75 - v74;
        v68 = v56;
        goto LABEL_68;
      }
      v47 = v10[4];
      v46 = v10[5];
      v56 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      v49 = v56;
    }
    if ((v49 & 1) != 0)
      goto LABEL_115;
    v57 = v42 - 2;
    v63 = &v43[2 * v42 - 4];
    v65 = *v63;
    v64 = v63[1];
    v66 = __OFSUB__(v64, v65);
    v67 = v64 - v65;
    v68 = v66;
    if (v66)
      goto LABEL_117;
    v69 = &v43[2 * v45];
    v71 = *v69;
    v70 = v69[1];
    v56 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v56)
      goto LABEL_119;
    if (__OFADD__(v67, v72))
      goto LABEL_121;
    if (v67 + v72 >= v48)
    {
      v73 = v48 < v72;
LABEL_74:
      if (v73)
        v45 = v57;
      goto LABEL_76;
    }
LABEL_68:
    if ((v68 & 1) != 0)
      goto LABEL_118;
    v76 = &v43[2 * v45];
    v78 = *v76;
    v77 = v76[1];
    v56 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if (v56)
      goto LABEL_120;
    if (v79 < v67)
      goto LABEL_85;
LABEL_76:
    v84 = v45 - 1;
    if (v45 - 1 >= v42)
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (!v9)
      goto LABEL_135;
    v85 = v10;
    v86 = &v43[2 * v84];
    v87 = *v86;
    v88 = &v43[2 * v45];
    v89 = v88[1];
    sub_100024098((char *)(v9 + 8 * *v86), (uint64_t *)(v9 + 8 * *v88), v9 + 8 * v89, v108);
    if (v1)
      break;
    if (v89 < v87)
      goto LABEL_109;
    if (v45 > v85[2])
      goto LABEL_110;
    *v86 = v87;
    v43[2 * v84 + 1] = v89;
    v90 = v85[2];
    if (v45 >= v90)
      goto LABEL_111;
    v42 = v90 - 1;
    memmove(&v43[2 * v45], v88 + 2, 16 * (v90 - 1 - v45));
    v10 = v85;
    v85[2] = v90 - 1;
    v9 = v109;
    if (v90 <= 2)
      goto LABEL_85;
  }
LABEL_91:
  swift_bridgeObjectRelease();
  if (v106 >= -1)
    goto LABEL_106;
  __break(1u);
LABEL_93:
  v10 = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage[2];
LABEL_94:
  if (v42 >= 2)
  {
    v94 = *v104;
    while (1)
    {
      v95 = v42 - 2;
      if (v42 < 2)
        break;
      if (!v94)
        goto LABEL_137;
      v96 = v10;
      v97 = v10[2 * v95 + 4];
      v98 = v10[2 * v42 + 3];
      sub_100024098((char *)(v94 + 8 * v97), (uint64_t *)(v94 + 8 * v10[2 * v42 + 2]), v94 + 8 * v98, v108);
      if (v1)
        goto LABEL_91;
      if (v98 < v97)
        goto LABEL_124;
      if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
      {
        sub_10006CA50();
        v96 = v101;
      }
      if (v95 >= v96[2])
        goto LABEL_125;
      v99 = &v96[2 * v95 + 4];
      *v99 = v97;
      v99[1] = v98;
      v100 = v96[2];
      if (v42 > v100)
        goto LABEL_126;
      memmove(&v96[2 * v42 + 2], &v96[2 * v42 + 4], 16 * (v100 - v42));
      v10 = v96;
      v96[2] = v100 - 1;
      v42 = v100 - 1;
      if (v100 <= 2)
        goto LABEL_105;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
LABEL_105:
  swift_bridgeObjectRelease();
  if (v106 >= -1)
  {
LABEL_106:
    *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()(v93);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
}

uint64_t sub_100023FB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  v15 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    type metadata accessor for PasteboardRepresentation(0);
    v6 = v5 + 8 * v4 - 8;
    while (2)
    {
      v7 = *(_QWORD *)(v5 + 8 * v4);
      v8 = v15;
      v9 = (uint64_t *)v6;
      do
      {
        v10 = *v9;
        swift_retain();
        swift_retain();
        static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v7, v10);
        v12 = v11;
        swift_release();
        result = swift_release();
        if ((v12 & 1) == 0)
          break;
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v13 = *v9;
        v7 = v9[1];
        *v9 = v7;
        v9[1] = v13;
        --v9;
        ++v8;
      }
      while (v4 != v8);
      ++v4;
      v6 += 8;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100024098(char *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char v35;
  BOOL v36;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;

  v4 = a4;
  v8 = (char *)a2 - a1;
  v9 = ((char *)a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 < v11)
  {
    sub_100078D34(a1, ((char *)a2 - a1) / 8, a4);
    v12 = (uint64_t *)a1;
    v13 = &v4[v9];
    if ((unint64_t)a2 < a3 && v8 > 7)
    {
      type metadata accessor for PasteboardRepresentation(0);
      v18 = a2;
      v19 = &v4[v9];
      v20 = v12;
      while (1)
      {
        v21 = *v18;
        v22 = *v4;
        swift_retain();
        swift_retain();
        static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v21, v22);
        v24 = v23;
        swift_release();
        swift_release();
        if ((v24 & 1) != 0)
          break;
        v25 = v4;
        v26 = v20 == v4++;
        if (!v26)
          goto LABEL_19;
LABEL_20:
        ++v20;
        if (v4 >= v19 || (unint64_t)v18 >= a3)
        {
          v15 = v20;
          goto LABEL_42;
        }
      }
      v25 = v18;
      v26 = v20 == v18++;
      if (v26)
        goto LABEL_20;
LABEL_19:
      *v20 = *v25;
      goto LABEL_20;
    }
    v15 = v12;
    goto LABEL_13;
  }
  sub_100078D34(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
  v16 = (unint64_t)a1;
  v13 = &v4[v11];
  v40 = v16;
  v17 = v16 >= (unint64_t)a2 || v10 <= 7;
  v15 = a2;
  if (v17)
  {
LABEL_13:
    v19 = v13;
    goto LABEL_42;
  }
  type metadata accessor for PasteboardRepresentation(0);
  v28 = (uint64_t *)(a3 - 8);
  v19 = &v4[v11];
  v39 = v4;
  do
  {
    v41 = v28 + 1;
    v29 = v19 - 1;
    v30 = *(v19 - 1);
    v31 = (unint64_t)v19;
    v32 = v15 - 1;
    v33 = *(v15 - 1);
    swift_retain();
    swift_retain();
    static PasteboardRepresentation.isInIncreasingOrder(_:_:)(v30, v33);
    v35 = v34;
    swift_release();
    swift_release();
    if ((v35 & 1) != 0)
    {
      v36 = v41 != v15 || v28 >= v15;
      --v15;
    }
    else
    {
      v36 = v41 != (uint64_t *)v31 || (unint64_t)v28 >= v31;
      v32 = v29;
      v31 = (unint64_t)v29;
    }
    v4 = v39;
    if (v36)
      *v28 = *v32;
    --v28;
    v19 = (uint64_t *)v31;
  }
  while ((unint64_t)v15 > v40 && v31 > (unint64_t)v39);
LABEL_42:
  sub_100078D34(v4, v19 - v4, v15);
  return 1;
}

uint64_t sub_1000242E4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "serializedRepresentation");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100024344(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "metadata");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

void sub_1000243AC(uint64_t a1, void *a2)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "setMetadata:", isa);

}

uint64_t sub_100024418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];
  uint64_t v69;
  _BYTE v70[24];

  v66 = a2;
  v67 = a1;
  v6 = type metadata accessor for PasteboardDataTransferID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PasteboardDataSession.ID(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v61 - v13;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  swift_beginAccess(a4 + 48, v70, 0, 0);
  v22 = *(_QWORD *)(a4 + 48);
  swift_bridgeObjectRetain(v22);
  sub_100041B84(a3, v22);
  v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v25 = sub_100006FB4(v15, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v25, v15);
    sub_100022838(a3, (uint64_t)v14, type metadata accessor for PasteboardDataSession.ID);
    v26 = v67;
    v27 = swift_unknownObjectRetain_n(v67, 2);
    v28 = Logger.logObject.getter(v27);
    v30 = static os_log_type_t.default.getter(v28, v29);
    if (os_log_type_enabled(v28, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v68[0] = v63;
      *(_DWORD *)v31 = 136446466;
      v62 = v31 + 4;
      sub_100022838(v67 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, (uint64_t)v8, type metadata accessor for PasteboardDataTransferID);
      v33 = UUID.uuidString.getter(v32);
      v35 = sub_1000599D0(8, v33, v34);
      v36 = static String._fromSubstring(_:)(v35);
      v64 = v16;
      v65 = v15;
      v37 = v36;
      v39 = v38;
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v8, type metadata accessor for PasteboardDataTransferID);
      v69 = sub_100006FCC(v37, v39, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v62);
      swift_release_n(v67, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2082;
      v40 = PasteboardDataSession.ID.label.getter();
      v69 = sub_100006FCC(v40, v41, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v31 + 14);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v14, type metadata accessor for PasteboardDataSession.ID);
      _os_log_impl((void *)&_mh_execute_header, v28, v30, "%{public}s: Provider added, session=%{public}s", (uint8_t *)v31, 0x16u);
      v42 = v63;
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v21, v65);
    }
    else
    {
      swift_release_n(v26, 2);
      sub_1000255F0((uint64_t)v14, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    }
    swift_beginAccess(v24 + 32, v68, 33, 0);
    swift_retain();
    sub_1000252E8();
    swift_endAccess(v68);
    return swift_release();
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v43 = sub_100006FB4(v15, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v43, v15);
    sub_100022838(a3, (uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
    v44 = v67;
    v45 = swift_unknownObjectRetain_n(v67, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(64, -1);
      v68[0] = v66;
      *(_DWORD *)v48 = 136446466;
      v63 = v48 + 4;
      sub_100022838(v44 + OBJC_IVAR____TtC13EnsembleAgent22PasteboardDataProvider_id, (uint64_t)v8, type metadata accessor for PasteboardDataTransferID);
      v50 = UUID.uuidString.getter(v49);
      v52 = sub_1000599D0(8, v50, v51);
      v53 = static String._fromSubstring(_:)(v52);
      v64 = v16;
      v65 = v15;
      v54 = v53;
      v56 = v55;
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v8, type metadata accessor for PasteboardDataTransferID);
      v69 = sub_100006FCC(v54, v56, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v63);
      swift_release_n(v44, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2082;
      v57 = PasteboardDataSession.ID.label.getter();
      v69 = sub_100006FCC(v57, v58, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v48 + 14);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s: Provider added to session that is not active, session=%{public}s", (uint8_t *)v48, 0x16u);
      v59 = v66;
      swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v19, v65);
    }
    else
    {
      swift_release_n(v44, 2);
      sub_1000255F0((uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);

      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    }
  }
}

uint64_t sub_100024AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  _BYTE v64[24];

  v61 = a2;
  v7 = type metadata accessor for PasteboardDataSession.ID(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v57 - v18;
  swift_beginAccess(a4 + 48, v64, 0, 0);
  v20 = *(_QWORD *)(a4 + 48);
  swift_bridgeObjectRetain(v20);
  sub_100041B84(a3, v20);
  v22 = v21;
  swift_bridgeObjectRelease();
  if (v22)
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v23 = sub_100006FB4(v13, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v23, v13);
    sub_100022838(a3, (uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
    v24 = swift_unknownObjectRetain_n(a1, 2);
    v25 = Logger.logObject.getter(v24);
    v27 = v14;
    v28 = static os_log_type_t.default.getter(v25, v26);
    if (os_log_type_enabled(v25, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v58 = v30;
      v62[0] = v30;
      *(_DWORD *)v29 = 136446466;
      v57 = v29 + 4;
      v59 = v27;
      v31 = UUID.uuidString.getter(v30);
      v33 = sub_1000599D0(8, v31, v32);
      v34 = static String._fromSubstring(_:)(v33);
      v60 = v13;
      v36 = v35;
      swift_bridgeObjectRelease();
      v63 = sub_100006FCC(v34, v36, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v57);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      v37 = PasteboardDataSession.ID.label.getter();
      v63 = sub_100006FCC(v37, v38, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v29 + 14);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);
      _os_log_impl((void *)&_mh_execute_header, v25, v28, "%{public}s: Provider added, session=%{public}s", (uint8_t *)v29, 0x16u);
      v39 = v58;
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v60);
    }
    else
    {
      swift_release_n(a1, 2);
      sub_1000255F0((uint64_t)v12, type metadata accessor for PasteboardDataSession.ID);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v13);
    }
    swift_beginAccess(v22 + 32, v62, 33, 0);
    swift_retain();
    sub_1000252E8();
    swift_endAccess(v62);
    return swift_release();
  }
  else
  {
    if (qword_1002A99A0 != -1)
      swift_once(&qword_1002A99A0, sub_1001A6F18);
    v40 = sub_100006FB4(v13, (uint64_t)qword_1002B7198);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v40, v13);
    sub_100022838(a3, (uint64_t)v10, type metadata accessor for PasteboardDataSession.ID);
    v41 = swift_unknownObjectRetain_n(a1, 2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v61 = v45;
      v62[0] = v45;
      *(_DWORD *)v44 = 136446466;
      v60 = v13;
      v46 = UUID.uuidString.getter(v45);
      v48 = sub_1000599D0(8, v46, v47);
      v49 = static String._fromSubstring(_:)(v48);
      v59 = v14;
      v50 = v49;
      v52 = v51;
      swift_bridgeObjectRelease();
      v63 = sub_100006FCC(v50, v52, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v44 + 4);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2082;
      v53 = PasteboardDataSession.ID.label.getter();
      v63 = sub_100006FCC(v53, v54, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v44 + 14);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v10, type metadata accessor for PasteboardDataSession.ID);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s: Provider added to session that is not active, session=%{public}s", (uint8_t *)v44, 0x16u);
      v55 = v61;
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v17, v60);
    }
    else
    {
      swift_release_n(a1, 2);
      sub_1000255F0((uint64_t)v10, type metadata accessor for PasteboardDataSession.ID);

      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    }
  }
}

uint64_t sub_1000250AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000262F8();
  sub_1000262CC();
  sub_100026364();

  sub_100026A7C();
  v1 = sub_10000E440();
  sub_100026628(v1);
  sub_100026A10();
  sub_100026A24();
  v2 = sub_100026978();
  return sub_1000264AC(v2, v3, v4);
}

uint64_t sub_100025110(uint64_t a1)
{
  uint64_t v1;

  sub_1000262F8();
  sub_100026868();
  sub_1000262CC();
  sub_1000264D8();
  return sub_10001B994(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100025168(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10002517C(result, a2);
  return result;
}

uint64_t sub_10002517C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000251C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000262F8();
  sub_1000262CC();
  sub_100026364();
  sub_100026600();
  v0 = sub_10000E440();
  sub_100026628(v0);
  sub_100026A10();
  sub_100026A24();
  v1 = sub_100026978();
  return sub_1000264AC(v1, v2, v3);
}

uint64_t sub_10002521C(uint64_t a1)
{
  sub_1000262F8();
  sub_1000262CC();
  sub_1000264D8();
  return sub_10001B94C(a1);
}

uint64_t sub_100025274()
{
  uint64_t v0;

  return sub_10001B7B8(*(_QWORD *)(v0 + 16), 32);
}

uint64_t sub_1000252AC()
{
  uint64_t v0;

  sub_1000265F8();
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000252CC()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  sub_1000050D4();
}

double sub_1000252E8()
{
  uint64_t *v0;
  _QWORD *v1;
  double result;
  uint64_t v3;

  sub_100026B94();
  swift_isUniquelyReferenced_nonNull_native(*v1);
  v3 = *v0;
  *v0 = 0x8000000000000000;
  sub_1000269E0();
  sub_10002534C();
  *v0 = v3;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_10002534C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = sub_1000262F8();
  sub_10000E490();
  __chkstk_darwin(v13);
  sub_100026500();
  sub_1000269B0();
  v16 = *(_QWORD *)(v0 + 16);
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = v14;
  v20 = v15;
  sub_1000055B0((uint64_t *)&unk_1002AA540);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v7 & 1, v18))
  {
    sub_1000269B0();
    if ((v20 & 1) == (v22 & 1))
    {
      v19 = v21;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return;
  }
LABEL_5:
  v23 = *v5;
  if ((v20 & 1) != 0)
  {
    v24 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v19);
    swift_unknownObjectRelease(*v24);
    *v24 = v11;
    v24[1] = v3;
  }
  else
  {
    sub_100022838(v9, v1, type metadata accessor for PasteboardDataTransferID);
    sub_100025454(v19, v1, v11, v23, v3);
  }
  sub_10000E4E0();
}

void sub_100025454(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;

  sub_100026960(a1, a4 + 8 * (a1 >> 6));
  v11 = *(_QWORD *)(v10 + 48);
  v12 = sub_1000262F8();
  sub_100025588(a2, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, type metadata accessor for PasteboardDataTransferID);
  v13 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * a1);
  *v13 = a3;
  v13[1] = a5;
  sub_1000264C0();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v14;
    sub_10002644C();
  }
}

uint64_t sub_1000254D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000262F8();
  sub_100026874();
  sub_10002688C();
  sub_100026600();
  v3 = sub_10000E440();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v1, v3);
  swift_release();
  sub_100026ADC(v0 + v2);
  v4 = sub_100026978();
  return sub_1000265A0(v4, v5, v6);
}

uint64_t sub_100025534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000262F8();
  sub_100026608();
  return sub_1000204D0(a1, *(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(uint8_t **)(v1 + v5), *(uint8_t **)(v1 + v5 + 8));
}

uint64_t sub_10002557C()
{
  return sub_1001A7170();
}

void sub_100025588(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100026944(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_1000050D4();
}

uint64_t sub_1000255BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_10001CDF0(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(unsigned __int8 *)(v3 + 40), *(_QWORD *)(v3 + 48), *(char **)(v3 + 56), *(char **)(v3 + 64));
}

void sub_1000255F0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_10002666C(v2);
  sub_1000050D4();
}

uint64_t sub_100025618(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100025624@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10001F658(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t, uint64_t, void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD), uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1);
}

uint64_t sub_100025648()
{
  uint64_t v0;

  sub_1000269A8();
  sub_1000265F8();
  sub_100026A7C();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100025678(uint64_t a1)
{
  _QWORD *v1;

  return sub_10001FCC8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100025684()
{
  return sub_10001FF14();
}

uint64_t sub_10002568C()
{
  return sub_10001FE84();
}

uint64_t sub_100025694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000256B4(void (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_10001EBC8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000256C0()
{
  return sub_10002586C();
}

uint64_t sub_1000256C8(void (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_10001F250(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_BYTE *)(v2 + 32), *(_BYTE *)(v2 + 33));
}

uint64_t sub_1000256D8()
{
  uint64_t v0;

  sub_1000269A8();
  return swift_deallocObject(v0, 26, 7);
}

uint64_t sub_1000256F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10001F35C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24), *(_BYTE *)(v4 + 25));
}

uint64_t sub_100025718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000268EC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_1000265F8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_1000265A0(v0, v5, v6);
}

void sub_100025778(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000268EC() - 8) + 80);
  sub_100016C30(a1, *(void (**)(_QWORD, unint64_t, id, uint64_t, id (*)(), uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1000257B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000268EC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 16) & ~v3), v1);
  v5 = sub_100026B88();
  return swift_deallocObject(v5, v6, v4);
}

id sub_10002580C()
{
  sub_1000268EC();
  return sub_100016E40();
}

uint64_t sub_100025834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000269A8();
  v0 = sub_100026988();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10002584C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10001ECB4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_10002586C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100026600();

  v1 = sub_100026B88();
  return swift_deallocObject(v1, v2, 7);
}

void sub_10002589C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v6;

  sub_10001EACC(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16));
}

void type metadata accessor for DocumentType(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA700, (uint64_t)&unk_100282110);
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA708, (uint64_t)&unk_100282138);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA6F8, (uint64_t)&unk_1002820E8);
}

void sub_1000258E0(void *a1, unsigned __int8 a2)
{
  if (a2 != 0xFF)
    sub_1000219C4(a1, a2);
}

id sub_1000258F4(id result, unsigned __int8 a2)
{
  if (a2 != 0xFF)
    return sub_100021990(result, a2);
  return result;
}

void sub_100025908()
{
  uint64_t v0;

  sub_100018340(v0, 8);
}

id sub_100025938(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

void sub_100025944(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void sub_100025950(uint64_t a1)
{
  uint64_t v1;

  sub_100017878(a1, v1);
}

void sub_100025958()
{
  uint64_t v0;

  sub_100018340(v0, 25);
}

uint64_t sub_10002598C()
{
  uint64_t v0;

  return sub_10001707C(v0);
}

uint64_t sub_100025994()
{
  uint64_t v0;

  return sub_1000172B0(v0);
}

void sub_10002599C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_10000DCA0(a2);
    atomic_store(sub_100026A38(v3), a1);
  }
  sub_1000050D4();
}

_QWORD *sub_1000259D0(_QWORD *a1)
{
  destroy for PasteboardCollection.State(a1);
  return a1;
}

void sub_1000259FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000055B0(a3);
  sub_1000265B0(v3);
  sub_1000050D4();
}

void sub_100025A28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_1000055B0(a2);
  sub_10002666C(v2);
  sub_1000050D4();
}

uint64_t sub_100025A50(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for IOHIDEvent(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA6F0, (uint64_t)&unk_1002820B8);
}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA710, (uint64_t)&unk_100282160);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA718, (uint64_t)&unk_100282188);
}

void type metadata accessor for CGRectEdge(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA720, (uint64_t)&unk_1002821B0);
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA728, (uint64_t)&unk_1002821D0);
}

void type metadata accessor for UniversalControlClientAssertion(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA730, (uint64_t)&unk_1002821F0);
}

uint64_t getEnumTagSinglePayload for Line(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Line(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA738, (uint64_t)&unk_100282270);
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
  sub_100025B50(a1, &qword_1002AA740, (uint64_t)&unk_1002822F0);
}

void sub_100025B50(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t getEnumTagSinglePayload for RTFConverter.Format(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RTFConverter.Format(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100025C68 + 4 * byte_10021BBBF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100025C9C + 4 * byte_10021BBBA[v4]))();
}

uint64_t sub_100025C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100025CACLL);
  return result;
}

uint64_t sub_100025CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100025CC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100025CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100025CD8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RTFConverter.Format()
{
  return &type metadata for RTFConverter.Format;
}

unint64_t sub_100025CF8()
{
  unint64_t result;

  result = qword_1002AA748;
  if (!qword_1002AA748)
  {
    result = swift_getWitnessTable(&unk_10021C5C8, &type metadata for RTFConverter.Format);
    atomic_store(result, (unint64_t *)&qword_1002AA748);
  }
  return result;
}

void sub_100025D34()
{
  sub_100021264(&qword_1002AA750, 255, (uint64_t (*)(uint64_t))type metadata accessor for UniversalControlClientAssertion);
}

void sub_100025D64()
{
  sub_100021264(&qword_1002AA758, 255, (uint64_t (*)(uint64_t))type metadata accessor for UniversalControlClientAssertion);
}

void sub_100025D94()
{
  sub_100021264(&qword_1002AA760, 255, (uint64_t (*)(uint64_t))type metadata accessor for UniversalControlClientAssertion);
}

void sub_100025DC4()
{
  sub_100021264(&qword_1002AA768, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

void sub_100025DF4()
{
  sub_100021264(&qword_1002AA770, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

void sub_100025E24()
{
  sub_100021264(&qword_1002AA778, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge);
}

void sub_100025E54()
{
  sub_100021264(&qword_1002AA780, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge);
}

void sub_100025E84()
{
  sub_100021264(&qword_1002AA788, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge);
}

void sub_100025EB4()
{
  sub_100021264(&qword_1002AA790, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIRectEdge);
}

void sub_100025EE4()
{
  sub_100021264(&qword_1002AA798, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
}

void sub_100025F14()
{
  sub_100021264(&qword_1002AA7A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
}

void sub_100025F44()
{
  sub_100021264(&qword_1002AA7A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType);
}

void sub_100025F74()
{
  sub_100021264(&qword_1002AA7B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType);
}

void sub_100025FA4()
{
  sub_100021264(&qword_1002AA7B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType);
}

void sub_100025FD4()
{
  sub_100021264(&qword_1002AA7C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
}

void sub_100026004()
{
  sub_100021264(&qword_1002AA7C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
}

void sub_100026034()
{
  sub_100021264(&qword_1002AA7D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey);
}

void sub_100026064()
{
  sub_100021264(&qword_1002AA7D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey);
}

void sub_100026094()
{
  sub_100021264(&qword_1002AA7E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000260C4(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  NSString v5;
  uint64_t v7;
  uint64_t v8;

  sub_100026934(a1, a2);
  v7 = 0;
  v8 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v7);
  if (v8)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return v4 & 1;
}

uint64_t sub_100026134(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  NSString v5;
  uint64_t v6;
  uint64_t v7;

  sub_100026934(a1, a2);
  v6 = 0;
  v7 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    v5 = sub_100026998();
    result = sub_10000E420();
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return result;
}

void sub_100026194(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  String._bridgeToObjectiveC()();
  sub_10000E410();
  sub_1000050D4();
}

uint64_t sub_100026284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

unint64_t sub_10002629C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1000262CC()
{
  return type metadata accessor for PasteboardDataSession.ID(0);
}

uint64_t sub_1000262F8()
{
  return type metadata accessor for PasteboardDataTransferID(0);
}

void sub_100026300(void *a1)
{
  free(a1);
}

uint64_t sub_100026308()
{
  return sub_10002586C();
}

void sub_100026310(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t sub_100026320(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  char v8;
  _BYTE *v9;

  v9[12] = a6;
  v9[13] = a7;
  v9[14] = a8;
  v9[15] = v8;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_100026344(uint64_t a1, unint64_t a2)
{
  return sub_1000599D0(8, a1, a2);
}

uint64_t sub_10002635C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

id sub_100026398(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(*(id *)(v4 - 328), a2, v2, 2, v3);
}

unint64_t sub_1000263B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t sub_1000263E4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1000263F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1, a3);
}

double _s13EnsembleAgent24PasteboardRepresentationC7contextAA0C15ContextProtocol_pSgvpfi_0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_10002640C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

BOOL sub_10002642C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002643C()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10002645C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100026464()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0, v1 - 104, 33, 0);
}

uint64_t sub_100026478(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

void sub_100026484(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_10002648C(float a1)
{
  float *v1;

  *v1 = a1;
  return sub_100015F3C();
}

uint64_t sub_1000264A0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_1000264AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000264CC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_100026530(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result) = a2;
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result) = a3;
  return result;
}

double _s13EnsembleAgent24DragPlatformProvider_iOSC15pointerLocationSo7CGPointVvpfi_0()
{
  return 0.0;
}

uint64_t sub_100026574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  va_arg(va1, _QWORD);
  v8 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v6, v5);
}

void *sub_100026590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
  return _Block_copy((const void *)(v1 - 304));
}

uint64_t sub_1000265A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000265B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_1000265C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
}

uint64_t sub_1000265E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, a3, a4);
}

void sub_1000265EC(void *a1)
{
  free(a1);
}

uint64_t sub_1000265F8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100026600()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100026628(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100026640(uint64_t a1, uint64_t a2)
{
  return DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
}

void sub_100026658(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 304) = a1;
  *(_QWORD *)(v1 - 296) = v2;
}

uint64_t sub_10002666C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100026680(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
}

uint64_t sub_100026694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1000266A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000266A8()
{
  uint64_t v0;

  return v0;
}

void sub_1000266C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100025588(v3, v5 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v4, a3);
}

uint64_t sub_1000266D8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 344));
}

uint64_t sub_1000266E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 136, v5 - 112, v4 + 8, a4, 6);
}

void sub_1000266F8(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  char v2;

  a2[1] = v2;
  a2[2] = BYTE2(a1);
  a2[3] = BYTE3(a1);
  a2[4] = BYTE4(a1);
}

uint64_t sub_100026754(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_100026760()
{
  return type metadata accessor for PasteboardAcquisitionError(0);
}

uint64_t sub_100026768()
{
  return Completion.callAsFunction(_:)(0);
}

uint64_t sub_100026774()
{
  return type metadata accessor for SignpostInterval(0);
}

uint64_t sub_10002677C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_100026788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_storeEnumTagMultiPayload(a2, v2, 7);
}

uint64_t sub_10002679C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000267A4()
{
  uint64_t v0;
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0, 1, v1);
}

void sub_1000267B4()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000267C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000267CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000267E4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_10002680C(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, 1, v1);
}

uint64_t sub_100026828(uint64_t a1)
{
  return *(_QWORD *)a1;
}

BOOL sub_100026840(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100026850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0);
}

uint64_t sub_100026860()
{
  uint64_t v0;

  return swift_endAccess(v0 - 104);
}

uint64_t sub_1000268A4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.count.getter(v1, v0);
}

void sub_1000268B4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000255F0(v2, a2);
}

uint64_t sub_1000268E4()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000268EC()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_1000268F4(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100026904(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100026924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

void sub_100026934(uint64_t a1, id *a2)
{

}

uint64_t sub_100026944(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_100026960@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_100026978()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100026988()
{
  uint64_t v0;

  return v0;
}

NSString sub_100026998()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000269A0()
{
  uint64_t v0;

  return swift_release(v0);
}

void sub_1000269A8()
{
  uint64_t v0;

}

void sub_1000269B0()
{
  uint64_t v0;

  sub_1001A8BD8(v0);
}

uint64_t sub_1000269BC(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t sub_1000269C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_1000269D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000269E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000269EC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000269F4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_100026A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100026A08@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100026A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);

  return v3(v0 + v2, v1);
}

void sub_100026A1C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

uint64_t sub_100026A24()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v0 + v1));
}

uint64_t sub_100026A2C(uint64_t a1)
{
  uint64_t v1;

  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

uint64_t sub_100026A38(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100026A44(uint64_t a1)
{
  uint64_t v1;

  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

void sub_100026A50(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  sub_100021264(a1, 255, a3);
}

uint64_t sub_100026A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2, a3);
}

void sub_100026A60(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100026A68()
{
  uint64_t v0;

  return UTType.conforms(to:)(v0);
}

uint64_t sub_100026A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100026A7C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100026A84@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100026AAC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

BOOL sub_100026AC0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100026AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100026AD0(uint64_t a1)
{
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, *(_QWORD *)(v1 - 344));
}

uint64_t sub_100026ADC@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100026AE4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100026AEC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100026AF4(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

void sub_100026AFC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = a1;
}

uint64_t sub_100026B08(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return sub_100006FCC(a1, a2, (uint64_t *)va);
}

uint64_t sub_100026B14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t sub_100026B20()
{
  return type metadata accessor for OSSignpostID(0);
}

uint64_t sub_100026B28()
{
  return type metadata accessor for OSSignposter(0);
}

uint64_t sub_100026B30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100026B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 192, a2, v4, a4);
}

uint64_t sub_100026B5C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(v0, 0);
}

uint64_t sub_100026B7C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 296));
}

uint64_t sub_100026B88()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100026BA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 272) = a2;
  *(_QWORD *)(v2 - 264) = result;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100026BBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Array(0);
  CGSize.init(_:)(v0);
}

void sub_100026BF4()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10000897C(v0, qword_1002B6D10);
  sub_100006FB4(v0, (uint64_t)qword_1002B6D10);
  Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1263421772, 0xE400000000000000);
  sub_1000050D4();
}

uint64_t static ReportID.button.getter()
{
  return 6;
}

void sub_100026C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[3];
  void *v32;
  Swift::String v33;

  v6 = (_QWORD *)v5;
  *(_QWORD *)(v5 + 24) = 0;
  swift_unknownObjectWeakInit(v5 + 16, 0);
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_BYTE *)(v5 + 128) = 3;
  *(_QWORD *)(v5 + 136) = 0;
  v31[0] = 541346115;
  v31[1] = 0xE400000000000000;
  LODWORD(v32) = CompanionLinkClient.id.getter();
  v12 = sub_10002D074();
  v33._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v32, 16, 1, &type metadata for UInt32, v12);
  sub_10002DA00(v33);
  v13 = sub_10002D89C();
  *(_QWORD *)(v5 + 32) = 541346115;
  *(_QWORD *)(v5 + 40) = 0xE400000000000000;
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 88) = a4;
  *(_QWORD *)(v5 + 96) = a5;
  *(_QWORD *)(v5 + 72) = a2;
  *(_QWORD *)(v5 + 80) = a3;
  sub_10002D82C(v13, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  sub_1000269EC();
  sub_10002D910();
  v14 = sub_10002D790();
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = sub_1000088D8((uint64_t)&unk_100282988, 32);
  *(_QWORD *)(v16 + 24) = &off_100282948;
  swift_unknownObjectWeakInit(v16 + 16, v6);
  swift_retain(v16);
  v17 = sub_1000C8454(v15, (uint64_t)sub_10002D0D4, v16);
  v19 = v18;
  swift_release(v16);
  sub_10002645C();
  v32 = v17;
  ObjectType = swift_getObjectType(a4);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 8) + 8))(ObjectType);
  v31[0] = v21;
  v22 = sub_1000088D8((uint64_t)&unk_1002829B0, 24);
  *(_QWORD *)(v22 + 16) = v19;
  v23 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v19, 2);
  v24 = Publisher<>.sink(receiveValue:)(sub_10002D100, v22, v23, &protocol witness table for ObservableObjectPublisher);
  swift_release(v22);
  AnyCancellable.store(in:)(&v32);
  swift_release(v21);
  sub_10002DA70();
  swift_release(v24);
  v25 = v32;
  swift_getObjectType(v19);
  swift_unknownObjectRetain(v19);
  swift_bridgeObjectRetain(v25);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_10002DA70();
  swift_bridgeObjectRelease(v25);
  v26 = v6[13];
  v27 = v6[14];
  v6[13] = v25;
  v6[14] = v19;
  swift_unknownObjectRetain(v19);
  swift_bridgeObjectRetain(v25);
  sub_10002D108(v26, v27);
  swift_beginAccess(a1 + 32, v31, 1, 0);
  *(_QWORD *)(a1 + 40) = &off_100282908;
  swift_unknownObjectWeakAssign(a1 + 32, v6);
  v28 = RapportStreamSession.session.getter();
  v29 = (*(uint64_t (**)(id))(*v6 + 208))(v28);
  objc_msgSend(v28, "setControlFlags:", v29, v31[0]);
  sub_10000FF50();
  swift_unknownObjectRelease(a4);

  v30 = v32;
  sub_10002DA70();
  swift_bridgeObjectRelease(v30);
  sub_10002DA50();
}

uint64_t sub_100026F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10002DA3C();
  v1 = *(_QWORD *)(v0 + 8);
  v2 = sub_1000088D8((uint64_t)&unk_1002829D8, 24);
  *(_QWORD *)(v2 + 16) = v1;
  v3 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v1, 2);
  Publisher<>.sink(receiveValue:)(sub_10002D6B4, v2, v3, &protocol witness table for ObservableObjectPublisher);
  sub_10000FF50();
  AnyCancellable.store(in:)(v0);
  swift_unknownObjectRelease(v1);
  return swift_release();
}

void sub_100026FE0()
{
  uint64_t v0;

  sub_100027738();
  sub_10000AEBC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  sub_10002D108(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  sub_10002D394(*(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128), (uint64_t (*)(void))&_swift_release);
  sub_1000050D4();
}

uint64_t sub_100027054()
{
  uint64_t v0;

  sub_100026FE0();
  return swift_deallocClassInstance(v0, 144, 7);
}

void sub_100027074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t aBlock[6];

  v1 = v0;
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v2 = sub_10000F6E4();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6D10);
  Logger.logObject.getter(v3);
  v4 = sub_10002D844();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (_DWORD *)sub_10000797C(12);
    v6 = sub_10000797C(32);
    aBlock[0] = v6;
    *v5 = 136315138;
    v12 = sub_100006FCC(0xD000000000000018, 0x8000000100253150, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, aBlock, v5 + 1);
    sub_10002D970((void *)&_mh_execute_header, v3, v4, "Requested Enhanced Discovery: %s");
    sub_1000263F4(v6, v7, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v6);
    sub_100007958((uint64_t)v5);
  }

  v8 = RapportStreamSession.session.getter();
  v9 = String._bridgeToObjectiveC()();
  v10 = sub_1000088D8((uint64_t)&unk_100282AF0, 24);
  swift_weakInit(v10 + 16, v1);
  aBlock[4] = (uint64_t)sub_10002D47C;
  aBlock[5] = v10;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10000AE08;
  aBlock[3] = (uint64_t)&unk_100282B08;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, "triggerEnhancedDiscoveryForReason:completion:", v9, v11);
  _Block_release(v11);

}

#error "100027374: call analysis failed (funcsize=79)"

unint64_t sub_1000273C4()
{
  return 0xD000000000000019;
}

void sub_1000273E0()
{
  _QWORD *v0;
  os_log_type_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v0;
  v3 = *v0;
  if (v3 == type metadata accessor for P2PLink())
  {
    v4 = RapportStreamSession.session.getter();
    v5 = objc_msgSend(v4, "rssiThreshold");

    v6 = UniversalControlPreferences.rssiThreshold.getter();
    if ((id)v6 != v5)
    {
      v7 = v6;
      if (qword_1002A9800 != -1)
        swift_once(&qword_1002A9800, sub_100026BF4);
      v8 = sub_10000F6E4();
      v9 = sub_100006FB4(v8, (uint64_t)qword_1002B6D10);
      v10 = sub_1000269EC();
      Logger.logObject.getter(v10);
      v11 = sub_10002D844();
      if (sub_10002D948(v11))
      {
        v12 = sub_10000797C(32);
        v27 = sub_10000797C(32);
        v29 = v27;
        *(_DWORD *)v12 = 136446722;
        v13 = v2[4];
        sub_10002D9F8();
        v28 = sub_10002DA28(v13, v14, &v29);
        sub_10002DA1C((uint64_t)&v28, v15, v16, v12 + 12);
        sub_10000FF50();
        v17 = sub_10002D89C();
        *(_WORD *)(v12 + 12) = 2048;
        v28 = (uint64_t)v5;
        v21 = sub_10002DA58(v17, v18, v12 + 14, v12 + 22, v19, v20);
        *(_WORD *)(v12 + 22) = 2048;
        v28 = v7;
        sub_10002DA58(v21, v22, v12 + 24, v12 + 32, v23, v24);
        _os_log_impl((void *)&_mh_execute_header, v9, v1, "%{public}s: Updating RSSI threshold from %ld to %ld", (uint8_t *)v12, 0x20u);
        sub_1000263F4(v27, v25, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v27);
        sub_100007958(v12);

      }
      else
      {

        sub_10000FF50();
      }
      v26 = RapportStreamSession.session.getter();
      objc_msgSend(v26, "setRssiThreshold:", v7);

    }
  }
}

uint64_t sub_1000275C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = type metadata accessor for Completions();
  v5 = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(v5 + 16) = _swiftEmptyArrayStorage;
  sub_1000C4E20(a1);
  swift_release(a1);
  *(_QWORD *)(v2 + 16) = v5;
  return v2;
}

uint64_t sub_100027628()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10002764C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a3 + 136) == a2)
  {
    v3 = result;
    if (result)
    {
      swift_errorRetain(result);
      sub_100027738(v3, 0);
      return swift_errorRelease(v3);
    }
    else
    {
      return sub_100027738(0, 3);
    }
  }
  return result;
}

_QWORD *sub_1000276AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v2 + 136);
  v5 = sub_1000088D8((uint64_t)&unk_100282AC8, 32);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = type metadata accessor for Completion();
  sub_1000088D8(v6, 48);
  swift_bridgeObjectRetain(a2);
  swift_retain(v2);
  v7 = sub_10002D928();
  return Completion.init(file:line:body:)(v7, v8, v9, v10, v5);
}

void sub_100027738()
{
  uint64_t v1;

  v1 = sub_10000F6E4();
  __chkstk_darwin(v1);
  sub_100026518();
  __asm { BR              X9 }
}

uint64_t sub_1000277AC()
{
  unsigned __int8 v0;

  return ((uint64_t (*)(void))((char *)sub_1000277C8 + 4 * byte_10021CE28[v0]))();
}

void sub_1000277C8()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;

  v4 = qword_1002A9800;
  v5 = sub_10002D9D4();
  if (v4 != -1)
    v5 = swift_once(&qword_1002A9800, sub_100026BF4);
  v6 = sub_10002D704(v5, (uint64_t)qword_1002B6D10);
  Logger.logObject.getter(v6);
  v7 = sub_10002D844();
  if (sub_1000103A0(v7))
  {
    v8 = (_DWORD *)sub_10000797C(12);
    v9 = sub_10000797C(32);
    *(_QWORD *)(v3 - 96) = v9;
    *v8 = 136446210;
    v10 = sub_10002D820();
    *(_QWORD *)(v3 - 112) = sub_10002D814(v10, v11, (uint64_t *)(v3 - 96));
    sub_10002DA64(v3 - 112, v3 - 104);
    sub_10002645C();
    sub_10002D860();
    sub_10002D970((void *)&_mh_execute_header, v4, v2, "%{public}s: CLink Activated");
    sub_1000263F4(v9, v12, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v9);
    sub_100007958((uint64_t)v8);

  }
  else
  {

    sub_10002645C();
  }
  v13 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 120) = v1;
  v14 = *(_BYTE *)(v0 + 128);
  *(_BYTE *)(v0 + 128) = 1;
  sub_1000269EC();
  sub_10002D394(v13, v14, (uint64_t (*)(void))&_swift_release);
  v15 = sub_1000276AC(0xD000000000000056, 0x8000000100253000);
  (*(void (**)(void))(*(_QWORD *)v0 + 352))();
  swift_release(v15);
  sub_10002D394(v1, 0, (uint64_t (*)(void))&_swift_release);
  sub_10002D394(v1, 0, (uint64_t (*)(void))&_swift_release);
  sub_10000E4E0();
}

uint64_t sub_1000283F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String *v6;
  Swift::String *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  uint64_t v14;
  Swift::String v15;

  sub_10002DA3C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v14 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(v8, 2);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  sub_10002DA00(v7[2]);
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v15._countAndFlagsBits = _typeName(_:qualified:)(v5, 0);
  object = v15._object;
  sub_10002DA00(v15);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = v3;
  v12._object = v1;
  String.append(_:)(v12);
  return v14;
}

void sub_10002849C()
{
  Completion.callAsFunction(_:)(0);
  sub_1000050D4();
}

void sub_1000284BC()
{
  sub_100027738();
}

uint64_t sub_1000284C8(objc_class *a1)
{
  NSObject *v1;
  os_log_type_t v2;
  NSObject *v3;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t isa;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v3 = v1;
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v5 = sub_10000F6E4();
  sub_100006FB4(v5, (uint64_t)qword_1002B6D10);
  v6 = sub_10002D744();
  Logger.logObject.getter(v6);
  v7 = sub_10002D844();
  if (sub_1000103A0(v7))
  {
    v8 = (uint8_t *)sub_10000797C(12);
    v9 = sub_10000797C(32);
    v19 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = sub_10002D820();
    v18 = sub_10002D814(v10, v11, &v19);
    sub_10002DA64((uint64_t)&v18, (uint64_t)&v19);
    sub_10002645C();
    sub_10002D860();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s: Canceling CLink", v8, 0xCu);
    sub_1000263F4(v9, v12, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v9);
    sub_100007958((uint64_t)v8);

  }
  else
  {

    sub_10002645C();
  }
  isa = (uint64_t)v1[15].isa;
  v3[15].isa = a1;
  v14 = (char)v3[16].isa;
  LOBYTE(v3[16].isa) = 2;
  sub_10002D908();
  sub_10002D394(isa, v14, (uint64_t (*)(void))&_swift_release);
  v15 = (uint64_t)v3[17].isa + 1;
  do
  {
    v16 = v15;
    v15 = 1;
  }
  while (!v16);
  v3[17].isa = (Class)v16;
  (*((void (**)(objc_class *))v3->isa + 47))(a1);
  CompanionLinkClient.cancel()();
  result = swift_unknownObjectWeakLoadStrong(&v3[2]);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t sub_100028680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_10002DA3C();
  if (*(_BYTE *)(v0 + 128) == 3 && *(_QWORD *)(v0 + 120) == 0)
  {
    v4 = sub_1000088D8((uint64_t)&unk_100282A28, 32);
    *(_QWORD *)(v4 + 16) = &sub_10002D250;
    *(_QWORD *)(v4 + 24) = v0;
    sub_10002D790();
    sub_10002D99C();
    CompanionLinkClient.registerEvent(id:options:handler:)();
    swift_release(v4);
    v5 = sub_1000088D8((uint64_t)&unk_100282A50, 32);
    *(_QWORD *)(v5 + 16) = &sub_10002D254;
    *(_QWORD *)(v5 + 24) = v0;
    sub_10002D790();
    sub_10002D99C();
    CompanionLinkClient.registerRequest(id:options:handler:)();
    return swift_release(v5);
  }
  else
  {
    result = sub_10002DA08((uint64_t)"Fatal error", 11, 2, 0xD00000000000002ALL, 0x80000001002530C0, (uint64_t)"EnsembleAgent/P2PLink.swift", v1, v2, 294, 0);
    __break(1u);
  }
  return result;
}

void sub_100028784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v3 = v2;
  v51 = a1;
  v5 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  v9 = __chkstk_darwin(v8);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for OSSignposter(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v20 = sub_100006FB4(v13, (uint64_t)qword_1002B6F70);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v20, v13);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
  swift_bridgeObjectRetain_n(a2, 4);
  v21 = swift_retain_n(v2, 2);
  v22 = static OSSignpostID.exclusive.getter(v21);
  v23 = OSSignposter.logHandle.getter(v22);
  v48 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    v45 = v12;
    v24(v50, v12, v53);
    v25 = swift_slowAlloc(32, -1);
    v47 = v5;
    v26 = v25;
    v44 = swift_slowAlloc(32, -1);
    v55[0] = v44;
    *(_DWORD *)v26 = 136315650;
    v46 = v7;
    v27 = *(_QWORD *)(v2 + 32);
    v28 = *(_QWORD *)(v3 + 40);
    swift_bridgeObjectRetain(v28);
    v54 = sub_100006FCC(v27, v28, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v26 + 4);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2048;
    swift_bridgeObjectRetain(a2);
    sub_10002B990(v29, &RPOptionLength);
    v31 = v30;
    swift_bridgeObjectRelease_n(a2, 2);
    v54 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v26 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2048;
    swift_bridgeObjectRetain(a2);
    sub_10002B990(v32, &RPOptionXID);
    v34 = v33;
    swift_bridgeObjectRelease_n(a2, 2);
    v54 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v26 + 24);
    swift_bridgeObjectRelease();
    v35 = v50;
    v37 = OSSignpostID.rawValue.getter(v36);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, (os_signpost_type_t)v48, v37, "recvmsg", "%s, bytes=%lu, xid=%lx", (uint8_t *)v26, 0x20u);
    v38 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v39 = v53;
    v40 = *(void (**)(char *, uint64_t))(v52 + 8);
    v40(v45, v53);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v40(v35, v39);
  }
  else
  {
    swift_release_n(v2, 2);

    v41 = swift_bridgeObjectRelease_n(a2, 4);
    (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v12, v53, v41);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  swift_retain();
  v42 = v51;
  swift_bridgeObjectRetain(v51);
  sub_10002A6E8(a2, v3, v3, v42);
}

uint64_t sub_100028C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[4];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v59 = a3;
  v57 = a1;
  v58 = a4;
  v61 = a2;
  v55 = type metadata accessor for Logger(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v51 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v48 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000055B0(&qword_1002B1CD0);
  v8 = __chkstk_darwin(v7);
  v54 = (char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v47 - v10;
  v12 = type metadata accessor for OSSignposter(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v47[2] = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)v47 - v16;
  v18 = type metadata accessor for SignpostInterval(0);
  v56 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v56 + 64);
  v20 = __chkstk_darwin(v18);
  v63 = (uint64_t)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v47 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)v47 - v25;
  __chkstk_darwin(v24);
  v62 = (uint64_t)v47 - v27;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v28 = sub_100006FB4(v12, (uint64_t)qword_1002B6F70);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v26, v28, v12);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v26, 0, 1, v12);
  v29 = &v26[*(int *)(v18 + 20)];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_WORD *)v29 + 8) = 256;
  v47[1] = v18;
  v30 = *(int *)(v18 + 24);
  *(_QWORD *)&v26[v30] = 0;
  sub_10002CA90((uint64_t)v26, (uint64_t)v11);
  v31 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v12);
  v47[3] = v13;
  v52 = v12;
  if (v31 == 1)
  {
    sub_10000E36C((uint64_t)v11, &qword_1002B1CD0);
    v32 = v60;
  }
  else
  {
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
    *(_QWORD *)v29 = "recvreq";
    *((_QWORD *)v29 + 1) = 7;
    *((_WORD *)v29 + 8) = 2;
    v34 = OSSignposter.logHandle.getter(v33);
    v35 = (uint64_t)v48;
    OSSignpostID.init(log:)(v34);
    v32 = v60;
    sub_10002BAD0((uint64_t)v17, "recvreq", 7, 2, v35, v61, v60);
    v37 = v36;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v35, v50);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    swift_release();
    *(_QWORD *)&v26[v30] = v37;
  }
  v38 = v62;
  sub_10002D134((uint64_t)v26, v62);
  sub_10002CAD8(v38, (uint64_t)v23);
  v39 = v63;
  sub_10002CAD8((uint64_t)v23, v63);
  v40 = *(unsigned __int8 *)(v56 + 80);
  v41 = (v40 + 32) & ~v40;
  v42 = (v19 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject(&unk_100282A78, v42 + 8, v40 | 7);
  v44 = v58;
  *(_QWORD *)(v43 + 16) = v59;
  *(_QWORD *)(v43 + 24) = v44;
  sub_10002D134((uint64_t)v23, v43 + v41);
  *(_QWORD *)(v43 + v42) = v32;
  swift_retain_n(v32, 2);
  v45 = v57;
  swift_bridgeObjectRetain(v57);
  swift_retain();
  swift_retain();
  sub_10002A7FC(v61, v32, v32, v45, (uint64_t (*)(uint64_t, _QWORD, id))sub_10002D2DC, v43);
  sub_10002CB1C(v39);
  sub_10002CB1C(v38);
  return swift_release();
}

const char *sub_100029268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const char *result;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint32_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint8_t *v49;
  const char *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint32_t v61;
  const char *v62;
  const char *v63;
  const char *v64;
  unsigned __int8 v65;
  unsigned __int8 v66;

  v53 = 0;
  v2 = type metadata accessor for OSSignpostError(0);
  __chkstk_darwin(v2);
  v55 = type metadata accessor for OSSignpostID(0);
  v54 = *(_QWORD *)(v55 - 8);
  v3 = __chkstk_darwin(v55);
  v52 = (uint64_t *)((char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - v5;
  v7 = type metadata accessor for OSSignposter(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C2FA4((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
  swift_retain();
  swift_retain();
  v14 = swift_release();
  v15 = static OSSignpostID.exclusive.getter(v14);
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = static os_signpost_type_t.event.getter();
  v18 = swift_allocObject(&unk_1002825B8, 17, 7);
  *(_BYTE *)(v18 + 16) = 32;
  v19 = swift_allocObject(&unk_1002825E0, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_100282608, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10002BACC;
  *(_QWORD *)(v20 + 24) = a1;
  v21 = swift_allocObject(&unk_100282630, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10002C974;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = sub_1000055B0(&qword_1002AA890);
  v23 = _allocateUninitializedArray<A>(_:)(3, v22);
  *v24 = sub_10002C968;
  v24[1] = v18;
  v24[2] = sub_10002D6B8;
  v24[3] = v19;
  v24[4] = sub_10002C97C;
  v24[5] = v21;
  sub_100026BBC();
  v25 = v23;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:

    (*(void (**)(char *, uint64_t))(v54 + 8))(v6, v55);
    return (const char *)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v66 = 2;
  v65 = 1;
  v63 = "sendmsg";
  result = "sendmsg";
  if ("sendmsg")
  {
    sub_10002C848((uint64_t)"sendmsg", &v64);
    v27 = v64;
    v62 = "%s";
    v28 = (uint64_t)v52;
    v46 = v66;
    v47 = v65;
    v29 = v16;
    v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 16))(v28, v6, v55);
    v51 = &v42;
    __chkstk_darwin(v30);
    *(&v42 - 6) = (uint64_t)v16;
    *((_BYTE *)&v42 - 40) = v17;
    *(&v42 - 4) = v28;
    *(&v42 - 3) = (uint64_t)v27;
    v50 = "%s";
    *(&v42 - 2) = (uint64_t)"%s";
    v60 = 12;
    sub_10002C984();
    v48 = v17;
    sub_10002C9C0();
    sub_10002C9FC();
    UnsignedInteger<>.init<A>(_:)(&v61, &v60);
    v45 = v61;
    v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12, &type metadata for UInt8);
    v32 = sub_1000055B0(&qword_1002AA8B0);
    v33 = sub_10002C8D8(0, v32, v32);
    v34 = sub_10002C8D8(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v49 = v31;
    v59 = v31;
    v44 = v33;
    v58 = v33;
    v43 = v34;
    v57 = v34;
    v35 = v27;
    sub_100006F04(v46, &v59);
    v36 = sub_100006F04(v47, &v59);
    v56 = v25;
    v42 = (uint64_t)&v42;
    __chkstk_darwin(v36);
    *(&v42 - 4) = (uint64_t)&v59;
    *(&v42 - 3) = (uint64_t)&v58;
    *(&v42 - 2) = (uint64_t)&v57;
    v37 = sub_1000055B0(&qword_1002AA8B8);
    v38 = sub_10002CA4C();
    v39 = v37;
    v40 = &v56;
    v41 = v53;
    Sequence.forEach(_:)(sub_10002CA38, &v42 - 6, v39, v38);
    if (v41)
    {
      __break(1u);
    }
    else
    {
      v40 = v52;
      sub_10002C858(v49, v45, v16, (os_signpost_type_t)v48, (uint64_t)v52, v35, v50);
    }
    sub_10002C928(v44, 0);
    sub_10002C928(v43, 1);
    UnsafeMutablePointer.deallocate()();

    (*(void (**)(uint64_t *, uint64_t))(v54 + 8))(v40, v55);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100029840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;

  v31 = a2;
  v29 = type metadata accessor for OSSignpostID(0);
  v28 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000055B0(&qword_1002B1CD0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v27 - v19;
  v30 = a1;
  swift_retain();
  v21 = sub_1000C3080();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v20, v21, v14);
  v22(v10, (uint64_t)v20, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  v32 = 0;
  v33 = 0;
  v34 = 256;
  sub_1000C30C4((uint64_t)v10, 0, 0, 256, 0, (uint64_t)v13);
  sub_10002CA90((uint64_t)v13, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14) == 1)
  {
    sub_10000E36C((uint64_t)v8, &qword_1002B1CD0);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v8, v14);
    v24 = &v13[*(int *)(v11 + 20)];
    *(_QWORD *)v24 = "sendreq";
    *((_QWORD *)v24 + 1) = 7;
    v24[16] = 2;
    v24[17] = 0;
    OSSignposter.makeSignpostID()(v23);
    v25 = sub_10002C158((uint64_t)v18, "sendreq", 7, 2, (uint64_t)v4, v30);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    *(_QWORD *)&v13[*(int *)(v11 + 24)] = v25;
    swift_release();
  }
  sub_10002CAD8((uint64_t)v13, v31);
  sub_10002CB1C((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  return swift_release();
}

void sub_100029B4C(uint64_t a1, uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Class v53;
  uint64_t v54;

  v7 = v6;
  v48 = a5;
  v49 = a6;
  v52 = a3;
  v53 = a4;
  v50 = a1;
  v51 = a2;
  v8 = type metadata accessor for OSSignpostID(0);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  sub_10002641C();
  v40 = v10 - v9;
  v11 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v11);
  sub_10002641C();
  v14 = v13 - v12;
  v15 = sub_100026B28();
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100026518();
  v17 = sub_100026774();
  v43 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v43 + 64);
  __chkstk_darwin(v17);
  v44 = (uint64_t)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v39 - v20;
  __chkstk_darwin(v22);
  v47 = (uint64_t)&v39 - v23;
  v24 = v6[9];
  v45 = v6[10];
  v46 = v24;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v25 = sub_100006FB4(v15, (uint64_t)qword_1002B6F70);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v25, v15);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v21, 0, 1, v15);
  v26 = &v21[*(int *)(v17 + 20)];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_WORD *)v26 + 8) = 256;
  v27 = *(int *)(v17 + 24);
  *(_QWORD *)&v21[v27] = 0;
  sub_10002CA90((uint64_t)v21, v14);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v14, 1, v15) == 1)
  {
    sub_10000E36C(v14, &qword_1002B1CD0);
  }
  else
  {
    v28 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 32))(v6, v14, v15);
    *(_QWORD *)v26 = "sendreq";
    *((_QWORD *)v26 + 1) = 7;
    *((_WORD *)v26 + 8) = 2;
    v29 = OSSignposter.logHandle.getter(v28);
    v30 = v40;
    OSSignpostID.init(log:)(v29);
    v31 = sub_10002C158((uint64_t)v6, "sendreq", 7, 2, v30, (uint64_t)v6);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v30, v42);
    (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v6, v15);
    swift_release();
    *(_QWORD *)&v21[v27] = v31;
  }
  v32 = v47;
  sub_10002D134((uint64_t)v21, v47);
  v54 = v6[6];
  v33 = v44;
  sub_10002CAD8(v32, v44);
  v34 = *(unsigned __int8 *)(v43 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = (_QWORD *)swift_allocObject(&unk_100282A00, v35 + v18, v34 | 7);
  v37 = v48;
  v38 = v49;
  v36[2] = v7;
  v36[3] = v37;
  v36[4] = v38;
  sub_10002D134(v33, (uint64_t)v36 + v35);
  type metadata accessor for CompanionLinkClient();
  sub_10002D744();
  swift_retain();
  sub_1000269EC();
  RapportMessageable.sendRequest(id:request:destinationID:options:response:)(v46, v45, v50, v51, v52, v53);
  swift_release();
  swift_release();
  sub_10002CB1C(v32);
  sub_10000E4E0();
}

void sub_100029E98(void (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;

  v11 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v11);
  sub_10002641C();
  v14 = v13 - v12;
  v15 = sub_100026B28();
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10002641C();
  v19 = v18 - v17;
  sub_10002CA90(a3, v14);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v14, 1, v15) == 1)
  {
    sub_10000E36C(v14, &qword_1002B1CD0);
    if (!a6)
      goto LABEL_16;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v19, v14, v15);
  v20 = sub_100026774();
  v21 = a3 + *(int *)(v20 + 20);
  if ((*(_BYTE *)(v21 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v22 = *(_QWORD *)(a3 + *(int *)(v20 + 24));
    if (v22)
    {
      sub_10002C3E8(v19, *(const char **)v21, *(_QWORD *)(v21 + 8), *(unsigned __int8 *)(v21 + 16), v22, a5, v6);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
      if (!a6)
      {
LABEL_16:
        a1(a4, a5, a6);
        sub_10000E4E0();
        return;
      }
LABEL_7:
      v23 = (void *)_convertErrorToNSError(_:)(a6);
      v24 = objc_msgSend(v23, "domain");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPErrorDomain);
      if (v25 == v28 && v27 == v29)
      {
        swift_bridgeObjectRelease_n(v27, 2);
      }
      else
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
        sub_10002D89C();
        sub_10002D860();
        if ((v31 & 1) == 0)
          goto LABEL_15;
      }
      v32 = v23;
      sub_100027738();

LABEL_15:
      goto LABEL_16;
    }
  }
  __break(1u);
}

void sub_10002A09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD v19[4];

  v3 = v2;
  v6 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v19[2] = a2;
  v19[3] = a1;
  sub_10002CA90(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000E36C((uint64_t)v8, &qword_1002B1CD0);
LABEL_9:
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v13 = type metadata accessor for SignpostInterval(0);
  v14 = v3 + *(int *)(v13 + 20);
  v15 = *(const char **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 16);
  if ((*(_BYTE *)(v14 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v3 + *(int *)(v13 + 24));
    swift_retain();
    if (v18)
    {
      sub_10002C3E8((uint64_t)v12, v15, v16, v17, v18, a2, a1);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

void sub_10002A29C()
{
  sub_1000284BC();
}

uint64_t sub_10002A2C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;

  v4[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  v4[1] = v2;
  AnyHashable.init<A>(_:)(v5, v4);
  sub_100041C8C(a1, &v6);
  sub_10000E410();
  sub_10002D33C((uint64_t)v5);
  if (v7)
  {
    if ((swift_dynamicCast(v4, &v6, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      return v4[0];
  }
  else
  {
    sub_10000E36C((uint64_t)&v6, &qword_1002B34C0);
  }
  return 0;
}

uint64_t sub_10002A384()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
  qword_1002B6D28 = result;
  unk_1002B6D30 = v1;
  return result;
}

void sub_10002A3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
  {
    v6 = *(_QWORD *)(v2 + 64);
    ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 56));
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8);
    swift_unknownObjectRetain(v3);
    v8(a1, a2, ObjectType, v6);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    sub_10002D8A4();
  }
}

void sub_10002A430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    sub_10002D804();
    sub_10002D910();
    sub_10002D784(v0);
    sub_10002D734(v2);
  }
  else
  {
    sub_10002644C();
  }
}

void sub_10002A47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    sub_10002D804();
    sub_10002D910();
    sub_10002D784(v0);
    sub_10002D734(v2);
  }
  else
  {
    sub_10002644C();
  }
}

void sub_10002A4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002DA3C();
  if (*(_QWORD *)(v10 + 56))
  {
    sub_10002D7D4();
    sub_10002D988();
    sub_10002D784(v11);
    v12 = sub_10000F718();
  }
  sub_10002D82C(v12, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_10002D938();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v13, v14, v15, v16, v17, v18, 423);
  sub_10002D834();
  sub_10002D720(a10);
}

void sub_10002A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002DA3C();
  if (*(_QWORD *)(v10 + 56))
  {
    sub_10002D7D4();
    sub_10002D988();
    sub_10002D784(v11);
    v12 = sub_10000F718();
  }
  sub_10002D82C(v12, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_10002D938();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v13, v14, v15, v16, v17, v18, 429);
  sub_10002D834();
  sub_10002D720(a10);
}

void sub_10002A5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002DA3C();
  if (*(_QWORD *)(v10 + 56))
  {
    sub_10002D7D4();
    sub_10002D988();
    sub_10002D784(v11);
    v12 = sub_10000F718();
  }
  sub_10002D82C(v12, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_10002D938();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v13, v14, v15, v16, v17, v18, 435);
  sub_10002D834();
  sub_10002D720(a10);
}

void sub_10002A680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    sub_10002D804();
    sub_10002D910();
    sub_10002D784(v0);
    sub_10002D734(v2);
  }
  else
  {
    sub_10002644C();
  }
}

void sub_10002A6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  if (a1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (Strong)
    {
      v8 = Strong;
      swift_bridgeObjectRetain(a1);
      v10 = sub_10002A2C4(v9);
      if (v11)
      {
        sub_1000FEFDC(a3, a4, v10, v11);
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease(v8);
        swift_bridgeObjectRelease();
        return;
      }
      swift_unknownObjectRelease(v8);
    }
  }
  sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v12 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6714, 0xD000000000000018, 0x80000001002530F0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PLink.swift", 86, 2, 454);
  swift_willThrow(v12);
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_10002A7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, id), uint64_t a6)
{
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (a1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (Strong)
    {
      v12 = Strong;
      swift_bridgeObjectRetain(a1);
      v14 = sub_10002A2C4(v13);
      if (v15)
      {
        v16 = v14;
        v17 = v15;
        swift_retain();
        sub_1000FF580(a3, a4, v16, v17, v12, a5, a6);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_unknownObjectRelease(v12);
        swift_bridgeObjectRelease();
        return;
      }
      swift_unknownObjectRelease(v12);
    }
  }
  sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v18 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6714, 0xD000000000000018, 0x80000001002530F0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PLink.swift", 86, 2, 454);
  swift_willThrow(v18);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
}

const char *sub_10002A944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  uint64_t v37;
  const char *result;
  const char *v39;
  _BYTE *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  _BYTE v58[12];
  uint32_t v59;
  const char *v60;
  _BYTE *v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint32_t v77;
  const char *v78;
  const char *v79;
  const char *v80;
  unsigned __int8 v81;
  unsigned __int8 v82;

  v64 = 0;
  v4 = type metadata accessor for OSSignpostError(0);
  __chkstk_darwin(v4);
  v71 = type metadata accessor for OSSignpostID(0);
  v70 = *(_QWORD *)(v71 - 8);
  v5 = __chkstk_darwin(v71);
  v65 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v8 = &v58[-v7];
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v13);
  v15 = &v58[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C2FA4((uint64_t)v15);
  v67 = v10;
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v68 = v9;
  v16(v12, v15, v9);
  swift_retain();
  swift_retain();
  swift_release();
  swift_bridgeObjectRetain(a2);
  v17 = swift_allocObject(&unk_100282658, 24, 7);
  *(_QWORD *)(v17 + 16) = a2;
  swift_retain();
  swift_release();
  swift_bridgeObjectRetain(a2);
  v18 = swift_allocObject(&unk_100282680, 24, 7);
  *(_QWORD *)(v18 + 16) = a2;
  swift_retain();
  v19 = swift_release();
  v69 = v8;
  v20 = static OSSignpostID.exclusive.getter(v19);
  v66 = v12;
  v62 = OSSignposter.logHandle.getter(v20);
  v63 = static os_signpost_type_t.event.getter();
  v21 = swift_allocObject(&unk_1002826A8, 17, 7);
  *(_BYTE *)(v21 + 16) = 32;
  v22 = swift_allocObject(&unk_1002826D0, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_1002826F8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_10002BACC;
  *(_QWORD *)(v23 + 24) = a1;
  v24 = swift_allocObject(&unk_100282720, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10002D6A8;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_100282748, 17, 7);
  *(_BYTE *)(v25 + 16) = 0;
  v26 = swift_allocObject(&unk_100282770, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_100282798, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10002CB74;
  *(_QWORD *)(v27 + 24) = v17;
  v28 = swift_allocObject(&unk_1002827C0, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10002CE38;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_1002827E8, 17, 7);
  *(_BYTE *)(v29 + 16) = 0;
  v30 = swift_allocObject(&unk_100282810, 17, 7);
  *(_BYTE *)(v30 + 16) = 8;
  v31 = swift_allocObject(&unk_100282838, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_10002CB94;
  *(_QWORD *)(v31 + 24) = v18;
  v32 = swift_allocObject(&unk_100282860, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10002D6AC;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = sub_1000055B0(&qword_1002AA890);
  v34 = _allocateUninitializedArray<A>(_:)(9, v33);
  *v35 = sub_10002D6B8;
  v35[1] = v21;
  v35[2] = sub_10002D6B8;
  v35[3] = v22;
  v35[4] = sub_10002D6B0;
  v35[5] = v24;
  v35[6] = sub_10002D6B8;
  v35[7] = v25;
  v35[8] = sub_10002D6B8;
  v35[9] = v26;
  v35[10] = sub_10002CE5C;
  v35[11] = v28;
  v36 = v62;
  v35[12] = sub_10002D6B8;
  v35[13] = v29;
  v35[14] = sub_10002D6B8;
  v35[15] = v30;
  v35[16] = sub_10002CE5C;
  v35[17] = v32;
  sub_100026BBC();
  v37 = v34;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:

    (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v69, v71);
    return (const char *)(*(uint64_t (**)(_BYTE *, uint64_t))(v67 + 8))(v66, v68);
  }
  v82 = 2;
  v81 = 3;
  v79 = "recvmsg";
  result = "recvmsg";
  if ("recvmsg")
  {
    sub_10002C848((uint64_t)"recvmsg", &v80);
    v39 = v80;
    v78 = "%s, bytes=%lu, xid=%lx";
    v40 = v65;
    v41 = v63;
    v42 = v82;
    v43 = v81;
    v44 = v36;
    v45 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v70 + 16))(v40, v69, v71);
    v61 = v58;
    __chkstk_darwin(v45);
    *(_QWORD *)&v58[-48] = v36;
    v58[-40] = v41;
    *(_QWORD *)&v58[-32] = v40;
    *(_QWORD *)&v58[-24] = v39;
    v60 = "%s, bytes=%lu, xid=%lx";
    *(_QWORD *)&v58[-16] = "%s, bytes=%lu, xid=%lx";
    v76 = 32;
    sub_10002C984();
    sub_10002C9C0();
    sub_10002C9FC();
    UnsignedInteger<>.init<A>(_:)(&v77, &v76);
    v59 = v77;
    v46 = (_BYTE *)static UnsafeMutablePointer.allocate(capacity:)(32, &type metadata for UInt8);
    v47 = sub_1000055B0(&qword_1002AA8B0);
    v48 = sub_10002C8D8(0, v47, v47);
    v49 = sub_10002C8D8(1, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
    v75 = v46;
    v74 = v48;
    v73 = v49;
    v50 = v39;
    sub_100006F04(v42, &v75);
    v51 = sub_100006F04(v43, &v75);
    v72 = v37;
    v52 = v58;
    __chkstk_darwin(v51);
    *(_QWORD *)&v58[-32] = &v75;
    *(_QWORD *)&v58[-24] = &v74;
    *(_QWORD *)&v58[-16] = &v73;
    v53 = sub_1000055B0(&qword_1002AA8B8);
    v54 = sub_10002CA4C();
    v55 = v53;
    v56 = &v72;
    v57 = v64;
    Sequence.forEach(_:)(sub_10002CA38, &v58[-48], v55, v54);
    if (v57)
    {
      __break(1u);
    }
    else
    {
      v56 = v62;
      v52 = v65;
      sub_10002C858(v46, v59, v62, (os_signpost_type_t)v63, (uint64_t)v65, v50, v60);
    }
    sub_10002C928(v48, 0);
    sub_10002C928(v49, 1);
    UnsafeMutablePointer.deallocate()();

    (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v52, v71);
    swift_bridgeObjectRelease();
    v36 = v56;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B160(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  return v1;
}

uint64_t sub_10002B18C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  v35 = a3;
  v34 = type metadata accessor for OSSignpostID(0);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000055B0(&qword_1002B1CD0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v31 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v31);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v30 - v19;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v36 = a2;
  v37 = a1;
  v21 = sub_1000C3080();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v20, v21, v14);
  v22(v11, (uint64_t)v20, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
  v38 = 0;
  v39 = 0;
  v40 = 256;
  sub_1000C30C4((uint64_t)v11, 0, 0, 256, 0, (uint64_t)v13);
  sub_10002CA90((uint64_t)v13, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    sub_10000E36C((uint64_t)v9, &qword_1002B1CD0);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v9, v14);
    v24 = v31;
    v25 = &v13[*(int *)(v31 + 20)];
    *(_QWORD *)v25 = "recvreq";
    *((_QWORD *)v25 + 1) = 7;
    v25[16] = 2;
    v25[17] = 0;
    v26 = (uint64_t)v32;
    OSSignposter.makeSignpostID()(v23);
    sub_10002BAD0((uint64_t)v18, "recvreq", 7, 2, v26, a2, a1);
    v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v26, v34);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    *(_QWORD *)&v13[*(int *)(v24 + 24)] = v28;
    swift_release();
  }
  sub_10002CAD8((uint64_t)v13, v35);
  sub_10002CB1C((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_10002B4B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a7;
  v12 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OSSignposter(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(a1, a2, a3);
  sub_10002CA90(a6, (uint64_t)v14);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v14, 1, v15) == 1)
  {
    sub_10000E36C((uint64_t)v14, &qword_1002B1CD0);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  v19 = type metadata accessor for SignpostInterval(0);
  v20 = a6 + *(int *)(v19 + 20);
  if ((*(_BYTE *)(v20 + 17) & 1) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v21 = *(_QWORD *)(a6 + *(int *)(v19 + 24));
  if (!v21)
  {
LABEL_8:
    __break(1u);
    return;
  }
  sub_10002BE1C((uint64_t)v18, *(const char **)v20, *(_QWORD *)(v20 + 8), *(unsigned __int8 *)(v20 + 16), v21, v23);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void sub_10002B630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_10002CA90(v1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000E36C((uint64_t)v5, &qword_1002B1CD0);
LABEL_9:
    swift_release();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v10 = type metadata accessor for SignpostInterval(0);
  v11 = v1 + *(int *)(v10 + 20);
  v12 = *(const char **)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 16);
  if ((*(_BYTE *)(v11 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + *(int *)(v10 + 24));
    swift_retain();
    if (v15)
    {
      sub_10002BE1C((uint64_t)v9, v12, v13, v14, v15, a1);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t sub_10002B800(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, _QWORD, id))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;

  v6 = sub_1000055B0(&qword_1002AAB98);
  if ((a2 & 1) == 0)
    return a3(a1, 0, 0);
  v8 = v6;
  v21 = a1;
  swift_errorRetain(a1);
  v9 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  v10 = sub_10002D82C(v9, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  if (swift_dynamicCast(&v20, &v21, v9, v10, 0))
  {
    v11 = v20;
    v12 = objc_msgSend(v20, "domain");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = objc_msgSend(v11, "code");
    v17 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v18 = objc_allocWithZone((Class)NSError);
    v19 = sub_100087344(v13, v15, (uint64_t)v16, v17);
    a3(0, 0, v19);

    return swift_errorRelease(v21);
  }
  else
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v8, v8);
    __break(1u);
  }
  return result;
}

void sub_10002B990(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];
  __int128 v14;
  __int128 v15;

  if (!a1)
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_5;
  }
  *(_QWORD *)&v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
  *((_QWORD *)&v14 + 1) = v2;
  v3 = sub_10002D97C(v14, &type metadata for String, &protocol witness table for String);
  sub_10002D918((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v11, v13[0], v13[1], v13[2], v13[3], v13[4], v14);
  sub_10002D33C((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_5:
    sub_10000E36C((uint64_t)&v14, &qword_1002B34C0);
    goto LABEL_6;
  }
  sub_10002D8F4((uint64_t)&type metadata for UInt, (uint64_t)&type metadata for Any, v12);
LABEL_6:
  sub_10002DA50();
}

void sub_10002BA24(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  __int128 v17;
  __int128 v18;

  if (!a1)
  {
    v17 = 0u;
    v18 = 0u;
    goto LABEL_5;
  }
  *(_QWORD *)&v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
  *((_QWORD *)&v17 + 1) = v3;
  *(_QWORD *)&v4 = swift_bridgeObjectRetain(a1).n128_u64[0];
  v6 = sub_10002D97C(v5, &type metadata for String, &protocol witness table for String, v4);
  sub_10002D918((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v14, v16[0], v16[1], v16[2], v16[3], v16[4], v17);
  sub_10002D33C((uint64_t)v16);
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_5:
    sub_10000E36C((uint64_t)&v17, &qword_1002B34C0);
    goto LABEL_6;
  }
  sub_10002D8F4((uint64_t)&type metadata for UInt, (uint64_t)&type metadata for Any, v15);
LABEL_6:
  sub_10000E410();
  sub_10002DA50();
}

void sub_10002BAD0(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_signpost_id_t v31;
  __n128 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v12 = type metadata accessor for OSSignpostID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain_n(a6, 4);
  v16 = swift_retain_n(a7, 2);
  v17 = OSSignposter.logHandle.getter(v16);
  v38 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_release_n(a7, 2);

    v18 = swift_bridgeObjectRelease_n(a6, 4);
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a5, v12, v18);
LABEL_11:
    v33 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    OSSignpostIntervalState.init(id:isOpen:)(v15, 1);
    return;
  }
  if ((a4 & 1) != 0)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a2 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (a2 >> 16 <= 0x10)
      {
        v34 = &v41;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (a2)
  {
    v34 = a2;
LABEL_10:
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v36(v15, a5, v12);
    v19 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(32, -1);
    v40 = v20;
    *(_DWORD *)v19 = 136315650;
    v37 = a5;
    v35 = v13;
    v21 = *(_QWORD *)(a7 + 32);
    v22 = *(_QWORD *)(a7 + 40);
    swift_bridgeObjectRetain(v22);
    v39 = sub_100006FCC(v21, v22, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 4);
    swift_release_n(a7, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2048;
    swift_bridgeObjectRetain(a6);
    sub_10002B990(v23, &RPOptionLength);
    v25 = v24;
    swift_bridgeObjectRelease_n(a6, 2);
    v39 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2048;
    swift_bridgeObjectRetain(a6);
    sub_10002B990(v26, &RPOptionXID);
    v28 = v27;
    swift_bridgeObjectRelease_n(a6, 2);
    v39 = v28;
    v29 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 24);
    swift_bridgeObjectRelease();
    v31 = OSSignpostID.rawValue.getter(v30);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v38, v31, v34, "%s, bytes=%lu, xid=%lx", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v12);
    ((void (*)(char *, uint64_t, uint64_t, __n128))v36)(v15, v29, v12, v32);
    goto LABEL_11;
  }
LABEL_15:
  swift_release_n(a7, 2);
  swift_bridgeObjectRelease_n(a6, 4);
  __break(1u);
}

uint64_t sub_10002BE1C(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_signpost_id_t v31;
  os_log_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  LODWORD(v39) = a4;
  v40 = (char *)a2;
  v7 = type metadata accessor for OSSignpostError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v38 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - v15;
  swift_retain();
  v18 = OSSignposter.logHandle.getter(v17);
  v19 = OSSignpostIntervalState.signpostID.getter();
  v37 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  v35 = v18;
  v36 = v12;
  if ((v39 & 1) != 0)
  {
    if ((unint64_t)v40 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v40 >> 11 == 27)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      if (v40 >> 16 <= 0x10)
      {
        v20 = v11;
        v40 = &v43;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  if (!v40)
  {
LABEL_18:
    result = swift_release();
    __break(1u);
    return result;
  }
  v20 = v11;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)(v22);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v10, v7) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v23 = 0;
    v24 = 0;
    v39 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v39 = "%s";
    v24 = 2;
    v23 = 1;
  }
  v25 = v38;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v38, v16, v20);
  v26 = swift_slowAlloc(12, -1);
  v27 = swift_slowAlloc(32, -1);
  v42 = v27;
  *(_BYTE *)v26 = v24;
  *(_BYTE *)(v26 + 1) = v23;
  *(_WORD *)(v26 + 2) = 2080;
  v29 = *(_QWORD *)(a6 + 32);
  v28 = *(_QWORD *)(a6 + 40);
  swift_bridgeObjectRetain(v28);
  v41 = sub_100006FCC(v29, v28, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 4);
  swift_release();
  swift_bridgeObjectRelease();
  v31 = OSSignpostID.rawValue.getter(v30);
  v32 = v35;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, (os_signpost_type_t)v37, v31, v40, v39, (uint8_t *)v26, 0xCu);
  swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v27, -1, -1);
  swift_slowDealloc(v26, -1, -1);

  v33 = *(void (**)(char *, uint64_t))(v36 + 8);
  v33(v16, v20);
  return ((uint64_t (*)(char *, uint64_t))v33)(v25, v20);
}

uint64_t sub_10002C158(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_signpost_id_t v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v10 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_retain_n(a6, 2);
  v15 = OSSignposter.logHandle.getter(v14);
  v16 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_release_n(a6, 2);

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
LABEL_11:
    v24 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    return OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  }
  v30 = v16;
  if ((a4 & 1) != 0)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a2 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (a2 >> 16 <= 0x10)
      {
        v26 = &v33;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (a2)
  {
    v26 = a2;
LABEL_10:
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v28(v13, a5, v10);
    v29 = a5;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v32 = v18;
    *(_DWORD *)v17 = 136315138;
    v27 = v11;
    v20 = *(_QWORD *)(a6 + 32);
    v19 = *(_QWORD *)(a6 + 40);
    swift_bridgeObjectRetain(v19);
    v31 = sub_100006FCC(v20, v19, &v32);
    v21 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4);
    swift_release_n(a6, 2);
    swift_bridgeObjectRelease();
    v23 = OSSignpostID.rawValue.getter(v22);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, (os_signpost_type_t)v30, v23, v26, "%s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
    v28(v13, v21, v10);
    goto LABEL_11;
  }
LABEL_15:
  result = swift_release_n(a6, 2);
  __break(1u);
  return result;
}

uint64_t sub_10002C3E8(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t result;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_signpost_id_t v40;
  os_log_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  LODWORD(v50) = a4;
  v51 = (char *)a2;
  v47 = type metadata accessor for OSSignpostError(0);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v49 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v43 - v16;
  swift_bridgeObjectRetain_n(a6, 4);
  v18 = swift_retain_n(a7, 2);
  v19 = OSSignposter.logHandle.getter(v18);
  v20 = OSSignpostIntervalState.signpostID.getter();
  v48 = static os_signpost_type_t.end.getter(v20);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v44 = v19;
  v45 = a7;
  v46 = v13;
  if ((v50 & 1) == 0)
  {
    if (!v51)
    {
      swift_release_n(v45, 2);
      swift_bridgeObjectRelease_n(a6, 4);
      __break(1u);
LABEL_5:

      swift_release_n(a7, 2);
      v22 = swift_bridgeObjectRelease_n(a6, 4);
      return (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v17, v12, v22);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v51 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v51 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v51 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v51 = &v54;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)(v23);
  swift_release();
  v24 = v47;
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v47) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v25 = 0;
    v26 = 0;
    v50 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
    v50 = "%s, bytes=%lu, xid=%lx";
    v26 = 2;
    v25 = 3;
  }
  v27 = v49;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v49, v17, v12);
  v28 = swift_slowAlloc(32, -1);
  v29 = swift_slowAlloc(32, -1);
  v53 = v29;
  *(_BYTE *)v28 = v26;
  *(_BYTE *)(v28 + 1) = v25;
  *(_WORD *)(v28 + 2) = 2080;
  v30 = v45;
  v31 = *(_QWORD *)(v45 + 32);
  v32 = *(_QWORD *)(v45 + 40);
  swift_bridgeObjectRetain(v32);
  v52 = sub_100006FCC(v31, v32, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 4);
  swift_release_n(v30, 2);
  swift_bridgeObjectRelease();
  *(_WORD *)(v28 + 12) = 2048;
  swift_bridgeObjectRetain(a6);
  sub_10002B990(v33, &RPOptionLength);
  v35 = v34;
  swift_bridgeObjectRelease_n(a6, 2);
  v52 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 14);
  swift_bridgeObjectRelease();
  *(_WORD *)(v28 + 22) = 2048;
  swift_bridgeObjectRetain(a6);
  sub_10002B990(v36, &RPOptionXID);
  v38 = v37;
  swift_bridgeObjectRelease_n(a6, 2);
  v52 = v38;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v28 + 24);
  swift_bridgeObjectRelease();
  v40 = OSSignpostID.rawValue.getter(v39);
  v41 = v44;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, (os_signpost_type_t)v48, v40, v51, v50, (uint8_t *)v28, 0x20u);
  swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1, -1);
  swift_slowDealloc(v28, -1, -1);

  v42 = *(void (**)(char *, uint64_t))(v46 + 8);
  v42(v17, v12);
  return ((uint64_t (*)(char *, uint64_t))v42)(v27, v12);
}

void sub_10002C800(uint64_t a1)
{
  swift_getObjectType(a1);
  OS_dispatch_source_data_add.add(data:)(1uLL);
}

void sub_10002C82C(uint64_t a1, uint64_t a2)
{
  sub_10002D990(a1, a2);
  sub_10002DA30();
  sub_1000050D4();
}

uint64_t sub_10002C848@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

void sub_10002C858(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13;

  v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t sub_10002C8D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
    return static UnsafeMutablePointer.allocate(capacity:)(result, a3);
  return result;
}

uint64_t sub_10002C8F4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_10002C928(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    UnsafeMutablePointer.deinitialize(count:)(a2, a1);
    UnsafeMutablePointer.deallocate()();
  }
}

_BYTE **sub_10002C968(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100006F14(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10002C974()
{
  uint64_t v0;

  return Path.init(content:)(*(uint64_t (**)(void))(v0 + 16));
}

void sub_10002C97C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100006F44(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

unint64_t sub_10002C984()
{
  unint64_t result;

  result = qword_1002AA898;
  if (!qword_1002AA898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1002AA898);
  }
  return result;
}

unint64_t sub_10002C9C0()
{
  unint64_t result;

  result = qword_1002AA8A0;
  if (!qword_1002AA8A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1002AA8A0);
  }
  return result;
}

unint64_t sub_10002C9FC()
{
  unint64_t result;

  result = qword_1002AA8A8;
  if (!qword_1002AA8A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002AA8A8);
  }
  return result;
}

uint64_t sub_10002CA38(uint64_t (**a1)(_QWORD, _QWORD, _QWORD))
{
  return sub_10002CF00(a1);
}

unint64_t sub_10002CA4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AA8C0;
  if (!qword_1002AA8C0)
  {
    v1 = sub_10000DCA0(&qword_1002AA8B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AA8C0);
  }
  return result;
}

uint64_t sub_10002CA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002CAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SignpostInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002CB1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SignpostInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002CB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v0 = sub_100026988();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10002CB74()
{
  uint64_t v0;

  sub_10002BA24(*(_QWORD *)(v0 + 16), &RPOptionLength);
}

void sub_10002CB94()
{
  uint64_t v0;

  sub_10002BA24(*(_QWORD *)(v0 + 16), &RPOptionXID);
}

uint64_t sub_10002CBBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10002CBE8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;

  v10 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  sub_10002641C();
  v13 = v12 - v11;
  v14();
  v15 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a6, a7);
  if ((v15 & 0x8000000000000000) != 0)
  {
    LOBYTE(v19) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, v19, 104, 0);
    __break(1u);
  }
  else
  {
    v16 = *a1 + (v15 >> 3);
    __chkstk_darwin(v15);
    v20 = v17;
    v21 = v16;
    sub_10002CD28(v13, (uint64_t)sub_10002D49C, (uint64_t)&v19, a6, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v18);
    *a1 = v16;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, a6);
    sub_10002D8A4();
  }
}

uint64_t sub_10002CD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, char *);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  _QWORD v20[2];

  v11 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin();
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
  if (v17 < 0)
  {
    v19 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, v19, 1157, 0);
    __break(1u);
  }
  else
  {
    result = v13(v12, v12 + v17, (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v8)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v15, a5);
  }
  return result;
}

void sub_10002CE14(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  sub_1000050D4();
}

void sub_10002CE38(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(uint64_t (**)(void))(v1 + 16))();
  sub_1000050D4();
}

unint64_t sub_10002CE60()
{
  unint64_t result;

  result = qword_1002AA8D0;
  if (!qword_1002AA8D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1002AA8D0);
  }
  return result;
}

void sub_10002CEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_10002CE60();
  v3 = (_QWORD *)sub_10002D928();
  sub_10002CBE8(v3, v4, v5, v2, v1, v6, v7);
}

uint64_t sub_10002CF00(uint64_t (**a1)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return (*a1)(v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for P2PLink()
{
  return objc_opt_self(_TtC13EnsembleAgent7P2PLink);
}

uint64_t type metadata accessor for P2PLink.LinkContext()
{
  return objc_opt_self(_TtCC13EnsembleAgent7P2PLinkP33_DE4E4A0645E3B50A8BB7334059C308DD11LinkContext);
}

uint64_t initializeBufferWithCopyOfBuffer for P2PLink.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10002CFB8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10002CFB8(uint64_t result, unsigned __int8 a2)
{
  if (a2 == 2)
    return swift_errorRetain(result);
  if (a2 <= 1u)
    return swift_retain(result);
  return result;
}

uint64_t destroy for P2PLink.State(uint64_t a1)
{
  return sub_10002D394(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), (uint64_t (*)(void))&_swift_release);
}

uint64_t assignWithCopy for P2PLink.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10002D538(a1, a2, a3, (void (*)(_QWORD, _QWORD))sub_10002CFB8, (uint64_t (*)(void))&_swift_release);
}

uint64_t assignWithTake for P2PLink.State(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10002D394(v4, v5, (uint64_t (*)(void))&_swift_release);
  return a1;
}

ValueMetadata *type metadata accessor for P2PLink.State()
{
  return &type metadata for P2PLink.State;
}

unint64_t sub_10002D074()
{
  unint64_t result;

  result = qword_1002AAB88;
  if (!qword_1002AAB88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1002AAB88);
  }
  return result;
}

uint64_t sub_10002D0B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002D0D4()
{
  uint64_t v0;

  return sub_1000C85F8(v0);
}

void sub_10002D0DC(uint64_t a1, uint64_t a2)
{
  sub_10002C800(a2);
}

uint64_t sub_10002D0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10002D100()
{
  uint64_t v0;

  sub_10002C800(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002D108(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_unknownObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10002D134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SignpostInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_release();
  swift_release();
  v4 = sub_100026B28();
  if (!sub_10002D8B8(v4))
    sub_10002D888();
  sub_10002D9EC();
  return sub_1000264AC(v0, ((v2 + 40) & ~v2) + v3, v2 | 7);
}

void sub_10002D1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100026774() - 8) + 80);
  sub_100029E98(*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24), *(_QWORD *)(v3 + 32), v3 + ((v7 + 40) & ~v7), a1, a2, a3);
}

uint64_t sub_10002D258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_release();
  v4 = sub_100026B28();
  if (!sub_10002D8B8(v4))
    sub_10002D888();
  sub_10002D9EC();
  swift_release();
  return sub_1000264AC(v0, ((v3 + ((v2 + 32) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_10002D2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100026774();
  v0 = sub_10002D928();
  sub_10002B4B8(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10002D33C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10002D370(uint64_t result, char a2)
{
  if (a2 == 2)
    return swift_errorRetain(result);
  if (a2 != 1)
  {
    if (a2)
      return result;
    return swift_errorRetain(result);
  }
  return swift_retain(result);
}

uint64_t sub_10002D394(uint64_t result, char a2, uint64_t (*a3)(void))
{
  switch(a2)
  {
    case 2:
      return swift_errorRelease(result);
    case 1:
      return swift_release(result);
    case 0:
      return a3();
  }
  return result;
}

uint64_t sub_10002D3BC()
{
  return sub_1000283F8();
}

uint64_t sub_10002D3F0()
{
  return sub_1000283F8();
}

uint64_t sub_10002D424()
{
  return sub_1000283F8();
}

uint64_t sub_10002D458(uint64_t a1)
{
  uint64_t v1;

  return sub_10002764C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002D460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10002D47C(uint64_t a1)
{
  uint64_t v1;

  return sub_100027274(a1, v1);
}

uint64_t sub_10002D484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D494(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002D49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001A9B5C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t initializeBufferWithCopyOfBuffer for P2PLink.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10002D370(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for P2PLink.Event(uint64_t a1)
{
  return sub_10002D394(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), (uint64_t (*)(void))&_swift_errorRelease);
}

uint64_t assignWithCopy for P2PLink.Event(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10002D538(a1, a2, a3, (void (*)(_QWORD, _QWORD))sub_10002D370, (uint64_t (*)(void))&_swift_errorRelease);
}

uint64_t sub_10002D538(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t (*a5)(void))
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  a4(*a2, v8);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v7;
  v10 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v8;
  sub_10002D394(v9, v10, a5);
  return a1;
}

uint64_t assignWithTake for P2PLink.Event(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10002D394(v4, v5, (uint64_t (*)(void))&_swift_errorRelease);
  return a1;
}

uint64_t _s9DimensionOwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s9DimensionOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10002D658(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10002D670(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for P2PLink.Event()
{
  return &type metadata for P2PLink.Event;
}

uint64_t sub_10002D6F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10002D704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_100006FB4(v3, a2);
  return swift_retain(v2);
}

void sub_10002D720(id a1)
{

}

uint64_t sub_10002D734(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10002D744()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10002D750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t sub_10002D760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100006FB4(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t sub_10002D784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_10002D790()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10002D798()
{
  uint64_t v0;

  return _typeName(_:qualified:)(v0, 0);
}

uint64_t sub_10002D7BC(uint64_t a1, char a2)
{
  uint64_t v2;
  unsigned __int8 v3;

  sub_10002D370(a1, a2);
  return sub_10002CFB8(v2, v3);
}

uint64_t sub_10002D7D4()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

BOOL sub_10002D7E4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002D7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10002D804()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_10002D814(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100006FCC(v3, v4, a3);
}

uint64_t sub_10002D820()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10002D82C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_1000078E0(0, a2, a3);
}

void sub_10002D834()
{
  sub_100027738();
}

uint64_t sub_10002D844()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10002D860()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002D868(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10002D874()
{
  uint64_t v0;

  return sub_10002B160(v0);
}

uint64_t sub_10002D87C()
{
  objc_class *v0;

  return sub_1000284C8(v0);
}

uint64_t sub_10002D888()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10002D89C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10002D8B8(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v1, 1, a1);
}

void sub_10002D8CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_10002D8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _print_unlocked<A, B>(_:_:)(v5 - 112, v5 - 96, a3, v3, v4);
}

uint64_t sub_10002D8F4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  return swift_dynamicCast((uint64_t *)va, va1, a2 + 8, a1, 6);
}

uint64_t sub_10002D908()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10002D910()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

void sub_10002D918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
  uint64_t v15;

  sub_100041C8C(v15, &a15);
}

uint64_t sub_10002D928()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10002D948(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002D958()
{
  return 4294960573;
}

void sub_10002D970(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

_QWORD *sub_10002D97C(uint64_t a1, ...)
{
  uint64_t v2;
  va_list va;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  return AnyHashable.init<A>(_:)((uint64_t *)va, va1);
}

uint64_t sub_10002D988()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10002D990(uint64_t a1, uint64_t a2)
{
  return swift_getObjectType(a2);
}

uint64_t sub_10002D99C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002D9B0()
{
  uint64_t v0;

  return sub_1001116B8(v0);
}

uint64_t sub_10002D9BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002D9C8()
{
  uint64_t v0;

  return sub_10002D370(v0, 1);
}

uint64_t sub_10002D9D4()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_10002D9E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10002D9EC()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + *(int *)(v0 + 24)));
}

uint64_t sub_10002D9F8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10002DA00(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10002DA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, a6, 27, 2, a9, a10);
}

uint64_t sub_10002DA14(uint64_t a1, char a2)
{
  uint64_t (*v2)(void);

  return sub_10002D394(a1, a2, v2);
}

uint64_t sub_10002DA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

uint64_t sub_10002DA28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100006FCC(a1, v3, a3);
}

void sub_10002DA30()
{
  OS_dispatch_source_data_add.add(data:)(1uLL);
}

uint64_t sub_10002DA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v6, a3, a4);
}

uint64_t sub_10002DA64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_10002DA70()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_10002DA78()
{
  uint64_t v0;
  CGFloat a;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGAffineTransform v7;
  CGPoint v8;
  CGPoint v9;
  CGPoint v10;
  CGPoint v11;
  CGPoint v12;

  v2 = *(double *)(v0 + 128);
  v3 = *(double *)(v0 + 136);
  v4 = *(double *)(v0 + 144);
  v5 = *(double *)(v0 + 152);
  v6 = *(double *)(v0 + 160);
  v8.x = *(CGFloat *)v0;
  v7.a = *(CGFloat *)(v0 + 120);
  a = v7.a;
  v7.b = v2;
  v7.c = v3;
  v7.d = v4;
  v7.tx = v5;
  v7.ty = v6;
  v8.y = v8.x;
  *(CGPoint *)(v0 + 40) = CGPointApplyAffineTransform(v8, &v7);
  v9.x = *(CGFloat *)(v0 + 8);
  v7.a = a;
  v7.b = v2;
  v7.c = v3;
  v7.d = v4;
  v7.tx = v5;
  v7.ty = v6;
  v9.y = v9.x;
  *(CGPoint *)(v0 + 56) = CGPointApplyAffineTransform(v9, &v7);
  v10.x = *(CGFloat *)(v0 + 16);
  v7.a = a;
  v7.b = v2;
  v7.c = v3;
  v7.d = v4;
  v7.tx = v5;
  v7.ty = v6;
  v10.y = v10.x;
  *(CGPoint *)(v0 + 72) = CGPointApplyAffineTransform(v10, &v7);
  v11.x = *(CGFloat *)(v0 + 24);
  v7.a = a;
  v7.b = v2;
  v7.c = v3;
  v7.d = v4;
  v7.tx = v5;
  v7.ty = v6;
  v11.y = v11.x;
  *(CGPoint *)(v0 + 88) = CGPointApplyAffineTransform(v11, &v7);
  v12.x = *(CGFloat *)(v0 + 32);
  v7.a = a;
  v7.b = v2;
  v7.c = v3;
  v7.d = v4;
  v7.tx = v5;
  v7.ty = v6;
  v12.y = v12.x;
  *(CGPoint *)(v0 + 104) = CGPointApplyAffineTransform(v12, &v7);
}

double sub_10002DB54()
{
  double result;

  xmmword_1002AABB0 = xmmword_10021CF20;
  unk_1002AABC0 = xmmword_10021CF30;
  qword_1002AABD0 = 0x4023000000000000;
  result = 0.0;
  unk_1002AABD8 = 0u;
  unk_1002AABE8 = 0u;
  unk_1002AABF8 = 0u;
  unk_1002AAC08 = 0u;
  unk_1002AAC18 = 0u;
  qword_1002AAC28 = 0x3FF0000000000000;
  unk_1002AAC30 = 0;
  qword_1002AAC38 = 0;
  unk_1002AAC40 = 0x3FF0000000000000;
  qword_1002AAC48 = 0;
  unk_1002AAC50 = 0;
  return result;
}

double sub_10002DBA4()
{
  double result;

  xmmword_1002AAC58 = xmmword_10021CF40;
  qword_1002AAC68 = 0x402E000000000000;
  result = 0.0;
  unk_1002AAC70 = 0u;
  unk_1002AAC80 = 0u;
  unk_1002AAC90 = 0u;
  unk_1002AACA0 = 0u;
  unk_1002AACB0 = 0u;
  unk_1002AACC0 = 0u;
  qword_1002AACD0 = 0x3FF0000000000000;
  unk_1002AACD8 = 0;
  qword_1002AACE0 = 0;
  unk_1002AACE8 = 0x3FF0000000000000;
  qword_1002AACF0 = 0;
  unk_1002AACF8 = 0;
  return result;
}

double *sub_10002DBF0@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;

  v2 = result[9];
  v3 = result[13];
  v4 = result[11];
  v5 = (v2 + v3 + v4) / v2;
  v6 = 0.0;
  v7 = 0.0;
  if (v2 > 0.0)
  {
    v7 = result[5] / v2;
    if (v7 > 1.0)
    {
      v8 = fabs(sqrt(v7));
      v9 = v7 == -INFINITY;
      v10 = INFINITY;
      if (!v9)
        v10 = v8;
      v7 = v5 - (v5 + -1.0) / v10;
    }
    v6 = (v3 * -2.0 - v4) / v2;
    if (v6 > 1.0)
    {
      v11 = fabs(sqrt(v6));
      if (v6 == -INFINITY)
        v11 = INFINITY;
      v6 = v5 - (v5 + -1.0) / v11;
    }
  }
  *(double *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0x3FE0000000000000;
  *(double *)(a2 + 16) = v2;
  *(double *)(a2 + 24) = v7;
  *(double *)(a2 + 32) = v6;
  return result;
}

void sub_10002DCBC(double a1)
{
  uint64_t v1;
  double v2;

  v2 = *(double *)(v1 + 16);
  if (v2 > 0.0 && a1 / v2 > 1.0)
    pow(a1 / v2, *(long double *)(v1 + 8));
}

uint64_t sub_10002DD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for UniversalControlAnchor(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000E478();
  v9 = UniversalControlLink.endpoint1.getter(v8);
  UniversalControlLink.Endpoint.anchor.getter(v9);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v0, v6);
  v11 = UniversalControlAnchor.edge.getter(v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  return v11;
}

double sub_10002DDEC()
{
  uint64_t v0;
  __int128 v1;
  double result;
  CGAffineTransform v3;
  CGPoint v4;

  v4.x = *(CGFloat *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController__initialOffset);
  v1 = *(_OWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 48);
  *(_OWORD *)&v3.a = *(_OWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 32);
  *(_OWORD *)&v3.c = v1;
  *(_OWORD *)&v3.tx = *(_OWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 64);
  v4.y = v4.x;
  *(_QWORD *)&result = *(_OWORD *)&CGPointApplyAffineTransform(v4, &v3);
  return result;
}

double sub_10002DE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ObjectType;
  double result;

  if (*(double *)(a1 + 16) <= 0.0)
  {
    swift_getObjectType(a2);
    OS_dispatch_source.cancel()();
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    swift_unknownObjectRelease(v7);
  }
  ObjectType = swift_getObjectType(a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  result = *(double *)(a1 + 16) - *(double *)(a1 + 40);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10002DEB8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_10003224C();
  v2 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v3 = sub_10003228C();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10002DF34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_10002DF7C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

id sub_10002DFA0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  double Width;
  uint64_t v28;
  double v32;
  double v33;
  uint64_t v34;
  double Height;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  CGFloat v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  void *v69;
  id v70;
  uint64_t v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  __chkstk_darwin(v3);
  sub_10000E478();
  v4 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  v8 = sub_1000323C0();
  v70 = sub_1000323B8(v8);
  sub_1000322D0(a1, v7, &qword_1002AA5F0);
  v9 = type metadata accessor for UTType(0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v7, 1, v9) == 1)
  {
    sub_1000323F0();
    sub_10000E36C(v7, &qword_1002AA5F0);
    v12 = 0xE700000000000000;
  }
  else
  {
    sub_1000078E0(0, &qword_1002AAF78, ISSymbol_ptr);
    v10 = UTType.identifier.getter();
    v13 = sub_100030D34(v10, v11, 2, 4);
    sub_100032374();
    v14 = objc_msgSend(v13, "name");

    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v12 = v15;

  }
  v16 = sub_100189CDC(a1, v12, 769);
  v69 = v16;
  if (v16)
  {
    v17 = v16;
    objc_opt_self(CATransaction);
    v18 = v17;
    sub_100032434((uint64_t)v18, "begin");
    v19 = v18;
    sub_100095734(1, v19);
    v21 = (id)v20;
    sub_100032434(v20, "commit");

  }
  else
  {
    v22 = sub_1000323C0();
    v21 = sub_1000323B8(v22);
  }
  v23 = sub_1000323C0();
  v24 = sub_1000323B8(v23);
  v25 = sub_1000323C0();
  v26 = sub_1000323B8(v25);
  sub_10000E3F4((uint64_t)v26, "bounds");
  Width = CGRectGetWidth(v73);
  sub_100032328();
  if ((a2 & 1) != 0)
  {
    v40 = CGRectGetWidth(*(CGRect *)&v28);
    sub_100032334();
    v41 = CGRectGetWidth(v78);
    v42 = sub_100030B88((uint64_t)_swiftEmptyArrayStorage, Width, v40, v41);
    v33 = v43;
    sub_10000E3F4(v42, "bounds");
    v44 = CGRectGetHeight(v79) + 12.0;
    sub_100032328();
    v45 = v44 + CGRectGetHeight(v80) + 12.0;
    sub_100032334();
    v39 = v45 + CGRectGetHeight(v81);
  }
  else
  {
    v32 = Width + 12.0 + CGRectGetWidth(*(CGRect *)&v28) + 12.0;
    sub_100032334();
    v33 = v32 + CGRectGetWidth(v74);
    sub_10000E3F4(v34, "bounds");
    Height = CGRectGetHeight(v75);
    sub_100032328();
    v36 = CGRectGetHeight(v76);
    sub_100032334();
    v37 = CGRectGetHeight(v77);
    sub_100030B88((uint64_t)_swiftEmptyArrayStorage, Height, v36, v37);
    v39 = v38;
  }
  v82.origin.x = sub_1000323C8();
  CGRectGetMidX(v82);
  v83.origin.x = sub_1000323C8();
  CGRectGetMidY(v83);
  sub_100032340();
  v46 = sub_100032314();
  v48 = v47;
  sub_100032360();
  sub_10000E3F4((uint64_t)objc_msgSend(v21, "setPosition:", v46, v48), "frame");
  if ((a2 & 1) != 0)
  {
    CGRectGetMinY(*(CGRect *)&v49);
    sub_100032328();
    CGRectGetHeight(v87);
    sub_100032340();
    v56 = sub_100032314();
    v58 = v57;
    sub_100032360();
    sub_10000E3F4((uint64_t)objc_msgSend(v24, "setPosition:", v56, v58), "frame");
    CGRectGetMaxY(v88);
    sub_100032334();
    CGRectGetHeight(v89);
  }
  else
  {
    CGRectGetMinX(*(CGRect *)&v49);
    sub_100032328();
    CGRectGetWidth(v84);
    sub_100032340();
    v53 = sub_100032314();
    v55 = v54;
    sub_100032360();
    sub_10000E3F4((uint64_t)objc_msgSend(v24, "setPosition:", v53, v55), "frame");
    CGRectGetMaxX(v85);
    sub_100032334();
    CGRectGetWidth(v86);
  }
  sub_100032340();
  v59 = sub_100032314();
  v61 = v60;
  sub_100032360();
  objc_msgSend(v26, "setPosition:", v59, v61);
  objc_msgSend(v70, "setBounds:", 0.0, 0.0, v33, v39);
  sub_10000922C(0x736E6F6349, 0xE500000000000000, v70);
  sub_10003239C(v62, "setAllowsGroupBlending:");
  v63 = sub_1000055B0(&qword_1002AC0E0);
  v64 = sub_1000323DC(v63);
  *(_OWORD *)(v64 + 16) = xmmword_10021CF50;
  *(_QWORD *)(v64 + 32) = v24;
  *(_QWORD *)(v64 + 40) = v21;
  *(_QWORD *)(v64 + 48) = v26;
  v72 = v64;
  specialized Array._endMutation()(v64);
  v65 = v24;
  v66 = v21;
  v67 = v26;
  sub_1001A4120(v72);

  return v70;
}

void sub_10002E508()
{
  id v0;
  CGColorRef GenericGray;
  CGColorRef v2;
  double v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  GenericGray = CGColorCreateGenericGray(1.0, 1.0);
  sub_100032410((uint64_t)GenericGray, "setStrokeColor:");

  v2 = CGColorCreateGenericGray(0.0, 0.0);
  sub_100032410((uint64_t)v2, "setFillColor:");

  LODWORD(v3) = 1041865114;
  objc_msgSend(v0, "setOpacity:", v3);
  sub_1000050D4();
}

id sub_10002E594()
{
  id v0;
  EnsembleAgent::MaterialAppearance v2;

  v0 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  *(_OWORD *)&v2.backdropScale = xmmword_10021CF60;
  *(_OWORD *)&v2.brightness = xmmword_10021CF70;
  *(_OWORD *)&v2.fillOpacity = xmmword_10021CF80;
  v2.useVibrancy = 1;

  return v0;
}

id sub_10002E614()
{
  return sub_10002E630(0.35, 0.625);
}

id sub_10002E624()
{
  return sub_10002E630(0.25, 20.0);
}

id sub_10002E630(float a1, double a2)
{
  id v4;
  double v5;

  v4 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  *(float *)&v5 = a1;
  objc_msgSend(v4, "setShadowOpacity:", v5);
  objc_msgSend(v4, "setShadowRadius:", a2);
  objc_msgSend(v4, "setShadowOffset:", 0.0, 0.0);
  return v4;
}

void sub_10002E6B4(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = v2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10002641C();
  v11 = v10 - v9;
  v12 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v12, "begin");
  if (objc_msgSend(v12, "disableActions"))
  {
    sub_100032404();
  }
  else
  {
    objc_msgSend(v12, "setDisableActions:", 1);
    sub_100032404();
    v13 = objc_msgSend(v12, "setDisableActions:", 0);
  }
  sub_100032434((uint64_t)v13, "commit");
  v14 = *(void **)(v4 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer);
  objc_msgSend(v14, "setDelegate:", v4);
  sub_1000322D0(v4 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_secureLayerHost, (uint64_t)&v29, &qword_1002AAF30);
  if (v31)
  {
    sub_100025A50(&v29, (uint64_t)v33);
    v15 = v34;
    v16 = v35;
    sub_10000DBE4(v33, v34);
    (*(void (**)(void *, uint64_t, uint64_t, double, double))(v16 + 8))(v14, v15, v16, a1, a2);
    v17 = sub_100043C5C(0);
    if (v3)
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v18 = sub_100006FB4(v7, (uint64_t)qword_1002B6EB0);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v18, v7);
      __chkstk_darwin(v19);
      *(&v28 - 2) = v3;
      sub_1000E45AC((int)sub_10002F1B4, 0, (int)sub_10000B008, (int)(&v28 - 4), v20, v21, v22, v23, v28, (id)v29, *((uint64_t *)&v29 + 1), v30, v31, v32, v33[0], v33[1], v33[2], v34, v35,
        v36,
        v37,
        v38,
        v39,
        v40);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
      swift_errorRelease(v3);
    }
    else
    {
      *(_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displaySleepAssertion) = v17;
      swift_release();
    }
    sub_100005988(v33);
  }
  else
  {
    sub_10000E36C((uint64_t)&v29, &qword_1002AAF30);
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v24 = sub_100006FB4(v7, (uint64_t)qword_1002B6EB0);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to present secure layer, no secureLayerHost", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
}

id sub_10002E9C4(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v37;
  uint64_t v39;
  objc_super v40;
  uint64_t v41[3];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[7];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[176];

  ObjectType = (objc_class *)swift_getObjectType(v5);
  v10 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer;
  v11 = objc_allocWithZone((Class)CALayer);
  v12 = v5;
  *(_QWORD *)&v5[v10] = objc_msgSend(v11, "init");
  v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status] = 2;
  v13 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState];
  *(_QWORD *)v13 = 0;
  v13[8] = 2;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displaySleepAssertion] = 0;
  v14 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displayOrigin];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics];
  memset(v50, 0, sizeof(v50));
  v51 = 0;
  v52 = 0x3FF0000000000000;
  v53 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0x3FF0000000000000;
  sub_1000323E8(&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics], v50);
  bzero(&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry], 0x1D0uLL);
  v16 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction];
  sub_10002DBF0((double *)v50, (uint64_t)&v42);
  v17 = v43;
  *(_OWORD *)v16 = v42;
  *((_OWORD *)v16 + 1) = v17;
  *((_QWORD *)v16 + 4) = v44;
  v18 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerLayer;
  *(_QWORD *)&v12[v18] = objc_msgSend(objc_allocWithZone((Class)CABackdropLayer), "init");
  v19 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayerMask;
  *(_QWORD *)&v12[v19] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v20 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_link];
  v21 = type metadata accessor for UniversalControlLink(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a4, v21);
  sub_1000078E0(0, &qword_1002AAF60, CABackdropLayer_ptr);
  v45 = xmmword_10021CF60;
  v46 = xmmword_10021CF70;
  v47 = xmmword_10021CF80;
  LOBYTE(v48) = 1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_captureLayer] = static CABackdropLayer.makeVibrantBackdropLayer(appearance:groupName:captureOnly:)((EnsembleAgent::MaterialAppearance *)&v45, 1702194279, (NSString)0xE400000000000000, 1);
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_iconLayer] = 0;
  sub_10002E508();
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_innerRimLayer] = v23;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayer] = sub_10002E594();
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_rimLayer] = sub_10002E630(0.35, 0.625);
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_shadowLayer] = sub_10002E630(0.25, 20.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController__initialOffset] = 0;
  sub_10014445C(a4, v24, v25, v26, v27, v28, v29, v30, v37, a5, (uint64_t)v40.receiver, (uint64_t)v40.super_class, v41[0], v41[1], v41[2], v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1),
    v44,
    v45,
    *((uint64_t *)&v45 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v48,
    v49);
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v31 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v31 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_localLength] = (uint64_t)v31;
  if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_remoteLength] = (uint64_t)v32;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_offset] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_position] = 0x3FE0000000000000;
  v33 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v33[16] = 1;
  if (qword_1002A9818 != -1)
LABEL_15:
    swift_once(&qword_1002A9818, sub_10002DBA4);
  sub_1000323E8(v58, &xmmword_1002AAC58);
  swift_beginAccess(v15, v41, 1, 0);
  sub_1000323E8(v15, v58);
  v34 = &v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerController];
  *(_OWORD *)v34 = 0u;
  *((_OWORD *)v34 + 1) = 0u;
  *((_QWORD *)v34 + 4) = 0;
  sub_1000322D0(v39, (uint64_t)&v12[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_secureLayerHost], &qword_1002AAF30);

  v40.receiver = v12;
  v40.super_class = ObjectType;
  v35 = objc_msgSendSuper2(&v40, "init");
  sub_10002E6B4(a1, a2);
  swift_release();
  swift_release();

  sub_10000E36C(v39, &qword_1002AAF30);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a4, v21);
  return v35;
}

void sub_10002EE40(uint64_t a1)
{
  void *v2;
  id v3;
  CGPathRef v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  _OWORD v30[5];
  CGRect v31;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer);
  sub_10000922C(0xD00000000000001DLL, 0x8000000100253490, v2);
  objc_msgSend(v2, "setGeometryFlipped:", 0);
  v3 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v31.origin.x = 0.0;
  v31.origin.y = 0.0;
  v31.size.width = 19.0;
  v31.size.height = 19.0;
  v4 = CGPathCreateWithRoundedRect(v31, 9.5, 9.5, 0);
  objc_msgSend(v3, "setPath:", v4);

  v5 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerLayer);
  objc_msgSend(v5, "setFrame:", 0.0, 0.0, 19.0, 19.0);
  sub_10000922C(0x7265746E696F50, 0xE700000000000000, v5);
  v29 = v3;
  objc_msgSend(v5, "setMask:", v3);
  v6 = sub_1000078E0(0, &qword_1002AAF68, CAFilter_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorMatrix);
  v9 = sub_100182DEC(v7, v8);
  sub_10000922C(0x74614D726F6C6F63, 0xEB00000000786972, v9);
  v30[0] = xmmword_10021CF90;
  v30[1] = xmmword_10021CFA0;
  v30[2] = xmmword_10021CFB0;
  v30[3] = xmmword_10021CFC0;
  v30[4] = xmmword_10021CFD0;
  v10 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithCAColorMatrix:", v30);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setValue:forKey:", v10, v11);

  v12 = sub_1000055B0(&qword_1002AAF70);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10021BBA0;
  *(_QWORD *)(v13 + 56) = v6;
  *(_QWORD *)(v13 + 32) = v9;
  v27 = v9;
  sub_1001A40DC();
  v14 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayer);
  objc_msgSend(v14, "setMask:", *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayerMask));
  v15 = sub_1000055B0(&qword_1002AC0E0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021CFE0;
  v17 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_captureLayer);
  v18 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_shadowLayer);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v18;
  v19 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_rimLayer);
  *(_QWORD *)(v16 + 48) = v19;
  *(_QWORD *)(v16 + 56) = v14;
  v20 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_innerRimLayer);
  *(_QWORD *)(v16 + 64) = v20;
  *(_QWORD *)&v30[0] = v16;
  specialized Array._endMutation()(v16);
  v21 = *(_QWORD *)&v30[0];
  v22 = v17;
  v23 = v18;
  v24 = v19;
  v25 = v14;
  v26 = v20;
  sub_1001A4120(v21);
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_iconLayer))
    objc_msgSend(v2, "addSublayer:", v27);
  objc_msgSend(v2, "addSublayer:", v5, v27);

}

unint64_t sub_10002F1B4()
{
  return 0xD00000000000002FLL;
}

id sub_10002F1D0()
{
  void *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  sub_10002F214();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_10002F214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  sub_1000322D0(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_secureLayerHost, (uint64_t)v7, &qword_1002AAF30);
  v1 = v8;
  if (v8)
  {
    v2 = v9;
    sub_10000DBE4(v7, v8);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer), v1, v2);
    sub_100005988(v7);
  }
  else
  {
    sub_10000E36C((uint64_t)v7, &qword_1002AAF30);
  }
  v3 = v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState);
  *(_QWORD *)v3 = 0;
  v5 = *(_BYTE *)(v3 + 8);
  *(_BYTE *)(v3 + 8) = 2;
  sub_100031B90(v4, v5);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displaySleepAssertion) = 0;
  return swift_release();
}

uint64_t sub_10002F430()
{
  return type metadata accessor for MagicGlueController(0);
}

uint64_t type metadata accessor for MagicGlueController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002AAE18;
  if (!qword_1002AAE18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MagicGlueController);
  return result;
}

id sub_10002F470()
{
  sub_10002F4FC(1);
  return sub_10002F838();
}

id sub_10002F488(char a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (a1 == 2)
  {
    v6 = v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode;
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode);
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode + 8);
    *(double *)v6 = a2;
    *(double *)(v6 + 8) = a3;
    v9 = *(_BYTE *)(v6 + 16);
    *(_BYTE *)(v6 + 16) = 1;
    sub_10003195C(v7, v8, v9);
    *(double *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal) = a2;
    *(double *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_offset) = a3;
  }
  else
  {
    sub_10002F4FC(a1 & 1);
  }
  return sub_10002F838();
}

uint64_t sub_10002F4FC(uint64_t result)
{
  char *v1;
  char *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  CGFloat d;
  CGFloat tx;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  CGPoint v30;
  char *v31;
  uint64_t v32;
  unsigned __int8 v33;
  CGAffineTransform v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  if (v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status] == 2)
  {
    v2 = v1;
    v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status] = result & 1;
    if ((result & 1) != 0)
    {
      sub_1000322D0((uint64_t)&v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerController], (uint64_t)v35, &qword_1002AAF28);
      v26 = v36;
      if (v36)
      {
        v27 = v37;
        sub_10000DBE4(v35, v36);
        v28 = *(_OWORD *)&v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 336];
        *(_OWORD *)&v34.a = *(_OWORD *)&v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 320];
        *(_OWORD *)&v34.c = v28;
        *(_OWORD *)&v34.tx = *(_OWORD *)&v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 352];
        v29 = 0;
        *(_QWORD *)&v28 = 0.5;
        v30 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v28 - 8), &v34);
        (*(void (**)(uint64_t, uint64_t, CGFloat, CGFloat))(v27 + 88))(v26, v27, v30.x, v30.y);
        sub_100005988(v35);
      }
      else
      {
        sub_10000E36C((uint64_t)v35, &qword_1002AAF28);
      }
      return sub_10002F214();
    }
    else
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer], "bounds");
      v4 = v3;
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v11 = sub_10002DD10();
      v12 = *(double *)&v2[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal];
      v13 = *(double *)&v2[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_offset];
      v14 = *(double *)&v2[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_position];
      v15 = type metadata accessor for MagicGlueController.AnimationContext();
      v16 = sub_1000323DC(v15);
      v17 = v2;
      v18 = sub_100031E74(v4, v6, v8, v10, 0.333, v12, v13, v14, v11, v17, (uint64_t)CGSize.init(_:), 0, v16);
      v19 = &v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode];
      v20 = *(_QWORD *)&v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode];
      v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode + 8];
      *(_QWORD *)v19 = v18;
      *((_QWORD *)v19 + 1) = 0;
      v22 = v19[16];
      v19[16] = 2;
      swift_retain(v18);
      sub_10003195C(v20, v21, v22);
      sub_1000322D0((uint64_t)&v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerController], (uint64_t)&v34, &qword_1002AAF28);
      d = v34.d;
      if (*(_QWORD *)&v34.d)
      {
        tx = v34.tx;
        sub_10000DBE4(&v34, *(uint64_t *)&v34.d);
        v25 = (*(uint64_t (**)(CGFloat, CGFloat))(*(_QWORD *)&tx + 72))(COERCE_CGFLOAT(*(_QWORD *)&d), COERCE_CGFLOAT(*(_QWORD *)&tx));
        swift_release();
        sub_100005988(&v34);
      }
      else
      {
        swift_release();
        sub_10000E36C((uint64_t)&v34, &qword_1002AAF28);
        v25 = 0;
      }
      v31 = &v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState];
      v32 = *(_QWORD *)&v17[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState];
      *(_QWORD *)v31 = v25;
      v33 = v31[8];
      v31[8] = 1;
      return sub_100031B90(v32, v33);
    }
  }
  return result;
}

void sub_10002F794(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status) == 2)
  {
    v3 = v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode;
    if (!*(_BYTE *)(v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode + 16))
    {
      v4 = *(double *)v3;
      v5 = *(uint64_t *)(v3 + 8);
      *(double *)v3 = *(double *)v3 + a1;
      *(double *)(v3 + 8) = *(double *)&v5 + a2;
      *(_BYTE *)(v3 + 16) = 0;
      sub_10003195C(*(uint64_t *)&v4, v5, 0);
      sub_10002F838();
      v6 = *(double *)(v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal);
      if (v6 >= *(double *)(v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction + 32))
      {
        if (*(double *)(v2 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction + 24) < v6)
          sub_10002F4FC(0);
      }
      else
      {
        sub_10002F4FC(1);
      }
    }
  }
}

id sub_10002F838()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v1, "begin");
  if (objc_msgSend(v1, "disableActions"))
  {
    sub_10003241C();
  }
  else
  {
    sub_100032388();
    sub_10003241C();
    sub_10003239C(v2, *(const char **)(v0 + 2568));
  }
  return sub_100032350(v1, "commit");
}

void sub_10002F8A8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  CGAffineTransform v5;
  CGPoint v6;

  v2 = type metadata accessor for FloatingPointRoundingRule(0);
  __chkstk_darwin(v2);
  swift_beginAccess(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics, &v4, 0, 0);
  v6.x = (double)*(uint64_t *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_remoteLength);
  v3 = *(_OWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 432);
  *(_OWORD *)&v5.a = *(_OWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 416);
  *(_OWORD *)&v5.c = v3;
  *(_OWORD *)&v5.tx = *(_OWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry + 448);
  v6.y = v6.x;
  CGPointApplyAffineTransform(v6, &v5);
  __asm { BR              X10 }
}

void sub_10002F9B8()
{
  uint64_t v0;
  _OWORD *v1;
  CGFloat v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  CGFloat v8;
  uint64_t v9;
  double v10;
  double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGPoint v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  CGPoint v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  CGPoint v41;
  CGPoint v42;
  CGPoint v43;
  CGPoint v44;

  v42.x = v2;
  v42.y = v8;
  v12 = v4[15];
  *v1 = v4[14];
  v1[1] = v12;
  v1[2] = v4[16];
  v43 = CGPointApplyAffineTransform(v42, (CGAffineTransform *)(v0 + 176));
  v13 = v4[12];
  *v1 = v4[11];
  v1[1] = v13;
  v1[2] = v4[13];
  v44 = CGPointApplyAffineTransform(v43, (CGAffineTransform *)(v0 + 176));
  v14 = v4[9];
  *v1 = v4[8];
  v1[1] = v14;
  v1[2] = v4[10];
  v15 = CGPointApplyAffineTransform(v44, (CGAffineTransform *)(v0 + 176));
  v16 = v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction;
  v17 = *(_OWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction + 16);
  v1[40] = *(_OWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction);
  v1[41] = v17;
  *(_QWORD *)(v9 - 144) = *(_QWORD *)(v16 + 32);
  sub_10002DCBC(v15.x);
  *(double *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal) = v18;
  *(CGFloat *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_offset) = v15.y;
  *(double *)&v19 = v10 * v18;
  v20 = *(double *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_position);
  memcpy((void *)(v0 + 176), v4, 0x1D0uLL);
  memcpy((void *)(v0 + 648), v7, 0xA8uLL);
  sub_10002FDAC((_OWORD *)(v0 + 176), v0 + 648, v0 + 136, v19, v15.y, v20, v11);
  v21 = *(void **)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_iconLayer);
  if (v21)
  {
    v22 = *(double *)(v0 + 144);
    v23 = *(double *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 8);
    v24 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v6, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v24);
    v26 = CGPoint.rounded(_:to:)(v6, 2.0, v22, v23);
    v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v6, v24);
    objc_msgSend(v21, "setPosition:", v26, v28);
  }
  v29 = *(void **)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_innerRimLayer);
  v30 = *(id *)(v0 + 136);
  objc_msgSend(v29, "setPath:", v30);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayerMask), "setPath:", v30);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_rimLayer), "setShadowPath:", v30);
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_shadowLayer), "setShadowPath:", v30);
  v31 = *(void **)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerLayer);
  if (*(_BYTE *)(v5 + 16))
  {
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerLayer), "setHidden:", 1);
    sub_100031D7C((id *)(v0 + 136));
    sub_100031D7C((id *)(v0 + 136));
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 160);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = v4[21];
    *(_OWORD *)(v0 + 64) = v4[20];
    *(_OWORD *)(v0 + 80) = v34;
    *(_OWORD *)(v0 + 96) = v4[22];
    v35 = v32;
    *(_QWORD *)&v34 = v33;
    v36 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v34 - 8), (CGAffineTransform *)(v0 + 64));
    objc_msgSend(v31, "setPosition:", v36.x, v36.y);
    sub_1000322D0(v3 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerController, v0 + 64, &qword_1002AAF28);
    if (*(_QWORD *)(v0 + 88))
    {
      sub_100025A50((__int128 *)(v0 + 64), v0 + 24);
      v37 = *(_QWORD *)(v0 + 48);
      v38 = *(_QWORD *)(v0 + 56);
      sub_10000DBE4((_QWORD *)(v0 + 24), v37);
      v39 = v4[24];
      *(_OWORD *)(v0 + 64) = v4[23];
      *(_OWORD *)(v0 + 80) = v39;
      *(_OWORD *)(v0 + 96) = v4[25];
      v40 = v32;
      *(_QWORD *)&v39 = v33;
      v41 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v39 - 8), (CGAffineTransform *)(v0 + 64));
      (*(void (**)(uint64_t, uint64_t, CGFloat, CGFloat))(v38 + 88))(v37, v38, v41.x, v41.y);
      sub_100031D7C((id *)(v0 + 136));
      sub_100031D7C((id *)(v0 + 136));
      sub_100005988((_QWORD *)(v0 + 24));
    }
    else
    {
      sub_100031D7C((id *)(v0 + 136));
      sub_100031D7C((id *)(v0 + 136));
      sub_10000E36C(v0 + 64, &qword_1002AAF28);
    }
  }
}

void sub_10002FDAC(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v24;
  double v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  CGPath *v67;
  __int128 v68;
  CGPoint v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  double v78;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v85;
  double v86;
  CGAffineTransform v87;
  uint64_t v88[2];
  uint64_t v89[2];
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  float64_t v108;
  double v109;
  float64_t v110;
  double v111;
  _BYTE v112[104];
  _BYTE v113[104];
  _BYTE v114[104];
  _BYTE v115[104];
  double v116[2];
  CGPoint v117;

  v12.f64[0] = *(float64_t *)(a2 + 104);
  v85 = v12.f64[0];
  v13.f64[0] = *(float64_t *)(a2 + 88);
  v12.f64[1] = *(float64_t *)(a2 + 96);
  v83 = v13.f64[0];
  v13.f64[1] = *(float64_t *)(a2 + 112);
  v77 = vaddq_f64(v12, v13);
  v82 = *(float64x2_t *)(a2 + 72);
  v75 = vaddq_f64(v77, (float64x2_t)vdupq_lane_s64(a4, 0));
  v81 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v82, v75), (int8x16_t)v75, (int8x16_t)v82);
  v14 = (float64x2_t)vbicq_s8((int8x16_t)v81, (int8x16_t)vclezq_f64(v81));
  __asm { FMOV            V1.2D, #1.0 }
  v20 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v14, _Q1), (int8x16_t)_Q1, (int8x16_t)v14);
  v21 = *(float64x2_t *)(a2 + 56);
  v22 = (float64x2_t)vbicq_s8((int8x16_t)v21, (int8x16_t)vclezq_f64(v21));
  v84 = v20;
  v23 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v22, v20), (int8x16_t)v20, (int8x16_t)v22);
  v24 = vandq_s8((int8x16_t)vdivq_f64(v23, v21), (int8x16_t)vcgtzq_f64(v21));
  if (*(double *)&v24.i64[1] < *(double *)v24.i64)
    v24.i64[0] = v24.i64[1];
  v25 = vmuld_lane_f64(*(double *)v24.i64, v23, 1);
  v80 = *(double *)v24.i64 * v23.f64[0];
  v116[0] = *(double *)v24.i64 * v23.f64[0];
  v116[1] = v25;
  v26 = sub_1000055B0(&qword_1002AAF38);
  inited = swift_initStackObject(v26, v115);
  *(_OWORD *)(inited + 16) = xmmword_10021CFF0;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = 0xC039000000000000;
  *(_OWORD *)(inited + 56) = xmmword_10021D000;
  *(_OWORD *)(inited + 72) = xmmword_10021D010;
  *(_OWORD *)(inited + 88) = xmmword_10021D020;
  v28 = swift_initStackObject(v26, v114);
  *(_OWORD *)(v28 + 16) = xmmword_10021CFF0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = 0xC025000000000000;
  *(_OWORD *)(v28 + 56) = xmmword_10021D030;
  *(_OWORD *)(v28 + 72) = xmmword_10021D040;
  *(_OWORD *)(v28 + 88) = xmmword_10021D050;
  v29 = swift_initStackObject(v26, v113);
  *(_OWORD *)(v29 + 16) = xmmword_10021CFF0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 0xC025000000000000;
  *(_OWORD *)(v29 + 56) = xmmword_10021D060;
  *(_OWORD *)(v29 + 72) = xmmword_10021D070;
  *(_OWORD *)(v29 + 88) = xmmword_10021D080;
  v30 = swift_initStackObject(v26, v112);
  *(_OWORD *)(v30 + 16) = xmmword_10021CFF0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_OWORD *)(v30 + 48) = xmmword_10021D090;
  *(_OWORD *)(v30 + 64) = xmmword_10021D0A0;
  *(_OWORD *)(v30 + 80) = xmmword_10021D0B0;
  *(_QWORD *)(v30 + 96) = 0xC01DD70A3D70A3D7;
  v31 = 0.0;
  if (v85 + v77.f64[0] > 0.0)
  {
    v32 = vsubq_f64(v75, v84).f64[0] / (v85 + v77.f64[0]);
    v31 = 0.0;
    if (v32 > 0.0)
    {
      v31 = v32 * 3.14159265 * 0.5;
      if (v32 > 1.0)
        v31 = 1.57079633;
    }
  }
  v78 = a7 * 0.5 + a6;
  v86 = a6 - a7 * 0.5;
  v74 = v86 + v25;
  v76 = v78 - v25;
  v33 = sin(v31);
  sub_100030E70((uint64_t)&off_100280E60, a1, v33);
  v35 = v34;
  v111 = v34;
  sub_100030E70(inited, a1, v33);
  v37 = v36;
  swift_bridgeObjectRelease(inited);
  v109 = v37;
  v72 = sub_100030E70((uint64_t)&off_100280EC8, a1, v33);
  v73 = v38;
  v107 = v38;
  v70 = sub_100030E70(v28, a1, v33);
  v71 = v39;
  v40 = v39;
  swift_bridgeObjectRelease(v28);
  v105 = v40;
  v41 = sub_100030E70(v29, a1, v33);
  v43 = v42;
  swift_bridgeObjectRelease(v29);
  v103 = v43;
  v44 = sub_100030E70(v30, a1, v33);
  v46 = v45;
  swift_bridgeObjectRelease(v30);
  v101 = v46;
  v47 = sub_100030E70((uint64_t)&off_100280F30, a1, v33);
  v49 = v35 + a5;
  v50 = v72 + *(double *)&a4;
  v51 = v70 + *(double *)&a4;
  v52 = v41 + *(double *)&a4;
  v53 = v47 + *(double *)&a4;
  v54 = a5 - v46;
  v55 = a5 - v73;
  v56 = a5 - v71;
  v57 = a5 - v43;
  v58 = a5 - v35;
  if (v72 + *(double *)&a4 <= v84.f64[0])
    v50 = v84.f64[0];
  if (v51 <= v84.f64[0])
    v51 = v84.f64[0];
  if (v52 <= v84.f64[0])
    v52 = v84.f64[0];
  if (v53 > v84.f64[0])
    v59 = v53;
  else
    v59 = v84.f64[0];
  v98 = v59;
  v99 = v48;
  if (v44 + *(double *)&a4 > v84.f64[0])
    v60 = v44 + *(double *)&a4;
  else
    v60 = v84.f64[0];
  v96 = v60;
  v97 = a5 - v46;
  v94 = v50;
  v95 = a5 - v73;
  v92 = v51;
  v93 = a5 - v71;
  v90 = v52;
  v91 = a5 - v43;
  v61 = v74 - v49;
  v62 = v76 - v58;
  if (v76 - v58 > 0.0)
    v62 = 0.0;
  if (v61 <= 0.0)
    v61 = 0.0;
  v63 = v62 + v61;
  v64 = a5 - v37;
  v89[0] = *(_QWORD *)&v84.f64[0];
  v88[0] = *(_QWORD *)&v84.f64[0];
  v65 = v46 + a5;
  v110 = v84.f64[0];
  v111 = v49 + v63;
  v108 = v84.f64[0];
  v109 = v37 + a5 + v63;
  v106 = v50;
  v107 = v73 + a5 + v63;
  v105 = v71 + a5 + v63;
  v103 = v43 + a5 + v63;
  v104 = v51;
  v66 = v48 + a5 + v63;
  v99 = v66;
  v100 = v60;
  v101 = v65 + v63;
  v102 = v52;
  v97 = v54 + v63;
  v95 = v55 + v63;
  v93 = v56 + v63;
  v91 = v57 + v63;
  *(double *)&v89[1] = v58 + v63;
  *(double *)&v88[1] = v64 + v63;
  v67 = sub_100030F44((uint64_t)a1, v116, (uint64_t *)&v110, (uint64_t *)&v106, (uint64_t *)&v108, (uint64_t *)&v104, (uint64_t *)&v98, (uint64_t *)&v102, 0.0, v86, v84.f64[0] - v80, v86, v84.f64[0], v74, v84.f64[0], v86, (uint64_t *)&v100, (uint64_t *)&v94, (uint64_t *)&v96,
          (uint64_t *)&v90,
          v89,
          (uint64_t *)&v92,
          v88,
          *(uint64_t *)&v84.f64[0],
          *(uint64_t *)&v76,
          COERCE__INT64(v84.f64[0] - v80),
          *(uint64_t *)&v78,
          v84.f64[0],
          v78,
          0,
          *(uint64_t *)&v78);
  v117.x = v81.f64[0] - 0.5 * v82.f64[0];
  v68 = a1[21];
  *(_OWORD *)&v87.a = a1[20];
  *(_OWORD *)&v87.c = v68;
  *(_OWORD *)&v87.tx = a1[22];
  v117.y = 0.5;
  v69 = CGPointApplyAffineTransform(v117, &v87);
  *(_QWORD *)a3 = v67;
  *(CGPoint *)(a3 + 8) = v69;
  *(double *)(a3 + 24) = v59 - v83 - v85;
  *(double *)(a3 + 32) = v66;
}

id sub_100030384(id result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer) == result)
  {
    v3 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v3, "begin");
    if (objc_msgSend(v3, "disableActions"))
    {
      sub_100032428();
    }
    else
    {
      sub_100032388();
      sub_100032428();
      sub_10003239C(v4, *(const char **)(v2 + 2568));
    }
    return sub_100032350(v3, "commit");
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10003040C(uint64_t a1)
{
  double x;
  double y;
  double width;
  double height;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  id v22;
  void *v23;
  uint64_t v24;
  _OWORD v25[29];
  _OWORD v26[2];
  uint64_t v27;
  double __dst[21];
  CGRect v29;
  CGRect v30;

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer), "bounds");
  x = v29.origin.x;
  y = v29.origin.y;
  width = v29.size.width;
  height = v29.size.height;
  v30 = CGRectOffset(v29, *(CGFloat *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displayOrigin), *(CGFloat *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displayOrigin + 8));
  v6 = v30.origin.x;
  v7 = v30.origin.y;
  v8 = v30.size.width;
  v9 = v30.size.height;
  v10 = sub_10002DD10();
  sub_100030730(v10, (uint64_t)v25, v6, v7, v8, v9);
  memcpy((void *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry), v25, 0x1D0uLL);
  v11 = a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics, __dst, 33, 0);
  v12 = v25[27];
  *(_OWORD *)(v11 + 120) = v25[26];
  *(_OWORD *)(v11 + 136) = v12;
  *(_OWORD *)(v11 + 152) = v25[28];
  sub_10002DA78();
  swift_endAccess(__dst);
  memcpy(__dst, (const void *)v11, sizeof(__dst));
  sub_10002DBF0(__dst, (uint64_t)v26);
  v13 = a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction;
  v14 = v26[1];
  *(_OWORD *)v13 = v26[0];
  *(_OWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 32) = v27;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_captureLayer), "setFrame:", x, y, width, height);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_innerRimLayer), "setFrame:", x, y, width, height);
  v15 = *(void **)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayer);
  objc_msgSend(v15, "setFrame:", x, y, width, height);
  v16 = objc_msgSend(v15, "sublayers");
  if (!v16)
    goto LABEL_11;
  v17 = v16;
  v18 = sub_1000078E0(0, &qword_1002A8E48, CALayer_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if (!((unint64_t)v19 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_4;
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_rimLayer), "setFrame:", x, y, width, height);
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_shadowLayer), "setFrame:", x, y, width, height);
    sub_10002F838();
    return;
  }
  if (v19 < 0)
    v24 = v19;
  else
    v24 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v20 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_10;
LABEL_4:
  if (v20 >= 1)
  {
    for (i = 0; i != v20; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v19);
      else
        v22 = *(id *)(v19 + 8 * i + 32);
      v23 = v22;
      objc_msgSend(v22, "setFrame:", x, y, width, height);

    }
    goto LABEL_10;
  }
  __break(1u);
}

__n128 sub_100030730@<Q0>(char a1@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  CGFloat Width;
  CGFloat Height;
  __int128 v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  __n128 result;
  __int128 v29;
  __int128 v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  __int128 v37;
  __int128 v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  __int128 v55;
  __int128 v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  double v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat b;
  CGFloat a;
  CGFloat v66;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGAffineTransform v75;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  sub_100030E20(a1, (uint64_t)&v78);
  b = v78.b;
  a = v78.a;
  t1 = v78;
  d = v78.d;
  c = v78.c;
  ty = v78.ty;
  tx = v78.tx;
  CGAffineTransformInvert(&t2, &t1);
  v61 = t2.b;
  v62 = t2.a;
  v59 = t2.d;
  v60 = t2.c;
  v57 = t2.ty;
  v58 = t2.tx;
  v79.origin.x = a3;
  v79.origin.y = a4;
  v79.size.width = a5;
  v79.size.height = a6;
  Width = CGRectGetWidth(v79);
  v80.origin.x = a3;
  v80.origin.y = a4;
  v80.size.width = a5;
  v80.size.height = a6;
  Height = CGRectGetHeight(v80);
  CGAffineTransformMakeScale(&t1, Width, Height);
  v13 = *(_OWORD *)&t1.tx;
  v73 = t1.b;
  v74 = t1.a;
  v71 = t1.d;
  v72 = t1.c;
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  if (t1.a * t1.d - t1.b * t1.c != 0.0)
  {
    CGAffineTransformInvert(&t2, &t1);
    v14 = t2.a;
    v15 = t2.b;
    v16 = t2.c;
    v17 = t2.d;
    v18 = t2.tx;
    v19 = t2.ty;
  }
  v48 = v17;
  v49 = v16;
  v51 = v19;
  v52 = v15;
  v63 = v14;
  v66 = v18;
  v81.origin.x = a3;
  v81.origin.y = a4;
  v81.size.width = a5;
  v81.size.height = a6;
  MinX = CGRectGetMinX(v81);
  v82.origin.x = a3;
  v82.origin.y = a4;
  v82.size.width = a5;
  v82.size.height = a6;
  MinY = CGRectGetMinY(v82);
  CGAffineTransformMakeTranslation(&t1, MinX, MinY);
  v50 = a4;
  v46 = a3;
  v47 = a6;
  v22 = t1.a;
  v23 = t1.b;
  v45 = a5;
  v25 = t1.c;
  v24 = t1.d;
  v26 = t1.tx;
  v27 = t1.ty;
  CGAffineTransformInvert(&t2, &t1);
  v55 = *(_OWORD *)&t2.c;
  v56 = *(_OWORD *)&t2.a;
  v53 = t2.ty;
  v54 = t2.tx;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  t2.a = v74;
  t2.b = v73;
  t2.c = v72;
  t2.d = v71;
  *(_OWORD *)&t2.tx = v13;
  CGAffineTransformConcat(&v75, &t1, &t2);
  v43 = v75.b;
  v44 = v75.a;
  v41 = v75.d;
  v42 = v75.c;
  v39 = v75.ty;
  v40 = v75.tx;
  t1 = v75;
  t2.a = v22;
  t2.b = v23;
  t2.c = v25;
  t2.d = v24;
  t2.tx = v26;
  t2.ty = v27;
  CGAffineTransformConcat(&v75, &t1, &t2);
  v37 = *(_OWORD *)&v75.c;
  v38 = *(_OWORD *)&v75.a;
  v35 = v75.ty;
  v36 = v75.tx;
  v33 = fabs(v61);
  v34 = fabs(v62);
  v31 = fabs(v59);
  v32 = fabs(v60);
  t1.a = v63;
  t1.b = v52;
  t1.c = v49;
  t1.d = v48;
  t1.tx = v66;
  t1.ty = v51;
  t2.a = v34;
  t2.b = v33;
  t2.c = v32;
  t2.d = v31;
  t2.tx = 0.0;
  t2.ty = 0.0;
  CGAffineTransformConcat(&v75, &t1, &t2);
  *(CGFloat *)a2 = v46;
  *(CGFloat *)(a2 + 8) = v50;
  *(CGFloat *)(a2 + 16) = v45;
  *(CGFloat *)(a2 + 24) = v47;
  *(CGFloat *)(a2 + 32) = a;
  *(CGFloat *)(a2 + 40) = b;
  *(CGFloat *)(a2 + 48) = c;
  *(CGFloat *)(a2 + 56) = d;
  *(CGFloat *)(a2 + 64) = tx;
  *(CGFloat *)(a2 + 72) = ty;
  *(CGFloat *)(a2 + 80) = v74;
  *(CGFloat *)(a2 + 88) = v73;
  *(CGFloat *)(a2 + 96) = v72;
  *(CGFloat *)(a2 + 104) = v71;
  *(_OWORD *)(a2 + 112) = v13;
  result = *(__n128 *)&v75.a;
  v29 = *(_OWORD *)&v75.c;
  *(double *)(a2 + 128) = v62;
  *(double *)(a2 + 136) = v61;
  v30 = *(_OWORD *)&v75.tx;
  *(double *)(a2 + 144) = v60;
  *(double *)(a2 + 152) = v59;
  *(CGFloat *)(a2 + 160) = v58;
  *(CGFloat *)(a2 + 168) = v57;
  *(CGFloat *)(a2 + 176) = v63;
  *(CGFloat *)(a2 + 184) = v52;
  *(CGFloat *)(a2 + 192) = v49;
  *(CGFloat *)(a2 + 200) = v48;
  *(CGFloat *)(a2 + 208) = v66;
  *(CGFloat *)(a2 + 216) = v51;
  *(_OWORD *)(a2 + 224) = v56;
  *(_OWORD *)(a2 + 240) = v55;
  *(CGFloat *)(a2 + 256) = v54;
  *(CGFloat *)(a2 + 264) = v53;
  *(CGFloat *)(a2 + 272) = v34;
  *(CGFloat *)(a2 + 280) = v33;
  *(CGFloat *)(a2 + 288) = v32;
  *(CGFloat *)(a2 + 296) = v31;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(CGFloat *)(a2 + 320) = v44;
  *(CGFloat *)(a2 + 328) = v43;
  *(CGFloat *)(a2 + 336) = v42;
  *(CGFloat *)(a2 + 344) = v41;
  *(CGFloat *)(a2 + 352) = v40;
  *(CGFloat *)(a2 + 360) = v39;
  *(_OWORD *)(a2 + 368) = v38;
  *(_OWORD *)(a2 + 384) = v37;
  *(CGFloat *)(a2 + 400) = v36;
  *(CGFloat *)(a2 + 408) = v35;
  *(__n128 *)(a2 + 416) = result;
  *(_OWORD *)(a2 + 432) = v29;
  *(_OWORD *)(a2 + 448) = v30;
  return result;
}

uint64_t sub_100030B88(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;

  if (a2 <= a3)
    a2 = a3;
  if (a2 <= a4)
    a2 = a4;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (double *)(result + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (a2 <= v6)
        a2 = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_100030BBC()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.MagicGlueController", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_100030BF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[26];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UniversalControlLink(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_10021D128;
    v4[9] = &unk_10021D140;
    v4[10] = &unk_10021D140;
    v4[11] = &unk_10021D158;
    v4[12] = &unk_10021D170;
    v4[13] = &unk_10021D188;
    v4[14] = &unk_10021D1A0;
    v4[15] = &unk_10021D1B8;
    v4[16] = &unk_10021D1D0;
    v4[17] = &unk_10021D1E8;
    v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[20] = &unk_10021D170;
    v4[21] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[25] = (char *)&value witness table for Builtin.UnknownObject + 64;
    return swift_updateClassMetadata2(a1, 256, 26, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for MagicGlueController.AnimationContext()
{
  return objc_opt_self(_TtCC13EnsembleAgent19MagicGlueControllerP33_26E92A52E438E077BCC454CB07601FEC16AnimationContext);
}

id sub_100030D10()
{
  return sub_10002F470();
}

id sub_100030D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v14;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = 0;
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "symbolForTypeIdentifier:withResolutionStrategy:variantOptions:error:", v8, a3, a4, &v14);

  v10 = v14;
  if (v9)
  {
    v11 = v14;
  }
  else
  {
    v12 = v14;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow();
  }
  return v9;
}

double sub_100030E20@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = dbl_10021D340[a1];
  v3 = qword_10021D360[a1];
  v4 = qword_10021D380[a1];
  v5 = qword_10021D3A0[a1];
  v6 = qword_10021D3C0[a1];
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(double *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  return result;
}

double sub_100030E70(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  float64x2_t v7;
  _OWORD *v8;
  float64x2_t v9;
  double v10;
  double result;
  CGPoint v12;
  CGFloat y;
  __int128 v14;
  __int128 v15;
  CGAffineTransform v16;
  CGPoint v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return NAN;
  v4 = *(double *)(a1 + 32);
  if (v4 > a3)
    return NAN;
  v5 = v3 - 1;
  if (v3 == 1)
    return NAN;
  v7 = *(float64x2_t *)(a1 + 40);
  v8 = (_OWORD *)(a1 + 64);
  do
  {
    v9 = v7;
    v10 = v4;
    v7 = *(float64x2_t *)v8;
    v4 = *((double *)v8 - 1);
    if (v4 > a3)
      break;
    v8 = (_OWORD *)((char *)v8 + 24);
    --v5;
  }
  while (v5);
  v12 = (CGPoint)vaddq_f64(v9, vmulq_n_f64(vdivq_f64(vsubq_f64(v7, v9), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v4 - v10), 0)), a3 - v10));
  y = v12.y;
  v14 = a2[18];
  *(_OWORD *)&v16.a = a2[17];
  *(_OWORD *)&v16.c = v14;
  *(_OWORD *)&v16.tx = a2[19];
  v17 = CGPointApplyAffineTransform(v12, &v16);
  v15 = a2[27];
  *(_OWORD *)&v16.a = a2[26];
  *(_OWORD *)&v16.c = v15;
  *(_OWORD *)&v16.tx = a2[28];
  *(_QWORD *)&result = *(_OWORD *)&CGPointApplyAffineTransform(v17, &v16);
  return result;
}

CGPath *sub_100030F44(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,double a28,double a29,uint64_t a30,uint64_t a31)
{
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  double *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  CGPath *v50;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  _BYTE v86[512];

  v53 = *(_OWORD *)(a1 + 320);
  v52 = *(_OWORD *)(a1 + 336);
  v34 = *(_QWORD *)(a1 + 352);
  v35 = *(_QWORD *)(a1 + 360);
  v36 = *a2 * 0.5;
  v37 = a15 - v36;
  v38 = a2[1] * 0.5;
  v39 = v38 + a16;
  v40 = a3[1];
  v54 = *a3;
  v68 = *a4;
  v67 = a4[1];
  v66 = *a5;
  v65 = a5[1];
  v64 = *a6;
  v63 = a6[1];
  v84 = a28 - v36;
  v85 = a29 - v38;
  v55 = *a7;
  v56 = a7[1];
  v57 = *a8;
  v59 = a8[1];
  v60 = *a17;
  v61 = a17[1];
  v70 = *a18;
  v71 = a18[1];
  v72 = *a19;
  v73 = a19[1];
  v74 = *a20;
  v75 = a20[1];
  v78 = *a21;
  v79 = a21[1];
  v80 = *a22;
  v81 = a22[1];
  v82 = *a23;
  v83 = a23[1];
  v41 = sub_1000055B0(&qword_1002AAF40);
  inited = swift_initStackObject(v41, v86);
  *(_OWORD *)(inited + 16) = xmmword_10021D0C0;
  *(_QWORD *)(inited + 56) = &type metadata for Transform;
  *(_QWORD *)(inited + 64) = &protocol witness table for Transform;
  v43 = swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 32) = v43;
  *(_OWORD *)(v43 + 16) = v53;
  *(_OWORD *)(v43 + 32) = v52;
  *(_QWORD *)(v43 + 48) = v34;
  *(_QWORD *)(v43 + 56) = v35;
  *(_QWORD *)(inited + 96) = &type metadata for Move;
  *(_QWORD *)(inited + 104) = &protocol witness table for Move;
  *(double *)(inited + 72) = a9;
  *(double *)(inited + 80) = a10;
  *(_QWORD *)(inited + 136) = &type metadata for Line;
  *(_QWORD *)(inited + 144) = &protocol witness table for Line;
  *(double *)(inited + 112) = a11;
  *(double *)(inited + 120) = a12;
  *(_QWORD *)(inited + 176) = &type metadata for Curve;
  *(_QWORD *)(inited + 184) = &protocol witness table for Curve;
  v44 = (double *)swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 152) = v44;
  v44[2] = a13;
  v44[3] = a14;
  v44[4] = v37;
  v44[5] = a16;
  v44[6] = a15;
  v44[7] = v39;
  *(_QWORD *)(inited + 216) = &type metadata for Line;
  *(_QWORD *)(inited + 224) = &protocol witness table for Line;
  *(_QWORD *)(inited + 192) = v54;
  *(_QWORD *)(inited + 200) = v40;
  *(_QWORD *)(inited + 256) = &type metadata for Curve;
  *(_QWORD *)(inited + 264) = &protocol witness table for Curve;
  v45 = (_QWORD *)swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 232) = v45;
  v45[2] = v68;
  v45[3] = v67;
  v45[4] = v66;
  v45[5] = v65;
  v45[6] = v64;
  v45[7] = v63;
  *(_QWORD *)(inited + 296) = &type metadata for Curve;
  *(_QWORD *)(inited + 304) = &protocol witness table for Curve;
  v46 = (_QWORD *)swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 272) = v46;
  v46[2] = v55;
  v46[3] = v56;
  v46[4] = v57;
  v46[5] = v59;
  v46[6] = v60;
  v46[7] = v61;
  *(_QWORD *)(inited + 336) = &type metadata for Curve;
  *(_QWORD *)(inited + 344) = &protocol witness table for Curve;
  v47 = (_QWORD *)swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 312) = v47;
  v47[2] = v70;
  v47[3] = v71;
  v47[4] = v72;
  v47[5] = v73;
  v47[6] = v74;
  v47[7] = v75;
  *(_QWORD *)(inited + 376) = &type metadata for Curve;
  *(_QWORD *)(inited + 384) = &protocol witness table for Curve;
  v48 = (_QWORD *)swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 352) = v48;
  v48[2] = v78;
  v48[3] = v79;
  v48[4] = v80;
  v48[5] = v81;
  v48[6] = v82;
  v48[7] = v83;
  *(_QWORD *)(inited + 416) = &type metadata for Line;
  *(_QWORD *)(inited + 424) = &protocol witness table for Line;
  *(_QWORD *)(inited + 392) = a24;
  *(_QWORD *)(inited + 400) = a25;
  *(_QWORD *)(inited + 456) = &type metadata for Curve;
  *(_QWORD *)(inited + 464) = &protocol witness table for Curve;
  v49 = swift_allocObject(&unk_100282F90, 64, 7);
  *(_QWORD *)(inited + 432) = v49;
  *(_QWORD *)(v49 + 16) = a26;
  *(_QWORD *)(v49 + 24) = a27;
  *(double *)(v49 + 32) = a28;
  *(double *)(v49 + 40) = v85;
  *(double *)(v49 + 48) = v84;
  *(double *)(v49 + 56) = a29;
  *(_QWORD *)(inited + 496) = &type metadata for Line;
  *(_QWORD *)(inited + 504) = &protocol witness table for Line;
  *(_QWORD *)(inited + 472) = a30;
  *(_QWORD *)(inited + 480) = a31;
  v50 = static Path.Builder.buildBlock(_:)(inited);
  swift_setDeallocating(inited);
  sub_100031DCC(&qword_1002AAF48);
  return v50;
}

void sub_100031340()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100251DF0, "EnsembleAgent/MagicGlue.swift", 29, 2, 1369, 0);
  __break(1u);
}

uint64_t sub_1000313B4(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

uint64_t sub_1000313CC(_QWORD *a1)
{
  void *v1;
  uint64_t ObjectType;
  char *v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t DynamicType;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  objc_super v21;
  char *v22;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t v25;

  ObjectType = swift_getObjectType(v1);
  sub_100007918((uint64_t)a1, (uint64_t)v24);
  v4 = v1;
  if (swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, ObjectType, 6))
  {
    v5 = v22;
    v6 = *(void **)&v22[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_color];
    *(_QWORD *)&v4[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_color] = v6;
    *(_QWORD *)&v4[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius] = *(_QWORD *)&v5[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius];
    v7 = v6;

    v8 = a1[3];
    v9 = sub_10000DBE4(a1, v8);
    v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v8);
    v21.receiver = v4;
    v21.super_class = (Class)type metadata accessor for PointLayer();
    v11 = objc_msgSendSuper2(&v21, "initWithLayer:", v10);
    swift_unknownObjectRelease(v10);

    sub_100005988(a1);
    return (uint64_t)v11;
  }
  else
  {
    sub_100007918((uint64_t)a1, (uint64_t)v24);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v13 = v25;
    v14 = sub_10000DBE4(v24, v25);
    DynamicType = swift_getDynamicType(v14, v13, 1);
    v16 = _typeName(_:qualified:)(DynamicType, 0);
    v18 = v17;
    swift_bridgeObjectRelease();
    v22 = (char *)v16;
    v23 = v18;
    v19._object = (void *)0x8000000100253510;
    v19._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v19);
    v20._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "EnsembleAgent/MagicGlue.swift", 29, 2, 1374, 0);
    __break(1u);
  }
  return result;
}

id sub_1000315E0()
{
  char *v0;

  return objc_msgSend(v0, "setBackgroundColor:", *(_QWORD *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_color]);
}

id sub_100031630()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius;
  objc_msgSend(v0, "setBounds:", 0.0, 0.0, *(double *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius]+ *(double *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius], *(double *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius]+ *(double *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer_radius]);
  return objc_msgSend(v0, "setCornerRadius:", *(double *)&v0[v1]);
}

void sub_1000316B8()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.PointLayer", 24, "init()", 6, 0);
  __break(1u);
}

id sub_100031704()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PointLayer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PointLayer()
{
  return objc_opt_self(_TtC13EnsembleAgentP33_26E92A52E438E077BCC454CB07601FEC10PointLayer);
}

uint64_t getEnumTagSinglePayload for RevealFunction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RevealFunction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RevealFunction()
{
  return &type metadata for RevealFunction;
}

void *initializeWithCopy for Geometry(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1D0uLL);
}

uint64_t getEnumTagSinglePayload for Geometry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 464))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Geometry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 456) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 464) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Geometry()
{
  return &type metadata for Geometry;
}

void *initializeWithCopy for GlueMetrics(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t getEnumTagSinglePayload for GlueMetrics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 168))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GlueMetrics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 168) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GlueMetrics()
{
  return &type metadata for GlueMetrics;
}

uint64_t sub_100031938(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 2)
    return swift_retain(result);
  return result;
}

uint64_t destroy for MagicGlueController.Mode(uint64_t a1)
{
  return sub_10003195C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10003195C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 2)
    return swift_release(result);
  return result;
}

uint64_t _s13EnsembleAgent19MagicGlueControllerC4ModeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100031938(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MagicGlueController.Mode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100031938(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10003195C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for MagicGlueController.Mode(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MagicGlueController.Mode(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10003195C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MagicGlueController.Mode(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicGlueController.Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100031AE8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_100031B00(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MagicGlueController.Mode()
{
  return &type metadata for MagicGlueController.Mode;
}

uint64_t initializeBufferWithCopyOfBuffer for PointerState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100031B6C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100031B6C(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_retain(result);
  return result;
}

uint64_t destroy for PointerState(uint64_t a1)
{
  return sub_100031B90(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100031B90(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_release(result);
  return result;
}

uint64_t assignWithCopy for PointerState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100031B6C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100031B90(v5, v6);
  return a1;
}

uint64_t assignWithTake for PointerState(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100031B90(v4, v5);
  return a1;
}

uint64_t sub_100031C30(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100031C48(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PointerState()
{
  return &type metadata for PointerState;
}

uint64_t storeEnumTagSinglePayload for MagicGlueController.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100031CBC + 4 * byte_10021D109[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100031CF0 + 4 * byte_10021D104[v4]))();
}

uint64_t sub_100031CF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031CF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100031D00);
  return result;
}

uint64_t sub_100031D0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100031D14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100031D18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031D20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicGlueController.Status()
{
  return &type metadata for MagicGlueController.Status;
}

unint64_t sub_100031D40()
{
  unint64_t result;

  result = qword_1002AAF20;
  if (!qword_1002AAF20)
  {
    result = swift_getWitnessTable(&unk_10021D2D8, &type metadata for MagicGlueController.Status);
    atomic_store(result, (unint64_t *)&qword_1002AAF20);
  }
  return result;
}

id *sub_100031D7C(id *a1)
{

  return a1;
}

uint64_t sub_100031DA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100031DB4()
{
  return sub_100031DCC(&qword_1002AAF58);
}

uint64_t sub_100031DC0()
{
  return sub_100031DCC((uint64_t *)&unk_1002AAF80);
}

uint64_t sub_100031DCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = sub_1000055B0(a1);
  swift_arrayDestroy(v1 + 32, v2, v3);
  v4 = sub_1000323A8();
  return swift_deallocClassInstance(v4, v5, v6);
}

uint64_t sub_100031E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_arrayDestroy(v0 + 32, *(_QWORD *)(v0 + 16), &type metadata for String);
  v1 = sub_1000323A8();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_100031E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_1000055B0(qword_1002AAF90);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_arrayDestroy(v0 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 16), v1);
  v3 = sub_1000323A8();
  return swift_deallocClassInstance(v3, v4, v5);
}

uint64_t sub_100031E74(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  _QWORD *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD aBlock[7];

  v55 = a12;
  v45 = a10;
  v18 = type metadata accessor for DispatchTimeInterval(0);
  v53 = *(_QWORD *)(v18 - 8);
  v54 = v18;
  __chkstk_darwin(v18);
  v50 = (void **)((char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for DispatchTime(0);
  v51 = *(_QWORD *)(v20 - 8);
  v52 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v23 - 8);
  v49 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v26 - 8);
  v47 = v26;
  __chkstk_darwin(v26);
  v28 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a13 + 48) = 0;
  *(double *)(a13 + 16) = a6;
  *(double *)(a13 + 24) = a7;
  *(double *)(a13 + 32) = a8;
  *(double *)(a13 + 40) = a6 / (a5 / 0.0166666667);
  sub_1000078E0(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  static OS_dispatch_source.TimerFlags.strict.getter();
  v33 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v34 = (void *)static OS_dispatch_queue.main.getter(v33);
  v35 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v32, v34);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  v36 = *(_QWORD *)(a13 + 48);
  *(_QWORD *)(a13 + 48) = v35;
  swift_unknownObjectRetain(v35);
  swift_unknownObjectRelease(v36);
  ObjectType = swift_getObjectType(v35);
  v38 = (_QWORD *)swift_allocObject(&unk_100282FB8, 48, 7);
  v38[2] = a13;
  v38[3] = v35;
  v39 = v45;
  v38[4] = v45;
  v38[5] = &off_100282F70;
  aBlock[4] = sub_100032228;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100282FD0;
  v40 = _Block_copy(aBlock);
  swift_unknownObjectRetain(v35);
  swift_retain(a13);
  v41 = v39;
  static DispatchQoS.unspecified.getter(v41);
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v28, v25, v40, ObjectType);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v25, v49);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
  v42 = swift_release();
  static DispatchTime.now()(v42);
  v43 = v50;
  sub_10002DF34(v50);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v22, v43, ObjectType, 0.0166666667);
  (*(void (**)(_QWORD *, uint64_t))(v53 + 8))(v43, v54);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v22, v52);
  OS_dispatch_source.activate()();
  swift_unknownObjectRelease(v35);

  swift_release();
  return a13;
}

uint64_t sub_1000321F4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_100032228()
{
  uint64_t *v0;

  return sub_10002DE38(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100032234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100032244(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10003224C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AA6C0;
  if (!qword_1002AA6C0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1002AA6C0);
  }
  return result;
}

unint64_t sub_10003228C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AA6D0;
  if (!qword_1002AA6D0)
  {
    v1 = sub_10000DCA0((uint64_t *)&unk_1002AC9A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AA6D0);
  }
  return result;
}

void sub_1000322D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000055B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_1000050D4();
}

double sub_100032314()
{
  uint64_t v0;
  double v1;
  double v2;

  return CGPoint.rounded(_:to:)(v0, 2.0, v1, v2);
}

id sub_100032328()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2624));
}

id sub_100032334()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2624));
}

uint64_t sub_100032340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v0, v1);
}

id sub_100032350(id a1, SEL a2)
{
  return objc_msgSend(a1, a2);
}

uint64_t sub_100032360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_10003236C(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t sub_100032374()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

id sub_100032388()
{
  void *v0;

  return objc_msgSend(v0, "setDisableActions:", 1);
}

id sub_10003239C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_1000323A8()
{
  uint64_t v0;

  return v0;
}

id sub_1000323B8(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 2728));
}

id sub_1000323C0()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 3864));
}

double sub_1000323C8()
{
  return 0.0;
}

uint64_t sub_1000323DC(uint64_t a1)
{
  return swift_allocObject(a1, 56, 7);
}

void *sub_1000323E8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

void sub_100032404()
{
  uint64_t v0;

  sub_10002EE40(v0);
}

id sub_100032410(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_10003241C()
{
  uint64_t v0;

  sub_10002F8A8(v0);
}

void sub_100032428()
{
  uint64_t v0;

  sub_10003040C(v0);
}

id sub_100032434(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t AnyError.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnyError.error.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t AnyError.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_100032498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_1000324A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_10003250C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_10003257C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10003258C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1000325BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1000325EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_10003261C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_10003264C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_18;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1, v6, v4);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return (v6 + v12 + 1);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1000326FC + 4 * byte_10021D3E0[(v8 - 1)]))();
}

void sub_100032748(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v8 <= 3)
    {
      v14 = ((v11 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v15 = v13 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for AnyError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyError);
}

uint64_t sub_1000328FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100032928()
{
  uint64_t v0;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v0);
  sub_100032958();
  return ObservableObject<>.objectWillChange.getter(ObjectType);
}

unint64_t sub_100032958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC1C0;
  if (!qword_1002AC1C0)
  {
    v1 = type metadata accessor for UniversalControlPreferences(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlPreferences, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC1C0);
  }
  return result;
}

void sub_100032998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10005881C();
    v3 = sub_100071A78(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(a1 + 32))
      {
        v6 = a1 + 64;
        v15 = a1 + 64;
        while ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v16 = v1;
          v17 = v4;
          v7 = *(_QWORD *)(a1 + 56) + 56 * v5;
          v21 = *(_OWORD *)v7;
          v22 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5);
          v8 = *(_QWORD *)(v7 + 16);
          v19 = *(_QWORD *)(v7 + 32);
          v20 = *(_QWORD *)(v7 + 24);
          v18 = *(_BYTE *)(v7 + 40);
          v9 = *(_QWORD *)(v7 + 48);
          v11 = _swiftEmptyArrayStorage[2];
          v10 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v11 >= v10 >> 1)
            sub_10005881C();
          _swiftEmptyArrayStorage[2] = v11 + 1;
          v12 = &_swiftEmptyArrayStorage[9 * v11];
          *((_OWORD *)v12 + 2) = v22;
          *((_OWORD *)v12 + 3) = v21;
          v12[8] = v8;
          v12[9] = v20;
          v12[10] = v19;
          *((_BYTE *)v12 + 88) = v18;
          v12[12] = v9;
          v13 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v5 >= -v13)
            goto LABEL_19;
          v6 = a1 + 64;
          if ((*(_QWORD *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          if (v17 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v14 = _HashTable.occupiedBucket(after:)(v5, v15, ~v13);
          --v1;
          if (v16 == 1)
            return;
          v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            v4 = *(_DWORD *)(a1 + 36);
            if (v14 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_100032BA0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v28 = _swiftEmptyArrayStorage;
  sub_100058774();
  v2 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(*a1);
  v24 = sub_100036864((uint64_t)a1);
  v25 = v3;
  v26 = v4;
  v27 = v5;
  if (v3 == v4)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    while (1)
    {
      v6 = v27;
      v7 = *(_QWORD *)(v27 + 16);
      if (v7)
        break;
      v8 = _swiftEmptyArrayStorage;
LABEL_13:
      sub_100036960();
      v15 = v8[2];
      sub_100033B3C();
      v16 = Set.init(minimumCapacity:)(v15);
      v23 = v16;
      v17 = v8[2];
      if (v17)
      {
        v18 = v8 + 5;
        do
        {
          sub_100119698((uint64_t)&v22, *(v18 - 1), *v18);
          v18 += 2;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
        v19 = v23;
      }
      else
      {
        v19 = v16;
        swift_bridgeObjectRelease();
      }
      v28 = v2;
      v20 = v2[2];
      if (v20 >= v2[3] >> 1)
      {
        sub_100058774();
        v2 = v28;
      }
      v2[2] = v20 + 1;
      v2[v20 + 4] = v19;
      if (v25 == v26)
        goto LABEL_21;
    }
    v22 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v27);
    sub_1000586CC();
    v8 = v22;
    v9 = v24;
    v10 = v24 + 56;
    v11 = (_DWORD *)(v6 + 40);
    while (1)
    {
      v12 = *((_QWORD *)v11 - 1);
      if (v12 < 0 || v12 >= 1 << *(_BYTE *)(v9 + 32))
        break;
      if (((*(_QWORD *)(v10 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v9 + 36) != *v11)
        goto LABEL_24;
      v13 = *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v12);
      v22 = v8;
      v14 = v8[2];
      if (v14 >= v8[3] >> 1)
      {
        v21 = v13;
        sub_1000586CC();
        v13 = v21;
        v8 = v22;
      }
      v11 += 6;
      v8[2] = v14 + 1;
      *(_OWORD *)&v8[2 * v14 + 4] = v13;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

uint64_t sub_100032E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD v20[2];
  _BYTE v21[17];
  uint64_t v22;
  unint64_t v23;
  char v24;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)0xE000000000000000;
  v22 = 0;
  v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v23);
  v20[0] = 0x3A434E59533CLL;
  v20[1] = 0xE600000000000000;
  v6 = sub_10003AFBC();
  sub_100061BB4(v6);
  sub_10000E420();
  sub_10003B138();
  sub_10000E4A0();
  v7._countAndFlagsBits = 0x3A4E4E4F432CLL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  v8 = sub_10003AFBC();
  sub_100061BB4(v8);
  sub_10000E420();
  sub_10003B138();
  sub_10000E4A0();
  v9._countAndFlagsBits = 0x273A4352532CLL;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  sub_10003A2FC(v0 + 24, (uint64_t)v21);
  sub_10003A2FC((uint64_t)v21, (uint64_t)&v22);
  if ((v24 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v11 = UUID.init(uuid:)(v22, BYTE1(v22), BYTE2(v22), BYTE3(v22), BYTE4(v22), BYTE5(v22));
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v15 = sub_1000599D0(8, v12, v14);
    v10 = static String._fromSubstring(_:)(v15);
    v5 = v16;
    sub_10000E420();
  }
  v17._countAndFlagsBits = v10;
  v17._object = v5;
  String.append(_:)(v17);
  sub_10000E568();
  v18._countAndFlagsBits = 15911;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  return v20[0];
}

uint64_t sub_100032FF8(uint64_t a1, uint64_t a2)
{
  if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8))
    || (sub_100198A54(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0
      && !static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32)))
    {
      return sub_100198A54(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 40))
    return 0;
  return sub_100198A54(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
}

uint64_t sub_10003307C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  char v11;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100252870;
    if (a2 == 0x8000000100252870)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100252870, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6544656372756F73 && a2 == 0xEC00000065636976)
  {
    v9 = 0xEC00000065636976;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6544656372756F73, 0xEC00000065636976, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x65446465636E7973 && a2 == 0xED00007365636976)
  {
    swift_bridgeObjectRelease(0xED00007365636976);
    return 3;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65446465636E7973, 0xED00007365636976, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100033248(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100033270 + 4 * byte_10021D4A0[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_100033270()
{
  return 0xD000000000000010;
}

uint64_t sub_10003328C()
{
  return 0x6544656372756F73;
}

uint64_t sub_1000332AC()
{
  return 0x65446465636E7973;
}

void sub_1000332D0()
{
  unsigned __int8 *v0;

  _s8HIDUtils13HIDDeviceTypeO9hashValueSivg_0(*v0);
}

uint64_t sub_1000332EC()
{
  unsigned __int8 *v0;

  return sub_100033248(*v0);
}

uint64_t sub_1000332F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003307C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100033318()
{
  return HIDServicePropertyKey.intValue.getter();
}

uint64_t sub_100033334@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.appleVendorTopCase.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003A344();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100033380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003A344();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000333A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[3];
  _BYTE v37[17];

  sub_10003AFC4();
  a22 = v26;
  a23 = v27;
  v28 = v23;
  v30 = v29;
  v31 = sub_1000055B0(&qword_1002AB170);
  sub_10003B160();
  __chkstk_darwin(v32);
  sub_10000DBE4(v30, v30[3]);
  v33 = sub_10003A344();
  sub_10003B088((uint64_t)&type metadata for SyncedDeviceView.CodingKeys, v34, v33);
  v35 = sub_10003B150();
  sub_10003AF78();
  if (!v24)
  {
    v36[0] = *(_QWORD *)(v28 + 16);
    sub_10003B19C();
    sub_1000055B0(&qword_1002AA570);
    sub_10003672C();
    sub_10003AF78();
    sub_10003A2FC(v28 + 24, (uint64_t)v37);
    sub_10003A2FC((uint64_t)v37, (uint64_t)v36);
    a13 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &a13, v31, &type metadata for UniversalControlDeviceID, v35);
    v36[0] = *(_QWORD *)(v28 + 48);
    a13 = 3;
    sub_10003AF78();
  }
  sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  sub_10003AF60();
}

void sub_100033528()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;

  sub_10003AFC4();
  v2 = v1;
  v4 = v3;
  v5 = sub_1000055B0(&qword_1002AB158);
  __chkstk_darwin(v5);
  sub_10000DBE4(v2, v2[3]);
  v6 = sub_10003A344();
  sub_10003B190((uint64_t)&type metadata for SyncedDeviceView.CodingKeys, (uint64_t)&type metadata for SyncedDeviceView.CodingKeys, v6);
  if (v0)
  {
    sub_10003B008();
  }
  else
  {
    sub_10003A380();
    sub_10003B010();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v8, v9, v10);
    sub_1000055B0(&qword_1002AA570);
    sub_10003B19C();
    sub_10003A3BC();
    v11 = sub_10003B0B4();
    sub_10003B04C(v11, v12, v13, v14);
    swift_bridgeObjectRetain();
    sub_10003B010();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v15 = sub_10003B0B4();
    sub_10003B04C(v15, v16, v17, v18);
    sub_10003AF84();
    sub_10003AFBC();
    sub_100005988(v2);
    swift_bridgeObjectRelease();
    sub_10002D89C();
    *(_OWORD *)v4 = v19;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)(v4 + 24) = v19;
    *(_BYTE *)(v4 + 40) = v20;
    *(_QWORD *)(v4 + 48) = v19;
  }
  sub_10003AF60();
}

double sub_10003370C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_100033528();
  if (!v1)
  {
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    result = *(double *)&v6;
    *(_OWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 48) = v7;
  }
  return result;
}

void sub_100033758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars0;
  uint64_t vars8;

  sub_1000333A8(a1, a2, a3, a4, a5, a6, a7, a8, *v8, v8[1], WORD6(*(_OWORD *)v8), BYTE14(*(_OWORD *)v8), HIBYTE(*(_OWORD *)v8), v8[2], v8[3], v8[4], v8[5], v8[6], v9,
    v10,
    v11,
    vars0,
    vars8);
}

uint64_t sub_100033798()
{
  return sub_100032E28();
}

__n128 sub_1000337DC@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t sub_1000337E8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002AB020);
  sub_100006FB4(v0, (uint64_t)qword_1002AB020);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1129466179, 0xE400000000000000);
}

_QWORD *sub_100033854()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return v0;
}

uint64_t sub_100033880()
{
  uint64_t v0;

  sub_100033854();
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for SyncCircleController()
{
  return objc_opt_self(_TtC13EnsembleAgent20SyncCircleController);
}

uint64_t sub_1000338C0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t sub_1000338E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10003393C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for DragController.Event(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100033A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100033AA0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100033AE0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SyncedDeviceView()
{
  sub_10003B1DC();
}

unint64_t sub_100033B3C()
{
  unint64_t result;

  result = qword_1002B19A0;
  if (!qword_1002B19A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDeviceID, &type metadata for UniversalControlDeviceID);
    atomic_store(result, (unint64_t *)&qword_1002B19A0);
  }
  return result;
}

unint64_t sub_100033B7C()
{
  unint64_t result;

  result = qword_1002AC290;
  if (!qword_1002AC290)
  {
    result = swift_getWitnessTable(&unk_10021D618, &unk_100283398);
    atomic_store(result, (unint64_t *)&qword_1002AC290);
  }
  return result;
}

uint64_t sub_100033BB8()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 16) = &_swiftEmptySetSingleton;
  v1 = sub_100033B3C();
  *(_QWORD *)(v0 + 24) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, &unk_100283170, v1);
  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 40) = 0;
  return v0;
}

void *sub_100033C10(unint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  Swift::String v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  Swift::String v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  void *v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  NSObject *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  uint64_t v202;
  unint64_t v203;
  __int128 v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;

  v6 = type metadata accessor for Logger(0);
  v152 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v150 = v7;
  v167 = type metadata accessor for UUID(0);
  v165 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  sub_10000E5DC();
  v163 = v8;
  swift_bridgeObjectRetain(a3);
  sub_100058138(v9, v10, v11, v12, v13, v14, v15, v16, v140, v142, v144, v146, v148, v150, v152, v154, v156, v157, a2,
    v161,
    v163,
    v165,
    v167,
    v170,
    v172,
    v175);
  v18 = v17;
  v147 = a3;
  swift_bridgeObjectRelease();
  v202 = v18;
  sub_100036F2C(&v202, (uint64_t (*)(uint64_t))sub_10006CBA8, (uint64_t (*)(Swift::Int))sub_1000222A8);
  v19 = v202;
  v149 = v3;
  v20 = *(_QWORD *)(v202 + 16);
  v158 = (_QWORD *)a1;
  if (v20)
  {
    v155 = v6;
    v193 = _swiftEmptyArrayStorage;
    sub_10003B17C();
    v21 = 0;
    v162 = v19;
    do
    {
      v190 = v20;
      v187 = v21;
      v22 = v19 + v21;
      v179 = *(_QWORD *)(v22 + 64);
      v186 = *(_QWORD *)(v22 + 72);
      v184 = *(_QWORD *)(v22 + 80);
      v181 = *(_BYTE *)(v22 + 88);
      v176 = *(_QWORD *)(v22 + 96);
      v23 = *(unsigned __int8 *)(v22 + 37);
      v24 = *(unsigned __int8 *)(v22 + 36);
      v25 = *(unsigned __int8 *)(v22 + 35);
      v26 = *(unsigned __int8 *)(v22 + 34);
      v27 = *(unsigned __int8 *)(v22 + 33);
      v28 = *(unsigned __int8 *)(v22 + 32);
      v202 = 0;
      v203 = 0xE000000000000000;
      swift_bridgeObjectRetain(v179);
      sub_10003AFBC();
      v173 = *(_OWORD *)(v22 + 48);
      v29 = UUID.init(uuid:)(v28, v27, v26, v25, v24, v23);
      v30 = UUID.uuidString.getter(v29);
      v32 = v31;
      (*(void (**)(uint64_t, unint64_t))(v166 + 8))(v164, v168);
      v33 = sub_1000599D0(8, v30, v32);
      v34 = static String._fromSubstring(_:)(v33);
      v36 = v35;
      sub_10000E420();
      swift_bridgeObjectRelease();
      v202 = v34;
      v203 = v36;
      v37._countAndFlagsBits = 8250;
      v37._object = (void *)0xE200000000000000;
      String.append(_:)(v37);
      v204 = v173;
      v205 = v179;
      v206 = v186;
      v207 = v184;
      v208 = v181;
      v209 = v176;
      v38._countAndFlagsBits = sub_100032E28();
      String.append(_:)(v38);
      sub_10000E410();
      sub_10000E568();
      swift_bridgeObjectRelease();
      v39 = v202;
      a1 = v203;
      v40 = v193;
      if ((swift_isUniquelyReferenced_nonNull_native(v193) & 1) == 0)
      {
        sub_10003B148();
        v40 = v193;
      }
      v41 = v40[2];
      if (v41 >= v40[3] >> 1)
      {
        sub_10003B148();
        v40 = v193;
      }
      v40[2] = v41 + 1;
      v42 = &v40[2 * v41];
      v42[4] = v39;
      v42[5] = a1;
      v21 = v187 + 72;
      v20 = v190 - 1;
      v19 = v162;
    }
    while (v190 != 1);
    swift_release();
    sub_10003B104();
    v6 = v155;
  }
  else
  {
    swift_release();
    v40 = _swiftEmptyArrayStorage;
  }
  v202 = (uint64_t)v40;
  v43 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10003A0A8((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160, (uint64_t)&protocol conformance descriptor for [A]);
  v44 = sub_10003B1FC();
  *(_QWORD *)(v45 - 256) = v43;
  v188 = v46;
  v48 = BidirectionalCollection<>.joined(separator:)(v44, v47, v43, v46);
  v50 = v49;
  sub_10000E568();
  if (qword_1002A9820 != -1)
    swift_once(&qword_1002A9820, sub_1000337E8);
  v51 = sub_100006FB4(v6, (uint64_t)qword_1002AB020);
  v52 = sub_1000103C0();
  v145 = v51;
  v53 = Logger.logObject.getter(v52);
  v55 = static os_log_type_t.default.getter(v53, v54);
  if (os_log_type_enabled(v53, v55))
  {
    v56 = (uint8_t *)sub_10000797C(12);
    v57 = sub_10000797C(32);
    v202 = v57;
    *(_DWORD *)v56 = 136446210;
    a1 = (unint64_t)(v56 + 12);
    sub_1000103C0();
    v58 = sub_100006FCC(v48, v50, &v202);
    v59 = sub_10003B0CC(v58);
    sub_10003B0A4(v59, v60, v61);
    swift_bridgeObjectRelease_n(v50, 3);
    _os_log_impl((void *)&_mh_execute_header, v53, v55, "Device views: [%{public}s]", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v57);
    sub_100007958((uint64_t)v56);

  }
  else
  {

    sub_100026AF4(v50);
  }
  v62 = v149;
  v63 = sub_10003AFBC();
  sub_1000DFA24(v63);
  v65 = v64;
  sub_10003AFBC();
  v66 = 0;
  v143 = sub_100039230(v65, v147, a1, v160);
  v67 = (uint64_t)sub_100034A80(v147);
  v68 = (_QWORD *)v149[4];
  sub_1000103C0();
  sub_1000713C8((_QWORD *)v67, v68);
  v70 = v69;
  sub_10000E410();
  if ((v70 & 1) != 0)
  {
    v71 = v160;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 16))(v151, v145, v6);
    swift_retain_n(v149, 2);
    v72 = sub_10003B09C(v67);
    v73 = Logger.logObject.getter(v72);
    v75 = static os_log_type_t.default.getter(v73, v74);
    if (os_log_type_enabled(v73, v75))
    {
      v182 = v73;
      v76 = sub_10000797C(22);
      v177 = sub_10000797C(64);
      v193 = (_QWORD *)v177;
      *(_DWORD *)v76 = 136446466;
      v77 = v149[4];
      v78 = *(_QWORD *)(v77 + 16);
      if (v78)
      {
        sub_10003B1E4();
        sub_1000103C0();
        sub_10003B17C();
        v67 = 0;
        sub_10003B1F0();
        do
        {
          v79 = *(_QWORD *)(v77 + 8 * v67 + 32);
          v202 = 91;
          v203 = 0xE100000000000000;
          swift_bridgeObjectRetain(v79);
          sub_10006099C(v80);
          sub_10003B0E4(v81);
          sub_100063410(&v192);
          sub_10000E420();
          v82 = sub_10003AF94();
          v84 = v83;
          swift_release();
          v85._countAndFlagsBits = v82;
          v85._object = v84;
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          sub_10003B1B8();
          swift_bridgeObjectRelease();
          v86 = v202;
          v6 = v203;
          sub_10003B1E4();
          v87 = _swiftEmptyArrayStorage[2];
          v76 = v87 + 1;
          if (v87 >= _swiftEmptyArrayStorage[3] >> 1)
          {
            sub_10003B148();
            sub_10003B1F0();
          }
          ++v67;
          _swiftEmptyArrayStorage[2] = v76;
          v88 = &_swiftEmptyArrayStorage[2 * v87];
          v88[4] = v86;
          v88[5] = v6;
        }
        while (v78 != v67);
        sub_10000E410();
        sub_10003B06C();
      }
      v202 = (uint64_t)_swiftEmptyArrayStorage;
      BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v190, v188);
      sub_10000E4A0();
      v89 = sub_10003B110();
      sub_10003B058(v89, v90, v91, v76 + 12);
      swift_release_n(v149, 2);
      sub_10000E568();
      *(_WORD *)(v76 + 12) = 2082;
      v92 = *(_QWORD *)(v67 + 16);
      if (v92)
      {
        sub_10003B1E4();
        sub_10003B17C();
        sub_10003B1F0();
        v67 += 32;
        do
        {
          v93 = *(_QWORD *)v67;
          v202 = 91;
          v203 = 0xE100000000000000;
          swift_bridgeObjectRetain(v93);
          sub_10006099C(v94);
          sub_10003B0E4(v95);
          sub_100063410(&v192);
          sub_10000E420();
          v96 = sub_10003AF94();
          v98 = v97;
          swift_release();
          v99._countAndFlagsBits = v96;
          v99._object = v98;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
          sub_10003B1B8();
          sub_10000E568();
          v100 = v202;
          v6 = v203;
          sub_10003B1E4();
          v76 = _swiftEmptyArrayStorage[2];
          if (v76 >= _swiftEmptyArrayStorage[3] >> 1)
          {
            sub_10003B148();
            sub_10003B1F0();
          }
          _swiftEmptyArrayStorage[2] = v76 + 1;
          v101 = &_swiftEmptyArrayStorage[2 * v76];
          v101[4] = v100;
          v101[5] = v6;
          v67 += 8;
          --v92;
        }
        while (v92);
        sub_10003B06C();
      }
      v202 = (uint64_t)_swiftEmptyArrayStorage;
      v102 = sub_10003B1FC();
      BidirectionalCollection<>.joined(separator:)(v102, v104, *(_QWORD *)(v103 - 256), v188);
      sub_10000E4A0();
      v105 = sub_10003B110();
      sub_10003B058(v105, v106, v107, v76 + 22);
      sub_100026AF4(v67);
      sub_10000E568();
      _os_log_impl((void *)&_mh_execute_header, v182, v75, "Updated sync circles from: [%{public}s] to: [%{public}s]", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy(v177, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v177);
      sub_100007958(v76);

      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v151, v6);
      v62 = v149;
    }
    else
    {

      sub_100026AF4(v67);
      swift_release_n(v149, 2);
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v151, v6);
    }
    v71 = v160;
    v62[4] = v67;
  }
  swift_bridgeObjectRelease();
  v108 = v62[4];
  v109 = *(_QWORD *)(v108 + 16);
  if (!v109)
  {
    v111 = &_swiftEmptySetSingleton;
    sub_10003B104();
    goto LABEL_50;
  }
  v191 = v108 + 32;
  v141 = v62[4];
  sub_10003B09C(v108);
  v110 = 0;
  v185 = HIBYTE(v71);
  v183 = HIWORD(v71);
  v180 = v71 >> 40;
  v178 = HIDWORD(v71);
  v174 = v71 >> 24;
  v171 = v71 >> 16;
  v169 = v71 >> 8;
  while (1)
  {
    v111 = *(_QWORD **)(v191 + 8 * v110);
    if (!v111[2])
      goto LABEL_44;
    Hasher.init(_seed:)(&v202, v111[5]);
    v193 = v158;
    v194 = v71;
    v195 = v169;
    v196 = v171;
    v197 = v174;
    v198 = v178;
    v199 = v180;
    v200 = v183;
    v201 = v185;
    Hasher.combine(bytes:)(&v193, &v202);
    v112 = Hasher._finalize()() & ~(-1 << *((_BYTE *)v111 + 32));
    if (((*(_QWORD *)((char *)v111 + ((v112 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v112) & 1) == 0)
      goto LABEL_44;
    v189 = v66;
    v113 = v109;
    v114 = (uint64_t *)(v111[6] + 16 * v112);
    v115 = *v114;
    v116 = v114[1];
    sub_10003B1A8();
    if (!static UniversalControlUUID.compare(lhs:rhs:)(v115, v116))
    {
      sub_10003B104();
      goto LABEL_48;
    }
    sub_10003B120();
    if ((v117 & 1) != 0)
      break;
LABEL_43:
    sub_10000E4A0();
    LOBYTE(v71) = v160;
    v109 = v113;
    v66 = v189;
LABEL_44:
    if (++v110 == v109)
    {
      v111 = &_swiftEmptySetSingleton;
      sub_10003B104();
      v122 = v141;
      goto LABEL_49;
    }
  }
  sub_10003B104();
  while (static UniversalControlUUID.compare(lhs:rhs:)(v118, v119))
  {
    sub_10003B120();
    if ((v120 & 1) == 0)
      goto LABEL_43;
    v121 = (uint64_t *)(v111[6] + 16 * v116);
    v118 = *v121;
    v119 = v121[1];
  }
LABEL_48:
  v122 = v141;
LABEL_49:
  sub_100026AF4(v122);
LABEL_50:
  v123 = sub_10003B09C((uint64_t)v111);
  v124 = Logger.logObject.getter(v123);
  v126 = static os_log_type_t.default.getter(v124, v125);
  if (os_log_type_enabled(v124, v126))
  {
    v127 = (uint8_t *)sub_10000797C(12);
    v128 = sub_10000797C(32);
    v202 = v128;
    *(_DWORD *)v127 = 136446210;
    v129 = sub_10003B1A8();
    v130 = sub_100061BB4(v129);
    v132 = v131;
    sub_10000E4A0();
    v133 = sub_100006FCC(v130, v132, &v202);
    v134 = sub_10003B0CC(v133);
    sub_10003B0A4(v134, v135, v136);
    sub_100026AF4((uint64_t)v111);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v124, v126, "Selected circle: %{public}s", v127, 0xCu);
    swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v128);
    sub_100007958((uint64_t)v127);

  }
  else
  {

    sub_100026AF4((uint64_t)v111);
  }
  v137 = sub_10003941C(v143);
  v138 = sub_1000395A4((uint64_t)v137, (uint64_t)v111);
  v149[3] = v147;
  swift_bridgeObjectRetain(v147);
  sub_10000E420();
  v149[2] = v138;
  swift_retain();
  sub_10000E420();
  return v138;
}

_QWORD *sub_100034A80(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t i;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  _BOOL8 v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  Swift::Int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t j;
  char v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int64_t v127;
  char v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  int64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156[16];
  uint64_t v157;
  uint64_t v158[9];
  _QWORD v159[4];
  BOOL v160;

  v2 = sub_1000055B0(&qword_1002AA570);
  v3 = sub_10003A0A8(&qword_1002AA578, &qword_1002AA570, (uint64_t)&protocol conformance descriptor for Set<A>);
  v123 = v2;
  v157 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v2, v3);
  v125 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v127 = (unint64_t)(v4 + 63) >> 6;
  v129 = a1;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v137 = (v6 - 1) & v6;
  v139 = v7;
  for (i = __clz(__rbit64(v6)) | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    v14 = (unsigned int *)(*(_QWORD *)(v129 + 48) + 16 * i);
    v15 = *v14;
    v16 = *((unsigned __int8 *)v14 + 4);
    v17 = *((unsigned __int8 *)v14 + 5);
    v18 = *((unsigned __int8 *)v14 + 6);
    v19 = *((unsigned __int8 *)v14 + 7);
    v133 = v14[2];
    v20 = *((unsigned __int8 *)v14 + 12);
    v131 = *((unsigned __int8 *)v14 + 13);
    v135 = *((unsigned __int8 *)v14 + 14);
    v21 = *((unsigned __int8 *)v14 + 15);
    v22 = *(_QWORD *)(*(_QWORD *)(v129 + 56) + 56 * i + 48);
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
      v24 = v23 + 1;
    else
      v24 = 0;
    v159[0] = v22;
    v159[1] = v23;
    v159[2] = v23 != 0;
    v159[3] = v24;
    v160 = v23 == 0;
    swift_bridgeObjectRetain(v22);
    sub_100032BA0(v159);
    v26 = v25;
    v141 = v8;
    swift_bridgeObjectRelease();
    v144 = v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = v21;
      v29 = (uint64_t *)(v144 + 32);
      v30 = v15 | (v16 << 32) | (v17 << 40) | (v18 << 48) | (v19 << 56);
      v31 = v133 | (v20 << 32) | (v131 << 40) | (v135 << 48) | (v28 << 56);
      do
      {
        v32 = *v29;
        v33 = v157;
        v34 = *(_QWORD *)(v157 + 16);
        swift_bridgeObjectRetain(*v29);
        if (!v34 || (sub_1001A8D30(v32), (v35 & 1) == 0))
        {
          swift_bridgeObjectRetain(v32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
          v158[0] = v33;
          v37 = sub_1001A8D30(v32);
          v40 = *(_QWORD *)(v33 + 16);
          v41 = (v38 & 1) == 0;
          v42 = v40 + v41;
          if (__OFADD__(v40, v41))
          {
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            v111 = v39;
            swift_release();
            goto LABEL_119;
          }
          v43 = v37;
          v44 = v38;
          sub_1000055B0(&qword_1002AA568);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42))
          {
            v45 = sub_1001A8D30(v32);
            if ((v44 & 1) != (v46 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v123);
              __break(1u);
              while (1)
              {
                swift_release();
                __break(1u);
              }
            }
            v43 = v45;
          }
          v47 = (_QWORD *)v158[0];
          if ((v44 & 1) != 0)
          {
            v48 = *(_QWORD *)(v158[0] + 56);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v48 + 8 * v43) = &_swiftEmptySetSingleton;
          }
          else
          {
            *(_QWORD *)(v158[0] + 8 * (v43 >> 6) + 64) |= 1 << v43;
            *(_QWORD *)(v47[6] + 8 * v43) = v32;
            *(_QWORD *)(v47[7] + 8 * v43) = &_swiftEmptySetSingleton;
            v49 = v47[2];
            v10 = __OFADD__(v49, 1);
            v50 = v49 + 1;
            if (v10)
              goto LABEL_117;
            v47[2] = v50;
            swift_bridgeObjectRetain(v32);
          }
          v157 = (uint64_t)v47;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v51 = sub_10001BD34();
        if (*v52)
          sub_100119698((uint64_t)&v147, v30, v31);
        ((void (*)(uint64_t *, _QWORD))v51)(v158, 0);
        swift_bridgeObjectRelease();
        ++v29;
        --v27;
      }
      while (v27);
    }
    swift_bridgeObjectRelease();
    v7 = v139;
    v8 = v141;
    v6 = v137;
    if (v137)
      goto LABEL_4;
LABEL_5:
    v10 = __OFADD__(v7, 1);
    v11 = v7 + 1;
    if (v10)
      goto LABEL_127;
    if (v11 >= v127)
      break;
    v12 = *(_QWORD *)(v125 + 8 * v11);
    if (!v12)
    {
      v13 = v11 + 1;
      if (v11 + 1 >= v127)
        break;
      v12 = *(_QWORD *)(v125 + 8 * v13);
      if (!v12)
      {
        v13 = v11 + 2;
        if (v11 + 2 >= v127)
          break;
        v12 = *(_QWORD *)(v125 + 8 * v13);
        if (!v12)
        {
          v13 = v11 + 3;
          if (v11 + 3 >= v127)
            break;
          v12 = *(_QWORD *)(v125 + 8 * v13);
          if (!v12)
          {
            while (1)
            {
              v11 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_128;
              if (v11 >= v127)
                goto LABEL_41;
              v12 = *(_QWORD *)(v125 + 8 * v11);
              ++v13;
              if (v12)
                goto LABEL_15;
            }
          }
        }
      }
      v11 = v13;
    }
LABEL_15:
    v137 = (v12 - 1) & v12;
    v139 = v11;
  }
LABEL_41:
  swift_release();
  swift_bridgeObjectRetain(v157);
  v54 = sub_100039F4C(v53);
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
  {
    swift_release();
    v56 = _swiftEmptyArrayStorage;
    goto LABEL_58;
  }
  v158[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100058758();
  v56 = (_QWORD *)v158[0];
  v57 = sub_100071A78(v54);
  if (v57 < 0)
    goto LABEL_121;
  v59 = v57;
  if (v57 >= 1 << *(_BYTE *)(v54 + 32))
    goto LABEL_121;
  v60 = v54 + 64;
  while (1)
  {
    if ((*(_QWORD *)(v60 + 8 * (v59 >> 6)) & (1 << v59)) == 0)
      goto LABEL_122;
    if (*(_DWORD *)(v54 + 36) != v58)
    {
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
    }
    v142 = v55;
    v145 = v58;
    v61 = v54;
    v62 = *(_QWORD *)(*(_QWORD *)(v54 + 48) + 8 * v59);
    v63 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v59);
    swift_bridgeObjectRetain_n(v62, 2);
    swift_bridgeObjectRetain(v63);
    sub_100057E2C();
    v65 = v64;
    swift_bridgeObjectRelease();
    v147 = v65;
    swift_retain();
    sub_100036DCC(&v147);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v66 = v147;
    v158[0] = (uint64_t)v56;
    v67 = v56[2];
    if (v67 >= v56[3] >> 1)
    {
      sub_100058758();
      v56 = (_QWORD *)v158[0];
    }
    v56[2] = v67 + 1;
    v56[v67 + 4] = v66;
    v68 = -1 << *(_BYTE *)(v61 + 32);
    if ((uint64_t)v59 >= -v68)
      goto LABEL_124;
    if ((*(_QWORD *)(v60 + 8 * (v59 >> 6)) & (1 << v59)) == 0)
      goto LABEL_125;
    v54 = v61;
    if (*(_DWORD *)(v61 + 36) != v145)
      goto LABEL_126;
    v69 = _HashTable.occupiedBucket(after:)(v59, v60, ~v68);
    v55 = v142 - 1;
    if (v142 == 1)
      break;
    v59 = v69;
    if ((v69 & 0x8000000000000000) == 0)
    {
      v58 = *(_DWORD *)(v61 + 36);
      if (v69 < 1 << *(_BYTE *)(v61 + 32))
        continue;
    }
    goto LABEL_121;
  }
  swift_release();
LABEL_58:
  v158[0] = (uint64_t)v56;
  swift_bridgeObjectRetain(v129);
  swift_retain();
  swift_bridgeObjectRetain(v56);
  sub_100036E34(v158, v124, v129);
  swift_bridgeObjectRelease();
  v115 = v158[0];
  v113 = *(_QWORD *)(v158[0] + 16);
  if (!v113)
    goto LABEL_115;
  v70 = 0;
  v114 = v158[0] + 32;
  v39 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v70 >= *(_QWORD *)(v115 + 16))
      goto LABEL_129;
    v116 = v70;
    v117 = (uint64_t)v39;
    v71 = *(_QWORD *)(v114 + 8 * v70);
    v72 = *(_QWORD *)(v71 + 16);
    sub_100033B3C();
    swift_bridgeObjectRetain(v71);
    v146 = Set.init(minimumCapacity:)(v72);
    v147 = v146;
    v73 = *(_QWORD *)(v71 + 16);
    if (v73)
    {
      v74 = (unint64_t *)(v71 + 40);
      do
      {
        sub_100119698((uint64_t)v158, *(v74 - 1), *v74);
        v74 += 2;
        --v73;
      }
      while (v73);
      swift_bridgeObjectRelease();
      v146 = v147;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v118 = *(_QWORD *)(v117 + 16);
    if (v118)
      break;
LABEL_104:
    if (*(_QWORD *)(v146 + 16))
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) != 0)
      {
        v39 = (_QWORD *)v117;
      }
      else
      {
        sub_100077960(0, *(_QWORD *)(v117 + 16) + 1, 1, v117);
        v39 = v109;
      }
      v107 = v39[2];
      v106 = v39[3];
      v108 = v116;
      if (v107 >= v106 >> 1)
      {
        sub_100077960(v106 > 1, v107 + 1, 1, (uint64_t)v39);
        v108 = v116;
        v39 = v110;
      }
      v39[2] = v107 + 1;
      v39[v107 + 4] = v146;
    }
    else
    {
      swift_bridgeObjectRelease();
      v108 = v116;
      v39 = (_QWORD *)v117;
    }
    v70 = v108 + 1;
    if (v70 == v113)
      goto LABEL_118;
  }
  swift_bridgeObjectRetain(v117);
  v75 = 0;
  while (2)
  {
    if (!*(_QWORD *)(v146 + 16))
      goto LABEL_102;
    v119 = v75;
    v76 = *(_QWORD *)(v117 + 32 + 8 * v75);
    v120 = v76 + 56;
    v77 = 1 << *(_BYTE *)(v76 + 32);
    if (v77 < 64)
      v78 = ~(-1 << v77);
    else
      v78 = -1;
    v136 = v78 & *(_QWORD *)(v76 + 56);
    v121 = (unint64_t)(v77 + 63) >> 6;
    v122 = v76;
    swift_bridgeObjectRetain_n(v76, 2);
    v79 = 0;
    while (2)
    {
      v126 = v146 + 56;
LABEL_74:
      if (v136)
      {
        v80 = __clz(__rbit64(v136));
        v136 &= v136 - 1;
        v143 = v79;
        v81 = v80 | (v79 << 6);
LABEL_91:
        v86 = (char *)(*(_QWORD *)(v122 + 48) + 16 * v81);
        v87 = *v86;
        v88 = v86[1];
        v89 = v86[2];
        v90 = v86[3];
        v91 = v86[4];
        v92 = v86[5];
        v134 = v86[6];
        v128 = v86[7];
        v138 = v86[8];
        v140 = v86[9];
        v93 = v86[10];
        v132 = v86[11];
        v94 = v86[12];
        v95 = v86[13];
        v130 = v86[14];
        v96 = v86[15];
        Hasher.init(_seed:)(v158, *(_QWORD *)(v146 + 40));
        LOBYTE(v147) = v87;
        BYTE1(v147) = v88;
        BYTE2(v147) = v89;
        BYTE3(v147) = v90;
        BYTE4(v147) = v91;
        BYTE5(v147) = v92;
        BYTE6(v147) = v134;
        HIBYTE(v147) = v128;
        v148 = v138;
        v149 = v140;
        v150 = v93;
        v151 = v132;
        v152 = v94;
        v153 = v95;
        v154 = v130;
        v155 = v96;
        Hasher.combine(bytes:)(&v147, v156);
        v97 = Hasher._finalize()();
        v79 = v143;
        v98 = -1 << *(_BYTE *)(v146 + 32);
        v99 = v97 & ~v98;
        if (((*(_QWORD *)(v126 + ((v99 >> 3) & 0xFFFFFFFFFFFFF8)) >> v99) & 1) != 0)
        {
          v100 = (uint64_t *)(*(_QWORD *)(v146 + 48) + 16 * v99);
          v102 = *v100;
          v101 = v100[1];
          swift_bridgeObjectRetain(v146);
          if (!static UniversalControlUUID.compare(lhs:rhs:)(v102, v101))
          {
LABEL_98:
            swift_bridgeObjectRelease();
            v105 = swift_isUniquelyReferenced_nonNull_native(v146);
            v158[0] = v146;
            v79 = v143;
            if ((v105 & 1) == 0)
              sub_10011F380();
            sub_10019B380(v99);
            v146 = v158[0];
            swift_bridgeObjectRelease();
            continue;
          }
          v103 = ~v98;
          v99 = (v99 + 1) & v103;
          for (j = (v99 >> 3) & 0xFFFFFFFFFFFFF8;
                ((*(_QWORD *)(v126 + j) >> v99) & 1) != 0;
                j = (v99 >> 3) & 0xFFFFFFFFFFFFF8)
          {
            if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v146 + 48) + 16 * v99), *(_QWORD *)(*(_QWORD *)(v146 + 48) + 16 * v99 + 8)))goto LABEL_98;
            v99 = (v99 + 1) & v103;
          }
          swift_bridgeObjectRelease();
          v79 = v143;
        }
        goto LABEL_74;
      }
      break;
    }
    v82 = v79 + 1;
    if (!__OFADD__(v79, 1))
    {
      if (v82 >= v121)
        goto LABEL_101;
      v83 = *(_QWORD *)(v120 + 8 * v82);
      v84 = v79 + 1;
      if (!v83)
      {
        v84 = v79 + 2;
        if (v79 + 2 >= v121)
          goto LABEL_101;
        v83 = *(_QWORD *)(v120 + 8 * v84);
        if (!v83)
        {
          v84 = v79 + 3;
          if (v79 + 3 >= v121)
            goto LABEL_101;
          v83 = *(_QWORD *)(v120 + 8 * v84);
          if (!v83)
          {
            v84 = v79 + 4;
            if (v79 + 4 >= v121)
              goto LABEL_101;
            v83 = *(_QWORD *)(v120 + 8 * v84);
            if (!v83)
            {
              v85 = v79 + 5;
              if (v79 + 5 >= v121)
              {
LABEL_101:
                swift_release();
                swift_bridgeObjectRelease();
                v75 = v119;
LABEL_102:
                if (++v75 == v118)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_104;
                }
                continue;
              }
              v83 = *(_QWORD *)(v120 + 8 * v85);
              v84 = v79 + 5;
              if (!v83)
              {
                while (1)
                {
                  v84 = v85 + 1;
                  if (__OFADD__(v85, 1))
                    break;
                  if (v84 >= v121)
                    goto LABEL_101;
                  v83 = *(_QWORD *)(v120 + 8 * v84);
                  ++v85;
                  if (v83)
                    goto LABEL_90;
                }
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
                goto LABEL_123;
              }
            }
          }
        }
      }
LABEL_90:
      v136 = (v83 - 1) & v83;
      v143 = v84;
      v81 = __clz(__rbit64(v83)) + (v84 << 6);
      goto LABEL_91;
    }
    break;
  }
  __break(1u);
LABEL_115:
  swift_release();
  v111 = _swiftEmptyArrayStorage;
LABEL_119:
  swift_bridgeObjectRelease();
  return v111;
}

void sub_1000356EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v36;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  _QWORD v42[5];

  v33 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v34 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v36 = 0;
  v5 = 0;
  while (1)
  {
    if (v4)
    {
      v38 = (v4 - 1) & v4;
      v39 = v5;
      goto LABEL_20;
    }
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v6 >= v34)
      goto LABEL_52;
    v7 = *(_QWORD *)(v33 + 8 * v6);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5 + 2;
      if (v5 + 2 >= v34)
        goto LABEL_52;
      v7 = *(_QWORD *)(v33 + 8 * v8);
      if (!v7)
      {
        v8 = v5 + 3;
        if (v5 + 3 >= v34)
          goto LABEL_52;
        v7 = *(_QWORD *)(v33 + 8 * v8);
        if (!v7)
          break;
      }
    }
LABEL_19:
    v38 = (v7 - 1) & v7;
    v39 = v8;
LABEL_20:
    sub_100043078(v42, a2);
    v10 = v42[0];
    v11 = v42[3];
    v12 = v42[4];
    v40 = v42[1];
    v41 = (unint64_t)(v42[2] + 64) >> 6;
    swift_bridgeObjectRetain(a2);
    if (v12)
    {
LABEL_21:
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_40;
    }
    while (1)
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v41)
        goto LABEL_46;
      v16 = *(_QWORD *)(v40 + 8 * v15);
      v17 = v11 + 1;
      if (!v16)
      {
        v17 = v11 + 2;
        if (v11 + 2 >= v41)
          goto LABEL_46;
        v16 = *(_QWORD *)(v40 + 8 * v17);
        if (!v16)
        {
          v17 = v11 + 3;
          if (v11 + 3 >= v41)
            goto LABEL_46;
          v16 = *(_QWORD *)(v40 + 8 * v17);
          if (!v16)
          {
            v17 = v11 + 4;
            if (v11 + 4 >= v41)
              goto LABEL_46;
            v16 = *(_QWORD *)(v40 + 8 * v17);
            if (!v16)
            {
              v17 = v11 + 5;
              if (v11 + 5 >= v41)
                goto LABEL_46;
              v16 = *(_QWORD *)(v40 + 8 * v17);
              if (!v16)
              {
                v17 = v11 + 6;
                if (v11 + 6 >= v41)
                  goto LABEL_46;
                v16 = *(_QWORD *)(v40 + 8 * v17);
                if (!v16)
                {
                  v18 = v11 + 7;
                  while (v18 < v41)
                  {
                    v16 = *(_QWORD *)(v40 + 8 * v18++);
                    if (v16)
                    {
                      v17 = v18 - 1;
                      goto LABEL_39;
                    }
                  }
LABEL_46:
                  swift_release();
                  goto LABEL_47;
                }
              }
            }
          }
        }
      }
LABEL_39:
      v12 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v17 << 6);
      v11 = v17;
LABEL_40:
      v19 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v14);
      v21 = *v19;
      v20 = v19[1];
      v22 = *(_QWORD *)(v10 + 56) + 56 * v14;
      v23 = *(_QWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      v25 = *(_QWORD *)(v22 + 32);
      v26 = *(_BYTE *)(v22 + 40);
      v27 = *(_QWORD *)(v22 + 48);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v27);
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v21, v20))
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
        goto LABEL_21;
    }
    swift_release();
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v23);
    v29 = *(_QWORD *)(sub_100166924(v28, a1) + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v30 = __OFADD__(v36, v29);
    v36 += v29;
    if (v30)
      goto LABEL_54;
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_47:
      v4 = v38;
      v5 = v39;
      continue;
    }
    sub_10018F420(v24, v25, a1);
    v32 = v31;
    swift_bridgeObjectRelease();
    v4 = v38;
    v5 = v39;
    if ((v32 & 1) != 0)
    {
      v30 = __OFADD__(v36++, 1);
      if (v30)
      {
        __break(1u);
        goto LABEL_52;
      }
    }
  }
  v9 = v5 + 4;
  if (v5 + 4 >= v34)
  {
LABEL_52:
    swift_release();
    return;
  }
  v7 = *(_QWORD *)(v33 + 8 * v9);
  if (v7)
  {
    v8 = v5 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v8 >= v34)
      goto LABEL_52;
    v7 = *(_QWORD *)(v33 + 8 * v8);
    ++v9;
    if (v7)
      goto LABEL_19;
  }
LABEL_56:
  __break(1u);
}

uint64_t sub_100035AC4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 2003134838 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(2003134838, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100035B98(char a1)
{
  if ((a1 & 1) != 0)
    return 2003134838;
  else
    return 0x656369766564;
}

uint64_t sub_100035BC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = sub_1000055B0(&qword_1002AB1A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000DBE4(a1, a1[3]);
  v5 = sub_10003ACCC();
  sub_10003B088((uint64_t)&type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys, v6, v5);
  sub_10003B150();
  sub_10003AF78();
  if (!v1)
  {
    sub_10003B19C();
    sub_10003AD08();
    sub_10003AF78();
  }
  return sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

void sub_100035CE0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_10003AFC4();
  v2 = v1;
  v4 = v3;
  sub_1000055B0(&qword_1002AB1C0);
  sub_10003B160();
  __chkstk_darwin(v5);
  sub_10000DBE4(v2, v2[3]);
  v6 = sub_10003ACCC();
  sub_10003B190((uint64_t)&type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys, (uint64_t)&type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys, v6);
  if (v0)
  {
    sub_10003B008();
  }
  else
  {
    sub_10003A380();
    sub_10003AFDC((uint64_t)&type metadata for UniversalControlDeviceID);
    sub_10003B19C();
    sub_10003AD44();
    sub_10003AFDC((uint64_t)&unk_100283170);
    sub_10003B0F4();
    sub_10003B008();
    *(_OWORD *)v4 = v7;
    *(_OWORD *)(v4 + 16) = v7;
    *(_OWORD *)(v4 + 32) = v8;
    *(_QWORD *)(v4 + 48) = v9;
    *(_BYTE *)(v4 + 56) = v10;
    *(_QWORD *)(v4 + 64) = v11;
  }
  sub_10003AF60();
}

uint64_t sub_100035E1C()
{
  char *v0;

  return sub_100035B98(*v0);
}

uint64_t sub_100035E24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100035AC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100035E48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.consumer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100035E6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003ACCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100035E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003ACCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100035EBC(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE __src[72];

  sub_100035CE0();
  if (!v1)
    memcpy(a1, __src, 0x48uLL);
}

uint64_t sub_100035F04(_QWORD *a1)
{
  return sub_100035BC4(a1);
}

uint64_t sub_100035F18(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v9;

  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x63726943636E7973 && a2 == 0xEB0000000073656CLL)
  {
    v8 = 0xEB0000000073656CLL;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63726943636E7973, 0xEB0000000073656CLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001002535A0)
  {
    swift_bridgeObjectRelease(0x80000001002535A0);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002535A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t static ReportID.appleVendorKeyboard.getter()
{
  return 3;
}

void _s8HIDUtils13HIDDeviceTypeO9hashValueSivg_0(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_10000E59C();
}

uint64_t sub_1000360C0(char a1)
{
  if (!a1)
    return 0x73656369766564;
  if (a1 == 1)
    return 0x63726943636E7973;
  return 0xD000000000000011;
}

void sub_100036124()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10003AFC4();
  v2 = v1;
  v3 = sub_1000055B0(&qword_1002AB110);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = v2[3];
  v6 = v2[4];
  sub_10000DBE4(v2, v5);
  v7 = sub_100036650();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SyncCircleController.DiagnosticState.CodingKeys, &type metadata for SyncCircleController.DiagnosticState.CodingKeys, v7, v5, v6);
  sub_10003B038();
  sub_10003B030((unint64_t *)&qword_1002AD060, v8, (void (*)(void))sub_10003668C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_10003AF78();
  if (!v0)
  {
    sub_10003B038();
    sub_10003B030(&qword_1002AB128, v9, (void (*)(void))sub_10003672C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10003AF78();
    sub_10003B038();
    sub_10003B030(&qword_1002AB140, v10, (void (*)(void))sub_100036750, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10003AF78();
  }
  sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_10003AF60();
}

uint64_t sub_1000362E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[9];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10003AFC4();
  v20 = v1;
  v21 = v2;
  v4 = v3;
  v5 = sub_1000055B0(&qword_1002AB1D0);
  sub_10003B160();
  __chkstk_darwin(v6);
  v7 = v4[3];
  v8 = v4[4];
  sub_10000DBE4(v4, v7);
  v9 = sub_100036650();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SyncCircleController.DiagnosticState.CodingKeys, &type metadata for SyncCircleController.DiagnosticState.CodingKeys, v9, v7, v8);
  if (v0)
  {
    sub_10003B008();
  }
  else
  {
    v10 = sub_10003B038();
    v18[0] = 0;
    sub_10003B030((unint64_t *)&unk_1002AD0F0, v11, (void (*)(void))sub_10003A380, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10003B1D0(v10, (uint64_t)v18, v5, v10);
    v7 = v19;
    v13 = sub_10003B038();
    v18[0] = 1;
    v15 = sub_10003B030(&qword_1002AB1D8, v14, (void (*)(void))sub_10003A3BC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_10003B1A8();
    sub_10003B1D0(v13, (uint64_t)v18, v5, v13);
    if (v15)
    {
      sub_10003AFF8();
      sub_10000E4A0();
      sub_10003B008();
    }
    else
    {
      v16 = sub_10003B038();
      v18[0] = 2;
      sub_10003B030(&qword_1002AB1E0, v17, (void (*)(void))sub_10003AD80, (uint64_t)&protocol conformance descriptor for <A> [A]);
      swift_bridgeObjectRetain();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v18, v5, v16);
      sub_10003AFF8();
      sub_10003AFBC();
      sub_100005988(v4);
      swift_bridgeObjectRelease();
      sub_10002D89C();
    }
    sub_10000E4A0();
  }
  return v7;
}

void sub_100036530(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_10000E59C();
}

uint64_t sub_100036568()
{
  char *v0;

  return sub_1000360C0(*v0);
}

uint64_t sub_100036570@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100035F18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100036594@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.appleVendorKeyboard.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000365B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100036650();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000365E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100036650();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100036608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_1000362E4();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
  }
  return result;
}

void sub_100036634()
{
  sub_100036124();
}

unint64_t sub_100036650()
{
  unint64_t result;

  result = qword_1002AB118;
  if (!qword_1002AB118)
  {
    result = swift_getWitnessTable(&unk_10021D8B0, &type metadata for SyncCircleController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB118);
  }
  return result;
}

unint64_t sub_10003668C()
{
  unint64_t result;

  result = qword_1002B4A40;
  if (!qword_1002B4A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDeviceID, &type metadata for UniversalControlDeviceID);
    atomic_store(result, (unint64_t *)&qword_1002B4A40);
  }
  return result;
}

uint64_t sub_1000366C8(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000DCA0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003672C()
{
  return sub_1000366C8(&qword_1002AB130, &qword_1002AA570, (void (*)(void))sub_10003668C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
}

unint64_t sub_100036750()
{
  unint64_t result;

  result = qword_1002AB148;
  if (!qword_1002AB148)
  {
    result = swift_getWitnessTable(&unk_10021D888, &unk_100283288);
    atomic_store(result, (unint64_t *)&qword_1002AB148);
  }
  return result;
}

uint64_t sub_10003678C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_10003B09C(*(_QWORD *)(v0 + 16));
  sub_100057E2C();
  v2 = v1;
  sub_10000E410();
  v8 = v2;
  sub_100036DCC(&v8);
  sub_10000E410();
  v3 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100032998(v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  v8 = v6;
  sub_10003AFBC();
  sub_100036F2C(&v8, (uint64_t (*)(uint64_t))sub_10006CCC8, (uint64_t (*)(Swift::Int))sub_100022214);
  sub_10000E420();
  return v3;
}

uint64_t sub_100036864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;
  char v14;
  __int128 v15;
  char v16;
  __int128 v17;
  char v18;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_10019D15C(*(_QWORD *)a1);
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = *(unsigned int *)(v2 + 36);
  v19[1] = v2;
  v19[2] = v4;
  v19[3] = v7;
  v20 = v8 & 1;
  v21 = v5;
  v22 = v6;
  v23 = 0;
  swift_bridgeObjectRetain_n(v2, 2);
  sub_1000E77A4(v3, (uint64_t)&v10);
  sub_100057FC8(&v10);
  v19[0] = v10;
  sub_10003A2D4(v19);
  v17 = v11;
  v18 = v12;
  sub_10003A2A4((uint64_t)&v17);
  v15 = v13;
  v16 = v14;
  sub_10003A2A4((uint64_t)&v15);
  sub_10003A2D4((_QWORD *)a1);
  return v2;
}

void sub_100036960()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_30:
    v33 = v0;
LABEL_34:
    sub_100036C74(v33);
    return;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0[3]);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_43:
    sub_10018778C(v1);
    v1 = isUniquelyReferenced_nonNull_native;
  }
  if (v2 > *(_QWORD *)(v1 + 16))
  {
    __break(1u);
    goto LABEL_45;
  }
  v4 = v2 - 1;
  v36 = v1 + 32;
  v5 = v1 + 32 + 24 * (v2 - 1);
  v6 = *v0;
  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_BYTE *)(v5 + 16);
  v37 = v2;
  v2 = sub_10019D074(*(_QWORD *)v5, v8, v9, *v0);
  v40 = v10;
  v12 = v11;
  isUniquelyReferenced_nonNull_native = sub_100025618(v7, v8, v9);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v40;
  *(_BYTE *)(v5 + 16) = v12 & 1;
  v34 = v0;
  v0[3] = v1;
  v13 = *(_QWORD *)(v1 + 16);
  if (v37 > v13)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  isUniquelyReferenced_nonNull_native = *(_QWORD *)v5;
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
  {
LABEL_49:
    swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
    __break(1u);
    return;
  }
  if (*(_DWORD *)(v6 + 36) != *(_DWORD *)(v5 + 8))
    goto LABEL_46;
  if (isUniquelyReferenced_nonNull_native == 1 << *(_BYTE *)(v6 + 32))
  {
    v39 = v37;
    v41 = v5;
    v42 = v1;
    v35 = v5;
    while ((*(_BYTE *)(v5 + 16) & 1) == 0)
    {
      if (*(_DWORD *)(v6 + 36) != *(_DWORD *)(v5 + 8))
        goto LABEL_40;
      if (*(_QWORD *)v5 != 1 << *(_BYTE *)(v6 + 32))
      {
        v34[3] = v1;
        return;
      }
      v14 = v4 - 1;
      if (v4 < 1)
      {
        v33 = v34;
        v34[3] = v1;
        goto LABEL_34;
      }
      if (v14 >= v13)
        goto LABEL_41;
      v38 = v4 - 1;
      v0 = (uint64_t *)(v36 + 24 * v14);
      v15 = *v0;
      v16 = v0[1];
      v17 = *((_BYTE *)v0 + 16);
      v18 = sub_10019D074(*v0, v16, v17, v6);
      v20 = v19;
      v22 = v21;
      isUniquelyReferenced_nonNull_native = sub_100025618(v15, v16, v17);
      *v0 = v18;
      v0[1] = v20;
      *((_BYTE *)v0 + 16) = v22 & 1;
      v2 = *(_QWORD *)(v1 + 16);
      if (v2 < v4)
        goto LABEL_42;
      v24 = v39;
      v23 = v41;
      v1 = *(_QWORD *)(v1 + 16);
      if (v4 != v2)
      {
        while (1)
        {
          v0 = (uint64_t *)(v24 - 1);
          if ((uint64_t)(v24 - 1) >= (uint64_t)v2)
            break;
          if ((uint64_t)v0 > v1)
            goto LABEL_36;
          v25 = sub_10019D074(*(_QWORD *)(v23 - 24), *(_QWORD *)(v23 - 16), *(unsigned __int8 *)(v23 - 8), v6);
          if ((uint64_t)v0 >= v1)
            goto LABEL_37;
          v28 = v25;
          v29 = v26;
          v30 = v27;
          isUniquelyReferenced_nonNull_native = sub_100025618(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
          *(_QWORD *)v23 = v28;
          *(_QWORD *)(v23 + 8) = v29;
          *(_BYTE *)(v23 + 16) = v30 & 1;
          v4 = *(_QWORD *)(v42 + 16);
          if ((uint64_t)v0 >= v4)
            goto LABEL_38;
          if ((v30 & 1) != 0)
            goto LABEL_47;
          if (*(_DWORD *)(v6 + 36) != (_DWORD)v29)
            goto LABEL_39;
          v31 = v2 == v24++;
          v23 += 24;
          v31 = v31 || v28 == 1 << *(_BYTE *)(v6 + 32);
          v1 = *(_QWORD *)(v42 + 16);
          if (v31)
            goto LABEL_27;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_27:
      v1 = v42;
      --v39;
      v41 -= 24;
      v13 = v4;
      v32 = v37 > v4;
      v4 = v38;
      v5 = v35;
      if (v32)
      {
        __break(1u);
        goto LABEL_30;
      }
    }
    goto LABEL_48;
  }
}

void sub_100036C74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v1 = a1[1];
  if (v1 < a1[2])
  {
    v4 = a1 + 3;
    v3 = a1[3];
    *(v4 - 2) = v1 + 1;
    if (swift_isUniquelyReferenced_nonNull_native(v3))
    {
      sub_1001872AC(0);
    }
    else
    {
      *v4 = (uint64_t)sub_100036D54(0, *(_QWORD *)(*v4 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    v5 = *a1;
    v6 = sub_10019D15C(*a1);
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = *(unsigned int *)(v5 + 36);
    v12[7] = v5;
    v12[8] = v6;
    v12[9] = v9;
    v13 = v10 & 1;
    v14 = v7;
    v15 = v8;
    v16 = 0;
    v11 = a1[1];
    swift_bridgeObjectRetain(v5);
    sub_1000E77A4(v11, (uint64_t)v12);
    sub_100191B58((uint64_t)v12);
  }
}

_QWORD *sub_100036D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000055B0((uint64_t *)&unk_1002AC110);
  v5 = (_QWORD *)swift_allocObject(v4, 24 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * ((uint64_t)(v6 - 32) / 24);
  return v5;
}

void sub_100036DCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CAF4();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100036FB0(v5);
  *a1 = v2;
}

uint64_t sub_100036E34(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v7 = *a1;
  swift_retain_n(a2, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
  {
    sub_10006CB70();
    v7 = v8;
  }
  v9 = *(_QWORD *)(v7 + 16);
  v11[0] = v7 + 32;
  v11[1] = v9;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_100037658(v11, a2, a3);
  *a1 = v7;
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release_n(a2, 2);
    swift_release();
    return swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 3);
    return swift_release_n(a2, 3);
  }
}

void sub_100036F2C(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(Swift::Int))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v8[0] = v6 + 32;
  v8[1] = v7;
  sub_1000380B0(v8, a3);
  *a1 = v6;
}

void sub_100036FB0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  int8x16_t v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  int8x16_t *v14;
  Swift::Int v15;
  Swift::Int v16;
  int8x16_t *v17;
  Swift::Int v18;
  _QWORD *v19;
  Swift::Int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::Int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint16x8_t *v70;
  uint64_t v71;
  uint16x8_t v72;
  Swift::Int v73;
  uint16x8_t *v74;
  uint16x8_t *v75;
  uint64_t v76;
  uint32x4_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  int8x16_t v80;
  unint64_t v81;
  uint32x4_t v82;
  uint64x2_t v83;
  int8x16_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  Swift::Int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100038814(0, v3, 1, a1);
      return;
    }
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v5 = v4;
  sub_100021210(v3 / 2);
  v97 = v6;
  v98 = v3;
  v99 = v7;
  v95 = a1;
  if (v3 > 0)
  {
    v96 = v5;
    v8 = 0;
    v9 = *a1;
    v100 = _swiftEmptyArrayStorage;
    v10.i32[1] = 0;
    while (1)
    {
      v11 = v8++;
      if (v8 < v3)
      {
        v12 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 16 * v8), *(_QWORD *)(v9 + 16 * v8 + 8), *(_QWORD *)(v9 + 16 * v11), *(_QWORD *)(v9 + 16 * v11 + 8));
        v8 = v11 + 2;
        if (v11 + 2 < v3)
        {
          v13 = v9 + 23 + 16 * v11;
          while (((v12 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v13 + 9), *(_QWORD *)(v13 + 17), *(_QWORD *)(v13 - 7), *(_QWORD *)(v13 + 1))) & 1) == 0)
          {
            v13 += 16;
            if (++v8 >= v3)
            {
              v8 = v3;
              break;
            }
          }
        }
        if ((v12 & 1) != 0)
        {
          if (v8 < v11)
            goto LABEL_129;
          if (v11 < v8)
          {
            v14 = (int8x16_t *)(v9 - 16 + 16 * v8);
            v15 = v8;
            v16 = v11;
            v17 = (int8x16_t *)(v9 + 16 * v11);
            do
            {
              if (v16 != --v15)
              {
                if (!v9)
                  goto LABEL_135;
                v10 = *v17;
                *v17 = *v14;
                *v14 = v10;
              }
              ++v16;
              --v14;
              ++v17;
            }
            while (v16 < v15);
          }
        }
      }
      if (v8 >= v3)
        goto LABEL_27;
      if (__OFSUB__(v8, v11))
        goto LABEL_126;
      if (v8 - v11 >= v96)
        goto LABEL_27;
      if (__OFADD__(v11, v96))
        goto LABEL_130;
      if (v11 + v96 >= v3)
        v18 = v3;
      else
        v18 = v11 + v96;
      if (v18 < v11)
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        return;
      }
      if (v8 == v18)
      {
LABEL_27:
        v19 = v100;
      }
      else
      {
        v70 = (uint16x8_t *)(v9 + 16 * v8);
        v19 = v100;
        do
        {
          v71 = v9 + 16 * v8;
          v10.i32[0] = *(_DWORD *)(v71 + 4);
          v72 = vmovl_u8(*(uint8x8_t *)v10.i8);
          v10.i32[0] = *(_DWORD *)(v71 + 12);
          v10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v10.i8);
          v73 = v11;
          v74 = v70;
          v75 = v70;
          do
          {
            v76 = v75[-1].i64[0];
            --v75;
            v77 = vmovl_u16((uint16x4_t)(v72.i64[0] & 0xFF00FF00FF00FFLL));
            v78.i64[0] = v77.u32[0];
            v78.i64[1] = v77.u32[1];
            v79 = v78;
            v78.i64[0] = v77.u32[2];
            v78.i64[1] = v77.u32[3];
            v80 = vorrq_s8((int8x16_t)vshlq_u64(v79, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v78, (uint64x2_t)xmmword_10021DA10));
            v81 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v80.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL)) | v74->u32[0];
            v82 = vmovl_u16((uint16x4_t)(v10.i64[0] & 0xFF00FF00FF00FFLL));
            v78.i64[0] = v82.u32[0];
            v78.i64[1] = v82.u32[1];
            v83 = v78;
            v78.i64[0] = v82.u32[2];
            v78.i64[1] = v82.u32[3];
            v84 = vorrq_s8((int8x16_t)vshlq_u64(v83, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v78, (uint64x2_t)xmmword_10021DA10));
            if ((static UniversalControlDeviceID.< infix(_:_:)(v81, *(unint64_t *)&vorr_s8(*(int8x8_t *)v84.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)) | v74->u32[2], v76, v74[-1].i64[1]) & 1) == 0)break;
            if (!v9)
              goto LABEL_133;
            v10 = *(int8x16_t *)v74;
            v72 = *v75;
            v74[-1] = *v74;
            *v74 = v72;
            *(int8x8_t *)v72.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
            v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
            *(int8x8_t *)v10.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
            ++v73;
            v74 = v75;
          }
          while (v8 != v73);
          ++v8;
          ++v70;
        }
        while (v8 != v18);
        v8 = v18;
      }
      if (v8 < v11)
        goto LABEL_125;
      v20 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_10006C984();
        v19 = v85;
      }
      v21 = v19[2];
      v22 = v21 + 1;
      if (v21 >= v19[3] >> 1)
      {
        sub_10006C984();
        v19 = v86;
      }
      v19[2] = v22;
      v23 = v19 + 4;
      v24 = &v19[2 * v21 + 4];
      *v24 = v20;
      v24[1] = v8;
      v100 = v19;
      if (v21)
      {
        while (1)
        {
          v25 = v22 - 1;
          if (v22 >= 4)
          {
            v30 = &v23[2 * v22];
            v31 = *(v30 - 8);
            v32 = *(v30 - 7);
            v36 = __OFSUB__(v32, v31);
            v33 = v32 - v31;
            if (v36)
              goto LABEL_110;
            v35 = *(v30 - 6);
            v34 = *(v30 - 5);
            v36 = __OFSUB__(v34, v35);
            v28 = v34 - v35;
            v29 = v36;
            if (v36)
              goto LABEL_111;
            v37 = v22 - 2;
            v38 = &v23[2 * v22 - 4];
            v40 = *v38;
            v39 = v38[1];
            v36 = __OFSUB__(v39, v40);
            v41 = v39 - v40;
            if (v36)
              goto LABEL_112;
            v36 = __OFADD__(v28, v41);
            v42 = v28 + v41;
            if (v36)
              goto LABEL_114;
            if (v42 >= v33)
            {
              v60 = &v23[2 * v25];
              v62 = *v60;
              v61 = v60[1];
              v36 = __OFSUB__(v61, v62);
              v63 = v61 - v62;
              if (v36)
                goto LABEL_120;
              v53 = v28 < v63;
              goto LABEL_65;
            }
          }
          else
          {
            if (v22 != 3)
            {
              v54 = v19[4];
              v55 = v19[5];
              v36 = __OFSUB__(v55, v54);
              v47 = v55 - v54;
              v48 = v36;
              goto LABEL_59;
            }
            v27 = v19[4];
            v26 = v19[5];
            v36 = __OFSUB__(v26, v27);
            v28 = v26 - v27;
            v29 = v36;
          }
          if ((v29 & 1) != 0)
            goto LABEL_113;
          v37 = v22 - 2;
          v43 = &v23[2 * v22 - 4];
          v45 = *v43;
          v44 = v43[1];
          v46 = __OFSUB__(v44, v45);
          v47 = v44 - v45;
          v48 = v46;
          if (v46)
            goto LABEL_115;
          v49 = &v23[2 * v25];
          v51 = *v49;
          v50 = v49[1];
          v36 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v36)
            goto LABEL_117;
          if (__OFADD__(v47, v52))
            goto LABEL_119;
          if (v47 + v52 >= v28)
          {
            v53 = v28 < v52;
LABEL_65:
            if (v53)
              v25 = v37;
            goto LABEL_67;
          }
LABEL_59:
          if ((v48 & 1) != 0)
            goto LABEL_116;
          v56 = &v23[2 * v25];
          v58 = *v56;
          v57 = v56[1];
          v36 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v36)
            goto LABEL_118;
          if (v59 < v47)
            goto LABEL_76;
LABEL_67:
          v64 = v25 - 1;
          if (v25 - 1 >= v22)
          {
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
          if (!v9)
            goto LABEL_134;
          v65 = &v23[2 * v64];
          v66 = *v65;
          v67 = &v23[2 * v25];
          v68 = v67[1];
          sub_100038B7C((char *)(v9 + 16 * *v65), (char *)(v9 + 16 * *v67), v9 + 16 * v68, v99);
          if (v1)
          {
            v87 = v100;
LABEL_89:
            swift_bridgeObjectRelease(v87);
            if (v98 >= -1)
            {
              *(_QWORD *)(v97 + 16) = 0;
              swift_bridgeObjectRelease(v97);
              return;
            }
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
            goto LABEL_131;
          }
          if (v68 < v66)
            goto LABEL_107;
          if (v25 > v100[2])
            goto LABEL_108;
          *v65 = v66;
          v23[2 * v64 + 1] = v68;
          v69 = v100[2];
          if (v25 >= v69)
            goto LABEL_109;
          v19 = v100;
          v22 = v69 - 1;
          memmove(&v23[2 * v25], v67 + 2, 16 * (v69 - 1 - v25));
          v100[2] = v69 - 1;
          if (v69 <= 2)
            goto LABEL_76;
        }
      }
      v22 = 1;
LABEL_76:
      v3 = v98;
      if (v8 >= v98)
        goto LABEL_93;
    }
  }
  v100 = _swiftEmptyArrayStorage;
  v22 = _swiftEmptyArrayStorage[2];
LABEL_93:
  if (v22 >= 2)
  {
    v88 = *v95;
    while (1)
    {
      v89 = v22 - 2;
      if (v22 < 2)
        break;
      if (!v88)
        goto LABEL_136;
      v87 = v100;
      v90 = v100[2 * v89 + 4];
      v91 = v100[2 * v22 + 3];
      sub_100038B7C((char *)(v88 + 16 * v90), (char *)(v88 + 16 * v100[2 * v22 + 2]), v88 + 16 * v91, v99);
      if (v1)
        goto LABEL_89;
      if (v91 < v90)
        goto LABEL_122;
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      {
        sub_10006CA50();
        v87 = v94;
      }
      if (v89 >= v87[2])
        goto LABEL_123;
      v92 = &v87[2 * v89 + 4];
      *v92 = v90;
      v92[1] = v91;
      v93 = v87[2];
      if (v22 > v93)
        goto LABEL_124;
      memmove(&v87[2 * v22 + 2], &v87[2 * v22 + 4], 16 * (v93 - v22));
      v100 = v87;
      v87[2] = v93 - 1;
      v22 = v93 - 1;
      v3 = v98;
      if (v93 <= 2)
        goto LABEL_104;
    }
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_104:
  swift_bridgeObjectRelease(v100);
  if (v3 < -1)
    goto LABEL_132;
  *(_QWORD *)(v97 + 16) = 0;
  swift_bridgeObjectRelease(v97);
}

uint64_t sub_100037658(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  Swift::Int v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  Swift::Int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t *v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t *v47;
  uint64_t v48;
  Swift::Int v49;
  _QWORD *v50;
  _QWORD *v51;
  Swift::Int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  BOOL v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  Swift::Int *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  char v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  int64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t result;
  uint64_t v126;
  uint64_t *v127;
  Swift::Int v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  Swift::Int v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  Swift::Int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v5 = a2;
  v7 = a1[1];
  swift_retain_n(a2, 3);
  swift_bridgeObjectRetain_n(a3, 3);
  v8 = _minimumMergeRunLength(_:)(v7);
  if (v8 >= v7)
  {
    if (v7 < 0)
      goto LABEL_156;
    if (v7)
    {
      sub_1000388C4(0, v7, 1, a1, v5, a3);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release_n(v5, 2);
    }
LABEL_132:
    swift_release_n(v5, 2);
    return swift_bridgeObjectRelease_n(a3, 3);
  }
  v9 = v8;
  v141 = v3;
  sub_10002229C(v7 / 2);
  v129 = v10;
  v131 = v7;
  v132 = v11;
  v140 = v5;
  v142 = a3;
  v127 = a1;
  if (v7 <= 0)
  {
    v14 = _swiftEmptyArrayStorage;
    v65 = _swiftEmptyArrayStorage[2];
LABEL_115:
    if (v65 >= 2)
    {
      v117 = *v127;
      v147 = *v127;
      do
      {
        a3 = v65 - 2;
        if (v65 < 2)
          goto LABEL_149;
        if (!v117)
          goto LABEL_166;
        v136 = v14;
        v118 = v14[2 * a3 + 4];
        v119 = v14[2 * v65 + 3];
        v120 = (char *)(v117 + 8 * v118);
        v121 = (char *)(v117 + 8 * v14[2 * v65 + 2]);
        v122 = (char *)(v117 + 8 * v119);
        v5 = v140;
        swift_retain(v140);
        swift_bridgeObjectRetain(v142);
        sub_100038D00(v120, v121, v122, v132, v140, v142);
        if (v141)
          goto LABEL_130;
        if (v119 < v118)
          goto LABEL_150;
        v14 = v136;
        if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0)
        {
          sub_10006CA50();
          v14 = v124;
        }
        if (a3 >= v14[2])
          goto LABEL_151;
        v123 = &v14[2 * a3 + 4];
        *v123 = v118;
        v123[1] = v119;
        v5 = v14[2];
        if (v65 > v5)
          goto LABEL_152;
        memmove(&v14[2 * v65 + 2], &v14[2 * v65 + 4], 16 * (v5 - v65));
        v14[2] = v5 - 1;
        v65 = v5 - 1;
        v117 = v147;
      }
      while (v5 > 2);
    }
    swift_bridgeObjectRelease();
    if (v131 >= -1)
    {
      *(_QWORD *)(v129 + 16) = 0;
      a3 = v142;
      swift_bridgeObjectRelease();
      v5 = v140;
      swift_release_n(v140, 2);
      swift_bridgeObjectRelease();
      goto LABEL_132;
    }
    goto LABEL_161;
  }
  v128 = v9;
  v12 = 0;
  v13 = *a1;
  v126 = *a1 - 8;
  v14 = _swiftEmptyArrayStorage;
  v15 = v7;
  v146 = v13;
  while (2)
  {
    v16 = v12 + 1;
    v137 = v12;
    if (v12 + 1 >= v15)
      goto LABEL_35;
    v133 = v14;
    v17 = v13;
    v18 = *(_QWORD **)(v13 + 8 * v16);
    v19 = *(_QWORD **)(v17 + 8 * v12);
    swift_bridgeObjectRetain_n(v18, 2);
    swift_bridgeObjectRetain(v19);
    sub_1000DF7F4();
    sub_1000356EC(v20, a3);
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v19);
    sub_1000DF7F4();
    sub_1000356EC(v23, a3);
    v25 = v24;
    swift_bridgeObjectRelease();
    if (v22 == v25)
    {
      v26 = v18[2];
      v27 = v19[2];
      if (v26 == v27)
      {
        v15 = v131;
        v14 = v133;
        if (!v26)
          goto LABEL_162;
        v143 = static UniversalControlDeviceID.< infix(_:_:)(v18[4], v18[5], v19[4], v19[5]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = v27 < v26;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = v25 < v22;
    }
    v143 = v28;
    v15 = v131;
    v14 = v133;
LABEL_12:
    v12 = v137;
    v16 = v137 + 2;
    v13 = v146;
    if (v137 + 2 >= v15)
      goto LABEL_26;
    v29 = v137;
    while (1)
    {
      v30 = v13 + 8 * v29;
      v31 = *(_QWORD **)(v30 + 8);
      v32 = *(_QWORD **)(v30 + 16);
      swift_bridgeObjectRetain_n(v32, 2);
      swift_bridgeObjectRetain(v31);
      sub_1000DF7F4();
      sub_1000356EC(v33, a3);
      v35 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v31);
      sub_1000DF7F4();
      sub_1000356EC(v36, a3);
      v38 = v37;
      swift_bridgeObjectRelease();
      if (v35 != v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = v38 < v35;
LABEL_20:
        v15 = v131;
        goto LABEL_21;
      }
      v39 = v32[2];
      v40 = v31[2];
      if (v39 != v40)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = v40 < v39;
        goto LABEL_20;
      }
      v15 = v131;
      if (!v39)
        goto LABEL_153;
      v41 = static UniversalControlDeviceID.< infix(_:_:)(v32[4], v32[5], v31[4], v31[5]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_21:
      v13 = v146;
      if (((v143 ^ v41) & 1) != 0)
        break;
      v42 = v29 + 3;
      ++v29;
      if (v42 >= v15)
      {
        v16 = v15;
        goto LABEL_25;
      }
    }
    v16 = v29 + 2;
LABEL_25:
    v14 = v133;
    v12 = v137;
LABEL_26:
    if ((v143 & 1) != 0)
    {
      if (v16 < v12)
        goto LABEL_158;
      if (v12 < v16)
      {
        v43 = v12;
        v44 = (uint64_t *)(v126 + 8 * v16);
        v45 = v16;
        v46 = v43;
        v47 = (uint64_t *)(v13 + 8 * v43);
        do
        {
          if (v46 != --v45)
          {
            if (!v13)
              goto LABEL_165;
            v48 = *v47;
            *v47 = *v44;
            *v44 = v48;
          }
          ++v46;
          --v44;
          ++v47;
        }
        while (v46 < v45);
        v12 = v137;
      }
    }
LABEL_35:
    if (v16 >= v15)
      goto LABEL_60;
    if (__OFSUB__(v16, v12))
      goto LABEL_155;
    if (v16 - v12 >= v128)
      goto LABEL_59;
    if (__OFADD__(v137, v128))
      goto LABEL_159;
    if (v137 + v128 >= v15)
      v49 = v15;
    else
      v49 = v137 + v128;
    if (v49 >= v137)
    {
      if (v16 == v49)
      {
        v12 = v137;
        goto LABEL_60;
      }
      v134 = v14;
      v50 = (_QWORD *)(v126 + 8 * v16);
      v130 = v49;
      while (2)
      {
        v144 = v16;
        v51 = *(_QWORD **)(v13 + 8 * v16);
        v52 = v137;
        v138 = v50;
        while (2)
        {
          v53 = (_QWORD *)*v50;
          swift_bridgeObjectRetain_n(v51, 2);
          swift_bridgeObjectRetain(v53);
          sub_1000DF7F4();
          sub_1000356EC(v54, a3);
          v56 = v55;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v53);
          sub_1000DF7F4();
          sub_1000356EC(v57, a3);
          v59 = v58;
          swift_bridgeObjectRelease();
          if (v56 == v59)
          {
            a3 = v51[2];
            v60 = v53[2];
            if (a3 == v60)
            {
              v13 = v146;
              if (a3)
              {
                v61 = static UniversalControlDeviceID.< infix(_:_:)(v51[4], v51[5], v53[4], v53[5]);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                a3 = v142;
                if ((v61 & 1) == 0)
                  break;
                goto LABEL_55;
              }
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
              goto LABEL_157;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v62 = v60 >= a3;
            a3 = v142;
            v13 = v146;
            if (v62)
              break;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v13 = v146;
            if (v59 >= v56)
              break;
          }
LABEL_55:
          if (!v13)
            goto LABEL_163;
          v63 = (_QWORD *)*v50;
          v51 = (_QWORD *)v50[1];
          *v50 = v51;
          v50[1] = v63;
          --v50;
          if (v144 != ++v52)
            continue;
          break;
        }
        v16 = v144 + 1;
        v50 = v138 + 1;
        if (v144 + 1 != v130)
          continue;
        break;
      }
      v16 = v130;
      v14 = v134;
LABEL_59:
      v12 = v137;
LABEL_60:
      if (v16 < v12)
        goto LABEL_154;
      v145 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10006C984();
        v14 = v115;
      }
      v64 = v14[2];
      v65 = v64 + 1;
      if (v64 >= v14[3] >> 1)
      {
        sub_10006C984();
        v14 = v116;
      }
      v14[2] = v65;
      v66 = v14 + 4;
      v67 = &v14[2 * v64 + 4];
      *v67 = v137;
      v67[1] = v145;
      if (!v64)
      {
        v65 = 1;
LABEL_109:
        v15 = v131;
        v12 = v145;
        if (v145 >= v131)
          goto LABEL_115;
        continue;
      }
      v135 = v14;
LABEL_67:
      v68 = v65 - 1;
      if (v65 >= 4)
      {
        v73 = &v66[2 * v65];
        v74 = *(v73 - 8);
        v75 = *(v73 - 7);
        v79 = __OFSUB__(v75, v74);
        v76 = v75 - v74;
        if (v79)
          goto LABEL_138;
        v78 = *(v73 - 6);
        v77 = *(v73 - 5);
        v79 = __OFSUB__(v77, v78);
        v71 = v77 - v78;
        v72 = v79;
        if (v79)
          goto LABEL_139;
        v80 = v65 - 2;
        v81 = &v66[2 * v65 - 4];
        v83 = *v81;
        v82 = v81[1];
        v79 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v79)
          goto LABEL_140;
        v79 = __OFADD__(v71, v84);
        v85 = v71 + v84;
        if (v79)
          goto LABEL_142;
        if (v85 >= v76)
        {
          v103 = &v66[2 * v68];
          v105 = *v103;
          v104 = v103[1];
          v79 = __OFSUB__(v104, v105);
          v106 = v104 - v105;
          if (v79)
            goto LABEL_148;
          v96 = v71 < v106;
        }
        else
        {
LABEL_80:
          if ((v72 & 1) != 0)
            goto LABEL_141;
          v80 = v65 - 2;
          v86 = &v66[2 * v65 - 4];
          v88 = *v86;
          v87 = v86[1];
          v89 = __OFSUB__(v87, v88);
          v90 = v87 - v88;
          v91 = v89;
          if (v89)
            goto LABEL_143;
          v92 = &v66[2 * v68];
          v94 = *v92;
          v93 = v92[1];
          v79 = __OFSUB__(v93, v94);
          v95 = v93 - v94;
          if (v79)
            goto LABEL_145;
          if (__OFADD__(v90, v95))
            goto LABEL_147;
          if (v90 + v95 < v71)
            goto LABEL_92;
          v96 = v71 < v95;
        }
        if (v96)
          v68 = v80;
      }
      else
      {
        if (v65 == 3)
        {
          v70 = v14[4];
          v69 = v14[5];
          v79 = __OFSUB__(v69, v70);
          v71 = v69 - v70;
          v72 = v79;
          goto LABEL_80;
        }
        v97 = v14[4];
        v98 = v14[5];
        v79 = __OFSUB__(v98, v97);
        v90 = v98 - v97;
        v91 = v79;
LABEL_92:
        if ((v91 & 1) != 0)
          goto LABEL_144;
        v99 = &v66[2 * v68];
        v101 = *v99;
        v100 = v99[1];
        v79 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v79)
          goto LABEL_146;
        if (v102 < v90)
          goto LABEL_109;
      }
      v107 = v68 - 1;
      if (v68 - 1 >= v65)
        goto LABEL_134;
      if (!v13)
        goto LABEL_164;
      v108 = &v66[2 * v107];
      a3 = *v108;
      v109 = v68;
      v110 = &v66[2 * v68];
      v111 = v110[1];
      v112 = (char *)(v13 + 8 * *v108);
      v139 = (char *)(v13 + 8 * *v110);
      v5 = v140;
      swift_retain(v140);
      swift_bridgeObjectRetain(v142);
      sub_100038D00(v112, v139, (char *)(v13 + 8 * v111), v132, v140, v142);
      if (v141)
      {
LABEL_130:
        swift_bridgeObjectRelease();
        v5 = v140;
        a3 = v142;
        if (v131 >= -1)
        {
          *(_QWORD *)(v129 + 16) = 0;
          swift_bridgeObjectRelease();
          swift_release_n(v140, 2);
          swift_bridgeObjectRelease();
          goto LABEL_132;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
        break;
      }
      if (v111 < (uint64_t)a3)
        goto LABEL_135;
      if (v109 > v135[2])
        goto LABEL_136;
      v113 = v109;
      *v108 = a3;
      v66[2 * v107 + 1] = v111;
      v114 = v135[2];
      if (v109 >= v114)
        goto LABEL_137;
      v14 = v135;
      v141 = 0;
      v65 = v114 - 1;
      memmove(v110, v110 + 2, 16 * (v114 - 1 - v113));
      v135[2] = v114 - 1;
      v5 = v140;
      a3 = v142;
      v13 = v146;
      if (v114 <= 2)
        goto LABEL_109;
      goto LABEL_67;
    }
    break;
  }
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  swift_bridgeObjectRelease_n(a3, 3);
  swift_release_n(v5, 3);
  __break(1u);
LABEL_164:
  swift_bridgeObjectRelease_n(v142, 3);
  swift_release_n(v140, 3);
  __break(1u);
LABEL_165:
  swift_bridgeObjectRelease_n(a3, 3);
  swift_release_n(v5, 3);
  __break(1u);
LABEL_166:
  swift_bridgeObjectRelease_n(v142, 3);
  result = swift_release_n(v140, 3);
  __break(1u);
  return result;
}

void sub_1000380B0(uint64_t *a1, uint64_t (*a2)(Swift::Int))
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  _QWORD *v10;
  int8x16_t v11;
  Swift::Int v12;
  int v13;
  Swift::Int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  int8x16_t *v26;
  uint64_t v27;
  uint16x8_t v28;
  Swift::Int v29;
  int8x16_t *v30;
  uint32x4_t v31;
  uint64x2_t v32;
  uint64x2_t v33;
  int8x16_t v34;
  unint64_t v35;
  uint32x4_t v36;
  uint64x2_t v37;
  int8x16_t v38;
  uint64_t v39;
  __int8 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  Swift::Int *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  Swift::Int v127;
  Swift::Int v128;
  __int128 v129;
  int8x16_t v130;
  __int128 v131;
  int8x16_t v132;
  uint64_t v133;
  int8x16_t v134;
  uint64_t v135;

  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
        sub_100038A74(0, v5, 1, a1);
      return;
    }
    goto LABEL_128;
  }
  v7 = v6;
  v124 = a2(v5 / 2);
  v125 = v5;
  v122 = a1;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    v43 = _swiftEmptyArrayStorage[2];
LABEL_90:
    if (v43 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease();
      if (v125 >= -1)
      {
        sub_10003B170(v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, (uint64_t)v122, v123, v124);
        return;
      }
      goto LABEL_133;
    }
    v94 = *v122;
    while (1)
    {
      v95 = v43 - 2;
      if (v43 < 2)
        break;
      if (!v94)
        goto LABEL_137;
      v96 = v10;
      v97 = v10[2 * v95 + 4];
      v98 = v10[2 * v43 + 3];
      sub_10003B184();
      if (v2)
        goto LABEL_102;
      if (v98 < v97)
        goto LABEL_123;
      if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
      {
        sub_10006CA50();
        v96 = v101;
      }
      if (v95 >= v96[2])
        goto LABEL_124;
      v99 = &v96[2 * v95 + 4];
      *v99 = v97;
      v99[1] = v98;
      v100 = v96[2];
      if (v43 > v100)
        goto LABEL_125;
      v10 = v96;
      memmove(&v96[2 * v43 + 2], &v96[2 * v43 + 4], 16 * (v100 - v43));
      v96[2] = v100 - 1;
      v43 = v100 - 1;
      if (v100 <= 2)
        goto LABEL_105;
    }
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    return;
  }
  v123 = v7;
  v8 = 0;
  v9 = *a1;
  v121 = *a1 + 79;
  v10 = _swiftEmptyArrayStorage;
  v120 = *a1 + 64;
  v11.i32[1] = 0;
  v135 = *a1;
  while (1)
  {
    v12 = v8++;
    v128 = v12;
    if (v8 < v5)
    {
      v13 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 72 * v8), *(_QWORD *)(v9 + 72 * v8 + 8), *(_QWORD *)(v9 + 72 * v12), *(_QWORD *)(v9 + 72 * v12 + 8));
      v14 = v12;
      v15 = v13;
      v8 = v14 + 2;
      if (v14 + 2 < v5)
      {
        v16 = v121 + 72 * v14;
        while (((v15 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v16 + 65), *(_QWORD *)(v16 + 73), *(_QWORD *)(v16 - 7), *(_QWORD *)(v16 + 1))) & 1) == 0)
        {
          v16 += 72;
          if (++v8 >= v5)
          {
            v8 = v5;
            break;
          }
        }
      }
      v9 = v135;
      if ((v15 & 1) != 0)
      {
        v12 = v128;
        if (v8 < v128)
          goto LABEL_130;
        if (v128 >= v8)
          goto LABEL_20;
        v17 = v10;
        v18 = v128;
        v19 = 72 * v8;
        v20 = 72 * v128;
        v21 = v8;
        do
        {
          if (v18 != --v21)
          {
            if (!v9)
              goto LABEL_136;
            v22 = v9 + v19;
            v23 = *(_QWORD *)(v9 + v20 + 32);
            v24 = *(_BYTE *)(v9 + v20 + 56);
            v133 = *(_QWORD *)(v9 + v20 + 64);
            v131 = *(_OWORD *)(v9 + v20 + 40);
            v129 = *(_OWORD *)(v9 + v20);
            v126 = *(_OWORD *)(v9 + v20 + 16);
            sub_10003B1B0((void *)(v9 + v20), (const void *)(v9 + v19 - 72));
            v9 = v135;
            *(_OWORD *)(v22 - 72) = v129;
            *(_OWORD *)(v22 - 56) = v126;
            *(_QWORD *)(v22 - 40) = v23;
            v11.i32[1] = DWORD1(v131);
            *(_OWORD *)(v22 - 32) = v131;
            *(_BYTE *)(v22 - 16) = v24;
            *(_QWORD *)(v22 - 8) = v133;
          }
          ++v18;
          v19 -= 72;
          v20 += 72;
        }
        while (v18 < v21);
        v5 = v125;
        v10 = v17;
      }
      v12 = v128;
    }
LABEL_20:
    if (v8 < v5)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_127;
      if (v8 - v12 < v123)
      {
        if (__OFADD__(v12, v123))
          goto LABEL_131;
        if (v12 + v123 >= v5)
          v25 = v5;
        else
          v25 = v12 + v123;
        if (v25 < v12)
          goto LABEL_132;
        if (v8 != v25)
        {
          v119 = (uint64_t)v10;
          v26 = (int8x16_t *)(v120 + 72 * v8);
          v127 = v25;
          do
          {
            v27 = v9 + 72 * v8;
            v11.i32[0] = *(_DWORD *)(v27 + 4);
            v28 = vmovl_u8(*(uint8x8_t *)v11.i8);
            v11.i32[0] = *(_DWORD *)(v27 + 12);
            v11 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v11.i8);
            v29 = v12;
            v30 = v26;
            do
            {
              v31 = vmovl_u16((uint16x4_t)(v28.i64[0] & 0xFF00FF00FF00FFLL));
              v32.i64[0] = v31.u32[0];
              v32.i64[1] = v31.u32[1];
              v33 = v32;
              v32.i64[0] = v31.u32[2];
              v32.i64[1] = v31.u32[3];
              v34 = vorrq_s8((int8x16_t)vshlq_u64(v33, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v32, (uint64x2_t)xmmword_10021DA10));
              v35 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v34.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)) | v30[-4].u32[0];
              v36 = vmovl_u16((uint16x4_t)(v11.i64[0] & 0xFF00FF00FF00FFLL));
              v32.i64[0] = v36.u32[0];
              v32.i64[1] = v36.u32[1];
              v37 = v32;
              v32.i64[0] = v36.u32[2];
              v32.i64[1] = v36.u32[3];
              v38 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v32, (uint64x2_t)xmmword_10021DA10));
              if ((static UniversalControlDeviceID.< infix(_:_:)(v35, *(unint64_t *)&vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)) | v30[-4].u32[2], v30[-9].i64[1], v30[-8].i64[0]) & 1) == 0)break;
              if (!v135)
                goto LABEL_134;
              v39 = v30[-2].i64[0];
              v40 = v30[-1].i8[8];
              v41 = v30->i64[0];
              v134 = *(int8x16_t *)((char *)v30 - 24);
              v130 = v30[-4];
              v132 = v30[-3];
              memcpy(&v30[-4], &v30[-9].u64[1], 0x48uLL);
              v30[-5].i64[1] = v41;
              v30 = (int8x16_t *)((char *)v30 - 72);
              v11 = v130;
              v30[-4] = v130;
              v30[-3] = v132;
              v30[-2].i64[0] = v39;
              *(int8x16_t *)((char *)v30 - 24) = v134;
              v30[-1].i8[8] = v40;
              *(int8x8_t *)v28.i8 = vzip2_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8);
              v11.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
              *(int8x8_t *)v11.i8 = vzip2_s8(*(int8x8_t *)v11.i8, *(int8x8_t *)v11.i8);
              ++v29;
            }
            while (v8 != v29);
            ++v8;
            v26 = (int8x16_t *)((char *)v26 + 72);
            v9 = v135;
            v12 = v128;
          }
          while (v8 != v127);
          v8 = v127;
          v10 = (_QWORD *)v119;
        }
      }
    }
    if (v8 < v12)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_10003B1C4();
      v10 = v92;
    }
    v42 = v10[2];
    v43 = v42 + 1;
    v9 = v135;
    if (v42 >= v10[3] >> 1)
    {
      sub_10003B1C4();
      v9 = v135;
      v10 = v93;
    }
    v10[2] = v43;
    v44 = v10 + 4;
    v45 = &v10[2 * v42 + 4];
    *v45 = v12;
    v45[1] = v8;
    if (v42)
      break;
    v43 = 1;
LABEL_84:
    v5 = v125;
    if (v8 >= v125)
      goto LABEL_90;
  }
  while (1)
  {
    v46 = v43 - 1;
    if (v43 >= 4)
    {
      v51 = &v44[2 * v43];
      v52 = *(v51 - 8);
      v53 = *(v51 - 7);
      v57 = __OFSUB__(v53, v52);
      v54 = v53 - v52;
      if (v57)
        goto LABEL_111;
      v56 = *(v51 - 6);
      v55 = *(v51 - 5);
      v57 = __OFSUB__(v55, v56);
      v49 = v55 - v56;
      v50 = v57;
      if (v57)
        goto LABEL_112;
      v58 = v43 - 2;
      v59 = &v44[2 * v43 - 4];
      v61 = *v59;
      v60 = v59[1];
      v57 = __OFSUB__(v60, v61);
      v62 = v60 - v61;
      if (v57)
        goto LABEL_113;
      v57 = __OFADD__(v49, v62);
      v63 = v49 + v62;
      if (v57)
        goto LABEL_115;
      if (v63 >= v54)
      {
        v81 = &v44[2 * v46];
        v83 = *v81;
        v82 = v81[1];
        v57 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v57)
          goto LABEL_121;
        v74 = v49 < v84;
        goto LABEL_73;
      }
    }
    else
    {
      if (v43 != 3)
      {
        v75 = v10[4];
        v76 = v10[5];
        v57 = __OFSUB__(v76, v75);
        v68 = v76 - v75;
        v69 = v57;
        goto LABEL_67;
      }
      v48 = v10[4];
      v47 = v10[5];
      v57 = __OFSUB__(v47, v48);
      v49 = v47 - v48;
      v50 = v57;
    }
    if ((v50 & 1) != 0)
      goto LABEL_114;
    v58 = v43 - 2;
    v64 = &v44[2 * v43 - 4];
    v66 = *v64;
    v65 = v64[1];
    v67 = __OFSUB__(v65, v66);
    v68 = v65 - v66;
    v69 = v67;
    if (v67)
      goto LABEL_116;
    v70 = &v44[2 * v46];
    v72 = *v70;
    v71 = v70[1];
    v57 = __OFSUB__(v71, v72);
    v73 = v71 - v72;
    if (v57)
      goto LABEL_118;
    if (__OFADD__(v68, v73))
      goto LABEL_120;
    if (v68 + v73 >= v49)
    {
      v74 = v49 < v73;
LABEL_73:
      if (v74)
        v46 = v58;
      goto LABEL_75;
    }
LABEL_67:
    if ((v69 & 1) != 0)
      goto LABEL_117;
    v77 = &v44[2 * v46];
    v79 = *v77;
    v78 = v77[1];
    v57 = __OFSUB__(v78, v79);
    v80 = v78 - v79;
    if (v57)
      goto LABEL_119;
    if (v80 < v68)
      goto LABEL_84;
LABEL_75:
    v85 = v10;
    v86 = v46 - 1;
    if (v46 - 1 >= v43)
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    if (!v9)
      goto LABEL_135;
    v87 = &v44[2 * v86];
    v88 = *v87;
    v89 = &v44[2 * v46];
    v90 = v89[1];
    sub_10003B184();
    if (v2)
      break;
    if (v90 < v88)
      goto LABEL_108;
    if (v46 > v85[2])
      goto LABEL_109;
    *v87 = v88;
    v44[2 * v86 + 1] = v90;
    v91 = v85[2];
    if (v46 >= v91)
      goto LABEL_110;
    v10 = v85;
    v43 = v91 - 1;
    memmove(&v44[2 * v46], v89 + 2, 16 * (v91 - 1 - v46));
    v85[2] = v91 - 1;
    v9 = v135;
    if (v91 <= 2)
      goto LABEL_84;
  }
LABEL_102:
  v102 = sub_10002D89C();
  if (v125 < -1)
    goto LABEL_129;
  sub_10003B170(v102, v103, v104, v105, v106, v107, v108, v109, v118, v119, v120, v121, (uint64_t)v122, v123, v124);
}

uint64_t sub_100038814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = v6;
      v10 = (_QWORD *)v8;
      v11 = (_OWORD *)v8;
      do
      {
        v12 = *((_QWORD *)v11-- - 2);
        result = static UniversalControlDeviceID.< infix(_:_:)(*v10, v10[1], v12, *(v10 - 1));
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v13 = *v11;
        *((_OWORD *)v10 - 1) = *(_OWORD *)v10;
        *(_OWORD *)v10 = v13;
        ++v9;
        v10 = v11;
      }
      while (v4 != v9);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

void sub_1000388C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  if (a3 != a2)
  {
    v25 = *a4;
    v6 = (_QWORD *)(*a4 + 8 * a3 - 8);
    while (2)
    {
      v7 = *(_QWORD **)(v25 + 8 * a3);
      v8 = a1;
      v23 = v6;
      v26 = a3;
      do
      {
        v9 = (_QWORD *)*v6;
        swift_bridgeObjectRetain_n(v7, 2);
        swift_bridgeObjectRetain(v9);
        sub_1000DF7F4();
        sub_1000356EC(v10, a6);
        v12 = v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v9);
        sub_1000DF7F4();
        sub_1000356EC(v13, a6);
        v15 = v14;
        swift_bridgeObjectRelease();
        if (v12 == v15)
        {
          v16 = v7[2];
          v17 = v9[2];
          if (v16 == v17)
          {
            if (!v16)
            {
              __break(1u);
LABEL_17:
              __break(1u);
              return;
            }
            v18 = static UniversalControlDeviceID.< infix(_:_:)(v7[4], v7[5], v9[4], v9[5]);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v19 = v26;
            if ((v18 & 1) == 0)
              break;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v19 = v26;
            if (v17 >= v16)
              break;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19 = v26;
          if (v15 >= v12)
            break;
        }
        if (!v25)
          goto LABEL_17;
        v20 = (_QWORD *)*v6;
        v7 = (_QWORD *)v6[1];
        *v6 = v7;
        v6[1] = v20;
        --v6;
        ++v8;
      }
      while (v19 != v8);
      a3 = v19 + 1;
      v6 = v23 + 1;
      if (a3 != a2)
        continue;
      break;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_100038A74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;

  v12 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 72 * a3 + 64);
    while (2)
    {
      v7 = v12;
      v16 = v6;
      do
      {
        result = static UniversalControlDeviceID.< infix(_:_:)(*(v6 - 8), *(v6 - 7), *(v6 - 17), *(v6 - 16));
        if ((result & 1) == 0)
          break;
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v8 = *(v6 - 4);
        v9 = *((_BYTE *)v6 - 8);
        v10 = *v6;
        v14 = *((_OWORD *)v6 - 4);
        v15 = *(_OWORD *)(v6 - 3);
        v13 = *((_OWORD *)v6 - 3);
        result = (uint64_t)memcpy(v6 - 8, v6 - 17, 0x48uLL);
        *(v6 - 9) = v10;
        v6 -= 9;
        *((_OWORD *)v6 - 4) = v14;
        *((_OWORD *)v6 - 3) = v13;
        *(v6 - 4) = v8;
        *(_OWORD *)(v6 - 3) = v15;
        ++v7;
        *((_BYTE *)v6 - 8) = v9;
      }
      while (v4 != v7);
      ++v4;
      v6 = v16 + 9;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100038B7C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_100078BF0(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_39;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v6 - 16;
      if ((static UniversalControlDeviceID.< infix(_:_:)(*((_QWORD *)v12 - 2), *((_QWORD *)v12 - 1), *((_QWORD *)v6 - 2), *((_QWORD *)v6 - 1)) & 1) != 0)
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 16;
        if (!v21)
          goto LABEL_35;
      }
      else
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = v12 - 16;
        v12 -= 16;
        if (!v22)
          goto LABEL_35;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_35:
      v18 -= 16;
      if (v12 <= v4 || v6 <= v7)
        goto LABEL_39;
    }
  }
  sub_100078BF0(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)v6, *((_QWORD *)v6 + 1), *(_QWORD *)v4, *((_QWORD *)v4 + 1)) & 1) == 0)
    {
      v14 = v4;
      v15 = v7 == v4;
      v4 += 16;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 16;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_OWORD *)v7 = *(_OWORD *)v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100078BF0(v4, (v12 - v4) / 16, v6);
  return 1;
}

void sub_100038D00(char *a1, char *a2, char *a3, char *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char *v27;
  char *v28;
  BOOL v29;
  char *v31;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  char *v47;
  char *v48;
  BOOL v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  char *v53;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;

  v60 = a3;
  v6 = a4;
  v8 = a1;
  v9 = a2 - a1;
  v10 = (a2 - a1) / 8;
  v11 = a3 - a2;
  v12 = (a3 - a2) / 8;
  if (v10 >= v12)
  {
    sub_100078D34(a2, (a3 - a2) / 8, a4);
    v13 = &v6[8 * v12];
    if (v8 >= a2 || v11 < 8)
    {
      v31 = a2;
      goto LABEL_52;
    }
    v31 = a2;
    v53 = v6;
    v59 = v8;
    while (1)
    {
      v55 = v31;
      v57 = (unint64_t)v13;
      v34 = (_QWORD *)*((_QWORD *)v13 - 1);
      v13 -= 8;
      v33 = v34;
      v37 = (_QWORD *)*((_QWORD *)v31 - 1);
      v35 = v31 - 8;
      v36 = v37;
      swift_bridgeObjectRetain_n(v33, 2);
      swift_bridgeObjectRetain(v37);
      sub_1000DF7F4();
      sub_1000356EC(v38, a6);
      v40 = v39;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v37);
      sub_1000DF7F4();
      sub_1000356EC(v41, a6);
      v43 = v42;
      swift_bridgeObjectRelease();
      if (v40 == v43)
      {
        v44 = v33[2];
        v45 = v36[2];
        if (v44 == v45)
        {
          v6 = v53;
          if (!v44)
            goto LABEL_54;
          v46 = static UniversalControlDeviceID.< infix(_:_:)(v33[4], v33[5], v36[4], v36[5]);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v47 = v60;
          v48 = v60 - 8;
          if ((v46 & 1) == 0)
          {
LABEL_42:
            v50 = (unint64_t)v59;
            v51 = v47 != (char *)v57 || (unint64_t)v48 >= v57;
            v35 = v13;
            if (!v51)
              goto LABEL_48;
            goto LABEL_47;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v47 = v60;
          v48 = v60 - 8;
          v6 = v53;
          if (v45 >= v44)
            goto LABEL_42;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v47 = v60;
        v48 = v60 - 8;
        v6 = v53;
        if (v43 >= v40)
          goto LABEL_42;
      }
      v13 = (char *)v57;
      v49 = v47 != v55 || v48 >= v55;
      v55 = v35;
      v50 = (unint64_t)v59;
      if (!v49)
        goto LABEL_48;
LABEL_47:
      *(_QWORD *)v48 = *(_QWORD *)v35;
LABEL_48:
      v31 = v55;
      v52 = (unint64_t)v55 > v50 && v13 > v6;
      v60 = v48;
      if (!v52)
        goto LABEL_52;
    }
  }
  sub_100078D34(a1, (a2 - a1) / 8, a4);
  v13 = &v6[8 * v10];
  if (a2 >= v60 || v9 < 8)
  {
LABEL_23:
    v31 = v8;
LABEL_52:
    sub_100078D34(v6, (v13 - v6) / 8, v31);
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v15 = a2;
  v56 = &v6[8 * v10];
  while (1)
  {
    v58 = v8;
    v16 = *(_QWORD **)v15;
    v17 = *(_QWORD **)v6;
    swift_bridgeObjectRetain_n(*(_QWORD *)v15, 2);
    swift_bridgeObjectRetain(v17);
    sub_1000DF7F4();
    sub_1000356EC(v18, a6);
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v17);
    sub_1000DF7F4();
    sub_1000356EC(v21, a6);
    v23 = v22;
    swift_bridgeObjectRelease();
    if (v20 != v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23 >= v20)
        goto LABEL_15;
      goto LABEL_13;
    }
    v24 = v16[2];
    v25 = v17[2];
    if (v24 == v25)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25 >= v24)
    {
LABEL_15:
      v27 = v6;
      v28 = v58;
      v29 = v58 == v6;
      v6 += 8;
      goto LABEL_16;
    }
LABEL_13:
    v27 = v15;
    v28 = v58;
    v29 = v58 == v15;
    v15 += 8;
LABEL_16:
    if (!v29)
      *(_QWORD *)v28 = *(_QWORD *)v27;
    v8 = v28 + 8;
    v13 = v56;
    if (v6 >= v56 || v15 >= v60)
      goto LABEL_23;
  }
  if (v24)
  {
    v26 = static UniversalControlDeviceID.< infix(_:_:)(v16[4], v16[5], v17[4], v17[5]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
      goto LABEL_15;
    goto LABEL_13;
  }
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t sub_100039098()
{
  char *v0;
  char *v1;
  unint64_t v2;
  char *v3;
  void (*v4)(char *, int64_t, char *);
  void (*v5)(char *, int64_t, char *);
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;

  sub_10003AFC4();
  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = v0;
  v10 = v1 - v0;
  v11 = (v1 - v0) / 72;
  v12 = v2 - (_QWORD)v1;
  v13 = (uint64_t)(v2 - (_QWORD)v1) / 72;
  if (v11 >= v13)
  {
    v4(v1, (uint64_t)(v2 - (_QWORD)v1) / 72, v3);
    v14 = &v6[72 * v13];
    if (v9 >= v8 || v12 < 72)
      goto LABEL_35;
    v18 = (char *)(v7 - 72);
    while (1)
    {
      v19 = v18 + 72;
      v20 = v8 - 72;
      if ((static UniversalControlDeviceID.< infix(_:_:)(*((_QWORD *)v14 - 9), *((_QWORD *)v14 - 8), *((_QWORD *)v8 - 9), *((_QWORD *)v8 - 8)) & 1) != 0)
      {
        v21 = v19 != v8 || v18 >= v8;
        v8 -= 72;
        if (!v21)
          goto LABEL_31;
      }
      else
      {
        v22 = v19 != v14 || v18 >= v14;
        v20 = v14 - 72;
        v14 -= 72;
        if (!v22)
          goto LABEL_31;
      }
      sub_10003B1B0(v18, v20);
LABEL_31:
      v18 -= 72;
      if (v14 <= v6 || v8 <= v9)
        goto LABEL_35;
    }
  }
  v4(v0, (v1 - v0) / 72, v3);
  v14 = &v6[72 * v11];
  if ((unint64_t)v8 < v7 && v10 >= 72)
  {
    while ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)v8, *((_QWORD *)v8 + 1), *(_QWORD *)v6, *((_QWORD *)v6 + 1)) & 1) == 0)
    {
      v15 = v6;
      v16 = v9 == v6;
      v6 += 72;
      if (!v16)
        goto LABEL_9;
LABEL_10:
      v9 += 72;
      if (v6 >= v14 || (unint64_t)v8 >= v7)
        goto LABEL_15;
    }
    v15 = v8;
    v16 = v9 == v8;
    v8 += 72;
    if (v16)
      goto LABEL_10;
LABEL_9:
    sub_10003B1B0(v9, v15);
    goto LABEL_10;
  }
LABEL_15:
  v8 = v9;
LABEL_35:
  v5(v6, (v14 - v6) / 72, v8);
  return 1;
}

uint64_t sub_100039230(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t isStackAllocationSafe;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v21;

  v9 = *(_BYTE *)(a1 + 32);
  v10 = v9 & 0x3F;
  v11 = (unint64_t)((1 << v9) + 63) >> 6;
  v12 = 8 * v11;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v10 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v12, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v14 = (unint64_t *)((char *)&v21 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v11, v14);
    swift_bridgeObjectRetain(a2);
    sub_100039D58(v14, v11, a1, a2, a3, a4);
    v16 = v15;
    v17 = swift_release();
    if (v4)
      swift_willThrow(v17);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v18 = (unint64_t *)swift_slowAlloc(v12, -1);
    sub_1001194A8(0, v11, v18);
    swift_bridgeObjectRetain(a2);
    sub_100039D58(v18, v11, a1, a2, a3, a4);
    v16 = v19;
    swift_release();
    swift_slowDealloc(v18, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t *sub_10003941C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v13;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (unint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v6, v8);
    v9 = sub_100039BB4(v8, v6, v2);
    v10 = swift_release();
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (unint64_t *)swift_slowAlloc(v7, -1);
    sub_1001194A8(0, v6, v11);
    v9 = sub_100039BB4(v11, v6, v2);
    swift_release();
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void *sub_1000395A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t isStackAllocationSafe;
  unint64_t *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v15;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v10 = (unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v7, v10);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100039770(v10, v7, a1, a2);
    v12 = swift_release();
    if (v2)
      swift_willThrow(v12);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v13 = (unint64_t *)swift_slowAlloc(v8, -1);
    sub_1001194A8(0, v7, v13);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100039770(v13, v7, a1, a2);
    swift_release();
    swift_slowDealloc(v13, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *sub_100039770(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v31;
  uint64_t v33;
  int64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v48[16];
  _QWORD v49[9];

  v4 = 0;
  v39 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v5 = a3 + 56;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 24);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v46 = v9 & v6;
  v33 = v5;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v38 = a4 + 56;
  do
  {
    v31 = v4;
    while (1)
    {
LABEL_6:
      if (v46)
      {
        v45 = __clz(__rbit64(v46)) | (v39 << 6);
        v46 &= v46 - 1;
        v10 = a4;
        goto LABEL_19;
      }
      v11 = v39 + 1;
      if (__OFADD__(v39, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      v10 = a4;
      if (v11 >= v34)
        goto LABEL_33;
      v12 = *(_QWORD *)(v33 + 8 * v11);
      if (!v12)
      {
        v13 = v39 + 2;
        if (v39 + 2 >= v34)
          goto LABEL_33;
        v12 = *(_QWORD *)(v33 + 8 * v13);
        if (!v12)
        {
          v13 = v39 + 3;
          if (v39 + 3 >= v34)
            goto LABEL_33;
          v12 = *(_QWORD *)(v33 + 8 * v13);
          if (!v12)
          {
            v13 = v39 + 4;
            if (v39 + 4 >= v34)
              goto LABEL_33;
            v12 = *(_QWORD *)(v33 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                v11 = v13 + 1;
                if (__OFADD__(v13, 1))
                  break;
                if (v11 >= v34)
                  goto LABEL_33;
                v12 = *(_QWORD *)(v33 + 8 * v11);
                ++v13;
                if (v12)
                  goto LABEL_18;
              }
LABEL_35:
              __break(1u);
            }
          }
        }
        v11 = v13;
      }
LABEL_18:
      v46 = (v12 - 1) & v12;
      v39 = v11;
      v45 = __clz(__rbit64(v12)) + (v11 << 6);
LABEL_19:
      if (*(_QWORD *)(v10 + 16))
      {
        v14 = (char *)(*(_QWORD *)(a3 + 48) + 16 * v45);
        v44 = *v14;
        v15 = v14[1];
        v16 = v14[2];
        v37 = v14[3];
        v40 = v14[4];
        v41 = v14[5];
        v42 = v14[6];
        v43 = v14[7];
        v17 = v14[8];
        v36 = v14[9];
        v18 = v14[10];
        v19 = v14[11];
        v35 = v14[12];
        v20 = v14[13];
        v21 = v14[14];
        v22 = v14[15];
        Hasher.init(_seed:)(v49, *(_QWORD *)(a4 + 40));
        v48[0] = v44;
        v48[1] = v15;
        v48[2] = v16;
        v48[3] = v37;
        v48[4] = v40;
        v48[5] = v41;
        v48[6] = v42;
        v48[7] = v43;
        v48[8] = v17;
        v48[9] = v36;
        v48[10] = v18;
        v48[11] = v19;
        v48[12] = v35;
        v48[13] = v20;
        v48[14] = v21;
        v48[15] = v22;
        Hasher.combine(bytes:)(v48, v49);
        v23 = Hasher._finalize()();
        v24 = -1 << *(_BYTE *)(a4 + 32);
        v25 = v23 & ~v24;
        if (((*(_QWORD *)(v38 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
        {
          if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v25), *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v25 + 8)))goto LABEL_30;
          v26 = (v25 + 1) & ~v24;
          if (((*(_QWORD *)(v38 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
            break;
        }
      }
    }
    while (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v26), *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v26 + 8)))
    {
      v26 = (v26 + 1) & ~v24;
      if (((*(_QWORD *)(v38 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        goto LABEL_6;
    }
LABEL_30:
    *(unint64_t *)((char *)a1 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
    v4 = v31 + 1;
  }
  while (!__OFADD__(v31, 1));
  __break(1u);
LABEL_33:
  swift_retain();
  v27 = sub_100199EDC(a1, a2, v31, a3);
  swift_bridgeObjectRelease();
  return v27;
}

unint64_t *sub_100039BB4(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t *v18;

  v18 = result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_24;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_24;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    result = (unint64_t *)static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12 + 8));
    if (result)
    {
      *(unint64_t *)((char *)v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return (unint64_t *)sub_100199EDC(v18, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_100039D58(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v27;

  v8 = 0;
  v9 = 0;
  v10 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
LABEL_4:
  v27 = v8;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v14)
      goto LABEL_29;
    v18 = *(_QWORD *)(v10 + 8 * v9);
    if (!v18)
      break;
LABEL_17:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_18:
    if (*(_QWORD *)(a4 + 16))
    {
      v20 = sub_1001A8C70(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v16), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v16 + 8));
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 56 * v20 + 48);
        swift_bridgeObjectRetain(v22);
        sub_10018F420(a5, a6, v22);
        v24 = v23;
        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
        {
          *(unint64_t *)((char *)a1 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          v8 = v27 + 1;
          if (!__OFADD__(v27, 1))
            goto LABEL_4;
          __break(1u);
LABEL_29:
          swift_retain();
          sub_100199EDC(a1, a2, v27, a3);
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
  }
  v19 = v9 + 1;
  if (v9 + 1 >= v14)
    goto LABEL_29;
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v9 + 2;
  if (v9 + 2 >= v14)
    goto LABEL_29;
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v9 + 3;
  if (v9 + 3 >= v14)
    goto LABEL_29;
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v9 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_29;
    v18 = *(_QWORD *)(v10 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100039F4C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v6, v8);
    sub_10003A0E8((uint64_t)v8, v6, v2);
    if (v1)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (_QWORD *)swift_slowAlloc(v7, -1);
    sub_1001194A8(0, v6, v10);
    sub_10003A0E8((uint64_t)v10, v6, v2);
    v2 = v11;
    swift_slowDealloc(v10, -1, -1);
  }
  return v2;
}

uint64_t sub_10003A0A8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000DCA0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10003A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v22;

  v22 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_20;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v9)
      goto LABEL_24;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_24;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_24;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_19:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_20:
    v15 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    v18 = sub_100144D04(v17, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      *(_QWORD *)(a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        sub_100082DF0(a1, a2, v22);
        return;
      }
    }
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10003A2A4(uint64_t a1)
{
  sub_100025618(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_10003A2D4(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10003A2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B2920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003A344()
{
  unint64_t result;

  result = qword_1002AB160;
  if (!qword_1002AB160)
  {
    result = swift_getWitnessTable(&unk_10021D838, &type metadata for SyncedDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB160);
  }
  return result;
}

unint64_t sub_10003A380()
{
  unint64_t result;

  result = qword_1002B4AA0;
  if (!qword_1002B4AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDeviceID, &type metadata for UniversalControlDeviceID);
    atomic_store(result, (unint64_t *)&qword_1002B4AA0);
  }
  return result;
}

uint64_t sub_10003A3BC()
{
  return sub_1000366C8(&qword_1002AB168, &qword_1002AA570, (void (*)(void))sub_10003A380, (uint64_t)&protocol conformance descriptor for <> Set<A>);
}

uint64_t getEnumTagSinglePayload for SyncedDeviceView.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncedDeviceView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003A4B4 + 4 * byte_10021D4A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003A4E8 + 4 * byte_10021D4A4[v4]))();
}

uint64_t sub_10003A4E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A4F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A4F8);
  return result;
}

uint64_t sub_10003A504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A50CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003A510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncedDeviceView.CodingKeys()
{
  return &type metadata for SyncedDeviceView.CodingKeys;
}

uint64_t sub_10003A534(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

uint64_t sub_10003A55C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_10003A5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

void *sub_10003A71C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t sub_10003A724(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10003A780(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10003A7C0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SyncCircleController.DiagnosticDeviceView()
{
  sub_10003B1DC();
}

uint64_t getEnumTagSinglePayload for SyncCircleController.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncCircleController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003A8F0 + 4 * byte_10021D4B3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003A924 + 4 * byte_10021D4AE[v4]))();
}

uint64_t sub_10003A924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A92C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A934);
  return result;
}

uint64_t sub_10003A940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A948);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003A94C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncCircleController.DiagnosticState.CodingKeys()
{
  return &type metadata for SyncCircleController.DiagnosticState.CodingKeys;
}

uint64_t sub_10003A974(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

_QWORD *sub_10003A9A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10003AFBC();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10003A9EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ServiceFilterReport(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *sub_10003AA74(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncCompletions(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncCompletions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SyncCircleController.DiagnosticState()
{
  sub_10003B1DC();
}

unint64_t sub_10003AB50()
{
  unint64_t result;

  result = qword_1002AB178;
  if (!qword_1002AB178)
  {
    result = swift_getWitnessTable(&unk_10021D730, &type metadata for SyncCircleController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB178);
  }
  return result;
}

unint64_t sub_10003AB90()
{
  unint64_t result;

  result = qword_1002AB180;
  if (!qword_1002AB180)
  {
    result = swift_getWitnessTable(&unk_10021D810, &type metadata for SyncedDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB180);
  }
  return result;
}

unint64_t sub_10003ABD0()
{
  unint64_t result;

  result = qword_1002AB188;
  if (!qword_1002AB188)
  {
    result = swift_getWitnessTable(&unk_10021D780, &type metadata for SyncedDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB188);
  }
  return result;
}

unint64_t sub_10003AC10()
{
  unint64_t result;

  result = qword_1002AB190;
  if (!qword_1002AB190)
  {
    result = swift_getWitnessTable(&unk_10021D7A8, &type metadata for SyncedDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB190);
  }
  return result;
}

unint64_t sub_10003AC50()
{
  unint64_t result;

  result = qword_1002AB198;
  if (!qword_1002AB198)
  {
    result = swift_getWitnessTable(&unk_10021D6A0, &type metadata for SyncCircleController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB198);
  }
  return result;
}

unint64_t sub_10003AC90()
{
  unint64_t result;

  result = qword_1002AB1A0;
  if (!qword_1002AB1A0)
  {
    result = swift_getWitnessTable(&unk_10021D6C8, &type metadata for SyncCircleController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB1A0);
  }
  return result;
}

unint64_t sub_10003ACCC()
{
  unint64_t result;

  result = qword_1002AB1B0;
  if (!qword_1002AB1B0)
  {
    result = swift_getWitnessTable(&unk_10021D9B8, &type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB1B0);
  }
  return result;
}

unint64_t sub_10003AD08()
{
  unint64_t result;

  result = qword_1002AB1B8;
  if (!qword_1002AB1B8)
  {
    result = swift_getWitnessTable(&unk_10021D5AC, &unk_100283170);
    atomic_store(result, (unint64_t *)&qword_1002AB1B8);
  }
  return result;
}

unint64_t sub_10003AD44()
{
  unint64_t result;

  result = qword_1002AB1C8;
  if (!qword_1002AB1C8)
  {
    result = swift_getWitnessTable(&unk_10021D5D4, &unk_100283170);
    atomic_store(result, (unint64_t *)&qword_1002AB1C8);
  }
  return result;
}

unint64_t sub_10003AD80()
{
  unint64_t result;

  result = qword_1002AB1E8;
  if (!qword_1002AB1E8)
  {
    result = swift_getWitnessTable(&unk_10021D758, &unk_100283288);
    atomic_store(result, (unint64_t *)&qword_1002AB1E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SyncCircleController.DiagnosticDeviceView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003AE08 + 4 * byte_10021D4BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003AE3C + 4 * byte_10021D4B8[v4]))();
}

uint64_t sub_10003AE3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AE44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003AE4CLL);
  return result;
}

uint64_t sub_10003AE58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003AE60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003AE64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AE6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncCircleController.DiagnosticDeviceView.CodingKeys()
{
  return &type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys;
}

unint64_t sub_10003AE8C()
{
  unint64_t result;

  result = qword_1002AB1F0;
  if (!qword_1002AB1F0)
  {
    result = swift_getWitnessTable(&unk_10021D990, &type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB1F0);
  }
  return result;
}

unint64_t sub_10003AECC()
{
  unint64_t result;

  result = qword_1002AB1F8;
  if (!qword_1002AB1F8)
  {
    result = swift_getWitnessTable(&unk_10021D900, &type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB1F8);
  }
  return result;
}

unint64_t sub_10003AF0C()
{
  unint64_t result;

  result = qword_1002AB200[0];
  if (!qword_1002AB200[0])
  {
    result = swift_getWitnessTable(&unk_10021D928, &type metadata for SyncCircleController.DiagnosticDeviceView.CodingKeys);
    atomic_store(result, qword_1002AB200);
  }
  return result;
}

uint64_t sub_10003AF78()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10003AF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10003AF94()
{
  uint64_t v0;

  return BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, *(_QWORD *)(v0 - 296), *(_QWORD *)(v0 - 304));
}

uint64_t sub_10003AFBC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003AFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_10003AFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10003B008()
{
  _QWORD *v0;

  return sub_100005988(v0);
}

uint64_t sub_10003B030(unint64_t *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t *v4;

  return sub_1000366C8(a1, v4, a3, a4);
}

uint64_t sub_10003B038()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

uint64_t sub_10003B040@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10003B04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10003B058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 232, v5 + 8, v4, a4);
}

uint64_t sub_10003B088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10003B09C(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_10003B0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_10003B0B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003B0CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 248) = a1;
  return v1 - 248;
}

uint64_t sub_10003B0E4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10003B0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10003B110()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 248));
}

void sub_10003B138()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_10003B148()
{
  sub_100058678();
}

unint64_t sub_10003B150()
{
  _OWORD *v0;
  uint64_t v1;

  *(_OWORD *)(v1 - 128) = *v0;
  *(_BYTE *)(v1 - 65) = 0;
  return sub_10003668C();
}

uint64_t sub_10003B170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(_QWORD *)(a15 + 16) = 0;
  return swift_bridgeObjectRelease(a15);
}

void sub_10003B17C()
{
  sub_100058678();
}

uint64_t sub_10003B184()
{
  return sub_100039098();
}

uint64_t sub_10003B190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_10003B19C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
}

uint64_t sub_10003B1A8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void *sub_10003B1B0(void *a1, const void *a2)
{
  return memmove(a1, a2, 0x48uLL);
}

void sub_10003B1B8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 93;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_10003B1C4()
{
  sub_10006C984();
}

uint64_t sub_10003B1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

void sub_10003B1E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = v0;
}

uint64_t sub_10003B1FC()
{
  return 8236;
}

uint64_t VectorClock.nodes.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t VectorClock.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

Swift::Int VectorClock.ComparisonResult.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_10003B278(char *a1, char *a2)
{
  return static ReportID.== infix(_:_:)(*a1, *a2);
}

Swift::Int sub_10003B2A0()
{
  unsigned __int8 *v0;

  return VectorClock.ComparisonResult.hashValue.getter(*v0);
}

void sub_10003B2A8(uint64_t a1)
{
  unsigned __int8 *v1;

  Material.hash(into:)(a1, *v1);
}

Swift::Int sub_10003B2C8(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Material.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_10003B304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD v15[7];

  *a9 = a1;
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  v15[4] = a7;
  v15[5] = a8;
  v15[6] = a10;
  v11 = type metadata accessor for VectorClock(0, (uint64_t)v15);
  v12 = sub_10003D67C(v11);
  return sub_10003D65C(v12, a2, v13);
}

uint64_t VectorClock.init(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  _QWORD v32[7];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, &type metadata for UInt64, 0, 0);
  v16 = type metadata accessor for _ContiguousArrayStorage(0, TupleTypeMetadata2);
  v17 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 80) | 7);
  v18 = static Array._adoptStorage(_:count:)(v17, 1);
  v20 = v19;
  v21 = *(int *)(TupleTypeMetadata2 + 48);
  v22 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v19, a1, a3);
  *(_QWORD *)(v20 + v21) = 1;
  sub_100026BBC();
  v23 = Dictionary.init(dictionaryLiteral:)(v18, a3, &type metadata for UInt64, a7);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a3);
  *a9 = v23;
  v32[0] = a3;
  v32[1] = a4;
  v32[2] = a5;
  v32[3] = a6;
  v32[4] = a7;
  v32[5] = a8;
  v32[6] = a10;
  v24 = type metadata accessor for VectorClock(0, (uint64_t)v32);
  v25 = sub_10003D67C(v24);
  return sub_10003D65C(v25, a2, v26);
}

void VectorClock.compare(with:)()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;

  sub_10002626C();
  v70 = v1;
  v74 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v1);
  sub_10003D69C();
  v61 = v5;
  __chkstk_darwin(v6);
  v8 = (char *)&v59 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, &type metadata for UInt64, "key value ", 0);
  v75 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v71 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  sub_10003D69C();
  v69 = v10;
  v12 = __chkstk_darwin(v11);
  v68 = (char *)&v59 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v59 - v17;
  v67 = v0;
  v64 = *v0 + 64;
  v72 = 1;
  sub_10003D6C4();
  v21 = v20 & v19;
  v65 = (unint64_t)(v22 + 63) >> 6;
  v59 = v65 - 1;
  swift_bridgeObjectRetain();
  v62 = 0;
  v23 = 0;
  v66 = v24;
  v60 = v24 + 96;
  v25 = 1;
  while (2)
  {
    v63 = v25;
    v73 = v25;
    do
    {
LABEL_3:
      v26 = v72;
      v27 = v73;
      while (1)
      {
        v72 = v26;
        v73 = v27;
        if (v21)
        {
          v28 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
          v29 = v23;
          v30 = v28 | (v23 << 6);
          goto LABEL_6;
        }
        v33 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
LABEL_61:
          __break(1u);
          return;
        }
        if (v33 >= v65)
        {
          v29 = v23;
LABEL_12:
          v21 = 0;
          v32 = 1;
          goto LABEL_13;
        }
        v34 = *(_QWORD *)(v64 + 8 * v33);
        if (v34)
          goto LABEL_10;
        v29 = v23 + 2;
        if (v23 + 2 >= v65)
        {
          v21 = 0;
          v32 = 1;
          v29 = v23 + 1;
        }
        else
        {
          v34 = *(_QWORD *)(v64 + 8 * v29);
          if (v34)
          {
            v33 = v23 + 2;
LABEL_10:
            v21 = (v34 - 1) & v34;
            v30 = __clz(__rbit64(v34)) + (v33 << 6);
            v29 = v33;
LABEL_6:
            v31 = v66;
            sub_10003D664((uint64_t)v16, *(_QWORD *)(v66 + 48) + *(_QWORD *)(v4 + 72) * v30, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
            v32 = 0;
            *(_QWORD *)&v16[*(int *)(TupleTypeMetadata2 + 48)] = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v30);
            goto LABEL_13;
          }
          v33 = v23 + 3;
          if (v23 + 3 >= v65)
            goto LABEL_12;
          v34 = *(_QWORD *)(v64 + 8 * v33);
          if (v34)
            goto LABEL_10;
          while (v23 + 4 < v65)
          {
            v34 = *(_QWORD *)(v60 + 8 * v23++);
            if (v34)
            {
              v33 = v23 + 3;
              goto LABEL_10;
            }
          }
          v21 = 0;
          v32 = 1;
          v29 = v59;
        }
LABEL_13:
        sub_10003D6D8((uint64_t)v16, v32);
        v35 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        v35(v18, v16, v75);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, TupleTypeMetadata2) == 1)
          goto LABEL_31;
        v35 = *(void (**)(char *, char *, uint64_t))&v18[*(int *)(TupleTypeMetadata2 + 48)];
        v36 = *v70;
        sub_10003D664((uint64_t)v8, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
        Dictionary.subscript.getter(&v76, v8, v36, v3, &type metadata for UInt64, *(_QWORD *)(v74 + 48));
        (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
        if ((v77 & 1) != 0)
          break;
        v26 = 0;
        v27 = 0;
        v23 = v29;
        if ((unint64_t)v35 >= v76)
        {
          v37 = v76 >= (unint64_t)v35;
          v63 &= v37;
          v73 &= v37;
          goto LABEL_3;
        }
      }
      v23 = v29;
    }
    while (!v35);
    v25 = 0;
    if (!__OFADD__(v62++, 1))
      continue;
    break;
  }
  __break(1u);
LABEL_31:
  swift_release();
  v39 = *v70;
  v70 = (_QWORD *)(*v70 + 64);
  sub_10003D6C4();
  v42 = v41 & v40;
  v71 = (unint64_t)(v43 + 63) >> 6;
  v64 = v71 - 1;
  swift_bridgeObjectRetain();
  v44 = 0;
  v45 = 0;
  v65 = v39 + 96;
  v46 = v61;
  while (2)
  {
    v66 = v44;
    while (2)
    {
      if (v42)
      {
        v47 = __clz(__rbit64(v42));
        v42 &= v42 - 1;
        v48 = v47 | (v45 << 6);
        v49 = v69;
        goto LABEL_35;
      }
      v55 = v45 + 1;
      v49 = v69;
      if (__OFADD__(v45, 1))
        goto LABEL_61;
      if (v55 >= v71)
      {
        sub_10003D690();
      }
      else
      {
        v56 = v70[v55];
        if (v56)
        {
LABEL_43:
          v42 = (v56 - 1) & v56;
          v48 = __clz(__rbit64(v56)) + (v55 << 6);
          v45 = v55;
LABEL_35:
          sub_10003D664(v49, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v4 + 72) * v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
          v50 = 0;
          *(_QWORD *)(v49 + *(int *)(TupleTypeMetadata2 + 48)) = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v48);
        }
        else if (v45 + 2 >= v71)
        {
          sub_10003D690();
          v45 = v57;
        }
        else
        {
          v56 = v70[v45 + 2];
          if (v56)
          {
            v55 = v45 + 2;
            goto LABEL_43;
          }
          v55 = v45 + 3;
          if (v45 + 3 >= v71)
          {
            sub_10003D690();
            v45 = v58;
          }
          else
          {
            v56 = v70[v55];
            if (v56)
              goto LABEL_43;
            while (v45 + 4 < v71)
            {
              v56 = *(_QWORD *)(v65 + 8 * v45++);
              if (v56)
              {
                v55 = v45 + 3;
                goto LABEL_43;
              }
            }
            sub_10003D690();
            v45 = v64;
          }
        }
      }
      sub_10003D6D8(v49, v50);
      v51 = (uint64_t)v68;
      v35(v68, (char *)v49, v75);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v51, 1, TupleTypeMetadata2) == 1)
        goto LABEL_59;
      v52 = v51;
      v53 = *(_QWORD *)(v51 + *(int *)(TupleTypeMetadata2 + 48));
      v54 = *v67;
      sub_10003D664(v46, v52, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      Dictionary.subscript.getter(&v76, v46, v54, v3, &type metadata for UInt64, *(_QWORD *)(v74 + 48));
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v46, v3);
      if (v77 != 1 || !v53)
        continue;
      break;
    }
    v72 = 0;
    v73 = 0;
    v44 = v66 + 1;
    if (!__OFADD__(v66, 1))
      continue;
    break;
  }
  __break(1u);
LABEL_59:
  swift_release();
  sub_10000E4E0();
}

void VectorClock.update(for:value:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v25 = v9;
  v10 = v3[3];
  sub_10003D66C();
  __chkstk_darwin(v11);
  sub_10000E478();
  v13 = *(_QWORD *)(v12 + 16);
  __chkstk_darwin(v14);
  sub_10002641C();
  v17 = v16 - v15;
  v28 = *v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16 - v15, v8, v13);
  v19 = v4[6];
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter(&v26, v8, v28, v13, &type metadata for UInt64, v19);
  v20 = v26;
  if (v27)
    v20 = 0;
  v21 = __CFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    v26 = v22;
    v27 = 0;
    v23 = type metadata accessor for Dictionary(0, v13, &type metadata for UInt64, v19);
    Dictionary.subscript.setter(&v26, v17, v23);
    v24 = v28;
    sub_10003D65C(v2, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    sub_10003B304(v24, v2, v13, v10, v4[4], v4[5], v19, v4[7], v25, v4[8]);
    sub_10000E4E0();
  }
}

void sub_10003BC68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;

  v40 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(a1);
  v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, &type metadata for UInt64, "key value ", 0);
  v11 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v41 = *(_QWORD *)(v11 - 8);
  v42 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  v17 = *v2;
  v18 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v47 = v17;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v37 = (unint64_t)(v19 + 63) >> 6;
  v34 = v37 - 1;
  swift_bridgeObjectRetain();
  v22 = swift_bridgeObjectRetain();
  v23 = 0;
  v39 = a1;
  v35 = a1 + 96;
  v43 = v9;
  if (!v21)
    goto LABEL_14;
LABEL_4:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v44 = v23;
  v25 = v24 | (v23 << 6);
LABEL_5:
  v26 = v39;
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v14, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v5 + 72) * v25, v4, v22);
  v27 = 0;
  *(_QWORD *)&v14[*(int *)(TupleTypeMetadata2 + 48)] = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v25);
  v9 = v43;
  while (1)
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v14, v27, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v16, v14, v42);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v16, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      return;
    }
    v28 = *(_QWORD *)&v16[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v16, v4);
    v29 = *(_QWORD *)(v40 + 48);
    Dictionary.subscript.getter(&v45, v9, v47, v4, &type metadata for UInt64, v29);
    if ((v46 & 1) != 0)
    {
      v30 = v38;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v38, v9, v4);
LABEL_11:
      v45 = v28;
      v46 = 0;
      v31 = type metadata accessor for Dictionary(0, v4, &type metadata for UInt64, v29);
      Dictionary.subscript.setter(&v45, v30, v31);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      goto LABEL_13;
    }
    if (v45 < v28)
    {
      v30 = v38;
      v9 = v43;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v38, v43, v4);
      goto LABEL_11;
    }
    v9 = v43;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v43, v4);
LABEL_13:
    v23 = v44;
    if (v21)
      goto LABEL_4;
LABEL_14:
    v32 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v32 >= v37)
    {
      v44 = v23;
      v21 = 0;
      v27 = 1;
    }
    else
    {
      v33 = *(_QWORD *)(v36 + 8 * v32);
      if (v33)
        goto LABEL_17;
      if (v23 + 2 >= v37)
      {
        v21 = 0;
        v27 = 1;
        goto LABEL_23;
      }
      v33 = *(_QWORD *)(v36 + 8 * (v23 + 2));
      if (v33)
      {
        v32 = v23 + 2;
LABEL_17:
        v21 = (v33 - 1) & v33;
        v25 = __clz(__rbit64(v33)) + (v32 << 6);
        v44 = v32;
        goto LABEL_5;
      }
      v32 = v23 + 3;
      if (v23 + 3 >= v37)
      {
        v21 = 0;
        v27 = 1;
        v44 = v23 + 2;
      }
      else
      {
        v33 = *(_QWORD *)(v36 + 8 * v32);
        if (v33)
          goto LABEL_17;
        while (v23 + 4 < v37)
        {
          v33 = *(_QWORD *)(v35 + 8 * v23++);
          if (v33)
          {
            v32 = v23 + 3;
            goto LABEL_17;
          }
        }
        v21 = 0;
        v27 = 1;
        v32 = v34;
LABEL_23:
        v44 = v32;
      }
    }
  }
  __break(1u);
}

uint64_t VectorClock.mergingNodes(_:withValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a3[3];
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(a1);
  sub_10002641C();
  v11 = v10 - v9;
  sub_10003D6B8(v12, v13, v14);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  return sub_10003B304(v16, v11, a3[2], v7, a3[4], a3[5], a3[6], a3[7], a4, a3[8]);
}

void VectorClock.takingNodeTimestamp(_:forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  sub_10003D66C();
  __chkstk_darwin(v7);
  sub_10000E478();
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v11);
  sub_10002641C();
  v14 = v13 - v12;
  sub_10003D6B8(v15, v16, v17);
  v32 = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, v6, v9);
  v30 = VectorClock.subscript.getter(v6, v4);
  v31 = 0;
  v19 = *(_QWORD *)(v4 + 48);
  v20 = type metadata accessor for Dictionary(0, v9, &type metadata for UInt64, v19);
  Dictionary.subscript.setter(&v30, v14, v20);
  sub_10003D65C(v2, v0 + *(int *)(v4 + 76), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v21 = sub_10003D62C();
  sub_10003B304(v21, v22, v23, v24, v25, v26, v19, v27, v28, v29);
  sub_10000E4E0();
}

uint64_t VectorClock.subscript.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  char v5;

  Dictionary.subscript.getter(&v4, a1, *v2, *(_QWORD *)(a2 + 16), &type metadata for UInt64, *(_QWORD *)(a2 + 48));
  if (v5)
    return 0;
  else
    return v4;
}

uint64_t VectorClock.merging(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(a1);
  sub_10002641C();
  v11 = v10 - v9;
  sub_10003BC68(*v12, v13);
  v15 = v14;
  VectorClock.compare(with:)();
  if (v16)
  {
    if (v16 == 3)
    {
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 64);
      v24[0] = *(_QWORD *)(a2 + 16);
      v24[1] = v7;
      v18 = *(_OWORD *)(a2 + 48);
      v25 = *(_OWORD *)(a2 + 32);
      v26 = v18;
      v27 = v17;
      v19 = type metadata accessor for VectorClock.ConcurrentMergeError(0, (uint64_t)v24);
      v20 = sub_10003D6B0((uint64_t)&protocol conformance descriptor for VectorClock<A, B>.ConcurrentMergeError);
      v21 = swift_allocError(v19, v20, 0, 0);
      return swift_willThrow(v21);
    }
    v23 = v3 + *(int *)(a2 + 76);
  }
  else
  {
    v23 = a1 + *(int *)(a2 + 76);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
  return sub_10003B304(v15, v11, *(_QWORD *)(a2 + 16), v7, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), a3, *(_QWORD *)(a2 + 64));
}

void VectorClock.resetting(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  sub_10002626C();
  v4 = v3;
  v23 = v5;
  sub_10003D66C();
  __chkstk_darwin(v6);
  sub_10000E478();
  v7 = *(_QWORD *)(v4 + 16);
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  v26 = *v0;
  (*(void (**)(uint64_t))(v12 + 16))(v10 - v9);
  v24 = 0;
  v25 = 1;
  v13 = *(_QWORD *)(v4 + 48);
  v14 = type metadata accessor for Dictionary(0, v7, &type metadata for UInt64, v13);
  swift_bridgeObjectRetain();
  Dictionary.subscript.setter(&v24, v11, v14);
  sub_10003D65C(v2, (uint64_t)v0 + *(int *)(v4 + 76), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v15 = sub_10003D62C();
  sub_10003B304(v15, v16, v17, v18, v19, v20, v13, v21, v22, v23);
  sub_10000E4E0();
}

uint64_t sub_10003C494(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x7365646F6ELL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365646F6ELL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10003C578(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x7365646F6ELL;
}

BOOL sub_10003C5A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static DeviceMovementObserver.Status.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10003C5E0()
{
  char *v0;

  return DeviceMovementObserver.Status.hashValue.getter(*v0);
}

void sub_10003C5FC(uint64_t a1)
{
  char *v1;

  DeviceMovementObserver.Status.hash(into:)(a1, *v1);
}

Swift::Int sub_10003C634(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  DeviceMovementObserver.Status.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_10003C688()
{
  char *v0;

  return sub_10003C578(*v0);
}

uint64_t sub_10003C6A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003C494(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003C6E8()
{
  return HIDServicePropertyKey.intValue.getter();
}

uint64_t sub_10003C718@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.consumer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003C750(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021DCE0, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10003C784(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10021DCE0, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void VectorClock.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;

  v4 = *(_QWORD *)(a2 + 16);
  v24 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  v29 = v4;
  v20 = *(_OWORD *)(a2 + 24);
  v30 = v20;
  v31 = v24;
  v22 = *(_OWORD *)(a2 + 48);
  v32 = v22;
  v21 = v5;
  v33 = v5;
  v6 = type metadata accessor for VectorClock.CodingKeys(255, (uint64_t)&v29);
  WitnessTable = swift_getWitnessTable(&unk_10021DCE0, v6);
  v8 = type metadata accessor for KeyedEncodingContainer(0, v6, WitnessTable);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_10000DBE4(a1, v11);
  v13 = v12;
  v14 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v6, v6, WitnessTable, v11, v13);
  v29 = *v14;
  v34 = 0;
  v15 = type metadata accessor for Dictionary(0, v4, &type metadata for UInt64, v22);
  v27 = v24;
  v28 = &protocol witness table for UInt64;
  v16 = sub_10003D6B0((uint64_t)&protocol conformance descriptor for <> [A : B]);
  v17 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v34, v8, v15, v16);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  }
  else
  {
    v18 = v25;
    v19 = (char *)v14 + *(int *)(a2 + 76);
    LOBYTE(v29) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v29, v8, v20, v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  sub_10003AF60();
}

void VectorClock.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t WitnessTable;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;

  v52 = a8;
  v43 = a9;
  v42 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  sub_10002641C();
  v45 = v17 - v16;
  v57 = v18;
  v58 = v19;
  v59 = v20;
  v60 = v21;
  v61 = v22;
  v62 = v23;
  v63 = v24;
  v25 = type metadata accessor for VectorClock.CodingKeys(255, (uint64_t)&v57);
  WitnessTable = swift_getWitnessTable(&unk_10021DCE0, v25);
  v51 = type metadata accessor for KeyedDecodingContainer(0, v25, WitnessTable);
  v44 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v27 = (char *)&v41 - v26;
  v48 = a2;
  v49 = a6;
  v57 = a2;
  v58 = a3;
  v46 = a3;
  v47 = a7;
  v50 = a4;
  v59 = a4;
  v60 = a5;
  v61 = a6;
  v62 = a7;
  v63 = v52;
  v28 = type metadata accessor for VectorClock(0, (uint64_t)&v57);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v41 - v30;
  v33 = a1[3];
  v32 = a1[4];
  sub_10000DBE4(a1, v33);
  v52 = v27;
  v34 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v25, v25, WitnessTable, v33, v32);
  if (v34)
  {
    sub_10003D6E4();
  }
  else
  {
    WitnessTable = v29;
    v54 = v28;
    v35 = v31;
    v36 = v46;
    v37 = v45;
    v38 = type metadata accessor for Dictionary(0, v48, &type metadata for UInt64, v49);
    v64 = 0;
    v55 = v50;
    v56 = &protocol witness table for UInt64;
    sub_10003D6B0((uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v38, &v64, v51, v38);
    *(_QWORD *)v35 = v57;
    LOBYTE(v57) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v36, &v57, v51, v36);
    sub_10003D650();
    v39 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(&v35[*(int *)(v54 + 76)], v37, v36);
    v40 = WitnessTable;
    (*(void (**)(uint64_t, char *, uint64_t))(WitnessTable + 16))(v43, v35, v39);
    sub_10003D6E4();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v39);
  }
  sub_10003AF60();
}

void sub_10003CC44(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  VectorClock.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(char **)(a2 + 64), a3);
}

void sub_10003CC6C(_QWORD *a1, uint64_t a2)
{
  VectorClock.encode(to:)(a1, a2);
}

void static VectorClock<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void (*v43)(_QWORD *, uint64_t, uint64_t);
  void (*v44)(_QWORD *, uint64_t);
  _QWORD v46[7];

  sub_10002626C();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v46[0] = v26;
  v46[1] = v24;
  v46[2] = v32;
  v46[3] = v33;
  v46[4] = v22;
  v46[5] = v34;
  v46[6] = a21;
  v35 = type metadata accessor for VectorClock(0, (uint64_t)v46);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v35);
  v39 = (_QWORD *)((char *)&v46[-1] - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = __chkstk_darwin(v37);
  v42 = (_QWORD *)((char *)&v46[-1] - v41);
  LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)(v31 + *(int *)(v40 + 76), v29 + *(int *)(v40 + 76), v25, a22);
  v43 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v36 + 16);
  v43(v42, v31, v35);
  v43(v39, v29, v35);
  if ((v25 & 1) != 0)
    static Dictionary<>.== infix(_:_:)(*v42, *v39, v27, &type metadata for UInt64, v23, &protocol witness table for UInt64);
  v44 = *(void (**)(_QWORD *, uint64_t))(v36 + 8);
  v44(v42, v35);
  v44(v39, v35);
  sub_10000E4E0();
}

#error "10003CDE0: call analysis failed (funcsize=15)"

uint64_t type metadata accessor for VectorClock(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VectorClock);
}

uint64_t type metadata accessor for VectorClock.ConcurrentMergeError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VectorClock.ConcurrentMergeError);
}

uint64_t type metadata accessor for VectorClock.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VectorClock.CodingKeys);
}

uint64_t sub_10003CE18(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for VectorClock<A, B>.ComparisonResult, a1);
}

uint64_t sub_10003CE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 64);
}

uint64_t sub_10003CE30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 72);
    return 0;
  }
  return result;
}

uint64_t *sub_10003CEAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_10003CF68(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t *sub_10003CFAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_10003D01C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_10003D08C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_10003D0DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_10003D144(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((v8 + 8) & ~v8) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(_WORD *)((char *)a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if ((v6 & 0x80000000) != 0)
        return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(((unint64_t)a1 + v8 + 8) & ~v8, v6, v4);
      v16 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((_BYTE *)a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003D218 + 4 * byte_10021DA30[(v10 - 1)]))();
}

void sub_10003D284(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_10003D470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10003D478(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003D4C4 + 4 * byte_10021DA43[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003D4F8 + 4 * byte_10021DA3E[v4]))();
}

uint64_t sub_10003D4F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003D508);
  return result;
}

uint64_t sub_10003D514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003D51CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003D520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for VectorClock.ComparisonResult(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VectorClock.ComparisonResult);
}

uint64_t sub_10003D540(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003D58C + 4 * byte_10021DA4D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003D5C0 + 4 * byte_10021DA48[v4]))();
}

uint64_t sub_10003D5C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D5C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003D5D0);
  return result;
}

uint64_t sub_10003D5DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003D5E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003D5E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D5F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D5FC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10021DCB8, a1);
}

uint64_t sub_10003D60C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10021DC28, a1);
}

uint64_t sub_10003D61C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10021DC50, a1);
}

uint64_t sub_10003D62C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003D650()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 184), *(_QWORD *)(v1 - 192));
}

uint64_t sub_10003D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10003D664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10003D67C(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 76);
}

uint64_t sub_10003D6B0(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(a1, v1);
}

void sub_10003D6B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_10003BC68(*a1, a3);
}

uint64_t sub_10003D6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10003D6E4()
{
  _QWORD *v0;

  return sub_100005988(v0);
}

uint64_t sub_10003D6EC()
{
  uint64_t v0;

  v0 = sub_10000F6E4();
  sub_10000897C(v0, qword_1002B6D78);
  sub_100006FB4(v0, (uint64_t)qword_1002B6D78);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1195463236, 0xE400000000000000);
}

uint64_t sub_10003D754()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_10003D778()
{
  uint64_t v0;

  v0 = sub_10003D754();
  return swift_deallocClassInstance(v0, 32, 7);
}

void sub_10003D794(__int128 *a1)
{
  uint64_t v2;
  _QWORD v3[7];
  _QWORD v4[5];

  sub_10003FDE8(a1, (uint64_t)v3);
  v2 = sub_10000F6E4();
  __chkstk_darwin(v2);
  sub_10003FDE8(a1, (uint64_t)v4);
  __asm { BR              X10 }
}

void sub_10003D844()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v5 - 320) = v0;
  sub_100040530();
  if (v3 != 0x8000000000000000)
  {
    sub_1000401E4();
    sub_100040244();
    sub_1000401CC((uint64_t)"controller: unexpected transition: ");
    sub_10004044C();
    sub_1000401B8(v21, v22, (uint64_t)&type metadata for DragController.State);
    sub_100040298();
    v23 = sub_100040358();
    sub_1000401B8(v23, v24, (uint64_t)&type metadata for DragController.Event);
    sub_1000403D8();
    ((void (*)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))_assertionFailure(_:_:file:line:flags:))("Fatal error", 11, 2, v25, v26, "EnsembleAgent/DragController.swift", 34, 2, 180);
    __break(1u);
    JUMPOUT(0x10003E850);
  }
  v6 = *(_QWORD *)(v5 - 144);
  v7 = *(_QWORD *)(v5 - 304);
  v8 = *(void **)(v7 + 16);
  v9 = type metadata accessor for DragPlatformProvider_iOS();
  *(_QWORD *)(v5 - 256) = &off_100286150;
  v10 = sub_100040280(v9);
  v11 = sub_1000088D8(v10, 88);
  *(_OWORD *)(v5 - 336) = *(_OWORD *)(v2 + 16);
  sub_100040508();
  sub_1000404E8();
  __chkstk_darwin(v12);
  sub_1000402B8(v13, v14, v27);
  v15 = *v4;
  *(_QWORD *)(v11 + 40) = v9;
  *(_QWORD *)(v11 + 48) = &off_100286150;
  *(_QWORD *)(v11 + 16) = v15;
  *(_QWORD *)(v11 + 64) = 0;
  v16 = swift_unknownObjectWeakInit(v11 + 56, 0);
  *(_OWORD *)(v11 + 72) = xmmword_10021DD50;
  *(_QWORD *)(v11 + 64) = &off_100283738;
  v17 = swift_unknownObjectWeakAssign(v16, v7);
  sub_1000402A8(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003FE08);
  v18 = v8;
  sub_100040500();
  v19 = sub_10004053C();
  v20 = sub_1000088D8(v19, 32);
  *(_QWORD *)(v20 + 16) = v11;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v7 + 24) = v20;
  sub_100040528(v20);
  sub_1000088D0();
  sub_10002645C();
  *(_QWORD *)(v5 - 288) = *(_QWORD *)(v5 - 320);
  *(_QWORD *)(v5 - 280) = v6;
  *(_OWORD *)(v5 - 272) = *(_OWORD *)(v5 - 336);
  *(_QWORD *)(v5 - 256) = 0;
  *(_QWORD *)(v5 - 248) = 0;
  *(_BYTE *)(v5 - 240) = 96;
  sub_100040330();
  sub_10000B348();
  swift_release();
  sub_10003FE64(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003FE9C);
  sub_10000E4E0();
}

uint64_t sub_10003E8D8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (!(v1 >> 62))
    return swift_retain(*(_QWORD *)(v1 + 16));
  if (v1 >> 62 == 1)
  {
    v1 &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_retain(*(_QWORD *)(v1 + 16));
  }
  return 0;
}

uint64_t sub_10003E910()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 62 == 1)
    return swift_retain(*(_QWORD *)(v1 + 24));
  else
    return 0;
}

uint64_t sub_10003E940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100040514();
  v10 = type metadata accessor for Completion();
  sub_1000088D8(v10, 48);
  swift_bridgeObjectRetain(v7);
  sub_1000088D0();
  v12 = (unint64_t)Completion.init(file:line:body:)(v8, v7, v6, v5, a5);
  v13 = 0;
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0x6000000000000000;
  sub_10003D794(&v12);
  return swift_release();
}

void sub_10003E9E8()
{
  uint64_t v0;
  Swift::String v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD v17[3];

  if (*(_QWORD *)(v0 + 24) >> 62 == 2)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17[1] = 0xD000000000000022;
    v17[2] = 0x8000000100253710;
    v17[0] = *(_QWORD *)(v0 + 24);
    swift_retain(v17[0] & 0x3FFFFFFFFFFFFFFFLL);
    v1._countAndFlagsBits = String.init<A>(describing:)(v17, &type metadata for DragController.State);
    String.append(_:)(v1);
    sub_10000E594();
    sub_100040400();
    sub_100040544();
    v2 = sub_100040338();
    v8 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v2, v3, v4, v5, v6, v7, 251);
    sub_10000E568();
    if (off_1002A9828 != (_UNKNOWN *)-1)
      swift_once(&off_1002A9828, sub_10003D6EC);
    v9 = sub_10000F6E4();
    v10 = sub_100006FB4(v9, (uint64_t)qword_1002B6D78);
    v11 = (void *)Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (sub_1000403A4(v12))
    {
      v13 = (_WORD *)sub_100040274();
      *v13 = 0;
      sub_10004031C((void *)&_mh_execute_header, v14, v15, "controller: drag check, no source coordinator");
      sub_100007958((uint64_t)v13);
    }

    v16 = v8;
    Completion.callAsFunction(_:)((uint64_t)v8);

  }
  else
  {
    sub_10002679C();
    sub_1000088D0();
    sub_1000B09A4();
    sub_1000269A0();
    swift_release();
  }
}

uint64_t DragController.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24) & 0x3FFFFFFFFFFFFFFFLL);
  return v0;
}

uint64_t DragController.__deallocating_deinit()
{
  uint64_t v0;

  DragController.deinit();
  return swift_deallocClassInstance(v0, 32, 7);
}

unint64_t sub_10003EBF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AB408;
  if (!qword_1002AB408)
  {
    v1 = type metadata accessor for DragMessage(255);
    result = swift_getWitnessTable(&unk_100226750, v1);
    atomic_store(result, (unint64_t *)&qword_1002AB408);
  }
  return result;
}

uint64_t sub_10003EC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003EC68(a1, a2, a3, a4, a5);
}

void sub_10003EC44(uint64_t a1)
{
  sub_10003ECF8(a1, sub_10003E8D8);
}

void sub_10003EC50(uint64_t a1)
{
  sub_10003ED54(a1, sub_10003E8D8);
}

uint64_t sub_10003EC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10003EC68(a1, a2, a3, a4, a5);
}

uint64_t sub_10003EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;

  sub_100040514();
  v11 = v10();
  if (v11 && (v12 = v11, swift_release(), v12 == v8))
    return sub_1000B9D68(v7, v6, v5, a5);
  else
    return Completion.callAsFunction(_:)(0);
}

void sub_10003ECEC(uint64_t a1)
{
  sub_10003ECF8(a1, sub_10003E910);
}

void sub_10003ECF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2();
  if (v4)
  {
    sub_10004054C(v4);
    if (v2 == a1)
    {
      memset(v5, 0, sizeof(v5));
      v7 = 0;
      v8 = 0;
      v6 = 0xA000000000000000;
      sub_10003D794(v5);
    }
  }
  sub_100040384();
}

void sub_10003ED48(uint64_t a1)
{
  sub_10003ED54(a1, sub_10003E910);
}

void sub_10003ED54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2();
  if (v4)
  {
    sub_10004054C(v4);
    if (v2 == a1)
      sub_100040368(1uLL, v5, v6, v7, v8, v9, v10, v11);
  }
  sub_100040384();
}

void sub_10003ED90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_10003E910();
  if (v3)
  {
    sub_10004054C(v3);
    if (v1 == a1)
      sub_100040368(3uLL, v4, v5, v6, v7, v8, v9, v10);
  }
  sub_100040384();
}

void sub_10003EDCC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  __int128 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;

  LODWORD(v3) = a3;
  v5 = sub_10000F6E4();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v58 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  sub_1000404E8();
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, a2, v8);
  v13 = UniversalControlDeviceID.init(uuid:)(v11);
  v15 = v14;
  v71 = v13 >> 16;
  v72 = v13 >> 8;
  v69 = HIDWORD(v13);
  v70 = v13 >> 24;
  v67 = HIWORD(v13);
  v68 = v13 >> 40;
  v65 = v14 >> 8;
  v66 = HIBYTE(v13);
  v63 = v14 >> 24;
  v64 = v14 >> 16;
  v61 = v14 >> 40;
  v62 = HIDWORD(v14);
  v59 = HIBYTE(v14);
  v60 = HIWORD(v14);
  if (off_1002A9828 != (_UNKNOWN *)-1)
    swift_once(&off_1002A9828, sub_10003D6EC);
  v56 = (id)sub_100006FB4(v5, (uint64_t)qword_1002B6D78);
  v16 = Logger.logObject.getter(v56);
  v18 = static os_log_type_t.default.getter(v16, v17);
  v19 = v18;
  v20 = os_log_type_enabled(v16, v18);
  v57 = v8;
  if (v20)
  {
    v21 = swift_slowAlloc(18, -1);
    v55 = v5;
    v22 = v21;
    v53 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v75 = v53;
    *(_DWORD *)v22 = 136315394;
    v51 = v22 + 4;
    sub_100040204();
    LOBYTE(v51) = v15;
    v23 = sub_10004041C(v13);
    v52 = v19;
    v24 = UUID.uuidString.getter(v23);
    v54 = v3;
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v11, v8);
    v27 = sub_1000599D0(8, v24, v26);
    v3 = static String._fromSubstring(_:)(v27);
    v29 = v28;
    swift_bridgeObjectRelease();
    v30 = v3;
    LOBYTE(v3) = v54;
    v74 = sub_100006FCC(v30, v29, (uint64_t *)&v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v51);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 1024;
    LODWORD(v74) = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4, v22 + 14);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v52, "controller: drag completed, peer=%s success=%{BOOL}d", (uint8_t *)v22, 0x12u);
    v31 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v31);
    v32 = v22;
    v5 = v55;
    sub_100007958(v32);
  }

  if ((v3 & 1) != 0)
  {
    if (sub_10003E910())
    {
      v75 = 0u;
      v76 = 0u;
      sub_1000404F4(0x8000000000000000);
      sub_10000B348();
    }
  }
  else
  {
    *(_QWORD *)&v75 = 0;
    *((_QWORD *)&v75 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v75 = 0xD00000000000002BLL;
    *((_QWORD *)&v75 + 1) = 0x8000000100253740;
    sub_100040204();
    LOBYTE(v53) = v15;
    v33 = sub_10004041C(v13);
    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v11, v57);
    v37 = sub_1000599D0(8, v34, v36);
    v38 = static String._fromSubstring(_:)(v37);
    v40 = v39;
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    sub_10000E568();
    v42 = v75;
    sub_100040400();
    swift_bridgeObjectRetain();
    v43 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, v42, *((uint64_t *)&v42 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragController.swift", 93, 2, 348);
    sub_10000E594();
    v44 = v58;
    v45 = (*(uint64_t (**)(uint64_t, id, uint64_t))(v6 + 16))(v58, v56, v5);
    __chkstk_darwin(v45);
    v53 = (uint64_t)v43;
    sub_1000E30C0((int)sub_10003FDC4, (int)&v51, v44, v46, v47, v48, v49, v50, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65,
      v66,
      v67,
      v68,
      v69,
      v70);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v44, v5);
    if (sub_10003E910())
    {
      v75 = (unint64_t)v43;
      v76 = 0uLL;
      sub_1000404F4(0x6000000000000000);
      sub_10000B348();
    }

  }
  sub_10000E4E0();
}

void sub_10003F2A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  if (off_1002A9828 != (_UNKNOWN *)-1)
    swift_once(&off_1002A9828, sub_10003D6EC);
  v2 = type metadata accessor for Logger(0);
  sub_100006FB4(v2, (uint64_t)qword_1002B6D78);
  v3 = swift_retain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = sub_100111930();
    v12 = sub_100006FCC(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v7 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "controller: drag rejected, peer=%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  sub_1000136A0();
  v11 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6709, 0x6A65722067617264, 0xED00006465746365, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragController.swift", 93, 2, 358);
  if (sub_10003E8D8())
  {
    v13 = (uint64_t)v11;
    v14 = 0u;
    v15 = 0u;
    v16 = 0;
    v17 = -96;
    sub_1000AB8A8((__int128 *)&v13);
    swift_release();
  }

}

uint64_t sub_10003F4D0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v7 = a2;
  }
  else
  {
    sub_1000136A0();
    v7 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6742, 0xD000000000000018, 0x8000000100253770, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/DragController.swift", 93, 2, 366);
  }
  swift_errorRetain(a2);
  if (off_1002A9828 != (_UNKNOWN *)-1)
    swift_once(&off_1002A9828, sub_10003D6EC);
  v8 = sub_100006FB4(v3, (uint64_t)qword_1002B6D78);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  __chkstk_darwin(v9);
  *(&v15 - 2) = (uint64_t)v7;
  sub_1000E45AC((int)sub_10003F66C, 0, (int)sub_1000401B4, (int)(&v15 - 4), v10, v11, v12, v13, v15, (id)v16, *((uint64_t *)&v16 + 1), v17, v18, v19, v20, v21, v22, v23, v24,
    v25,
    v26,
    v27,
    v28,
    v29);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v16 = 1uLL;
  v17 = 0;
  v18 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0xA000000000000000;
  sub_10003D794(&v16);
  return swift_errorRelease(v7);
}

unint64_t sub_10003F66C()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10003F688(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  char *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v20 = a1;
  v5 = type metadata accessor for UUID(0);
  __chkstk_darwin(v5);
  sub_10000E478();
  v19 = type metadata accessor for DragMessage(0);
  v6 = __chkstk_darwin(v19);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)v18 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)v18 - v12;
  sub_10002517C(a2, a3);
  v14 = objc_autoreleasePoolPush();
  v15 = v21;
  sub_100089B6C(a2, a3);
  if (!v15)
  {
    v18[1] = 0;
    v21 = (void *)v5;
    objc_autoreleasePoolPop(v14);
    sub_1000404C8();
    sub_10003FD00((uint64_t)v11, (uint64_t)v13);
    sub_10003FD44((uint64_t)v13, (uint64_t)v8);
    v17 = (char *)&loc_10003F81C + 4 * byte_10021DD70[swift_getEnumCaseMultiPayload(v8, v19)];
    __asm { BR              X10 }
  }
  objc_autoreleasePoolPop(v14);
  sub_1000404C8();
  swift_errorRetain(v15);
  sub_10003F4D0(v20, v15);
  swift_errorRelease(v15);
  return swift_errorRelease(v15);
}

uint64_t sub_10003F950(uint64_t a1, void *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  id v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(v2 + 24);
  if (!(v4 >> 62))
  {
    if (a2)
    {
      sub_10002679C();
      v7 = a2;
    }
    else
    {
      sub_100040400();
      sub_10002679C();
      v14 = sub_100040464();
      v7 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v14, v15, v16, v17, v18, v19, 399);
    }
    sub_1000404B4();
    sub_1000088D0();
    sub_1000B0B50();
    sub_10000B348();
    swift_errorRelease(v7);
    return swift_release();
  }
  if (v4 >> 62 == 1)
  {
    v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
    if (a2)
    {
      sub_10002679C();
      v6 = a2;
    }
    else
    {
      sub_100040400();
      sub_10002679C();
      v8 = sub_100040464();
      v6 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v8, v9, v10, v11, v12, v13, 402);
    }
    if (*(_QWORD *)(v5 + 24))
    {
      v26 = (unint64_t)v6;
      v27 = 0;
      v28 = 0;
      v29 = 0x6000000000000000;
      sub_1000404B4();
      sub_1000088D0();
      sub_1000C5F04(&v26);
      sub_10000B348();
    }
    else
    {
      sub_1000404B4();
    }
    v21 = v6;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v25 = -64;
    sub_1000088D0();
    sub_1000AB8A8((__int128 *)&v21);
    sub_10000B348();
    swift_errorRelease(v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_10003FAE4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003F688(a1, a2, a3);
}

uint64_t type metadata accessor for DragController()
{
  return objc_opt_self(_TtC13EnsembleAgent14DragController);
}

uint64_t type metadata accessor for DragController.Context()
{
  return objc_opt_self(_TtCC13EnsembleAgent14DragControllerP33_699031CE081DAD5C1C6054D14BCD02777Context);
}

_QWORD *initializeBufferWithCopyOfBuffer for DragController.State(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for DragController.State(_QWORD *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for DragController.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  v4 = *a1;
  *a1 = *a2;
  v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

_QWORD *initializeWithTake for DragSourceCoordinator.State(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for DragController.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragController.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragController.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10003FC98(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_10003FCB4(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_10003FCC4(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DragController.State()
{
  return &type metadata for DragController.State;
}

uint64_t sub_10003FD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DragMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FD44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DragMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FD88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DragMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003FDC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1000404B4();
  return v1;
}

uint64_t sub_10003FDE8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10003FE08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  switch(a5 >> 61)
  {
    case 0uLL:
      result = swift_unknownObjectRetain(a3);
      break;
    case 1uLL:
      swift_retain(result);
      result = a2;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      result = swift_retain(result);
      break;
    case 4uLL:
      result = swift_retain(a5 & 0x1FFFFFFFFFFFFFFFLL);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10003FE64(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_10003FE9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  switch(a5 >> 61)
  {
    case 0uLL:
      result = swift_unknownObjectRelease(a3);
      break;
    case 1uLL:
      swift_release(result);
      result = a2;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      result = swift_release(result);
      break;
    case 4uLL:
      result = swift_release(a5 & 0x1FFFFFFFFFFFFFFFLL);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10003FEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t destroy for DragController.Event(uint64_t a1)
{
  return sub_10003FE9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *initializeWithCopy for DragController.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_10003FE08(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for DragController.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  sub_10003FE08(*a2, v4, v5, v6, v7);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  sub_10003FE9C(v10, v11, v12, v13, v14);
  return a1;
}

uint64_t *assignWithTake for DragController.Event(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  sub_10003FE9C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DragController.Event(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xB && *(_BYTE *)(a1 + 56))
    {
      v2 = *(_DWORD *)a1 + 10;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 32) >> 60) >> 1) & 0xFFFFFFF7 | (8
                                                                            * ((*(_QWORD *)(a1 + 32) & 0x1000000000000000) != 0))) ^ 0xF;
      if (v2 >= 0xA)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for DragController.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 11;
    if (a3 >= 0xB)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xB)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)(((-a2 >> 3) & 1) - 2 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_100040140(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32) >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_10004015C(uint64_t result)
{
  *(_QWORD *)(result + 32) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_10004016C(_QWORD *result, uint64_t a2)
{
  if (a2 < 5)
  {
    result[4] = result[4] & 0xFFFFFFFFFFFFFFFLL | (a2 << 61);
  }
  else
  {
    *result = (a2 - 5);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[5] = 0;
    result[6] = 0;
    result[4] = 0xA000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for DragController.Event()
{
  return &type metadata for DragController.Event;
}

uint64_t sub_1000401B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return _print_unlocked<A, B>(_:_:)(v5 - 288, v5 - 224, a3, v3, v4);
}

void sub_1000401CC(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v1);
}

void sub_1000401E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 288) = 0;
  *(_QWORD *)(v0 - 280) = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
}

void sub_100040244()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 280);
  *(_QWORD *)(v0 - 224) = *(_QWORD *)(v0 - 288);
  *(_QWORD *)(v0 - 216) = v1;
}

uint64_t sub_10004025C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_100006FB4(v2, a2);
  return Logger.logObject.getter(v3);
}

uint64_t sub_100040274()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_100040280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = a1;
  *(_QWORD *)(v2 - 288) = v1;
  return type metadata accessor for DragSourceCoordinator();
}

void sub_100040298()
{
  Swift::String v0;

  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
}

_QWORD *sub_1000402A8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return sub_10003FE64(*(_QWORD **)(v2 - 296), a2);
}

uint64_t sub_1000402B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
}

void sub_1000402DC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 288) = a1;
  *(_QWORD *)(v6 - 280) = v1 | (v2 << 48) | (v3 << 56);
  *(_QWORD *)(v6 - 272) = v4;
  *(_QWORD *)(v6 - 264) = v5;
}

void sub_100040308(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_10004031C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_100040330()
{
  uint64_t v0;

  sub_1000AB8A8((__int128 *)(v0 - 288));
}

uint64_t sub_100040338()
{
  return 4294960539;
}

_QWORD *sub_100040350(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return sub_10003FE64(v2, a2);
}

uint64_t sub_100040358()
{
  uint64_t v0;

  return sub_10003FDE8(*(__int128 **)(v0 - 296), v0 - 288);
}

void sub_100040368(unint64_t a1@<X8>, uint64_t a2, __int128 a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  a3 = a1;
  a4 = 0;
  a5 = 0;
  a7 = 0;
  a8 = 0;
  a6 = 0xA000000000000000;
  sub_10003D794(&a3);
}

BOOL sub_100040394(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL sub_1000403A4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_1000403B4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 280) = 0;
  *(_QWORD *)(v0 - 264) = 0;
  *(_QWORD *)(v0 - 272) = 0;
  *(_QWORD *)(v0 - 256) = 0x4000000000000000;
}

unint64_t sub_1000403E8()
{
  return sub_1000136A0();
}

unint64_t sub_100040400()
{
  return sub_1000136A0();
}

uint64_t sub_100040408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 64) = 0;
  return swift_unknownObjectWeakInit(v1 + 56, 0);
}

uint64_t sub_10004041C(uint64_t a1)
{
  uint64_t v1;

  return UUID.init(uuid:)(a1, *(_QWORD *)(v1 - 152), *(_QWORD *)(v1 - 160), *(_QWORD *)(v1 - 168), *(_QWORD *)(v1 - 176), *(_QWORD *)(v1 - 184), *(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 200));
}

double sub_100040430()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 280) = 0u;
  *(_OWORD *)(v0 - 264) = 0u;
  *(_QWORD *)(v0 - 248) = 0;
  return result;
}

void sub_10004044C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 288) = *(_QWORD *)(*(_QWORD *)(v0 - 304) + 24);
}

uint64_t sub_100040464()
{
  return 4294960573;
}

double sub_10004047C()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 272) = 0u;
  *(_OWORD *)(v0 - 256) = 0u;
  *(_BYTE *)(v0 - 240) = 0;
  return result;
}

void sub_100040494()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 288) = 0;
  *(_QWORD *)(v0 - 280) = 0xE000000000000000;
}

uint64_t sub_1000404AC(uint64_t a1)
{
  return swift_retain_n(a1, 2);
}

uint64_t sub_1000404B4()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1000404C8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

void sub_1000404D4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 288) = a1;
  *(_QWORD *)(v2 - 280) = v1;
}

void sub_1000404F4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  sub_1000C5F04((__int128 *)(v1 - 128));
}

uint64_t sub_100040500()
{
  uint64_t v0;

  return sub_100005988((_QWORD *)(v0 - 288));
}

uint64_t sub_100040508()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10003FEF8(v1 - 288, v0);
}

uint64_t sub_100040528(uint64_t a1)
{
  return swift_retain(a1);
}

void sub_100040530()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0 & 0x1FFFFFFFFFFFFFFFLL;
}

uint64_t sub_10004053C()
{
  return type metadata accessor for DragController.Context();
}

uint64_t sub_100040544()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004054C(uint64_t a1)
{
  return swift_release(a1);
}

void sub_100040554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v3 = sub_1000410F8();
  v4 = sub_100041128(v3);
  __chkstk_darwin(v4);
  sub_100041054(v5, v14);
  sub_100041174();
  __chkstk_darwin(v6);
  sub_10002641C();
  v7 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  __chkstk_darwin(v7);
  v8 = sub_100041094();
  sub_10004113C(v8);
  JSONEncoder.init()();
  v9 = sub_1000055B0(&qword_1002AB660);
  v10 = (__n128 *)sub_1000410B0(v9);
  sub_100041194(v10, (__n128)xmmword_10021BBA0);
  sub_100041014((unint64_t *)&unk_1002B3390, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  sub_1000055B0(&qword_1002AB668);
  v11 = sub_100040FD0();
  sub_100041074(v11);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v0);
  v16[0] = v15;
  type metadata accessor for UniversalControlDevice(0);
  sub_100041014(&qword_1002AB670, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
  sub_100041110((uint64_t)v16);
  if (!v1)
  {
    v13 = v12;
    v16[3] = v2;
    SHA256.init()();
    __asm { BR              X10 }
  }
  swift_release();
  sub_10003AF60();
}

uint64_t sub_100040834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100040CA8(a1, a2, a3);
}

uint64_t sub_100040848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[5];

  v8 = sub_1000055B0(&qword_1002AB650);
  v13[3] = v8;
  v13[4] = sub_100040EF0();
  v9 = (_QWORD *)swift_allocObject(&unk_100283908, 48, 7);
  v13[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  sub_10000DBE4(v13, v8);
  Slice<>.withUnsafeBytes<A>(_:)(&v12, sub_100040F5C, 0, v8, &type metadata for Data._Representation, &protocol witness table for UnsafeRawBufferPointer);
  v10 = v12;
  sub_100005988(v13);
  return v10;
}

uint64_t sub_10004091C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10000DBE4(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = *v2;
  if (*v2 && (v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = Data.LargeSlice.init(_:)();
    }
    else
    {
      v6 = Data.InlineSlice.init(_:)();
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100005988(v8);
  return v6;
}

void sub_1000409D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = sub_1000410F8();
  v3 = sub_100041128(v2);
  __chkstk_darwin(v3);
  sub_100041054(v4, v13);
  sub_100041174();
  __chkstk_darwin(v5);
  sub_10002641C();
  v6 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  __chkstk_darwin(v6);
  v7 = sub_100041094();
  sub_10004113C(v7);
  JSONEncoder.init()();
  v8 = sub_1000055B0(&qword_1002AB660);
  v9 = (__n128 *)sub_1000410B0(v8);
  sub_100041194(v9, (__n128)xmmword_10021BBA0);
  sub_100041014((unint64_t *)&unk_1002B3390, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  sub_1000055B0(&qword_1002AB668);
  v10 = sub_100040FD0();
  sub_100041074(v10);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v0);
  type metadata accessor for UniversalControlDisplayLayout(0);
  sub_100041014((unint64_t *)&unk_1002B1EA0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplayLayout, (uint64_t)&protocol conformance descriptor for UniversalControlDisplayLayout);
  sub_100041110(v14);
  if (!v1)
  {
    v12 = v11;
    SHA256.init()();
    __asm { BR              X10 }
  }
  swift_release();
  sub_10003AF60();
}

uint64_t sub_100040CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10002641C();
  v14 = v13 - v12;
  v15 = sub_100040848(0, 16, a1, a2);
  sub_1000DF4FC(v15, v16);
  result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v9, 1, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v9, v10);
    v20 = UUID.uuid.getter(v18, v19);
    v21 = UniversalControlUUID.init(rawValue:)(v20, v20 >> 8, v20 >> 16, v20 >> 24, HIDWORD(v20), v20 >> 40, HIWORD(v20), HIBYTE(v20));
    v23 = v22;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
    *a3 = v21;
    a3[1] = v23;
  }
  return result;
}

unint64_t sub_100040EF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AB658;
  if (!qword_1002AB658)
  {
    v1 = sub_10000DCA0(&qword_1002AB650);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AB658);
  }
  return result;
}

uint64_t sub_100040F4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100040F5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

unint64_t sub_100040FD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B33A0;
  if (!qword_1002B33A0)
  {
    v1 = sub_10000DCA0(&qword_1002AB668);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B33A0);
  }
  return result;
}

uint64_t sub_100041014(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100041054@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for SHA256(0);
}

uint64_t sub_100041074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 96, v1, a1, v3, v2);
}

uint64_t sub_100041094()
{
  return type metadata accessor for JSONEncoder(0);
}

uint64_t sub_1000410B0(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(a1, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
}

uint64_t sub_1000410CC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1000410D8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_1000410E4(uint64_t a1)
{
  return SHA256Digest.withUnsafeBytes<A>(_:)(a1, 0);
}

uint64_t sub_1000410F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = v1;
  *(_QWORD *)(v2 - 104) = v0;
  return type metadata accessor for SHA256Digest(0);
}

uint64_t sub_100041108()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100041110(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v1);
}

uint64_t sub_10004111C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100041128(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 112) = result;
  return result;
}

uint64_t sub_10004113C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100041148()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_100041154()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_100041160()
{
  return 0;
}

uint64_t sub_100041188(uint64_t a1, uint64_t a2)
{
  return sub_10009A0AC(a1, a2);
}

uint64_t sub_100041194(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return static JSONEncoder.OutputFormatting.sortedKeys.getter();
}

uint64_t sub_1000411A0(uint64_t a1, uint64_t a2)
{
  return sub_10009A0AC(a1, a2);
}

BOOL ECXPCNull.init(xpcobject:)(uint64_t a1)
{
  xpc_type_t v2;
  uint64_t v3;

  swift_getObjectType(a1);
  v2 = OS_xpc_object.type.getter();
  v3 = XPC_TYPE_NULL.getter();
  swift_unknownObjectRelease(a1);
  return v2 != (xpc_type_t)v3;
}

BOOL sub_1000411F8@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = ECXPCNull.init(xpcobject:)(a1);
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for ECXPCNull()
{
  return &type metadata for ECXPCNull;
}

uint64_t sub_100041238()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SleepController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100041274();
  qword_1002B6D90 = result;
  return result;
}

uint64_t sub_100041274()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[6];

  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SleepController_layoutMonitor) = 0;
  v1 = sub_10009A610();
  v2 = (void *)objc_opt_self(FBSDisplayLayoutMonitorConfiguration);
  swift_retain(v1);
  v3 = objc_msgSend(v2, "configurationForDefaultMainDisplayMonitor");
  objc_msgSend(v3, "setNeedsUserInteractivePriority:", 1);
  v8[4] = sub_10004139C;
  v8[5] = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10004194C;
  v8[3] = &unk_100283960;
  v4 = _Block_copy(v8);
  objc_msgSend(v3, "setTransitionHandler:", v4);
  _Block_release(v4);
  v5 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v3);
  swift_release(v1);

  v6 = *(void **)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SleepController_layoutMonitor);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SleepController_layoutMonitor) = v5;

  return v1;
}

uint64_t sub_10004139C(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B0EC();
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = (_QWORD *)swift_allocObject(&unk_100283998, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_100041B14;
  v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_1002839B0;
  v14 = _Block_copy(aBlock);
  v15 = v27;
  v16 = a3;
  v17 = a1;
  v18 = a2;
  v19 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_10003224C();
  v21 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v22 = sub_10003228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

void sub_100041580(uint64_t a1, void *a2, void *a3)
{
  if (qword_1002A9830 != -1)
    swift_once(&qword_1002A9830, sub_100041238);
  sub_1000415EC(a1, a2, a3);
}

void sub_1000415EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t v37;
  uint64_t v38;

  if (a2)
  {
    v4 = v3;
    v6 = a2;
    v7 = objc_msgSend(v6, "displayBacklightLevel");
    v8 = (uint64_t)v7;
    if (a3)
    {
      v7 = (id)sub_100041B20(a3);
      if (v7)
      {
        v9 = v7;
        v10 = swift_bridgeObjectRetain(v7);
        v11 = Logger.logObject.getter(v10);
        v13 = static os_log_type_t.default.getter(v11, v12);
        if (os_log_type_enabled(v11, v13))
        {
          v34 = v6;
          v14 = (uint8_t *)swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          v37 = v33;
          *(_DWORD *)v14 = 136315138;
          v15 = swift_bridgeObjectRetain(v9);
          v16 = Set.description.getter(v15, &type metadata for String, &protocol witness table for String);
          v18 = v17;
          swift_bridgeObjectRelease(v9);
          v35 = sub_100006FCC(v16, v18, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v14 + 4, v14 + 12);
          swift_bridgeObjectRelease_n(v9, 2);
          swift_bridgeObjectRelease(v18);
          _os_log_impl((void *)&_mh_execute_header, v11, v13, "Transition for reasons: %s", v14, 0xCu);
          swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          v19 = v14;
          v6 = v34;
          swift_slowDealloc(v19, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v9, 2);
        }

      }
    }
    if (v8 == -1)
    {
      v28 = 0;
    }
    else if (v8 == 100)
    {
      v28 = 3;
    }
    else
    {
      if (v8)
      {
        v29 = Logger.logObject.getter(v7);
        v31 = static os_log_type_t.default.getter(v29, v30);
        if (os_log_type_enabled(v29, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v32 = 134217984;
          v37 = v8;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v32 + 4, v32 + 12);
          _os_log_impl((void *)&_mh_execute_header, v29, v31, "displayBacklightLevel = %ld", v32, 0xCu);
          swift_slowDealloc(v32, -1, -1);
        }

        goto LABEL_25;
      }
      if (a3)
      {
        v20 = sub_100041B20(a3);
        v21 = 1;
        if (v20)
        {
          v22 = v20;
          v23 = sub_1000055B0(&qword_1002AC9B0);
          inited = swift_initStackObject(v23, v36);
          *(_OWORD *)(inited + 16) = xmmword_10021DE60;
          *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBDisplayLayoutBacklightTransitionReasonLockButton);
          *(_QWORD *)(inited + 40) = v25;
          *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBDisplayLayoutBacklightTransitionReasonSmartCover);
          *(_QWORD *)(inited + 56) = v26;
          v27 = sub_10013DD2C(inited, v22);
          swift_bridgeObjectRelease(v22);
          swift_setDeallocating(inited);
          sub_100031E0C();
          if ((v27 & 1) != 0)
            v21 = 1;
          else
            v21 = 2;
        }
      }
      else
      {
        v21 = 1;
      }
      if (*(_BYTE *)(v4 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState) == 2)
      {
LABEL_25:

        return;
      }
      v28 = v21;
    }
    sub_10009A6B4(v28);
    goto LABEL_25;
  }
}

void sub_10004194C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, a3, a4);
  swift_release(v7);

}

void sub_1000419D4()
{
  uint64_t v0;

}

uint64_t sub_1000419E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100041A48()
{
  return type metadata accessor for SleepController(0);
}

uint64_t type metadata accessor for SleepController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002AB6A8;
  if (!qword_1002AB6A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SleepController);
  return result;
}

uint64_t sub_100041A88(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 152);
}

uint64_t sub_100041AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100041AD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100041AE0()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100041B14()
{
  uint64_t v0;

  sub_100041580(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100041B20(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "transitionReasons");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &protocol witness table for String);

  return v3;
}

void sub_100041B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1001A8B6C(a1);
    if ((v3 & 1) != 0)
      sub_1000432D4(v2);
  }
  sub_1000050D4();
}

uint64_t sub_100041BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (sub_1001A8BD8(a1), (v4 & 1) != 0))
    return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v3));
  else
    return 0;
}

void sub_100041C04(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = sub_1001A8C40(a1);
    if ((v2 & 1) != 0)
      sub_1000432D4(v1);
  }
  sub_1000050D4();
}

void sub_100041C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100041E98(a1, a2, a3, (uint64_t (*)(void))sub_1001A8C70);
}

void sub_100041C44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_1000055F0(a1, a2), (v7 & 1) != 0))
  {
    sub_1000432CC(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_1000050D4();
  }
}

void sub_100041C8C(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_1001A8CB8(), (v5 & 1) != 0))
  {
    sub_1000432CC(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_1000050D4();
  }
}

uint64_t sub_100041CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a3 + 16) && (sub_1000055F0(a1, a2), (v3 & 1) != 0))
  {
    v4 = sub_100043324();
    v5 = type metadata accessor for CompanionLinkDevice(v4);
    sub_1000432AC(v5, v6, type metadata accessor for CompanionLinkDevice);
    v7 = sub_100043298();
  }
  else
  {
    type metadata accessor for CompanionLinkDevice(0);
    v7 = sub_100043284();
  }
  return sub_100043270(v7, v8, v9, v10);
}

uint64_t sub_100041D30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_100043350(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t sub_100041D70@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a3 + 16) && (sub_100043350(a1, a2), (v7 & 1) != 0))
  {
    v8 = sub_100043324();
    v9 = type metadata accessor for UniversalControlDisplayLayout(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a4, v5 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
    v10 = sub_100043298();
  }
  else
  {
    type metadata accessor for UniversalControlDisplayLayout(0);
    v10 = sub_100043284();
  }
  return sub_100043270(v10, v11, v12, v13);
}

uint64_t sub_100041DD8(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 16) && (sub_1001A8D7C(), (v2 & 1) != 0))
  {
    v3 = sub_100043324();
    v4 = type metadata accessor for HotZone(v3);
    sub_1000432AC(v4, v5, type metadata accessor for HotZone);
    v6 = sub_100043298();
  }
  else
  {
    type metadata accessor for HotZone(0);
    v6 = sub_100043284();
  }
  return sub_100043270(v6, v7, v8, v9);
}

void sub_100041E34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  unint64_t v9;
  char v10;
  char v11;
  __int128 *v12;
  __int128 v13;

  v7 = 0uLL;
  if (*(_QWORD *)(a5 + 16))
  {
    v9 = sub_1001A8DEC(a1, a2, a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = 0;
      v12 = (__int128 *)(*(_QWORD *)(a5 + 56) + 32 * v9);
      v7 = *v12;
      v13 = v12[1];
    }
    else
    {
      v11 = 1;
      v13 = 0uLL;
      v7 = 0uLL;
    }
  }
  else
  {
    v11 = 1;
    v13 = 0uLL;
  }
  *(_OWORD *)a6 = v7;
  *(_OWORD *)(a6 + 16) = v13;
  *(_BYTE *)(a6 + 32) = v11;
  sub_1000050D4();
}

void sub_100041E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = a4();
    if ((v5 & 1) != 0)
      sub_1000432D4(v4);
  }
  sub_1000050D4();
}

uint64_t sub_100041ECC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_100043350(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_100041F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = sub_1001AAE3C();
  if ((v4 & 1) == 0)
    return 0;
  v5 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v3);
  v6 = *v5;
  v7 = (void *)v5[2];
  v8 = (void *)v5[3];
  swift_retain(*v5);
  v9 = v7;
  v10 = v8;
  return v6;
}

uint64_t WindowSceneController.Context.displayUUID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t WindowSceneController.Context.isMainDisplay.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

id WindowSceneController.Context.secureWindow.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

id WindowSceneController.Context.windowScene.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

uint64_t WindowSceneController.Context.__allocating_init(displayUUID:isMainDisplay:secureWindow:windowScene:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = sub_1000323DC(v5);
  WindowSceneController.Context.init(displayUUID:isMainDisplay:secureWindow:windowScene:)(a1, a2, a3, a4, a5);
  return v11;
}

uint64_t WindowSceneController.Context.init(displayUUID:isMainDisplay:secureWindow:windowScene:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return v5;
}

uint64_t WindowSceneController.Context.__allocating_init(secureWindow:windowScene:)(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = v2;
  v6 = objc_msgSend(a2, "_FBSScene");
  v7 = objc_msgSend(v6, "settings");

  v9 = sub_100043374(v8, "displayConfiguration");
  if (v9)
  {
    v10 = sub_1000430B4(v9);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = sub_10006E778(v10, v11);
  v14 = v13;
  if (v9)
  {
    v15 = objc_msgSend(v9, "isMainDisplay");

  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1000323DC(v3);
  WindowSceneController.Context.init(displayUUID:isMainDisplay:secureWindow:windowScene:)(v12, v14, v15, a1, (uint64_t)a2);
  return v16;
}

uint64_t WindowSceneController.Context.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t WindowSceneController.Context.__deallocating_deinit()
{
  uint64_t v0;

  WindowSceneController.Context.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

double WindowSceneController.contexts.getter()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v2, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

void WindowSceneController.add(secureWindow:windowScene:)(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v4 = v2;
  v38 = *v2;
  v7 = sub_10000E440();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000432FC();
  v9 = objc_msgSend(a2, "_sceneIdentifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  sub_10000B2F8((uint64_t)(v4 + 2), (uint64_t)v40, 32);
  v13 = v4[2];
  sub_1000432E0();
  sub_100041E98(v10, v12, v13, (uint64_t (*)(void))sub_1000055F0);
  v15 = v14;
  sub_100026860();
  sub_10000E50C();
  sub_1000269A0();
  if (v15)
  {
    sub_10000E50C();
  }
  else
  {
    v37 = v3;
    type metadata accessor for WindowSceneController.Context();
    v16 = a1;
    v17 = a2;
    v18 = WindowSceneController.Context.__allocating_init(secureWindow:windowScene:)((uint64_t)v16, v17);
    sub_100043140();
    ObservableObject<>.objectWillChange.getter(v38);
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8((uint64_t)(v4 + 2), (uint64_t)v40, 33);
    sub_1000432E0();
    swift_retain();
    sub_1001AAA48(v19, v10, v12);
    sub_100026860();
    sub_10000E50C();
    v20 = v10;
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v21 = sub_10000F6E4();
    sub_100006FB4(v21, (uint64_t)qword_1002B6EB0);
    v22 = v16;
    v23 = v17;
    swift_retain_n(v18, 2);
    sub_1000432E0();
    v24 = v22;
    v25 = v23;
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = sub_10000797C(42);
      v40[0] = sub_10000797C(96);
      *(_DWORD *)v29 = 136381443;
      sub_1000432E0();
      v39 = sub_100006FCC(v20, v12, v40);
      sub_10004327C((uint64_t)&v39, (uint64_t)v40, v30, v29 + 12);
      sub_1000103C8(v12);
      *(_WORD *)(v29 + 12) = 2082;
      sub_100043240();
      sub_100043344();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v37, v7);
      v39 = sub_100043334();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 14);
      sub_10000F644();
      sub_10000E50C();
      *(_WORD *)(v29 + 22) = 2080;
      objc_msgSend(v24, "frame");
      v31 = CGRect.description.getter();
      v39 = sub_1000432C0(v31, v32);
      sub_10004327C((uint64_t)&v39, (uint64_t)v40, v33, v29 + 32);

      sub_10000E594();
      *(_WORD *)(v29 + 32) = 2048;
      v34 = objc_msgSend(v25, "interfaceOrientation");

      v39 = (uint64_t)v34;
      sub_10004327C((uint64_t)&v39, (uint64_t)v40, v35, v29 + 42);

      sub_100043314((void *)&_mh_execute_header, v26, v36, "Added window scene: '%{private}s', display: %{public}s, frame: %s, orientation: %ld");
      sub_1000432E8((uint64_t)&type metadata for Any);
      sub_100007958(v29 + 34);
      sub_100007958(v29);

    }
    else
    {

      sub_10000F644();
      sub_100026AF4(v12);

    }
  }
  sub_10000E4E0();
}

void WindowSceneController.remove(windowScene:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v3 = *v1;
  v4 = sub_10000E440();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100043374(v6, "_sceneIdentifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  sub_10000B2F8((uint64_t)(v1 + 2), (uint64_t)v42, 32);
  v13 = v1[2];
  sub_10003B1A8();
  sub_100041E98(v10, v12, v13, (uint64_t (*)(void))sub_1000055F0);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_endAccess(v42);
    sub_100043140();
    ObservableObject<>.objectWillChange.getter(v3);
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8((uint64_t)(v1 + 2), (uint64_t)v42, 33);
    sub_1001AA3BC(v10, v12);
    sub_100026860();
    sub_10000B348();
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v16 = sub_10000F6E4();
    sub_100006FB4(v16, (uint64_t)qword_1002B6EB0);
    swift_retain_n(v15, 4);
    v17 = a1;
    sub_10003B1A8();
    v18 = v17;
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.default.getter(v19, v20);
    v22 = v21;
    if (os_log_type_enabled(v19, v21))
    {
      v23 = sub_10000797C(42);
      v40 = sub_10000797C(96);
      v42[0] = v40;
      *(_DWORD *)v23 = 136381443;
      HIDWORD(v39) = v22;
      sub_10003B1A8();
      v41 = sub_100006FCC(v10, v12, v42);
      sub_100043230(v41, v24, v25, v23 + 12);
      sub_1000103C8(v12);
      *(_WORD *)(v23 + 12) = 2082;
      sub_100043240();
      v26 = sub_100043344();
      v27 = v4;
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
      v41 = sub_100006FCC(v26, v29, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v23 + 14);
      sub_10000F644();
      *(_QWORD *)&v30 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v23 + 22) = 2080;
      objc_msgSend(*(id *)(v15 + 40), "frame", v30);
      v31 = CGRect.description.getter();
      v41 = sub_1000432C0(v31, v32);
      sub_100043230(v41, v33, v34, v23 + 32);
      sub_10000F644();
      sub_10000E594();
      *(_WORD *)(v23 + 32) = 2048;
      v35 = objc_msgSend(v18, "interfaceOrientation");

      v41 = (uint64_t)v35;
      sub_100043230(v36, v37, v38, v23 + 42);

      _os_log_impl((void *)&_mh_execute_header, v19, BYTE4(v39), "Removed window scene: '%{private}s', display: %{public}s, frame: %s, orientation: %ld", (uint8_t *)v23, 0x2Au);
      sub_1000432E8((uint64_t)&type metadata for Any);
      sub_100007958(v23 + 34);
      sub_100007958(v23);

    }
    else
    {

      swift_release_n(v15, 4);
      sub_100026AF4(v12);

    }
  }
  else
  {
    swift_endAccess(v42);
    swift_bridgeObjectRelease();
  }
  sub_10000E4E0();
}

Swift::Void __swiftcall WindowSceneController.update(windowScene:)(UIWindowScene windowScene)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39[3];

  v3 = v1;
  v5 = *v3;
  v6 = sub_10000E440();
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000432FC();
  v8 = -[objc_class _sceneIdentifier](windowScene.super.super.super.isa, "_sceneIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  sub_10000B2F8((uint64_t)(v3 + 2), (uint64_t)v39, 32);
  v12 = v3[2];
  sub_100043360();
  sub_100041E98(v9, v11, v12, (uint64_t (*)(void))sub_1000055F0);
  v14 = v13;
  sub_10000E594();
  if (v14)
  {
    swift_endAccess(v39);
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v15 = sub_10000F6E4();
    sub_100006FB4(v15, (uint64_t)qword_1002B6EB0);
    swift_retain_n(v14, 4);
    v16 = windowScene.super.super.super.isa;
    sub_100043360();
    v37 = v16;
    v17 = Logger.logObject.getter(v37);
    v19 = static os_log_type_t.default.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v36 = v5;
      v20 = sub_10000797C(42);
      v35 = sub_10000797C(96);
      v39[0] = v35;
      *(_DWORD *)v20 = 136381443;
      sub_100043360();
      v38 = sub_100006FCC(v9, v11, v39);
      sub_100043230(v38, v21, v22, v20 + 12);
      sub_1000103C8(v11);
      *(_WORD *)(v20 + 12) = 2082;
      v23 = UUID.init(uuid:)(*(unsigned __int8 *)(v14 + 16), *(unsigned __int8 *)(v14 + 17), *(unsigned __int8 *)(v14 + 18), *(unsigned __int8 *)(v14 + 19), *(unsigned __int8 *)(v14 + 20), *(unsigned __int8 *)(v14 + 21));
      UUID.uuidString.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
      v38 = sub_100043334();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v20 + 14);
      sub_100043368();
      sub_10000E50C();
      *(_WORD *)(v20 + 22) = 2080;
      objc_msgSend(*(id *)(v14 + 40), "frame");
      v24 = CGRect.description.getter();
      v38 = sub_1000432C0(v24, v25);
      sub_100043230(v38, v26, v27, v20 + 32);
      sub_100043368();
      v28 = sub_10000E594();
      *(_WORD *)(v20 + 32) = 2048;
      v29 = sub_100043374(v28, "interfaceOrientation");

      v38 = (uint64_t)v29;
      sub_100043230(v30, v31, v32, v20 + 42);

      sub_100043314((void *)&_mh_execute_header, v17, v33, "Updated window scene: '%{private}s', display: %{public}s, frame: %s, orientation: %ld");
      swift_arrayDestroy(v35, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v35);
      v34 = v20;
      v5 = v36;
      sub_100007958(v34);
    }
    else
    {

      swift_release_n(v14, 4);
      sub_100026AF4(v11);
      v17 = v37;

    }
    sub_100043140();
    ObservableObject<>.objectWillChange.getter(v5);
    sub_100043358();
    sub_10000FF50();
    sub_10000B348();
  }
  else
  {
    swift_endAccess(v39);
    sub_10000E594();
  }
}

uint64_t WindowSceneController.context(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22[24];
  _QWORD v23[5];
  char v24[16];
  uint64_t v25;
  uint64_t v26;
  char v27;

  sub_10004319C(a1, (uint64_t)v24);
  if ((v27 & 1) != 0)
  {
    return 0;
  }
  else
  {
    v2 = v25;
    v3 = v26;
    sub_10000B2F8(v1 + 16, (uint64_t)v22, 0);
    v20[1] = v20;
    v4 = *(_QWORD *)(v1 + 16);
    sub_10004307C(v4, v23);
    v5 = v23[0];
    v21 = v23[1];
    v6 = v23[3];
    v7 = v23[4];
    v8 = (unint64_t)(v23[2] + 64) >> 6;
    v20[0] = v4;
    result = swift_bridgeObjectRetain_n(v4, 2);
    if (!v7)
      goto LABEL_4;
LABEL_3:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v6 << 6);
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11 + 8);
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11);
      v18 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain(v16);
      swift_retain(v17);
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v18, v19, v2, v3))
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v20[0]);
        sub_10000FF50();
        return v17;
      }
      swift_release(v17);
      result = swift_bridgeObjectRelease(v16);
      if (v7)
        goto LABEL_3;
LABEL_4:
      v12 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if (v12 >= v8)
        goto LABEL_24;
      v13 = *(_QWORD *)(v21 + 8 * v12);
      v14 = v6 + 1;
      if (!v13)
      {
        v14 = v6 + 2;
        if (v6 + 2 >= v8)
          goto LABEL_24;
        v13 = *(_QWORD *)(v21 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 3;
          if (v6 + 3 >= v8)
            goto LABEL_24;
          v13 = *(_QWORD *)(v21 + 8 * v14);
          if (!v13)
          {
            v14 = v6 + 4;
            if (v6 + 4 >= v8)
              goto LABEL_24;
            v13 = *(_QWORD *)(v21 + 8 * v14);
            if (!v13)
            {
              v14 = v6 + 5;
              if (v6 + 5 >= v8)
                goto LABEL_24;
              v13 = *(_QWORD *)(v21 + 8 * v14);
              if (!v13)
              {
                v15 = v6 + 6;
                while (v15 < v8)
                {
                  v13 = *(_QWORD *)(v21 + 8 * v15++);
                  if (v13)
                  {
                    v14 = v15 - 1;
                    goto LABEL_19;
                  }
                }
LABEL_24:
                sub_10000FF50();
                swift_bridgeObjectRelease(v20[0]);
                return 0;
              }
            }
          }
        }
      }
LABEL_19:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v6 = v14;
    }
    __break(1u);
  }
  return result;
}

uint64_t WindowSceneController.context(for:)(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  char v18[24];
  _QWORD v19[5];

  sub_10000B2F8(v1 + 16, (uint64_t)v18, 0);
  v3 = *(_QWORD *)(v1 + 16);
  sub_10004307C(v3, v19);
  v4 = v19[0];
  v5 = v19[1];
  v6 = v19[3];
  v7 = v19[4];
  v8 = (unint64_t)(v19[2] + 64) >> 6;
  result = swift_bridgeObjectRetain_n(v3, 2);
  if (!v7)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v11 = v10 | (v6 << 6);
  while (1)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
    v17 = *(void **)(v16 + 40);
    sub_1000432E0();
    if (objc_msgSend(v17, "_contextId", swift_retain().n128_f64[0]) == a1)
    {
      sub_10000E50C();
      swift_bridgeObjectRelease();
      sub_1000269A0();
      return v16;
    }
    sub_10000FF50();
    result = sub_10000E50C();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v12 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v12 >= v8)
      goto LABEL_23;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    v14 = v6 + 1;
    if (!v13)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v8)
        goto LABEL_23;
      v13 = *(_QWORD *)(v5 + 8 * v14);
      if (!v13)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v8)
          goto LABEL_23;
        v13 = *(_QWORD *)(v5 + 8 * v14);
        if (!v13)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v8)
            goto LABEL_23;
          v13 = *(_QWORD *)(v5 + 8 * v14);
          if (!v13)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v8)
              goto LABEL_23;
            v13 = *(_QWORD *)(v5 + 8 * v14);
            if (!v13)
            {
              v15 = v6 + 6;
              while (v15 < v8)
              {
                v13 = *(_QWORD *)(v5 + 8 * v15++);
                if (v13)
                {
                  v14 = v15 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              sub_1000269A0();
              swift_bridgeObjectRelease();
              return 0;
            }
          }
        }
      }
    }
LABEL_18:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v6 = v14;
  }
  __break(1u);
  return result;
}

uint64_t WindowSceneController.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t WindowSceneController.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100043050@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10004307C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1000430B4(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "hardwareIdentifier");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t type metadata accessor for WindowSceneController.Context()
{
  return objc_opt_self(_TtCC13EnsembleAgent21WindowSceneController7Context);
}

unint64_t sub_100043140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AB770;
  if (!qword_1002AB770)
  {
    v1 = type metadata accessor for WindowSceneController();
    result = swift_getWitnessTable(&protocol conformance descriptor for WindowSceneController, v1);
    atomic_store(result, (unint64_t *)&qword_1002AB770);
  }
  return result;
}

uint64_t type metadata accessor for WindowSceneController()
{
  return objc_opt_self(_TtC13EnsembleAgent21WindowSceneController);
}

uint64_t sub_10004319C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AB778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1000431E4()
{
  return &protocol witness table for ObservableObjectPublisher;
}

void sub_1000431F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_1000050D4();
}

uint64_t sub_100043230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v5, v4, a4);
}

uint64_t sub_100043240()
{
  unsigned __int8 *v0;

  return UUID.init(uuid:)(v0[16], v0[17], v0[18], v0[19], v0[20], v0[21], v0[22], v0[23]);
}

uint64_t sub_100043270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, a3, a4);
}

uint64_t sub_10004327C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_100043284()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100043298()
{
  uint64_t v0;

  return v0;
}

void sub_1000432AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000431F0(v5 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v4, v3, a3);
}

uint64_t sub_1000432C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t sub_1000432CC(uint64_t a1, uint64_t a2)
{
  return sub_100007918(a1, a2);
}

uint64_t sub_1000432D4(uint64_t a1)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1));
}

uint64_t sub_1000432E0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000432E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(*(_QWORD *)(v1 - 120), 3, a1 + 8);
}

void sub_100043314(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  uint64_t v5;

  _os_log_impl(a1, a2, (os_log_type_t)*(_DWORD *)(v5 - 148), a4, v4, 0x2Au);
}

uint64_t sub_100043324()
{
  return 0;
}

uint64_t sub_100043334()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_100043344()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

uint64_t sub_100043350(unint64_t a1, uint64_t a2)
{
  return sub_1001A8C70(a1, a2);
}

void sub_100043358()
{
  ObservableObjectPublisher.send()();
}

uint64_t sub_100043360()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100043368()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

id sub_100043374(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10004337C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for LoginStatusController();
  v1 = swift_allocObject(v0, 36, 7);
  result = sub_1000433B4();
  qword_1002B6D98 = v1;
  return result;
}

uint64_t sub_1000433B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10002641C();
  v5 = v4 - v3;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  sub_10002641C();
  v9 = v8 - v7;
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  sub_10002641C();
  v13 = v12 - v11;
  sub_10000B0EC();
  v14 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100041014((unint64_t *)&unk_1002AC980, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_1000055B0((uint64_t *)&unk_1002AB9C0);
  v17 = sub_100043BDC((unint64_t *)&unk_1002AC990, (uint64_t *)&unk_1002AB9C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v6, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x80000001002539D0, v13, v9, v5, 0);
  *(_DWORD *)(v1 + 32) = -1;
  swift_release(v1);
  *(_BYTE *)(v1 + 16) = 0;
  v18 = (const char *)kSBSLockStateNotifyKey;
  v19 = swift_retain(v1);
  v20 = static OS_dispatch_queue.main.getter(v19);
  v21 = swift_allocObject(&unk_100283A18, 24, 7);
  swift_weakInit(v21 + 16, v1);
  aBlock[4] = sub_100043BB4;
  v26 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C3EEC;
  aBlock[3] = &unk_100283A30;
  v22 = _Block_copy(aBlock);
  swift_release(v26);
  swift_beginAccess(v1 + 32, aBlock, 33, 0);
  notify_register_dispatch(v18, (int *)(v1 + 32), v20, v22);
  swift_endAccess(aBlock);
  _Block_release(v22);

  sub_1000436A8();
  swift_release(v1);
  return v1;
}

uint64_t sub_100043654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1000436A8();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000436A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 24);
  aBlock[4] = sub_100043BD4;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100283A58;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100041014((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v13 = sub_100043BDC((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_100043874()
{
  uint64_t v0;

}

uint64_t sub_10004387C()
{
  uint64_t v0;
  int v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 32, v3, 0, 0);
  v1 = *(_DWORD *)(v0 + 32);
  if (v1 != -1)
    notify_cancel(v1);

  return v0;
}

uint64_t sub_1000438C4()
{
  uint64_t v0;

  sub_10004387C();
  return swift_deallocClassInstance(v0, 36, 7);
}

uint64_t type metadata accessor for LoginStatusController()
{
  return objc_opt_self(_TtC13EnsembleAgent21LoginStatusController);
}

uint64_t sub_100043904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (SBSGetScreenLockStatus(0))
    v9 = 2;
  else
    v9 = 1;
  sub_10000B0EC();
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = swift_allocObject(&unk_100283A18, 24, 7);
  swift_weakInit(v11 + 16, a1);
  v12 = swift_allocObject(&unk_100283A90, 25, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = v9;
  aBlock[4] = sub_100043C40;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100283AA8;
  v13 = _Block_copy(aBlock);
  v14 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100041014((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v17 = sub_100043BDC((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100043B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100105FCC(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100043B90()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043BB4(uint64_t a1)
{
  uint64_t v1;

  return sub_100043654(a1, v1);
}

uint64_t sub_100043BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100043BCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100043BD4()
{
  uint64_t v0;

  return sub_100043904(v0);
}

uint64_t sub_100043BDC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000DCA0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100043C1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100043C40()
{
  uint64_t v0;

  return sub_100043B34(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100043C5C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  id v39[2];

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(ITIdleTimerState), "sharedInstance");
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(0xE000000000000000);
  v39[0] = (id)0xD00000000000001BLL;
  v39[1] = (id)0x8000000100253A40;
  if (a1)
  {
    v5 = sub_1000442D4(a1);
    if (v8)
      v9 = v6;
    else
      v9 = v7;
  }
  else
  {
    v9 = 0xE400000000000000;
    v5 = 1702194279;
  }
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v5);
  sub_10000E410();
  v11 = String._bridgeToObjectiveC()();
  sub_10000E410();
  v39[0] = 0;
  v12 = objc_msgSend(v4, "newAssertionToDisableIdleTimerForReason:error:", v11, v39);

  v13 = v39[0];
  if (v12)
  {
    v37 = a1;
    v39[0] = v12;
    v14 = v13;
    swift_unknownObjectRetain(v12);
    v15 = sub_1000055B0(&qword_1002ABB88);
    v36 = String.init<A>(describing:)(v39, v15);
    v17 = v16;
    if (qword_1002A9860 != -1)
      swift_once(&qword_1002A9860, sub_1000683B4);
    v18 = type metadata accessor for Logger(0);
    sub_100006FB4(v18, (uint64_t)qword_1002AC6A0);
    v19 = swift_bridgeObjectRetain_n(v17, 2);
    v20 = Logger.logObject.getter(v19);
    v22 = static os_log_type_t.default.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v35 = v2;
      v23 = swift_slowAlloc(22, -1);
      v24 = (void *)swift_slowAlloc(64, -1);
      v39[0] = v24;
      *(_DWORD *)v23 = 136315394;
      if (v37)
      {
        v25 = sub_1000442D4(v37);
        if (v8)
          v28 = v26;
        else
          v28 = v27;
      }
      else
      {
        v28 = 0xE400000000000000;
        v25 = 1702194279;
      }
      v38 = sub_100006FCC(v25, v28, (uint64_t *)v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v23 + 4, v23 + 12);
      sub_10000E410();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain(v17);
      v32 = v36;
      v38 = sub_100006FCC(v36, v17, (uint64_t *)v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Took Platform Assertion: '%s', %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      sub_100007958((uint64_t)v24);
      sub_100007958(v23);

      v2 = v35;
    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
      v32 = v36;
    }
    v33 = swift_allocObject(&unk_100283AF0, 56, 7);
    *(_QWORD *)(v33 + 16) = v12;
    *(_QWORD *)(v33 + 24) = v2;
    *(_BYTE *)(v33 + 32) = v37;
    *(_QWORD *)(v33 + 40) = v32;
    *(_QWORD *)(v33 + 48) = v17;
    v34 = type metadata accessor for AnyCancellable(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    swift_retain(v2);
    return AnyCancellable.init(_:)(sub_1000442C4, v33);
  }
  else
  {
    v29 = v39[0];
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow(v30);
  }
}

void sub_100044014(void *a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  objc_msgSend(a1, "invalidate");
  if (qword_1002A9860 != -1)
    swift_once(&qword_1002A9860, sub_1000683B4);
  v8 = type metadata accessor for Logger(0);
  sub_100006FB4(v8, (uint64_t)qword_1002AC6A0);
  v9 = swift_bridgeObjectRetain_n(a5, 2);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v18 = v14;
    *(_DWORD *)v13 = 136315394;
    if (a3)
    {
      if (a3 == 1)
        v15 = 0xD000000000000013;
      else
        v15 = 0x6974634172657375;
      if (a3 == 1)
        v16 = 0x8000000100253A60;
      else
        v16 = 0xEC00000079746976;
    }
    else
    {
      v16 = 0xE400000000000000;
      v15 = 1702194279;
    }
    v17 = sub_100006FCC(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain(a5);
    v17 = sub_100006FCC(a4, a5, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Released Platform Assertion: '%s', %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
  }
}

uint64_t sub_100044254()
{
  uint64_t v0;

  v0 = sub_100067E58();
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t type metadata accessor for DisplaySleepAssertionController()
{
  return objc_opt_self(_TtC13EnsembleAgent31DisplaySleepAssertionController);
}

uint64_t sub_100044290()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000442C4()
{
  uint64_t v0;

  sub_100044014(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000442D4@<X0>(int a1@<W8>)
{
  uint64_t v1;

  if (a1 == 1)
    return v1;
  else
    return 0x6974634172657375;
}

__n128 Transform.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

CGPath *static Path.Builder.buildBlock(_:)(uint64_t a1)
{
  CGPath *Mutable;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  _BYTE v16[40];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];

  Mutable = CGPathCreateMutable();
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v5 = 1.0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1.0;
    do
    {
      sub_1000445C0(v4, (uint64_t)v17);
      sub_1000445C0((uint64_t)v17, (uint64_t)v16);
      v11 = sub_1000055B0(&qword_1002AAF48);
      if (swift_dynamicCast(v15, v16, v11, &type metadata for Transform, 6))
      {
        v10 = *(double *)v15;
        v9 = v15[1];
        v8 = v15[2];
        v5 = *(double *)&v15[3];
        v7 = v15[4];
        v6 = v15[5];
      }
      else
      {
        v12 = v18;
        v13 = v19;
        sub_10000DBE4(v17, v18);
        *(double *)v20 = v10;
        v20[1] = v9;
        v20[2] = v8;
        *(double *)&v20[3] = v5;
        v20[4] = v7;
        v20[5] = v6;
        (*(void (**)(CGPath *, _QWORD *, uint64_t, uint64_t))(v13 + 16))(Mutable, v20, v12, v13);
      }
      sub_100005988(v17);
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
  }
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

uint64_t sub_100044468()
{
  uint64_t (*v0)(uint64_t *);
  uint64_t v2;

  sub_100047440();
  return v0(&v2);
}

uint64_t sub_100044498()
{
  double *v0;
  _QWORD v2[6];

  v2[0] = 0x3FF0000000000000;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0x3FF0000000000000;
  v2[4] = 0;
  v2[5] = 0;
  return CGMutablePathRef.addArc(tangent1End:tangent2End:radius:transform:)(v2, *v0, v0[1], v0[2], v0[3], v0[4]);
}

uint64_t sub_1000444E4()
{
  double *v0;
  _QWORD v2[6];

  v2[0] = 0x3FF0000000000000;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0x3FF0000000000000;
  v2[4] = 0;
  v2[5] = 0;
  return CGMutablePathRef.addCurve(to:control1:control2:transform:)(v2, *v0, v0[1], v0[2], v0[3], v0[4], v0[5]);
}

void Transform.apply(to:transform:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6C706D6920746F4ELL, 0xEF6465746E656D65, "EnsembleAgent/Path.swift", 24, 2, 163, 0);
  __break(1u);
}

Swift::Void __swiftcall _PathBuilderProtocol.apply(to:)(CGMutablePathRef to)
{
  uint64_t v1;

  sub_100047440();
  (*(void (**)(void))(v1 + 16))();
}

uint64_t sub_1000445C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void Move.apply(to:transform:)(uint64_t a1, uint64_t a2)
{
  CGMutablePathRef.move(to:transform:)(a2);
  sub_1000050D4();
}

uint64_t sub_100044624()
{
  return sub_100044468();
}

void sub_100044644(uint64_t a1, uint64_t a2)
{
  Move.apply(to:transform:)(a1, a2);
}

void Line.apply(to:transform:)(uint64_t a1, uint64_t a2)
{
  CGMutablePathRef.addLine(to:transform:)(a2);
  sub_1000050D4();
}

uint64_t sub_10004466C()
{
  return sub_100044468();
}

void sub_10004468C(uint64_t a1, uint64_t a2)
{
  Line.apply(to:transform:)(a1, a2);
}

void Arc.apply(to:transform:)(uint64_t a1, uint64_t a2)
{
  double *v2;

  CGMutablePathRef.addArc(tangent1End:tangent2End:radius:transform:)(a2, *v2, v2[1], v2[2], v2[3], v2[4]);
  sub_1000050D4();
}

uint64_t sub_1000446C8()
{
  return sub_100044498();
}

void Curve.apply(to:transform:)(uint64_t a1, uint64_t a2)
{
  double *v2;

  CGMutablePathRef.addCurve(to:control1:control2:transform:)(a2, *v2, v2[1], v2[2], v2[3], v2[4], v2[5]);
  sub_1000050D4();
}

uint64_t sub_100044734()
{
  return sub_1000444E4();
}

void sub_100044770()
{
  Transform.apply(to:transform:)();
}

void sub_1000447A8()
{
  Transform.apply(to:transform:)();
}

uint64_t sub_1000447B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a2);
  return 1;
}

uint64_t sub_1000447D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  char v13;

  if (a1 == 0x6F506F5465766F6DLL && a2 == 0xEB00000000746E69)
  {
    v5 = 0xEB00000000746E69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F506F5465766F6DLL, 0xEB00000000746E69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F506F54656E696CLL && a2 == 0xEB00000000746E69)
  {
    v8 = 0xEB00000000746E69;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F506F54656E696CLL, 0xEB00000000746E69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100253B00;
    if (a2 == 0x8000000100253B00)
      goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100253B00, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x506F546576727563 && a2 == 0xEC000000746E696FLL)
  {
    v11 = 0xEC000000746E696FLL;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x506F546576727563, 0xEC000000746E696FLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x62755365736F6C63 && a2 == 0xEC00000068746170)
  {
    swift_bridgeObjectRelease(0xEC00000068746170);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x62755365736F6C63, 0xEC00000068746170, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t static ReportID.pointer.getter()
{
  return 5;
}

uint64_t sub_100044A3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100044A78 + 4 * byte_10021DFA0[a1]))(0x6F506F5465766F6DLL, 0xEB00000000746E69);
}

uint64_t sub_100044A78()
{
  return 0x6F506F54656E696CLL;
}

unint64_t sub_100044A8C()
{
  return 0xD000000000000010;
}

uint64_t sub_100044AA8()
{
  return 0x506F546576727563;
}

uint64_t sub_100044AC8()
{
  return 0x62755365736F6C63;
}

uint64_t sub_100044AE8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 12895 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(12895, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void _s13EnsembleAgent14PasteboardItemC17PresentationStyleO9hashValueSivg_0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_10000E5C0(a1);
  Hasher._combine(_:)(v1);
  sub_10004740C();
  sub_10000E59C();
}

unint64_t sub_100044C20(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 8) + 12383;
}

void sub_100044C34()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_100044C58()
{
  return 12383;
}

uint64_t sub_100044C64(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_100044CD0(uint64_t a1)
{
  sub_10000E5C0(a1);
  sub_100047454();
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_100044CF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100044DB8(char a1)
{
  if ((a1 & 1) != 0)
    return 12639;
  else
    return 12383;
}

void sub_100044DD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  _BYTE v22[104];

  v13 = sub_1000055B0(&qword_1002ABC08);
  v12[5] = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v12[4] = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000055B0(&qword_1002ABC10);
  v12[2] = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v16 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000055B0(&qword_1002ABC18);
  v12[1] = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v14 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000055B0(&qword_1002ABC20);
  v12[3] = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v6 = sub_1000055B0(&qword_1002ABC28);
  __chkstk_darwin(v6);
  v20 = sub_1000055B0(&qword_1002ABC30);
  v18 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v9 = a1[4];
  sub_10000DBE4(a1, v10);
  v11 = sub_1000469B8();
  v19 = v8;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Path.Element.CodingKeys, &type metadata for Path.Element.CodingKeys, v11, v10, v9);
  sub_100046998(v21, (uint64_t)v22);
  __asm { BR              X10 }
}

uint64_t sub_100045034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(v3 - 176) = *(_OWORD *)(v3 - 232);
  *(_BYTE *)(v3 - 256) = 0;
  sub_100046AE4();
  v4 = *(_QWORD *)(v3 - 280);
  v5 = *(_QWORD *)(v3 - 288);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Path.Element.MoveToPointCodingKeys, v3 - 256, v4, &type metadata for Path.Element.MoveToPointCodingKeys);
  *(_OWORD *)(v3 - 256) = *(_OWORD *)(v3 - 176);
  type metadata accessor for CGPoint(0);
  v7 = v6;
  v8 = sub_100046B20(&qword_1002AEF00, (uint64_t)&protocol conformance descriptor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 256, v9, v1, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 296) + 8))(v5, v4);
}

void sub_10004540C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 - 256) = 4;
  sub_1000469F4();
  v1 = *(_QWORD *)(v0 - 352);
  v2 = *(_QWORD *)(v0 - 280);
  v3 = *(_QWORD *)(v0 - 288);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Path.Element.CloseSubpathCodingKeys, v0 - 256, v2, &type metadata for Path.Element.CloseSubpathCodingKeys);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 344) + 8))(v1, *(_QWORD *)(v0 - 336));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 296) + 8))(v3, v2);
  JUMPOUT(0x1000453DCLL);
}

uint64_t sub_100045490@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;

  v45 = a2;
  v3 = sub_1000055B0(&qword_1002ABB98);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  __chkstk_darwin(v3);
  *(_QWORD *)&v47 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1000055B0(&qword_1002ABBA0);
  v41 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v50 = sub_1000055B0(&qword_1002ABBA8);
  v40 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v48 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1000055B0(&qword_1002ABBB0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v46 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000055B0(&qword_1002ABBB8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000055B0(&qword_1002ABBC0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  v52 = a1;
  sub_10000DBE4(a1, v17);
  v18 = sub_1000469B8();
  v19 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Path.Element.CodingKeys, &type metadata for Path.Element.CodingKeys, v18, v17, v16);
  if (!v19)
  {
    v37[2] = v11;
    v37[0] = v9;
    v37[1] = v8;
    v38 = v13;
    v53 = v15;
    v20 = KeyedDecodingContainer.allKeys.getter(v12);
    v21 = v20;
    v22 = *(_QWORD *)(v20 + 16);
    v23 = v12;
    if (v22)
    {
      v24 = *(unsigned __int8 *)(v20 + 32);
      v25 = sub_1000EDBD0(1, v22, v20, v20 + 32, 0, (2 * v22) | 1);
      v27 = v26;
      v29 = v28;
      swift_bridgeObjectRelease();
      v21 = v25;
      if (v27 == v29 >> 1)
        __asm { BR              X9 }
      v23 = v12;
    }
    v30 = type metadata accessor for DecodingError(0);
    swift_allocError(v30, &protocol witness table for DecodingError, 0, 0);
    v32 = v31;
    sub_1000055B0(&qword_1002ABBD0);
    *v32 = &type metadata for Path.Element;
    v33 = v53;
    v34 = KeyedDecodingContainer.codingPath.getter(v23);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v34, 0xD00000000000002BLL, 0x8000000100253AD0, 0);
    v35 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
    swift_willThrow(v35);
    swift_unknownObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v23);
  }
  return sub_100005988(v52);
}

void sub_100045904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v3 - 112) = 1;
  sub_100046AA8();
  v4 = *(_QWORD *)(v3 - 232);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Path.Element.LineToPointCodingKeys, v3 - 112, v2, &type metadata for Path.Element.LineToPointCodingKeys);
  if (v0)
  {
    swift_unknownObjectRelease(v1);
    JUMPOUT(0x1000458D0);
  }
  type metadata accessor for CGPoint(0);
  v6 = v5;
  sub_100046B20(&qword_1002ABBE8, (uint64_t)&protocol conformance descriptor for CGPoint);
  v7 = *(_QWORD *)(v3 - 264);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v8, v7, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 288) + 8))(v4, v7);
  swift_unknownObjectRelease(v1);
  JUMPOUT(0x100045D2CLL);
}

uint64_t sub_100045E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000447B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100045E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000469F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045EBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000469F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100045EE4()
{
  unsigned __int8 *v0;

  _s13EnsembleAgent14PasteboardItemC17PresentationStyleO9hashValueSivg_0(*v0);
}

uint64_t sub_100045F00()
{
  unsigned __int8 *v0;

  return sub_100044A3C(*v0);
}

uint64_t sub_100045F08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000447D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100045F2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.pointer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100045F50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000469B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045F78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000469B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100045FA0(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_10004740C();
  sub_10000E59C();
}

unint64_t sub_100045FD4()
{
  unsigned __int8 *v0;

  return sub_100044C20(*v0);
}

uint64_t sub_100045FDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100044AE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100046000(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046A30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046A30();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100046054(uint64_t a1)
{
  sub_100044CD0(a1);
}

uint64_t sub_100046074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100044C64(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10004609C()
{
  return HIDServicePropertyKey.intValue.getter();
}

uint64_t sub_1000460B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static ReportID.keyboard.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000460DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046AA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046104(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046AA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10004612C(uint64_t a1)
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, a1);
  sub_100047454();
  sub_10004740C();
  sub_10000E59C();
}

uint64_t sub_100046154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046AE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004617C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046AE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000461A4()
{
  char *v0;

  return sub_100044DB8(*v0);
}

uint64_t sub_1000461AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100044CF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000461D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046A6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000461F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046A6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100046220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[3];

  result = sub_100045490(a1, (uint64_t)v5);
  if (!v2)
    return sub_100046998(v5, a2);
  return result;
}

void sub_100046264(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v3[56];

  sub_100046998(v1, (uint64_t)v3);
  sub_100044DD0(a1);
}

uint64_t Path.encode(to:)(_QWORD *a1, const CGPath *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[6];
  uint64_t v11;
  _QWORD v12[5];

  sub_100047460(a1);
  dispatch thunk of Encoder.unkeyedContainer()(v12, v2, v3);
  v11 = 0;
  v5 = sub_100047434((uint64_t)&unk_100283B30);
  *(_QWORD *)(v5 + 16) = v12;
  *(_QWORD *)(v5 + 24) = &v11;
  v6 = sub_100047434((uint64_t)&unk_100283B58);
  *(_QWORD *)(v6 + 16) = sub_100046540;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_1000252CC;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10004654C;
  v10[3] = &unk_100283B70;
  v7 = _Block_copy(v10);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(a2, v7);
  _Block_release(v7);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v6, "", 83, 243, 36, 1);
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v11)
    {
      v9 = swift_errorRetain(v11);
      swift_willThrow(v9);
      swift_errorRelease(v11);
    }
    sub_100005988(v12);
    return swift_release();
  }
  return result;
}

uint64_t sub_100046428(uint64_t result, uint64_t a2)
{
  __int128 *v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v2 = *(__int128 **)(result + 8);
  switch(*(_DWORD *)result)
  {
    case 0:
      v10 = *v2;
      v11 = 0u;
      v12 = 0u;
      v13 = 0;
      goto LABEL_8;
    case 1:
      v10 = *v2;
      v11 = 0u;
      v12 = 0u;
      v3 = 1;
      goto LABEL_7;
    case 2:
      v4 = v2[1];
      v10 = *v2;
      v11 = v4;
      v12 = 0uLL;
      v3 = 2;
      goto LABEL_7;
    case 3:
      v5 = v2[1];
      v6 = v2[2];
      v10 = *v2;
      v11 = v5;
      v12 = v6;
      v3 = 3;
      goto LABEL_7;
    case 4:
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      v3 = 4;
LABEL_7:
      v13 = v3;
LABEL_8:
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a2 + 32);
      sub_10003FEF8(a2, v7);
      v9 = sub_100046B60();
      result = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v10, &type metadata for Path.Element, v9, v7, v8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100046540(uint64_t a1)
{
  uint64_t v1;

  return sub_100046428(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10004654C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t sub_100046570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046580(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100046588(_QWORD *a1)
{
  const CGPath **v1;

  return Path.encode(to:)(a1, *v1);
}

CGPath *Path.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  CGPath *Mutable;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD *v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  uint64_t v29;
  _QWORD v30[6];
  _QWORD *v31;

  sub_100047460(a1);
  dispatch thunk of Decoder.unkeyedContainer()(v23, Mutable, v3);
  if (v1)
  {
    sub_100005988(a1);
  }
  else
  {
    Mutable = CGPathCreateMutable();
    v31 = v30;
    while (2)
    {
      v5 = v24;
      v6 = v25;
      sub_10003FEF8((uint64_t)v23, v24);
      v7 = sub_1000467E0();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(&v16, &type metadata for Path.Element, &type metadata for Path.Element, v7, v5, v6);
      switch(v22)
      {
        case 0:
          v26[1] = 0;
          v26[2] = 0;
          v26[0] = 0x3FF0000000000000;
          v26[3] = 0x3FF0000000000000;
          v26[4] = 0;
          v26[5] = 0;
          CGMutablePathRef.move(to:transform:)(v26);
          continue;
        case 1:
          v27[1] = 0;
          v27[2] = 0;
          v27[0] = 0x3FF0000000000000;
          v27[3] = 0x3FF0000000000000;
          v27[4] = 0;
          v27[5] = 0;
          CGMutablePathRef.addLine(to:transform:)(v27);
          continue;
        case 2:
          v28[1] = 0;
          v28[2] = 0;
          v28[0] = 0x3FF0000000000000;
          v28[3] = 0x3FF0000000000000;
          v28[4] = 0;
          v28[5] = 0;
          CGMutablePathRef.addQuadCurve(to:control:transform:)(v28, v16, v17, v18, v19);
          continue;
        case 3:
          v8 = v20;
          v9 = v21;
          v10 = v16;
          v11 = v17;
          v12 = v18;
          v13 = v19;
          v14 = v31;
          *v31 = 0;
          v14[1] = 0;
          v29 = 0x3FF0000000000000;
          v30[2] = 0x3FF0000000000000;
          v30[3] = 0;
          v30[4] = 0;
          CGMutablePathRef.addCurve(to:control1:control2:transform:)(&v29, v10, v11, v12, v13, v8, v9);
          continue;
        case 4:
          CGPathCloseSubpath(Mutable);
          continue;
        default:
          sub_100005988(v23);
          sub_100005988(a1);
          break;
      }
      break;
    }
  }
  return Mutable;
}

unint64_t sub_1000467E0()
{
  unint64_t result;

  result = qword_1002ABB90;
  if (!qword_1002ABB90)
  {
    result = swift_getWitnessTable(&unk_10021E100, &type metadata for Path.Element);
    atomic_store(result, (unint64_t *)&qword_1002ABB90);
  }
  return result;
}

CGPath *sub_10004681C@<X0>(_QWORD *a1@<X0>, CGPath **a2@<X8>)
{
  uint64_t v2;
  CGPath *result;

  result = Path.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void type metadata accessor for Move()
{
  sub_10003B1DC();
}

void type metadata accessor for Line()
{
  sub_10003B1DC();
}

void type metadata accessor for Arc()
{
  sub_10003B1DC();
}

void type metadata accessor for Curve()
{
  sub_10003B1DC();
}

void type metadata accessor for Transform()
{
  sub_10003B1DC();
}

void type metadata accessor for Path()
{
  sub_10003B1DC();
}

void type metadata accessor for Path.Builder()
{
  sub_10003B1DC();
}

__n128 initializeWithCopy for Path.Element(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Path.Element(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      if (v3 <= 4)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Path.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_100046948(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_100046960(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element()
{
  return &type metadata for Path.Element;
}

uint64_t sub_100046998(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1000469B8()
{
  unint64_t result;

  result = qword_1002ABBC8;
  if (!qword_1002ABBC8)
  {
    result = swift_getWitnessTable(&unk_10021E750, &type metadata for Path.Element.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABBC8);
  }
  return result;
}

unint64_t sub_1000469F4()
{
  unint64_t result;

  result = qword_1002ABBD8;
  if (!qword_1002ABBD8)
  {
    result = swift_getWitnessTable(&unk_10021E700, &type metadata for Path.Element.CloseSubpathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABBD8);
  }
  return result;
}

unint64_t sub_100046A30()
{
  unint64_t result;

  result = qword_1002ABBE0;
  if (!qword_1002ABBE0)
  {
    result = swift_getWitnessTable(&unk_10021E6B0, &type metadata for Path.Element.CurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABBE0);
  }
  return result;
}

unint64_t sub_100046A6C()
{
  unint64_t result;

  result = qword_1002ABBF0;
  if (!qword_1002ABBF0)
  {
    result = swift_getWitnessTable(&unk_10021E660, &type metadata for Path.Element.QuadCurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABBF0);
  }
  return result;
}

unint64_t sub_100046AA8()
{
  unint64_t result;

  result = qword_1002ABBF8;
  if (!qword_1002ABBF8)
  {
    result = swift_getWitnessTable(&unk_10021E610, &type metadata for Path.Element.LineToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABBF8);
  }
  return result;
}

unint64_t sub_100046AE4()
{
  unint64_t result;

  result = qword_1002ABC00;
  if (!qword_1002ABC00)
  {
    result = swift_getWitnessTable(&unk_10021E5C0, &type metadata for Path.Element.MoveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC00);
  }
  return result;
}

uint64_t sub_100046B20(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGPoint(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100046B60()
{
  unint64_t result;

  result = qword_1002ABC38;
  if (!qword_1002ABC38)
  {
    result = swift_getWitnessTable(&unk_10021E0D8, &type metadata for Path.Element);
    atomic_store(result, (unint64_t *)&qword_1002ABC38);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PasteboardDataSession.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Path.Element.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100046C70 + 4 * byte_10021DFBE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100046CA4 + 4 * byte_10021DFB9[v4]))();
}

uint64_t sub_100046CA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046CAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046CB4);
  return result;
}

uint64_t sub_100046CC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046CC8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100046CCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046CD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element.CodingKeys()
{
  return &type metadata for Path.Element.CodingKeys;
}

ValueMetadata *type metadata accessor for Path.Element.MoveToPointCodingKeys()
{
  return &type metadata for Path.Element.MoveToPointCodingKeys;
}

uint64_t getEnumTagSinglePayload for PasteboardType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s13EnsembleAgent4PathV7ElementO21MoveToPointCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100046D9C + 4 * byte_10021DFC3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100046DBC + 4 * byte_10021DFC8[v4]))();
}

_BYTE *sub_100046D9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100046DBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100046DC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100046DCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100046DD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100046DDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element.LineToPointCodingKeys()
{
  return &type metadata for Path.Element.LineToPointCodingKeys;
}

uint64_t storeEnumTagSinglePayload for Path.Element.QuadCurveToPointCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100046E44 + 4 * byte_10021DFD2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100046E78 + 4 * byte_10021DFCD[v4]))();
}

uint64_t sub_100046E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046E88);
  return result;
}

uint64_t sub_100046E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046E9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100046EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element.QuadCurveToPointCodingKeys()
{
  return &type metadata for Path.Element.QuadCurveToPointCodingKeys;
}

uint64_t storeEnumTagSinglePayload for Path.Element.CurveToPointCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100046F10 + 4 * byte_10021DFDC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100046F44 + 4 * byte_10021DFD7[v4]))();
}

uint64_t sub_100046F44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046F54);
  return result;
}

uint64_t sub_100046F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046F68);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100046F6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046F74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element.CurveToPointCodingKeys()
{
  return &type metadata for Path.Element.CurveToPointCodingKeys;
}

ValueMetadata *type metadata accessor for Path.Element.CloseSubpathCodingKeys()
{
  return &type metadata for Path.Element.CloseSubpathCodingKeys;
}

unint64_t sub_100046FA4()
{
  unint64_t result;

  result = qword_1002ABC40;
  if (!qword_1002ABC40)
  {
    result = swift_getWitnessTable(&unk_10021E2B8, &type metadata for Path.Element.CurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC40);
  }
  return result;
}

unint64_t sub_100046FE4()
{
  unint64_t result;

  result = qword_1002ABC48;
  if (!qword_1002ABC48)
  {
    result = swift_getWitnessTable(&unk_10021E370, &type metadata for Path.Element.QuadCurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC48);
  }
  return result;
}

unint64_t sub_100047024()
{
  unint64_t result;

  result = qword_1002ABC50;
  if (!qword_1002ABC50)
  {
    result = swift_getWitnessTable(&unk_10021E428, &type metadata for Path.Element.LineToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC50);
  }
  return result;
}

unint64_t sub_100047064()
{
  unint64_t result;

  result = qword_1002ABC58;
  if (!qword_1002ABC58)
  {
    result = swift_getWitnessTable(&unk_10021E4E0, &type metadata for Path.Element.MoveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC58);
  }
  return result;
}

unint64_t sub_1000470A4()
{
  unint64_t result;

  result = qword_1002ABC60;
  if (!qword_1002ABC60)
  {
    result = swift_getWitnessTable(&unk_10021E598, &type metadata for Path.Element.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC60);
  }
  return result;
}

unint64_t sub_1000470E4()
{
  unint64_t result;

  result = qword_1002ABC68;
  if (!qword_1002ABC68)
  {
    result = swift_getWitnessTable(&unk_10021E450, &type metadata for Path.Element.MoveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC68);
  }
  return result;
}

unint64_t sub_100047124()
{
  unint64_t result;

  result = qword_1002ABC70;
  if (!qword_1002ABC70)
  {
    result = swift_getWitnessTable(&unk_10021E478, &type metadata for Path.Element.MoveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC70);
  }
  return result;
}

unint64_t sub_100047164()
{
  unint64_t result;

  result = qword_1002ABC78;
  if (!qword_1002ABC78)
  {
    result = swift_getWitnessTable(&unk_10021E398, &type metadata for Path.Element.LineToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC78);
  }
  return result;
}

unint64_t sub_1000471A4()
{
  unint64_t result;

  result = qword_1002ABC80;
  if (!qword_1002ABC80)
  {
    result = swift_getWitnessTable(&unk_10021E3C0, &type metadata for Path.Element.LineToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC80);
  }
  return result;
}

unint64_t sub_1000471E4()
{
  unint64_t result;

  result = qword_1002ABC88;
  if (!qword_1002ABC88)
  {
    result = swift_getWitnessTable(&unk_10021E2E0, &type metadata for Path.Element.QuadCurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC88);
  }
  return result;
}

unint64_t sub_100047224()
{
  unint64_t result;

  result = qword_1002ABC90;
  if (!qword_1002ABC90)
  {
    result = swift_getWitnessTable(&unk_10021E308, &type metadata for Path.Element.QuadCurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC90);
  }
  return result;
}

unint64_t sub_100047264()
{
  unint64_t result;

  result = qword_1002ABC98;
  if (!qword_1002ABC98)
  {
    result = swift_getWitnessTable(&unk_10021E228, &type metadata for Path.Element.CurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABC98);
  }
  return result;
}

unint64_t sub_1000472A4()
{
  unint64_t result;

  result = qword_1002ABCA0;
  if (!qword_1002ABCA0)
  {
    result = swift_getWitnessTable(&unk_10021E250, &type metadata for Path.Element.CurveToPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCA0);
  }
  return result;
}

unint64_t sub_1000472E4()
{
  unint64_t result;

  result = qword_1002ABCA8;
  if (!qword_1002ABCA8)
  {
    result = swift_getWitnessTable(&unk_10021E1D8, &type metadata for Path.Element.CloseSubpathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCA8);
  }
  return result;
}

unint64_t sub_100047324()
{
  unint64_t result;

  result = qword_1002ABCB0;
  if (!qword_1002ABCB0)
  {
    result = swift_getWitnessTable(&unk_10021E200, &type metadata for Path.Element.CloseSubpathCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCB0);
  }
  return result;
}

unint64_t sub_100047364()
{
  unint64_t result;

  result = qword_1002ABCB8;
  if (!qword_1002ABCB8)
  {
    result = swift_getWitnessTable(&unk_10021E508, &type metadata for Path.Element.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCB8);
  }
  return result;
}

unint64_t sub_1000473A4()
{
  unint64_t result;

  result = qword_1002ABCC0;
  if (!qword_1002ABCC0)
  {
    result = swift_getWitnessTable(&unk_10021E530, &type metadata for Path.Element.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCC0);
  }
  return result;
}

uint64_t sub_1000473FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10004740C()
{
  return Hasher._finalize()();
}

void _s13EnsembleAgent3ArcV__6radiusACSo7CGPointV_AF12CoreGraphics7CGFloatVtcfC_0(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
}

void _s13EnsembleAgent5CurveV2to2c12c2ACSo7CGPointV_A2HtcfC_0(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  a1[5] = a7;
}

uint64_t sub_100047434(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

void sub_100047454()
{
  Hasher._combine(_:)(0);
}

_QWORD *sub_100047460(_QWORD *a1)
{
  return sub_10000DBE4(a1, a1[3]);
}

CGImageRef static CGImageRef.new(url:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  NSURL *v10;
  CGImageSource *v11;
  CGImageSource *v12;
  CGImageRef v13;
  CGPDFDocument *v14;
  CGPDFPage *v15;
  CGImageRef v16;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  uint64_t v21;
  uint64_t v23;
  CGRect BoxRect;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100048A14(a1);
  if (!v7)
  {
LABEL_7:
    type metadata accessor for CGImageSource(0);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a1);
    static CGImageSourceRef.new(url:options:)(0, v10);
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v12)
    {
      v13 = sub_100048BF0(v12);
LABEL_14:
      v16 = v13;
      goto LABEL_15;
    }
    return 0;
  }
  if (v6 == 6710384 && v7 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 6710384, 0xE300000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
      goto LABEL_7;
  }
  v14 = CGPDFDocumentCreateWithURL((CFURLRef)a1);
  if (!v14)
    return 0;
  v12 = v14;
  if ((uint64_t)CGPDFDocumentGetNumberOfPages(v14) < 1)
  {

    return 0;
  }
  v15 = CGPDFDocumentGetPage(v12, 1uLL);
  v16 = v15;
  if (v15)
  {
    BoxRect = CGPDFPageGetBoxRect(v15, kCGPDFMediaBox);
    x = BoxRect.origin.x;
    y = BoxRect.origin.y;
    width = BoxRect.size.width;
    height = BoxRect.size.height;
    sub_100048BFC();
    sub_1000477C4(v21, v16, width, height, x, y, width, height);
    goto LABEL_14;
  }
LABEL_15:

  return v16;
}

uint64_t sub_100047614(double a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  const CGFloat *v6;
  char v7;
  const CGFloat *decode;
  uint64_t v9;
  CGColorSpaceRef v10;
  CGColorSpaceRef v11;
  CGColorSpace *v12;
  size_t v13;
  int64_t v14;
  size_t v15;
  int64_t v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  CGDataProvider *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  CGColorSpaceRef v26;
  CGBitmapInfo v27;
  CGImageRef v28;
  uint64_t result;
  BOOL v30;
  CGColorRenderingIntent v31;

  v3 = ceil(a2);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v4 = ceil(a1);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_100048BC0();
  if (!v7)
    goto LABEL_21;
  if (__OFADD__(4 * v2, 63))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  decode = v6;
  v9 = v5;
  sub_100048B28(v5);
  swift_bridgeObjectRetain();
  v10 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!v10)
  {
LABEL_23:
    sub_100048C04();
    result = sub_10000E410();
    __break(1u);
    return result;
  }
  v11 = v10;
  sub_100048B28(v9);
  swift_bridgeObjectRetain();
  sub_100048BA4();
  v19 = sub_100047E68(v12, v13, v14, v15, v16, v17, v18, v9);
  if (v19)
  {
    v20 = (CGDataProvider *)v19;
    v21 = sub_100048B78();
    v28 = CGImageCreate(v21, v22, v23, v24, v25, v26, v27, v20, decode, v30, v31);

  }
  else
  {

    v28 = 0;
  }
  sub_100048C04();
  sub_10000E410();
  sub_100048C04();
  sub_10000E410();
  return (uint64_t)v28;
}

void sub_1000477C4(uint64_t a1, void *a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  id v8;
  double v9;
  double v11;
  size_t v12;
  CGColorSpaceRef v17;
  CGColorSpace *v18;
  id v19;
  CGDataProvider *v20;
  CGDataProvider *v21;

  v9 = ceil(a4);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = ceil(a3);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v12 = (uint64_t)v11;
  if ((unint64_t)((uint64_t)v11 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (__OFADD__(4 * v12, 63))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a2;
  v17 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!v17)
  {
LABEL_21:

    __break(1u);
    return;
  }
  v18 = v17;
  v19 = v8;
  v20 = (CGDataProvider *)sub_100048004(v18, v12, (uint64_t)v9, 8uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, 0x2002u, a5, a6, a7, a8, a1, v19);
  if (v20)
  {
    v21 = v20;
    CGImageCreate(v12, (uint64_t)v9, 8uLL, 0x20uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, v18, 0x2002u, v20, 0, 0, kCGRenderingIntentDefault);

  }
  else
  {

  }
}

void sub_100047994(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v7;
  id v8;
  double v9;
  double v11;
  size_t v12;
  CGColorSpaceRef v16;
  CGColorSpace *v17;
  CGContext *v18;
  CGColor *v19;
  CGDataProvider *v20;
  CGDataProvider *v21;

  v9 = ceil(a5);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = ceil(a4);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = (uint64_t)v11;
  if ((unint64_t)((uint64_t)v11 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(4 * v12, 63))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = a2;
  v8 = a3;
  v16 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!v16)
  {
LABEL_22:

    __break(1u);
    return;
  }
  v17 = v16;
  v18 = (CGContext *)v7;
  v19 = (CGColor *)v8;
  v20 = (CGDataProvider *)sub_1000481C8(v17, v12, (uint64_t)v9, 8uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, 0x2002u, a6, a7, a1, v18, v19);
  if (v20)
  {
    v21 = v20;
    CGImageCreate(v12, (uint64_t)v9, 8uLL, 0x20uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, v17, 0x2002u, v20, 0, 0, kCGRenderingIntentDefault);

  }
  else
  {

  }
}

void static CGImageRef.new(size:closure:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  char v6;
  CGColorSpaceRef v7;
  CGColorSpaceRef v8;
  CGColorSpace *v9;
  size_t v10;
  int64_t v11;
  size_t v12;
  int64_t v13;
  uint32_t v14;
  void (*v15)(void);
  uint64_t v16;
  CGDataProvider *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  CGColorSpaceRef v23;
  CGBitmapInfo v24;
  const CGFloat *v25;
  BOOL v26;
  CGColorRenderingIntent v27;

  sub_100048C24();
  if (v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = ceil(v3);
  if ((v2 & ~*(_QWORD *)&v5) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_100048BC0();
  if (!v6)
    goto LABEL_20;
  if (__OFADD__(4 * v0, 63))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
  if (!v7)
  {
LABEL_22:
    __break(1u);
    return;
  }
  v8 = v7;
  sub_100048BA4();
  v16 = sub_10004837C(v9, v10, v11, v12, v13, v14, v15);
  if (v16)
  {
    v17 = (CGDataProvider *)v16;
    v18 = sub_100048B78();
    CGImageCreate(v18, v19, v20, v21, v22, v23, v24, v17, v25, v26, v27);

  }
  else
  {

  }
}

CGImageRef static CGImageRef.new(resource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  NSURL *v21;
  void *v22;
  void *v23;
  CGImageRef v24;
  uint64_t v26;

  v8 = sub_1000055B0(qword_1002ABCC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v26 - v16;
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19 = sub_100048A74(a1, a2, a3, a4, v18);

  if (!v19)
  {
    sub_100048C44((uint64_t)v10, 1);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v20(v10, v15, v11);
  sub_100048C44((uint64_t)v10, 0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v11) == 1)
  {
LABEL_5:
    sub_100048AE8((uint64_t)v10);
    return 0;
  }
  v20(v17, v10, v11);
  sub_100048BFC();
  URL._bridgeToObjectiveC()(v21);
  v23 = v22;
  v24 = static CGImageRef.new(url:)(v22);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  return v24;
}

uint64_t sub_100047E68(CGColorSpace *a1, size_t a2, int64_t a3, size_t a4, int64_t a5, uint32_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  vm_size_t v9;
  void *v16;
  CGContext *v17;
  CGContext *v18;
  vm_address_t v19;
  CGContextRef v20;
  CGContextRef v21;
  uint64_t result;

  v9 = a5 * a3;
  if ((unsigned __int128)(a5 * (__int128)a3) >> 64 == (a5 * a3) >> 63)
  {
    v8 = a8;
    v16 = sub_1000485E0(a5 * a3);
    v18 = v17;
    if (!v17)
      goto LABEL_9;
    v19 = (vm_address_t)v16;
    v20 = CGBitmapContextCreate(v16, a2, a3, a4, a5, a1, a6);
    if (!v20)
    {
      v21 = v18;
      v18 = 0;
      goto LABEL_8;
    }
    v21 = v20;
    sub_1000938A0();
    if ((v9 & 0x8000000000000000) == 0)
    {
      vm_protect(mach_task_self_, v19, v9, 1, 1);
LABEL_8:

LABEL_9:
      sub_100048B50(v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v18;
    }
  }
  else
  {
    __break(1u);
  }
  sub_100048B50(v8);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

uint64_t sub_100048004(CGColorSpace *a1, size_t a2, int64_t a3, size_t a4, int64_t a5, uint32_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, uint64_t a11, void *a12)
{
  void *v12;
  vm_size_t v13;
  void *v24;
  void *v25;
  void *v26;
  vm_address_t v27;
  CGContextRef v28;
  CGContext *v29;
  uint64_t result;
  CGAffineTransform transform;
  CGRect v32;
  CGRect v33;

  v13 = a5 * a3;
  if ((unsigned __int128)(a5 * (__int128)a3) >> 64 == (a5 * a3) >> 63)
  {
    v12 = a12;
    v24 = sub_1000485E0(a5 * a3);
    v26 = v25;
    if (!v25)
    {

      return (uint64_t)v26;
    }
    v27 = (vm_address_t)v24;
    v28 = CGBitmapContextCreate(v24, a2, a3, a4, a5, a1, a6);
    if (!v28)
    {

      return 0;
    }
    v29 = v28;
    v32.origin.x = 0.0;
    v32.origin.y = 0.0;
    v32.size.width = a9;
    v32.size.height = a10;
    CGPDFPageGetDrawingTransform(&transform, (CGPDFPageRef)v12, kCGPDFMediaBox, v32, 0, 1);
    CGContextConcatCTM(v29, &transform);
    v33.origin.x = a7;
    v33.origin.y = a8;
    v33.size.width = a9;
    v33.size.height = a10;
    CGContextClipToRect(v29, v33);
    CGContextDrawPDFPage(v29, (CGPDFPageRef)v12);
    if ((v13 & 0x8000000000000000) == 0)
    {
      vm_protect(mach_task_self_, v27, v13, 1, 1);

      return (uint64_t)v26;
    }
  }
  else
  {
    __break(1u);
  }

  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

uint64_t sub_1000481C8(CGColorSpace *a1, size_t a2, int64_t a3, size_t a4, int64_t a5, uint32_t a6, double a7, double a8, uint64_t a9, CGContext *a10, CGColor *a11)
{
  CGContext *v11;
  CGColor *v12;
  vm_size_t v13;
  void *v22;
  CGContext *v23;
  CGContext *v24;
  vm_address_t v25;
  CGContext *v26;
  CGContext *v27;
  uint64_t result;
  CGRect v29;

  v13 = a5 * a3;
  if ((unsigned __int128)(a5 * (__int128)a3) >> 64 != (a5 * a3) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = a10;
  v22 = sub_1000485E0(a5 * a3);
  v24 = v23;
  if (!v23)
  {
LABEL_7:
    v12 = a11;
    goto LABEL_8;
  }
  v25 = (vm_address_t)v22;
  v26 = CGBitmapContextCreate(v22, a2, a3, a4, a5, a1, a6);
  if (!v26)
  {

    v11 = v24;
    v24 = 0;
    goto LABEL_7;
  }
  v27 = v26;
  CGContextSetBlendMode(v26, kCGBlendModeCopy);
  CGContextRef.draw(_:in:byTiling:)(v11, 0, 0.0, 0.0, a7, a8);
  CGContextSetBlendMode(v27, kCGBlendModeSourceIn);
  v12 = a11;
  CGContextSetFillColorWithColor(v27, a11);
  v29.origin.x = 0.0;
  v29.origin.y = 0.0;
  v29.size.width = a7;
  v29.size.height = a8;
  CGContextFillRect(v27, v29);
  if ((v13 & 0x8000000000000000) == 0)
  {
    vm_protect(mach_task_self_, v25, v13, 1, 1);

    v11 = v27;
LABEL_8:

    return (uint64_t)v24;
  }
LABEL_10:

  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

uint64_t sub_10004837C(CGColorSpace *a1, size_t a2, int64_t a3, size_t a4, int64_t a5, uint32_t a6, void (*a7)(void))
{
  vm_size_t v7;
  void *v14;
  CGContext *v15;
  CGContext *v16;
  vm_address_t v17;
  CGContextRef v18;
  CGContextRef v19;
  uint64_t result;

  v7 = a5 * a3;
  if ((unsigned __int128)(a5 * (__int128)a3) >> 64 == (a5 * a3) >> 63)
  {
    v14 = sub_1000485E0(a5 * a3);
    v16 = v15;
    if (!v15)
      return (uint64_t)v16;
    v17 = (vm_address_t)v14;
    v18 = CGBitmapContextCreate(v14, a2, a3, a4, a5, a1, a6);
    if (!v18)
    {
      v19 = v16;
      v16 = 0;
      goto LABEL_7;
    }
    v19 = v18;
    a7();
    if ((v7 & 0x8000000000000000) == 0)
    {
      vm_protect(mach_task_self_, v17, v7, 1, 1);
LABEL_7:

      return (uint64_t)v16;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

void static CGImageRef.new(maskSize:closure:)()
{
  double v0;
  void (*v1)(void);
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  void (*v6)(void);
  CGColorSpace *v7;
  CGColorSpace *v8;
  CGDataProvider *v9;
  CGDataProvider *v10;

  sub_100048C24();
  if (v4)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v0 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v0 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = ceil(v3);
  if ((v2 & ~*(_QWORD *)&v5) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = v1;
  v7 = CGColorSpaceCreateWithName(kCGColorSpaceLinearGray);
  if (!v7)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v8 = v7;
  v9 = (CGDataProvider *)sub_10004837C(v7, (uint64_t)v5, (uint64_t)v0, 8uLL, (uint64_t)v5, 7u, v6);
  if (v9)
  {
    v10 = v9;
    CGImageMaskCreate((uint64_t)v5, (uint64_t)v0, 8uLL, 8uLL, (uint64_t)v5, v9, 0, 0);

  }
  else
  {

  }
}

void *sub_1000485E0(size_t a1)
{
  void *result;
  void *v3;

  result = mmap(0, a1, 3, 4098, 0, 0);
  if (result)
  {
    v3 = result;
    if (!CGDataProviderCreateWithData(0, result, a1, (CGDataProviderReleaseDataCallback)sub_10004866C))
    {
      munmap(v3, a1);
      return 0;
    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100048660(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

CGImageRef static CGImageRef.new(data:)(void *a1)
{
  CGImageRef result;
  CGImageRef v3;
  size_t length;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGImageSource *v8;
  CGImageSource *v9;
  CGImageRef v10;

  result = (CGImageRef)xpc_data_get_bytes_ptr(a1);
  if (result)
  {
    v3 = result;
    length = xpc_data_get_length(a1);
    v5 = Data.init(bytes:count:)(v3, length);
    v7 = v6;
    type metadata accessor for CGImageSource(0);
    static CGImageSourceRef.new(data:options:)(v5, v7, 0);
    if (v8)
    {
      v9 = v8;
      v10 = sub_100048BF0(v8);
      sub_100048C38();

    }
    else
    {
      sub_100048C38();
      return 0;
    }
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CGImageRef static CGImageRef.new(imageData:)()
{
  const __CFData *isa;
  const __CFDictionary *v1;
  CGImageSource *v2;
  const __CFDictionary *v3;
  CGImageRef ImageAtIndex;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100048BD8((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for AnyHashable);
  v1 = sub_100048BE4().super.isa;
  swift_bridgeObjectRelease();
  v2 = CGImageSourceCreateWithData(isa, v1);

  if (!v2)
    return 0;
  sub_100048BD8((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for AnyHashable);
  v3 = sub_100048BE4().super.isa;
  swift_bridgeObjectRelease();
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v2, 0, v3);

  return ImageAtIndex;
}

double CGImageRef.size.getter()
{
  CGImage *v0;
  int64_t Width;

  Width = CGImageGetWidth(v0);
  CGImageGetHeight(v0);
  return (double)Width;
}

CGImageRef_optional __swiftcall CGImageRef.copy(withTint:)(CGColorRef withTint)
{
  CGImage *v1;
  double Width;
  double Height;
  uint64_t v5;
  CGImageRef_optional result;

  Width = (double)(uint64_t)CGImageGetWidth(v1);
  Height = (double)(uint64_t)CGImageGetHeight(v1);
  sub_100048BFC();
  sub_100047994(v5, v1, withTint, Width, Height, Width, Height);
  return result;
}

CGImageRef CGImageRef.subscript.getter(double a1, double a2, double a3, double a4)
{
  CGImage *v4;

  return CGImageCreateWithImageInRect(v4, *(CGRect *)&a1);
}

uint64_t CGImageRef.pngData()()
{
  CGImage *v0;
  __CFData *v1;
  __CFString *v2;
  const __CFDictionary *isa;
  CGImageDestination *v4;
  const __CFDictionary *v5;
  __CFData *v6;
  uint64_t v7;

  v1 = (__CFData *)objc_msgSend(objc_allocWithZone((Class)NSMutableData), "init");
  v2 = (__CFString *)String._bridgeToObjectiveC()();
  sub_100048C0C((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for AnyHashable);
  isa = sub_100048C18().super.isa;
  swift_bridgeObjectRelease();
  v4 = CGImageDestinationCreateWithData(v1, v2, 1uLL, isa);

  if (v4)
  {
    sub_100048C0C((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for AnyHashable);
    v5 = sub_100048C18().super.isa;
    swift_bridgeObjectRelease();
    CGImageDestinationAddImage(v4, v0, v5);

    CGImageDestinationFinalize(v4);
    v6 = v1;
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  else
  {

    return 0;
  }
  return v7;
}

uint64_t sub_100048A14(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "pathExtension");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

id sub_100048A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v6;
  NSString v7;
  id v8;

  v6 = String._bridgeToObjectiveC()();
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a5, "URLForResource:withExtension:", v6, v7);

  return v8;
}

uint64_t sub_100048AE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(qword_1002ABCC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100048B28(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100048B50(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100048B78()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100048BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(a1, a2, v2, v3);
}

NSDictionary sub_100048BE4()
{
  return Dictionary._bridgeToObjectiveC()();
}

CGImageRef sub_100048BF0(CGImageSource *a1)
{
  return CGImageSourceCreateImageAtIndex(a1, 0, 0);
}

void sub_100048BFC()
{
  type metadata accessor for CGImage(0);
}

uint64_t sub_100048C04()
{
  uint64_t v0;

  return sub_100048B50(v0);
}

uint64_t sub_100048C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(a1, a2, v2, v3);
}

NSDictionary sub_100048C18()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100048C38()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_100048C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, v2);
}

uint64_t ECXPCListener.connection.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

void ECXPCListener.connectionAccepted.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  sub_10000B2F8(v0 + 24, (uint64_t)v3, 0);
  v1 = sub_10000E4F8();
  sub_10000AE54(v1, v2);
  sub_10000E4F8();
  sub_100015540();
}

void ECXPCListener.connectionAccepted.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  sub_10000B2F8(v2 + 24, (uint64_t)v7, 1);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  sub_10000B02C(v5, v6);
  sub_10000B338();
}

void ECXPCListener.connectionAccepted.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 24, a1, 33);
  sub_1000050D4();
}

uint64_t (*variable initialization expression of KeyFocusController.handler())(_QWORD)
{
  return CGSize.init(_:);
}

void ECXPCListener.connectionError.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10000B2F8(v0 + 40, (uint64_t)v1, 0);
  sub_1000088D0();
  sub_10000E4F8();
  sub_100015540();
}

void ECXPCListener.connectionError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_10000B2F8(v2 + 40, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  swift_release();
  sub_10000B338();
}

void ECXPCListener.connectionError.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 40, a1, 33);
  sub_1000050D4();
}

void variable initialization expression of ECXPCListener.messageHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000088D8((uint64_t)&unk_100284328, 32);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_1000050D4();
}

void ECXPCListener.messageHandler.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10000B2F8(v0 + 56, (uint64_t)v1, 0);
  sub_1000088D0();
  sub_10000E4F8();
  sub_100015540();
}

void ECXPCListener.messageHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];

  sub_10000B2F8(v2 + 56, (uint64_t)v5, 1);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  swift_release();
  sub_10000B338();
}

void ECXPCListener.messageHandler.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 56, a1, 33);
  sub_1000050D4();
}

void ECXPCListener.__allocating_init(queue:machService:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000088D8(v3, 72);
  ECXPCListener.init(queue:machService:)(a1, a2, a3);
  sub_10000B350();
}

uint64_t *ECXPCListener.init(queue:machService:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  xpc_connection_t mach_service;

  v7 = *v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = (uint64_t)CGSize.init(_:);
  v3[6] = 0;
  v8 = sub_1000088D8((uint64_t)&unk_100284350, 32);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v7 + 88);
  v3[7] = (uint64_t)CGSize.init(_:);
  v3[8] = v8;
  v9 = String.utf8CString.getter(a2, a3);
  v10 = a1;
  swift_bridgeObjectRelease();
  mach_service = xpc_connection_create_mach_service((const char *)(v9 + 32), v10, 1uLL);
  swift_release();

  v3[2] = (uint64_t)mach_service;
  ECXPCListener._initListenerCommon(_:)(v10);

  return v3;
}

uint64_t ECXPCListener.__allocating_init(queue:)(NSObject *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1000088D8(v1, 72);
  ECXPCListener.init(queue:)(a1);
  return v3;
}

void ECXPCListener.init(queue:)(NSObject *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = (uint64_t)CGSize.init(_:);
  v1[6] = 0;
  v4 = sub_1000088D8((uint64_t)&unk_100284378, 32);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(v3 + 88);
  v1[7] = (uint64_t)CGSize.init(_:);
  v1[8] = v4;
  v1[2] = (uint64_t)xpc_connection_create(0, a1);
  ECXPCListener._initListenerCommon(_:)(a1);

  sub_10000B350();
}

void ECXPCListener._initListenerCommon(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = *v2;
  v5 = sub_1000088D8((uint64_t)&unk_1002843C8, 24);
  swift_weakInit(v5 + 16, v2);
  v6 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100284570, 48);
  v6[2] = *(_QWORD *)(v4 + 80);
  v6[3] = *(_QWORD *)(v4 + 88);
  v6[4] = a1;
  v6[5] = v5;
  v7 = sub_10000B2EC((uint64_t)sub_100049274, (uint64_t)_NSConcreteStackBlock, 1107296256, v9, v10);
  v8 = a1;
  swift_release();
  sub_100049ADC();
  _Block_release(v7);
  sub_100049AD4();
}

uint64_t sub_100049154(_xpc_connection_s *a1, NSObject *a2, uint64_t a3)
{
  xpc_type_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (*v9)(_xpc_connection_s *);
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE v13[24];

  swift_getObjectType(a1);
  v6 = OS_xpc_object.type.getter();
  result = XPC_TYPE_ERROR.getter();
  if ((xpc_type_t)result != v6)
  {
    result = XPC_TYPE_CONNECTION.getter();
    if ((xpc_type_t)result == v6)
    {
      xpc_connection_set_target_queue(a1, a2);
      swift_beginAccess(a3 + 16, v13, 0, 0);
      result = swift_weakLoadStrong(a3 + 16);
      if (result)
      {
        v8 = (_QWORD *)result;
        swift_beginAccess(result + 24, &v12, 0, 0);
        v9 = (uint64_t (*)(_xpc_connection_s *))v8[3];
        if (v9)
        {
          v10 = v8[4];
          swift_unknownObjectRetain(a1);
          sub_10000AE54((uint64_t)v9, v10);
          v11 = v9(a1);
          sub_10000B02C((uint64_t)v9, v10);
          if ((v11 & 1) == 0)
          {
            xpc_connection_cancel(a1);
LABEL_9:
            swift_release();
            return swift_unknownObjectRelease(a1);
          }
        }
        else
        {
          swift_unknownObjectRetain(a1);
        }
        (*(void (**)(_xpc_connection_s *))(*v8 + 232))(a1);
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_100049274(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  sub_1000088D0();
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t ECXPCListener.__allocating_init(connection:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1000088D8(v1, 72);
  ECXPCListener.init(connection:)(a1);
  return v3;
}

uint64_t *ECXPCListener.init(connection:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = (uint64_t)CGSize.init(_:);
  v1[6] = 0;
  v4 = sub_1000088D8((uint64_t)&unk_1002843A0, 32);
  v5 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 24) = v6;
  v1[7] = (uint64_t)CGSize.init(_:);
  v1[8] = v4;
  v1[2] = a1;
  v7 = sub_1000088D8((uint64_t)&unk_1002843C8, 24);
  sub_100049AC4(v7);
  v8 = (_QWORD *)sub_1000088D8((uint64_t)&unk_1002843F0, 48);
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v3;
  v8[5] = a1;
  v9 = sub_10000B2EC((uint64_t)sub_100049274, (uint64_t)_NSConcreteStackBlock, 1107296256, v11, v12);
  swift_unknownObjectRetain_n(a1, 3);
  swift_release();
  sub_100049ADC();
  _Block_release(v9);
  swift_unknownObjectRelease(a1);
  sub_100049AD4();
  swift_unknownObjectRelease(a1);
  return v1;
}

uint64_t sub_100049410()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100049434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  xpc_type_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, __n128);
  __n128 v22;
  void (*v23)(uint64_t, uint64_t, char *, __n128);
  __n128 v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v26 = a3;
  v9 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v11);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    swift_getObjectType(a1);
    v19 = OS_xpc_object.type.getter();
    if ((xpc_type_t)XPC_TYPE_ERROR.getter() == v19)
    {
      swift_beginAccess(v18 + 40, v27, 0, 0);
      v21 = *(void (**)(uint64_t, uint64_t, __n128))(v18 + 40);
      v22 = swift_retain();
      v21(v26, a1, v22);
      swift_release();
    }
    else if ((xpc_type_t)XPC_TYPE_DICTIONARY.getter() == v19)
    {
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 8);
      v20 = swift_unknownObjectRetain_n(a1, 2);
      v25(v20, a4, a5);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, a4) == 1)
      {
        swift_release();
        swift_unknownObjectRelease(a1);
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
        swift_beginAccess(v18 + 56, v27, 0, 0);
        v23 = *(void (**)(uint64_t, uint64_t, char *, __n128))(v18 + 56);
        v24 = swift_retain();
        v23(v26, a1, v16, v24);
        swift_unknownObjectRelease(a1);
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100049654(uint64_t a1)
{
  uint64_t *v1;

  return sub_100049434(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_100049660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100049670(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void ECXPCListener.acceptConnection(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _xpc_connection_s *v8;
  xpc_handler_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *v1;
  v5 = sub_1000088D8((uint64_t)&unk_1002843C8, 24);
  sub_100049AC4(v5);
  v6 = (_QWORD *)sub_1000088D8((uint64_t)&unk_100284440, 48);
  v6[2] = *(_QWORD *)(v4 + 80);
  v6[3] = *(_QWORD *)(v4 + 88);
  v6[4] = v2;
  v6[5] = a1;
  v7 = sub_10000B2EC((uint64_t)sub_100049274, (uint64_t)_NSConcreteStackBlock, 1107296256, v10, v11);
  swift_unknownObjectRetain(a1);
  swift_release();
  v8 = (_xpc_connection_s *)sub_10000E4F8();
  xpc_connection_set_event_handler(v8, v9);
  _Block_release(v7);
  sub_100049AD4();
}

uint64_t sub_100049744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  xpc_type_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, __n128);
  __n128 v22;
  void (*v23)(uint64_t, uint64_t, char *, __n128);
  __n128 v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v26 = a3;
  v9 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v11);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    swift_getObjectType(a1);
    v19 = OS_xpc_object.type.getter();
    if ((xpc_type_t)XPC_TYPE_ERROR.getter() == v19)
    {
      swift_beginAccess(v18 + 40, v27, 0, 0);
      v21 = *(void (**)(uint64_t, uint64_t, __n128))(v18 + 40);
      v22 = swift_retain();
      v21(v26, a1, v22);
      swift_release();
    }
    else if ((xpc_type_t)XPC_TYPE_DICTIONARY.getter() == v19)
    {
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 8);
      v20 = swift_unknownObjectRetain_n(a1, 2);
      v25(v20, a4, a5);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, a4) == 1)
      {
        swift_release();
        swift_unknownObjectRelease(a1);
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
        swift_beginAccess(v18 + 56, v27, 0, 0);
        v23 = *(void (**)(uint64_t, uint64_t, char *, __n128))(v18 + 56);
        v24 = swift_retain();
        v23(v26, a1, v16, v24);
        swift_unknownObjectRelease(a1);
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100049964()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100049990(uint64_t a1)
{
  uint64_t *v1;

  return sub_100049744(a1, v1[4], v1[5], v1[2], v1[3]);
}

Swift::Void __swiftcall ECXPCListener.suspend()()
{
  uint64_t v0;

  xpc_connection_suspend(*(xpc_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall ECXPCListener.resume()()
{
  uint64_t v0;

  xpc_connection_resume(*(xpc_connection_t *)(v0 + 16));
}

Swift::Void __swiftcall ECXPCListener.cancel()()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 16));
}

xpc_endpoint_t ECXPCListener.endPoint.getter()
{
  uint64_t v0;

  return xpc_endpoint_create(*(xpc_connection_t *)(v0 + 16));
}

_QWORD *ECXPCListener.deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10000B02C(v0[3], v0[4]);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ECXPCListener.__deallocating_deinit()
{
  uint64_t v0;

  ECXPCListener.deinit();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_100049A14(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = "\b";
  v2[1] = &unk_10021E810;
  v2[2] = (char *)&value witness table for () + 64;
  v2[3] = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + 96);
}

uint64_t type metadata accessor for ECXPCListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000328FC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ECXPCListener);
}

uint64_t sub_100049A78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100049AA4(_xpc_connection_s *a1)
{
  uint64_t v1;

  return sub_100049154(a1, *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100049AC4(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

void sub_100049AD4()
{
  _xpc_connection_s *v0;

  xpc_connection_resume(v0);
}

void sub_100049ADC()
{
  _xpc_connection_s *v0;
  void *v1;

  xpc_connection_set_event_handler(v0, v1);
}

#error "100049B38: call analysis failed (funcsize=43)"

void sub_100049B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __int128 v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100058838();
    v3 = sub_100071A78(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(a1 + 32))
      {
        v6 = v4;
        v7 = a1 + 64;
        v15 = a1 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v8 = *(_QWORD *)(a1 + 56);
          v17 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v5);
          v9 = *(_QWORD *)(v8 + 8 * v5);
          if (v9)
          {
            swift_errorRetain(*(_QWORD *)(v8 + 8 * v5));
            v16 = (id)_convertErrorToNSError(_:)(v9);
            v10 = v9;
          }
          else
          {
            v16 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
            v10 = 0;
          }
          swift_errorRelease(v10);
          v11 = _swiftEmptyArrayStorage[2];
          if (_swiftEmptyArrayStorage[3] >> 1 <= v11)
            sub_100058838();
          _swiftEmptyArrayStorage[2] = v11 + 1;
          v12 = &_swiftEmptyArrayStorage[3 * v11];
          *((_OWORD *)v12 + 2) = v17;
          v12[6] = v16;
          v13 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v5 >= -v13)
            goto LABEL_22;
          v7 = a1 + 64;
          if ((*(_QWORD *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_23;
          if (v6 != *(_DWORD *)(a1 + 36))
            goto LABEL_24;
          v14 = _HashTable.occupiedBucket(after:)(v5, v15, ~v13);
          if (!--v1)
            return;
          v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            v6 = *(_DWORD *)(a1 + 36);
            if (v14 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
}

_QWORD *sub_100049D94(void *a1)
{
  id v2;
  uint64_t v3;
  double MinX;
  double MinY;
  double MaxX;
  double MaxY;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  sub_100058678();
  v2 = a1;
  CGRegionRef.makeIterator()();

  sub_100060374(v3);
  while ((v14 & 1) == 0)
  {
    v19.origin.x = sub_10005FEF8();
    MinX = CGRectGetMinX(v19);
    v15._countAndFlagsBits = Double.description.getter(MinX);
    sub_100060030(v15);
    sub_1000267C4();
    sub_100060020();
    v20.origin.x = sub_10005FEF8();
    MinY = CGRectGetMinY(v20);
    v16._countAndFlagsBits = Double.description.getter(MinY);
    sub_100060030(v16);
    sub_1000267C4();
    sub_100060020();
    v21.origin.x = sub_10005FEF8();
    MaxX = CGRectGetMaxX(v21);
    v17._countAndFlagsBits = Double.description.getter(MaxX);
    sub_100060030(v17);
    sub_1000267C4();
    sub_100060020();
    v22.origin.x = sub_10005FEF8();
    MaxY = CGRectGetMaxY(v22);
    v18._countAndFlagsBits = Double.description.getter(MaxY);
    sub_100060030(v18);
    sub_1000267C4();
    v9._countAndFlagsBits = 93;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v12 = _swiftEmptyArrayStorage[2];
    v11 = _swiftEmptyArrayStorage[3];
    if (v12 >= v11 >> 1)
    {
      sub_100060294(v11);
      sub_100058678();
    }
    _swiftEmptyArrayStorage[2] = v12 + 1;
    v13 = &_swiftEmptyArrayStorage[2 * v12];
    v13[4] = 91;
    v13[5] = 0xE100000000000000;
    sub_100060374(v10);
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100049F18(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v23 = v3 & 0xFFFFFFFFFFFFFF8;
      while (v6)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        v8 = v9;
LABEL_7:
        v10 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        v11 = dispatch thunk of UniversalControlDevice.id.getter(v9);
        sub_10018F420(v11, v12, a2);
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v6;
          v15 = v4;
          v16 = v3;
          v17 = a2;
          v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          v19 = v18;
          a2 = v17;
          v3 = v16;
          v4 = v15;
          v6 = v14;
          v7 = v23;
          v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v8);
          specialized ContiguousArray._endMutation()(v20);
        }
        else
        {
          swift_release();
        }
        ++v5;
        if (v10 == v4)
          goto LABEL_20;
      }
      if (v5 < *(_QWORD *)(v7 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v3 < 0)
        v21 = v3;
      else
        v21 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v4)
        goto LABEL_20;
    }
    v8 = *(_QWORD *)(v3 + 8 * v5 + 32);
    swift_retain();
    goto LABEL_7;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t *Agent.shared.unsafeMutableAddressor()
{
  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  return &static Agent.shared;
}

void sub_10004A0E8()
{
  uint64_t v0;

  v0 = type metadata accessor for Agent(0);
  sub_10004113C(v0);
  static Agent.shared = sub_10004BCB8();
  sub_1000050D4();
}

double static Agent.shared.getter()
{
  double result;

  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

_QWORD *sub_10004A158(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[5];

  v10[3] = &type metadata for EnsembleFeatureFlag;
  v10[4] = sub_100007794();
  v4 = swift_allocObject(&unk_100284878, 64, 7);
  v10[0] = v4;
  *(_QWORD *)(v4 + 16) = "Ensemble";
  *(_QWORD *)(v4 + 24) = 8;
  *(_BYTE *)(v4 + 32) = 2;
  *(_QWORD *)(v4 + 40) = "SystemUIScene";
  *(_QWORD *)(v4 + 48) = 13;
  *(_WORD *)(v4 + 56) = 2;
  v5 = isFeatureEnabled(_:)(v10);
  sub_10005FAC0(v10);
  if ((v5 & 1) != 0)
  {
    if (qword_1002A9840 != -1)
      swift_once(&qword_1002A9840, sub_10004A0E8);
    v6 = *(_QWORD *)(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_windowSceneController);
    v7 = type metadata accessor for DisplayControllerChamois_iOS();
    swift_allocObject(v7, 80, 7);
    swift_retain();
    return (_QWORD *)sub_10006F160(a1, a2, v6);
  }
  else
  {
    v9 = type metadata accessor for DisplayController_iOS();
    swift_allocObject(v9, 88, 7);
    return sub_1001065EC(a1, a2);
  }
}

void Agent.connectedDevices.getter()
{
  sub_10004A2BC(&OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices);
}

void Agent.devices.getter()
{
  sub_10004A2BC(&OBJC_IVAR____TtC13EnsembleAgent5Agent_devices);
}

void sub_10004A2BC(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[24];

  sub_10005FE28(v1 + *a1, (uint64_t)v2);
  swift_bridgeObjectRetain();
  sub_10006006C();
}

void Agent.localDevice.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice, (uint64_t)v1);
  swift_retain();
  sub_10006006C();
}

void Agent.enabled.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enabled, (uint64_t)v1);
  sub_100015540();
}

void Agent.magicEdgeEnabled.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_magicEdgeEnabled, (uint64_t)v1);
  sub_100015540();
}

void Agent.xpcAutomaticallyReconnect.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect, (uint64_t)v1);
  sub_100015540();
}

uint64_t Agent.windowSceneController.getter()
{
  return sub_10006014C(OBJC_IVAR____TtC13EnsembleAgent5Agent_windowSceneController);
}

uint64_t Agent.localDisplay(for:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, double, double);
  uint64_t v9;
  _BYTE v11[24];

  v5 = v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context;
  sub_10005FE28(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, (uint64_t)v11);
  if (!*(_QWORD *)v5)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 152);
  v7 = sub_100008904();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v6 + 32);
  sub_10002D988();
  v9 = v8(v7, v6, a1, a2);
  sub_10000F718();
  return v9;
}

uint64_t sub_10004A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t ObjectType;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  sub_10002626C();
  v165 = v12;
  v166 = v14;
  v157 = v16;
  v158 = v15;
  v18 = v17;
  v160 = v20;
  v161 = v19;
  v159 = v21;
  v22 = *(_QWORD *)v11;
  *(_OWORD *)(v11 + 184) = 0u;
  v150 = v11 + 184;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  v156 = v23;
  v24 = *(_QWORD *)(v23 + 32);
  if (v24)
  {
    v152 = v13;
    v25 = v24 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    v147 = v24 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    swift_beginAccess(v24 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, &v164, 0, 0);
    v145 = v18;
    v135 = sub_10006028C();
    v26 = (unsigned __int8 *)(v25 + *(int *)(v135 + 36));
    v143 = *v26;
    v141 = v26[1];
    v140 = v26[2];
    v142 = v26[3];
    v138 = v26[4];
    v27 = v26[5];
    v139 = v26[6];
    v28 = v26[8];
    v29 = v26[9];
    v111 = v28;
    v114 = v29;
    v30 = v26[10];
    v31 = v26[11];
    v119 = v31;
    v32 = v26[12];
    v33 = v26[13];
    v122 = v32;
    v125 = v33;
    v34 = v26[14];
    v128 = v34;
    v130 = v11;
    v35 = v26[7];
    v36 = v26[15];
    type metadata accessor for Agent(0);
    v37 = v28 | (v29 << 8) | (v30 << 16) | (v31 << 24) | (v32 << 32) | (v33 << 40) | (v34 << 48);
    v38 = v130;
    v39 = v37 | (v36 << 56);
    sub_1000269EC();
    v40 = sub_10004A158(v143 | (v141 << 8) | (v140 << 16) | (v142 << 24) | (v138 << 32) | (v27 << 40) | (v139 << 48) | (v35 << 56), v39);
    v42 = v41;
    v153 = v41;
    sub_100060284();
    ObjectType = swift_getObjectType(v40);
    v43 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    sub_1000269EC();
    v43(ObjectType, v42);
    sub_10005FE28(v160 + 144, (uint64_t)&v163);
    sub_10005FFC0();
    v44 = sub_100062318();
    v137 = type metadata accessor for SyncController(0);
    sub_10004113C(v137);
    sub_1000269EC();
    sub_10002679C();
    sub_1000600C0();
    sub_100060054();
    v45 = a10;
    v144 = sub_10014E1D8();
    v131 = type metadata accessor for ConnectionController();
    sub_1000088D8(v131, 128);
    v46 = sub_10002679C();
    sub_100193AB4(v46, v47, v48, v49, v50, v51, v52, v53, v100, v101, v102, v103, v104, v27, v35, v111, v114, v30, v119,
      v122);
    v155 = v54;
    v55 = type metadata accessor for PasteboardController_iOS();
    sub_1000088D8(v55, 64);
    v56 = sub_10006003C();
    v57 = sub_10001BDA4(v56);
    v58 = objc_allocWithZone((Class)type metadata accessor for DragPlatformProvider_iOS());
    v154 = v40;
    swift_unknownObjectRetain(v40);
    sub_10002679C();
    v146 = v57;
    v59 = (char *)sub_10008B870((uint64_t)v40, v153, (uint64_t)v57);
    v60 = type metadata accessor for DragController();
    v61 = sub_1000088D8(v60, 32);
    *(_QWORD *)(v61 + 16) = v59;
    *(_QWORD *)(v61 + 24) = 0x8000000000000000;
    swift_weakAssign(&v59[OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_dragController], v61);
    swift_weakAssign(v57 + 2, v61);
    v62 = type metadata accessor for DisplaySleepAssertionController();
    sub_1000088D8(v62, 113);
    sub_100060054();
    v133 = v59;
    v63 = sub_100068D8C(v44);
    v64 = (uint64_t *)(v147 + *(int *)(v135 + 36));
    v148 = *v64;
    v136 = v64[1];
    sub_10005FAFC(v157, (uint64_t)&v162, (uint64_t *)&unk_1002ABD50);
    v65 = type metadata accessor for EventController();
    sub_1000088D8(v65, 544);
    sub_100060054();
    v105 = v45;
    sub_100026AE4();
    sub_10006003C();
    sub_10006003C();
    swift_retain();
    sub_1000269EC();
    sub_10005FF54();
    swift_retain();
    sub_100129088(v155, v158, v63, v61, v160, v148, v136, (uint64_t)&v162, v156, v66, (uint64_t)v105, v144, (uint64_t)v105, v107, v109, v112, v115, v117, v120,
      v123,
      v125,
      v36,
      v128,
      v130);
    v68 = v67;
    v69 = type metadata accessor for SignalEventController();
    sub_1000088D8(v69, 50);
    v70 = sub_100026AE4();
    v149 = sub_1000A37FC(v70);
    *(_QWORD *)(v38 + 24) = v159;
    *(_QWORD *)(v38 + 32) = v155;
    *(_QWORD *)(v38 + 144) = v154;
    *(_QWORD *)(v38 + 152) = v153;
    *(_QWORD *)(v38 + 160) = v160;
    *(_QWORD *)(v38 + 40) = v61;
    *(_QWORD *)(v38 + 48) = v133;
    *(_QWORD *)(v38 + 56) = v161;
    *(_QWORD *)(v38 + 64) = v68;
    swift_retain();
    swift_unknownObjectRetain(v154);
    v134 = v133;
    sub_10006003C();
    sub_1000269EC();
    sub_10005FF54();
    sub_1000088D0();
    sub_100060200();
    v71 = sub_1001457A8();
    *(_QWORD *)(v38 + 16) = v152;
    *(_QWORD *)(v38 + 168) = v71;
    *(_QWORD *)(v38 + 176) = v44;
    *(_BYTE *)(v38 + 72) = v143;
    *(_BYTE *)(v38 + 73) = v141;
    *(_BYTE *)(v38 + 74) = v140;
    *(_BYTE *)(v38 + 75) = v142;
    *(_BYTE *)(v38 + 76) = v138;
    *(_BYTE *)(v38 + 77) = v108;
    *(_BYTE *)(v38 + 78) = v139;
    *(_BYTE *)(v38 + 79) = v110;
    *(_BYTE *)(v38 + 80) = v113;
    *(_BYTE *)(v38 + 81) = v116;
    *(_BYTE *)(v38 + 82) = v118;
    *(_BYTE *)(v38 + 83) = v121;
    *(_BYTE *)(v38 + 84) = v124;
    *(_BYTE *)(v38 + 85) = v126;
    *(_BYTE *)(v38 + 86) = v129;
    *(_BYTE *)(v38 + 87) = v127;
    sub_10000B2F8(v150, (uint64_t)&v162, 33);
    sub_100060054();
    sub_1000088D0();
    sub_10004BC0C(v157, v150, (uint64_t *)&unk_1002ABD50);
    v72 = swift_endAccess(&v162);
    *(_QWORD *)(v38 + 104) = v146;
    *(_QWORD *)(v38 + 112) = v106;
    *(_QWORD *)(v38 + 120) = v144;
    *(_QWORD *)(v38 + 128) = v63;
    *(_QWORD *)(v38 + 136) = v149;
    *(_QWORD *)(v38 + 88) = v145;
    *(_QWORD *)(v38 + 96) = v156;
    sub_100060018(v72, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v151 = v106;
    sub_10006003C();
    sub_1000600C0();
    sub_100026AE4();
    sub_1000269EC();
    sub_100060200();
    v73 = sub_10002679C();
    static OS_dispatch_queue.main.getter(v73);
    v74 = sub_1000088D8((uint64_t)&unk_100284698, 32);
    *(_QWORD *)(v74 + 24) = &off_100284678;
    v75 = swift_unknownObjectWeakInit(v74 + 16, v38);
    v76 = sub_100060250(v75, (uint64_t)sub_10005E22C);
    v78 = v77;
    v162 = v76;
    v79 = type metadata accessor for ClientAssertionController();
    sub_100026A50((unint64_t *)&unk_1002AC190, v80, (uint64_t (*)(uint64_t))type metadata accessor for ClientAssertionController);
    sub_10005FF84();
    dispatch thunk of ObservableObject.objectWillChange.getter(v79);
    sub_10005FF78();
    v81 = sub_1000088D8((uint64_t)&unk_1002846E8, 24);
    *(_QWORD *)(v81 + 16) = v78;
    v82 = type metadata accessor for ObservableObjectPublisher(0);
    swift_unknownObjectRetain_n(v78, 2);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for CloudPreferencesController();
    sub_100026A50(&qword_1002B17E0, v83, (uint64_t (*)(uint64_t))type metadata accessor for CloudPreferencesController);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v84 = sub_1000088D8((uint64_t)&unk_100284710, 24);
    sub_10005FE48(v84);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    sub_100021264((unint64_t *)&unk_1002AC1A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConnectionController);
    sub_10005FF84();
    dispatch thunk of ObservableObject.objectWillChange.getter(v131);
    sub_10005FF78();
    v85 = sub_1000088D8((uint64_t)&unk_100284738, 24);
    sub_10005FE48(v85);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for EnablementController();
    sub_100026A50((unint64_t *)&unk_1002B34A0, v86, (uint64_t (*)(uint64_t))type metadata accessor for EnablementController);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v87 = sub_1000088D8((uint64_t)&unk_100284760, 24);
    sub_10005FE48(v87);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    (*(void (**)(uint64_t))(v153 + 24))(ObjectType);
    v88 = sub_1000088D8((uint64_t)&unk_100284788, 24);
    sub_10005FE48(v88);
    Publisher<>.sink(receiveValue:)(sub_10005FDC0, v81, v82, &protocol witness table for ObservableObjectPublisher);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for EnsembleHIDController();
    sub_100026A50(&qword_1002AC1B0, v89, (uint64_t (*)(uint64_t))type metadata accessor for EnsembleHIDController);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v90 = sub_1000088D8((uint64_t)&unk_1002847B0, 24);
    sub_10005FE48(v90);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for P2PController(0);
    sub_100026A50((unint64_t *)&qword_1002AC1B8, v91, type metadata accessor for P2PController);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v92 = sub_1000088D8((uint64_t)&unk_1002847D8, 24);
    sub_10005FE48(v92);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for UniversalControlPreferences(0);
    sub_100026A50((unint64_t *)&qword_1002AC1C0, v93, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlPreferences);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v94 = sub_1000088D8((uint64_t)&unk_100284800, 24);
    sub_10005FE48(v94);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    sub_100021264((unint64_t *)&qword_1002B2970, 255, type metadata accessor for SyncController);
    sub_10005FF84();
    dispatch thunk of ObservableObject.objectWillChange.getter(v137);
    sub_10005FF78();
    v95 = sub_1000088D8((uint64_t)&unk_100284828, 24);
    sub_10005FE48(v95);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    type metadata accessor for LoginStatusController();
    sub_100026A50(&qword_1002AC1D0, v96, (uint64_t (*)(uint64_t))type metadata accessor for LoginStatusController);
    sub_10005FF84();
    sub_100060110();
    sub_10005FF78();
    v97 = sub_1000088D8((uint64_t)&unk_100284850, 24);
    sub_10005FE48(v97);
    sub_10005FE34((uint64_t)sub_10005FDC0);
    sub_10005FECC();
    sub_10005FF28();
    sub_100026AEC();
    sub_10005FF20();
    sub_10000B348();
    v98 = v162;
    swift_getObjectType(v78);
    swift_unknownObjectRetain(v78);
    sub_100040544();
    OS_dispatch_source_data_add.add(data:)(1uLL);
    sub_10005FF20();
    sub_10000E568();
    *(_QWORD *)(v38 + 224) = v98;
    *(_QWORD *)(v38 + 232) = v78;
    swift_unknownObjectRetain(v78);
    sub_100040544();
    sub_10006025C();
    sub_10004B0C4(a11);
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v154);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10006005C();
    swift_release();
    swift_release();

    sub_10005FA9C(a11, &qword_1002AAF30);
    sub_10005FA9C(v157, (uint64_t *)&unk_1002ABD50);
    sub_10005FF20();
    sub_10000E420();
    *(_QWORD *)(v155 + 80) = &off_100284628;
    swift_unknownObjectWeakAssign(v155 + 72, v38);
    sub_10000B348();
    *(_QWORD *)(v144 + 24) = &off_10028D1E0;
    swift_unknownObjectWeakAssign(v144 + 16, v68);
    sub_100041108();
    sub_1000269A0();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    sub_10005FA9C(a11, &qword_1002AAF30);
    sub_10005FA9C(v157, (uint64_t *)&unk_1002ABD50);
    sub_10005FA9C(v150, (uint64_t *)&unk_1002ABD50);
    sub_10002D108(*(_QWORD *)(v11 + 224), *(_QWORD *)(v11 + 232));
    swift_deallocPartialClassInstance(v11, v22, 240, 7);
    return 0;
  }
  return v38;
}

uint64_t sub_10004B0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[40];

  v3 = *(_QWORD *)(v1 + 48);
  sub_10005FAFC(a1, (uint64_t)v8, &qword_1002AAF30);
  v4 = v3 + OBJC_IVAR____TtC13EnsembleAgent24DragPlatformProvider_iOS_secureLayerHost;
  sub_10000B2F8(v4, (uint64_t)v7, 33);
  sub_10005F3B4((uint64_t)v8, v4);
  swift_endAccess(v7);
  v5 = *(_QWORD *)(v1 + 64) + 224;
  sub_10000B2F8(v5, (uint64_t)v8, 33);
  sub_10004BC0C(a1, v5, &qword_1002AAF30);
  return swift_endAccess(v8);
}

void sub_10004B16C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (a1)
  {
    v2 = *(id *)(v1 + 48);
    sub_10004B1BC(v2);

  }
}

uint64_t sub_10004B1BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  _BYTE v8[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + 32);
  swift_beginAccess(v4, v8, 33, 0);
  v5 = a1;
  sub_1000CA6C0();
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  sub_1000CA760(v6);
  sub_10005F348(v6, (uint64_t)v5, v4);
  return swift_endAccess(v8);
}

void sub_10004B238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  sub_1000601CC();
  a35 = v38;
  a36 = v39;
  v40 = *(_QWORD *)(v36[12] + 32);
  if (!v40)
    goto LABEL_23;
  sub_10005FF54();
  v41 = sub_1000088D0();
  v42 = dispatch thunk of UniversalControlDevice.id.getter(v41);
  v44 = v43;
  sub_10000B348();
  sub_10005FE28(v40 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&a22);
  sub_10006028C();
  if (static UniversalControlUUID.compare(lhs:rhs:)(v42, v44))
  {
    __break(1u);
  }
  else
  {
    sub_100021264(&qword_1002AC098, v45, (uint64_t (*)(uint64_t))type metadata accessor for Agent.Context);
    sub_100060194();
    ObservableObjectPublisher.send()();
    sub_10000B348();
    v46 = sub_100060284();
    v47 = v36[19];
    v48 = sub_100008904();
    v49 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    sub_10005FF54();
    v49(v48, v47);
    sub_10005FE28(v36[20] + 144, (uint64_t)&a19);
    sub_10003B1A8();
    v50 = sub_100062318();
    v51 = (_QWORD *)v36[22];
    a17 = v50;
    a18 = v51;
    sub_100021264((unint64_t *)&unk_1002AC0A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&a18, &a17, v46, v52) & 1) == 0)
    {
      sub_100060194();
      ObservableObjectPublisher.send()();
      sub_10000B348();
      v36[22] = v50;
      sub_100060054();
      sub_10002645C();
      sub_10014DC48(v50);
    }
    if (*(_BYTE *)(v36[3] + 16) == 1)
      v53 = *(_BYTE *)(v36[2] + 42);
    else
      v53 = 0;
    sub_10018F5D8(v53);
    if (*(_BYTE *)(v36[7] + 57) == 1)
    {
      v54 = *(void **)(v36[15] + OBJC_IVAR____TtC13EnsembleAgent14SyncController_configuredDevices);
      sub_1000103C0();
    }
    else
    {
      v54 = &_swiftEmptySetSingleton;
    }
    v55 = sub_100043360();
    sub_10004B67C(v55);
    a11 = v56;
    sub_10000E594();
    sub_10018F5E8((uint64_t)v54);
    a14 = v36;
    v37 = *(_QWORD *)(v36[15] + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
    if (!((unint64_t)v37 >> 62))
    {
      v57 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
  }
  if (v37 < 0)
    v78 = v37;
  else
    v78 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v57 = _CocoaArrayWrapper.endIndex.getter(v78);
LABEL_13:
  if (!v57)
  {
LABEL_22:
    sub_10002D89C();
    sub_1000DF7F4();
    sub_10018F610(v67);
    swift_bridgeObjectRetain();
    v69 = sub_100049F18(v68, a11);
    v70 = sub_1000DFAA8((uint64_t)v69);
    sub_100067EAC(v70);
    v71 = sub_10014B3F8();
    sub_100067ED8(v71, v73, v72 & 1);
    v74 = sub_10014B3F8();
    sub_10012E85C(v74, v76, v75 & 1);
    sub_100067EFC(*(_BYTE *)(a14[11] + 16) == 1);
    sub_10014B1D8();
    swift_bridgeObjectRetain();
    sub_10019390C(v77);
    swift_release();
    sub_10006005C();
    sub_10000E410();
LABEL_23:
    sub_10005FFC8();
    return;
  }
  a18 = _swiftEmptyArrayStorage;
  sub_10006038C();
  if ((v57 & 0x8000000000000000) == 0)
  {
    v58 = 0;
    v59 = a18;
    do
    {
      if ((v37 & 0xC000000000000001) != 0)
        v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v37);
      else
        v60 = sub_1000088D0();
      v61 = dispatch thunk of UniversalControlDevice.id.getter(v60);
      v63 = v62;
      sub_10000B348();
      a18 = v59;
      v65 = v59[2];
      v64 = v59[3];
      if (v65 >= v64 >> 1)
      {
        sub_100060294(v64);
        sub_1000586CC();
        v59 = a18;
      }
      v59[2] = v65 + 1;
      v66 = &v59[2 * v65];
      v66[4] = v61;
      ++v58;
      v66[5] = v63;
    }
    while (v57 != v58);
    goto LABEL_22;
  }
  __break(1u);
}

void sub_10004B67C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000DF86C();
  sub_100054520(v2, a1);
  sub_10000E420();
  sub_1000050D4();
}

uint64_t sub_10004B6B8()
{
  uint64_t v0;

  sub_100026600();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 144));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10005FA9C(v0 + 184, (uint64_t *)&unk_1002ABD50);
  sub_10002D108(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  return v0;
}

uint64_t sub_10004B770()
{
  uint64_t v0;

  sub_10004B6B8();
  return swift_deallocClassInstance(v0, 240, 7);
}

uint64_t Agent.keyfocusController.getter()
{
  return sub_10006014C(OBJC_IVAR____TtC13EnsembleAgent5Agent_keyfocusController);
}

void sub_10004B7A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE v5[40];
  _BYTE v6[24];
  _BYTE v7[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, v7, 0, 0);
  v2 = *v1;
  if (v2)
  {
    v3 = v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter;
    swift_beginAccess(v3, v6, 0, 0);
    sub_10005FAFC(v3, (uint64_t)v5, (uint64_t *)&unk_1002ABD50);
    swift_beginAccess(v2 + 184, v4, 33, 0);
    swift_retain();
    sub_10004BC0C((uint64_t)v5, v2 + 184, (uint64_t *)&unk_1002ABD50);
    swift_endAccess(v4);
    swift_release();
    sub_10005FA9C((uint64_t)v5, (uint64_t *)&unk_1002ABD50);
  }
}

void Agent.notificationCenter.getter()
{
  sub_10004BB30(&OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter);
}

void Agent.notificationCenter.setter(uint64_t a1)
{
  sub_10004BB90(a1, &OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter, (uint64_t *)&unk_1002ABD50, (void (*)(uint64_t))sub_10004B7A0);
}

void Agent.notificationCenter.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter, a1, 33);
  sub_1000050D4();
}

void sub_10004B8E4(uint64_t a1, char a2)
{
  sub_10004BC84(a1, a2, (void (*)(uint64_t))sub_10004B7A0);
}

void sub_10004B8F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, v5, 0, 0);
  if (*v1)
  {
    v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection);
    swift_beginAccess(v2, &v4, 0, 0);
    v3 = *v2;
    swift_retain();
    swift_retain();
    sub_10004B16C(v3);
    swift_release();
    swift_release();
  }
}

void Agent.eventConnection.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection, (uint64_t)v1);
  swift_retain();
  sub_10006006C();
}

void Agent.eventConnection.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v4[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection, (uint64_t)v4, 1);
  *v3 = a1;
  sub_10002D790();
  sub_10000FF50();
  sub_10004B8F0();
  sub_10002645C();
  sub_10000B338();
}

void Agent.eventConnection.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection, a1, 33);
  sub_1000050D4();
}

void sub_10004BA60(uint64_t a1, char a2)
{
  sub_10004BC84(a1, a2, (void (*)(uint64_t))sub_10004B8F0);
}

void sub_10004BA6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _BYTE v3[40];
  _BYTE v4[24];
  _BYTE v5[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, v5, 0, 0);
  if (*v1)
  {
    v2 = v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost;
    swift_beginAccess(v2, v4, 0, 0);
    sub_10005FAFC(v2, (uint64_t)v3, &qword_1002AAF30);
    swift_retain();
    sub_10004B0C4((uint64_t)v3);
    swift_release();
    sub_10005FA9C((uint64_t)v3, &qword_1002AAF30);
  }
}

void Agent.secureLayerHost.getter()
{
  sub_10004BB30(&OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost);
}

void sub_10004BB30(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[24];

  sub_10005FE28(v1 + *a1, (uint64_t)v5);
  sub_10006033C();
  sub_10005FAFC(v2, v3, v4);
  sub_10000B338();
}

void Agent.secureLayerHost.setter(uint64_t a1)
{
  sub_10004BB90(a1, &OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost, &qword_1002AAF30, (void (*)(uint64_t))sub_10004BA6C);
}

void sub_10004BB90(uint64_t a1, _QWORD *a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v8 = v4 + *a2;
  sub_10000B2F8(v8, (uint64_t)v10, 33);
  sub_10004BC0C(a1, v8, a3);
  v9 = swift_endAccess(v10);
  a4(v9);
  sub_10005FA9C(a1, a3);
}

void sub_10004BC0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100060044(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24));
  sub_1000050D4();
}

void Agent.secureLayerHost.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost, a1, 33);
  sub_1000050D4();
}

void sub_10004BC78(uint64_t a1, char a2)
{
  sub_10004BC84(a1, a2, (void (*)(uint64_t))sub_10004BA6C);
}

void sub_10004BC84(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5;

  v5 = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    a3(v5);
  sub_10000B350();
}

uint64_t sub_10004BCB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t *v53;
  id v54;
  double v55;
  unsigned __int8 v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __n128 v89;
  void *v90;
  _QWORD v92[2];
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[3];
  uint64_t v113[3];
  void *v114;
  char v115[32];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v102 = *(_QWORD *)(v2 - 8);
  v103 = v2;
  v3 = __chkstk_darwin(v2);
  v101 = v4;
  v99 = (char *)v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UniversalControlConfiguration.init()(v3);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_devices) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect) = 0;
  v5 = OBJC_IVAR____TtC13EnsembleAgent5Agent_windowSceneController;
  v6 = type metadata accessor for WindowSceneController();
  v7 = swift_allocObject(v6, 24, 7);
  v8 = type metadata accessor for WindowSceneController.Context();
  *(_QWORD *)(v7 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v8, &protocol witness table for String);
  *(_QWORD *)(v0 + v5) = v7;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context) = 0;
  v9 = (_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_contextSink);
  *v9 = 0;
  v9[1] = 0;
  v10 = v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection) = 0;
  v11 = v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated) = 0;
  *(_DWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notifyToken) = -1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_hotZones) = _swiftEmptyArrayStorage;
  v12 = (_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink);
  v13 = (void *)type metadata accessor for UniversalControlPreferences(0);
  *v12 = 0;
  v12[1] = 0;
  v14 = objc_msgSend(v13, "sharedPreferences");
  v15 = type metadata accessor for P2PController(0);
  v16 = *(unsigned int *)(v15 + 48);
  v17 = *(unsigned __int16 *)(v15 + 52);
  v93 = v15;
  v18 = (char *)swift_allocObject(v15, v16, v17);
  v19 = v14;
  v20 = sub_10005EC00(v19, v18);
  v21 = type metadata accessor for ProximityController();
  swift_allocObject(v21, 72, 7);
  v22 = sub_100102A9C();
  v107 = v20;
  v23 = *((_QWORD *)v20 + 5);
  v24 = type metadata accessor for P2PBrowserAdapter();
  v25 = swift_allocObject(v24, 24, 7);
  *(_QWORD *)(v25 + 16) = v23;
  v26 = type metadata accessor for DiscoveryController();
  v27 = swift_allocObject(v26, 145, 7);
  v28 = v19;
  swift_retain();
  swift_retain();
  v100 = v22;
  v29 = sub_10005E264(v25, v28, v22, v27);
  v30 = type metadata accessor for ClientAssertionController();
  swift_allocObject(v30, 43, 7);
  sub_10019F954();
  v111 = v31;
  v97 = type metadata accessor for EnsembleHIDController();
  swift_allocObject(v97, 192, 7);
  EnsembleHIDController.init()();
  v33 = v32;
  v34 = type metadata accessor for KeyFocusController();
  swift_allocObject(v34, 56, 7);
  v35 = KeyFocusController.init()();
  v36 = type metadata accessor for PointerController_iOS();
  swift_allocObject(v36, 136, 7);
  v37 = sub_1000B2680();
  v106 = v38;
  v104 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AgentXPCListener(0, v37)), "init");
  if (qword_1002A9930 != -1)
    swift_once(&qword_1002A9930, sub_100184FA0);
  v105 = v35;
  swift_beginAccess(&static EventDispatcher.shared, v115, 0, 0);
  v39 = qword_1002A9838;
  v40 = (_QWORD *)static EventDispatcher.shared;
  swift_retain();
  if (v39 != -1)
    swift_once(&qword_1002A9838, sub_10004337C);
  v41 = v33;
  v42 = qword_1002B6D98;
  if (qword_1002A98C8 != -1)
    swift_once(&qword_1002A98C8, sub_100101944);
  v43 = qword_1002B7000;
  v92[0] = type metadata accessor for EnablementController();
  swift_allocObject(v92[0], 104, 7);
  v44 = v28;
  v110 = v43;
  swift_retain();
  v45 = v111;
  swift_retain();
  swift_retain();
  v98 = v44;
  v46 = sub_100065FA4(v45, v42, v44);
  v47 = type metadata accessor for DeviceMovementObserver();
  swift_allocObject(v47, 41, 7);
  v48 = DeviceMovementObserver.init()();
  if (qword_1002A9830 != -1)
    swift_once(&qword_1002A9830, sub_100041238);
  v49 = qword_1002B6D90;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController) = v45;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_deviceMovementObserver) = v48;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_discoveryController) = v29;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enablementController) = v46;
  v108 = v41;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_hidController) = v41;
  v50 = v104;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyfocusController) = v105;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_listener) = v50;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_localEventDispatcher) = v40;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_loginStatusController) = v42;
  v51 = v106;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_p2pController) = v107;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_pointerController) = v51;
  v52 = v98;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_preferences) = v98;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_cloudPreferences) = v110;
  v53 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepController);
  v109 = v49;
  *v53 = v49;
  v53[1] = (uint64_t)&off_100286B30;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enabled) = *(_BYTE *)(v46 + 57);
  swift_retain_n(v49, 2);
  v54 = v52;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v98 = (_QWORD *)v29;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v95 = v104;
  swift_retain();
  *(_QWORD *)&v55 = swift_retain().n128_u64[0];
  v96 = v54;
  v56 = objc_msgSend(v54, "magicEdgesEnabled", v55);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_magicEdgeEnabled) = v56;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepState) = *(_BYTE *)(v109
                                                                               + OBJC_IVAR____TtC13EnsembleAgent20_BaseSleepController__sleepState);
  v94 = v48;
  sub_100188910();
  sub_1000E7D04();
  v104 = v40;
  v40[3] = &off_100284600;
  swift_unknownObjectWeakAssign(v40 + 2, v1);
  sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v58 = (void *)static OS_dispatch_queue.main.getter(v57);
  v59 = v46;
  v60 = swift_allocObject(&unk_100284698, 32, 7);
  *(_QWORD *)(v60 + 24) = &off_100284618;
  swift_unknownObjectWeakInit(v60 + 16, v1);
  v61 = sub_1000C8454(v58, (uint64_t)sub_10005E22C, v60);
  v63 = v62;
  v114 = v61;
  sub_100021264((unint64_t *)&unk_1002B34A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for EnablementController);
  v92[1] = v59;
  dispatch thunk of ObservableObject.objectWillChange.getter(v92[0]);
  v112[0] = v113[0];
  v64 = swift_allocObject(&unk_100284990, 24, 7);
  *(_QWORD *)(v64 + 16) = v63;
  v65 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v63, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v64, v65, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v114);
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_release();
  sub_100021264((unint64_t *)&qword_1002AC1B8, 255, type metadata accessor for P2PController);
  dispatch thunk of ObservableObject.objectWillChange.getter(v93);
  v112[0] = v113[0];
  v66 = swift_allocObject(&unk_1002849B8, 24, 7);
  *(_QWORD *)(v66 + 16) = v63;
  swift_unknownObjectRetain_n(v63, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v66, v65, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v114);
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_release();
  v67 = type metadata accessor for CloudPreferencesController();
  sub_100021264(&qword_1002B17E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CloudPreferencesController);
  dispatch thunk of ObservableObject.objectWillChange.getter(v67);
  v112[0] = v113[0];
  v68 = swift_allocObject(&unk_1002849E0, 24, 7);
  *(_QWORD *)(v68 + 16) = v63;
  swift_unknownObjectRetain_n(v63, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v68, v65, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v114);
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_release();
  v69 = type metadata accessor for SleepController(0);
  sub_100021264(&qword_1002AC380, 255, type metadata accessor for SleepController);
  v113[0] = ObservableObject<>.objectWillChange.getter(v69);
  v70 = swift_allocObject(&unk_100284A08, 24, 7);
  *(_QWORD *)(v70 + 16) = v63;
  swift_unknownObjectRetain_n(v63, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v70, v65, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v114);
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_release();
  sub_100021264(&qword_1002AC1B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for EnsembleHIDController);
  dispatch thunk of ObservableObject.objectWillChange.getter(v97);
  v112[0] = v113[0];
  v71 = swift_allocObject(&unk_100284A30, 24, 7);
  *(_QWORD *)(v71 + 16) = v63;
  swift_unknownObjectRetain_n(v63, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v71, v65, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v114);
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_release();
  v72 = v114;
  swift_getObjectType(v63);
  swift_unknownObjectRetain(v63);
  swift_bridgeObjectRetain(v72);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_unknownObjectRelease(v63);
  swift_bridgeObjectRelease();
  v73 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink);
  v74 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink);
  v75 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink + 8);
  *v73 = v72;
  v73[1] = v63;
  swift_unknownObjectRetain(v63);
  swift_bridgeObjectRetain(v72);
  sub_10002D108(v74, v75);
  sub_10004CA1C();
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v76 = v103;
  v77 = sub_100006FB4(v103, (uint64_t)qword_1002B6EB0);
  v78 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_hidController);
  v79 = swift_allocObject(&unk_100284A58, 24, 7);
  swift_weakInit(v79 + 16, v1);
  v80 = v102;
  v81 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v99, v77, v76);
  v82 = *(unsigned __int8 *)(v80 + 80);
  v83 = (v82 + 24) & ~v82;
  v84 = swift_allocObject(&unk_100284A80, v83 + v101, v82 | 7);
  *(_QWORD *)(v84 + 16) = v79;
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v84 + v83, v81, v76);
  swift_beginAccess(v78 + 24, v113, 1, 0);
  *(_QWORD *)(v78 + 24) = sub_10005FBEC;
  *(_QWORD *)(v78 + 32) = v84;
  swift_release();
  v85 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyfocusController);
  v86 = swift_allocObject(&unk_100284A58, 24, 7);
  swift_weakInit(v86 + 16, v1);
  swift_beginAccess(v85 + 40, v112, 1, 0);
  *(_QWORD *)(v85 + 40) = sub_10005FC3C;
  *(_QWORD *)(v85 + 48) = v86;
  swift_release();
  v87 = swift_allocObject(&unk_100284A58, 24, 7);
  swift_weakInit(v87 + 16, v1);
  v88 = v98;
  v98[2] = sub_10005FC44;
  v88[3] = v87;
  swift_release();
  sub_100021264(&qword_1002AC388, 255, type metadata accessor for Agent);
  v89 = swift_retain();
  v90 = v95;
  AgentXPCListener.delegate.setter(v89);
  AgentXPCListener.activate()();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease(v63);
  swift_bridgeObjectRelease();
  return v1;
}

void sub_10004CA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v1 = v0;
  sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v3 = static OS_dispatch_queue.main.getter(v2);
  v6[4] = sub_10005FC4C;
  v7 = v1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100049274;
  v6[3] = &unk_100284A98;
  v4 = _Block_copy(v6);
  v5 = v7;
  swift_retain(v1);
  swift_release(v5);
  xpc_set_event_stream_handler("com.apple.rapport.matching", v3, v4);
  _Block_release(v4);

}

unsigned __int8 *sub_10004CAE4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  int v21;
  unsigned __int8 *result;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v7 = a4 + 16;
  ServiceFilterReport.flags.getter(a1, a2);
  if ((*(unsigned __int8 *)ServiceFilterFlags.interrupt.unsafeMutableAddressor() & ~v8) == 0)
  {
    swift_beginAccess(v7, v29, 0, 0);
    if (swift_weakLoadStrong(v7))
    {
      sub_10004CEA0();
      swift_release();
    }
  }
  ServiceFilterReport.flags.getter(a1, a2);
  if ((*(unsigned __int8 *)ServiceFilterFlags.maskChanged.unsafeMutableAddressor() & ~v9) == 0)
  {
    ServiceFilterReport.filterMask.getter(a1, a2);
    v11 = v10;
    v12 = static ReportID.translation.getter();
    if ((HIDEventType.maskValue.getter(v12) & v11) != 0)
    {
      sub_10002517C(a1, a2);
      v13 = sub_10002517C(a1, a2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v34[0] = v28;
        *(_DWORD *)v16 = 136446210;
        v17 = HIDTime.description.getter(a3);
        v32 = sub_100006FCC(v17, v18, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4);
        swift_bridgeObjectRelease();
        sub_100022AEC(a1, a2);
        sub_100022AEC(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "masks changed in filter at %{public}s", v16, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

        sub_100022AEC(a1, a2);
        sub_100022AEC(a1, a2);
      }
      if (qword_1002A9930 != -1)
        swift_once(&qword_1002A9930, sub_100184FA0);
      swift_beginAccess(&static EventDispatcher.shared, v31, 0, 0);
      v19 = (unint64_t *)(static EventDispatcher.shared
                               + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime);
      swift_beginAccess(static EventDispatcher.shared + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_maskedTime, v30, 1, 0);
      *v19 = a3;
    }
  }
  ServiceFilterReport.flags.getter(a1, a2);
  v21 = v20;
  result = (unsigned __int8 *)ServiceFilterFlags.activity.unsafeMutableAddressor();
  if ((*result & ~v21) == 0)
  {
    v23 = Logger.logObject.getter(result);
    v25 = static os_log_type_t.default.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Local user activity reported", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    swift_beginAccess(v7, v34, 0, 0);
    result = (unsigned __int8 *)swift_weakLoadStrong(v7);
    if (result)
    {
      v27 = &result[OBJC_IVAR____TtC13EnsembleAgent5Agent_context];
      swift_beginAccess(&result[OBJC_IVAR____TtC13EnsembleAgent5Agent_context], &v32, 0, 0);
      if (*(_QWORD *)v27)
      {
        swift_retain();
        swift_release();
        swift_retain();
        swift_release();
        sub_10012550C();
      }
      return (unsigned __int8 *)swift_release();
    }
  }
  return result;
}

void sub_10004CEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = v0;
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B6EB0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "=== Interrupt ===", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, v9, 0, 0);
  if (*(_QWORD *)v7)
  {
    swift_retain(*(_QWORD *)(*(_QWORD *)v7 + 64));
    sub_100125558();
    v8 = swift_release();
  }
  sub_1000FD5D8(v8);
  sub_10017ECA4();
  sub_10017EA88();
  Agent.allowSystemActiveAppearance()();
}

uint64_t sub_10004CFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    Agent.allowSystemActiveAppearance()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall Agent.allowSystemActiveAppearance()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated))
  {
    sub_1000088D0();
    AnyCancellable.cancel()();
    sub_10000B348();
    *(_QWORD *)(v0 + v1) = 0;
    swift_release();
  }
  else
  {
    sub_10000B350();
  }
}

uint64_t sub_10004D088(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];

  v9 = a5 + 16;
  swift_beginAccess(a5 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    sub_10004D110(a1, a2, a3, a4);
    return swift_release();
  }
  return result;
}

void sub_10004D110(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  NSString v12;
  int IsEventUsed;
  _QWORD *v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t inited;
  Swift::Bool v18;
  uint64_t v19;
  NSString v20;
  Class isa;
  __n128 v22;
  uint64_t v23;
  _BYTE v24[24];

  v9 = (uint64_t *)(v4 + OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices);
  swift_beginAccess(v9, v24, 0, 0);
  v10 = *v9;
  swift_bridgeObjectRetain(v10);
  sub_10018F420(a1, a2, v10);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v12 = String._bridgeToObjectiveC()();
    IsEventUsed = AnalyticsIsEventUsed();

    if (IsEventUsed)
    {
      v14 = RapportStatusFlags.BLE.unsafeMutableAddressor();
      if ((*v14 & ~a4) != 0)
      {
        v15 = 0;
      }
      else if (*RapportActivityLevel.screen.unsafeMutableAddressor() == a3
             || *RapportActivityLevel.video.unsafeMutableAddressor() == a3
             || *RapportActivityLevel.user.unsafeMutableAddressor() == a3
             || *RapportActivityLevel.phoneCall.unsafeMutableAddressor() == a3)
      {
        v15 = 1;
      }
      else if (*RapportActivityLevel.unknown.unsafeMutableAddressor() == a3
             || *RapportActivityLevel.disabled.unsafeMutableAddressor() == a3
             || *RapportActivityLevel.coverClosed.unsafeMutableAddressor() == a3)
      {
        v15 = 2;
      }
      else if (*RapportActivityLevel.idle.unsafeMutableAddressor() == a3)
      {
        v15 = 2;
      }
      else
      {
        v15 = 3;
      }
      v16 = sub_1000055B0(&qword_1002AC390);
      inited = swift_initStackObject(v16, &v23);
      *(_OWORD *)(inited + 16) = xmmword_10021CFF0;
      *(_QWORD *)(inited + 32) = 0x454C42736168;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      sub_10005FC6C(0, &qword_1002AC398, NSNumber_ptr);
      *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)((*v14 & ~a4) == 0);
      *(_QWORD *)(inited + 56) = 0x5069466957736168;
      *(_QWORD *)(inited + 64) = 0xEA00000000005032;
      v18 = (*(_QWORD *)RapportStatusFlags.WiFiP2P.unsafeMutableAddressor() & ~a4) == 0;
      *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(v18);
      *(_QWORD *)(inited + 80) = 0xD000000000000014;
      *(_QWORD *)(inited + 88) = 0x8000000100254190;
      *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(v15);
      sub_10005FC6C(0, (unint64_t *)&qword_1002AC3A0, NSObject_ptr);
      Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v19, &protocol witness table for String);
      v20 = String._bridgeToObjectiveC()();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v22 = swift_bridgeObjectRelease();
      AnalyticsSendEvent(v20, isa, v22);

    }
  }
}

Swift::Void __swiftcall Agent.preventSystemActiveAppearance()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated);
  sub_10002D790();
  *(_QWORD *)(v0 + v1) = KeyFocusController.deactivate()();
  swift_release();
  if (v2)
  {
    sub_10002D790();
    AnyCancellable.cancel()();
    sub_10000F650(v2);
  }
  sub_10000B350();
}

void sub_10004D43C(void *a1)
{
  const char *string;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (string)
  {
    v2 = String.init(cString:)(string);
    v4 = v3;
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v5 = type metadata accessor for Logger(0);
    sub_100006FB4(v5, (uint64_t)qword_1002B6EB0);
    v6 = swift_bridgeObjectRetain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.default.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v13 = v11;
      *(_DWORD *)v10 = 136446210;
      swift_bridgeObjectRetain(v4);
      v12 = sub_100006FCC(v2, v4, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(v4, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "=== %{public}s ===", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
      swift_bridgeObjectRelease(v4);

    }
    else
    {

      swift_bridgeObjectRelease_n(v4, 3);
    }
  }
}

void Agent.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100060154();
  sub_10002666C(v1);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent5Agent_devices);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_windowSceneController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_cloudPreferences);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_100060270(OBJC_IVAR____TtC13EnsembleAgent5Agent_contextSink);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_discoveryController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_enablementController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_hidController);

  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_localEventDispatcher);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_loginStatusController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_keyfocusController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_p2pController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_pointerController);

  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_deviceMovementObserver);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepController));
  sub_10005FA9C(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter, (uint64_t *)&unk_1002ABD50);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection);
  sub_10005FA9C(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost, &qword_1002AAF30);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent5Agent_keyFocusDeactivated);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent5Agent_hotZones);
  sub_100060270(OBJC_IVAR____TtC13EnsembleAgent5Agent_sink);
  sub_1000050D4();
}

uint64_t Agent.__deallocating_deinit()
{
  uint64_t v0;

  Agent.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004D7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD v71[6];
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  os_log_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];
  char v94[8];
  char v95[8];
  char v96[8];

  v4 = sub_10000E440();
  v5 = sub_10006008C(v4);
  __chkstk_darwin(v5);
  sub_10000E5DC();
  v87 = v6;
  v7 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v90 = *(_QWORD *)(v7 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  v12 = type metadata accessor for UniversalControlLink(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10003D69C();
  v91 = v14;
  __chkstk_darwin(v15);
  v17 = (char *)v71 - v16;
  sub_100060210((uint64_t)v71 - v16);
  v18 = *(double *)a2;
  v19 = *(double *)(a2 + 8);
  v20 = *(unsigned __int8 *)(a2 + 56);
  v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_10005FE28((uint64_t)v21, (uint64_t)v96);
  v22 = *v21;
  if (!*v21)
    return sub_100060064((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  v89 = v20;
  sub_100060200();
  sub_1000088D0();
  v23 = sub_10014588C((uint64_t)v17);
  sub_10000B348();
  if (v23)
  {
    v86 = v7;
    v85 = v13;
    v24 = sub_10003AFBC();
    sub_10004B67C(v24);
    v83 = v25;
    sub_10000E420();
    v26 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
    inited = swift_initStackObject(v26, v95);
    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
    sub_10005FE28(*(_QWORD *)(v22 + 120) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v94);
    type metadata accessor for SyncView(0);
    type metadata accessor for SyncViewLocalData(0);
    v28 = sub_1000088D0();
    v29 = dispatch thunk of UniversalControlDevice.id.getter(v28);
    v31 = v30;
    sub_10000B348();
    *(_QWORD *)(inited + 32) = v29;
    *(_QWORD *)(inited + 40) = v31;
    v34 = sub_100068024(inited, v83, v32, v33);
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v35 = sub_10000F6E4();
    v36 = sub_100006FB4(v35, (uint64_t)qword_1002B6EB0);
    v37 = v91;
    sub_100060210(v91);
    v38 = swift_bridgeObjectRetain_n(v34, 2);
    Logger.logObject.getter(v38);
    v39 = sub_10002D844();
    v40 = sub_100040394(v39);
    v84 = v12;
    v83 = v34;
    v82 = v17;
    if (v40)
    {
      v41 = sub_10000797C(22);
      v81 = sub_10000797C(64);
      v93[0] = v81;
      *(_DWORD *)v41 = 136446466;
      v79 = v36;
      v42 = sub_100061BB4(v34);
      v80 = v31;
      v92 = sub_100006FCC(v42, v43, v93);
      v78 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v41 + 4);
      sub_100026AF4(v34);
      v44 = sub_10000E594();
      *(_WORD *)(v41 + 12) = 2082;
      v77 = v41 + 14;
      v45 = UniversalControlLink.endpoint2.getter(v44);
      v46 = UniversalControlLink.Endpoint.device.getter(v45);
      v76 = v46 >> 8;
      v75 = v46 >> 16;
      v74 = v46 >> 24;
      v73 = HIDWORD(v46);
      v72 = v46 >> 40;
      v71[5] = HIWORD(v46);
      v71[4] = HIBYTE(v46);
      v71[3] = v47 >> 8;
      v71[2] = v47 >> 16;
      v71[1] = v47 >> 24;
      v71[0] = HIDWORD(v47);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v11, v86);
      v48 = v87;
      UUID.init(uuid:)(v46, v76, v75, v74, v73, v72);
      v49 = sub_1000602E0();
      v51 = v50;
      sub_1000602C8(v48, *(uint64_t (**)(uint64_t, _QWORD))(v88 + 8));
      sub_1000599D0(8, v49, v51);
      v52 = sub_1000602C0();
      v54 = v53;
      sub_10000E420();
      v92 = sub_100006FCC(v52, v54, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v78, v77);
      v55 = swift_bridgeObjectRelease();
      v13 = v85;
      v56 = v12;
      v57 = v90;
      (*(void (**)(uint64_t, uint64_t, __n128))(v85 + 8))(v91, v56, v55);
      v58 = v79;
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v80, "Connect via magic edge: remove any links between %{public}s and %{public}s", (uint8_t *)v41, 0x16u);
      v59 = v81;
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      sub_100007958(v59);
      sub_100007958(v41);

    }
    else
    {
      sub_100026AF4(v34);
      v13 = v85;
      sub_100060064(v37, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));

      v57 = v90;
    }
    v62 = UniversalControlLink.endpoint2.getter(v60);
    UniversalControlLink.Endpoint.device.getter(v62);
    v63 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v64 = v86;
    v63(v11, v86);
    sub_10005FFC0();
    sub_100060238();
    sub_10014C4D8();
    sub_1000267C4();
    v65 = *(_QWORD *)(v22 + 32);
    v66 = sub_10002679C();
    v67 = UniversalControlLink.endpoint2.getter(v66);
    v68 = UniversalControlLink.Endpoint.device.getter(v67);
    v70 = v69;
    v63(v11, v64);
    v92 = *(_QWORD *)(v65 + 24);
    swift_bridgeObjectRetain();
    sub_10019ACB4(v68, v70, (uint64_t)v93);
    sub_10018F5E8(v92);
    sub_1000269A0();
    v17 = v82;
  }
  sub_10018F638(v18, v19, (uint64_t)v17, v89);
  sub_100060064((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  return swift_release();
}

uint64_t sub_10004DEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v2 = v0;
  v3 = type metadata accessor for UniversalControlLink(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000601B4();
  sub_100060380(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v5 = v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices;
  sub_10005FE28(v5, (uint64_t)v14);
  v6 = *(_QWORD *)v5;
  swift_bridgeObjectRetain();
  v8 = UniversalControlLink.display2.getter(v7);
  sub_10018F420(v8, v9, v6);
  LOBYTE(v5) = v10;
  sub_10000E50C();
  if ((v5 & 1) != 0)
    return sub_100060064(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v11 = (_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_10000B2F8(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, (uint64_t)v13, 32);
  if (*v11)
  {
    swift_endAccess(v13);
    sub_1000088D0();
    sub_10018FD70();
    sub_10000B348();
    return sub_100060064(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  sub_100060064(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return swift_endAccess(v13);
}

uint64_t Agent.xpcConfiguration.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration, (uint64_t)v3);
  v1 = sub_100060154();
  return sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16));
}

void Agent.xpcConfiguration.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30[3];

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v5 = sub_10000E440();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000E478();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v30[0] = 0xD000000000000017;
  v30[1] = 0x8000000100253BC0;
  v8 = UniversalControlConfiguration.id.getter(v7);
  UUID.init(uuid:)(v8, v8 >> 8, v8 >> 16, v8 >> 24, HIDWORD(v8), v8 >> 40);
  v9 = sub_1000602E0();
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  sub_1000599D0(8, v9, v11);
  v12 = sub_1000602C0();
  v14 = v13;
  sub_10000E420();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  sub_10000E50C();
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v16 = sub_10000F6E4();
  v17 = sub_100006FB4(v16, (uint64_t)qword_1002B6EB0);
  v18 = sub_100040544();
  Logger.logObject.getter(v18);
  v19 = sub_10002D844();
  if (sub_10002D948(v19))
  {
    v20 = (uint8_t *)sub_10000797C(12);
    v21 = sub_10000797C(32);
    v30[0] = v21;
    *(_DWORD *)v20 = 136446210;
    v22 = sub_100040544();
    v29 = sub_100060368(v22, v23, v30);
    sub_100060228((uint64_t)&v29, (uint64_t)v30, (uint64_t)(v20 + 4));
    sub_1000103C8(0x8000000100253BC0);
    sub_100026484((void *)&_mh_execute_header, v17, (os_log_type_t)v6, "=== %{public}s ===", v20);
    sub_1000263F4(v21, v24, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v21);
    sub_100007958((uint64_t)v20);

  }
  else
  {

    sub_100026AF4(0x8000000100253BC0);
  }
  v25 = v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration;
  sub_10000B2F8(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration, (uint64_t)v30, 33);
  v26 = sub_100060154();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24))(v25, v4, v26);
  swift_endAccess(v30);
  v28 = (_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_10005FE28(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, (uint64_t)v30);
  if (*v28)
  {
    sub_1000088D0();
    sub_10014C3BC(v4);
    sub_10000B348();
  }
  AgentXPCListener.objectDidChange()();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v4, v26);
  sub_10000E4E0();
}

void (*Agent.xpcConfiguration.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = sub_100060154();
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[6] = malloc(v6);
  v7 = malloc(v6);
  v3[7] = v7;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration, (uint64_t)v3);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v3[8] = v8;
  sub_100060380((uint64_t)v7, v8);
  return sub_10004E3A8;
}

void sub_10004E3A8(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 56);
    v4 = *(void **)(v2 + 48);
    (*(void (**)(void *, void *, _QWORD))(v2 + 64))(v4, v3, *(_QWORD *)(v2 + 32));
    Agent.xpcConfiguration.setter();
    v5 = sub_100060238();
    v6(v5);
  }
  else
  {
    v4 = *(void **)(v2 + 48);
    v3 = *(void **)(v2 + 56);
    Agent.xpcConfiguration.setter();
  }
  free(v3);
  free(v4);
  sub_10005FFE4((void *)v2);
}

uint64_t Agent.xpcConnectedDevices.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12[24];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  sub_10005FE9C(v2, (uint64_t)qword_1002B6EB0);
  v3 = sub_10002D844();
  if (sub_100040394(v3))
  {
    v4 = (_WORD *)sub_10000797C(2);
    sub_1000602B4(v4);
    sub_100040308((void *)&_mh_execute_header, v5, v6, "=== XPC: Connected Devices ===");
    sub_100007958(v1);
  }

  v7 = &v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices];
  sub_10005FE28((uint64_t)&v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices], (uint64_t)v12);
  swift_bridgeObjectRetain_n(*(_QWORD *)v7, 2);
  sub_100057E2C();
  v9 = v8;
  sub_10000E410();
  v11 = v9;
  sub_100036DCC(&v11);
  sub_10000E410();
  return v11;
}

void Agent.xpcDevices.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  sub_10005FE9C(v2, (uint64_t)qword_1002B6EB0);
  v3 = sub_10002D844();
  if (sub_100040394(v3))
  {
    v4 = (_WORD *)sub_10000797C(2);
    sub_1000602B4(v4);
    sub_100040308((void *)&_mh_execute_header, v5, v6, "=== XPC: Devices ===");
    sub_100007958(v1);
  }

  v7 = (uint64_t *)&v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_devices];
  sub_10005FE28((uint64_t)&v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_devices], (uint64_t)v17);
  v8 = *v7;
  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000103C0();
    if (v9)
      goto LABEL_7;
LABEL_18:
    sub_10000E410();
    sub_10002DA50();
    return;
  }
  if (v8 < 0)
    v16 = v8;
  else
    v16 = v8 & 0xFFFFFFFFFFFFFF8;
  sub_1000103C0();
  v9 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v9)
    goto LABEL_18;
LABEL_7:
  specialized ContiguousArray.reserveCapacity(_:)(v9);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = sub_10006035C();
      }
      else
      {
        v11 = *(_QWORD *)(v8 + 8 * v10 + 32);
        sub_1000088D0();
      }
      ++v10;
      v12 = objc_allocWithZone((Class)type metadata accessor for UniversalControlXPCDevice(0));
      v13 = UniversalControlXPCDevice.init(rawValue:)(v11);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
    }
    while (v9 != v10);
    goto LABEL_18;
  }
  __break(1u);
}

_QWORD *Agent.xpcEdges.getter()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for HotZone(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000601B4();
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v5 = sub_10000F6E4();
  sub_10005FE9C(v5, (uint64_t)qword_1002B6EB0);
  v6 = sub_10002D844();
  if (sub_1000103A0(v6))
  {
    v7 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v7 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v0, v2, "=== XPC: Edges ===", v7);
    sub_100007958((uint64_t)v7);
  }

  v8 = *(uint64_t *)((char *)&v0->isa + OBJC_IVAR____TtC13EnsembleAgent5Agent_hotZones);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    sub_100040544();
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    v10 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v19 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_10005F428(v10, v1, type metadata accessor for HotZone);
      v11 = UniversalControlLink.display1.getter();
      UniversalControlLink.edge.getter(v11);
      CGRegionGetBoundingBox(*(_QWORD *)(v1 + *(int *)(v3 + 24)));
      sub_1000602A0();
      v12 = type metadata accessor for UniversalControlEdgeRegion(0);
      sub_10004113C(v12);
      v13 = sub_10005FEF8();
      v14 = UniversalControlEdgeRegion.init(id:edge:rect:)(v13);
      sub_1000255F0(v1, type metadata accessor for HotZone);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v10 += v19;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void Agent.xpcIDS.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18[24];
  _QWORD *v19;
  char v20[24];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  sub_10005FE9C(v2, (uint64_t)qword_1002B6EB0);
  v3 = sub_10002D844();
  if (sub_100040394(v3))
  {
    v4 = (_WORD *)sub_10000797C(2);
    sub_1000602B4(v4);
    sub_100040308((void *)&_mh_execute_header, v5, v6, "=== XPC: IDS ===");
    sub_100007958(v1);
  }

  v7 = &v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_context];
  sub_10005FE28((uint64_t)&v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_context], (uint64_t)v20);
  if (*(_QWORD *)v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 96) + 40) + 64);
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v16 = v8;
      else
        v16 = v8 & 0xFFFFFFFFFFFFFF8;
      sub_1000103C0();
      v9 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (v9)
        goto LABEL_8;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_1000103C0();
      if (v9)
      {
LABEL_8:
        v19 = _swiftEmptyArrayStorage;
        sub_10006038C();
        if (v9 < 0)
        {
          __break(1u);
          return;
        }
        v10 = 0;
        v11 = v19;
        do
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            v12 = sub_10006035C();
          }
          else
          {
            v12 = *(_QWORD *)(v8 + 8 * v10 + 32);
            sub_100026AE4();
          }
          v13 = v12 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
          sub_10005FE28(v12 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)v18);
          v17 = *(_OWORD *)(v13 + *(int *)(sub_10006028C() + 36));
          sub_100026AEC();
          v19 = v11;
          v15 = v11[2];
          v14 = v11[3];
          if (v15 >= v14 >> 1)
          {
            sub_100060294(v14);
            sub_1000586CC();
            v11 = v19;
          }
          ++v10;
          v11[2] = v15 + 1;
          *(_OWORD *)&v11[2 * v15 + 4] = v17;
        }
        while (v9 != v10);
      }
    }
    sub_10000E410();
  }
}

uint64_t Agent.xpcLocalDevice.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  char v11[24];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v2 = sub_10000F6E4();
  sub_10005FE9C(v2, (uint64_t)qword_1002B6EB0);
  v3 = sub_10002D844();
  if (sub_100040394(v3))
  {
    v4 = (_WORD *)sub_10000797C(2);
    sub_1000602B4(v4);
    sub_100040308((void *)&_mh_execute_header, v5, v6, "=== XPC: Local Device ==");
    sub_100007958(v1);
  }

  v7 = &v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice];
  sub_10005FE28((uint64_t)&v0[OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice], (uint64_t)v11);
  if (!*(_QWORD *)v7)
    return 0;
  v8 = objc_allocWithZone((Class)type metadata accessor for UniversalControlXPCDevice(0));
  v9 = sub_10002D790();
  return UniversalControlXPCDevice.init(rawValue:)(v9);
}

void Agent.xpcAutomaticallyReconnect.setter(char a1)
{
  os_log_type_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v17 = 0xD000000000000021;
  v18 = 0x8000000100253BE0;
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  sub_10000E568();
  v6 = v18;
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v7 = sub_10000F6E4();
  v8 = sub_100006FB4(v7, (uint64_t)qword_1002B6EB0);
  v9 = sub_100040544();
  Logger.logObject.getter(v9);
  v10 = sub_10002D844();
  if (sub_10002D948(v10))
  {
    v11 = (uint8_t *)sub_10000797C(12);
    v12 = sub_10000797C(32);
    v17 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = sub_100040544();
    v16 = sub_100060368(v13, v14, &v17);
    sub_100060228((uint64_t)&v16, (uint64_t)&v17, (uint64_t)(v11 + 4));
    sub_1000103C8(v6);
    sub_100026484((void *)&_mh_execute_header, v8, v1, "=== %{public}s ===", v11);
    sub_1000263F4(v12, v15, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v12);
    sub_100007958((uint64_t)v11);

  }
  else
  {

    sub_100026AF4(v18);
  }
  sub_10010197C(a1 & 1);
  AgentXPCListener.objectDidChange()();
  sub_1000088AC();
}

void Agent.xpcAutomaticallyReconnect.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect);
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect, (uint64_t)v3);
  *((_BYTE *)v3 + 32) = *v4;
  sub_10000B350();
}

void sub_10004EDD4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  Agent.xpcAutomaticallyReconnect.setter(*(_BYTE *)(*(_QWORD *)a1 + 32));
  sub_100026300(v1);
}

_QWORD *sub_10004EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;

  v15 = (_QWORD *)swift_allocObject(&unk_100284968, 56, 7);
  v15[2] = v7;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a6;
  v15[6] = a7;
  v16 = type metadata accessor for Completion();
  swift_allocObject(v16, 48, 7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return Completion.init(file:line:body:)(a3, a4, a5, (uint64_t)sub_10005FB5C, (uint64_t)v15);
}

uint64_t sub_10004EECC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, __n128), char *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t var58[13];

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink))
  {
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink + 8);
    swift_getObjectType(v16);
    v34 = v15;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain(v16);
    v15 = v34;
    OS_dispatch_source_data_add.add(data:)(1uLL);
    swift_unknownObjectRelease(v16);
    swift_bridgeObjectRelease();
  }
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v17 = sub_100006FB4(v12, (uint64_t)qword_1002B6EB0);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
    v19 = __chkstk_darwin(v18);
    *(&v33 - 2) = a3;
    *(&v33 - 1) = a4;
    __chkstk_darwin(v19);
    *(&v33 - 2) = a1;
    sub_1000E45AC((int)sub_10005FB6C, v20, (int)sub_10000B008, (int)(&v33 - 4), v21, v22, v23, v24, v33, v34, v35, var58[0], var58[1], var58[2], var58[3], var58[4], var58[5], var58[6], var58[7],
      var58[8],
      var58[9],
      var58[10],
      var58[11],
      var58[12]);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    sub_100006FB4(v12, (uint64_t)qword_1002B6EB0);
    v26 = swift_bridgeObjectRetain_n(a4, 2);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.default.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      var58[0] = v31;
      v34 = a6;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain();
      v35 = sub_100006FCC(a3, a4, var58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, var58, v30 + 4);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "%{public}s Complete", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      v25 = swift_bridgeObjectRelease_n(a4, 2);
    }
  }
  return a5(a1, v25);
}

double sub_10004F234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36[13];

  v33 = a7;
  v34 = a6;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink))
  {
    v16 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sink + 8);
    swift_getObjectType(v16);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain(v16);
    OS_dispatch_source_data_add.add(data:)(1uLL);
    swift_unknownObjectRelease(v16);
    swift_bridgeObjectRelease();
  }
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v17 = sub_100006FB4(v12, (uint64_t)qword_1002B6EB0);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
    v19 = __chkstk_darwin(v18);
    *(&v33 - 2) = a4;
    *(&v33 - 1) = a5;
    __chkstk_darwin(v19);
    *(&v33 - 2) = a2;
    sub_1000E45AC((int)sub_10005FDBC, v20, (int)sub_100026210, (int)(&v33 - 4), v21, v22, v23, v24, v33, v34, v35, v36[0], v36[1], v36[2], v36[3], v36[4], v36[5], v36[6], v36[7],
      v36[8],
      v36[9],
      v36[10],
      v36[11],
      v36[12]);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    sub_100006FB4(v12, (uint64_t)qword_1002B6EB0);
    v25 = swift_bridgeObjectRetain_n(a5, 2);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v36[0] = v30;
      *(_DWORD *)v29 = 136446210;
      swift_bridgeObjectRetain();
      v35 = sub_100006FCC(a4, a5, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v29 + 4);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "%{public}s Complete", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
  }
  sub_100049B94(a1);
  sub_10004F730(v31, &qword_1002AC258, (void (*)(uint64_t, uint64_t, void **))sub_10005A75C);
  ((void (*)(void))v34)();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10004F57C(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x64656C69614620;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  return v8;
}

void sub_10004F5FC(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC120, (void (*)(uint64_t, uint64_t, void **))sub_100059A88);
}

void sub_10004F610(uint64_t a1, void (*a2)(__int128 *__return_ptr, __int128 *), uint64_t a3)
{
  void *v6;
  void *v7;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1000055B0(&qword_1002AC0B8);
    v6 = (void *)sub_10006015C();
  }
  else
  {
    v6 = &_swiftEmptyDictionarySingleton;
  }
  v7 = v6;
  sub_1000103C0();
  sub_1000269EC();
  sub_10005A2D0(a1, a2, a3, 1, &v7);
  sub_10000FF50();
  sub_10000E410();
  sub_100026914();
}

void sub_10004F6A4(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC1F8, (void (*)(uint64_t, uint64_t, void **))sub_10005ABF4);
}

void sub_10004F6B8(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC1D8, (void (*)(uint64_t, uint64_t, void **))sub_10005AFB4);
}

void sub_10004F6CC(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC1E8, (void (*)(uint64_t, uint64_t, void **))sub_10005B344);
}

void sub_10004F6E0(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC210, (void (*)(uint64_t, uint64_t, void **))sub_10005B624);
}

void sub_10004F6F4(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC368, (void (*)(uint64_t, uint64_t, void **))sub_10005B8F8);
}

void sub_10004F708(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC238, (void (*)(uint64_t, uint64_t, void **))sub_10005C008);
}

void sub_10004F71C(uint64_t a1)
{
  sub_10004F730(a1, &qword_1002AC220, (void (*)(uint64_t, uint64_t, void **))sub_10005BC78);
}

void sub_10004F730(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  void *v4;
  uint64_t v5;
  void *v6;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_10006017C(a1, a2);
    v4 = (void *)sub_10006015C();
  }
  else
  {
    v4 = &_swiftEmptyDictionarySingleton;
  }
  v6 = v4;
  v5 = sub_1000103C0();
  a3(v5, 1, &v6);
  sub_10000E410();
  sub_100026914();
}

void Agent.xpcConnect(to:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t inited;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[48];
  uint64_t v77[4];

  sub_10002626C();
  v64 = v1;
  v65 = v2;
  v4 = v3;
  v6 = v5;
  v73 = v5 >> 8;
  v74 = v0;
  v68 = v5 >> 24;
  v69 = v5 >> 16;
  v67 = HIDWORD(v5);
  v71 = HIWORD(v5);
  v72 = v5 >> 40;
  v70 = HIBYTE(v5);
  v7 = v3 >> 8;
  v8 = v3 >> 16;
  v9 = v3 >> 24;
  v10 = HIDWORD(v3);
  v11 = v3 >> 40;
  v12 = HIWORD(v3);
  v13 = HIBYTE(v3);
  v14 = sub_10000E440();
  v15 = sub_10006008C(v14);
  __chkstk_darwin(v15);
  sub_10002641C();
  v18 = v17 - v16;
  strcpy((char *)v77, "XPC: Connect ");
  HIWORD(v77[1]) = -4864;
  v56 = v13;
  v57 = v12;
  v58 = v11;
  v59 = v10;
  v60 = v9;
  v61 = v8;
  v62 = v7;
  v66 = v4;
  v19 = UUID.init(uuid:)(v6, v73, v69, v68, v67, v72);
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  sub_1000602C8(v18, *(uint64_t (**)(uint64_t, _QWORD))(v63 + 8));
  sub_1000599D0(8, v20, v22);
  v23 = sub_1000602C0();
  v25 = v24;
  sub_10000E420();
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  sub_10002D89C();
  v28 = v77[0];
  v27 = v77[1];
  v29 = sub_10004EDFC(v77[0], v77[1], 0xD000000000000054, 0x8000000100253C10, 624, v64, v65);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v30 = sub_10000F6E4();
  v31 = sub_100006FB4(v30, (uint64_t)qword_1002B6EB0);
  v32 = sub_10003B1A8();
  Logger.logObject.getter(v32);
  v33 = sub_10002D844();
  if (os_log_type_enabled(v31, v33))
  {
    v34 = (uint8_t *)sub_10000797C(12);
    v35 = sub_10000797C(32);
    v77[0] = v35;
    *(_DWORD *)v34 = 136446210;
    sub_10003B1A8();
    v75 = sub_100006FCC(v28, v27, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v34 + 4);
    sub_1000103C8(v27);
    sub_100026484((void *)&_mh_execute_header, v31, v33, "=== %{public}s ===", v34);
    sub_1000263F4(v35, v36, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v35);
    sub_100007958((uint64_t)v34);

  }
  else
  {

    sub_100026AF4(v77[1]);
  }
  v37 = (uint64_t *)(v74 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  v38 = sub_10005FE28(v74 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, (uint64_t)v77);
  v39 = *v37;
  if (*v37)
  {
    sub_100026AE4();
    sub_1000088D0();
    sub_10018FE58();
    v41 = v40;
    v43 = v42;
    sub_10000B348();
    if ((v41 & 1) != 0)
    {
      v44 = sub_1000088D8((uint64_t)&unk_1002845C0, 48);
      *(_QWORD *)(v44 + 16) = v39;
      *(_BYTE *)(v44 + 24) = v6;
      *(_BYTE *)(v44 + 25) = v73;
      *(_BYTE *)(v44 + 26) = v69;
      *(_BYTE *)(v44 + 27) = v68;
      *(_BYTE *)(v44 + 28) = v67;
      *(_BYTE *)(v44 + 29) = v72;
      *(_BYTE *)(v44 + 30) = v71;
      *(_BYTE *)(v44 + 31) = v70;
      *(_BYTE *)(v44 + 32) = v66;
      *(_BYTE *)(v44 + 33) = v62;
      *(_BYTE *)(v44 + 34) = v61;
      *(_BYTE *)(v44 + 35) = v60;
      *(_BYTE *)(v44 + 36) = v59;
      *(_BYTE *)(v44 + 37) = v58;
      *(_BYTE *)(v44 + 38) = v57;
      *(_BYTE *)(v44 + 39) = v56;
      *(_QWORD *)(v44 + 40) = v29;
      v45 = type metadata accessor for Completion();
      sub_1000088D8(v45, 48);
      sub_100026AE4();
      sub_1000600C0();
      v46 = Completion.init(file:line:body:)(0xD000000000000054, 0x8000000100253C10, 639, (uint64_t)sub_10005E010, v44);
      v47 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
      inited = swift_initStackObject(v47, v76);
      *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
      *(_BYTE *)(inited + 32) = v6;
      *(_BYTE *)(inited + 33) = v73;
      *(_BYTE *)(inited + 34) = v69;
      *(_BYTE *)(inited + 35) = v68;
      *(_BYTE *)(inited + 36) = v67;
      *(_BYTE *)(inited + 37) = v72;
      *(_BYTE *)(inited + 38) = v71;
      *(_BYTE *)(inited + 39) = v70;
      *(_BYTE *)(inited + 40) = v66;
      *(_BYTE *)(inited + 41) = v62;
      *(_BYTE *)(inited + 42) = v61;
      *(_BYTE *)(inited + 43) = v60;
      *(_BYTE *)(inited + 44) = v59;
      *(_BYTE *)(inited + 45) = v58;
      *(_BYTE *)(inited + 46) = v57;
      *(_BYTE *)(inited + 47) = v56;
      sub_1000088D0();
      sub_100060054();
      sub_1000FDC0C(inited, (uint64_t)sub_10005E01C, (uint64_t)v46, (void (*)(uint64_t, _QWORD *))sub_1000FE6B8);
      sub_10006005C();
      swift_setDeallocating(inited);
      sub_10006005C();
      sub_10000B348();
    }
    else
    {
      sub_100060208(v43);
    }
    swift_errorRelease(v43);
    sub_10000B364();
    sub_100026AEC();
  }
  else
  {
    sub_100060018(v38, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v49 = sub_10005FF98();
    v55 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v49, v50, v51, v52, v53, v54, 628);
    sub_100060208((uint64_t)v55);
    sub_10000B364();

  }
  sub_10000E4E0();
}

uint64_t sub_10004FD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v11;

  swift_retain();
  swift_errorRetain(a1);
  v8 = sub_100049AE8(a1, a2, a3, a4);
  if ((v9 & 1) == 0)
    return Completion.callAsFunction(_:)(0);
  v11 = v8;
  Completion.callAsFunction(_:)(v8);
  return sub_100013530(v11, 1);
}

void sub_10004FDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  Swift::String v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;

  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = (_QWORD *)v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1000DF7F4();
  swift_bridgeObjectRetain();
  sub_100057E2C();
  v11 = v10;
  swift_bridgeObjectRelease();
  v53 = v11;
  sub_100036DCC(&v53);
  swift_bridgeObjectRelease();
  v12 = v53;
  v13 = *(_QWORD *)(v53 + 16);
  if (v13)
  {
    v53 = 0;
    v54 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v53 = 0xD000000000000010;
    v54 = 0x8000000100253C70;
    v14 = *(_QWORD *)(v12 + 16);
    v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      v47 = a2;
      v48 = a3;
      v50 = v4;
      v55 = _swiftEmptyArrayStorage;
      sub_100058678();
      v49 = v12;
      v16 = v12 + 47;
      do
      {
        v17 = UUID.init(uuid:)(*(unsigned __int8 *)(v16 - 15), *(unsigned __int8 *)(v16 - 14), *(unsigned __int8 *)(v16 - 13), *(unsigned __int8 *)(v16 - 12), *(unsigned __int8 *)(v16 - 11), *(unsigned __int8 *)(v16 - 10));
        v18 = UUID.uuidString.getter(v17);
        v20 = v19;
        (*(void (**)(char *, _QWORD *))(v51 + 8))(v9, v52);
        v21 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0)
          v21 = v18;
        v22 = 7;
        if (((v20 >> 60) & ((v18 & 0x800000000000000) == 0)) != 0)
          v22 = 11;
        v23 = v22 | (v21 << 16);
        v24 = String.index(_:offsetBy:limitedBy:)(15, 8, v23, v18, v20);
        if ((v25 & 1) != 0)
          v26 = v23;
        else
          v26 = v24;
        v27 = String.subscript.getter(15, v26);
        swift_bridgeObjectRelease();
        v28 = static String._fromSubstring(_:)(v27);
        v30 = v29;
        swift_bridgeObjectRelease();
        v15 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
        {
          sub_100058678();
          v15 = v55;
        }
        v31 = v15[2];
        if (v31 >= v15[3] >> 1)
        {
          sub_100058678();
          v15 = v55;
        }
        v16 += 16;
        v15[2] = v31 + 1;
        v32 = &v15[2 * v31];
        v32[4] = v28;
        v32[5] = v30;
        --v14;
      }
      while (v14);
      v12 = v49;
      v4 = v50;
      a2 = v47;
      a3 = v48;
    }
    v33._countAndFlagsBits = Array.description.getter(v15, &type metadata for String);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v53;
    v34 = v54;
  }
  else
  {
    v35 = 0xD000000000000013;
    v34 = 0x8000000100253C90;
  }
  v52 = sub_10004EDFC(v35, v34, 0xD000000000000054, 0x8000000100253C10, 664, a2, a3);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v36 = type metadata accessor for Logger(0);
  sub_100006FB4(v36, (uint64_t)qword_1002B6EB0);
  swift_bridgeObjectRetain();
  v38 = Logger.logObject.getter(v37);
  v40 = static os_log_type_t.default.getter(v38, v39);
  if (os_log_type_enabled(v38, v40))
  {
    v50 = v4;
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v53 = v42;
    *(_DWORD *)v41 = 136446210;
    swift_bridgeObjectRetain();
    v55 = (_QWORD *)sub_100006FCC(v35, v34, &v53);
    v4 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 4);
    swift_bridgeObjectRelease_n(v34, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v40, "=== %{public}s ===", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v34, 2);
  }
  v43 = (_QWORD *)(v4 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  swift_beginAccess(v4 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, &v53, 0, 0);
  if (*v43)
  {
    if (v13)
    {
      swift_retain();
      swift_retain();
      v44 = v12 + 40;
      do
      {
        sub_100146030();
        v44 += 16;
        --v13;
      }
      while (v13);
      swift_release();
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_release();
      sub_10014C6D8();
    }
    Completion.callAsFunction(_:)(0);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    sub_10005FC6C(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v45 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6718, 0x65746E6F43206F4ELL, 0xEA00000000007478, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/Agent.swift", 84, 2, 668);
    Completion.callAsFunction(_:)((uint64_t)v45);
    swift_release();

  }
}

void Agent._xpcDisconnect<A>(from:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  Swift::String v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_10000E440();
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  sub_1000262EC();
  __chkstk_darwin(v14);
  sub_10002641C();
  v17 = v16 - v15;
  __chkstk_darwin(v18);
  sub_10000E478();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v12, v6);
  v20 = sub_100033B3C();
  Set.init<A>(_:)(v1, &type metadata for UniversalControlDeviceID, v6, v20, v4);
  swift_bridgeObjectRetain();
  sub_100057E2C();
  v22 = v21;
  sub_10000E420();
  v75 = v22;
  sub_100036DCC(&v75);
  sub_10000E420();
  v23 = v75;
  v24 = *(_QWORD *)(v75 + 16);
  if (v24)
  {
    v69 = v10;
    v70 = v8;
    v75 = 0;
    v76 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v75 = 0xD000000000000010;
    v76 = 0x8000000100253C70;
    v25 = *(_QWORD *)(v23 + 16);
    v26 = _swiftEmptyArrayStorage;
    if (v25)
    {
      v71 = v2;
      v77 = _swiftEmptyArrayStorage;
      sub_100058678();
      v68 = v23;
      v27 = v23 + 47;
      do
      {
        v28 = UUID.init(uuid:)(*(unsigned __int8 *)(v27 - 15), *(unsigned __int8 *)(v27 - 14), *(unsigned __int8 *)(v27 - 13), *(unsigned __int8 *)(v27 - 12), *(unsigned __int8 *)(v27 - 11), *(unsigned __int8 *)(v27 - 10));
        v29 = UUID.uuidString.getter(v28);
        v31 = v30;
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v17, v74);
        v32 = HIBYTE(v31) & 0xF;
        if ((v31 & 0x2000000000000000) == 0)
          v32 = v29;
        v33 = 7;
        if (((v31 >> 60) & ((v29 & 0x800000000000000) == 0)) != 0)
          v33 = 11;
        v34 = v33 | (v32 << 16);
        v35 = String.index(_:offsetBy:limitedBy:)(15, 8, v34, v29, v31);
        if ((v36 & 1) != 0)
          v37 = v34;
        else
          v37 = v35;
        v38 = String.subscript.getter(15, v37);
        sub_10000E568();
        v39 = static String._fromSubstring(_:)(v38);
        v41 = v40;
        sub_10000E410();
        v26 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
        {
          sub_100058678();
          v26 = v77;
        }
        v43 = v26[2];
        v42 = v26[3];
        if (v43 >= v42 >> 1)
        {
          sub_100060294(v42);
          sub_100058678();
          v26 = v77;
        }
        v27 += 16;
        v26[2] = v43 + 1;
        v44 = &v26[2 * v43];
        v44[4] = v39;
        v44[5] = v41;
        --v25;
      }
      while (v25);
      v2 = v71;
      v23 = v68;
    }
    v45._countAndFlagsBits = Array.description.getter(v26, &type metadata for String);
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    sub_10000E568();
    v47 = v75;
    v46 = v76;
    v10 = v69;
    v8 = v70;
  }
  else
  {
    v47 = 0xD000000000000013;
    v46 = 0x8000000100253C90;
  }
  sub_100060244();
  sub_10004EDFC(v47, v46, v48, v49, 664, v10, v8);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v50 = sub_10000F6E4();
  v51 = sub_100006FB4(v50, (uint64_t)qword_1002B6EB0);
  v52 = sub_10005FFC0();
  Logger.logObject.getter(v52);
  v53 = sub_10002D844();
  if (sub_10006016C(v53))
  {
    v54 = (uint8_t *)sub_10000797C(12);
    v72 = v2;
    v55 = sub_10000797C(32);
    v75 = v55;
    *(_DWORD *)v54 = 136446210;
    sub_10005FFC0();
    v77 = (_QWORD *)sub_100006FCC(v47, v46, &v75);
    sub_100060228((uint64_t)&v77, (uint64_t)&v78, (uint64_t)(v54 + 4));
    sub_1000103C8(v46);
    sub_100026484((void *)&_mh_execute_header, v51, (os_log_type_t)v8, "=== %{public}s ===", v54);
    sub_1000263F4(v55, v56, (uint64_t)&type metadata for Any + 8);
    v57 = v55;
    v2 = v72;
    sub_100007958(v57);
    sub_100007958((uint64_t)v54);

  }
  else
  {

    sub_100026AF4(v46);
  }
  v58 = (_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_10005FE28((uint64_t)v58, (uint64_t)&v75);
  if (*v58)
  {
    if (v24)
    {
      swift_retain();
      sub_100026AE4();
      v59 = v23 + 40;
      do
      {
        sub_100146030();
        v59 += 16;
        --v24;
      }
      while (v24);
      sub_100041108();
    }
    else
    {
      swift_retain();
      sub_100026AE4();
      sub_100041108();
      sub_10014C6D8();
    }
    sub_10006027C(0);
    sub_10000FF50();
    sub_10002645C();
    sub_100026AEC();
  }
  else
  {
    v60 = sub_100041108();
    sub_100060018(v60, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v61 = sub_10005FF98();
    v67 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v61, v62, v63, v64, v65, v66, 668);
    sub_10006027C((uint64_t)v67);
    sub_10000FF50();

  }
  sub_10000E4E0();
}

void Agent.xpcDisconnect(from:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t inited;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_1000601CC();
  a35 = v36;
  a36 = v37;
  v61 = v38;
  v60 = v39;
  v41 = v40;
  v43 = v42;
  v44 = v42 >> 8;
  v45 = v42 >> 16;
  v46 = v42 >> 24;
  v47 = HIDWORD(v42);
  v48 = v42 >> 40;
  v49 = HIWORD(v42);
  v50 = HIBYTE(v42);
  v53 = v40 >> 8;
  v54 = v40 >> 16;
  v55 = v40 >> 24;
  v56 = HIDWORD(v40);
  v57 = v40 >> 40;
  v58 = HIWORD(v40);
  v59 = HIBYTE(v40);
  v51 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  inited = swift_initStackObject(v51, &a19);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_BYTE *)(inited + 32) = v43;
  *(_BYTE *)(inited + 33) = v44;
  *(_BYTE *)(inited + 34) = v45;
  *(_BYTE *)(inited + 35) = v46;
  *(_BYTE *)(inited + 36) = v47;
  *(_BYTE *)(inited + 37) = v48;
  *(_BYTE *)(inited + 38) = v49;
  *(_BYTE *)(inited + 39) = v50;
  *(_BYTE *)(inited + 40) = v41;
  *(_BYTE *)(inited + 41) = v53;
  *(_BYTE *)(inited + 42) = v54;
  *(_BYTE *)(inited + 43) = v55;
  *(_BYTE *)(inited + 44) = v56;
  *(_BYTE *)(inited + 45) = v57;
  *(_BYTE *)(inited + 46) = v58;
  *(_BYTE *)(inited + 47) = v59;
  sub_10004FDD8(inited, v60, v61);
  swift_setDeallocating(inited);
  sub_10005FFC8();
}

Swift::Void __swiftcall Agent.xpcDisconnect()()
{
  sub_10004FDD8((uint64_t)_swiftEmptyArrayStorage, (uint64_t)CGSize.init(_:), 0);
}

uint64_t Agent.xpcDiagnose(completion:)(void (*a1)(uint64_t))
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v4 = sub_10000F6E4();
  sub_10005FE9C(v4, (uint64_t)qword_1002B6EB0);
  v5 = sub_10002D844();
  if (sub_1000103A0(v5))
  {
    v6 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v6 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v1, v2, "=== XPC: Diagnose ===", v6);
    sub_100007958((uint64_t)v6);
  }

  v7 = type metadata accessor for PropertyListTypeEncoder();
  inited = swift_initStackObject(v7, v15);
  sub_100050B48(inited, (void (*)(char *, uint64_t, uint64_t))v1, &v13, &v14);
  v9 = sub_100060238();
  sub_10002517C(v9, v10);
  v11 = sub_100060238();
  a1(v11);
  sub_100060184();
  return sub_100060184();
}

void sub_100050B48(uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  BOOL v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  void (*v76)(void);
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(void);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, unint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  Class isa;
  double v148;
  id v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  void *v155;
  uint64_t v156;
  __int128 v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  _OWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  char *v170;
  char *v171;
  void (*v172)(char *, uint64_t, uint64_t);
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[27];
  _BYTE v184[209];
  _QWORD v185[3];
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  unsigned __int8 v203;
  __int128 v204;
  _OWORD v205[4];

  v179 = a3;
  v5 = v4;
  v182 = a1;
  v169 = a4;
  v175 = sub_1000055B0(&qword_1002AC268);
  v7 = __chkstk_darwin(v175);
  v174 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v173 = (uint64_t)&v157 - v10;
  v11 = __chkstk_darwin(v9);
  v171 = (char *)&v157 - v12;
  __chkstk_darwin(v11);
  v170 = (char *)&v157 - v13;
  v14 = sub_1000055B0((uint64_t *)&unk_1002AC270);
  v178 = sub_1000055B0(qword_1002AAF90);
  v15 = *(_QWORD *)(v178 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v176 = v16;
  v19 = swift_allocObject(v14, v18 + 9 * v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_10021E830;
  v20 = enum case for UniversalControlDiagnoseCategory.circle(_:);
  v21 = type metadata accessor for UniversalControlDiagnoseCategory(0);
  v180 = *(_QWORD *)(v21 - 8);
  v181 = v21;
  v22 = v19 + v18;
  v177 = *(_QWORD *)(v180 + 104);
  ((void (*)(uint64_t, uint64_t))v177)(v19 + v18, v20);
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC280);
  sub_10005F974(&qword_1002AC288, &qword_1002AC280);
  *(_QWORD *)&v184[32] = v23;
  v172 = a2;
  v24 = (uint64_t *)((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  swift_beginAccess((char *)a2 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, &v188, 0, 0);
  if (*v24)
  {
    swift_retain();
    v25 = sub_10003678C();
    v27 = v26;
    v29 = v28;
    swift_release();
  }
  else
  {
    v25 = 0;
    v27 = 0;
    v29 = 0;
  }
  *(_QWORD *)v184 = v25;
  *(_QWORD *)&v184[8] = v27;
  *(_QWORD *)&v184[16] = v29;
  v30 = PropertyListTypeEncoder.encode(_:)(v184);
  if (v4)
  {
    sub_10005FAC0(v184);
    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v22, v181);
    *(_QWORD *)(v19 + 16) = 0;
    swift_setDeallocating(v19);
    sub_100031E34();
LABEL_16:
    *v179 = v5;
    return;
  }
  v31 = v30;
  v32 = v22;
  v33 = (uint64_t *)(v22 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v33[3] = swift_getObjectType(v31);
  *v33 = v31;
  v168 = v22 + v176;
  ((void (*)(void))v177)();
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC298);
  sub_10005F974((unint64_t *)&unk_1002AC2A0, &qword_1002AC298);
  *(_QWORD *)&v184[32] = v34;
  if (*v24)
  {
    swift_retain();
    v35 = sub_1001462C0();
    v37 = v36;
    swift_release();
  }
  else
  {
    v35 = 0;
    v37 = 1;
  }
  *(_QWORD *)v184 = v35;
  *(_QWORD *)&v184[8] = v37;
  v38 = PropertyListTypeEncoder.encode(_:)(v184);
  v39 = (uint64_t *)(v168 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v39[3] = swift_getObjectType(v38);
  *v39 = v38;
  v167 = v22 + 2 * v176;
  ((void (*)(void))v177)();
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC2B0);
  sub_10005F974(&qword_1002AC2B8, &qword_1002AC2B0);
  *(_QWORD *)&v184[32] = v40;
  v41 = *v24;
  if (*v24)
  {
    swift_retain();
    sub_100190B90();
    v43 = v42;
    v45 = v44;
    v47 = v46;
    swift_release();
    v41 = v43 & 1;
    v32 = v22;
  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  *(_QWORD *)v184 = v41;
  *(_QWORD *)&v184[8] = v45;
  *(_QWORD *)&v184[16] = v47;
  v48 = PropertyListTypeEncoder.encode(_:)(v184);
  v49 = (uint64_t *)(v167 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v49[3] = swift_getObjectType(v48);
  *v49 = v48;
  v166 = (_OWORD *)(v32 + 3 * v176);
  ((void (*)(void))v177)();
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC2C8);
  sub_10005F974((unint64_t *)&unk_1002AC2D0, &qword_1002AC2C8);
  *(_QWORD *)&v184[32] = v50;
  v51 = swift_allocObject(&unk_1002848A0, 57, 7);
  *(_QWORD *)v184 = v51;
  v52 = *v24;
  if (*v24)
  {
    swift_retain();
    sub_100079994(&v189);
    v164 = v189;
    v165 = v190;
    v163 = v191;
    v53 = v192;
    v54 = v193;
    swift_release();
    v55 = v164;
    v56 = v163;
    v52 = v165;
  }
  else
  {
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0uLL;
  }
  *(_OWORD *)(v51 + 16) = v55;
  *(_QWORD *)(v51 + 32) = v52;
  *(_QWORD *)(v51 + 40) = v56;
  *(_QWORD *)(v51 + 48) = v53;
  *(_BYTE *)(v51 + 56) = v54;
  v57 = PropertyListTypeEncoder.encode(_:)(v184);
  v58 = (uint64_t *)((char *)v166 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v58[3] = swift_getObjectType(v57);
  *v58 = v57;
  v59 = v22;
  v165 = v22 + 4 * v176;
  v60 = v181;
  ((void (*)(void))v177)();
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC2E0);
  sub_10005F974(&qword_1002AC2E8, &qword_1002AC2E0);
  *(_QWORD *)&v184[32] = v61;
  v62 = swift_allocObject(&unk_1002848C8, 128, 7);
  *(_QWORD *)v184 = v62;
  if (*v24)
  {
    *(_QWORD *)&v164 = v62;
    swift_retain();
    sub_100125938();
    v163 = v195;
    v159 = v196;
    v63 = v197;
    v64 = v198;
    v158 = v199;
    v161 = v201;
    v162 = v200;
    v160 = v202;
    v65 = v203;
    v157 = v204;
    swift_release();
    v66 = v163;
    v62 = v164;
    v67 = v159 | (v63 << 8);
    *((_QWORD *)&v69 + 1) = v64;
    *(_QWORD *)&v69 = v63;
    v68 = v69 >> 56;
    v60 = v181;
    v70 = v158 == 0;
    *(_OWORD *)(v164 + 16) = v194;
    v71 = v157;
    *(_QWORD *)(v62 + 32) = v66;
    *(_QWORD *)(v62 + 40) = v67;
    if (v70)
      v72 = 0;
    else
      v72 = 256;
    v73 = v72 & 0xFFFFFFFFFFFFFF00 | HIBYTE(v64);
    v59 = v22;
    *(_QWORD *)(v62 + 48) = v68;
    *(_QWORD *)(v62 + 56) = v73;
    v74 = v161;
    *(_OWORD *)(v62 + 64) = v162;
    *(_OWORD *)(v62 + 80) = v74;
    *(_QWORD *)(v62 + 96) = v160;
  }
  else
  {
    v65 = 0;
    *(_QWORD *)(v62 + 96) = 0;
    v71 = 0uLL;
    *(_OWORD *)(v62 + 64) = 0u;
    *(_OWORD *)(v62 + 80) = 0u;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    *(_OWORD *)(v62 + 16) = 0u;
  }
  *(_QWORD *)(v62 + 104) = v65;
  *(_OWORD *)(v62 + 112) = v71;
  v75 = PropertyListTypeEncoder.encode(_:)(v184);
  v76 = (void (*)(void))v177;
  v77 = v75;
  v78 = (uint64_t *)(v165 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v78[3] = swift_getObjectType(v77);
  *v78 = v77;
  *(_QWORD *)&v164 = v59 + 5 * v176;
  v76();
  *(_QWORD *)&v184[24] = sub_1000055B0(&qword_1002AC2F8);
  sub_10005F974((unint64_t *)&unk_1002AC300, &qword_1002AC2F8);
  *(_QWORD *)&v184[32] = v79;
  if (*v24)
  {
    swift_retain();
    v80 = sub_1001463F0();
    v82 = v81;
    v60 = v181;
    swift_release();
  }
  else
  {
    v80 = 0;
    v82 = 0;
  }
  *(_QWORD *)v184 = v80;
  *(_QWORD *)&v184[8] = v82;
  v83 = PropertyListTypeEncoder.encode(_:)(v184);
  v84 = (uint64_t *)(v164 + *(int *)(v178 + 48));
  sub_10005FAC0(v184);
  v84[3] = swift_getObjectType(v83);
  *v84 = v83;
  v85 = (void (*)(char *, uint64_t, uint64_t))(v59 + 6 * v176);
  ((void (*)(_QWORD, _QWORD, uint64_t))v76)(v85, enum case for UniversalControlDiagnoseCategory.peer(_:), v60);
  sub_1000FD83C((uint64_t)v205);
  *(_QWORD *)&v184[24] = &type metadata for P2PController.DiagnosticState;
  *(_QWORD *)&v184[32] = sub_10005F894();
  v86 = (_OWORD *)swift_allocObject(&unk_1002848F0, 80, 7);
  *(_QWORD *)v184 = v86;
  v87 = v205[1];
  v86[1] = v205[0];
  v86[2] = v87;
  v88 = v205[3];
  v86[3] = v205[2];
  v86[4] = v88;
  v89 = PropertyListTypeEncoder.encode(_:)(v184);
  v90 = *(int *)(v178 + 48);
  v91 = v176;
  v172 = v85;
  v92 = (uint64_t *)((char *)v85 + v90);
  sub_10005FAC0(v184);
  v92[3] = swift_getObjectType(v89);
  *v92 = v89;
  v93 = v60;
  v94 = v59 - v91 + 8 * v91;
  v95 = (void (*)(void))v177;
  ((void (*)(uint64_t, _QWORD, uint64_t))v177)(v94, enum case for UniversalControlDiagnoseCategory.preferences(_:), v93);
  v186 = sub_1000055B0(&qword_1002AC318);
  sub_10005F974((unint64_t *)&unk_1002AC320, &qword_1002AC318);
  v187 = v96;
  v97 = swift_allocObject(&unk_100284918, 225, 7);
  v98 = v97 + 16;
  v185[0] = v97;
  if (*v24)
  {
    swift_retain();
    sub_1001464E4();
    swift_release();
    memcpy(v184, v183, sizeof(v184));
    CGSize.init(_:)(v184);
  }
  else
  {
    sub_10005FAE4(v184);
  }
  sub_10005FA70((uint64_t)v184, v98, &qword_1002AC318);
  v99 = PropertyListTypeEncoder.encode(_:)(v185);
  v100 = (uint64_t *)(v94 + *(int *)(v178 + 48));
  sub_10005FAC0(v185);
  v100[3] = swift_getObjectType(v99);
  *v100 = v99;
  v176 = v59 + 8 * v176;
  v95();
  v186 = sub_1000055B0(&qword_1002AC330);
  sub_10005F974(&qword_1002AC338, &qword_1002AC330);
  v187 = v101;
  v102 = swift_allocObject(&unk_100284940, 168, 7);
  v103 = v102 + 16;
  v185[0] = v102;
  if (*v24)
  {
    swift_retain();
    sub_100146C6C();
    swift_release();
    memcpy(v184, v183, 0x98uLL);
    CGSize.init(_:)(v184);
  }
  else
  {
    sub_10005FADC(v184);
  }
  sub_10005FA70((uint64_t)v184, v103, &qword_1002AC330);
  v104 = PropertyListTypeEncoder.encode(_:)(v185);
  v105 = (uint64_t *)(v176 + *(int *)(v178 + 48));
  sub_10005FAC0(v185);
  v105[3] = swift_getObjectType(v104);
  *v105 = v104;
  sub_100021264(&qword_1002AC348, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDiagnoseCategory);
  v107 = Dictionary.init(dictionaryLiteral:)(v19, v181, (char *)&type metadata for Any + 8, v106);
  v108 = *(_QWORD *)(v107 + 16);
  if (v108)
  {
    v183[0] = _swiftEmptyArrayStorage;
    sub_100058934();
    v109 = sub_100071A78(v107);
    if ((v109 & 0x8000000000000000) == 0)
    {
      v111 = v109;
      if (v109 < 1 << *(_BYTE *)(v107 + 32))
      {
        v112 = v107 + 64;
        v166 = &v184[16];
        v167 = v107;
        v165 = v107 + 64;
        while ((*(_QWORD *)(v112 + 8 * (v111 >> 6)) & (1 << v111)) != 0)
        {
          v176 = 1 << v111;
          v177 = v111 >> 6;
          v182 = v108;
          v113 = *(_DWORD *)(v107 + 36);
          v168 = v110;
          if ((_DWORD)v110 != v113)
            goto LABEL_57;
          v114 = v175;
          v115 = (uint64_t)v170;
          v116 = (uint64_t)&v170[*(int *)(v175 + 48)];
          v117 = v181;
          v118 = *(void (**)(char *, unint64_t, uint64_t))(v180 + 16);
          v118(v170, *(_QWORD *)(v107 + 48) + *(_QWORD *)(v180 + 72) * v111, v181);
          v119 = *(_QWORD *)(v107 + 56);
          v178 = v111;
          sub_100007918(v119 + 32 * v111, v116);
          v120 = (uint64_t)v171;
          v118(v171, v115, v117);
          sub_100007918(v116, v120 + *(int *)(v114 + 48));
          v121 = v173;
          sub_10005FA70(v120, v173, &qword_1002AC268);
          sub_10005FA9C(v115, &qword_1002AC268);
          v122 = *(int *)(v114 + 48);
          v123 = v174;
          v124 = &v174[v122];
          v125 = v121 + v122;
          v172 = (void (*)(char *, uint64_t, uint64_t))v118;
          v118(v174, v121, v117);
          v126 = sub_100007918(v125, (uint64_t)v124);
          v127 = UniversalControlDiagnoseCategory.code.getter(v126);
          LOBYTE(v114) = v128;
          v129 = *(void (**)(char *, uint64_t))(v180 + 8);
          v129(v123, v117);
          if ((v114 & 1) != 0)
            goto LABEL_58;
          if (!v127)
            goto LABEL_59;
          v130 = String.init(cString:)(v127);
          v132 = v131;
          sub_10005FAC0(v124);
          *(_QWORD *)v184 = v130;
          *(_QWORD *)&v184[8] = v132;
          v133 = v174;
          v134 = &v174[*(int *)(v175 + 48)];
          v135 = v173;
          v136 = v181;
          v172(v174, v173, v181);
          sub_100007918(v125, (uint64_t)v134);
          sub_100005778(v134, v166);
          v129(v133, v136);
          sub_10005FA9C(v135, &qword_1002AC268);
          v137 = (_QWORD *)v183[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v183[0]) & 1) == 0)
          {
            sub_100058934();
            v137 = (_QWORD *)v183[0];
          }
          v138 = v178;
          v139 = v137[2];
          if (v139 >= v137[3] >> 1)
          {
            sub_100058934();
            v137 = (_QWORD *)v183[0];
          }
          v137[2] = v139 + 1;
          v140 = &v137[6 * v139];
          v141 = *(_OWORD *)v184;
          v142 = *(_OWORD *)&v184[32];
          v140[3] = *(_OWORD *)&v184[16];
          v140[4] = v142;
          v140[2] = v141;
          v107 = v167;
          v143 = -1 << *(_BYTE *)(v167 + 32);
          if (v138 >= -v143)
            goto LABEL_60;
          v112 = v165;
          v144 = v182;
          if ((*(_QWORD *)(v165 + 8 * v177) & v176) == 0)
            goto LABEL_61;
          if ((_DWORD)v168 != *(_DWORD *)(v167 + 36))
            goto LABEL_62;
          v145 = _HashTable.occupiedBucket(after:)(v138, v165, ~v143);
          v108 = v144 - 1;
          if (!v108)
          {
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          v111 = v145;
          if ((v145 & 0x8000000000000000) == 0)
          {
            v110 = *(unsigned int *)(v107 + 36);
            if (v145 < 1 << *(_BYTE *)(v107 + 32))
              continue;
          }
          goto LABEL_63;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
      }
    }
LABEL_63:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  v137 = _swiftEmptyArrayStorage;
LABEL_53:
  v146 = (void *)objc_opt_self(NSPropertyListSerialization);
  sub_10004F730((uint64_t)v137, &qword_1002AC350, (void (*)(uint64_t, uint64_t, void **))sub_10005C2E8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v148 = swift_bridgeObjectRelease().n128_u64[0];
  *(_QWORD *)v184 = 0;
  v149 = objc_msgSend(v146, "dataWithPropertyList:format:options:error:", isa, 200, 0, v184, v148);

  v150 = *(id *)v184;
  if (!v149)
  {
    v155 = v150;
    v5 = _convertNSErrorToError(_:)(v150);

    swift_willThrow(v156);
    goto LABEL_16;
  }
  v151 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v149);
  v153 = v152;

  v154 = v169;
  *v169 = v151;
  v154[1] = v153;
}

#error "10005202C: call analysis failed (funcsize=235)"

void sub_1000520C4()
{
  sub_10014FBF0();
}

void Agent.xpcMove(focus:to:completion:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[13];
  uint64_t v29;
  uint64_t v30;

  sub_10005FEB0();
  v29 = v2;
  v30 = v3;
  v4 = v0;
  sub_100060244();
  v5 = sub_10005FFF4();
  sub_10004EDFC(v5, v6, v7, v8, 756, v9, v10);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v11 = sub_10000F6E4();
  sub_10005FE9C(v11, (uint64_t)qword_1002B6EB0);
  v12 = sub_10002D844();
  if (sub_10006016C(v12))
  {
    v13 = (uint8_t *)sub_10000797C(12);
    v14 = sub_10000797C(32);
    v28[0] = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_10005FFF4();
    v27 = sub_100006FCC(v15, v16, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v13 + 4);
    sub_100026484((void *)&_mh_execute_header, v0, v1, "=== %{public}s ===", v13);
    sub_1000263F4(v14, v18, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v14);
    sub_100007958((uint64_t)v13);
  }

  if ((((uint64_t (*)(void))AgentXPCListener.currentConnectionIsAdminEntitled.getter)() & 1) != 0
    || (v19 = sub_10005E084(), (_DWORD)v19))
  {
    v20 = (Class *)((char *)&v0->isa + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
    v21 = sub_10005FE28((uint64_t)v4 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, (uint64_t)v28);
    if (*v20)
    {
      sub_1000600C0();
      sub_1000088D0();
      sub_100126194();
      sub_10002645C();
      sub_10000B364();
      sub_10000B348();
      return;
    }
    sub_100060018(v21, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v22 = 0x8000000100253CD0;
    v23 = -6718;
    v24 = 0xD000000000000021;
    v25 = 765;
  }
  else
  {
    sub_100060018(v19, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v24 = 0xD000000000000062;
    v22 = 0x8000000100253D00;
    v23 = -6773;
    v25 = 760;
  }
  v26 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v23, v24, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/Agent.swift", 84, 2, v25);
  Completion.callAsFunction(_:)((uint64_t)v26);
  sub_10002645C();

}

uint64_t Agent.xpcTakeClientAssertion(_:assertionID:deviceID:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v6;
  __n128 v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  _StringGuts.grow(_:)(30);
  v12 = swift_bridgeObjectRelease();
  v32[0] = 0xD00000000000001BLL;
  v32[1] = 0x8000000100253D70;
  v28 = a1;
  v13._countAndFlagsBits = UVCClientAssertion.description.getter(a1, v12);
  String.append(_:)(v13);
  sub_10000E568();
  v14._countAndFlagsBits = 39;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  sub_100060244();
  sub_10004EDFC(0xD00000000000001BLL, 0x8000000100253D70, v15, v16, 779, a5, a6);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v17 = sub_10000F6E4();
  sub_100006FB4(v17, (uint64_t)qword_1002B6EB0);
  swift_bridgeObjectRetain();
  sub_1000603A4();
  v18 = sub_10002D844();
  if (os_log_type_enabled(v6, v18))
  {
    v19 = (uint8_t *)sub_10000797C(12);
    v20 = sub_10000797C(32);
    v32[0] = v20;
    *(_DWORD *)v19 = 136446210;
    LOBYTE(a5) = (_BYTE)v19 + 12;
    swift_bridgeObjectRetain();
    v30 = sub_100006FCC(0xD00000000000001BLL, 0x8000000100253D70, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v19 + 4);
    sub_1000103C8(0x8000000100253D70);
    sub_100026484((void *)&_mh_execute_header, v6, v18, "=== %{public}s ===", v19);
    sub_1000263F4(v20, v21, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v20);
    sub_100007958((uint64_t)v19);

  }
  else
  {

    v22 = sub_100026AF4(0x8000000100253D70);
  }
  v23 = AgentXPCListener.currentConnectionID.getter(v22);
  if (v23)
  {
    sub_10019E90C(v28, a3, a4, a2, v23);
  }
  else
  {
    v24 = sub_1000603A4();
    v25 = static os_log_type_t.error.getter();
    if (sub_100040394(v25))
    {
      v26 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v26 = 0;
      sub_10005FF70((void *)&_mh_execute_header, v24, (os_log_type_t)a5, "xpcTakeClientAssertion: Failed to find client for xpc connection", v26);
      sub_100007958((uint64_t)v26);
    }

  }
  sub_100060208(0);
  return sub_10000B364();
}

uint64_t Agent.xpcReleaseClientAssertion(_:completion:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_100060244();
  sub_10004EDFC(0xD00000000000001DLL, v2, v3, v4, 807, v5, v6);
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v7 = sub_10000F6E4();
  sub_10005FE9C(v7, (uint64_t)qword_1002B6EB0);
  v8 = sub_10002D844();
  if (sub_10002D7E4(v8))
  {
    v9 = (uint8_t *)sub_10000797C(12);
    v10 = sub_10000797C(32);
    v14 = v10;
    *(_DWORD *)v9 = 136446210;
    v13 = sub_100006FCC(0xD00000000000001DLL, 0x8000000100253D90, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v9 + 4);
    sub_100026484((void *)&_mh_execute_header, v0, v1, "=== %{public}s ===", v9);
    sub_1000263F4(v10, v11, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v10);
    sub_100007958((uint64_t)v9);
  }

  sub_10019EBF0();
  sub_10006027C(0);
  return sub_10000FF50();
}

void Agent.xpcConnectionCanceled(_:)(uint64_t a1)
{
  sub_10019EC48(a1);
  sub_1000050D4();
}

void (*sub_100052930(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for UniversalControlConfiguration(0);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  Agent.xpcConfiguration.getter();
  return sub_1000529B0;
}

void sub_1000529B0(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    Agent.xpcConfiguration.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Agent.xpcConfiguration.setter();
  }
  free(v4);
  free(v3);
  sub_10005FFE4(v2);
}

void (*sub_100052A4C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)a1 = v1;
  Agent.xpcAutomaticallyReconnect.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_100052A84;
}

void sub_100052A84(uint64_t a1)
{
  Agent.xpcAutomaticallyReconnect.setter(*(_BYTE *)(a1 + 8));
  sub_1000050D4();
}

uint64_t sub_100052AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  CGFloat MidX;
  CGFloat MidY;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  id v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  const char *v95;
  _QWORD *v96;
  uint64_t v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  NSObject *v108;
  int v109;
  uint64_t v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void (*v119)(_QWORD, _QWORD);
  id v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[3];
  _QWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  _QWORD v133[5];
  char v134[24];
  _QWORD v135[5];
  char v136[24];
  char v137[32];
  CGRect v138;
  CGRect v139;

  v1 = v0;
  v122 = sub_100060154();
  v2 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  sub_10003D69C();
  v119 = v3;
  __chkstk_darwin(v4);
  v123 = (char *)&v115 - v5;
  v6 = (_QWORD **)(v0 + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  sub_10000B2F8((uint64_t)v6, (uint64_t)v137, 1);
  v117 = v6;
  if (*v6)
  {
    v7 = *v6;
  }
  else
  {
    v116 = v2;
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController);
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_cloudPreferences);
    v121 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_discoveryController);
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enablementController);
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_hidController);
    v12 = v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter;
    v124 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_loginStatusController);
    sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_notificationCenter, (uint64_t)v136);
    sub_10005FAFC(v12, (uint64_t)v135, (uint64_t *)&unk_1002ABD50);
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_p2pController);
    v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_pointerController);
    v120 = *(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_preferences);
    v15 = v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost;
    sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_secureLayerHost, (uint64_t)v134);
    sub_10005FAFC(v15, (uint64_t)v133, &qword_1002AAF30);
    v115 = type metadata accessor for Agent.Context();
    v118 = sub_1000088D8(v115, 240);
    sub_100060054();
    sub_100026AE4();
    v16 = v121;
    sub_1000600C0();
    sub_10002679C();
    sub_100060200();
    v17 = v124;
    sub_1000088D0();
    sub_10005FF54();
    sub_10006003C();
    result = sub_10004A46C(v8, v9, v16, v10, v11, v17, (uint64_t)v135, v13, v14, v120, (uint64_t)v133);
    if (!result)
      return result;
    v7 = (_QWORD *)result;
    sub_100060018(result, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    static OS_dispatch_queue.main.getter(v19);
    v20 = sub_1000088D8((uint64_t)&unk_100284698, 32);
    *(_QWORD *)(v20 + 24) = &off_100284618;
    v21 = swift_unknownObjectWeakInit(v20 + 16, v1);
    v22 = sub_100060250(v21, (uint64_t)sub_10005E22C);
    v24 = v23;
    v133[0] = v22;
    sub_100021264(&qword_1002AC098, v23, (uint64_t (*)(uint64_t))type metadata accessor for Agent.Context);
    dispatch thunk of ObservableObject.objectWillChange.getter(v115);
    v132[0] = v135[0];
    v25 = sub_1000088D8((uint64_t)&unk_1002846C0, 24);
    *(_QWORD *)(v25 + 16) = v24;
    v26 = type metadata accessor for ObservableObjectPublisher(0);
    swift_unknownObjectRetain_n(v24, 2);
    Publisher<>.sink(receiveValue:)(sub_10005E230, v25, v26, &protocol witness table for ObservableObjectPublisher);
    sub_100026AEC();
    AnyCancellable.store(in:)(v133);
    sub_1000269A0();
    swift_unknownObjectRelease(v24);
    sub_10000B348();
    v27 = (_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_contextSink);
    *v27 = v133[0];
    v27[1] = v24;
    swift_unknownObjectRetain(v24);
    sub_100043360();
    sub_10006025C();
    *v117 = v7;
    swift_retain_n(v7, 3);
    sub_10000B348();
    sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection, (uint64_t)v135);
    v28 = sub_100026AE4();
    sub_10004B16C(v28);
    sub_100026AEC();
    sub_1000FDE1C((uint64_t)v7, (uint64_t)&off_100284628);
    swift_unknownObjectRelease(v24);
    sub_10000E594();
    sub_10006005C();
    v2 = v116;
  }
  v29 = v7[15];
  swift_retain();
  sub_10002679C();
  sub_10014A790();
  v30 = sub_10003AFBC();
  sub_10004B67C(v30);
  v32 = v31;
  sub_10000E420();
  v120 = v7;
  v124 = v7[22];
  LODWORD(v121) = *(unsigned __int8 *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enablementController)
                                     + 57);
  v118 = v29;
  if ((_DWORD)v121 == 1)
  {
    v33 = *(_QWORD **)(v29 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
    sub_10005FFC0();
  }
  else
  {
    v33 = _swiftEmptyArrayStorage;
  }
  v34 = v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_configuration, (uint64_t)v133);
  v35 = v119;
  v36 = v122;
  (*(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v2 + 16))(v119, v34, v122);
  sub_100026A50(&qword_1002AC140, v37, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlConfiguration);
  v38 = v2;
  v40 = v39;
  swift_retain();
  v41 = dispatch thunk of static Equatable.== infix(_:_:)(v123, v35, v36, v40);
  v119 = *(void (**)(_QWORD, _QWORD))(v38 + 8);
  v119(v35, v36);
  if ((v41 & 1) == 0)
  {
    sub_10000B2F8(v34, (uint64_t)v132, 33);
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 24))(v34, v123, v122);
    swift_endAccess(v132);
  }
  v42 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_connectedDevices, (uint64_t)v132, 1);
  v43 = *v42;
  swift_bridgeObjectRetain();
  v44 = sub_100198A54(v32, v43);
  sub_10000E50C();
  if ((v44 & 1) != 0)
  {
    sub_10002D89C();
    v45 = v41 ^ 1;
  }
  else
  {
    *v42 = v32;
    swift_bridgeObjectRelease();
    v45 = 1;
  }
  v46 = v124;
  v47 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_devices);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_devices, (uint64_t)&v131, 1);
  v48 = *v47;
  sub_100043360();
  sub_1000714A4((uint64_t)v33, v48);
  v50 = v49;
  sub_10000E594();
  v51 = v121;
  if ((v50 & 1) == 0)
  {
    *v47 = (uint64_t)v33;
    v45 = 1;
  }
  sub_1000267C4();
  v52 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_localDevice, (uint64_t)&v130, 1);
  v53 = *v52;
  v129[0] = v46;
  if (!v53)
    goto LABEL_17;
  v128[0] = v53;
  v54 = sub_100060284();
  sub_100026A50((unint64_t *)&unk_1002AC0A0, v55, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice);
  v57 = v56;
  sub_1000404AC(v46);
  LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)(v129, v128, v54, v57);
  LOBYTE(v57) = v129[0];
  sub_10005FF18();
  sub_100026AEC();
  if ((v54 & 1) == 0)
  {
LABEL_17:
    *v52 = v46;
    sub_10006003C();
    sub_10000B348();
    v59 = dispatch thunk of UniversalControlDevice.displays.getter(v58);
    if ((unint64_t)v59 >> 62)
      goto LABEL_89;
    v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10005FFC0();
    if (v60)
    {
      while (1)
      {
        if ((v59 & 0xC000000000000001) != 0)
        {
          v62 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v59);
          v61 = v62;
        }
        else
        {
          v61 = *(_QWORD *)(v59 + 32);
          v62 = sub_10005FF54();
        }
        if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v62) & 1) != 0)
          break;
        sub_100041108();
        if (v60 != 1)
        {
          v63 = 5;
          while (1)
          {
            if ((v59 & 0xC000000000000001) != 0)
            {
              v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v63 - 4, v59);
              v61 = v64;
            }
            else
            {
              v61 = *(_QWORD *)(v59 + 8 * v63);
              v64 = sub_10005FF54();
            }
            v65 = v63 - 3;
            if (__OFADD__(v63 - 4, 1))
              break;
            if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v64) & 1) != 0)
              goto LABEL_37;
            sub_100041108();
            ++v63;
            if (v65 == v60)
              goto LABEL_30;
          }
          __break(1u);
LABEL_89:
          v114 = v59 < 0 ? v59 : v59 & 0xFFFFFFFFFFFFFF8;
          sub_10005FFC0();
          v60 = _CocoaArrayWrapper.endIndex.getter(v114);
          if (v60)
            continue;
        }
        goto LABEL_30;
      }
LABEL_37:
      sub_100026AF4(v59);
      v71 = v120;
    }
    else
    {
LABEL_30:
      sub_100026AF4(v59);
      v67 = dispatch thunk of UniversalControlDevice.displays.getter(v66);
      v69 = v67;
      if ((unint64_t)v67 >> 62)
      {
        if (v67 >= 0)
          v67 &= 0xFFFFFFFFFFFFFF8uLL;
        v70 = _CocoaArrayWrapper.endIndex.getter(v67);
      }
      else
      {
        v70 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v71 = v120;
      if (v70)
      {
        sub_10013DB94(0, (v69 & 0xC000000000000001) == 0, v69, v68);
        if ((v69 & 0xC000000000000001) != 0)
        {
          v61 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v69);
        }
        else
        {
          v61 = *(_QWORD *)(v69 + 32);
          sub_10005FF54();
        }
        sub_10000E420();
      }
      else
      {
        sub_10000E420();
        v61 = 0;
      }
    }
    v72 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection);
    sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_eventConnection, (uint64_t)v129);
    v73 = *v72;
    if (*v72)
    {
      v74 = v71[19];
      v75 = sub_100008904();
      v76 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8);
      sub_10002679C();
      sub_10002D988();
      v77 = v76(v75, v74);
      sub_10000F718();
      sub_10000B2F8(v73 + 48, (uint64_t)v128, 1);
      *(_QWORD *)(v73 + 48) = v77;
      sub_1000269A0();
      sub_10000E420();
    }
    v78 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_pointerController);
    v79 = v71[19];
    v57 = sub_100008904();
    v80 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
    sub_10002D988();
    v81 = v80(v57, v79);
    sub_10000F718();
    *(_QWORD *)(v78 + 96) = v81;
    swift_bridgeObjectRelease();
    if (v61)
    {
      v82 = sub_10005FF54();
      dispatch thunk of UniversalControlDisplay.screenRect.getter(v82);
      sub_1000602A0();
      MidX = CGRectGetMidX(v138);
      v139.origin.x = sub_10005FEF8();
      MidY = CGRectGetMidY(v139);
      sub_10000F650(v61);
      *(CGFloat *)(v78 + 56) = MidX;
      *(CGFloat *)(v78 + 64) = MidY;
      v45 = 1;
      *(_BYTE *)(v78 + 72) = 0;
    }
    else
    {
      *(_QWORD *)(v78 + 56) = 0;
      *(_QWORD *)(v78 + 64) = 0;
      v45 = 1;
      *(_BYTE *)(v78 + 72) = 1;
    }
    v51 = v121;
  }
  v85 = (_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enabled);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_enabled, (uint64_t)&v127, 1);
  if (v51 != *v85)
  {
    *v85 = v51;
    v86 = type metadata accessor for Completion();
    sub_1000088D8(v86, 48);
    if (v51)
    {
      v57 = (uint64_t)Completion.init(file:line:)();
      swift_retain();
      sub_1000601A4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_10005E01C, v87, (void (*)(uint64_t, _QWORD *))sub_1000FE6B8);
      sub_10000F650(v57);
      LOBYTE(v57) = sub_1000CB13C();
      sub_100027074();
    }
    else
    {
      LOBYTE(v57) = Completion.init(file:line:)();
      swift_retain();
      sub_1000601A4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_10005E01C, v88, (void (*)(uint64_t, _QWORD *))sub_1000FE6F0);
      sub_100026AEC();
    }
    sub_100026AEC();
    v45 = 1;
  }
  if (*(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_cloudPreferences) + 16) == 1)
    v89 = *(unsigned __int8 *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController) + 42);
  else
    v89 = 0;
  v90 = (v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_automaticallyReconnect, (uint64_t)&v126, 1);
  v91 = v120;
  if (v89 != LOBYTE(v90->isa))
  {
    LOBYTE(v90->isa) = v89;
    if (v89)
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v92 = sub_10000F6E4();
      sub_10005FE9C(v92, (uint64_t)qword_1002B6EB0);
      v93 = sub_10002D844();
      if (sub_1000103A0(v93))
      {
        v94 = (uint8_t *)sub_10000797C(2);
        *(_WORD *)v94 = 0;
        v95 = "=== Automatically Reconnect Enabled ===";
LABEL_64:
        sub_10005FF70((void *)&_mh_execute_header, v90, (os_log_type_t)v57, v95, v94);
        sub_100007958((uint64_t)v94);
      }
    }
    else
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v97 = sub_10000F6E4();
      sub_10005FE9C(v97, (uint64_t)qword_1002B6EB0);
      v98 = sub_10002D844();
      if (sub_1000103A0(v98))
      {
        v94 = (uint8_t *)sub_10000797C(2);
        *(_WORD *)v94 = 0;
        v95 = "=== Automatically Reconnect Disabled ===";
        goto LABEL_64;
      }
    }

    v45 = 1;
    if ((v51 & 1) != 0)
      goto LABEL_66;
LABEL_59:
    v96 = _swiftEmptyArrayStorage;
    goto LABEL_67;
  }
  if (!v51)
    goto LABEL_59;
LABEL_66:
  sub_1000088D0();
  v96 = sub_1001457A8();
  sub_10000B348();
LABEL_67:
  v99 = OBJC_IVAR____TtC13EnsembleAgent5Agent_hotZones;
  v100 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_hotZones);
  sub_10003AFBC();
  sub_100071848((uint64_t)v96, v100);
  v102 = v101;
  sub_10000E420();
  if ((v102 & 1) == 0)
  {
    if (qword_1002A9930 != -1)
      swift_once(&qword_1002A9930, sub_100184FA0);
    sub_10005FE28((uint64_t)&static EventDispatcher.shared, (uint64_t)&v125);
    sub_1000088D0();
    sub_100053804((uint64_t)v96);
    sub_10000B348();
    *(_QWORD *)(v1 + v99) = v96;
    v45 = 1;
  }
  sub_10000E594();
  sub_10007A0A0(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController) + 26), *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController) + 34), *(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_clientAssertionController) + 42));
  if ((v45 & 1) != 0)
    AgentXPCListener.objectDidChange()();
  v103 = OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepState;
  v104 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepState) - 1;
  v105 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent5Agent_sleepController + 8);
  v106 = sub_100008904();
  v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v106, v105);
  *(_BYTE *)(v1 + v103) = v107;
  v108 = *((_QWORD *)v91 + 15);
  sub_10002679C();
  sub_10014BEB4(v107);
  sub_1000269A0();
  v109 = *(unsigned __int8 *)(v1 + v103);
  if (v109 != 1)
  {
    if (v104 >= 2 && v109 == 2)
      goto LABEL_75;
LABEL_86:
    sub_10006021C();
    swift_release();
    sub_10005FF18();
    return sub_10006005C();
  }
  if (v104 < 2)
    goto LABEL_86;
LABEL_75:
  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v110 = sub_10000F6E4();
  sub_10005FE9C(v110, (uint64_t)qword_1002B6EB0);
  v111 = sub_10002D844();
  if (sub_100040394(v111))
  {
    v112 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v112 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v108, (os_log_type_t)v108, "Perform disconnect for system state transition", v112);
    sub_100007958((uint64_t)v112);
  }

  if (*v117)
  {
    sub_1000088D0();
    sub_100126848(0, 0, 1);
    sub_10000B348();
  }
  sub_10017ECA4();
  Agent.allowSystemActiveAppearance()();
  sub_10006005C();
  sub_10005FF18();
  sub_1000269A0();
  return sub_10006021C();
}

void sub_100053804(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint8_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110[3];
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;

  v2 = sub_1000055B0(&qword_1002AC148);
  __chkstk_darwin(v2);
  v98 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v4);
  v100 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for EventDispatcher.HotZoneState(0);
  v6 = __chkstk_darwin(v94);
  v95 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v99 = (uint64_t)&v88 - v8;
  v9 = type metadata accessor for UniversalControlLink(0);
  v106 = *(_QWORD *)(v9 - 8);
  v107 = v9;
  __chkstk_darwin(v9);
  v101 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000055B0(&qword_1002AC950);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for HotZone(0);
  v15 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  v113 = _swiftEmptyArrayStorage;
  sub_1000587E4();
  v18 = (uint64_t)v113;
  v96 = v15;
  v103 = a1;
  if (v17)
  {
    v19 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v20 = *(_QWORD *)(v15 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v21 = (uint64_t)&v14[*(int *)(v11 + 48)];
      sub_10005F428(v19, v21, type metadata accessor for HotZone);
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v14, v21, v107);
      v113 = (_QWORD *)v18;
      v22 = *(_QWORD *)(v18 + 16);
      if (v22 >= *(_QWORD *)(v18 + 24) >> 1)
      {
        sub_1000587E4();
        v18 = (uint64_t)v113;
      }
      *(_QWORD *)(v18 + 16) = v22 + 1;
      sub_10005FA70((uint64_t)v14, v18+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v22, &qword_1002AC950);
      v19 += v20;
      --v17;
    }
    while (v17);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v23 = sub_100054628(v18);
  v24 = v102;
  v25 = (uint64_t *)(v102 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones);
  swift_beginAccess(v102 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_hotZones, &v113, 1, 0);
  *v25 = v23;
  swift_bridgeObjectRelease();
  v26 = v24 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_logger;
  v27 = swift_retain_n(v24, 2);
  v28 = Logger.logObject.getter(v27);
  v30 = static os_log_type_t.default.getter(v28, v29);
  v31 = os_log_type_enabled(v28, (os_log_type_t)v30);
  v97 = v25;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v110[0] = v33;
    v93 = v32;
    *(_DWORD *)v32 = 136446210;
    v34 = *v25;
    swift_bridgeObjectRetain_n(*v25, 2);
    v35 = sub_1000582D8(v34);
    swift_bridgeObjectRelease();
    v111 = (uint64_t)v35;
    sub_1000589F8(&v111);
    v91 = v33;
    v92 = v30;
    swift_bridgeObjectRelease();
    v36 = v111;
    v37 = *(_QWORD *)(v111 + 16);
    if (v37)
    {
      v89 = v28;
      v90 = v26;
      v109 = _swiftEmptyArrayStorage;
      sub_100058678();
      v38 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      v88 = v36;
      v39 = v36 + v38;
      v103 = *(_QWORD *)(v96 + 72);
      v40 = (uint64_t)v104;
      do
      {
        sub_10005F428(v39, v40, type metadata accessor for HotZone);
        v111 = 0;
        v112 = 0xE000000000000000;
        _StringGuts.grow(_:)(16);
        v41 = sub_100184C60();
        v43 = v42;
        swift_bridgeObjectRelease();
        v111 = v41;
        v112 = v43;
        v44._countAndFlagsBits = 58;
        v44._object = (void *)0xE100000000000000;
        String.append(_:)(v44);
        v45 = v105;
        v46 = *(id *)(v40 + *(int *)(v105 + 24));
        v47 = sub_100049D94(v46);

        v108 = v47;
        v48 = sub_1000055B0((uint64_t *)&unk_1002AC160);
        sub_10005FCA0((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
        v50 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v48, v49);
        v52 = v51;
        swift_bridgeObjectRelease();
        v53._countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._countAndFlagsBits = 0x646564726175673ALL;
        v54._object = (void *)0xE90000000000003DLL;
        String.append(_:)(v54);
        if (*(_BYTE *)(v40 + *(int *)(v45 + 20)))
          v55 = 1702195828;
        else
          v55 = 0x65736C6166;
        if (*(_BYTE *)(v40 + *(int *)(v45 + 20)))
          v56 = 0xE400000000000000;
        else
          v56 = 0xE500000000000000;
        v57 = v56;
        String.append(_:)(*(Swift::String *)&v55);
        swift_bridgeObjectRelease();
        v59 = v111;
        v58 = v112;
        sub_1000255F0(v40, type metadata accessor for HotZone);
        v60 = v109;
        if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
        {
          sub_100058678();
          v60 = v109;
        }
        v61 = v60[2];
        if (v61 >= v60[3] >> 1)
        {
          sub_100058678();
          v60 = v109;
        }
        v60[2] = v61 + 1;
        v62 = &v60[2 * v61];
        v62[4] = v59;
        v62[5] = v58;
        v39 += v103;
        --v37;
      }
      while (v37);
      swift_release();
      v24 = v102;
      v28 = v89;
    }
    else
    {
      swift_release();
      v60 = _swiftEmptyArrayStorage;
    }
    v66 = v93;
    v111 = (uint64_t)v60;
    v67 = sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_10005FCA0((unint64_t *)&qword_1002AB150, (uint64_t *)&unk_1002AC160);
    v69 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v67, v68);
    v71 = v70;
    swift_bridgeObjectRelease();
    v111 = sub_100006FCC(v69, v71, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v66 + 4);
    swift_release_n(v24, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v92, "Updating active Hot Zones: %{public}s", v66, 0xCu);
    v72 = v91;
    swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v66, -1, -1);

    v63 = v107;
    v64 = (uint64_t)v100;
    v65 = (uint64_t)v101;
  }
  else
  {
    swift_release_n(v24, 2);

    v63 = v107;
    v64 = (uint64_t)v100;
    v65 = (uint64_t)v101;
  }
  sub_1001852F8();
  v73 = v24 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state;
  swift_beginAccess(v24 + OBJC_IVAR____TtC13EnsembleAgent15EventDispatcher_state, &v111, 0, 0);
  v74 = v99;
  sub_10005F428(v73, v99, type metadata accessor for EventDispatcher.HotZoneState);
  sub_10018511C(v64);
  sub_1000255F0(v74, type metadata accessor for EventDispatcher.HotZoneState);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v64, 1, v63) == 1)
  {
    sub_10005FA9C(v64, (uint64_t *)&unk_1002AC150);
  }
  else
  {
    v75 = v106;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v65, v64, v63);
    v76 = v97;
    swift_beginAccess(v97, v110, 32, 0);
    v77 = (uint64_t)v98;
    sub_100041DD8(v65, *v76);
    swift_endAccess(v110);
    LODWORD(v76) = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v77, 1, v105);
    sub_10005FA9C(v77, &qword_1002AC148);
    if ((_DWORD)v76 == 1)
    {
      v78 = sub_100184C60();
      v80 = v79;
      swift_bridgeObjectRetain();
      v82 = Logger.logObject.getter(v81);
      v84 = static os_log_type_t.default.getter(v82, v83);
      if (os_log_type_enabled(v82, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = swift_slowAlloc(32, -1);
        v110[0] = v86;
        *(_DWORD *)v85 = 136446210;
        swift_bridgeObjectRetain();
        v109 = (_QWORD *)sub_100006FCC(v78, v80, v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v85 + 4);
        swift_bridgeObjectRelease_n(v80, 3);
        _os_log_impl((void *)&_mh_execute_header, v82, v84, "Hot Zone: Clearing: %{public}s", v85, 0xCu);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);

        (*(void (**)(char *, uint64_t))(v106 + 8))(v101, v107);
      }
      else
      {

        swift_bridgeObjectRelease_n(v80, 2);
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v65, v63);
      }
      v87 = (uint64_t)v95;
      swift_storeEnumTagMultiPayload(v95, v94, 4);
      swift_beginAccess(v73, v110, 33, 0);
      sub_10005E238(v87, v73, type metadata accessor for EventDispatcher.HotZoneState);
      swift_endAccess(v110);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v65, v63);
    }
  }
}

void sub_100054278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  int64_t v29;
  __int128 v30;
  uint64_t v31[9];
  _QWORD *v32;

  v3 = a1;
  v4 = 0;
  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v29 = (unint64_t)(v6 + 63) >> 6;
  v9 = a2 + 56;
  v10 = _swiftEmptyArrayStorage;
  v27 = a1 + 56;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v4++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v4 >= v29)
      goto LABEL_35;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (!v14)
      break;
LABEL_17:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_18:
    if (*(_QWORD *)(a2 + 16))
    {
      v16 = *(_QWORD *)(v3 + 48) + 17 * v12;
      v30 = *(_OWORD *)v16;
      v17 = *(unsigned __int8 *)(v16 + 16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(a2 + 40));
      Hasher._combine(_:)(v17);
      v18 = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v20 = v18 & ~v19;
      if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
      {
        v21 = *(_QWORD *)(a2 + 48);
        if (*(unsigned __int8 *)(v21 + v20) == (_DWORD)v17)
        {
LABEL_24:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
          v32 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100058704();
            v10 = v32;
          }
          v24 = v10[2];
          if (v24 >= v10[3] >> 1)
          {
            sub_100058704();
            v10 = v32;
          }
          v10[2] = v24 + 1;
          v25 = (char *)v10 + 17 * v24;
          *((_OWORD *)v25 + 2) = v30;
          v25[48] = v17;
          v5 = v27;
          v3 = a1;
        }
        else
        {
          v22 = ~v19;
          while (1)
          {
            v20 = (v20 + 1) & v22;
            if (((*(_QWORD *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v21 + v20) == (_DWORD)v17)
              goto LABEL_24;
          }
        }
      }
    }
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v29)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v4 + 2;
  if (v4 + 2 >= v29)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v4 + 3;
  if (v4 + 3 >= v29)
    goto LABEL_35;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v4 = v15;
    goto LABEL_17;
  }
  v26 = v4 + 4;
  if (v4 + 4 >= v29)
  {
LABEL_35:
    swift_bridgeObjectRelease(a2);
    swift_release();
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v26);
  v4 += 4;
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v4 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v4 >= v29)
      goto LABEL_35;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v26;
    if (v14)
      goto LABEL_17;
  }
LABEL_37:
  __break(1u);
}

void sub_100054520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  sub_100054278(v4, a1);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    sub_1000586CC();
    v8 = _swiftEmptyArrayStorage[2];
    v9 = 32;
    do
    {
      v10 = *(_OWORD *)(v6 + v9);
      if (v8 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        v11 = *(_OWORD *)(v6 + v9);
        sub_1000586CC();
        v10 = v11;
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v8 + 4] = v10;
      v9 += 17;
      ++v8;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    swift_bridgeObjectRelease(v5);
  }
  sub_1000DF7F4();
}

uint64_t sub_100054628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1000055B0(&qword_1002AC178);
    v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }
  else
  {
    v4 = &_swiftEmptyDictionarySingleton;
  }
  v7 = (uint64_t)v4;
  sub_100059F8C(a1, 1, &v7);
  v5 = v7;
  if (v1)
    swift_release();
  return v5;
}

void sub_1000546B4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;

  v3 = v2;
  v5 = *v2;
  sub_1000055B0((uint64_t *)&unk_1002AC130);
  v6 = sub_100060074();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v9 = *(_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & v9;
    v32 = 1 << *(_BYTE *)(v5 + 32);
    v33 = v3;
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = v6 + 64;
    if ((v12 & v9) == 0)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    for (i = v15 | (v8 << 6); ; i = __clz(__rbit64(v18)) + (v8 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
      v21 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
        v22 = v21;
      v23 = static Hasher._hash(seed:_:)(*(_QWORD *)(v7 + 40), v20) & ~(-1 << *(_BYTE *)(v7 + 32));
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) == 0)
      {
        sub_100060314();
        while (++v25 != v26 || (v24 & 1) == 0)
        {
          v27 = v25 == v26;
          if (v25 == v26)
            v25 = 0;
          v24 |= v27;
          if (*(_QWORD *)(v14 + 8 * v25) != -1)
          {
            sub_100060300();
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      sub_100060348();
LABEL_30:
      sub_1000602EC();
      *(_QWORD *)(v14 + v28) |= v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v30) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v30) = v21;
      ++*(_QWORD *)(v7 + 16);
      if (v13)
        goto LABEL_6;
LABEL_7:
      v17 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_41;
      if (v17 >= v34)
        goto LABEL_32;
      v18 = v10[v17];
      ++v8;
      if (!v18)
      {
        v8 = v17 + 1;
        if (v17 + 1 >= v34)
          goto LABEL_32;
        v18 = v10[v8];
        if (!v18)
        {
          v19 = v17 + 2;
          if (v19 >= v34)
          {
LABEL_32:
            if ((a2 & 1) == 0)
            {
              sub_1000269A0();
              v3 = v33;
              goto LABEL_39;
            }
            if (v32 >= 64)
              sub_1001194A8(0, v34, (_QWORD *)(v5 + 64));
            else
              *v10 = v31;
            v3 = v33;
            *(_QWORD *)(v5 + 16) = 0;
            break;
          }
          v18 = v10[v19];
          if (!v18)
          {
            while (1)
            {
              v8 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v8 >= v34)
                goto LABEL_32;
              v18 = v10[v8];
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          v8 = v19;
        }
      }
LABEL_18:
      v13 = (v18 - 1) & v18;
    }
  }
  sub_1000269A0();
LABEL_39:
  *v3 = v7;
  sub_1000088AC();
}

uint64_t sub_1000548F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  char *v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t *v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _BYTE v62[16];
  _QWORD v63[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC120);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_41:
    result = swift_release();
    goto LABEL_42;
  }
  v9 = 0;
  v41 = v3;
  v42 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v43 = (unint64_t)(v10 + 63) >> 6;
  v44 = v5;
  v13 = v7 + 64;
  if (!v12)
    goto LABEL_10;
  while (2)
  {
    v49 = (v12 - 1) & v12;
    v50 = v9;
    v14 = __clz(__rbit64(v12)) | (v9 << 6);
LABEL_22:
    v19 = (char *)(*(_QWORD *)(v5 + 48) + 16 * v14);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = v19[3];
    v24 = v19[4];
    v51 = v19[5];
    v52 = v19[6];
    v53 = v19[7];
    v54 = v19[8];
    v55 = v19[9];
    v56 = v19[10];
    v57 = v19[11];
    v58 = v19[12];
    v59 = v19[13];
    v60 = v19[14];
    v61 = v19[15];
    v25 = *(_QWORD *)(v5 + 56) + 56 * v14;
    v26 = *(_QWORD *)(v25 + 16);
    v46 = *(_OWORD *)v25;
    v47 = *(_OWORD *)(v25 + 24);
    v48 = *(_BYTE *)(v25 + 40);
    v27 = *(_QWORD *)(v25 + 48);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v63, *(_QWORD *)(v8 + 40));
    v62[0] = v20;
    v62[1] = v21;
    v62[2] = v22;
    v62[3] = v23;
    v62[4] = v24;
    v62[5] = v51;
    v62[6] = v52;
    v62[7] = v53;
    v62[8] = v54;
    v62[9] = v55;
    v62[10] = v56;
    v62[11] = v57;
    v62[12] = v58;
    v62[13] = v59;
    v62[14] = v60;
    v62[15] = v61;
    Hasher.combine(bytes:)(v62, v63);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_33;
    }
    v33 = 0;
    v34 = (unint64_t)(63 - v29) >> 6;
    do
    {
      if (++v31 == v34 && (v33 & 1) != 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v35 = v31 == v34;
      if (v31 == v34)
        v31 = 0;
      v33 |= v35;
      v36 = *(_QWORD *)(v13 + 8 * v31);
    }
    while (v36 == -1);
    v32 = __clz(__rbit64(~v36)) + (v31 << 6);
LABEL_33:
    *(_QWORD *)(v13 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (_BYTE *)(*(_QWORD *)(v8 + 48) + 16 * v32);
    *v37 = v20;
    v37[1] = v21;
    v37[2] = v22;
    v37[3] = v23;
    v37[4] = v24;
    v37[5] = v51;
    v37[6] = v52;
    v37[7] = v53;
    v37[8] = v54;
    v37[9] = v55;
    v37[10] = v56;
    v37[11] = v57;
    v37[12] = v58;
    v37[13] = v59;
    v37[14] = v60;
    v37[15] = v61;
    v38 = *(_QWORD *)(v8 + 56) + 56 * v32;
    *(_OWORD *)v38 = v46;
    *(_QWORD *)(v38 + 16) = v26;
    *(_OWORD *)(v38 + 24) = v47;
    *(_BYTE *)(v38 + 40) = v48;
    *(_QWORD *)(v38 + 48) = v27;
    ++*(_QWORD *)(v8 + 16);
    v5 = v44;
    v12 = v49;
    v9 = v50;
    if (v49)
      continue;
    break;
  }
LABEL_10:
  v15 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_44;
  if (v15 < v43)
  {
    v16 = v42[v15];
    v17 = v9 + 1;
    if (v16)
      goto LABEL_21;
    v17 = v15 + 1;
    if (v15 + 1 < v43)
    {
      v16 = v42[v17];
      if (v16)
        goto LABEL_21;
      v18 = v15 + 2;
      if (v18 < v43)
      {
        v16 = v42[v18];
        if (v16)
        {
          v17 = v18;
LABEL_21:
          v49 = (v16 - 1) & v16;
          v50 = v17;
          v14 = __clz(__rbit64(v16)) + (v17 << 6);
          goto LABEL_22;
        }
        while (1)
        {
          v17 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          if (v17 >= v43)
            goto LABEL_35;
          v16 = v42[v17];
          ++v18;
          if (v16)
            goto LABEL_21;
        }
LABEL_45:
        __break(1u);
      }
    }
  }
LABEL_35:
  if ((v45 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v41;
    if (v39 >= 64)
      sub_1001194A8(0, (unint64_t)(v39 + 63) >> 6, v42);
    else
      *v42 = -1 << v39;
    *(_QWORD *)(v5 + 16) = 0;
    goto LABEL_41;
  }
  result = swift_release();
  v3 = v41;
LABEL_42:
  *v3 = v8;
  return result;
}

void sub_100054DA4()
{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _BYTE v60[16];
  _QWORD v61[11];

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v49 = type metadata accessor for UniversalControlDisplayLayout(0);
  v51 = *(_QWORD *)(v49 - 8);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10000E5DC();
  v50 = v5;
  v6 = *v0;
  sub_1000055B0(&qword_1002AC100);
  v52 = sub_100060074();
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_38:
    sub_1000269A0();
    goto LABEL_39;
  }
  v41 = v0;
  v7 = 0;
  v42 = (_QWORD *)(v6 + 64);
  v8 = 1 << *(_BYTE *)(v6 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v40 = v3;
  v11 = 16;
  if ((v3 & 1) != 0)
    v11 = 32;
  v45 = v11;
  v44 = v6;
  if (!v10)
    goto LABEL_9;
  while (2)
  {
    v47 = (v10 - 1) & v10;
    v48 = v7;
    v12 = __clz(__rbit64(v10)) | (v7 << 6);
LABEL_21:
    v17 = *(_QWORD *)(v6 + 56);
    v18 = (char *)(*(_QWORD *)(v6 + 48) + 16 * v12);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = v18[4];
    v24 = v18[5];
    v25 = v18[6];
    v26 = v18[7];
    v27 = v18[8];
    v53 = v18[9];
    v54 = v18[10];
    v55 = v18[11];
    v56 = v18[12];
    v57 = v18[13];
    v59 = v18[14];
    v46 = *(_QWORD *)(v51 + 72);
    v58 = v18[15];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v51 + v45))(v50, v17 + v46 * v12, v49);
    Hasher.init(_seed:)(v61, *(_QWORD *)(v52 + 40));
    v60[0] = v19;
    v60[1] = v20;
    v60[2] = v21;
    v60[3] = v22;
    v60[4] = v23;
    v60[5] = v24;
    v60[6] = v25;
    v60[7] = v26;
    v60[8] = v27;
    v60[9] = v53;
    v60[10] = v54;
    v60[11] = v55;
    v60[12] = v56;
    v60[13] = v57;
    v60[14] = v59;
    v60[15] = v58;
    Hasher.combine(bytes:)(v60, v61);
    v28 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v52 + 32));
    if (((-1 << v28) & ~*(_QWORD *)(v52 + 64 + 8 * (v28 >> 6))) != 0)
    {
      sub_100060348();
      goto LABEL_30;
    }
    sub_100060314();
    do
    {
      if (++v30 == v31 && (v29 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      v33 = v30 == v31;
      if (v30 == v31)
        v30 = 0;
      v29 |= v33;
    }
    while (*(_QWORD *)(v32 + 8 * v30) == -1);
    sub_100060300();
LABEL_30:
    sub_1000602EC();
    *(_QWORD *)(v35 + v34) |= v36;
    v38 = (_BYTE *)(*(_QWORD *)(v52 + 48) + 16 * v37);
    *v38 = v19;
    v38[1] = v20;
    v38[2] = v21;
    v38[3] = v22;
    v38[4] = v23;
    v38[5] = v24;
    v38[6] = v25;
    v38[7] = v26;
    v38[8] = v27;
    v38[9] = v53;
    v38[10] = v54;
    v38[11] = v55;
    v38[12] = v56;
    v38[13] = v57;
    v38[14] = v59;
    v38[15] = v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(*(_QWORD *)(v52 + 56) + v46 * v37, v50, v49);
    ++*(_QWORD *)(v52 + 16);
    v6 = v44;
    v7 = v48;
    v10 = v47;
    if (v47)
      continue;
    break;
  }
LABEL_9:
  v13 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_41;
  if (v13 < v43)
  {
    v14 = v42[v13];
    v15 = v7 + 1;
    if (v14)
      goto LABEL_20;
    v15 = v7 + 2;
    if (v7 + 2 < v43)
    {
      v14 = v42[v15];
      if (v14)
        goto LABEL_20;
      v16 = v7 + 3;
      if (v7 + 3 < v43)
      {
        v14 = v42[v16];
        if (v14)
        {
          v15 = v7 + 3;
LABEL_20:
          v47 = (v14 - 1) & v14;
          v48 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
          goto LABEL_21;
        }
        while (1)
        {
          v15 = v16 + 1;
          if (__OFADD__(v16, 1))
            break;
          if (v15 >= v43)
            goto LABEL_32;
          v14 = v42[v15];
          ++v16;
          if (v14)
            goto LABEL_20;
        }
LABEL_42:
        __break(1u);
      }
    }
  }
LABEL_32:
  if ((v40 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v6 + 32);
    v1 = v41;
    if (v39 >= 64)
      sub_1001194A8(0, (unint64_t)(v39 + 63) >> 6, v42);
    else
      *v42 = -1 << v39;
    *(_QWORD *)(v6 + 16) = 0;
    goto LABEL_38;
  }
  sub_1000269A0();
  v1 = v41;
LABEL_39:
  *v1 = v52;
  sub_10000E4E0();
}

void sub_100055304(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = type metadata accessor for HotZone(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UniversalControlLink(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC178);
  v52 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_44;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v49 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v47 = v2;
  v48 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v20 = swift_retain();
  v21 = 0;
  v22 = v12;
  v51 = v12;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v21 << 6); ; i = __clz(__rbit64(v27)) + (v21 << 6))
  {
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v22 + 48) + v29 * i;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 32))(v11, v30, v8, v20);
      v31 = *(_QWORD *)(v22 + 56);
      v32 = *(_QWORD *)(v50 + 72);
      sub_10005F3FC(v31 + v32 * i, v53, type metadata accessor for HotZone);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v11, v30, v8, v20);
      v33 = *(_QWORD *)(v22 + 56);
      v32 = *(_QWORD *)(v50 + 72);
      sub_10005F428(v33 + v32 * i, v53, type metadata accessor for HotZone);
    }
    v34 = *(_QWORD *)(v14 + 40);
    sub_100021264(&qword_1002A9A28, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) == 0)
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v37) >> 6;
      while (++v39 != v42 || (v41 & 1) == 0)
      {
        v43 = v39 == v42;
        if (v39 == v42)
          v39 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v19 + 8 * v39);
        if (v44 != -1)
        {
          v40 = __clz(__rbit64(~v44)) + (v39 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return;
    }
    v40 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v19 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v40, v11, v8);
    sub_10005F3FC(v53, *(_QWORD *)(v14 + 56) + v32 * v40, type metadata accessor for HotZone);
    ++*(_QWORD *)(v14 + 16);
    v22 = v51;
    if (v18)
      goto LABEL_8;
LABEL_9:
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
      goto LABEL_46;
    if (v25 >= v48)
    {
      swift_release();
      v3 = v47;
      v26 = v49;
      goto LABEL_38;
    }
    v26 = v49;
    v27 = v49[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v48)
        goto LABEL_36;
      v27 = v49[v21];
      if (!v27)
        break;
    }
LABEL_20:
    v18 = (v27 - 1) & v27;
  }
  v28 = v25 + 2;
  if (v28 < v48)
  {
    v27 = v49[v28];
    if (!v27)
    {
      while (1)
      {
        v21 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_47;
        if (v21 >= v48)
          goto LABEL_36;
        v27 = v49[v21];
        ++v28;
        if (v27)
          goto LABEL_20;
      }
    }
    v21 = v28;
    goto LABEL_20;
  }
LABEL_36:
  swift_release();
  v3 = v47;
LABEL_38:
  if ((v52 & 1) != 0)
  {
    v45 = 1 << *(_BYTE *)(v51 + 32);
    if (v45 >= 64)
      sub_1001194A8(0, (unint64_t)(v45 + 63) >> 6, v26);
    else
      *v26 = -1 << v45;
    *(_QWORD *)(v51 + 16) = 0;
  }
LABEL_44:
  swift_release();
  *v3 = v14;
}

uint64_t sub_10005571C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t *v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  __int128 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  _BYTE v58[16];
  _QWORD v59[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC0B8);
  v46 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_41:
    result = swift_release(v5);
    goto LABEL_42;
  }
  v9 = 0;
  v42 = v3;
  v43 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v44 = (unint64_t)(v10 + 63) >> 6;
  v45 = v5;
  v13 = v7 + 64;
  if (!v12)
    goto LABEL_10;
  while (2)
  {
    v47 = (v12 - 1) & v12;
    v48 = v9;
    v14 = __clz(__rbit64(v12)) | (v9 << 6);
LABEL_22:
    v19 = *(_QWORD *)(v5 + 56);
    v20 = (char *)(*(_QWORD *)(v5 + 48) + 16 * v14);
    v50 = *v20;
    v51 = v20[1];
    v52 = v20[2];
    v53 = v20[3];
    v54 = v20[4];
    v55 = v20[5];
    v56 = v20[6];
    v57 = v20[7];
    v21 = v20[8];
    v22 = v20[9];
    v23 = v20[10];
    v24 = v20[11];
    v25 = v20[12];
    v26 = v20[13];
    v27 = v20[14];
    v28 = v20[15];
    v49 = *(_OWORD *)(v19 + 16 * v14);
    if ((v46 & 1) == 0)
      swift_unknownObjectRetain(v49);
    Hasher.init(_seed:)(v59, *(_QWORD *)(v8 + 40));
    v58[0] = v50;
    v58[1] = v51;
    v58[2] = v52;
    v58[3] = v53;
    v58[4] = v54;
    v58[5] = v55;
    v58[6] = v56;
    v58[7] = v57;
    v58[8] = v21;
    v58[9] = v22;
    v58[10] = v23;
    v58[11] = v24;
    v58[12] = v25;
    v58[13] = v26;
    v58[14] = v27;
    v58[15] = v28;
    Hasher.combine(bytes:)(v58, v59);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v34 = v21;
      goto LABEL_33;
    }
    v35 = 0;
    v36 = (unint64_t)(63 - v30) >> 6;
    v34 = v21;
    do
    {
      if (++v32 == v36 && (v35 & 1) != 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v37 = v32 == v36;
      if (v32 == v36)
        v32 = 0;
      v35 |= v37;
      v38 = *(_QWORD *)(v13 + 8 * v32);
    }
    while (v38 == -1);
    v33 = __clz(__rbit64(~v38)) + (v32 << 6);
LABEL_33:
    *(_QWORD *)(v13 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v39 = (_BYTE *)(*(_QWORD *)(v8 + 48) + 16 * v33);
    *v39 = v50;
    v39[1] = v51;
    v39[2] = v52;
    v39[3] = v53;
    v39[4] = v54;
    v39[5] = v55;
    v39[6] = v56;
    v39[7] = v57;
    v39[8] = v34;
    v39[9] = v22;
    v39[10] = v23;
    v39[11] = v24;
    v39[12] = v25;
    v39[13] = v26;
    v39[14] = v27;
    v39[15] = v28;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v33) = v49;
    ++*(_QWORD *)(v8 + 16);
    v5 = v45;
    v12 = v47;
    v9 = v48;
    if (v47)
      continue;
    break;
  }
LABEL_10:
  v15 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_44;
  if (v15 < v44)
  {
    v16 = v43[v15];
    v17 = v9 + 1;
    if (v16)
      goto LABEL_21;
    v17 = v9 + 2;
    if (v9 + 2 < v44)
    {
      v16 = v43[v17];
      if (v16)
        goto LABEL_21;
      v18 = v9 + 3;
      if (v9 + 3 < v44)
      {
        v16 = v43[v18];
        if (v16)
        {
          v17 = v9 + 3;
LABEL_21:
          v47 = (v16 - 1) & v16;
          v48 = v17;
          v14 = __clz(__rbit64(v16)) + (v17 << 6);
          goto LABEL_22;
        }
        while (1)
        {
          v17 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          if (v17 >= v44)
            goto LABEL_35;
          v16 = v43[v17];
          ++v18;
          if (v16)
            goto LABEL_21;
        }
LABEL_45:
        __break(1u);
      }
    }
  }
LABEL_35:
  if ((v46 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v42;
    if (v40 >= 64)
      sub_1001194A8(0, (unint64_t)(v40 + 63) >> 6, v43);
    else
      *v43 = -1 << v40;
    *(_QWORD *)(v5 + 16) = 0;
    goto LABEL_41;
  }
  result = swift_release(v5);
  v3 = v42;
LABEL_42:
  *v3 = v8;
  return result;
}

uint64_t sub_100055BA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t *v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  _BYTE v60[16];
  _QWORD v61[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC258);
  v48 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_41:
    result = swift_release();
    goto LABEL_42;
  }
  v9 = 0;
  v44 = v3;
  v45 = (_QWORD *)(v5 + 64);
  v10 = 1 << *(_BYTE *)(v5 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v46 = (unint64_t)(v10 + 63) >> 6;
  v47 = v5;
  v13 = v7 + 64;
  if (!v12)
    goto LABEL_10;
  while (2)
  {
    v49 = (v12 - 1) & v12;
    v50 = v9;
    v14 = __clz(__rbit64(v12)) | (v9 << 6);
LABEL_22:
    v19 = *(_QWORD *)(v5 + 56);
    v20 = (char *)(*(_QWORD *)(v5 + 48) + 16 * v14);
    v52 = *v20;
    v53 = v20[1];
    v54 = v20[2];
    v55 = v20[3];
    v56 = v20[4];
    v57 = v20[5];
    v58 = v20[6];
    v59 = v20[7];
    v21 = v20[8];
    v22 = v20[9];
    v23 = v20[10];
    v24 = v20[11];
    v25 = v20[12];
    v26 = v20[13];
    v27 = v20[14];
    v28 = v20[15];
    v29 = *(_QWORD *)(v19 + 8 * v14);
    if ((v48 & 1) == 0)
      v29 = swift_unknownObjectRetain(v29);
    v51 = v29;
    Hasher.init(_seed:)(v61, *(_QWORD *)(v8 + 40));
    v60[0] = v52;
    v60[1] = v53;
    v60[2] = v54;
    v60[3] = v55;
    v60[4] = v56;
    v60[5] = v57;
    v60[6] = v58;
    v60[7] = v59;
    v60[8] = v21;
    v60[9] = v22;
    v60[10] = v23;
    v60[11] = v24;
    v60[12] = v25;
    v60[13] = v26;
    v60[14] = v27;
    v60[15] = v28;
    Hasher.combine(bytes:)(v60, v61);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v8 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v13 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v13 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      v35 = v51;
      v36 = v21;
      goto LABEL_33;
    }
    v37 = 0;
    v38 = (unint64_t)(63 - v31) >> 6;
    v35 = v51;
    v36 = v21;
    do
    {
      if (++v33 == v38 && (v37 & 1) != 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      v39 = v33 == v38;
      if (v33 == v38)
        v33 = 0;
      v37 |= v39;
      v40 = *(_QWORD *)(v13 + 8 * v33);
    }
    while (v40 == -1);
    v34 = __clz(__rbit64(~v40)) + (v33 << 6);
LABEL_33:
    *(_QWORD *)(v13 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    v41 = (_BYTE *)(*(_QWORD *)(v8 + 48) + 16 * v34);
    *v41 = v52;
    v41[1] = v53;
    v41[2] = v54;
    v41[3] = v55;
    v41[4] = v56;
    v41[5] = v57;
    v41[6] = v58;
    v41[7] = v59;
    v41[8] = v36;
    v41[9] = v22;
    v41[10] = v23;
    v41[11] = v24;
    v41[12] = v25;
    v41[13] = v26;
    v41[14] = v27;
    v41[15] = v28;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v34) = v35;
    ++*(_QWORD *)(v8 + 16);
    v5 = v47;
    v12 = v49;
    v9 = v50;
    if (v49)
      continue;
    break;
  }
LABEL_10:
  v15 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_44;
  if (v15 < v46)
  {
    v16 = v45[v15];
    v17 = v9 + 1;
    if (v16)
      goto LABEL_21;
    v17 = v9 + 2;
    if (v9 + 2 < v46)
    {
      v16 = v45[v17];
      if (v16)
        goto LABEL_21;
      v18 = v9 + 3;
      if (v9 + 3 < v46)
      {
        v16 = v45[v18];
        if (v16)
        {
          v17 = v9 + 3;
LABEL_21:
          v49 = (v16 - 1) & v16;
          v50 = v17;
          v14 = __clz(__rbit64(v16)) + (v17 << 6);
          goto LABEL_22;
        }
        while (1)
        {
          v17 = v18 + 1;
          if (__OFADD__(v18, 1))
            break;
          if (v17 >= v46)
            goto LABEL_35;
          v16 = v45[v17];
          ++v18;
          if (v16)
            goto LABEL_21;
        }
LABEL_45:
        __break(1u);
      }
    }
  }
LABEL_35:
  if ((v48 & 1) != 0)
  {
    v42 = 1 << *(_BYTE *)(v5 + 32);
    v3 = v44;
    if (v42 >= 64)
      sub_1001194A8(0, (unint64_t)(v42 + 63) >> 6, v45);
    else
      *v45 = -1 << v42;
    *(_QWORD *)(v5 + 16) = 0;
    goto LABEL_41;
  }
  result = swift_release();
  v3 = v44;
LABEL_42:
  *v3 = v8;
  return result;
}

void sub_100056028(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for ConnectionCoordinator.DiagnosticState(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1000055B0(&qword_1002AC1F8);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_42;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain();
  v17 = 0;
  if (!v15)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v22)) + (v17 << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * i);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(v43 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * i;
    if ((v44 & 1) != 0)
    {
      sub_10005F3FC(v28, (uint64_t)v8, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    }
    else
    {
      sub_10005F428(v28, (uint64_t)v8, type metadata accessor for ConnectionCoordinator.DiagnosticState);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v26, v25);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) == 0)
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v35 || (v34 & 1) == 0)
      {
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v32);
        if (v37 != -1)
        {
          v33 = __clz(__rbit64(~v37)) + (v32 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v16 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    v38 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v33);
    *v38 = v26;
    v38[1] = v25;
    sub_10005F3FC((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v33, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    ++*(_QWORD *)(v11 + 16);
    if (v15)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_44;
    if (v20 >= v41)
    {
      swift_release();
      v3 = v40;
      v21 = v42;
      goto LABEL_37;
    }
    v21 = v42;
    v22 = v42[v20];
    ++v17;
    if (!v22)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v41)
        goto LABEL_35;
      v22 = v42[v17];
      if (!v22)
        break;
    }
LABEL_20:
    v15 = (v22 - 1) & v22;
  }
  v23 = v20 + 2;
  if (v23 < v41)
  {
    v22 = v42[v23];
    if (!v22)
    {
      while (1)
      {
        v17 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_45;
        if (v17 >= v41)
          goto LABEL_35;
        v22 = v42[v17];
        ++v23;
        if (v22)
          goto LABEL_20;
      }
    }
    v17 = v23;
    goto LABEL_20;
  }
LABEL_35:
  swift_release();
  v3 = v40;
LABEL_37:
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v9 + 32);
    if (v39 >= 64)
      sub_1001194A8(0, (unint64_t)(v39 + 63) >> 6, v21);
    else
      *v21 = -1 << v39;
    *(_QWORD *)(v9 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *v3 = v11;
}

void sub_10005639C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC1D8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v37 = (v11 - 1) & v11;
    v38 = v13;
    for (i = __clz(__rbit64(v11)) | (v13 << 6); ; i = __clz(__rbit64(v16)) + (v17 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v21 = *v19;
      v20 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 80 * i;
      v43 = *(_OWORD *)(v22 + 24);
      v44 = *(_OWORD *)(v22 + 8);
      v41 = *(_OWORD *)(v22 + 56);
      v42 = *(_OWORD *)(v22 + 40);
      v39 = *(_QWORD *)v22;
      v40 = *(_QWORD *)(v22 + 72);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v45, v21, v20);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v32 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v27);
      *v32 = v21;
      v32[1] = v20;
      v33 = *(_QWORD *)(v8 + 56) + 80 * v27;
      v13 = v38;
      *(_QWORD *)v33 = v39;
      *(_OWORD *)(v33 + 8) = v44;
      *(_OWORD *)(v33 + 24) = v43;
      *(_OWORD *)(v33 + 40) = v42;
      *(_OWORD *)(v33 + 56) = v41;
      *(_QWORD *)(v33 + 72) = v40;
      ++*(_QWORD *)(v8 + 16);
      v11 = v37;
      if (v37)
        goto LABEL_9;
LABEL_10:
      v15 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_42;
      if (v15 >= v35)
        goto LABEL_35;
      v16 = v36[v15];
      v17 = v13 + 1;
      if (!v16)
      {
        v17 = v13 + 2;
        if (v13 + 2 >= v35)
          goto LABEL_35;
        v16 = v36[v17];
        if (!v16)
        {
          v18 = v13 + 3;
          if (v13 + 3 >= v35)
          {
LABEL_35:
            swift_release();
            if ((a2 & 1) != 0)
            {
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v36);
              else
                *v36 = -1 << v34;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v16 = v36[v18];
          if (!v16)
          {
            while (1)
            {
              v17 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_43;
              if (v17 >= v35)
                goto LABEL_35;
              v16 = v36[v17];
              ++v18;
              if (v16)
                goto LABEL_21;
            }
          }
          v17 = v13 + 3;
        }
      }
LABEL_21:
      v37 = (v16 - 1) & v16;
      v38 = v17;
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_100056748(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC1E8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * i);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v23, v22);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v23;
    v33[1] = v22;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v28) = v38;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v12)
    {
      swift_release();
      v3 = v35;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v36 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_35;
      v19 = *(_QWORD *)(v36 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v12)
  {
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v12)
          goto LABEL_35;
        v19 = *(_QWORD *)(v36 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release();
  v3 = v35;
LABEL_37:
  if ((v37 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v18);
    else
      *v18 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *v3 = v8;
}

void sub_100056A3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC210);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v22, v21);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v22;
    v33[1] = v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v28) = v23;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_44;
    if (v16 >= v35)
    {
      swift_release();
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_35;
      v18 = *(_QWORD *)(v36 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_21:
    v11 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v35)
  {
    v18 = *(_QWORD *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_45;
        if (v13 >= v35)
          goto LABEL_35;
        v18 = *(_QWORD *)(v36 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_21;
      }
    }
    v13 = v19;
    goto LABEL_21;
  }
LABEL_35:
  swift_release();
LABEL_37:
  if ((v37 & 1) != 0)
  {
    v34 = 1 << *(_BYTE *)(v5 + 32);
    if (v34 >= 64)
      sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v17);
    else
      *v17 = -1 << v34;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *v3 = v8;
}

Swift::Int sub_100056D40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC368);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = v5 + 64;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v39 = v14;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v24 = *v22;
      v23 = v22[1];
      v25 = *(_QWORD *)(v5 + 56) + (i << 6);
      v40 = *(_OWORD *)v25;
      v43 = *(_OWORD *)(v25 + 32);
      v44 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 56);
      v42 = *(_QWORD *)(v25 + 48);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v42);
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v45, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) == 0)
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          v32 = v28 == v31;
          if (v28 == v31)
            v28 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v28);
          if (v33 != -1)
          {
            v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v34 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v29);
      *v34 = v24;
      v34[1] = v23;
      v35 = *(_QWORD *)(v8 + 56) + (v29 << 6);
      *(_OWORD *)v35 = v40;
      *(_OWORD *)(v35 + 16) = v44;
      *(_OWORD *)(v35 + 32) = v43;
      *(_QWORD *)(v35 + 48) = v42;
      *(_QWORD *)(v35 + 56) = v41;
      ++*(_QWORD *)(v8 + 16);
      v14 = v39;
      if (v11)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_44;
      if (v17 >= v37)
        break;
      v18 = (_QWORD *)(v5 + 64);
      v19 = *(_QWORD *)(v38 + 8 * v17);
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v37)
          goto LABEL_35;
        v19 = *(_QWORD *)(v38 + 8 * v20);
        if (!v19)
        {
          v21 = v14 + 3;
          if (v14 + 3 >= v37)
          {
LABEL_35:
            swift_release();
            if ((a2 & 1) == 0)
              goto LABEL_42;
            goto LABEL_38;
          }
          v19 = *(_QWORD *)(v38 + 8 * v21);
          if (!v19)
          {
            while (1)
            {
              v20 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_45;
              if (v20 >= v37)
                goto LABEL_35;
              v19 = *(_QWORD *)(v38 + 8 * v20);
              ++v21;
              if (v19)
                goto LABEL_21;
            }
          }
          v20 = v14 + 3;
        }
      }
LABEL_21:
      v11 = (v19 - 1) & v19;
      v39 = v20;
    }
    swift_release();
    v18 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_42;
LABEL_38:
    v36 = 1 << *(_BYTE *)(v5 + 32);
    if (v36 >= 64)
      sub_1001194A8(0, (unint64_t)(v36 + 63) >> 6, v18);
    else
      *v18 = -1 << v36;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release();
  *v3 = v8;
  return result;
}

void sub_1000570D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t __dst[45];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC220);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    v41 = v5;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      if ((v42 & 1) != 0)
      {
        v22 = *(_QWORD *)(v5 + 56) + 352 * i;
        v66 = *(_QWORD *)v22;
        v64 = *(_QWORD *)(v22 + 8);
        v61 = *(_QWORD *)(v22 + 16);
        v59 = *(_QWORD *)(v22 + 24);
        v54 = *(_QWORD *)(v22 + 32);
        v49 = *(_QWORD *)(v22 + 40);
        v47 = *(_QWORD *)(v22 + 48);
        v44 = *(_QWORD *)(v22 + 64);
        v45 = *(_QWORD *)(v22 + 56);
        v43 = *(_QWORD *)(v22 + 72);
        v77 = *(_QWORD *)(v22 + 80);
        v75 = *(_QWORD *)(v22 + 88);
        v72 = *(_QWORD *)(v22 + 104);
        v73 = *(_QWORD *)(v22 + 96);
        v70 = *(_QWORD *)(v22 + 120);
        v71 = *(_QWORD *)(v22 + 112);
        v69 = *(_QWORD *)(v22 + 128);
        v67 = *(_QWORD *)(v22 + 136);
        v65 = *(_QWORD *)(v22 + 144);
        v62 = *(_QWORD *)(v22 + 152);
        v60 = *(_QWORD *)(v22 + 160);
        v57 = *(_QWORD *)(v22 + 168);
        v50 = *(_QWORD *)(v22 + 176);
        v48 = *(_QWORD *)(v22 + 184);
        v46 = *(_BYTE *)(v22 + 192);
        v23 = *(_BYTE *)(v22 + 193);
        v80 = *(_QWORD *)(v22 + 218);
        v79 = *(_QWORD *)(v22 + 226);
        v78 = *(_QWORD *)(v22 + 234);
        v76 = *(_QWORD *)(v22 + 242);
        v74 = *(_QWORD *)(v22 + 250);
        v68 = *(_BYTE *)(v22 + 306);
        v83 = *(_QWORD *)(v22 + 210);
        v84 = *(_QWORD *)(v22 + 312);
        v86 = *(_QWORD *)(v22 + 328);
        v87 = *(_QWORD *)(v22 + 202);
        v81 = *(_QWORD *)(v22 + 320);
        v82 = *(_QWORD *)(v22 + 336);
        v85 = *(_QWORD *)(v22 + 344);
        v24 = *(_QWORD *)(v22 + 194);
        v22 += 194;
        v63 = v24;
        v58 = *(_QWORD *)(v22 + 64);
        v55 = *(_QWORD *)(v22 + 80);
        v56 = *(_QWORD *)(v22 + 72);
        v52 = *(_QWORD *)(v22 + 96);
        v53 = *(_QWORD *)(v22 + 88);
        v51 = *(_QWORD *)(v22 + 104);
        v25 = *(_BYTE *)(v22 + 113);
      }
      else
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 352 * i), 0x160uLL);
        v85 = __dst[43];
        v86 = __dst[41];
        v81 = __dst[40];
        v82 = __dst[42];
        v63 = *(uint64_t *)((char *)&__dst[24] + 2);
        v87 = *(uint64_t *)((char *)&__dst[25] + 2);
        v83 = *(uint64_t *)((char *)&__dst[26] + 2);
        v84 = __dst[39];
        v79 = *(uint64_t *)((char *)&__dst[28] + 2);
        v80 = *(uint64_t *)((char *)&__dst[27] + 2);
        v78 = *(uint64_t *)((char *)&__dst[29] + 2);
        v58 = *(uint64_t *)((char *)&__dst[32] + 2);
        v56 = *(uint64_t *)((char *)&__dst[33] + 2);
        v55 = *(uint64_t *)((char *)&__dst[34] + 2);
        v53 = *(uint64_t *)((char *)&__dst[35] + 2);
        v52 = *(uint64_t *)((char *)&__dst[36] + 2);
        v51 = *(uint64_t *)((char *)&__dst[37] + 2);
        v68 = BYTE2(__dst[38]);
        v25 = BYTE3(__dst[38]);
        v76 = *(uint64_t *)((char *)&__dst[30] + 2);
        v77 = __dst[10];
        v74 = *(uint64_t *)((char *)&__dst[31] + 2);
        v75 = __dst[11];
        v72 = __dst[13];
        v73 = __dst[12];
        v70 = __dst[15];
        v71 = __dst[14];
        v69 = __dst[16];
        v60 = __dst[20];
        v57 = __dst[21];
        v50 = __dst[22];
        v48 = __dst[23];
        v46 = __dst[24];
        v23 = BYTE1(__dst[24]);
        v66 = __dst[0];
        v67 = __dst[17];
        v64 = __dst[1];
        v65 = __dst[18];
        v61 = __dst[2];
        v62 = __dst[19];
        v59 = __dst[3];
        v54 = __dst[4];
        v49 = __dst[5];
        v47 = __dst[6];
        v44 = __dst[8];
        v45 = __dst[7];
        v43 = __dst[9];
        swift_bridgeObjectRetain();
        sub_10005F650(__dst);
      }
      Hasher.init(_seed:)(__dst, *(_QWORD *)(v8 + 40));
      String.hash(into:)(__dst, v20, v21);
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          v33 = v29 == v32;
          if (v29 == v32)
            v29 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return;
      }
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
      LOBYTE(__dst[0]) = v23;
      *(_QWORD *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      v35 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v30);
      *v35 = v20;
      v35[1] = v21;
      v36 = *(_QWORD *)(v8 + 56) + 352 * v30;
      *(_QWORD *)v36 = v66;
      *(_QWORD *)(v36 + 8) = v64;
      *(_QWORD *)(v36 + 16) = v61;
      *(_QWORD *)(v36 + 24) = v59;
      *(_QWORD *)(v36 + 32) = v54;
      *(_QWORD *)(v36 + 40) = v49;
      *(_QWORD *)(v36 + 48) = v47;
      *(_QWORD *)(v36 + 56) = v45;
      *(_QWORD *)(v36 + 64) = v44;
      *(_QWORD *)(v36 + 72) = v43;
      *(_QWORD *)(v36 + 80) = v77;
      *(_QWORD *)(v36 + 88) = v75;
      *(_QWORD *)(v36 + 96) = v73;
      *(_QWORD *)(v36 + 104) = v72;
      *(_QWORD *)(v36 + 112) = v71;
      *(_QWORD *)(v36 + 120) = v70;
      *(_QWORD *)(v36 + 128) = v69;
      *(_QWORD *)(v36 + 136) = v67;
      *(_QWORD *)(v36 + 144) = v65;
      *(_QWORD *)(v36 + 152) = v62;
      *(_QWORD *)(v36 + 160) = v60;
      *(_QWORD *)(v36 + 168) = v57;
      *(_QWORD *)(v36 + 176) = v50;
      *(_QWORD *)(v36 + 184) = v48;
      *(_BYTE *)(v36 + 192) = v46;
      *(_BYTE *)(v36 + 193) = __dst[0];
      *(_QWORD *)(v36 + 194) = v63;
      *(_QWORD *)(v36 + 202) = v87;
      *(_QWORD *)(v36 + 210) = v83;
      *(_QWORD *)(v36 + 218) = v80;
      *(_QWORD *)(v36 + 226) = v79;
      *(_QWORD *)(v36 + 234) = v78;
      *(_QWORD *)(v36 + 242) = v76;
      *(_QWORD *)(v36 + 250) = v74;
      *(_QWORD *)(v36 + 258) = v58;
      *(_QWORD *)(v36 + 266) = v56;
      *(_QWORD *)(v36 + 274) = v55;
      *(_QWORD *)(v36 + 282) = v53;
      *(_QWORD *)(v36 + 290) = v52;
      *(_QWORD *)(v36 + 298) = v51;
      *(_BYTE *)(v36 + 306) = v68;
      *(_BYTE *)(v36 + 307) = v25;
      *(_QWORD *)(v36 + 312) = v84;
      *(_QWORD *)(v36 + 320) = v81;
      *(_QWORD *)(v36 + 328) = v86;
      *(_QWORD *)(v36 + 336) = v82;
      *(_QWORD *)(v36 + 344) = v85;
      ++*(_QWORD *)(v8 + 16);
      v5 = v41;
      if (v11)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_43;
      if (v16 >= v39)
        goto LABEL_36;
      v17 = v40[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v39)
          goto LABEL_36;
        v17 = v40[v13];
        if (!v17)
        {
          v18 = v16 + 2;
          if (v18 >= v39)
          {
LABEL_36:
            swift_release();
            v3 = v38;
            if ((v42 & 1) != 0)
            {
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                sub_1001194A8(0, (unint64_t)(v37 + 63) >> 6, v40);
              else
                *v40 = -1 << v37;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v17 = v40[v18];
          if (!v17)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_44;
              if (v13 >= v39)
                goto LABEL_36;
              v17 = v40[v13];
              ++v18;
              if (v17)
                goto LABEL_21;
            }
          }
          v13 = v18;
        }
      }
LABEL_21:
      v11 = (v17 - 1) & v17;
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_1000577FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC238);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * i);
    v24 = *v23;
    v25 = v23[1];
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v42, v22, v21);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) == 0)
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v30);
    *v35 = v22;
    v35[1] = v21;
    v36 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v30);
    *v36 = v24;
    v36[1] = v25;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_44;
    if (v16 >= v39)
    {
      swift_release();
      v3 = v38;
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v40 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v39)
        goto LABEL_35;
      v18 = *(_QWORD *)(v40 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_21:
    v11 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v39)
  {
    v18 = *(_QWORD *)(v40 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_45;
        if (v13 >= v39)
          goto LABEL_35;
        v18 = *(_QWORD *)(v40 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_21;
      }
    }
    v13 = v19;
    goto LABEL_21;
  }
LABEL_35:
  swift_release();
  v3 = v38;
LABEL_37:
  if ((v41 & 1) != 0)
  {
    v37 = 1 << *(_BYTE *)(v5 + 32);
    if (v37 >= 64)
      sub_1001194A8(0, (unint64_t)(v37 + 63) >> 6, v17);
    else
      *v17 = -1 << v37;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *v3 = v8;
}

uint64_t sub_100057B08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002AC350);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
      v22 = *v20;
      v21 = v20[1];
      v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * i);
      if ((a2 & 1) != 0)
      {
        sub_100005778(v23, v38);
      }
      else
      {
        sub_100007918((uint64_t)v23, (uint64_t)v38);
        swift_bridgeObjectRetain(v21);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v22, v21);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_34;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v32 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v27);
      *v32 = v22;
      v32[1] = v21;
      result = (uint64_t)sub_100005778(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v27));
      ++*(_QWORD *)(v8 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_43;
      if (v17 >= v35)
        goto LABEL_36;
      v18 = v36[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v35)
          goto LABEL_36;
        v18 = v36[v14];
        if (!v18)
        {
          v19 = v17 + 2;
          if (v19 >= v35)
          {
LABEL_36:
            swift_release();
            v3 = v34;
            if ((a2 & 1) != 0)
            {
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                sub_1001194A8(0, (unint64_t)(v33 + 63) >> 6, v36);
              else
                *v36 = -1 << v33;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v18 = v36[v19];
          if (!v18)
          {
            while (1)
            {
              v14 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_44;
              if (v14 >= v35)
                goto LABEL_36;
              v18 = v36[v14];
              ++v19;
              if (v18)
                goto LABEL_21;
            }
          }
          v14 = v19;
        }
      }
LABEL_21:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

void sub_100057E00()
{
  sub_100058604();
}

void sub_100057E14(uint64_t a1)
{
  sub_100058520(a1, (void (*)(_QWORD *, uint64_t, uint64_t))sub_10019CDDC);
}

void sub_100057E20(uint64_t a1)
{
  sub_100058520(a1, (void (*)(_QWORD *, uint64_t, uint64_t))sub_10019CE00);
}

void sub_100057E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10005FEB0();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
    v3 = (const void *)sub_1000088D8(v2, 16 * v1 + 32);
    sub_100060328(v3);
    sub_10005FEE0(2 * (v4 / 16));
    sub_10005C830(v5, v6, v7, v8);
    sub_10005FE84();
    sub_10005FE5C();
    if (!v9)
      __break(1u);
  }
  sub_1000125AC();
}

void sub_100057EA4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if (!v5)
      goto LABEL_9;
    if (v5 <= 0)
    {
      v9 = _swiftEmptyArrayStorage;
    }
    else
    {
      v8 = sub_1000055B0(&qword_1002AC0E8);
      v9 = (_QWORD *)sub_1000088D8(v8, 32 * v5 + 32);
      sub_100060328(v9);
      v9[2] = v5;
      v9[3] = 2 * (v10 / 32);
    }
    if (v4 != a3)
    {
      sub_10006A570(a2 + 32 * a3, v5, (unint64_t)(v9 + 4));
LABEL_9:
      sub_10002644C();
      return;
    }
  }
  __break(1u);
}

void sub_100057F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10005FEB0();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_1000055B0((uint64_t *)&unk_1002AC8D0);
    v3 = (const void *)sub_1000088D8(v2, 8 * v1 + 32);
    v4 = j__malloc_size(v3);
    sub_10005FEE0(2 * ((uint64_t)(v4 - 32) / 8));
    sub_10005C9C4(v5, v6, v7, v8);
    sub_10005FE84();
    sub_10005FE5C();
    if (!v9)
      __break(1u);
  }
  sub_1000125AC();
}

_QWORD *sub_100057FC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v1 = a1[1];
  v2 = a1[4];
  v3 = a1[5];
  v4 = *((_BYTE *)a1 + 48);
  v5 = *a1;
  sub_1000600E8();
  sub_10019CFA8();
  v7 = v6;
  sub_100025618(v2, v3, v4);
  sub_100060398(v1);
  if (!v7)
    return _swiftEmptyArrayStorage;
  if (v7 <= 0)
  {
    v9 = _swiftEmptyArrayStorage;
  }
  else
  {
    v8 = sub_1000055B0((uint64_t *)&unk_1002AC110);
    v9 = (_QWORD *)sub_1000088D8(v8, 24 * v7 + 32);
    sub_100060328(v9);
    v9[2] = v7;
    v9[3] = 2 * (v10 / 24);
  }
  sub_1000600E8();
  swift_bridgeObjectRetain(v5);
  sub_10006033C();
  sub_10005CB58();
  v13 = v11;
  swift_bridgeObjectRelease();
  sub_100025618(v14, v15, v16);
  sub_100060398(v17);
  result = (_QWORD *)sub_100025618(v18, v19, v20);
  if (v13 == v7)
    return v9;
  __break(1u);
  return result;
}

void sub_100058138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;

  sub_10005FEB0();
  a25 = v26;
  a26 = v28;
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v30 = v27;
    v31 = sub_1000055B0((uint64_t *)&unk_1002AC900);
    v32 = (_QWORD *)sub_1000088D8(v31, 72 * v29 + 32);
    sub_100060328(v32);
    v32[2] = v29;
    v32[3] = 2 * (v33 / 72);
    sub_10005CD60(&a10, (uint64_t)(v32 + 4), v29, v30);
    sub_10003AFBC();
    sub_10005FE5C();
    if (!v34)
      __break(1u);
  }
  sub_1000125AC();
}

void sub_1000581D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10005FEB0();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_1000055B0((uint64_t *)&unk_1002AC0D0);
    v3 = (const void *)sub_1000088D8(v2, (v1 << 6) | 0x20);
    sub_100060328(v3);
    sub_10005FEE0(2 * (v4 / 64));
    sub_10005CF98(v5, v6, v7, v8);
    sub_10005FE84();
    sub_10005FE5C();
    if (!v9)
      __break(1u);
  }
  sub_1000125AC();
}

void sub_100058248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10005840C(a1, (uint64_t)&unk_1002AC8E0, (uint64_t)&unk_1002AC0F0, (uint64_t)sub_10005D140, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_100058268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_10005FEB0();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_1000055B0(&qword_1002AC0E0);
    v3 = (const void *)sub_1000088D8(v2, 8 * v1 + 32);
    j__malloc_size(v3);
    sub_1000601E8();
    sub_10005FEE0(v4);
    sub_10005DBF0(v5, v6, v7, v8);
    sub_10005FE84();
    sub_10005FE5C();
    if (!v9)
      __break(1u);
  }
  sub_1000125AC();
}

_QWORD *sub_1000582D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000055B0(&qword_1002AC170);
  v4 = *(_QWORD *)(type metadata accessor for HotZone(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      sub_10005D434(&v14, (uint64_t)v8 + v7, v1, a1);
      v12 = v11;
      v13 = v14;
      swift_bridgeObjectRetain();
      sub_10005E1F4(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1000583F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10005840C(a1, (uint64_t)&unk_1002AC0B0, (uint64_t)&qword_1002ACDB0, (uint64_t)sub_10005D6F0, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26);
}

void sub_10005840C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t (*v30)(uint64_t *, char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *, char *, uint64_t, uint64_t);
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_10005FEB0();
  a25 = v26;
  a26 = v31;
  v32 = *(_QWORD *)(v27 + 16);
  if (!v32)
    goto LABEL_9;
  v33 = v30;
  v34 = v29;
  v35 = v27;
  v36 = sub_10006017C(v27, v28);
  v37 = *(_QWORD *)(sub_1000055B0(v34) - 8);
  v38 = *(_QWORD *)(v37 + 72);
  v39 = *(unsigned __int8 *)(v37 + 80);
  v40 = (v39 + 32) & ~v39;
  v41 = (_QWORD *)swift_allocObject(v36, v40 + v38 * v32, v39 | 7);
  v42 = j__malloc_size(v41);
  if (v38)
  {
    if (v42 - v40 != 0x8000000000000000 || v38 != -1)
    {
      v41[2] = v32;
      v41[3] = 2 * ((uint64_t)(v42 - v40) / v38);
      v44 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000055B0(v34) - 8) + 80);
      v45 = v33(&a10, (char *)v41 + ((v44 + 32) & ~v44), v32, v35);
      v46 = a10;
      sub_10003AFBC();
      sub_10005E1F4(v46);
      if (v45 != v32)
        __break(1u);
LABEL_9:
      sub_1000125AC();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100058514(uint64_t a1)
{
  sub_100058520(a1, (void (*)(_QWORD *, uint64_t, uint64_t))sub_10005DDE4);
}

void sub_100058520(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
    goto LABEL_8;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_1000055B0(&qword_1002AC0E0);
      v6 = (_QWORD *)sub_1000088D8(v5, 8 * v4 + 32);
      j__malloc_size(v6);
      sub_1000601E8();
      v6[2] = v4;
      v6[3] = v7;
    }
    sub_10003AFBC();
    a2(v6 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, uint64_t))v4)
      break;
    __break(1u);
LABEL_8:
    v9 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
    sub_10003AFBC();
    v4 = _CocoaArrayWrapper.endIndex.getter(v9);
    sub_10000E420();
  }
  sub_10002644C();
}

void sub_1000585F0()
{
  sub_100058604();
}

void sub_100058604()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(void);
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  char v8;

  sub_10005FEB0();
  v3 = *(_QWORD *)(v0 + 16);
  if (v3)
  {
    v4 = v2;
    v5 = sub_10006017C(v0, v1);
    v6 = (const void *)sub_1000088D8(v5, 24 * v3 + 32);
    sub_100060328(v6);
    sub_10005FEE0(2 * (v7 / 24));
    v4();
    sub_10005FE84();
    sub_10005FE5C();
    if (!v8)
      __break(1u);
  }
  sub_1000125AC();
}

void sub_100058678()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006B958();
  *v0 = v1;
}

void sub_100058694()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006B974();
  *v0 = v1;
}

void sub_1000586B0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BA34();
  *v0 = v1;
}

void sub_1000586CC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BA50();
  *v0 = v1;
}

void sub_1000586E8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BB0C();
  *v0 = v1;
}

void sub_100058704()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BB28();
  *v0 = v1;
}

void sub_100058720()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BBC8();
  *v0 = v1;
}

void sub_10005873C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BC68();
  *v0 = v1;
}

void sub_100058758()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BD5C();
  *v0 = v1;
}

void sub_100058774()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BE1C();
  *v0 = v1;
}

void sub_100058790()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BF34();
  *v0 = v1;
}

void sub_1000587AC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BFF8();
  *v0 = v1;
}

void sub_1000587C8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C014();
  *v0 = v1;
}

void sub_1000587E4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C108();
  *v0 = v1;
}

void sub_100058800()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006BF18();
  *v0 = v1;
}

void sub_10005881C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C124();
  *v0 = v1;
}

void sub_100058838()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C1BC();
  *v0 = v1;
}

void sub_100058854()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C1D8();
  *v0 = v1;
}

void sub_100058870()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C1F4();
  *v0 = v1;
}

void sub_10005888C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C28C();
  *v0 = v1;
}

void sub_1000588A8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C324();
  *v0 = v1;
}

void sub_1000588C4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C340();
  *v0 = v1;
}

void sub_1000588E0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C35C();
  *v0 = v1;
}

void sub_1000588FC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C3F4();
  *v0 = v1;
}

void sub_100058918()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C48C();
  *v0 = v1;
}

void sub_100058934()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C548();
  *v0 = v1;
}

void sub_100058950()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C5E0();
  *v0 = v1;
}

void sub_10005896C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C5FC();
  *v0 = v1;
}

void sub_100058988()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C618();
  *v0 = v1;
}

void sub_1000589A4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C6C4();
  *v0 = v1;
}

void sub_1000589C0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C780();
  *v0 = v1;
}

void sub_1000589DC()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10006C818();
  *v0 = v1;
}

void sub_1000589F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for HotZone(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CC68();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_100058A78(v6);
  *a1 = v3;
}

void sub_100058A78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  int64_t *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  Swift::Int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;

  v2 = v1;
  v136 = type metadata accessor for HotZone(0);
  v4 = *(_QWORD *)(v136 - 8);
  v5 = __chkstk_darwin(v136);
  v132 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v142 = (uint64_t)&v125 - v8;
  v9 = __chkstk_darwin(v7);
  v139 = (uint64_t)&v125 - v10;
  __chkstk_darwin(v9);
  v138 = (uint64_t)&v125 - v11;
  v12 = (int64_t)a1;
  v13 = a1[1];
  v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (v13)
        sub_1000593E8(0, v13, 1, (_QWORD *)v12);
      return;
    }
    goto LABEL_141;
  }
  v15 = v14;
  sub_10002121C(v13 / 2);
  v128 = v16;
  v129 = v13;
  v134 = v17;
  v135 = v4;
  if (v13 <= 0)
  {
LABEL_105:
    v19 = _swiftEmptyArrayStorage;
    v66 = _swiftEmptyArrayStorage[2];
    v21 = (uint64_t *)v12;
LABEL_106:
    if (v66 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease();
      if (v129 >= -1)
        goto LABEL_118;
      goto LABEL_145;
    }
    v118 = *v21;
    while (1)
    {
      v12 = v66 - 2;
      if (v66 < 2)
        break;
      if (!v118)
        goto LABEL_149;
      v119 = v19;
      v120 = v19[2 * v12 + 4];
      v121 = v19[2 * v66 + 3];
      sub_10005960C(v118 + *(_QWORD *)(v135 + 72) * v120, v118 + *(_QWORD *)(v135 + 72) * v19[2 * v66 + 2], v118 + *(_QWORD *)(v135 + 72) * v121, v134);
      if (v2)
        goto LABEL_103;
      if (v121 < v120)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_10006CA50();
        v119 = v124;
      }
      if ((unint64_t)v12 >= v119[2])
        goto LABEL_137;
      v122 = &v119[2 * v12 + 4];
      *v122 = v120;
      v122[1] = v121;
      v123 = v119[2];
      if (v66 > v123)
        goto LABEL_138;
      memmove(&v119[2 * v66 + 2], &v119[2 * v66 + 4], 16 * (v123 - v66));
      v119[2] = v123 - 1;
      v66 = v123 - 1;
      v19 = v119;
      if (v123 <= 2)
        goto LABEL_117;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return;
  }
  v127 = v15;
  v18 = 0;
  v19 = _swiftEmptyArrayStorage;
  v20 = v13;
  v21 = (uint64_t *)v12;
  v141 = (uint64_t *)v12;
  while (1)
  {
    v22 = v18;
    v23 = v18 + 1;
    v133 = v18;
    if (v18 + 1 >= v20)
    {
      v40 = v18 + 1;
    }
    else
    {
      v24 = *v21;
      v25 = *(_QWORD *)(v4 + 72);
      v26 = *v21 + v25 * v23;
      v137 = v20;
      v27 = v138;
      sub_10005F428(v26, v138, type metadata accessor for HotZone);
      v28 = v24 + v25 * v22;
      v29 = v139;
      sub_10005F428(v28, v139, type metadata accessor for HotZone);
      LODWORD(v140) = static UniversalControlLink.< infix(_:_:)(v27, v29);
      v30 = v29;
      v22 = v133;
      sub_1000255F0(v30, type metadata accessor for HotZone);
      v31 = v27;
      v20 = v137;
      sub_1000255F0(v31, type metadata accessor for HotZone);
      v32 = v22 + 2;
      v131 = v24;
      v143 = v25;
      if (v22 + 2 >= v20)
      {
        v35 = v22 + 2;
        v21 = v141;
      }
      else
      {
        v130 = v2;
        v33 = v25 * v23;
        v34 = v24;
        v35 = v32;
        v36 = v25 * v32;
        while (1)
        {
          v37 = v138;
          sub_10005F428(v34 + v36, v138, type metadata accessor for HotZone);
          v38 = v139;
          sub_10005F428(v34 + v33, v139, type metadata accessor for HotZone);
          v39 = static UniversalControlLink.< infix(_:_:)(v37, v38);
          sub_1000255F0(v38, type metadata accessor for HotZone);
          sub_1000255F0(v37, type metadata accessor for HotZone);
          if (((v140 ^ v39) & 1) != 0)
            break;
          v34 += v143;
          if (++v35 >= v137)
          {
            v20 = v137;
            v35 = v137;
            v21 = v141;
            v4 = v135;
            v2 = v130;
            v22 = v133;
            goto LABEL_13;
          }
        }
        v21 = v141;
        v4 = v135;
        v2 = v130;
        v22 = v133;
        v20 = v137;
      }
LABEL_13:
      if ((v140 & 1) != 0)
      {
        if (v35 < v22)
          goto LABEL_142;
        v40 = v35;
        if (v22 < v35)
        {
          v130 = v2;
          v41 = 0;
          v42 = v143;
          v43 = v143 * (v35 - 1);
          v44 = v35 * v143;
          v45 = v22 * v143;
          do
          {
            if (v22 != v40 + v41 - 1)
            {
              v46 = v131;
              if (!v131)
                goto LABEL_148;
              v47 = v131 + v45;
              v140 = v131 + v43;
              sub_10005F3FC(v131 + v45, v132, type metadata accessor for HotZone);
              if (v45 < v43 || v47 >= v46 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v46 + v45, v140, 1, v136);
                v42 = v143;
              }
              else
              {
                v42 = v143;
                if (v45 != v43)
                  swift_arrayInitWithTakeBackToFront(v47, v140, 1, v136);
              }
              sub_10005F3FC(v132, v140, type metadata accessor for HotZone);
              v21 = v141;
              v40 = v35;
            }
            ++v22;
            --v41;
            v43 -= v42;
            v44 -= v42;
            v45 += v42;
          }
          while (v22 < v40 + v41);
          v4 = v135;
          v2 = v130;
          v22 = v133;
          v20 = v137;
        }
      }
      else
      {
        v40 = v35;
      }
    }
    if (v40 < v20)
    {
      if (__OFSUB__(v40, v22))
        goto LABEL_140;
      if (v40 - v22 < v127)
      {
        if (__OFADD__(v22, v127))
          goto LABEL_143;
        if (v22 + v127 >= v20)
          v49 = v20;
        else
          v49 = v22 + v127;
        if (v49 < v22)
          goto LABEL_144;
        if (v40 != v49)
        {
          v126 = v19;
          v130 = v2;
          v50 = *(_QWORD *)(v4 + 72);
          v143 = v50 * (v40 - 1);
          v137 = v50;
          v51 = v40 * v50;
          v131 = v49;
          do
          {
            v52 = 0;
            v140 = v40;
            while (1)
            {
              v53 = *v21;
              v54 = v51;
              v55 = v51 + v52;
              v56 = v21;
              v57 = v138;
              sub_10005F428(v55 + *v21, v138, type metadata accessor for HotZone);
              v58 = v139;
              sub_10005F428(v143 + v52 + v53, v139, type metadata accessor for HotZone);
              LOBYTE(v53) = static UniversalControlLink.< infix(_:_:)(v57, v58);
              sub_1000255F0(v58, type metadata accessor for HotZone);
              sub_1000255F0(v57, type metadata accessor for HotZone);
              if ((v53 & 1) == 0)
                break;
              v59 = *v56;
              if (!*v56)
                goto LABEL_146;
              v51 = v54;
              v60 = v59 + v54 + v52;
              v61 = v59 + v143 + v52;
              sub_10005F3FC(v60, v142, type metadata accessor for HotZone);
              swift_arrayInitWithTakeFrontToBack(v60, v61, 1, v136);
              sub_10005F3FC(v142, v61, type metadata accessor for HotZone);
              v52 -= v137;
              ++v22;
              v62 = v140;
              v21 = v141;
              if (v140 == v22)
                goto LABEL_47;
            }
            v62 = v140;
            v21 = v56;
            v51 = v54;
LABEL_47:
            v40 = v62 + 1;
            v143 += v137;
            v51 += v137;
            v22 = v133;
          }
          while (v40 != v131);
          v40 = v131;
          v2 = v130;
          v19 = v126;
        }
      }
    }
    if (v40 < v22)
      goto LABEL_139;
    v63 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v140 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10006C984();
      v19 = v116;
    }
    v65 = v19[2];
    v66 = v65 + 1;
    if (v65 >= v19[3] >> 1)
    {
      sub_10006C984();
      v19 = v117;
    }
    v21 = v63;
    v67 = v2;
    v19[2] = v66;
    v68 = v19 + 4;
    v69 = &v19[2 * v65 + 4];
    v70 = v140;
    *v69 = v133;
    v69[1] = v70;
    if (v65)
      break;
    v66 = 1;
LABEL_97:
    v20 = v21[1];
    v18 = v140;
    v2 = v67;
    v4 = v135;
    if (v140 >= v20)
      goto LABEL_106;
  }
  while (1)
  {
    v71 = v66 - 1;
    if (v66 >= 4)
    {
      v76 = &v68[2 * v66];
      v77 = *(v76 - 8);
      v78 = *(v76 - 7);
      v82 = __OFSUB__(v78, v77);
      v79 = v78 - v77;
      if (v82)
        goto LABEL_124;
      v81 = *(v76 - 6);
      v80 = *(v76 - 5);
      v82 = __OFSUB__(v80, v81);
      v74 = v80 - v81;
      v75 = v82;
      if (v82)
        goto LABEL_125;
      v83 = v66 - 2;
      v84 = &v68[2 * v66 - 4];
      v86 = *v84;
      v85 = v84[1];
      v82 = __OFSUB__(v85, v86);
      v87 = v85 - v86;
      if (v82)
        goto LABEL_126;
      v82 = __OFADD__(v74, v87);
      v88 = v74 + v87;
      if (v82)
        goto LABEL_128;
      if (v88 >= v79)
      {
        v106 = &v68[2 * v71];
        v108 = *v106;
        v107 = v106[1];
        v82 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v82)
          goto LABEL_134;
        v99 = v74 < v109;
        goto LABEL_86;
      }
    }
    else
    {
      if (v66 != 3)
      {
        v100 = v19[4];
        v101 = v19[5];
        v82 = __OFSUB__(v101, v100);
        v93 = v101 - v100;
        v94 = v82;
        goto LABEL_80;
      }
      v73 = v19[4];
      v72 = v19[5];
      v82 = __OFSUB__(v72, v73);
      v74 = v72 - v73;
      v75 = v82;
    }
    if ((v75 & 1) != 0)
      goto LABEL_127;
    v83 = v66 - 2;
    v89 = &v68[2 * v66 - 4];
    v91 = *v89;
    v90 = v89[1];
    v92 = __OFSUB__(v90, v91);
    v93 = v90 - v91;
    v94 = v92;
    if (v92)
      goto LABEL_129;
    v95 = &v68[2 * v71];
    v97 = *v95;
    v96 = v95[1];
    v82 = __OFSUB__(v96, v97);
    v98 = v96 - v97;
    if (v82)
      goto LABEL_131;
    if (__OFADD__(v93, v98))
      goto LABEL_133;
    if (v93 + v98 >= v74)
    {
      v99 = v74 < v98;
LABEL_86:
      if (v99)
        v71 = v83;
      goto LABEL_88;
    }
LABEL_80:
    if ((v94 & 1) != 0)
      goto LABEL_130;
    v102 = &v68[2 * v71];
    v104 = *v102;
    v103 = v102[1];
    v82 = __OFSUB__(v103, v104);
    v105 = v103 - v104;
    if (v82)
      goto LABEL_132;
    if (v105 < v93)
      goto LABEL_97;
LABEL_88:
    v110 = v71 - 1;
    if (v71 - 1 >= v66)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!*v21)
      goto LABEL_147;
    v111 = v19;
    v112 = &v68[2 * v110];
    v12 = *v112;
    v113 = &v68[2 * v71];
    v114 = v113[1];
    sub_10005960C(*v21 + *(_QWORD *)(v135 + 72) * *v112, *v21 + *(_QWORD *)(v135 + 72) * *v113, *v21 + *(_QWORD *)(v135 + 72) * v114, v134);
    if (v67)
      break;
    if (v114 < v12)
      goto LABEL_121;
    if (v71 > v111[2])
      goto LABEL_122;
    *v112 = v12;
    v68[2 * v110 + 1] = v114;
    v115 = v111[2];
    if (v71 >= v115)
      goto LABEL_123;
    v19 = v111;
    v66 = v115 - 1;
    memmove(&v68[2 * v71], v113 + 2, 16 * (v115 - 1 - v71));
    v111[2] = v115 - 1;
    v21 = v141;
    if (v115 <= 2)
      goto LABEL_97;
  }
  v2 = v67;
LABEL_103:
  swift_bridgeObjectRelease();
  if (v129 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  *(_QWORD *)(v128 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_1000593E8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v26 = type metadata accessor for HotZone(0);
  v7 = __chkstk_darwin(v26);
  v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v23 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  v29 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v29 - 1);
    v28 = v14;
    v31 = v14 * v29;
    while (2)
    {
      v15 = 0;
      v16 = v25;
      do
      {
        v17 = *a4;
        sub_10005F428(v31 + v15 + *a4, (uint64_t)v13, type metadata accessor for HotZone);
        v18 = v27;
        sub_10005F428(v32 + v15 + v17, v27, type metadata accessor for HotZone);
        LOBYTE(v17) = static UniversalControlLink.< infix(_:_:)(v13, v18);
        sub_1000255F0(v18, type metadata accessor for HotZone);
        sub_1000255F0((uint64_t)v13, type metadata accessor for HotZone);
        if ((v17 & 1) == 0)
          break;
        v19 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        v20 = a4;
        v21 = v19 + v31 + v15;
        v22 = v19 + v32 + v15;
        sub_10005F3FC(v21, v30, type metadata accessor for HotZone);
        swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v26);
        sub_10005F3FC(v30, v22, type metadata accessor for HotZone);
        v15 -= v28;
        ++v16;
        a4 = v20;
      }
      while (v29 != v16);
      v32 += v28;
      v31 += v28;
      if (++v29 != v24)
        continue;
      break;
    }
  }
}

void sub_10005960C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v26;
  BOOL v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v41;
  int64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = type metadata accessor for HotZone(0);
  v8 = __chkstk_darwin(v51);
  v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v13 = *(_QWORD *)(v10 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_75;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_76;
  v18 = v14 / v13;
  v19 = v16 / v13;
  v46 = *(_QWORD *)(v10 + 72);
  if (v14 / v13 >= v16 / v13)
  {
    sub_100078F98(a2, v16 / v13);
    v20 = a4 + v19 * v13;
    if (v19 * v13 < 1 || a1 >= a2)
      goto LABEL_69;
    v48 = a1;
    v49 = -v13;
    v47 = a4;
    while (1)
    {
      v30 = a3;
      v31 = v49;
      a3 += v49;
      v50 = v20 + v49;
      v32 = v20;
      sub_10005F428(v20 + v49, (uint64_t)v12, type metadata accessor for HotZone);
      v33 = a2 + v31;
      v34 = a2 + v31;
      v35 = (uint64_t)v12;
      v36 = v52;
      sub_10005F428(v34, v52, type metadata accessor for HotZone);
      v37 = static UniversalControlLink.< infix(_:_:)(v35, v36);
      v38 = v36;
      v12 = (char *)v35;
      sub_1000255F0(v38, type metadata accessor for HotZone);
      sub_1000255F0(v35, type metadata accessor for HotZone);
      if ((v37 & 1) != 0)
      {
        v20 = v32;
        if (v30 >= a2 && a3 < a2)
        {
          v41 = v48;
          if (v30 != a2)
            swift_arrayInitWithTakeBackToFront(a3, v33, 1, v51);
          a2 = v33;
          a4 = v47;
          goto LABEL_64;
        }
        swift_arrayInitWithTakeFrontToBack(a3, v33, 1, v51);
        a2 = v33;
      }
      else if (v30 < v32 || a3 >= v32)
      {
        v20 = v50;
        swift_arrayInitWithTakeFrontToBack(a3, v50, 1, v51);
      }
      else
      {
        v20 = v50;
        if (v30 != v32)
          swift_arrayInitWithTakeBackToFront(a3, v50, 1, v51);
      }
      a4 = v47;
      v41 = v48;
LABEL_64:
      if (v20 <= a4 || a2 <= v41)
      {
        v13 = v46;
        goto LABEL_69;
      }
    }
  }
  sub_100078F98(a1, v14 / v13);
  v20 = a4 + v18 * v13;
  v50 = a3;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    v22 = v52;
    do
    {
      sub_10005F428(a2, (uint64_t)v12, type metadata accessor for HotZone);
      sub_10005F428(a4, v22, type metadata accessor for HotZone);
      v23 = static UniversalControlLink.< infix(_:_:)(v12, v22);
      sub_1000255F0(v22, type metadata accessor for HotZone);
      sub_1000255F0((uint64_t)v12, type metadata accessor for HotZone);
      if ((v23 & 1) != 0)
      {
        v24 = a2 + v13;
        if (a1 < a2 || a1 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1, v51);
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1, v51);
        }
      }
      else
      {
        v26 = a4 + v13;
        if (a1 < a4 || a1 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1, v51);
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1, v51);
        }
        v24 = a2;
        a4 = v26;
        v13 = v46;
      }
      a1 += v13;
      v28 = a4 >= v20 || v24 >= v50;
      a2 = v24;
    }
    while (!v28);
  }
LABEL_69:
  v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_100078F98(a4, v43 / v13);
    return;
  }
LABEL_77:
  __break(1u);
}

uint64_t sub_1000599D0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v3 = a2;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    v6 = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v7 & 1) != 0)
      v8 = v5;
    else
      v8 = v6;
    v9 = String.subscript.getter(15, v8);
    sub_10000E410();
    return v9;
  }
  return result;
}

uint64_t sub_100059A88(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE v76[24];
  uint64_t v77;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v46 = v4;
  if (!v4)
    return swift_bridgeObjectRelease_n(v3, 2);
  v5 = 0;
  v6 = 0;
  v45 = v3;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
      __break(1u);
      goto LABEL_24;
    }
    v7 = *(unsigned __int8 *)(v3 + v5 + 32);
    v8 = *(unsigned __int8 *)(v3 + v5 + 33);
    v9 = *(unsigned __int8 *)(v3 + v5 + 34);
    v10 = *(unsigned __int8 *)(v3 + v5 + 35);
    v73 = *(unsigned __int8 *)(v3 + v5 + 36);
    v72 = *(unsigned __int8 *)(v3 + v5 + 37);
    v62 = *(unsigned __int8 *)(v3 + v5 + 38);
    v71 = *(unsigned __int8 *)(v3 + v5 + 40);
    v67 = *(unsigned __int8 *)(v3 + v5 + 41);
    v66 = *(unsigned __int8 *)(v3 + v5 + 42);
    v65 = *(unsigned __int8 *)(v3 + v5 + 43);
    v70 = *(unsigned __int8 *)(v3 + v5 + 44);
    v64 = *(unsigned __int8 *)(v3 + v5 + 45);
    v60 = *(unsigned __int8 *)(v3 + v5 + 46);
    v55 = *(_OWORD *)(v3 + v5 + 48);
    v11 = *(_QWORD *)(v3 + v5 + 64);
    v12 = *(_QWORD *)(v3 + v5 + 72);
    v54 = *(_QWORD *)(v3 + v5 + 80);
    v53 = *(_BYTE *)(v3 + v5 + 88);
    v13 = *(_QWORD *)(v3 + v5 + 96);
    v56 = *(unsigned __int8 *)(v3 + v5 + 39);
    v58 = *(unsigned __int8 *)(v3 + v5 + 47);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    if (!v11)
      return swift_bridgeObjectRelease_n(v3, 2);
    v49 = v12;
    v47 = v6;
    v48 = v5;
    v51 = v8;
    v52 = v7;
    v76[0] = v7;
    v76[1] = v8;
    v50 = v10;
    v76[2] = v9;
    v76[3] = v10;
    v76[4] = v73;
    v14 = (v56 << 56) | (v62 << 48) | v7 | (v8 << 8) | (v9 << 16) | (v10 << 24) | (v73 << 32) | (v72 << 40);
    v76[5] = v72;
    v57 = HIWORD(v14);
    v76[6] = BYTE6(v14);
    v15 = v58 << 56;
    v59 = HIBYTE(v14);
    v76[7] = HIBYTE(v14);
    v76[8] = v71;
    v16 = v15 | (v60 << 48) | v71 | (v67 << 8) | (v66 << 16) | (v65 << 24) | (v70 << 32) | (v64 << 40);
    v76[9] = v67;
    v76[10] = v66;
    v76[11] = v65;
    v76[12] = v70;
    v76[13] = v64;
    v63 = HIWORD(v16);
    v76[14] = BYTE6(v16);
    v61 = HIBYTE(v16);
    v76[15] = HIBYTE(v16);
    v17 = (_QWORD *)*a3;
    v19 = sub_1001A8C70(v14, v16);
    v20 = v17[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_21;
    v23 = v18;
    if (v17[3] < v22)
      break;
    v27 = v70;
    v26 = v71;
    v29 = v51;
    v28 = v52;
    v31 = v50;
    v30 = v9;
    v33 = v72;
    v32 = v73;
    if ((a2 & 1) != 0)
    {
      if ((v18 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0(&qword_1002AC128);
      _NativeDictionary.copy()();
      v33 = v72;
      v32 = v73;
      v31 = v50;
      v30 = v9;
      v29 = v51;
      v28 = v52;
      if ((v23 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v34 = (_QWORD *)*a3;
    v34[(v19 >> 6) + 8] |= 1 << v19;
    v35 = (_BYTE *)(v34[6] + 16 * v19);
    *v35 = v28;
    v35[1] = v29;
    v35[2] = v30;
    v35[3] = v31;
    v35[4] = v32;
    v35[5] = v33;
    v35[6] = v57;
    v35[7] = v59;
    v35[8] = v26;
    v35[9] = v67;
    v35[10] = v66;
    v35[11] = v65;
    v35[12] = v27;
    v35[13] = v64;
    v35[14] = v63;
    v35[15] = v61;
    v36 = v34[7] + 56 * v19;
    *(_OWORD *)v36 = v55;
    *(_QWORD *)(v36 + 16) = v11;
    *(_QWORD *)(v36 + 24) = v49;
    *(_QWORD *)(v36 + 32) = v54;
    *(_BYTE *)(v36 + 40) = v53;
    *(_QWORD *)(v36 + 48) = v13;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_22;
    ++v6;
    v34[2] = v39;
    v5 = v48 + 72;
    a2 = 1;
    v3 = v45;
    if (v46 == v47 + 1)
      return swift_bridgeObjectRelease_n(v3, 2);
  }
  sub_1000548F0(v22, a2 & 1);
  v24 = sub_1001A8C70(v14, v16);
  if ((v23 & 1) != (v25 & 1))
    goto LABEL_23;
  v19 = v24;
  v27 = v70;
  v26 = v71;
  v29 = v51;
  v28 = v52;
  v31 = v50;
  v30 = v9;
  v33 = v72;
  v32 = v73;
  if ((v23 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v40 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v40);
  v77 = v40;
  swift_errorRetain(v40);
  v41 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v41, &v77, v41, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v45, 2);
    return swift_errorRelease(v77);
  }
LABEL_24:
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000100254120;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(v76, &v74, &type metadata for UniversalControlDeviceID, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v74, v75, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_100059F8C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;

  v47 = a3;
  v5 = type metadata accessor for HotZone(0);
  v43 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v39 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for UniversalControlLink(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v46 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000055B0(&qword_1002AC950);
  v13 = __chkstk_darwin(v12);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v38 = a1;
    v42 = &v16[*(int *)(v13 + 48)];
    v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v41 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    v19 = type metadata accessor for HotZone;
    v40 = v16;
    while (1)
    {
      sub_10005FAFC(v18, (uint64_t)v16, &qword_1002AC950);
      v20 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      v20(v46, v16, v45);
      v21 = (uint64_t)v9;
      v22 = v19;
      sub_10005F3FC((uint64_t)v42, (uint64_t)v9, v19);
      v23 = *v47;
      sub_1001A8D7C();
      v26 = v25;
      v27 = *(_QWORD *)(v23 + 16);
      v28 = (v24 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        break;
      v30 = v24;
      if (*(_QWORD *)(v23 + 24) >= v29)
      {
        if ((a2 & 1) == 0)
        {
          sub_1000055B0((uint64_t *)&unk_1002AC180);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_100055304(v29, a2 & 1);
        sub_1001A8D7C();
        if ((v30 & 1) != (v32 & 1))
          goto LABEL_18;
        v26 = v31;
      }
      v19 = v22;
      if ((v30 & 1) != 0)
      {
        v9 = (char *)v21;
        v33 = v39;
        sub_10005F428(v21, v39, v22);
        sub_1000255F0(v21, v22);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v45);
        sub_10005E238(v33, *(_QWORD *)(*v47 + 56) + *(_QWORD *)(v43 + 72) * v26, v22);
      }
      else
      {
        v34 = (_QWORD *)*v47;
        *(_QWORD *)(*v47 + 8 * (v26 >> 6) + 64) |= 1 << v26;
        v20((char *)(v34[6] + *(_QWORD *)(v44 + 72) * v26), v46, v45);
        v9 = (char *)v21;
        sub_10005F3FC(v21, v34[7] + *(_QWORD *)(v43 + 72) * v26, v22);
        v35 = v34[2];
        v36 = __OFADD__(v35, 1);
        v37 = v35 + 1;
        if (v36)
          goto LABEL_17;
        v34[2] = v37;
      }
      v16 = v40;
      v18 += v41;
      a2 = 1;
      if (!--v17)
      {
        swift_bridgeObjectRelease_n(v38, 2);
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10005A2D0(uint64_t a1, void (*a2)(__int128 *__return_ptr, __int128 *), uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v38 = v8;
  if (!v8)
  {
LABEL_18:
    swift_release_n(a3, 2);
    return swift_bridgeObjectRelease_n(v7, 2);
  }
  v9 = 0;
  v37 = v7;
  while (1)
  {
    if (v9 >= *(_QWORD *)(v7 + 16))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
      __break(1u);
      goto LABEL_23;
    }
    v59 = *(_OWORD *)(v7 + 16 * v9 + 32);
    v10 = v59;
    swift_unknownObjectRetain(v59);
    a2(&v60, &v59);
    swift_unknownObjectRelease(v10);
    if (!v61)
      goto LABEL_18;
    v55 = a4;
    v54 = v61;
    v40 = v9;
    v11 = BYTE7(v60);
    v12 = BYTE13(v60);
    v13 = BYTE14(v60);
    v14 = HIBYTE(v60);
    v59 = v60;
    v52 = BYTE1(v60);
    v53 = v60;
    v51 = BYTE2(v60);
    v41 = v62;
    v15 = (_QWORD *)*a5;
    v49 = BYTE4(v60);
    v50 = BYTE3(v60);
    v47 = BYTE6(v60);
    v48 = BYTE5(v60);
    v16 = v60 | ((unint64_t)BYTE1(v60) << 8) | ((unint64_t)BYTE2(v60) << 16) | ((unint64_t)BYTE3(v60) << 24) | ((unint64_t)BYTE4(v60) << 32) | ((unint64_t)BYTE5(v60) << 40) | ((unint64_t)BYTE6(v60) << 48) | ((unint64_t)BYTE7(v60) << 56);
    v45 = BYTE9(v60);
    v46 = BYTE8(v60);
    v43 = BYTE11(v60);
    v44 = BYTE10(v60);
    v42 = BYTE12(v60);
    v17 = BYTE8(v60) | ((unint64_t)BYTE9(v60) << 8) | ((unint64_t)BYTE10(v60) << 16) | ((unint64_t)BYTE11(v60) << 24) | ((unint64_t)BYTE12(v60) << 32) | ((unint64_t)BYTE13(v60) << 40) | ((unint64_t)BYTE14(v60) << 48) | ((unint64_t)HIBYTE(v60) << 56);
    v19 = sub_1001A8C70(v16, v17);
    v20 = v15[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_20;
    v23 = v18;
    if (v15[3] < v22)
      break;
    if ((v55 & 1) != 0)
    {
      if ((v18 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0((uint64_t *)&unk_1002AC0C0);
      _NativeDictionary.copy()();
      if ((v23 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v26 = (_QWORD *)*a5;
    v26[(v19 >> 6) + 8] |= 1 << v19;
    v27 = (_BYTE *)(v26[6] + 16 * v19);
    *v27 = v53;
    v27[1] = v52;
    v27[2] = v51;
    v27[3] = v50;
    v27[4] = v49;
    v27[5] = v48;
    v27[6] = v47;
    v27[7] = v11;
    v27[8] = v46;
    v27[9] = v45;
    v27[10] = v44;
    v27[11] = v43;
    v27[12] = v42;
    v27[13] = v12;
    v27[14] = v13;
    v27[15] = v14;
    v28 = (_QWORD *)(v26[7] + 16 * v19);
    *v28 = v54;
    v28[1] = v41;
    v29 = v26[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_21;
    v9 = v40 + 1;
    v26[2] = v31;
    a4 = 1;
    v7 = v37;
    if (v38 == v40 + 1)
      goto LABEL_18;
  }
  sub_10005571C(v22, v55 & 1);
  v24 = sub_1001A8C70(v16, v17);
  if ((v23 & 1) != (v25 & 1))
    goto LABEL_22;
  v19 = v24;
  if ((v23 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v32);
  v63 = v32;
  swift_errorRetain(v32);
  v33 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v33, &v63, v33, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_unknownObjectRelease(v54);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease_n(v37, 2);
    return swift_errorRelease(v63);
  }
LABEL_23:
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v35._object = (void *)0x8000000100254120;
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)(&v59, &v57, &type metadata for UniversalControlDeviceID, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v36._countAndFlagsBits = 39;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v57, v58, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_10005A75C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  _QWORD *v36;
  _BYTE *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[24];
  uint64_t v70;

  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v45 = v3;
  if (!v3)
  {
LABEL_18:
    swift_bridgeObjectRelease_n(a1, 2);
    return;
  }
  v4 = 0;
  v5 = (_QWORD *)(a1 + 48);
  while (1)
  {
    if (v4 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
      __break(1u);
      goto LABEL_24;
    }
    v6 = *((unsigned __int8 *)v5 - 7);
    v7 = *((unsigned __int8 *)v5 - 8);
    v8 = *((unsigned __int8 *)v5 - 6);
    v9 = *((unsigned __int8 *)v5 - 5);
    v10 = *((unsigned __int8 *)v5 - 4);
    v11 = *((unsigned __int8 *)v5 - 3);
    v59 = *((unsigned __int8 *)v5 - 2);
    v57 = *((unsigned __int8 *)v5 - 1);
    v64 = *((unsigned __int8 *)v5 - 15);
    v12 = *((unsigned __int8 *)v5 - 16);
    v63 = *((unsigned __int8 *)v5 - 14);
    v13 = *((unsigned __int8 *)v5 - 13);
    v66 = *((unsigned __int8 *)v5 - 12);
    v65 = *((unsigned __int8 *)v5 - 11);
    v55 = *((unsigned __int8 *)v5 - 10);
    v53 = *((unsigned __int8 *)v5 - 9);
    v14 = swift_unknownObjectRetain(*v5);
    if (!v14)
      goto LABEL_18;
    v47 = v4;
    v51 = v14;
    v15 = v8;
    v52 = v13;
    v69[0] = v12;
    v69[1] = v64;
    v69[2] = v63;
    v69[3] = v13;
    v69[4] = v66;
    v16 = (v53 << 56) | (v55 << 48) | v12 | (v64 << 8) | (v63 << 16) | (v13 << 24) | (v66 << 32) | (v65 << 40);
    v69[5] = v65;
    v49 = HIWORD(v16);
    v69[6] = BYTE6(v16);
    v48 = HIBYTE(v16);
    v69[7] = HIBYTE(v16);
    v17 = v7;
    v69[8] = v7;
    v18 = (v57 << 56) | (v59 << 48) | v7 | (v6 << 8) | (v8 << 16) | (v9 << 24) | (v10 << 32) | (v11 << 40);
    v58 = v15;
    v60 = v6;
    v69[9] = v6;
    v69[10] = v15;
    v69[11] = v9;
    v19 = v10;
    v69[12] = v10;
    v20 = v11;
    v69[13] = v11;
    v54 = HIWORD(v18);
    v56 = v9;
    v69[14] = BYTE6(v18);
    v50 = HIBYTE(v18);
    v69[15] = HIBYTE(v18);
    v21 = (_QWORD *)*a3;
    v23 = sub_1001A8C70(v16, v18);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_21;
    v27 = v22;
    if (v21[3] < v26)
      break;
    v31 = v64;
    v30 = v65;
    v32 = v63;
    v34 = v12;
    v33 = v52;
    v35 = v66;
    if ((a2 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0(&qword_1002AC260);
      _NativeDictionary.copy()();
      v34 = v12;
      v33 = v52;
      v30 = v65;
      v35 = v66;
      if ((v27 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v36 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v37 = (_BYTE *)(v36[6] + 16 * v23);
    *v37 = v34;
    v37[1] = v31;
    v37[2] = v32;
    v37[3] = v33;
    v37[4] = v35;
    v37[5] = v30;
    v37[6] = v49;
    v37[7] = v48;
    v37[8] = v17;
    v37[9] = v60;
    v37[10] = v58;
    v37[11] = v56;
    v37[12] = v19;
    v37[13] = v20;
    v37[14] = v54;
    v37[15] = v50;
    *(_QWORD *)(v36[7] + 8 * v23) = v51;
    v38 = v36[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_22;
    v4 = v47 + 1;
    v36[2] = v40;
    v5 += 3;
    a2 = 1;
    if (v45 == v47 + 1)
      goto LABEL_18;
  }
  sub_100055BA4(v26, a2 & 1);
  v28 = sub_1001A8C70(v16, v18);
  if ((v27 & 1) != (v29 & 1))
    goto LABEL_23;
  v23 = v28;
  v31 = v64;
  v30 = v65;
  v32 = v63;
  v34 = v12;
  v33 = v52;
  v35 = v66;
  if ((v27 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v41 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v41);
  v70 = v41;
  swift_errorRetain(v41);
  v42 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v42, &v70, v42, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_unknownObjectRelease(v51);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(v70);
    return;
  }
LABEL_24:
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000100254120;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(v69, &v67, &type metadata for UniversalControlDeviceID, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, v68, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10005ABF4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[2];
  uint64_t v50;

  v46 = a3;
  v6 = type metadata accessor for ConnectionCoordinator.DiagnosticState(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000055B0(&qword_1002AC200);
  v10 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v39 = v3;
  v40 = a1;
  v44 = (uint64_t)v13 + *(int *)(v10 + 48);
  v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v42 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain();
  v16 = type metadata accessor for ConnectionCoordinator.DiagnosticState;
  v43 = v8;
  v41 = v13;
  while (1)
  {
    sub_10005FAFC(v15, (uint64_t)v13, &qword_1002AC200);
    v17 = v13[1];
    v49[0] = *v13;
    v18 = v49[0];
    v49[1] = v17;
    v19 = v16;
    sub_10005F3FC(v44, (uint64_t)v8, v16);
    v20 = (_QWORD *)*v46;
    v22 = sub_1000055F0(v18, v17);
    v23 = v20[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v26 = v21;
    if (v20[3] < v25)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v21 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000055B0(&qword_1002AC208);
      _NativeDictionary.copy()();
      if ((v26 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v29 = (_QWORD *)*v46;
    *(_QWORD *)(*v46 + 8 * (v22 >> 6) + 64) |= 1 << v22;
    v30 = (uint64_t *)(v29[6] + 16 * v22);
    *v30 = v18;
    v30[1] = v17;
    v31 = v29[7] + *(_QWORD *)(v45 + 72) * v22;
    v8 = v43;
    v16 = v19;
    sub_10005F3FC((uint64_t)v43, v31, v19);
    v32 = v29[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_18;
    v29[2] = v34;
    v13 = v41;
    v15 += v42;
    a2 = 1;
    if (!--v14)
    {
      swift_bridgeObjectRelease_n(v40, 2);
      return;
    }
  }
  sub_100056028(v25, a2 & 1);
  v27 = sub_1000055F0(v18, v17);
  if ((v26 & 1) != (v28 & 1))
    goto LABEL_19;
  v22 = v27;
  if ((v26 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v35 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v35);
  v50 = v35;
  swift_errorRetain(v35);
  v36 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v36, &v50, v36, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1000255F0((uint64_t)v43, type metadata accessor for ConnectionCoordinator.DiagnosticState);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease(v50);
    return;
  }
LABEL_20:
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v37._object = (void *)0x8000000100254120;
  v37._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)(v49, &v47, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v38._countAndFlagsBits = 39;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v47, v48, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10005AFB4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[3];
  uint64_t v47;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v33 = v4;
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n(a1, 2);
    return;
  }
  v5 = 0;
  v6 = (uint64_t *)(a1 + 64);
  while (1)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v7 = v6[7];
    v8 = v6[5];
    v41 = v6[4];
    v42 = v6[6];
    v9 = v6[3];
    v10 = v6[1];
    v39 = *v6;
    v40 = v6[2];
    v11 = *(v6 - 1);
    v38 = *(v6 - 2);
    v13 = *(v6 - 4);
    v12 = *(v6 - 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v12)
      goto LABEL_18;
    v35 = v10;
    v36 = v9;
    v37 = v8;
    v46[0] = v13;
    v46[1] = v12;
    v14 = (_QWORD *)*a3;
    v16 = sub_1000055F0(v13, v12);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0(&qword_1002AC1E0);
      _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v13;
    v24[1] = v12;
    v25 = (_QWORD *)(v23[7] + 80 * v16);
    *v25 = v38;
    v25[1] = v11;
    v25[2] = v39;
    v25[3] = v35;
    v25[4] = v40;
    v25[5] = v36;
    v25[6] = v41;
    v25[7] = v37;
    v25[8] = v42;
    v25[9] = v7;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_22;
    ++v5;
    v23[2] = v28;
    v6 += 12;
    a2 = 1;
    if (v33 == v5)
      goto LABEL_18;
  }
  sub_10005639C(v19, a2 & 1);
  v21 = sub_1000055F0(v13, v12);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v29);
  v47 = v29;
  swift_errorRetain(v29);
  v30 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v30, &v47, v30, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(v47);
    return;
  }
LABEL_24:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v31._object = (void *)0x8000000100254120;
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v31);
  _print_unlocked<A, B>(_:_:)(v46, &v44, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10005B344(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_18:
    swift_bridgeObjectRelease_n(a1, 2);
    return;
  }
  v6 = 0;
  v7 = (_OWORD *)(a1 + 48);
  while (1)
  {
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v29 = *v7;
    v9 = *((_QWORD *)v7 - 2);
    v8 = *((_QWORD *)v7 - 1);
    swift_bridgeObjectRetain();
    if (!v8)
      goto LABEL_18;
    v32[0] = v9;
    v32[1] = v8;
    v10 = (_QWORD *)*a3;
    v12 = sub_1000055F0(v9, v8);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      goto LABEL_21;
    v16 = v11;
    if (v10[3] < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0(&qword_1002AC1F0);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v9;
    v20[1] = v8;
    *(_OWORD *)(v19[7] + 16 * v12) = v29;
    v21 = v19[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_22;
    ++v6;
    v19[2] = v23;
    v7 += 2;
    a2 = 1;
    if (v5 == v6)
      goto LABEL_18;
  }
  sub_100056748(v15, a2 & 1);
  v17 = sub_1000055F0(v9, v8);
  if ((v16 & 1) != (v18 & 1))
    goto LABEL_23;
  v12 = v17;
  if ((v16 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v24 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v24);
  v33 = v24;
  swift_errorRetain(v24);
  v25 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v25, &v33, v25, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(v33);
    return;
  }
LABEL_24:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x8000000100254120;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10005B624(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v28 = v5;
  for (i = (uint64_t *)(v5 + 48); ; i += 3)
  {
    v7 = *(i - 1);
    v9 = *i;
    v32[0] = *(i - 2);
    v8 = v32[0];
    v32[1] = v7;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_1000055F0(v32[0], v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v16 = v11;
    if (v10[3] < v15)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000055B0(&qword_1002AC218);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v20 = (uint64_t *)(v19[6] + 16 * v12);
    *v20 = v8;
    v20[1] = v7;
    *(_QWORD *)(v19[7] + 8 * v12) = v9;
    v21 = v19[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_18;
    v19[2] = v23;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n(v28, 2);
      return;
    }
  }
  sub_100056A3C(v15, a2 & 1);
  v17 = sub_1000055F0(v32[0], v7);
  if ((v16 & 1) != (v18 & 1))
    goto LABEL_19;
  v12 = v17;
  if ((v16 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v24 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v24);
  v33 = v24;
  swift_errorRetain(v24);
  v25 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v25, &v33, v25, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v28, 2);
    swift_errorRelease(v33);
    return;
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v26._object = (void *)0x8000000100254120;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v32, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v27._countAndFlagsBits = 39;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_10005B8F8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v34 = v4;
  if (!v4)
    return swift_bridgeObjectRelease_n(a1, 2);
  v5 = 0;
  for (i = (uint64_t *)(a1 + 56); ; i += 10)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v7 = i[5];
    v8 = i[6];
    v9 = i[3];
    v10 = i[1];
    v40 = i[2];
    v41 = i[4];
    v11 = *(i - 1);
    v39 = *i;
    v13 = *(i - 3);
    v12 = *(i - 2);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (!v12)
      return swift_bridgeObjectRelease_n(a1, 2);
    v36 = v7;
    v37 = v11;
    v38 = v10;
    v45[0] = v13;
    v45[1] = v12;
    v14 = (_QWORD *)*a3;
    v16 = sub_1000055F0(v13, v12);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1000055B0(&qword_1002AC370);
      _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v13;
    v24[1] = v12;
    v25 = (_QWORD *)(v23[7] + (v16 << 6));
    *v25 = v37;
    v25[1] = v39;
    v25[2] = v38;
    v25[3] = v40;
    v25[4] = v9;
    v25[5] = v41;
    v25[6] = v36;
    v25[7] = v8;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_22;
    ++v5;
    v23[2] = v28;
    a2 = 1;
    if (v34 == v5)
      return swift_bridgeObjectRelease_n(a1, 2);
  }
  sub_100056D40(v19, a2 & 1);
  v21 = sub_1000055F0(v13, v12);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v29);
  v46 = v29;
  swift_errorRetain(v29);
  v30 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v30, &v46, v30, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease_n(a1, 2);
    return swift_errorRelease(v46);
  }
LABEL_24:
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v32._object = (void *)0x8000000100254120;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)(v45, &v43, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v33._countAndFlagsBits = 39;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v43, v44, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_10005BC78(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32[44];
  _BYTE v33[368];
  _QWORD __dst[46];
  uint64_t v35[47];
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 16);
  v26 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (1)
  {
    if (v5 == v4)
    {
      sub_10005F648(__dst);
      sub_10005FA70((uint64_t)__dst, (uint64_t)v35, &qword_1002AC228);
      v5 = v4;
    }
    else
    {
      if (v5 >= *(_QWORD *)(a1 + 16))
        goto LABEL_23;
      memcpy(__dst, (const void *)(v26 + 368 * v5), sizeof(__dst));
      memcpy(v35, (const void *)(v26 + 368 * v5++), 0x170uLL);
      CGSize.init(_:)(v35);
      sub_10005F454(__dst);
    }
    sub_10005FA70((uint64_t)v35, (uint64_t)v33, &qword_1002AC228);
    sub_10005FA70((uint64_t)v33, (uint64_t)__dst, &qword_1002AC228);
    if (sub_10005F564((uint64_t)__dst) == 1)
    {
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v6 = v35[0];
    v7 = v35[1];
    v31[0] = v35[0];
    v31[1] = v35[1];
    memcpy(v32, &v35[2], sizeof(v32));
    v8 = (_QWORD *)*a3;
    v10 = sub_1000055F0(v35[0], v35[1]);
    v11 = v8[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_25;
    }
    v14 = v9;
    if (v8[3] < v13)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      sub_1000055B0(&qword_1002AC230);
      _NativeDictionary.copy()();
      if ((v14 & 1) != 0)
        goto LABEL_17;
    }
LABEL_14:
    v17 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v18 = (uint64_t *)(v17[6] + 16 * v10);
    *v18 = v6;
    v18[1] = v7;
    memcpy((void *)(v17[7] + 352 * v10), v32, 0x160uLL);
    v19 = v17[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_22;
    v17[2] = v21;
    a2 = 1;
  }
  sub_1000570D8(v13, a2 & 1);
  v15 = sub_1000055F0(v6, v7);
  if ((v14 & 1) != (v16 & 1))
    goto LABEL_24;
  v10 = v15;
  if ((v14 & 1) == 0)
    goto LABEL_14;
LABEL_17:
  v22 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v22);
  v36 = v22;
  swift_errorRetain(v22);
  v23 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v23, &v36, v23, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10005F57C(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease(v36);
    return;
  }
LABEL_25:
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x8000000100254120;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)(v31, &v29, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10005C008(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34[2];
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v30 = v5;
  v6 = (uint64_t *)(v5 + 56);
  while (1)
  {
    v7 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    v34[0] = *(v6 - 3);
    v8 = v34[0];
    v34[1] = v7;
    v11 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = sub_1000055F0(v34[0], v7);
    v14 = v11[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v17 = v12;
    if (v11[3] < v16)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000055B0((uint64_t *)&unk_1002AC240);
      _NativeDictionary.copy()();
      if ((v17 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v21 = (uint64_t *)(v20[6] + 16 * v13);
    *v21 = v8;
    v21[1] = v7;
    v22 = (_QWORD *)(v20[7] + 16 * v13);
    *v22 = v10;
    v22[1] = v9;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_18;
    v6 += 4;
    v20[2] = v25;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n(v30, 2);
      return;
    }
  }
  sub_1000577FC(v16, a2 & 1);
  v18 = sub_1000055F0(v34[0], v7);
  if ((v17 & 1) != (v19 & 1))
    goto LABEL_19;
  v13 = v18;
  if ((v17 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v26 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v26);
  v35 = v26;
  swift_errorRetain(v26);
  v27 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v27, &v35, v27, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v30, 2);
    swift_errorRelease(v35);
    return;
  }
LABEL_20:
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v28._object = (void *)0x8000000100254120;
  v28._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)(v34, &v32, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v29._countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v32, v33, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_10005C2E8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;
  uint64_t v30;
  unint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v6 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    sub_10005FAFC(v6, (uint64_t)&v35, &qword_1002AC358);
    v8 = v35;
    v7 = v36;
    v33 = v35;
    v34 = v36;
    sub_100005778(&v37, v32);
    v9 = (_QWORD *)*a3;
    v11 = sub_1000055F0(v8, v7);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }
    v15 = v10;
    if (v9[3] < v14)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_1000055B0(&qword_1002AC360);
      _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v18 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v19 = (uint64_t *)(v18[6] + 16 * v11);
    *v19 = v8;
    v19[1] = v7;
    sub_100005778(v32, (_OWORD *)(v18[7] + 32 * v11));
    v20 = v18[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    v18[2] = v22;
    v6 += 48;
    a2 = 1;
    if (!--v3)
      return swift_bridgeObjectRelease_n(a1, 2);
  }
  sub_100057B08(v14, a2 & 1);
  v16 = sub_1000055F0(v8, v7);
  if ((v15 & 1) != (v17 & 1))
    goto LABEL_19;
  v11 = v16;
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v23);
  v38 = v23;
  swift_errorRetain(v23);
  v24 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  if ((swift_dynamicCast(v24, &v38, v24, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    sub_10005FAC0(v32);
    v25 = v34;
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v25);
    return swift_errorRelease(v38);
  }
LABEL_20:
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x8000000100254120;
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)(&v33, &v30, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v28._countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_10005C5D8(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v4 = v3;
  CGRegionRef.makeIterator()();
  v9 = v8;

  if (!a2 || !a3)
  {
LABEL_8:
    *a1 = v9;
    sub_10002DA50();
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()(&v13);
    if ((v15 & 1) == 0)
    {
      v10 = 0;
      v11 = v13;
      v12 = v14;
      do
      {
        *a2 = v11;
        a2[1] = v12;
        if (a3 - 1 == v10)
          break;
        dispatch thunk of _AnyIteratorBoxBase.next()(&v13);
        v11 = v13;
        v12 = v14;
        a2 += 2;
        ++v10;
      }
      while ((v15 & 1) == 0);
    }
    goto LABEL_8;
  }
  __break(1u);
}

_QWORD *sub_10005C690(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    v17 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v12);
    *(_QWORD *)(a2 + 16) = v17;
    a2 += 24;
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

_QWORD *sub_10005C830(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v12);
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

_QWORD *sub_10005C9C4(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10005CB58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  char v34;
  _BYTE v35[24];
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  sub_1000601CC();
  v39 = v1;
  v40 = v4;
  v6 = v5;
  v7 = *v0;
  v8 = v0[1];
  v9 = v0[2];
  v10 = *((_BYTE *)v0 + 24);
  v11 = v0[5];
  v12 = *((_BYTE *)v0 + 48);
  v15 = v0[4];
  v14 = (__int128 *)(v0 + 4);
  v13 = v15;
  v32 = v10;
  LOBYTE(v16) = v10 & 1;
  if (!v2)
  {
LABEL_12:
    *(_QWORD *)v6 = v7;
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 16) = v9;
    *(_BYTE *)(v6 + 24) = v16;
    *(_QWORD *)(v6 + 32) = v13;
    *(_QWORD *)(v6 + 40) = v11;
    *(_BYTE *)(v6 + 48) = v12 & 1;
    *(_QWORD *)(v6 + 56) = v8;
    *(_QWORD *)(v6 + 64) = v9;
    *(_BYTE *)(v6 + 72) = v16;
    sub_10005E1FC(v8, v9, v16);
    return;
  }
  v17 = v3;
  v29 = v13;
  v30 = v11;
  v31 = v12;
  if (v3)
  {
    v18 = v2;
    v33 = *v14;
    v34 = *((_BYTE *)v14 + 16);
    sub_10005FA70((uint64_t)&v33, (uint64_t)v35, &qword_1002AC108);
    if ((v17 & 0x8000000000000000) == 0)
    {
      v26 = v17;
      v27 = v8;
      v28 = v9;
      sub_10005E1FC(v8, v9, v32 & 1);
      if ((v32 & 1) == 0)
      {
        v19 = 0;
        v9 = v8;
        v16 = v26 - 1;
        v8 = v28;
        do
        {
          sub_10005FA70((uint64_t)v35, (uint64_t)&v36, &qword_1002AC108);
          v12 = v38;
          if ((v38 & 1) != 0)
            break;
          if (v37 != (_DWORD)v8)
          {
            __break(1u);
            goto LABEL_18;
          }
          if (v9 == v36)
          {
            *(_QWORD *)v6 = v7;
            *(_QWORD *)(v6 + 8) = v27;
            *(_QWORD *)(v6 + 16) = v28;
            sub_1000600C8(v32 & 1, v26, v27, v28, v29, v30, v31);
            *(_QWORD *)(v6 + 56) = v9;
            *(_QWORD *)(v6 + 64) = v8;
            *(_BYTE *)(v6 + 72) = 0;
            return;
          }
          v20 = sub_10019D074(v9, v8, 0, v7);
          v22 = v21;
          v24 = v23;
          sub_100025618(v9, v8, 0);
          *(_QWORD *)v18 = v9;
          *(_QWORD *)(v18 + 8) = v8;
          *(_BYTE *)(v18 + 16) = 0;
          if (v16 == v19)
          {
            LOBYTE(v16) = v24 & 1;
            v8 = v27;
            v9 = v28;
            v25 = v32;
            goto LABEL_16;
          }
          v18 += 24;
          ++v19;
          v9 = v20;
          v8 = v22;
        }
        while ((v24 & 1) == 0);
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
  }
  else
  {
    v25 = v10;
    sub_10005E1FC(v8, v9, v10 & 1);
    v20 = v8;
    v22 = v9;
LABEL_16:
    *(_QWORD *)v6 = v7;
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 16) = v9;
    sub_1000600C8(v25 & 1, v26, v27, v28, v29, v30, v31);
    *(_QWORD *)(v6 + 56) = v20;
    *(_QWORD *)(v6 + 64) = v22;
    *(_BYTE *)(v6 + 72) = v16;
  }
}

_QWORD *sub_10005CD60(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v26 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 56) + 56 * v15;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 40);
    v22 = *(_QWORD *)(v19 + 48);
    v23 = *(_OWORD *)(v19 + 24);
    v24 = *(_OWORD *)v19;
    *(_OWORD *)v10 = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v15);
    *(_OWORD *)(v10 + 16) = v24;
    *(_QWORD *)(v10 + 32) = v20;
    *(_OWORD *)(v10 + 40) = v23;
    *(_BYTE *)(v10 + 56) = v21;
    *(_QWORD *)(v10 + 64) = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }
    v10 += 72;
    swift_bridgeObjectRetain(v20);
    result = (_QWORD *)swift_bridgeObjectRetain(v22);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v25;
      result = v26;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_10005CF98(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    v17 = (_OWORD *)(*(_QWORD *)(a4 + 48) + 32 * v12);
    v18 = (__int128 *)(*(_QWORD *)(a4 + 56) + 32 * v12);
    v19 = *v18;
    v20 = v18[1];
    v21 = v17[1];
    *a2 = *v17;
    a2[1] = v21;
    a2[2] = v19;
    a2[3] = v20;
    a2 += 4;
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10005D140(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v8 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (_OWORD *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v14 = *(_QWORD *)(a4 + 64);
  v37 = a4 + 64;
  v15 = -1 << *(_BYTE *)(a4 + 32);
  if (-v15 < 64)
    v16 = ~(-1 << -(char)v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  if (!a2)
  {
    v18 = 0;
LABEL_37:
    v32 = v37;
    *a1 = a4;
    a1[1] = v32;
    a1[2] = ~v15;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v34 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v18 = 0;
  v19 = 0;
  v36 = (unint64_t)(63 - v15) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v17)
    goto LABEL_9;
LABEL_8:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    v25 = *(_QWORD *)(a4 + 48);
    v26 = *(_QWORD *)(a4 + 56);
    v27 = type metadata accessor for UniversalControlDisplayLayout(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = v26 + *(_QWORD *)(v28 + 72) * v21;
    v30 = (char *)v11 + *(int *)(v40 + 48);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    v41 = *(_OWORD *)(v25 + 16 * v21);
    v31(v30, v29, v27);
    *v11 = v41;
    sub_10005FA70((uint64_t)v11, (uint64_t)v13, (uint64_t *)&unk_1002AC0F0);
    sub_10005FA70((uint64_t)v13, a2, (uint64_t *)&unk_1002AC0F0);
    if (v19 == v38)
      goto LABEL_36;
    a2 += *(_QWORD *)(v39 + 72);
    if (v17)
      goto LABEL_8;
LABEL_9:
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v36)
      goto LABEL_32;
    v23 = *(_QWORD *)(v37 + 8 * v22);
    if (!v23)
      break;
LABEL_18:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v18 = v22;
  }
  v18 += 2;
  if (v22 + 1 >= v36)
  {
    v17 = 0;
    v18 = v22;
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v37 + 8 * v18);
  if (v23)
    goto LABEL_14;
  v24 = v22 + 2;
  if (v22 + 2 >= v36)
    goto LABEL_32;
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v18 = v22 + 3;
  if (v22 + 3 >= v36)
  {
    v17 = 0;
    v18 = v22 + 2;
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v37 + 8 * v18);
  if (v23)
  {
LABEL_14:
    v22 = v18;
    goto LABEL_18;
  }
  v24 = v22 + 4;
  if (v22 + 4 >= v36)
  {
LABEL_32:
    v17 = 0;
LABEL_36:
    v15 = v34;
    a1 = v35;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
  {
LABEL_17:
    v22 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v22 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v22 >= v36)
    {
      v17 = 0;
      v18 = v33;
      goto LABEL_36;
    }
    v23 = *(_QWORD *)(v37 + 8 * v22);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

void sub_10005D434(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for HotZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v35 = a4;
  v17 = *(_QWORD *)(a4 + 64);
  v16 = a4 + 64;
  v15 = v17;
  v34 = v16;
  v18 = -1 << *(_BYTE *)(v16 - 32);
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v15;
  if (!a2)
  {
    v21 = 0;
LABEL_37:
    v29 = v34;
    *a1 = v35;
    a1[1] = v29;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return;
  }
  if (!a3)
  {
    v21 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v31 = -1 << *(_BYTE *)(v16 - 32);
  v32 = a1;
  v21 = 0;
  v22 = 0;
  v33 = (unint64_t)(63 - v18) >> 6;
  v30 = v33 - 1;
  if (!v20)
    goto LABEL_9;
LABEL_8:
  v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    v28 = *(_QWORD *)(v9 + 72);
    sub_10005F428(*(_QWORD *)(v35 + 56) + v28 * v24, (uint64_t)v12, type metadata accessor for HotZone);
    sub_10005F3FC((uint64_t)v12, (uint64_t)v14, type metadata accessor for HotZone);
    sub_10005F3FC((uint64_t)v14, a2, type metadata accessor for HotZone);
    if (v22 == a3)
      goto LABEL_36;
    a2 += v28;
    if (v20)
      goto LABEL_8;
LABEL_9:
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v33)
      goto LABEL_32;
    v26 = *(_QWORD *)(v34 + 8 * v25);
    if (!v26)
      break;
LABEL_18:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v21 = v25;
  }
  v21 += 2;
  if (v25 + 1 >= v33)
  {
    v20 = 0;
    v21 = v25;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
    goto LABEL_14;
  v27 = v25 + 2;
  if (v25 + 2 >= v33)
    goto LABEL_32;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v21 = v25 + 3;
  if (v25 + 3 >= v33)
  {
    v20 = 0;
    v21 = v25 + 2;
    goto LABEL_36;
  }
  v26 = *(_QWORD *)(v34 + 8 * v21);
  if (v26)
  {
LABEL_14:
    v25 = v21;
    goto LABEL_18;
  }
  v27 = v25 + 4;
  if (v25 + 4 >= v33)
  {
LABEL_32:
    v20 = 0;
LABEL_36:
    v18 = v31;
    a1 = v32;
    goto LABEL_37;
  }
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_17:
    v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v25 >= v33)
    {
      v20 = 0;
      v21 = v30;
      goto LABEL_36;
    }
    v26 = *(_QWORD *)(v34 + 8 * v25);
    ++v27;
    if (v26)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

void sub_10005D6F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  v8 = sub_1000055B0(&qword_1002ACDB0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (_OWORD *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  v14 = *(_QWORD *)(a4 + 64);
  v34 = a4 + 64;
  v32 = -1 << *(_BYTE *)(a4 + 32);
  if (-v32 < 64)
    v15 = ~(-1 << -(char)v32);
  else
    v15 = -1;
  v16 = v15 & v14;
  if (!a2)
  {
    v17 = 0;
LABEL_37:
    v28 = ~v32;
    v29 = v34;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = v28;
    a1[3] = v17;
    a1[4] = v16;
    return;
  }
  if (!a3)
  {
    v17 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v31 = a1;
  v17 = 0;
  v18 = 0;
  v33 = (unint64_t)(63 - v32) >> 6;
  v30 = v33 - 1;
  v35 = a3;
  if (!v16)
    goto LABEL_9;
LABEL_8:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v20 = v19 | (v17 << 6);
  while (1)
  {
    ++v18;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(a4 + 56);
    v26 = v25 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for DeviceSnapshot(0) - 8) + 72) * v20;
    v27 = (uint64_t)v11 + *(int *)(v37 + 48);
    v38 = *(_OWORD *)(v24 + 16 * v20);
    sub_10005F428(v26, v27, type metadata accessor for DeviceSnapshot);
    *v11 = v38;
    sub_10005FA70((uint64_t)v11, (uint64_t)v13, &qword_1002ACDB0);
    sub_10005FA70((uint64_t)v13, a2, &qword_1002ACDB0);
    if (v18 == v35)
      goto LABEL_36;
    a2 += *(_QWORD *)(v36 + 72);
    if (v16)
      goto LABEL_8;
LABEL_9:
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v33)
      goto LABEL_32;
    v22 = *(_QWORD *)(v34 + 8 * v21);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v17 = v21;
  }
  v17 += 2;
  if (v21 + 1 >= v33)
  {
    v16 = 0;
    v17 = v21;
    goto LABEL_36;
  }
  v22 = *(_QWORD *)(v34 + 8 * v17);
  if (v22)
    goto LABEL_14;
  v23 = v21 + 2;
  if (v21 + 2 >= v33)
    goto LABEL_32;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v17 = v21 + 3;
  if (v21 + 3 >= v33)
  {
    v16 = 0;
    v17 = v21 + 2;
    goto LABEL_36;
  }
  v22 = *(_QWORD *)(v34 + 8 * v17);
  if (v22)
  {
LABEL_14:
    v21 = v17;
    goto LABEL_18;
  }
  v23 = v21 + 4;
  if (v21 + 4 >= v33)
  {
LABEL_32:
    v16 = 0;
LABEL_36:
    a1 = v31;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v21 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v33)
    {
      v16 = 0;
      v17 = v30;
      goto LABEL_36;
    }
    v22 = *(_QWORD *)(v34 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_10005D9F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    ++v13;
    *(_OWORD *)v11 = *(_OWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    *(_QWORD *)(v11 + 16) = v20;
    if (v13 == v10)
    {
      swift_errorRetain(v20);
      goto LABEL_38;
    }
    v11 += 24;
    result = swift_errorRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10005DBF0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
LABEL_37:
    *a1 = a4;
    a1[1] = v6;
    a1[2] = ~v7;
    a1[3] = v12;
    a1[4] = v9;
    sub_10002DA50();
    return;
  }
  if (!a3)
  {
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    if (v13 == a3)
    {
      swift_retain();
      goto LABEL_37;
    }
    ++v11;
    swift_retain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_10005DDE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2;
  v5 = result;
  if (!((unint64_t)a3 >> 62))
  {
    if (a2 >= 1)
    {
      if (result)
      {
        if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) < a2)
          v4 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        sub_10006B508((a3 & 0xFFFFFFFFFFFFFF8) + 32, v4);
        return a3;
      }
      __break(1u);
      goto LABEL_20;
    }
    return a3;
  }
  if (a2 < 1)
    return a3;
  if (result)
  {
    if (a3 < 0)
      v6 = a3;
    else
      v6 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = _CocoaArrayWrapper.endIndex.getter(v6);
    if ((result & 0x8000000000000000) == 0)
    {
      result = _CocoaArrayWrapper.endIndex.getter(v6);
      if ((v7 & 0x8000000000000000) == 0 && result >= v7)
      {
        if (v7 < v4)
          v4 = v7;
        _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v4, v5, v6);
        return a3;
      }
      goto LABEL_21;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10005DED8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10005FF5C();
  v2 = sub_1000600AC((uint64_t)v1);
  sub_10005DF64(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  sub_10000B350();
}

void sub_10005DF0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10005FF5C();
  v2 = sub_1000600AC((uint64_t)v1);
  sub_10005DFA8(v2, v3);
  *(_QWORD *)(v0 + 32) = v4;
  sub_10000B350();
}

void sub_10005DF3C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  sub_100026300(v1);
}

void sub_10005DF64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v4 = sub_10005FF30(a1, a2);
  sub_10013DB94(v4, v5, v6, v7);
  if (v3)
    v8 = sub_100060118();
  else
    v8 = sub_100060140();
  *v2 = v8;
  sub_10000B350();
}

void sub_10005DFA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v4 = sub_10005FF30(a1, a2);
  sub_10013DB94(v4, v5, v6, v7);
  if (v3)
    v8 = sub_100060118();
  else
    v8 = sub_100060140();
  *v2 = v8;
  sub_10000B350();
}

uint64_t sub_10005DFE8()
{
  uint64_t v0;

  sub_100026600();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005E010(uint64_t a1)
{
  uint64_t *v1;

  return sub_10004FD48(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10005E020(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_100022AEC(a1, a2);
}

double sub_10005E030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004F234(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10005E040(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_unknownObjectRetain(a2);
  }
  return result;
}

void sub_10005E06C()
{
  sub_1000520C4();
}

uint64_t sub_10005E084()
{
  return os_variant_has_internal_ui("com.apple.universalcontrol");
}

uint64_t sub_10005E090()
{
  return type metadata accessor for Agent(0);
}

uint64_t type metadata accessor for Agent(uint64_t a1)
{
  uint64_t result;

  result = qword_1002ABDD8;
  if (!qword_1002ABDD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Agent);
  return result;
}

uint64_t sub_10005E0D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[32];

  result = type metadata accessor for UniversalControlConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    v4[4] = &unk_10021E948;
    v4[5] = &unk_10021E948;
    v4[6] = &unk_10021E948;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = "\b";
    v4[10] = &unk_10021E960;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[20] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[22] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[23] = &unk_10021E978;
    v4[24] = &unk_10021E990;
    v4[25] = "\b";
    v4[26] = &unk_10021E990;
    v4[27] = "\b";
    v4[28] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[29] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[30] = &unk_10021E9A8;
    v4[31] = &unk_10021E960;
    return swift_updateClassMetadata2(a1, 256, 32, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for Agent.Context()
{
  return objc_opt_self(_TtCC13EnsembleAgent5Agent7Context);
}

uint64_t sub_10005E1F4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005E1FC(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_10005E208()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

void sub_10005E230(uint64_t a1)
{
  uint64_t v1;

  sub_10002D0DC(a1, *(_QWORD *)(v1 + 16));
}

void sub_10005E238(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100026944(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  sub_1000050D4();
}

uint64_t sub_10005E264(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  _QWORD aBlock[5];
  uint64_t v111;
  _QWORD v112[2];

  v8 = type metadata accessor for UniversalControlDiagnoseCategory(0);
  v106 = *(_QWORD *)(v8 - 8);
  v107 = v8;
  __chkstk_darwin(v8);
  v105 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v103 = *(_QWORD *)(v10 - 8);
  v104 = v10;
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t *)((char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v101 = (char *)&v86 - v13;
  v14 = type metadata accessor for DispatchTime(0);
  v99 = *(_QWORD *)(v14 - 8);
  v100 = v14;
  __chkstk_darwin(v14);
  v98 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v96 = *(_QWORD *)(v16 - 8);
  v97 = v16;
  __chkstk_darwin(v16);
  v95 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for DispatchQoS(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = v19;
  v88 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v89 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a4 + 16) = CGSize.init(_:);
  *(_QWORD *)(a4 + 24) = 0;
  v23 = type metadata accessor for DeviceSnapshot(0);
  v24 = sub_100033B3C();
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, v23, v24);
  *(_QWORD *)(a4 + 112) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 120) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a4 + 144) = 1;
  v109 = a1;
  *(_QWORD *)(a4 + 32) = a1;
  *(_QWORD *)(a4 + 40) = &off_10028CF60;
  *(_QWORD *)(a4 + 56) = a2;
  *(_QWORD *)(a4 + 64) = &off_1002830C8;
  *(_QWORD *)(a4 + 72) = a3;
  *(_QWORD *)(a4 + 80) = &off_10028C198;
  sub_10005FC6C(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  swift_retain(a1);
  v108 = a2;
  v25 = swift_retain(a3);
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100021264((unint64_t *)&unk_1002AC3B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  v28 = v27;
  v29 = sub_1000055B0(&qword_1002AEEC0);
  sub_10005FCA0((unint64_t *)&qword_1002AC3C0, &qword_1002AEEC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v20, v28);
  v31 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v22, v26);

  (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v20);
  *(_QWORD *)(a4 + 48) = v31;
  swift_unknownObjectRetain(v31);
  v32 = swift_retain(a4);
  v33 = (void *)static OS_dispatch_queue.main.getter(v32);
  v34 = swift_allocObject(&unk_100284698, 32, 7);
  *(_QWORD *)(v34 + 24) = &off_100285680;
  swift_unknownObjectWeakInit(v34 + 16, a4);
  swift_retain(v34);
  v35 = sub_1000C8454(v33, (uint64_t)sub_10005E22C, v34);
  v37 = v36;
  swift_release(v34);
  swift_release(a4);
  v112[0] = v35;
  v38 = type metadata accessor for P2PBrowser();
  sub_100021264((unint64_t *)&qword_1002AC3C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser);
  v39 = ObservableObject<>.objectWillChange.getter(v38);
  aBlock[0] = v39;
  v40 = swift_allocObject(&unk_100284AD0, 24, 7);
  *(_QWORD *)(v40 + 16) = v37;
  v41 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v37, 2);
  v42 = Publisher<>.sink(receiveValue:)(sub_10005FDC0, v40, v41, &protocol witness table for ObservableObjectPublisher);
  swift_release(v40);
  AnyCancellable.store(in:)(v112);
  swift_release(v39);
  swift_unknownObjectRelease(v37);
  swift_release(v42);
  type metadata accessor for UniversalControlPreferences(0);
  v43 = sub_100032928();
  aBlock[0] = v43;
  v44 = swift_allocObject(&unk_100284AF8, 24, 7);
  *(_QWORD *)(v44 + 16) = v37;
  swift_unknownObjectRetain_n(v37, 2);
  v45 = Publisher<>.sink(receiveValue:)(sub_10005FDC0, v44, v41, &protocol witness table for ObservableObjectPublisher);
  swift_release(v44);
  AnyCancellable.store(in:)(v112);
  swift_release(v43);
  swift_unknownObjectRelease(v37);
  swift_release(v45);
  v46 = type metadata accessor for ProximityController();
  v89 = a3;
  v47 = sub_10010582C(v46, (uint64_t)&off_10028C188);
  aBlock[0] = v47;
  v48 = swift_allocObject(&unk_100284B20, 24, 7);
  *(_QWORD *)(v48 + 16) = v37;
  swift_unknownObjectRetain_n(v37, 2);
  v49 = Publisher<>.sink(receiveValue:)(sub_10005FDC0, v48, v41, &protocol witness table for ObservableObjectPublisher);
  swift_release(v48);
  AnyCancellable.store(in:)(v112);
  swift_release(v47);
  swift_unknownObjectRelease(v37);
  swift_release(v49);
  v50 = v112[0];
  swift_getObjectType(v37);
  swift_unknownObjectRetain(v37);
  swift_bridgeObjectRetain(v50);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_unknownObjectRelease(v37);
  swift_bridgeObjectRelease(v50);
  v51 = *(_QWORD *)(a4 + 88);
  v52 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 88) = v50;
  *(_QWORD *)(a4 + 96) = v37;
  swift_unknownObjectRetain(v37);
  swift_bridgeObjectRetain(v50);
  sub_10002D108(v51, v52);
  if (qword_1002A9868 != -1)
    swift_once(&qword_1002A9868, sub_10007A128);
  v53 = v91;
  v54 = sub_100006FB4(v91, (uint64_t)qword_1002ACE30);
  ObjectType = swift_getObjectType(v31);
  v56 = swift_allocObject(&unk_100284B48, 24, 7);
  swift_weakInit(v56 + 16, a4);
  v57 = v90;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  v86 = v31;
  v59 = v88;
  v58(v88, v54, v53);
  v60 = *(unsigned __int8 *)(v57 + 80);
  v61 = (v60 + 16) & ~v60;
  v62 = (v87 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = swift_allocObject(&unk_100284B70, v62 + 8, v60 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v63 + v61, v59, v53);
  *(_QWORD *)(v63 + v62) = v56;
  aBlock[4] = sub_10005FD80;
  v111 = v63;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_100284B88;
  v64 = _Block_copy(aBlock);
  swift_retain(v56);
  v65 = v92;
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  v66 = v95;
  sub_10002DEB8();
  v67 = v86;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v65, v66, v64, ObjectType);
  _Block_release(v64);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v66, v97);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v65, v94);
  v68 = v111;
  swift_release(v56);
  v69 = swift_release(v68);
  v70 = v98;
  static DispatchTime.distantFuture.getter(v69);
  v71 = v101;
  sub_10007A0C4();
  v72 = (char *)v102;
  sub_10007A0F4((char *)v102);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v70, v71, v72, ObjectType);
  v73 = *(void (**)(char *, uint64_t))(v103 + 8);
  v74 = v72;
  v75 = v104;
  v73(v74, v104);
  v73(v71, v75);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v70, v100);
  v76 = v67;
  OS_dispatch_source.activate()();
  v77 = v105;
  v78 = v106;
  v79 = v107;
  v80 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v106 + 104))(v105, enum case for UniversalControlDiagnoseCategory.discovery(_:), v107);
  v81 = UniversalControlDiagnoseCategory.code.getter(v80);
  sub_100126A98(a4, (uint64_t)"com.apple.universalcontrol", 26, 2, v81, v82, v83);
  swift_unknownObjectRelease(v76);
  swift_release(v109);

  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
  v84 = v112[0];
  swift_unknownObjectRelease(v37);
  swift_bridgeObjectRelease(v84);
  return a4;
}

char *sub_10005EC00(void *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *v37;
  _QWORD v39[3];
  void *v40;

  v39[0] = type metadata accessor for UniversalControlDiagnoseCategory(0);
  v4 = *(_QWORD *)(v39[0] - 8);
  __chkstk_darwin(v39[0]);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v7 = OBJC_IVAR____TtC13EnsembleAgent13P2PController_logger;
  if (qword_1002A9800 != -1)
    swift_once(&qword_1002A9800, sub_100026BF4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100006FB4(v8, (uint64_t)qword_1002B6D10);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&a2[v7], v9, v8);
  v10 = &a2[OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers;
  v12 = type metadata accessor for P2PPeerCoordinator();
  v13 = sub_100033B3C();
  *(_QWORD *)&a2[v11] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, v12, v13);
  v14 = type metadata accessor for P2PBrowser();
  v15 = swift_allocObject(v14, 120, 7);
  v16 = a1;
  v17 = sub_10005EFD0(v16, v15);
  *((_QWORD *)a2 + 5) = v17;
  v18 = &a2[OBJC_IVAR____TtC13EnsembleAgent13P2PController_serviceType];
  *(_QWORD *)v18 = 0xD00000000000001ALL;
  *((_QWORD *)v18 + 1) = 0x8000000100251980;
  swift_retain(v17);
  v19 = swift_retain(a2);
  sub_1000CB1A0(v19, (uint64_t)&off_10028BD90);
  sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  v22 = swift_allocObject(&unk_100284698, 32, 7);
  *(_QWORD *)(v22 + 24) = &off_10028BD80;
  swift_unknownObjectWeakInit(v22 + 16, a2);
  v23 = sub_1000C8454(v21, (uint64_t)sub_10005E22C, v22);
  v25 = v24;
  v40 = v23;
  sub_100021264((unint64_t *)&qword_1002AC3C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for P2PBrowser);
  dispatch thunk of ObservableObject.objectWillChange.getter(v14);
  v39[1] = v39[2];
  v26 = swift_allocObject(&unk_100284BC0, 24, 7);
  *(_QWORD *)(v26 + 16) = v25;
  v27 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v25, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v26, v27, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v40);
  swift_release();
  swift_unknownObjectRelease(v25);
  swift_release();
  v28 = v40;
  swift_getObjectType(v25);
  swift_unknownObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_unknownObjectRelease(v25);
  swift_bridgeObjectRelease(v28);
  v29 = &a2[OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink];
  v30 = *(_QWORD *)&a2[OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink];
  v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink + 8];
  *(_QWORD *)v29 = v28;
  *((_QWORD *)v29 + 1) = v25;
  swift_unknownObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  sub_10002D108(v30, v31);
  v32 = v39[0];
  v33 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(v4 + 104))(v6, enum case for UniversalControlDiagnoseCategory.peer(_:), v39[0]);
  v34 = UniversalControlDiagnoseCategory.code.getter(v33);
  sub_100126A6C((uint64_t)a2, (uint64_t)"com.apple.universalcontrol", 26, 2, v34, v35, v36);
  swift_release();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v32);
  v37 = v40;
  swift_unknownObjectRelease(v25);
  swift_bridgeObjectRelease(v37);
  return a2;
}

uint64_t sub_10005EFD0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;

  v4 = type metadata accessor for Beacon();
  swift_allocObject(v4, 24, 7);
  *(_QWORD *)(a2 + 16) = sub_100066D40();
  *(_QWORD *)(a2 + 48) = 0;
  swift_unknownObjectWeakInit(a2 + 40, 0);
  v5 = type metadata accessor for P2PDevice(0);
  v6 = sub_100033B3C();
  *(_QWORD *)(a2 + 56) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, v5, v6);
  *(_QWORD *)(a2 + 64) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a2 + 72) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, &type metadata for String, v6);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 24) = a1;
  *(_QWORD *)(a2 + 32) = &off_1002830C8;
  sub_10005FC6C(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v7 = swift_unknownObjectRetain(a1);
  v8 = (void *)static OS_dispatch_queue.main.getter(v7);
  v9 = swift_allocObject(&unk_100284698, 32, 7);
  *(_QWORD *)(v9 + 24) = &off_100289E08;
  swift_unknownObjectWeakInit(v9 + 16, a2);
  v10 = sub_1000C8454(v8, (uint64_t)sub_10005E22C, v9);
  v12 = v11;
  v23 = v10;
  if (qword_1002A9958 != -1)
    swift_once(&qword_1002A9958, sub_1001A0634);
  v13 = type metadata accessor for SystemConfigurationGlue();
  sub_100021264((unint64_t *)&qword_1002AC3D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SystemConfigurationGlue);
  dispatch thunk of ObservableObject.objectWillChange.getter(v13);
  v14 = swift_allocObject(&unk_100284BE8, 24, 7);
  *(_QWORD *)(v14 + 16) = v12;
  v15 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v12, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v14, v15, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v23);
  swift_release();
  swift_unknownObjectRelease(v12);
  swift_release();
  v16 = (void *)type metadata accessor for UniversalControlPreferences(0);
  v17 = objc_msgSend(v16, "sharedPreferences");
  sub_100021264((unint64_t *)&qword_1002AC1C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlPreferences);
  dispatch thunk of ObservableObject.objectWillChange.getter(v16);
  v18 = swift_allocObject(&unk_100284C10, 24, 7);
  *(_QWORD *)(v18 + 16) = v12;
  swift_unknownObjectRetain_n(v12, 2);
  Publisher<>.sink(receiveValue:)(sub_10005FDC0, v18, v15, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v23);

  swift_release();
  swift_unknownObjectRelease(v12);
  swift_release();
  v19 = v23;
  v20 = *(_QWORD *)(a2 + 104);
  v21 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = v23;
  *(_QWORD *)(a2 + 112) = v12;
  swift_unknownObjectRetain(v12);
  swift_bridgeObjectRetain(v19);
  sub_10002D108(v20, v21);
  sub_1000CB9AC();
  swift_unknownObjectRelease(v12);
  swift_bridgeObjectRelease(v19);

  return a2;
}

uint64_t sub_10005F348(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;

  v9 = type metadata accessor for DragPlatformProvider_iOS();
  v10 = &protocol witness table for DragPlatformProvider_iOS;
  *(_QWORD *)&v8 = a2;
  v6 = *a3;
  *(_QWORD *)(v6 + 16) = a1 + 1;
  return sub_100025A50(&v8, v6 + 40 * a1 + 32);
}

uint64_t sub_10005F3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002AAF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10005F3FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100026944(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_1000050D4();
}

void sub_10005F428(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100026944(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_1000050D4();
}

_QWORD *sub_10005F454(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  v11 = a1[3];
  v12 = a1[2];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v8 = a1[9];
  v7 = a1[10];
  v9 = a1[11];
  swift_bridgeObjectRetain();
  sub_10005F508(v12, v11, v2, v3, v4, v5, v6, v8, v7, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005F508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t sub_10005F564(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t *sub_10005F57C(uint64_t *a1)
{
  sub_10005F5EC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005F5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

void sub_10005F648(void *a1)
{
  bzero(a1, 0x170uLL);
}

uint64_t *sub_10005F650(uint64_t *a1)
{
  sub_10005F508(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005F6C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_10005F6D0()
{
  unint64_t result;

  result = qword_1002B3230;
  if (!qword_1002B3230)
  {
    result = swift_getWitnessTable(&unk_100227BB8, &unk_10028E230);
    atomic_store(result, (unint64_t *)&qword_1002B3230);
  }
  return result;
}

unint64_t sub_10005F70C()
{
  unint64_t result;

  result = qword_1002AC2C0;
  if (!qword_1002AC2C0)
  {
    result = swift_getWitnessTable(&unk_10022A29C, &type metadata for ConnectionController.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AC2C0);
  }
  return result;
}

unint64_t sub_10005F748()
{
  unint64_t result;

  result = qword_1002ACFF0;
  if (!qword_1002ACFF0)
  {
    result = swift_getWitnessTable(&unk_10021F4FC, &type metadata for DiscoveryController.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002ACFF0);
  }
  return result;
}

uint64_t sub_10005F784()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1000603B4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, 57, 7);
}

unint64_t sub_10005F7C0()
{
  unint64_t result;

  result = qword_1002AC2F0;
  if (!qword_1002AC2F0)
  {
    result = swift_getWitnessTable(&unk_1002275DC, &type metadata for EventController.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AC2F0);
  }
  return result;
}

uint64_t sub_10005F7FC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1000603B4();
    swift_bridgeObjectRelease();
    sub_1000603AC();
    sub_100060230();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, 128, 7);
}

unint64_t sub_10005F858()
{
  unint64_t result;

  result = qword_1002B2980;
  if (!qword_1002B2980)
  {
    result = swift_getWitnessTable(&unk_100227B74, &unk_10028E2B0);
    atomic_store(result, (unint64_t *)&qword_1002B2980);
  }
  return result;
}

unint64_t sub_10005F894()
{
  unint64_t result;

  result = qword_1002AC310;
  if (!qword_1002AC310)
  {
    result = swift_getWitnessTable(&unk_100225DBC, &type metadata for P2PController.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002AC310);
  }
  return result;
}

uint64_t sub_10005F8D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000603AC();
  sub_100060230();
  return swift_deallocObject(v0, 80, 7);
}

unint64_t sub_10005F8FC()
{
  unint64_t result;

  result = qword_1002B2990;
  if (!qword_1002B2990)
  {
    result = swift_getWitnessTable(&unk_100227BFC, &unk_10028E168);
    atomic_store(result, (unint64_t *)&qword_1002B2990);
  }
  return result;
}

uint64_t sub_10005F938()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[4];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[15]);
    swift_bridgeObjectRelease(v0[26]);
  }
  return swift_deallocObject(v0, 225, 7);
}

void sub_10005F974(unint64_t *a1, uint64_t *a2)
{
  void (*v2)(void);
  uint64_t v4;

  if (!*a1)
  {
    v4 = sub_1000602D4(0, a2);
    v2();
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4), a1);
  }
  sub_100026914();
}

unint64_t sub_10005F9C4()
{
  unint64_t result;

  result = qword_1002AC340;
  if (!qword_1002AC340)
  {
    result = swift_getWitnessTable(&unk_100227C6C, &unk_10028E0D0);
    atomic_store(result, (unint64_t *)&qword_1002AC340);
  }
  return result;
}

uint64_t sub_10005FA00()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1000603B4();
    if (*(_QWORD *)(v0 + 56))
    {
      swift_bridgeObjectRelease();
      sub_1000603AC();
      sub_100060230();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, 168, 7);
}

void sub_10005FA70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100060044(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_1000050D4();
}

void sub_10005FA9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10006017C(a1, a2);
  sub_10002666C(v2);
  sub_1000050D4();
}

uint64_t sub_10005FAC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return sub_100060138(a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10005FADC(void *a1)
{
  bzero(a1, 0x98uLL);
}

void sub_10005FAE4(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 1;
  bzero(a1 + 3, 0xB9uLL);
}

void sub_10005FAFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100060044(a1, a2, a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_1000050D4();
}

uint64_t sub_10005FB2C()
{
  uint64_t v0;

  sub_100026600();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005FB5C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004EECC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t, __n128))(v1 + 40), *(char **)(v1 + 48));
}

uint64_t sub_10005FB6C()
{
  uint64_t v0;

  return sub_10004F57C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10005FB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_10000F6E4() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  sub_100026600();
  sub_100060064(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

unsigned __int8 *sub_10005FBEC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_10000F6E4();
  sub_10006033C();
  return sub_10004CAE4(v0, v1, v2, v3);
}

uint64_t sub_10005FC3C()
{
  uint64_t v0;

  return sub_10004CFE4(v0);
}

uint64_t sub_10005FC44(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10004D088(a1, a2, a3, a4, v4);
}

void sub_10005FC4C(void *a1)
{
  sub_10004D43C(a1);
}

uint64_t sub_10005FC54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005FC64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10005FC6C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a2)
  {
    v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }
  sub_1000050D4();
}

void sub_10005FCA0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1000602D4(0, a2);
    atomic_store(sub_100026A38(v3), a1);
  }
  sub_1000050D4();
}

uint64_t sub_10005FCCC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005FCF0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005FD14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10000F6E4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  sub_10006033C();
  return swift_deallocObject(v2, v3, v4);
}

uint64_t sub_10005FD80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_10000F6E4() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10007B7A4(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10005FE28(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_10005FE34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher<>.sink(receiveValue:)(a1, v3, v1, v2);
}

uint64_t sub_10005FE48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return swift_unknownObjectRetain_n(v1, 2);
}

uint64_t sub_10005FE5C()
{
  uint64_t v0;

  return sub_10005E1F4(v0);
}

uint64_t sub_10005FE84()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10005FE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100006FB4(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_10005FECC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10005FED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

void sub_10005FEE0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = a1;
}

double sub_10005FEF8()
{
  double v0;

  return v0;
}

uint64_t sub_10005FF0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10005FF18()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10005FF20()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10005FF28()
{
  uint64_t v0;

  return AnyCancellable.store(in:)(v0 - 176);
}

uint64_t sub_10005FF30(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005FF4C(uint64_t a1, uint64_t a2)
{
  return sub_1000FE5C8(a1, a2);
}

uint64_t sub_10005FF54()
{
  uint64_t v0;

  return swift_retain(v0);
}

void *sub_10005FF5C()
{
  return malloc(0x28uLL);
}

void sub_10005FF70(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

void sub_10005FF78()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 192) = *(_QWORD *)(v0 - 184);
}

uint64_t sub_10005FF90()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10005FF98()
{
  return 4294960578;
}

uint64_t sub_10005FFC0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10005FFE4(void *a1)
{
  free(a1);
}

uint64_t sub_10005FFF4()
{
  return 0x636F46203A435058;
}

void sub_100060018(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  sub_10005FC6C(0, a2, a3);
}

void sub_100060020()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_100060030(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10006003C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100060044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000055B0(a3);
}

uint64_t sub_100060054()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10006005C()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100060064@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100060074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

uint64_t sub_10006008C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = result;
  *(_QWORD *)(v1 - 272) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_1000600AC(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_1000600C0()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_1000600C8(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a5;
  *(_QWORD *)(v7 + 40) = a6;
  *(_BYTE *)(v7 + 48) = a7 & 1;
}

uint64_t sub_1000600E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_10005E1FC(v5, v3, v4);
  return sub_10005E1FC(v0, v1, v2);
}

uint64_t sub_100060110()
{
  uint64_t v0;

  return dispatch thunk of ObservableObject.objectWillChange.getter(v0);
}

uint64_t sub_100060118()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100060124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_unexpectedError(v2, a2, 22, 1, 489);
}

uint64_t sub_100060138(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_100060140()
{
  uint64_t v0;
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v0 + 8 * v1 + 32));
}

uint64_t sub_10006014C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100060154()
{
  return type metadata accessor for UniversalControlConfiguration(0);
}

uint64_t sub_10006015C()
{
  uint64_t v0;

  return static _DictionaryStorage.allocate(capacity:)(v0);
}

BOOL sub_10006016C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006017C(uint64_t a1, uint64_t *a2)
{
  return sub_1000055B0(a2);
}

uint64_t sub_100060184()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10005E020(v0, v1, 0);
}

uint64_t sub_100060194()
{
  uint64_t v0;

  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t sub_1000601A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *))
{
  uint64_t v4;

  return sub_1000FDC0C(a1, a2, v4, a4);
}

uint64_t sub_100060200()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100060208(uint64_t a1)
{
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_100060210(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_10006021C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100060228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3, v3);
}

uint64_t sub_100060230()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100060238()
{
  uint64_t v0;

  return v0;
}

void *sub_100060250(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  return sub_1000C8454(v2, a2, v3);
}

uint64_t sub_10006025C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002D108(v0, v1);
}

uint64_t sub_100060268@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100060270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002D108(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10006027C(uint64_t a1)
{
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_100060284()
{
  return type metadata accessor for UniversalControlDevice(0);
}

uint64_t sub_10006028C()
{
  return type metadata accessor for P2PDevice.Properties(0);
}

BOOL sub_100060294@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

_WORD *sub_1000602B4(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1000602C0()
{
  return static String._fromSubstring(_:)();
}

uint64_t sub_1000602C8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 264));
}

uint64_t sub_1000602D4(uint64_t a1, uint64_t *a2)
{
  return sub_10000DCA0(a2);
}

uint64_t sub_1000602E0()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

size_t sub_100060328(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_10006035C()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100060368(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_100006FCC(v4, v3, a3);
}

_QWORD *sub_100060374(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return dispatch thunk of _AnyIteratorBoxBase.next()((uint64_t *)va);
}

uint64_t sub_100060380@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

void sub_10006038C()
{
  sub_1000586CC();
}

uint64_t sub_100060398(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return sub_100025618(a1, v1, v2);
}

uint64_t sub_1000603A4()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000603AC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1000603B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000603BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6E70);
  sub_100006FB4(v0, (uint64_t)qword_1002B6E70);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 0x79616C70736964, 0xE700000000000000);
}

uint64_t sub_100060430(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGPoint v15;
  CGPoint v16;
  CGPoint v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v5 = *(_QWORD *)(v2 + 48);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = *(_QWORD *)(v2 + 48);
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v5, 2);
    v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + 48), 2);
    if (!v6)
    {
LABEL_7:
      swift_bridgeObjectRelease_n(v5, 2);
      return 0;
    }
  }
  v7 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    v8 = v9;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 32);
    v9 = swift_retain(v8);
  }
  v18.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v9);
  v15.x = a1;
  v15.y = a2;
  if (CGRectContainsPoint(v18, v15))
    goto LABEL_12;
  swift_release(v8);
  if (v6 == 1)
    goto LABEL_7;
  if (v7)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v5);
    v8 = v10;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 40);
    v10 = swift_retain(v8);
  }
  v19.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v10);
  v16.x = a1;
  v16.y = a2;
  if (CGRectContainsPoint(v19, v16))
  {
LABEL_12:
    swift_bridgeObjectRelease_n(v5, 2);
    return v8;
  }
  swift_release(v8);
  if (v6 == 2)
    goto LABEL_7;
  v12 = 6;
  while (1)
  {
    if (v7)
    {
      result = specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v5);
      v8 = result;
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8 * v12);
      result = swift_retain(v8);
    }
    v13 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
      break;
    v20.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(result);
    v17.x = a1;
    v17.y = a2;
    if (CGRectContainsPoint(v20, v17))
      goto LABEL_12;
    swift_release(v8);
    ++v12;
    if (v13 == v6)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000605D4(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGPoint v15;
  CGPoint v16;
  CGPoint v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v5 = *(_QWORD *)(v2 + 16);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = *(_QWORD *)(v2 + 16);
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v5, 2);
    v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + 16), 2);
    if (!v6)
    {
LABEL_7:
      swift_bridgeObjectRelease_n(v5, 2);
      return 0;
    }
  }
  v7 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    v8 = v9;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 32);
    v9 = swift_retain(v8);
  }
  v18.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v9);
  v15.x = a1;
  v15.y = a2;
  if (CGRectContainsPoint(v18, v15))
    goto LABEL_12;
  swift_release(v8);
  if (v6 == 1)
    goto LABEL_7;
  if (v7)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v5);
    v8 = v10;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 40);
    v10 = swift_retain(v8);
  }
  v19.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v10);
  v16.x = a1;
  v16.y = a2;
  if (CGRectContainsPoint(v19, v16))
  {
LABEL_12:
    swift_bridgeObjectRelease_n(v5, 2);
    return v8;
  }
  swift_release(v8);
  if (v6 == 2)
    goto LABEL_7;
  v12 = 6;
  while (1)
  {
    if (v7)
    {
      result = specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v5);
      v8 = result;
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 8 * v12);
      result = swift_retain(v8);
    }
    v13 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
      break;
    v20.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(result);
    v17.x = a1;
    v17.y = a2;
    if (CGRectContainsPoint(v20, v17))
      goto LABEL_12;
    swift_release(v8);
    ++v12;
    if (v13 == v6)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_100060780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100058678();
    v3 = sub_100071A78(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(a1 + 32))
      {
        v6 = a1 + 64;
        v15 = a1 + 64;
        while ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v16 = v1;
          v17 = v4;
          v18 = UniversalControlDisplayID.description.getter(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v5), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v5 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v5 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v5 + 24));
          v19 = v7;
          v8._countAndFlagsBits = 8250;
          v8._object = (void *)0xE200000000000000;
          String.append(_:)(v8);
          v9._countAndFlagsBits = CGRect.description.getter();
          object = v9._object;
          String.append(_:)(v9);
          swift_bridgeObjectRelease(object);
          v11 = _swiftEmptyArrayStorage[2];
          if (v11 >= _swiftEmptyArrayStorage[3] >> 1)
            sub_100058678();
          _swiftEmptyArrayStorage[2] = v11 + 1;
          v12 = &_swiftEmptyArrayStorage[2 * v11];
          v12[4] = v18;
          v12[5] = v19;
          v13 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v5 >= -v13)
            goto LABEL_19;
          v6 = a1 + 64;
          if ((*(_QWORD *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          if (v17 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v14 = _HashTable.occupiedBucket(after:)(v5, v15, ~v13);
          v1 = v16 - 1;
          if (v16 == 1)
            return;
          v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            v4 = *(_DWORD *)(a1 + 36);
            if (v14 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_10006099C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  type metadata accessor for UUID(0);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_10002641C();
  v4 = *(_QWORD *)(a1 + 16);
  v63 = _swiftEmptyArrayStorage;
  sub_100058678();
  v5 = _swiftEmptyArrayStorage;
  v61 = v4;
  v62 = a1 + 56;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & *(_QWORD *)(a1 + 56);
  if (!v4)
  {
    swift_bridgeObjectRetain(a1);
LABEL_39:
    if (!v8)
      goto LABEL_41;
LABEL_40:
    sub_100065E80();
    while (1)
    {
      sub_100065CB0(v39);
      sub_100065EC0();
      sub_100065D7C();
      sub_100065DAC();
      v48 = sub_100065ECC();
      v51 = sub_100065EF4(v48, v49, v50);
      if ((v52 & 1) != 0)
        v53 = v1;
      else
        v53 = v51;
      sub_100065E98(v51, v53);
      v55 = v54;
      swift_bridgeObjectRelease(&v63);
      sub_100065E28();
      v1 = static String._fromSubstring(_:)(v56);
      v58 = v57;
      swift_bridgeObjectRelease(v55);
      v63 = v5;
      v59 = v5[2];
      if (v59 >= v5[3] >> 1)
      {
        sub_100065E38();
        v5 = v63;
      }
      v5[2] = v59 + 1;
      v60 = &v5[2 * v59];
      v60[4] = v1;
      v60[5] = v58;
      if (v8)
        goto LABEL_40;
LABEL_41:
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_72;
      }
      sub_100065EE8();
      if (v12 == v13)
        goto LABEL_70;
      v4 = v40;
      if (!*(_QWORD *)(v62 + 8 * v40))
      {
        v4 = v40 + 1;
        sub_100065D60();
        if (v12 == v13)
          goto LABEL_70;
        sub_100065E00();
        if (!v42)
        {
          v4 = v41 + 2;
          sub_100065D60();
          if (v12 == v13)
            goto LABEL_70;
          sub_100065E00();
          if (!v44)
          {
            v4 = v43 + 3;
            sub_100065D60();
            if (v12 == v13)
              goto LABEL_70;
            sub_100065E00();
            if (!v45)
            {
              sub_100065EE8();
              if (v12 == v13)
              {
LABEL_70:
                swift_release();
                return;
              }
              if (!*(_QWORD *)(v62 + 8 * v46))
              {
                while (1)
                {
                  v4 = v46 + 1;
                  if (__OFADD__(v46, 1))
                    break;
                  sub_100065D60();
                  if (v12 == v13)
                    goto LABEL_70;
                  v46 = v47 + 1;
                  if (*(_QWORD *)(v62 + 8 * v4))
                    goto LABEL_62;
                }
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
                goto LABEL_77;
              }
              v4 = v46;
            }
          }
        }
      }
LABEL_62:
      sub_100065E60();
    }
  }
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  v4 = 0;
  while (v8)
  {
    sub_100065E80();
LABEL_29:
    sub_100065CB0(v10);
    sub_100065EC0();
    sub_100065D7C();
    sub_100065DAC();
    v24 = (v22 & v23) == 0;
    v25 = 7;
    if (!v24)
      v25 = 11;
    v26 = v25 | (v21 << 16);
    v27 = sub_100065F2C();
    v29 = sub_100065EF4(v27, v28, v26);
    if ((v30 & 1) != 0)
      v31 = v26;
    else
      v31 = v29;
    v32 = sub_100065E98(v29, v31);
    v34 = v33;
    swift_bridgeObjectRelease(&v63);
    v35 = static String._fromSubstring(_:)(v32);
    v37 = v36;
    swift_bridgeObjectRelease(v34);
    v63 = v5;
    v1 = v5[2];
    if (v1 >= v5[3] >> 1)
    {
      sub_100065E38();
      v5 = v63;
    }
    ++v9;
    v5[2] = v1 + 1;
    v38 = &v5[2 * v1];
    v38[4] = v35;
    v38[5] = v37;
    if (v9 == v61)
      goto LABEL_39;
  }
  if (__OFADD__(v4, 1))
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  sub_100065EE8();
  if (v12 == v13)
    goto LABEL_73;
  v4 = v11;
  if (*(_QWORD *)(v62 + 8 * v11))
    goto LABEL_28;
  v4 = v11 + 1;
  sub_100065D60();
  if (v12 == v13)
    goto LABEL_74;
  sub_100065E00();
  if (v15)
    goto LABEL_28;
  v4 = v14 + 2;
  sub_100065D60();
  if (v12 == v13)
    goto LABEL_78;
  sub_100065E00();
  if (v17)
    goto LABEL_28;
  v4 = v16 + 3;
  sub_100065D60();
  if (v12 == v13)
    goto LABEL_79;
  sub_100065E00();
  if (v18)
  {
LABEL_28:
    sub_100065E60();
    goto LABEL_29;
  }
  sub_100065EE8();
  if (v12 == v13)
    goto LABEL_80;
  if (*(_QWORD *)(v62 + 8 * v19))
  {
    v4 = v19;
    goto LABEL_28;
  }
  while (1)
  {
    v4 = v19 + 1;
    if (__OFADD__(v19, 1))
      goto LABEL_76;
    sub_100065D60();
    if (v12 == v13)
      break;
    v19 = v20 + 1;
    if (*(_QWORD *)(v62 + 8 * v4))
      goto LABEL_28;
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
}

void sub_100060D90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v24 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_47;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    sub_100058678();
    if (v2 < 0)
      break;
    if (!v2)
    {
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
      v25 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain(a1);
LABEL_23:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = v3;
      v23 = v12;
      while (1)
      {
        if (v24)
        {
          swift_bridgeObjectRetain(a1);
          v13 = _CocoaArrayWrapper.endIndex.getter(v23);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v13 = *(_QWORD *)(v3 + 16);
        }
        if (v2 == v13)
        {
          swift_bridgeObjectRelease(a1);
          return;
        }
        if (v25)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a1);
        }
        else
        {
          if (v2 < 0)
          {
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if ((unint64_t)v2 >= *(_QWORD *)(v3 + 16))
            goto LABEL_42;
          swift_retain(*(_QWORD *)(a1 + 8 * v2 + 32));
        }
        if (__OFADD__(v2, 1))
          goto LABEL_43;
        UniversalControlDevice.label.getter();
        v15 = v14;
        v17 = v16;
        swift_release();
        v18 = _swiftEmptyArrayStorage[2];
        if (v18 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_100058678();
        _swiftEmptyArrayStorage[2] = v18 + 1;
        v19 = &_swiftEmptyArrayStorage[2 * v18];
        v19[4] = v15;
        v19[5] = v17;
        ++v2;
      }
    }
    if (v24)
    {
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v4 = a1;
      else
        v4 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v22 = _CocoaArrayWrapper.endIndex.getter(v4);
    }
    else
    {
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
      v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
    }
    v5 = 0;
    v25 = a1 & 0xC000000000000001;
    while (1)
    {
      if ((v2 & ~(v2 >> 63)) == v5)
        goto LABEL_44;
      if (v22 == v5)
        break;
      if (v25)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v21 + 16))
          goto LABEL_46;
        swift_retain(*(_QWORD *)(a1 + 8 * v5 + 32));
      }
      UniversalControlDevice.label.getter();
      v7 = v6;
      v9 = v8;
      swift_release();
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100058678();
      ++v5;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      v11[5] = v9;
      if (v2 == v5)
      {
        v3 = v21;
        goto LABEL_23;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
}

void sub_100061080(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  int64_t v30;
  int64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  sub_100058678();
  v3 = a1 + 56;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 56);
  v30 = v2;
  v31 = (unint64_t)(63 - v5) >> 6;
  if (!v2)
  {
    swift_bridgeObjectRetain(a1);
LABEL_28:
    if (!v6)
      goto LABEL_30;
LABEL_29:
    v19 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (i = v19 | (v2 << 6); ; i = __clz(__rbit64(v22)) + (v2 << 6))
    {
      sub_100066EC0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 17 * i), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 17 * i + 8), *(_BYTE *)(*(_QWORD *)(a1 + 48) + 17 * i + 16));
      v25 = v24;
      v27 = v26;
      v28 = _swiftEmptyArrayStorage[2];
      if (v28 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100058678();
      _swiftEmptyArrayStorage[2] = v28 + 1;
      v29 = &_swiftEmptyArrayStorage[2 * v28];
      v29[4] = v25;
      v29[5] = v27;
      if (v6)
        goto LABEL_29;
LABEL_30:
      v21 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v21 >= v31)
        goto LABEL_50;
      v22 = *(_QWORD *)(v3 + 8 * v21);
      ++v2;
      if (!v22)
      {
        v2 = v21 + 1;
        if (v21 + 1 >= v31)
          goto LABEL_50;
        v22 = *(_QWORD *)(v3 + 8 * v2);
        if (!v22)
        {
          v2 = v21 + 2;
          if (v21 + 2 >= v31)
            goto LABEL_50;
          v22 = *(_QWORD *)(v3 + 8 * v2);
          if (!v22)
          {
            v2 = v21 + 3;
            if (v21 + 3 >= v31)
              goto LABEL_50;
            v22 = *(_QWORD *)(v3 + 8 * v2);
            if (!v22)
            {
              v23 = v21 + 4;
              if (v23 >= v31)
              {
LABEL_50:
                swift_release();
                return;
              }
              v22 = *(_QWORD *)(v3 + 8 * v23);
              if (!v22)
              {
                while (1)
                {
                  v2 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    break;
                  if (v2 >= v31)
                    goto LABEL_50;
                  v22 = *(_QWORD *)(v3 + 8 * v2);
                  ++v23;
                  if (v22)
                    goto LABEL_45;
                }
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
              v2 = v23;
            }
          }
        }
      }
LABEL_45:
      v6 = (v22 - 1) & v22;
    }
  }
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v2 = 0;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v2 << 6);
LABEL_23:
    sub_100066EC0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 17 * v9), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 17 * v9 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 48) + 17 * v9 + 16));
    v14 = v13;
    v16 = v15;
    v17 = _swiftEmptyArrayStorage[2];
    if (v17 >= _swiftEmptyArrayStorage[3] >> 1)
      sub_100058678();
    ++v7;
    _swiftEmptyArrayStorage[2] = v17 + 1;
    v18 = &_swiftEmptyArrayStorage[2 * v17];
    v18[4] = v14;
    v18[5] = v16;
    v3 = a1 + 56;
    if (v7 == v30)
      goto LABEL_28;
  }
  v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v10 >= v31)
    goto LABEL_53;
  v11 = *(_QWORD *)(v3 + 8 * v10);
  ++v2;
  if (v11)
    goto LABEL_22;
  v2 = v10 + 1;
  if (v10 + 1 >= v31)
    goto LABEL_54;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_22;
  v2 = v10 + 2;
  if (v10 + 2 >= v31)
    goto LABEL_58;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_22;
  v2 = v10 + 3;
  if (v10 + 3 >= v31)
    goto LABEL_59;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_23;
  }
  v12 = v10 + 4;
  if (v12 >= v31)
    goto LABEL_60;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_56;
    if (v2 >= v31)
      break;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
}

void sub_100061408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  _QWORD *v60;

  v1 = a1;
  v2 = sub_100062044(a1);
  v60 = _swiftEmptyArrayStorage;
  sub_100058678();
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v3 = v1;
    else
      v3 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for UniversalControlDevice(0);
    v6 = sub_100041014(&qword_1002AC880, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v59, v4, v5, v6);
    v1 = v59[0];
    v54 = v59[1];
    v9 = v59[2];
    v10 = v59[3];
    v11 = v59[4];
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_6;
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v30 = -1 << *(_BYTE *)(v1 + 32);
  v54 = v1 + 56;
  v31 = ~v30;
  v32 = -v30;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  else
    v33 = -1;
  v11 = v33 & *(_QWORD *)(v1 + 56);
  swift_bridgeObjectRetain();
  v9 = v31;
  v10 = 0;
  if (v2 < 0)
    goto LABEL_42;
LABEL_6:
  v8 = (char *)&type metadata for Swift.AnyObject;
  if (v2)
  {
    v12 = 0;
    v53 = (unint64_t)(v9 + 64) >> 6;
    v55 = v1;
    do
    {
      if (v12 == v2)
      {
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
        return;
      }
      if (v1 < 0)
      {
        v15 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
        if (!v15)
          goto LABEL_77;
        v16 = v15;
        v57 = v15;
        v17 = type metadata accessor for UniversalControlDevice(0);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v58, &v57, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
        v18 = v58;
        swift_unknownObjectRelease(v16);
      }
      else
      {
        if (v11)
        {
          v13 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
          v14 = v13 | (v10 << 6);
        }
        else
        {
          v19 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_75;
          if (v19 >= v53)
            goto LABEL_77;
          v20 = *(_QWORD *)(v54 + 8 * v19);
          v21 = v10 + 1;
          if (!v20)
          {
            v21 = v10 + 2;
            if (v10 + 2 >= v53)
              goto LABEL_77;
            v20 = *(_QWORD *)(v54 + 8 * v21);
            if (!v20)
            {
              v21 = v10 + 3;
              if (v10 + 3 >= v53)
                goto LABEL_77;
              v20 = *(_QWORD *)(v54 + 8 * v21);
              if (!v20)
              {
                v21 = v10 + 4;
                if (v10 + 4 >= v53)
                  goto LABEL_77;
                v20 = *(_QWORD *)(v54 + 8 * v21);
                if (!v20)
                {
                  v21 = v10 + 5;
                  if (v10 + 5 >= v53)
                    goto LABEL_77;
                  v20 = *(_QWORD *)(v54 + 8 * v21);
                  if (!v20)
                  {
                    v22 = v10 + 6;
                    do
                    {
                      if (v22 >= v53)
                        goto LABEL_77;
                      v20 = *(_QWORD *)(v54 + 8 * v22++);
                    }
                    while (!v20);
                    v21 = v22 - 1;
                  }
                }
              }
            }
          }
          v11 = (v20 - 1) & v20;
          v14 = __clz(__rbit64(v20)) + (v21 << 6);
          v10 = v21;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
        swift_retain();
      }
      if (!v18)
        goto LABEL_77;
      UniversalControlDevice.label.getter();
      v24 = v23;
      v26 = v25;
      swift_release();
      v27 = v60;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100058678();
        v27 = v60;
      }
      v28 = v27[2];
      if (v28 >= v27[3] >> 1)
      {
        sub_100058678();
        v27 = v60;
      }
      ++v12;
      v27[2] = v28 + 1;
      v29 = &v27[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      v1 = v55;
    }
    while (v12 != v2);
    v8 = (char *)&type metadata for Swift.AnyObject;
    goto LABEL_44;
  }
LABEL_43:
  v53 = (unint64_t)(v9 + 64) >> 6;
LABEL_44:
  v56 = v8 + 8;
  v34 = v1;
  if (v1 < 0)
    goto LABEL_47;
  while (1)
  {
    if (v11)
    {
      v35 = (v11 - 1) & v11;
      v36 = __clz(__rbit64(v11)) | (v10 << 6);
      v37 = v10;
      goto LABEL_66;
    }
    v42 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_76;
    if (v42 >= v53)
      goto LABEL_73;
    v43 = *(_QWORD *)(v54 + 8 * v42);
    v37 = v10 + 1;
    if (!v43)
    {
      v37 = v10 + 2;
      if (v10 + 2 >= v53)
        goto LABEL_73;
      v43 = *(_QWORD *)(v54 + 8 * v37);
      if (!v43)
      {
        v37 = v10 + 3;
        if (v10 + 3 >= v53)
          goto LABEL_73;
        v43 = *(_QWORD *)(v54 + 8 * v37);
        if (!v43)
        {
          v37 = v10 + 4;
          if (v10 + 4 >= v53)
            goto LABEL_73;
          v43 = *(_QWORD *)(v54 + 8 * v37);
          if (!v43)
          {
            v37 = v10 + 5;
            if (v10 + 5 >= v53)
              goto LABEL_73;
            v43 = *(_QWORD *)(v54 + 8 * v37);
            if (!v43)
              break;
          }
        }
      }
    }
LABEL_65:
    v35 = (v43 - 1) & v43;
    v36 = __clz(__rbit64(v43)) + (v37 << 6);
LABEL_66:
    v45 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v36);
    swift_retain();
    if (!v45)
      goto LABEL_73;
    while (1)
    {
      UniversalControlDevice.label.getter();
      v47 = v46;
      v49 = v48;
      swift_release();
      v50 = v60;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100058678();
        v50 = v60;
      }
      v51 = v50[2];
      if (v51 >= v50[3] >> 1)
      {
        sub_100058678();
        v50 = v60;
      }
      v50[2] = v51 + 1;
      v52 = &v50[2 * v51];
      v52[4] = v47;
      v52[5] = v49;
      v10 = v37;
      v11 = v35;
      v1 = v34;
      if ((v34 & 0x8000000000000000) == 0)
        break;
LABEL_47:
      v38 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
      if (v38)
      {
        v39 = v38;
        v57 = v38;
        v40 = type metadata accessor for UniversalControlDevice(0);
        swift_unknownObjectRetain(v39);
        swift_dynamicCast(&v58, &v57, v56, v40, 7);
        v41 = v58;
        swift_unknownObjectRelease(v39);
        v37 = v10;
        v35 = v11;
        if (v41)
          continue;
      }
      goto LABEL_73;
    }
  }
  v44 = v10 + 6;
  while (v44 < v53)
  {
    v43 = *(_QWORD *)(v54 + 8 * v44++);
    if (v43)
    {
      v37 = v44 - 1;
      goto LABEL_65;
    }
  }
LABEL_73:
  sub_10005E1F4(v1);
}

void _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  sub_10002626C();
  v1 = v0;
  v2 = sub_10000E440();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100065D2C();
  v4 = *(_QWORD *)(v1 + 16);
  v32 = _swiftEmptyArrayStorage;
  sub_10003B17C();
  if (v4)
  {
    sub_1000103C0();
    v31 = v1;
    v5 = v1 + 47;
    do
    {
      sub_100065DE8(*(unsigned __int8 *)(v5 - 15), *(unsigned __int8 *)(v5 - 14), *(unsigned __int8 *)(v5 - 13), *(unsigned __int8 *)(v5 - 12), *(unsigned __int8 *)(v5 - 11), *(unsigned __int8 *)(v5 - 10), *(unsigned __int8 *)(v5 - 9), *(unsigned __int8 *)(v5 - 8));
      v6 = sub_100043344();
      v8 = v7;
      sub_100065DDC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      sub_100065EA8();
      v12 = (v10 & v11) == 0;
      v13 = 7;
      if (!v12)
        v13 = 11;
      v14 = v13 | (v9 << 16);
      v15 = sub_100065F2C();
      String.index(_:offsetBy:limitedBy:)(v15, v16, v14, v6, v8);
      v17 = sub_100065F20();
      v19 = (_QWORD *)String.subscript.getter(v17, v18);
      v21 = v20;
      swift_bridgeObjectRelease(v8);
      v22 = static String._fromSubstring(_:)(v19);
      v24 = v23;
      swift_bridgeObjectRelease(v21);
      if ((sub_100065DF4() & 1) == 0)
      {
        sub_100065D00();
        v19 = v32;
      }
      v26 = v19[2];
      v25 = v19[3];
      if (v26 >= v25 >> 1)
      {
        sub_100065D6C(v25);
        sub_10003B148();
        v19 = v32;
      }
      v5 += 16;
      v19[2] = v26 + 1;
      v27 = &v19[2 * v26];
      v27[4] = v22;
      v27[5] = v24;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v19 = v32;
  }
  v32 = v19;
  sub_1000088D0();
  sub_100065EE0((uint64_t *)&v32, (uint64_t (*)(uint64_t))sub_10006CA94, (uint64_t (*)(_QWORD *))sub_100064058);
  if (v2)
  {
    sub_100065F0C();
    __break(1u);
  }
  else
  {
    sub_10000B348();
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v28 = sub_100065E78();
    sub_100065D1C(v28, v29, v30, v28);
    sub_100065D50();
    sub_100065DD0();
    sub_10000E568();
    sub_10003B1B8();
    sub_10000E4E0();
  }
}

uint64_t sub_100061BB4(uint64_t a1)
{
  return sub_100061BCC(a1, (uint64_t (*)(uint64_t, _BYTE *))sub_10006099C);
}

uint64_t sub_100061BC0(uint64_t a1)
{
  return sub_100061BCC(a1, (uint64_t (*)(uint64_t, _BYTE *))sub_100060D90);
}

uint64_t sub_100061BCC(uint64_t a1, uint64_t (*a2)(uint64_t, _BYTE *))
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;
  unint64_t v9;

  v8 = 91;
  v9 = 0xE100000000000000;
  v6 = a2(a1, v7);
  swift_bridgeObjectRetain(v6);
  sub_100063458(&v6, (uint64_t (*)(uint64_t))sub_10006CA94, (uint64_t (*)(_QWORD *))sub_100064058);
  sub_10000E410();
  sub_1000055B0((uint64_t *)&unk_1002AC160);
  v2 = sub_100065E78();
  sub_100065D1C(v2, v3, v4, v2);
  sub_100065D50();
  sub_100065DD0();
  sub_10000E568();
  sub_10003B1B8();
  return v8;
}

uint64_t sub_100061C88(uint64_t a1)
{
  return sub_100061BCC(a1, (uint64_t (*)(uint64_t, _BYTE *))sub_100061080);
}

void sub_100061C94()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v55 = v4;
  v6 = v5;
  v7 = sub_10000E440();
  v57 = *(_QWORD *)(v7 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_100065D2C();
  v9 = v1 >> 1;
  v56 = v3;
  v10 = __OFSUB__(v1 >> 1, v3);
  v11 = (v1 >> 1) - v3;
  if (v10)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v58 = _swiftEmptyArrayStorage;
  sub_10003B17C();
  if (v11 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v54 = v6;
  if (v11)
  {
    swift_unknownObjectRetain(v6);
    v12 = v56;
    v13 = (unsigned __int8 *)(v55 + 16 * v56 + 7);
    while (v9 != v12)
    {
      if (v12 >= v9)
        goto LABEL_29;
      sub_100065DE8(*(v13 - 7), *(v13 - 6), *(v13 - 5), *(v13 - 4), *(v13 - 3), *(v13 - 2), *(v13 - 1), *v13);
      v14 = sub_100043344();
      v16 = v15;
      sub_100065DDC(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
      sub_100065EA8();
      v17 = sub_100065ECC();
      String.index(_:offsetBy:limitedBy:)(v17, v18, v19, v14, v16);
      v20 = sub_100065F20();
      v22 = (_QWORD *)String.subscript.getter(v20, v21);
      swift_bridgeObjectRelease();
      sub_100065E28();
      v24 = static String._fromSubstring(_:)(v23);
      v26 = v25;
      swift_bridgeObjectRelease();
      if ((sub_100065DF4() & 1) == 0)
      {
        sub_100065D00();
        v22 = v58;
      }
      v28 = v22[2];
      v27 = v22[3];
      if (v28 >= v27 >> 1)
      {
        sub_100065D6C(v27);
        sub_10003B148();
        v22 = v58;
      }
      ++v12;
      v22[2] = v28 + 1;
      v29 = &v22[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      v13 += 16;
      if (v9 == v12)
        goto LABEL_14;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v22 = v58;
  swift_unknownObjectRetain(v6);
  v12 = v56;
LABEL_14:
  v30 = v9 - v12;
  if (v9 != v12)
  {
    if (v9 <= v12)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v12 < v56)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v34 = (unsigned __int8 *)(v55 + 16 * v12 + 7);
    do
    {
      sub_100065DE8(*(v34 - 7), *(v34 - 6), *(v34 - 5), *(v34 - 4), *(v34 - 3), *(v34 - 2), *(v34 - 1), *v34);
      v35 = sub_100043344();
      v37 = v36;
      sub_100065DDC(*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
      sub_100065EA8();
      v41 = (v39 & v40) == 0;
      v42 = 7;
      if (!v41)
        v42 = 11;
      v43 = v42 | (v38 << 16);
      v44 = sub_100065F2C();
      String.index(_:offsetBy:limitedBy:)(v44, v45, v43, v35, v37);
      v46 = sub_100065F20();
      v22 = (_QWORD *)String.subscript.getter(v46, v47);
      swift_bridgeObjectRelease();
      v48 = static String._fromSubstring(_:)(v22);
      v50 = v49;
      swift_bridgeObjectRelease();
      if ((sub_100065DF4() & 1) == 0)
      {
        sub_100065D00();
        v22 = v58;
      }
      v52 = v22[2];
      v51 = v22[3];
      if (v52 >= v51 >> 1)
      {
        sub_100065D6C(v51);
        sub_10003B148();
        v22 = v58;
      }
      v34 += 16;
      v22[2] = v52 + 1;
      v53 = &v22[2 * v52];
      v53[4] = v48;
      v53[5] = v50;
      --v30;
    }
    while (v30);
  }
  swift_unknownObjectRelease(v54);
  v58 = v22;
  sub_1000088D0();
  sub_100065EE0((uint64_t *)&v58, (uint64_t (*)(uint64_t))sub_10006CA94, (uint64_t (*)(_QWORD *))sub_100064058);
  if (!v7)
  {
    sub_10000B348();
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v31 = sub_100065E78();
    sub_100065D1C(v31, v32, v33, v31);
    sub_100065D50();
    sub_100065DD0();
    sub_10000E568();
    sub_10003B1B8();
    sub_10000E4E0();
    return;
  }
LABEL_34:
  sub_100065F0C();
  __break(1u);
}

uint64_t sub_100062038(uint64_t a1)
{
  return sub_100061BCC(a1, (uint64_t (*)(uint64_t, _BYTE *))sub_100061408);
}

uint64_t sub_100062044(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(_QWORD *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaSet.count.getter(a1);
}

void sub_100062064(char a1, CGFloat a2, CGFloat a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double Height;
  uint64_t v29;
  uint64_t v30;
  double Width;
  double v32;
  double v33;
  double d;
  CGFloat ty;
  CGFloat tx;
  CGFloat c;
  CGFloat b;
  double a;
  uint64_t v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  _QWORD v43[7];
  CGPoint v44;
  CGRect v45;
  CGRect v46;

  sub_1000055B0((uint64_t *)&unk_1002B3320);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1000268BC();
  v9 = v7 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - v11;
  v13 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000268BC();
  v17 = v15 - v16;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v40 - v20;
  dispatch thunk of UniversalControlDisplay.orientation.getter(v19);
  v22 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v13);
  if ((_DWORD)v22 == 1)
  {
    static UniversalControlDisplay.Orientation.up.getter(v22);
    v23 = sub_1000077EC((uint64_t)v12);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v21, v12, v13);
  }
  static UniversalControlDisplay.Orientation.left.getter(v23);
  sub_100041014((unint64_t *)&qword_1002A8E40, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay.Orientation, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay.Orientation);
  v24 = sub_100065D94();
  v25 = sub_100065DC8(v17);
  if ((v24 & 1) != 0)
  {
    v26 = sub_100065DC8((uint64_t)v21);
LABEL_7:
    v45.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v26);
    Height = CGRectGetHeight(v45);
    v46.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v29);
    Width = CGRectGetWidth(v46);
    goto LABEL_9;
  }
  static UniversalControlDisplay.Orientation.right.getter(v25);
  v27 = sub_100065D94();
  sub_100065DC8(v17);
  v26 = sub_100065DC8((uint64_t)v21);
  if ((v27 & 1) != 0)
    goto LABEL_7;
  dispatch thunk of UniversalControlDisplay.screenRect.getter(v26);
  Height = v32;
  Width = v33;
LABEL_9:
  dispatch thunk of UniversalControlDisplay.orientation.getter(v30);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v9, 1, v13))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v9, v13);
    sub_1000077EC(v9);
    sub_1000626EC((uint64_t)v43, Height, Width);
    sub_100065DC8(v17);
    a = *(double *)v43;
    b = *(double *)&v43[1];
    c = *(double *)&v43[2];
    d = *(double *)&v43[3];
    tx = *(double *)&v43[4];
    ty = *(double *)&v43[5];
    if ((a1 & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  sub_1000077EC(v9);
  d = 1.0;
  ty = 0.0;
  tx = 0.0;
  c = 0.0;
  b = 0.0;
  a = 1.0;
  if ((a1 & 1) != 0)
  {
LABEL_11:
    v42.a = a;
    v42.b = b;
    v42.c = c;
    v42.d = d;
    v42.tx = tx;
    v42.ty = ty;
    CGAffineTransformInvert(&v41, &v42);
    a = v41.a;
    b = v41.b;
    c = v41.c;
    d = v41.d;
    tx = v41.tx;
    ty = v41.ty;
  }
LABEL_12:
  v42.a = a;
  v42.b = b;
  v42.c = c;
  v42.d = d;
  v42.tx = tx;
  v42.ty = ty;
  v44.x = a2;
  v44.y = a3;
  CGPointApplyAffineTransform(v44, &v42);
}

uint64_t sub_100062318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10002626C();
  v12 = v0;
  v13 = v1;
  v3 = v2;
  type metadata accessor for UTType(0);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, &v11, 0, 0);
  type metadata accessor for P2PDevice.Properties(0);
  P2PDevice.deviceModel.getter();
  swift_bridgeObjectRetain();
  P2PDevice.typeIdentifier.getter(v7);
  sub_100065E28();
  v9 = ((uint64_t (*)(uint64_t))dispatch thunk of UniversalControlDevice.__allocating_init(id:displayName:displays:inputDevices:model:typeIdentifier:))(v8);
  swift_release();
  return v9;
}

uint64_t sub_100062418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = dispatch thunk of UniversalControlDevice.displays.getter();
  if ((unint64_t)v0 >> 62)
    goto LABEL_18;
  v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000103C0();
  if (v1)
  {
    while (1)
    {
      if ((v0 & 0xC000000000000001) != 0)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
        v2 = v3;
      }
      else
      {
        v2 = *(_QWORD *)(v0 + 32);
        v3 = sub_1000088D0();
      }
      if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v3) & 1) != 0)
        break;
      sub_10000B348();
      if (v1 != 1)
      {
        v4 = 5;
        while (1)
        {
          if ((v0 & 0xC000000000000001) != 0)
          {
            v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v0);
            v2 = v5;
          }
          else
          {
            v2 = *(_QWORD *)(v0 + 8 * v4);
            v5 = sub_1000088D0();
          }
          v6 = v4 - 3;
          if (__OFADD__(v4 - 4, 1))
            break;
          if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v5) & 1) != 0)
            goto LABEL_6;
          sub_10000B348();
          ++v4;
          if (v6 == v1)
            goto LABEL_15;
        }
        __break(1u);
LABEL_18:
        v8 = v0 < 0 ? v0 : v0 & 0xFFFFFFFFFFFFFF8;
        sub_1000103C0();
        v1 = _CocoaArrayWrapper.endIndex.getter(v8);
        if (v1)
          continue;
      }
      goto LABEL_15;
    }
LABEL_6:
    sub_100065F14();
  }
  else
  {
LABEL_15:
    sub_100065F14();
    return 0;
  }
  return v2;
}

uint64_t sub_10006251C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  sub_10002626C();
  v0 = sub_10000E440();
  v27 = *(_QWORD *)(v0 - 8);
  v29 = v0;
  sub_1000262EC();
  __chkstk_darwin(v1);
  sub_10002641C();
  v4 = v3 - v2;
  v5 = UUID.init(uuid:)(0, 0, 0, 0, 0, 0);
  v7 = UUID.uuid.getter(v5, v6);
  v8 = UniversalControlUUID.init(rawValue:)(v7, v7 >> 8, v7 >> 16, v7 >> 24, HIDWORD(v7), v7 >> 40, HIWORD(v7), HIBYTE(v7));
  v9 = v8;
  v11 = v10;
  v12 = v8 >> 8;
  v13 = v8 >> 16;
  v14 = v8 >> 24;
  v15 = HIDWORD(v8);
  v16 = v8 >> 40;
  v17 = HIWORD(v8);
  v18 = HIBYTE(v8);
  v21 = v10 >> 8;
  v22 = v10 >> 16;
  v23 = v10 >> 24;
  v24 = HIDWORD(v10);
  v25 = v10 >> 40;
  v26 = HIWORD(v10);
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  v28 = HIBYTE(v10);
  result = v19(v4, v29);
  LOBYTE(xmmword_1002B6E88) = v9;
  BYTE1(xmmword_1002B6E88) = v12;
  BYTE2(xmmword_1002B6E88) = v13;
  BYTE3(xmmword_1002B6E88) = v14;
  BYTE4(xmmword_1002B6E88) = v15;
  BYTE5(xmmword_1002B6E88) = v16;
  BYTE6(xmmword_1002B6E88) = v17;
  BYTE7(xmmword_1002B6E88) = v18;
  BYTE8(xmmword_1002B6E88) = v11;
  BYTE9(xmmword_1002B6E88) = v21;
  BYTE10(xmmword_1002B6E88) = v22;
  BYTE11(xmmword_1002B6E88) = v23;
  BYTE12(xmmword_1002B6E88) = v24;
  BYTE13(xmmword_1002B6E88) = v25;
  BYTE14(xmmword_1002B6E88) = v26;
  HIBYTE(xmmword_1002B6E88) = v28;
  return result;
}

uint64_t sub_1000626EC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  double v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  uint64_t v29;

  v4 = v3;
  v8 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000268BC();
  v12 = v10 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - v14;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v29 - v14, v4, v8);
  static UniversalControlDisplay.Orientation.up.getter(v16);
  sub_100041014((unint64_t *)&qword_1002A8E40, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay.Orientation, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay.Orientation);
  v17 = sub_100065CEC();
  v18 = sub_100065D14(v12);
  if ((v17 & 1) != 0)
  {
    result = sub_100065D14((uint64_t)v15);
    v20 = xmmword_10021AC20;
    v21 = 0.0;
    a3 = 0.0;
    a2 = 0.0;
  }
  else
  {
    static UniversalControlDisplay.Orientation.left.getter(v18);
    v22 = sub_100065CEC();
    v23 = sub_100065D14(v12);
    if ((v22 & 1) != 0)
    {
      result = sub_100065D14((uint64_t)v15);
      v20 = xmmword_10021AC00;
      a3 = 0.0;
      v21 = 1.0;
    }
    else
    {
      static UniversalControlDisplay.Orientation.right.getter(v23);
      v24 = sub_100065CEC();
      v25 = sub_100065D14(v12);
      if ((v24 & 1) != 0)
      {
        result = sub_100065D14((uint64_t)v15);
        v20 = xmmword_10021AC10;
        a2 = 0.0;
        v21 = -1.0;
      }
      else
      {
        static UniversalControlDisplay.Orientation.down.getter(v25);
        v26 = sub_100065CEC();
        sub_100065D14(v12);
        result = sub_100065D14((uint64_t)v15);
        if ((v26 & 1) != 0)
          v27 = -1.0;
        else
          v27 = 1.0;
        v21 = 0.0;
        if ((v26 & 1) != 0)
          v28 = a2;
        else
          v28 = 0.0;
        if ((v26 & 1) != 0)
          a2 = a3;
        else
          a2 = 0.0;
        v20 = *(unint64_t *)&v27;
        a3 = v28;
      }
    }
  }
  *(_OWORD *)a1 = v20;
  *(double *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v20;
  *(double *)(a1 + 32) = a3;
  *(double *)(a1 + 40) = a2;
  return result;
}

void Optional<A>.label.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = *(_QWORD *)(a1 + 16);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v6, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  sub_10002644C();
}

void sub_10006299C(uint64_t a1, uint64_t a2)
{
  Optional<A>.label.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1000629A4()
{
  _QWORD *v0;

  return UniversalControlDeviceID.label.getter(*v0, v0[1]);
}

void UniversalControlDevice.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v0 = sub_10000E440();
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10002641C();
  v4 = v3 - v2;
  dispatch thunk of UniversalControlDevice.id.getter(v5);
  sub_100065C50();
  v14 = UUID.init(uuid:)(v6, v13, v7, v8, v9, v10, v11, v12);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  v18 = sub_1000599D0(8, v15, v17);
  static String._fromSubstring(_:)(v18);
  sub_10000E410();
  sub_10002644C();
}

void sub_100062A5C()
{
  UniversalControlDevice.label.getter();
}

uint64_t sub_100062A80()
{
  _QWORD *v0;

  return Array<A>.label.getter(*v0);
}

void VectorClock<>.label.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  Swift::String v48;
  Swift::String v49;

  sub_10002626C();
  v44 = *(_QWORD *)(sub_10000E440() - 8);
  sub_1000262EC();
  __chkstk_darwin(v1);
  sub_100065E48();
  swift_bridgeObjectRetain_n(*v0, 2);
  sub_100057E00();
  v3 = v2;
  sub_10000E420();
  v45 = v3;
  sub_100065EE0(&v45, (uint64_t (*)(uint64_t))sub_10006CAC4, (uint64_t (*)(_QWORD *))sub_1000646BC);
  if (v3)
  {
    swift_release();
    __break(1u);
  }
  else
  {
    sub_10000E420();
    v4 = v45;
    v5 = *(_QWORD *)(v45 + 16);
    if (v5)
    {
      v47 = _swiftEmptyArrayStorage;
      sub_10003B17C();
      v6 = v4 + 48;
      do
      {
        v7 = *(unsigned __int8 *)(v6 - 11);
        v8 = *(unsigned __int8 *)(v6 - 12);
        v9 = *(unsigned __int8 *)(v6 - 13);
        v10 = *(unsigned __int8 *)(v6 - 14);
        v11 = *(unsigned __int8 *)(v6 - 15);
        v12 = *(unsigned __int8 *)(v6 - 16);
        v45 = 0;
        v46 = 0xE000000000000000;
        v13 = UUID.init(uuid:)(v12, v11, v10, v9, v8, v7);
        v14 = UUID.uuidString.getter(v13);
        v16 = v15;
        sub_100065E18(v44);
        sub_100065EA8();
        v20 = (v18 & v19) == 0;
        v21 = 7;
        if (!v20)
          v21 = 11;
        v22 = v21 | (v17 << 16);
        v23 = sub_100065F2C();
        String.index(_:offsetBy:limitedBy:)(v23, v24, v22, v14, v16);
        v25 = sub_100065F20();
        v27 = String.subscript.getter(v25, v26);
        sub_10000E568();
        v28 = static String._fromSubstring(_:)(v27);
        v30 = v29;
        sub_10000E594();
        swift_bridgeObjectRelease();
        v45 = v28;
        v46 = v30;
        v31._countAndFlagsBits = 8250;
        v31._object = (void *)0xE200000000000000;
        String.append(_:)(v31);
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        sub_100065F00(v48);
        sub_10000E410();
        v32 = v45;
        v4 = v46;
        v33 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_10003B148();
          v33 = v47;
        }
        v34 = v33[2];
        if (v34 >= v33[3] >> 1)
        {
          sub_10003B148();
          v33 = v47;
        }
        v6 += 24;
        v33[2] = v34 + 1;
        v35 = &v33[2 * v34];
        v35[4] = v32;
        v35[5] = v4;
        --v5;
      }
      while (v5);
      swift_release();
    }
    else
    {
      swift_release();
      v33 = _swiftEmptyArrayStorage;
    }
    v45 = (uint64_t)v33;
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v36 = sub_100065E78();
    BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v4, v36);
    sub_10000E568();
    v37 = sub_100065EB4();
    v39 = v38;
    swift_bridgeObjectRelease();
    v40 = HIBYTE(v39) & 0xF;
    if ((v39 & 0x2000000000000000) == 0)
      v40 = v37 & 0xFFFFFFFFFFFFLL;
    v45 = 91;
    v46 = 0xE100000000000000;
    if (v40)
    {
      v49._countAndFlagsBits = sub_100065EB4();
      sub_100065F00(v49);
      sub_10000E410();
      v41._countAndFlagsBits = 5972026;
      v41._object = (void *)0xE300000000000000;
      String.append(_:)(v41);
      sub_100065E0C();
      sub_10000E594();
      v42 = 23901;
      v43 = 0xE200000000000000;
    }
    else
    {
      sub_100065E0C();
      sub_10000E594();
      v42 = 93;
      v43 = 0xE100000000000000;
    }
    String.append(_:)(*(Swift::String *)&v42);
    sub_10000E4E0();
  }
}

void sub_100062DE8()
{
  VectorClock<>.label.getter();
}

uint64_t sub_100062DF4(uint64_t a1, uint64_t a2)
{
  return VectorClock<>.description.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_100062DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065B34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065B34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CodableVoid.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = sub_1000055B0(&qword_1002AC3E0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10002641C();
  v6 = v5 - v4;
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_100065B34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CodableVoid.CodingKeys, &type metadata for CodableVoid.CodingKeys, v9, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Int CodableVoid.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  return Hasher._finalize()();
}

uint64_t CodableVoid.init(from:)(_QWORD *a1)
{
  return sub_100005988(a1);
}

uint64_t sub_100062F60(_QWORD *a1)
{
  return CodableVoid.init(from:)(a1);
}

uint64_t sub_100062F74(_QWORD *a1)
{
  return CodableVoid.encode(to:)(a1);
}

Swift::Int sub_100062F8C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  return Hasher._finalize()();
}

void UniversalControlConfiguration.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  sub_10002626C();
  v1 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v42 = *(_QWORD *)(v1 - 8);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_100065E48();
  v3 = sub_10000E440();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10002641C();
  v7 = v6 - v5;
  v43 = (_QWORD *)UniversalControlConfiguration.links()(v8);
  swift_bridgeObjectRetain(v43);
  sub_100063390(&v43);
  sub_10000E410();
  v9 = v43;
  v10 = v43[2];
  if (v10)
  {
    v38 = v7;
    v39 = v4;
    v43 = _swiftEmptyArrayStorage;
    sub_10003B17C();
    v11 = (char *)v9 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    v40 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 16);
    v41 = *(_QWORD *)(v42 + 72);
    do
    {
      v12 = v40(v0, v11, v1);
      v13 = UniversalControlConfiguration.GradedLink.description.getter(v12);
      v15 = v14;
      sub_100065E18(v42);
      v16 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_100065D00();
        v16 = v43;
      }
      v18 = v16[2];
      v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        sub_100065D6C(v17);
        sub_10003B148();
        v16 = v43;
      }
      v16[2] = v18 + 1;
      v19 = &v16[2 * v18];
      v19[4] = v13;
      v19[5] = v15;
      v11 += v41;
      --v10;
    }
    while (v10);
    swift_release();
    v4 = v39;
    v7 = v38;
  }
  else
  {
    swift_release();
    v16 = _swiftEmptyArrayStorage;
  }
  v43 = v16;
  v20 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v21 = sub_100065AF0();
  BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v20, v21);
  v22 = swift_bridgeObjectRelease(v16);
  v43 = 0;
  v44 = 0xE000000000000000;
  UniversalControlConfiguration.id.getter(v22);
  sub_100065C50();
  v29 = UUID.init(uuid:)(v23, v28, v24, v25, v26, v27);
  v30 = UUID.uuidString.getter(v29);
  v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  v33 = sub_1000599D0(8, v30, v32);
  v34 = static String._fromSubstring(_:)(v33);
  v36 = v35;
  sub_10000E410();
  swift_bridgeObjectRelease(v44);
  v43 = (_QWORD *)v34;
  v44 = v36;
  v37._countAndFlagsBits = 23354;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  sub_100065E0C();
  sub_10000E594();
  sub_10003B1B8();
  sub_10000E4E0();
}

uint64_t UniversalControlDisplayLayout.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13[2];

  v0 = UniversalControlDisplayLayout.displayFrames.getter();
  sub_100060780(v0);
  v2 = v1;
  sub_10000E568();
  v13[0] = v2;
  swift_bridgeObjectRetain(v2);
  sub_100063458(v13, (uint64_t (*)(uint64_t))sub_10006CA94, (uint64_t (*)(_QWORD *))sub_100064058);
  sub_10000E420();
  v3 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v4 = sub_100065AF0();
  v5 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v3, v4);
  v7 = v6;
  swift_release();
  v13[0] = 91;
  v13[1] = 0xE100000000000000;
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 1982356777;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  UniversalControlDisplayLayout.version.getter();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v10);
  sub_10000E410();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v13[0];
}

void sub_100063390(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for UniversalControlConfiguration.GradedLink(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CA64();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1000634D0((unint64_t)v6);
  *a1 = v3;
}

uint64_t sub_100063410(uint64_t *a1)
{
  return sub_100063458(a1, (uint64_t (*)(uint64_t))sub_10006CA94, (uint64_t (*)(_QWORD *))sub_100064058);
}

uint64_t sub_100063434(uint64_t *a1)
{
  return sub_100063458(a1, (uint64_t (*)(uint64_t))sub_10006CAC4, (uint64_t (*)(_QWORD *))sub_1000646BC);
}

uint64_t sub_100063458(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

void sub_1000634D0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  _QWORD *v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  char *v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  Swift::Int v77;
  char *v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  Swift::Int v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  Swift::Int *v110;
  Swift::Int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  char v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Swift::Int v172;
  uint64_t v173;
  uint64_t v174;
  Swift::Int v175;
  _QWORD *v176;
  char *v177;
  Swift::Int v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  void (*v184)(char *, uint64_t);
  uint64_t (*v185)(char *, uint64_t, uint64_t);
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  Swift::Int v191;
  char *v192;
  char *v193;
  Swift::Int v194;
  uint64_t v195;
  void (*v196)(char *, char *, uint64_t);
  char *v197;
  _QWORD *v198;

  v2 = v1;
  v189 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v182 = *(_QWORD *)(v189 - 8);
  v4 = __chkstk_darwin(v189);
  v188 = (char *)&v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v187 = (char *)&v169 - v6;
  v7 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v198 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v177 = (char *)&v169 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v192 = (char *)&v169 - v11;
  v12 = __chkstk_darwin(v10);
  v186 = (char *)&v169 - v13;
  __chkstk_darwin(v12);
  v197 = (char *)&v169 - v14;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = _minimumMergeRunLength(_:)(v15);
  if (v16 >= v15)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15)
        sub_100064DC4(0, v15, 1, (_QWORD *)a1);
      return;
    }
    goto LABEL_142;
  }
  v172 = v16;
  sub_1000211E0(v15 / 2);
  v170 = v17;
  v179 = v18;
  v171 = v15;
  if (v15 <= 0)
  {
LABEL_105:
    v20 = _swiftEmptyArrayStorage;
    v108 = _swiftEmptyArrayStorage[2];
LABEL_106:
    if (v108 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease(v20);
      if (v171 >= -1)
        goto LABEL_118;
      goto LABEL_146;
    }
    v160 = *(_QWORD *)a1;
    while (1)
    {
      v161 = v108 - 2;
      if (v108 < 2)
        break;
      if (!v160)
        goto LABEL_150;
      v162 = v20;
      v163 = v20[2 * v161 + 4];
      v164 = v20[2 * v108 + 3];
      sub_10006525C(v160 + v198[9] * v163, v160 + v198[9] * v20[2 * v108 + 2], v160 + v198[9] * v164, v179);
      if (v2)
      {
        v159 = v162;
        goto LABEL_103;
      }
      if (v164 < v163)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native(v162) & 1) == 0)
      {
        sub_10006CA50();
        v162 = v167;
      }
      if (v161 >= v162[2])
        goto LABEL_138;
      v165 = &v162[2 * v161 + 4];
      *v165 = v163;
      v165[1] = v164;
      v166 = v162[2];
      if (v108 > v166)
        goto LABEL_139;
      memmove(&v162[2 * v108 + 2], &v162[2 * v108 + 4], 16 * (v166 - v108));
      v20 = v162;
      v162[2] = v166 - 1;
      v108 = v166 - 1;
      if (v166 <= 2)
        goto LABEL_117;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    return;
  }
  v19 = 0;
  v20 = _swiftEmptyArrayStorage;
  v180 = (_QWORD *)a1;
  v190 = v7;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    v176 = v20;
    v178 = v19;
    if (v19 + 1 >= v15)
    {
      v45 = v19 + 1;
    }
    else
    {
      v173 = v2;
      v174 = *(_QWORD *)a1;
      v23 = v174;
      v24 = v198[9];
      v194 = v15;
      v195 = v24;
      v25 = (void (*)(void))v198[2];
      v25();
      v26 = v186;
      v185 = (uint64_t (*)(char *, uint64_t, uint64_t))v25;
      v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v186, v23 + v24 * v21, v190);
      v28 = v187;
      v29 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v27);
      v30 = UniversalControlLink.Endpoint.device.getter(v29);
      v196 = v31;
      v32 = *(uint64_t (**)(char *, uint64_t))(v182 + 8);
      v33 = v189;
      v34 = v32(v28, v189);
      v35 = v188;
      v36 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v34);
      v37 = UniversalControlLink.Endpoint.device.getter(v36);
      v39 = v38;
      v40 = v33;
      v21 = v178;
      v184 = (void (*)(char *, uint64_t))v32;
      v32(v35, v40);
      LODWORD(v193) = static UniversalControlDeviceID.< infix(_:_:)(v30, v196, v37, v39);
      v41 = (void (*)(char *, uint64_t))v198[1];
      v7 = v190;
      v42 = v26;
      v43 = v174;
      v41(v42, v190);
      v15 = v194;
      v183 = (char *)v41;
      v41(v197, v7);
      v44 = v195;
      v45 = v21 + 2;
      if (v21 + 2 >= v15)
      {
        v2 = v173;
      }
      else
      {
        v181 = v195 * v22;
        v175 = v195 * v45;
        while (1)
        {
          v191 = v45;
          v46 = v197;
          v47 = v185;
          v185(v197, v43 + v175, v7);
          v48 = v186;
          v49 = v47(v186, v43 + v181, v7);
          v50 = v187;
          v51 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v49);
          v196 = (void (*)(char *, char *, uint64_t))UniversalControlLink.Endpoint.device.getter(v51);
          v53 = v52;
          v54 = v189;
          v55 = v184;
          v56 = ((uint64_t (*)(char *, uint64_t))v184)(v50, v189);
          v57 = v188;
          v58 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v56);
          v59 = UniversalControlLink.Endpoint.device.getter(v58);
          v61 = v60;
          v62 = v57;
          v7 = v190;
          v55(v62, v54);
          LODWORD(v59) = static UniversalControlDeviceID.< infix(_:_:)(v196, v53, v59, v61);
          v63 = v48;
          v64 = (void (*)(char *, uint64_t))v183;
          ((void (*)(char *, uint64_t))v183)(v63, v7);
          v64(v46, v7);
          if (((v193 ^ v59) & 1) != 0)
            break;
          v45 = v191 + 1;
          v15 = v194;
          v44 = v195;
          v43 += v195;
          if (v191 + 1 >= v194)
          {
            v45 = v194;
            v2 = v173;
            a1 = (unint64_t)v180;
            v21 = v178;
            goto LABEL_13;
          }
        }
        v2 = v173;
        a1 = (unint64_t)v180;
        v45 = v191;
        v21 = v178;
        v15 = v194;
        v44 = v195;
      }
LABEL_13:
      v20 = v176;
      if ((v193 & 1) != 0)
      {
        if (v45 < v21)
          goto LABEL_143;
        if (v21 < v45)
        {
          v65 = 0;
          v66 = v44 * (v45 - 1);
          v67 = v45 * v44;
          v68 = v21;
          v69 = v21 * v44;
          v191 = v45;
          do
          {
            if (v68 != v45 + v65 - 1)
            {
              v70 = v174;
              if (!v174)
                goto LABEL_149;
              v71 = v2;
              v72 = v174 + v69;
              v193 = (char *)(v174 + v66);
              v73 = v190;
              v196 = (void (*)(char *, char *, uint64_t))v198[4];
              ((void (*)(char *, uint64_t, uint64_t, _QWORD *))v196)(v177, v174 + v69, v190, v20);
              if (v69 < v66 || v72 >= v70 + v67)
              {
                v75 = v70 + v69;
                v76 = v193;
                swift_arrayInitWithTakeFrontToBack(v75, v193, 1, v73);
              }
              else
              {
                v76 = v193;
                if (v69 != v66)
                  swift_arrayInitWithTakeBackToFront(v72, v193, 1, v73);
              }
              v196(v76, v177, v73);
              v20 = v176;
              a1 = (unint64_t)v180;
              v2 = v71;
              v45 = v191;
              v44 = v195;
            }
            ++v68;
            --v65;
            v66 -= v44;
            v67 -= v44;
            v69 += v44;
          }
          while (v68 < v45 + v65);
          v7 = v190;
          v21 = v178;
          v15 = v194;
        }
      }
    }
    if (v45 < v15)
    {
      if (__OFSUB__(v45, v21))
        goto LABEL_141;
      if (v45 - v21 < v172)
      {
        if (__OFADD__(v21, v172))
          goto LABEL_144;
        if (v21 + v172 >= v15)
          v77 = v15;
        else
          v77 = v21 + v172;
        if (v77 < v21)
          goto LABEL_145;
        if (v45 != v77)
        {
          v173 = v2;
          v78 = (char *)v198[9];
          v181 = v198[2];
          v79 = (_QWORD)v78 * (v45 - 1);
          v183 = v78;
          v80 = v45 * (_QWORD)v78;
          v175 = v77;
          do
          {
            v81 = 0;
            v191 = v45;
            v184 = (void (*)(char *, uint64_t))v80;
            v185 = (uint64_t (*)(char *, uint64_t, uint64_t))v79;
            while (1)
            {
              v194 = v21;
              v82 = *(_QWORD *)a1;
              v193 = (char *)(v80 + v81);
              v83 = (uint64_t (*)(char *, uint64_t, uint64_t))v181;
              ((void (*)(void))v181)();
              v84 = v79 + v81 + v82;
              v85 = v186;
              v86 = v83(v186, v84, v7);
              v87 = v187;
              v88 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v86);
              v89 = UniversalControlLink.Endpoint.device.getter(v88);
              v195 = v90;
              v196 = (void (*)(char *, char *, uint64_t))v89;
              v91 = *(uint64_t (**)(char *, uint64_t))(v182 + 8);
              v92 = v189;
              v93 = v91(v87, v189);
              v94 = v188;
              v95 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v93);
              v96 = UniversalControlLink.Endpoint.device.getter(v95);
              v98 = v97;
              v99 = v94;
              v7 = v190;
              v91(v99, v92);
              LOBYTE(v96) = static UniversalControlDeviceID.< infix(_:_:)(v196, v195, v96, v98);
              v100 = (void (*)(char *, uint64_t))v198[1];
              v100(v85, v7);
              v100(v197, v7);
              if ((v96 & 1) == 0)
                break;
              v101 = *(_QWORD *)a1;
              if (!*(_QWORD *)a1)
                goto LABEL_147;
              v80 = (Swift::Int)v184;
              v79 = (uint64_t)v185;
              v102 = (char *)v184 + v101 + v81;
              v103 = (char *)v185 + v101 + v81;
              v104 = (void (*)(char *, char *, uint64_t))v198[4];
              v104(v192, v102, v7);
              swift_arrayInitWithTakeFrontToBack(v102, v103, 1, v7);
              v104(v103, v192, v7);
              v81 -= (uint64_t)v183;
              v21 = v194 + 1;
              v105 = v191;
              if (v191 == v194 + 1)
                goto LABEL_46;
            }
            v105 = v191;
            v80 = (Swift::Int)v184;
            v79 = (uint64_t)v185;
LABEL_46:
            v45 = v105 + 1;
            v79 += (uint64_t)v183;
            v80 += (Swift::Int)v183;
            v21 = v178;
          }
          while (v45 != v175);
          v45 = v175;
          v2 = v173;
          v20 = v176;
        }
      }
    }
    if (v45 < v21)
      goto LABEL_140;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v191 = v45;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v20 = v176;
    }
    else
    {
      sub_10006C984();
      v20 = v157;
    }
    v107 = v20[2];
    v108 = v107 + 1;
    if (v107 >= v20[3] >> 1)
    {
      sub_10006C984();
      v20 = v158;
    }
    v20[2] = v108;
    v109 = v20 + 4;
    v110 = &v20[2 * v107 + 4];
    v111 = v191;
    *v110 = v178;
    v110[1] = v111;
    if (v107)
      break;
    v108 = 1;
LABEL_96:
    a1 = (unint64_t)v180;
    v15 = v180[1];
    v19 = v191;
    if (v191 >= v15)
      goto LABEL_106;
  }
  while (1)
  {
    a1 = v108 - 1;
    if (v108 >= 4)
    {
      v116 = &v109[2 * v108];
      v117 = *(v116 - 8);
      v118 = *(v116 - 7);
      v122 = __OFSUB__(v118, v117);
      v119 = v118 - v117;
      if (v122)
        goto LABEL_125;
      v121 = *(v116 - 6);
      v120 = *(v116 - 5);
      v122 = __OFSUB__(v120, v121);
      v114 = v120 - v121;
      v115 = v122;
      if (v122)
        goto LABEL_126;
      v123 = (_QWORD *)(v108 - 2);
      v124 = &v109[2 * v108 - 4];
      v126 = *v124;
      v125 = v124[1];
      v122 = __OFSUB__(v125, v126);
      v127 = v125 - v126;
      if (v122)
        goto LABEL_127;
      v122 = __OFADD__(v114, v127);
      v128 = v114 + v127;
      if (v122)
        goto LABEL_129;
      if (v128 >= v119)
      {
        v146 = &v109[2 * a1];
        v148 = *v146;
        v147 = v146[1];
        v122 = __OFSUB__(v147, v148);
        v149 = v147 - v148;
        if (v122)
          goto LABEL_135;
        v139 = v114 < v149;
        goto LABEL_85;
      }
    }
    else
    {
      if (v108 != 3)
      {
        v140 = v20[4];
        v141 = v20[5];
        v122 = __OFSUB__(v141, v140);
        v133 = v141 - v140;
        v134 = v122;
        goto LABEL_79;
      }
      v113 = v20[4];
      v112 = v20[5];
      v122 = __OFSUB__(v112, v113);
      v114 = v112 - v113;
      v115 = v122;
    }
    if ((v115 & 1) != 0)
      goto LABEL_128;
    v123 = (_QWORD *)(v108 - 2);
    v129 = &v109[2 * v108 - 4];
    v131 = *v129;
    v130 = v129[1];
    v132 = __OFSUB__(v130, v131);
    v133 = v130 - v131;
    v134 = v132;
    if (v132)
      goto LABEL_130;
    v135 = &v109[2 * a1];
    v137 = *v135;
    v136 = v135[1];
    v122 = __OFSUB__(v136, v137);
    v138 = v136 - v137;
    if (v122)
      goto LABEL_132;
    if (__OFADD__(v133, v138))
      goto LABEL_134;
    if (v133 + v138 >= v114)
    {
      v139 = v114 < v138;
LABEL_85:
      if (v139)
        a1 = (unint64_t)v123;
      goto LABEL_87;
    }
LABEL_79:
    if ((v134 & 1) != 0)
      goto LABEL_131;
    v142 = &v109[2 * a1];
    v144 = *v142;
    v143 = v142[1];
    v122 = __OFSUB__(v143, v144);
    v145 = v143 - v144;
    if (v122)
      goto LABEL_133;
    if (v145 < v133)
      goto LABEL_96;
LABEL_87:
    v150 = a1 - 1;
    if (a1 - 1 >= v108)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    if (!*v180)
      goto LABEL_148;
    v151 = v20;
    v152 = &v109[2 * v150];
    v153 = *v152;
    v154 = &v109[2 * a1];
    v155 = v154[1];
    sub_10006525C(*v180 + v198[9] * *v152, *v180 + v198[9] * *v154, *v180 + v198[9] * v155, v179);
    if (v2)
      break;
    if (v155 < v153)
      goto LABEL_122;
    if (a1 > v151[2])
      goto LABEL_123;
    *v152 = v153;
    v109[2 * v150 + 1] = v155;
    v156 = v151[2];
    if (a1 >= v156)
      goto LABEL_124;
    v108 = v156 - 1;
    memmove(&v109[2 * a1], v154 + 2, 16 * (v156 - 1 - a1));
    v20 = v151;
    v151[2] = v156 - 1;
    v7 = v190;
    if (v156 <= 2)
      goto LABEL_96;
  }
  v159 = v151;
LABEL_103:
  swift_bridgeObjectRelease(v159);
  if (v171 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  v168 = v170;
  *(_QWORD *)(v170 + 16) = 0;
  swift_bridgeObjectRelease(v168);
}

void sub_100064058(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  Swift::Int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  Swift::Int v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  Swift::Int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000650D4(0, v3, 1, a1);
      return;
    }
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v5 = v4;
  sub_1000211D4(v3 / 2);
  v106 = v6;
  v107 = v3;
  v108 = v7;
  v104 = a1;
  if (v3 > 0)
  {
    v105 = v5;
    v8 = 0;
    v9 = *a1;
    v103 = *a1 + 8;
    v109 = _swiftEmptyArrayStorage;
    while (1)
    {
      v10 = v8++;
      if (v8 >= v3)
        goto LABEL_32;
      v11 = (uint64_t *)(v9 + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = (_QWORD *)(v9 + 16 * v10);
      v15 = v14[1];
      if (v12 == *v14 && v13 == v15)
        break;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1);
      v18 = v10 + 2;
      if (v10 + 2 < v3)
        goto LABEL_13;
LABEL_23:
      v8 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_32;
LABEL_24:
      if (v18 < v10)
        goto LABEL_149;
      if (v10 < v18)
      {
        v26 = 16 * v18;
        v27 = 16 * v10;
        v28 = v18;
        v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9)
              goto LABEL_153;
            v30 = v9 + v26;
            v31 = *(_QWORD *)(v9 + v27);
            v32 = *(_QWORD *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(_QWORD *)(v30 - 16) = v31;
            *(_QWORD *)(v30 - 8) = v32;
          }
          ++v29;
          v26 -= 16;
          v27 += 16;
        }
        while (v29 < v28);
      }
LABEL_31:
      v8 = v18;
LABEL_32:
      if (v8 >= v3)
        goto LABEL_41;
      if (__OFSUB__(v8, v10))
        goto LABEL_144;
      if (v8 - v10 >= v105)
        goto LABEL_41;
      if (__OFADD__(v10, v105))
        goto LABEL_147;
      if (v10 + v105 >= v3)
        v33 = v3;
      else
        v33 = v10 + v105;
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }
      if (v8 == v33)
      {
LABEL_41:
        v34 = v109;
      }
      else
      {
        v84 = (_QWORD *)(v9 + 16 * v8);
        v34 = v109;
        do
        {
          v85 = (uint64_t *)(v9 + 16 * v8);
          v86 = *v85;
          v87 = v85[1];
          v88 = v10;
          v89 = v84;
          do
          {
            v90 = *(v89 - 2);
            v91 = *(v89 - 1);
            v92 = v86 == v90 && v87 == v91;
            if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, v90, v91, 1) & 1) == 0)
              break;
            if (!v9)
              goto LABEL_151;
            v86 = *v89;
            v87 = v89[1];
            *(_OWORD *)v89 = *((_OWORD *)v89 - 1);
            *(v89 - 1) = v87;
            *(v89 - 2) = v86;
            v89 -= 2;
            ++v88;
          }
          while (v8 != v88);
          ++v8;
          v84 += 2;
        }
        while (v8 != v33);
        v8 = v33;
      }
      if (v8 < v10)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        sub_10006C984();
        v34 = v93;
      }
      v35 = v34[2];
      v36 = v35 + 1;
      if (v35 >= v34[3] >> 1)
      {
        sub_10006C984();
        v34 = v94;
      }
      v34[2] = v36;
      v37 = v34 + 4;
      v38 = &v34[2 * v35 + 4];
      *v38 = v10;
      v38[1] = v8;
      v109 = v34;
      if (v35)
      {
        while (1)
        {
          v39 = v36 - 1;
          if (v36 >= 4)
          {
            v44 = &v37[2 * v36];
            v45 = *(v44 - 8);
            v46 = *(v44 - 7);
            v50 = __OFSUB__(v46, v45);
            v47 = v46 - v45;
            if (v50)
              goto LABEL_128;
            v49 = *(v44 - 6);
            v48 = *(v44 - 5);
            v50 = __OFSUB__(v48, v49);
            v42 = v48 - v49;
            v43 = v50;
            if (v50)
              goto LABEL_129;
            v51 = v36 - 2;
            v52 = &v37[2 * v36 - 4];
            v54 = *v52;
            v53 = v52[1];
            v50 = __OFSUB__(v53, v54);
            v55 = v53 - v54;
            if (v50)
              goto LABEL_130;
            v50 = __OFADD__(v42, v55);
            v56 = v42 + v55;
            if (v50)
              goto LABEL_132;
            if (v56 >= v47)
            {
              v74 = &v37[2 * v39];
              v76 = *v74;
              v75 = v74[1];
              v50 = __OFSUB__(v75, v76);
              v77 = v75 - v76;
              if (v50)
                goto LABEL_138;
              v67 = v42 < v77;
              goto LABEL_79;
            }
          }
          else
          {
            if (v36 != 3)
            {
              v68 = v34[4];
              v69 = v34[5];
              v50 = __OFSUB__(v69, v68);
              v61 = v69 - v68;
              v62 = v50;
              goto LABEL_73;
            }
            v41 = v34[4];
            v40 = v34[5];
            v50 = __OFSUB__(v40, v41);
            v42 = v40 - v41;
            v43 = v50;
          }
          if ((v43 & 1) != 0)
            goto LABEL_131;
          v51 = v36 - 2;
          v57 = &v37[2 * v36 - 4];
          v59 = *v57;
          v58 = v57[1];
          v60 = __OFSUB__(v58, v59);
          v61 = v58 - v59;
          v62 = v60;
          if (v60)
            goto LABEL_133;
          v63 = &v37[2 * v39];
          v65 = *v63;
          v64 = v63[1];
          v50 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v50)
            goto LABEL_135;
          if (__OFADD__(v61, v66))
            goto LABEL_137;
          if (v61 + v66 >= v42)
          {
            v67 = v42 < v66;
LABEL_79:
            if (v67)
              v39 = v51;
            goto LABEL_81;
          }
LABEL_73:
          if ((v62 & 1) != 0)
            goto LABEL_134;
          v70 = &v37[2 * v39];
          v72 = *v70;
          v71 = v70[1];
          v50 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v50)
            goto LABEL_136;
          if (v73 < v61)
            goto LABEL_90;
LABEL_81:
          v78 = v39 - 1;
          if (v39 - 1 >= v36)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
          if (!v9)
            goto LABEL_152;
          v79 = &v37[2 * v78];
          v80 = *v79;
          v81 = &v37[2 * v39];
          v82 = v81[1];
          sub_1000657B0((char *)(v9 + 16 * *v79), (char *)(v9 + 16 * *v81), v9 + 16 * v82, v108);
          if (v1)
          {
            v95 = v109;
LABEL_107:
            swift_bridgeObjectRelease(v95);
            if (v107 >= -1)
            {
              *(_QWORD *)(v106 + 16) = 0;
              swift_bridgeObjectRelease(v106);
              return;
            }
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }
          if (v82 < v80)
            goto LABEL_125;
          if (v39 > v109[2])
            goto LABEL_126;
          *v79 = v80;
          v37[2 * v78 + 1] = v82;
          v83 = v109[2];
          if (v39 >= v83)
            goto LABEL_127;
          v34 = v109;
          v36 = v83 - 1;
          memmove(&v37[2 * v39], v81 + 2, 16 * (v83 - 1 - v39));
          v109[2] = v83 - 1;
          if (v83 <= 2)
            goto LABEL_90;
        }
      }
      v36 = 1;
LABEL_90:
      v3 = v107;
      if (v8 >= v107)
        goto LABEL_111;
    }
    v18 = v10 + 2;
    if (v10 + 2 >= v3)
      goto LABEL_31;
    v17 = 0;
LABEL_13:
    v19 = (uint64_t *)(v103 + 16 * v18);
    do
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = (_QWORD *)(v9 + 16 * v8);
      v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0)
          goto LABEL_24;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1)) & 1) != 0)
      {
        goto LABEL_23;
      }
      v19 += 2;
      v25 = v18 + 1;
      v8 = v18;
      v18 = v25;
    }
    while (v25 < v3);
    v18 = v25;
    goto LABEL_23;
  }
  v109 = _swiftEmptyArrayStorage;
  v36 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v36 >= 2)
  {
    v96 = *v104;
    while (1)
    {
      v97 = v36 - 2;
      if (v36 < 2)
        break;
      if (!v96)
        goto LABEL_154;
      v95 = v109;
      v98 = v109[2 * v97 + 4];
      v99 = v109[2 * v36 + 3];
      sub_1000657B0((char *)(v96 + 16 * v98), (char *)(v96 + 16 * v109[2 * v36 + 2]), v96 + 16 * v99, v108);
      if (v1)
        goto LABEL_107;
      if (v99 < v98)
        goto LABEL_140;
      if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
      {
        sub_10006CA50();
        v95 = v102;
      }
      if (v97 >= v95[2])
        goto LABEL_141;
      v100 = &v95[2 * v97 + 4];
      *v100 = v98;
      v100[1] = v99;
      v101 = v95[2];
      if (v36 > v101)
        goto LABEL_142;
      memmove(&v95[2 * v36 + 2], &v95[2 * v36 + 4], 16 * (v101 - v36));
      v109 = v95;
      v95[2] = v101 - 1;
      v36 = v101 - 1;
      v3 = v107;
      if (v101 <= 2)
        goto LABEL_122;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_122:
  swift_bridgeObjectRelease(v109);
  if (v3 < -1)
    goto LABEL_150;
  *(_QWORD *)(v106 + 16) = 0;
  swift_bridgeObjectRelease(v106);
}

void sub_1000646BC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  int8x16_t v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  Swift::Int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint16x8_t v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint32x4_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  int8x16_t v83;
  unint64_t v84;
  uint32x4_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  char *v104;
  _QWORD *v105;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100065198(0, v3, 1, a1);
      return;
    }
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v5 = v4;
  sub_1000211EC(v3 / 2);
  v101 = v6;
  v102 = v3;
  v104 = v7;
  v99 = a1;
  if (v3 > 0)
  {
    v100 = v5;
    v8 = 0;
    v9 = *a1;
    v105 = _swiftEmptyArrayStorage;
    v10.i32[1] = 0;
    while (1)
    {
      v11 = v8++;
      if (v8 < v3)
      {
        v12 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 24 * v8), *(_QWORD *)(v9 + 24 * v8 + 8), *(_QWORD *)(v9 + 24 * v11), *(_QWORD *)(v9 + 24 * v11 + 8));
        v8 = v11 + 2;
        if (v11 + 2 < v3)
        {
          v13 = v9 + 31 + 24 * v11;
          while (((v12 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v13 + 17), *(_QWORD *)(v13 + 25), *(_QWORD *)(v13 - 7), *(_QWORD *)(v13 + 1))) & 1) == 0)
          {
            v13 += 24;
            if (++v8 >= v3)
            {
              v8 = v3;
              break;
            }
          }
        }
        if ((v12 & 1) != 0)
        {
          if (v8 < v11)
            goto LABEL_129;
          if (v11 < v8)
          {
            v14 = 24 * v8;
            v15 = 24 * v11;
            v16 = v8;
            v17 = v11;
            do
            {
              if (v17 != --v16)
              {
                if (!v9)
                  goto LABEL_135;
                v18 = v9 + v15;
                v19 = v9 + v14;
                v20 = *(_QWORD *)(v9 + v15 + 16);
                v10 = *(int8x16_t *)(v9 + v15);
                v21 = *(_QWORD *)(v9 + v14 - 8);
                *(_OWORD *)v18 = *(_OWORD *)(v9 + v14 - 24);
                *(_QWORD *)(v18 + 16) = v21;
                *(int8x16_t *)(v19 - 24) = v10;
                *(_QWORD *)(v19 - 8) = v20;
              }
              ++v17;
              v14 -= 24;
              v15 += 24;
            }
            while (v17 < v16);
          }
        }
      }
      if (v8 >= v3)
        goto LABEL_27;
      if (__OFSUB__(v8, v11))
        goto LABEL_126;
      if (v8 - v11 >= v100)
        goto LABEL_27;
      if (__OFADD__(v11, v100))
        goto LABEL_130;
      if (v11 + v100 >= v3)
        v22 = v3;
      else
        v22 = v11 + v100;
      if (v22 < v11)
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        return;
      }
      if (v8 == v22)
      {
LABEL_27:
        v23 = v105;
      }
      else
      {
        v73 = v9 + 16 + 24 * v8;
        v23 = v105;
        v103 = v11;
        do
        {
          v74 = v9 + 24 * v8;
          v10.i32[0] = *(_DWORD *)(v74 + 4);
          v75 = vmovl_u8(*(uint8x8_t *)v10.i8);
          v10.i32[0] = *(_DWORD *)(v74 + 12);
          v10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v10.i8);
          v76 = v11;
          v77 = v73;
          do
          {
            v78 = v77 - 16;
            v79 = (_OWORD *)(v77 - 40);
            v80 = vmovl_u16((uint16x4_t)(v75.i64[0] & 0xFF00FF00FF00FFLL));
            v81.i64[0] = v80.u32[0];
            v81.i64[1] = v80.u32[1];
            v82 = v81;
            v81.i64[0] = v80.u32[2];
            v81.i64[1] = v80.u32[3];
            v83 = vorrq_s8((int8x16_t)vshlq_u64(v82, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v81, (uint64x2_t)xmmword_10021DA10));
            v84 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v83.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)) | *(unsigned int *)(v77 - 16);
            v85 = vmovl_u16((uint16x4_t)(v10.i64[0] & 0xFF00FF00FF00FFLL));
            v81.i64[0] = v85.u32[0];
            v81.i64[1] = v85.u32[1];
            v86 = v81;
            v81.i64[0] = v85.u32[2];
            v81.i64[1] = v85.u32[3];
            v87 = vorrq_s8((int8x16_t)vshlq_u64(v86, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v81, (uint64x2_t)xmmword_10021DA10));
            if ((static UniversalControlDeviceID.< infix(_:_:)(v84, *(unint64_t *)&vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)) | *(unsigned int *)(v77 - 8), *(_QWORD *)(v77 - 40), *(_QWORD *)(v77 - 32)) & 1) == 0)break;
            if (!v9)
              goto LABEL_133;
            v88 = *(_QWORD *)(v77 - 24);
            *(_QWORD *)(v77 - 24) = *(_QWORD *)v77;
            v77 -= 24;
            v10 = *(int8x16_t *)(v77 + 8);
            *(_OWORD *)v78 = *v79;
            *(_QWORD *)(v78 + 16) = v88;
            *(int8x16_t *)(v77 - 16) = v10;
            *(int8x8_t *)v75.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
            v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
            *(int8x8_t *)v10.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
            ++v76;
          }
          while (v8 != v76);
          ++v8;
          v73 += 24;
          v11 = v103;
        }
        while (v8 != v22);
        v8 = v22;
      }
      if (v8 < v11)
        goto LABEL_125;
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
      {
        sub_10006C984();
        v23 = v89;
      }
      v24 = v23[2];
      v25 = v24 + 1;
      if (v24 >= v23[3] >> 1)
      {
        sub_10006C984();
        v23 = v90;
      }
      v23[2] = v25;
      v26 = v23 + 4;
      v27 = &v23[2 * v24 + 4];
      *v27 = v11;
      v27[1] = v8;
      v105 = v23;
      if (v24)
      {
        while (1)
        {
          v28 = v25 - 1;
          if (v25 >= 4)
          {
            v33 = &v26[2 * v25];
            v34 = *(v33 - 8);
            v35 = *(v33 - 7);
            v39 = __OFSUB__(v35, v34);
            v36 = v35 - v34;
            if (v39)
              goto LABEL_110;
            v38 = *(v33 - 6);
            v37 = *(v33 - 5);
            v39 = __OFSUB__(v37, v38);
            v31 = v37 - v38;
            v32 = v39;
            if (v39)
              goto LABEL_111;
            v40 = v25 - 2;
            v41 = &v26[2 * v25 - 4];
            v43 = *v41;
            v42 = v41[1];
            v39 = __OFSUB__(v42, v43);
            v44 = v42 - v43;
            if (v39)
              goto LABEL_112;
            v39 = __OFADD__(v31, v44);
            v45 = v31 + v44;
            if (v39)
              goto LABEL_114;
            if (v45 >= v36)
            {
              v63 = &v26[2 * v28];
              v65 = *v63;
              v64 = v63[1];
              v39 = __OFSUB__(v64, v65);
              v66 = v64 - v65;
              if (v39)
                goto LABEL_120;
              v56 = v31 < v66;
              goto LABEL_65;
            }
          }
          else
          {
            if (v25 != 3)
            {
              v57 = v23[4];
              v58 = v23[5];
              v39 = __OFSUB__(v58, v57);
              v50 = v58 - v57;
              v51 = v39;
              goto LABEL_59;
            }
            v30 = v23[4];
            v29 = v23[5];
            v39 = __OFSUB__(v29, v30);
            v31 = v29 - v30;
            v32 = v39;
          }
          if ((v32 & 1) != 0)
            goto LABEL_113;
          v40 = v25 - 2;
          v46 = &v26[2 * v25 - 4];
          v48 = *v46;
          v47 = v46[1];
          v49 = __OFSUB__(v47, v48);
          v50 = v47 - v48;
          v51 = v49;
          if (v49)
            goto LABEL_115;
          v52 = &v26[2 * v28];
          v54 = *v52;
          v53 = v52[1];
          v39 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v39)
            goto LABEL_117;
          if (__OFADD__(v50, v55))
            goto LABEL_119;
          if (v50 + v55 >= v31)
          {
            v56 = v31 < v55;
LABEL_65:
            if (v56)
              v28 = v40;
            goto LABEL_67;
          }
LABEL_59:
          if ((v51 & 1) != 0)
            goto LABEL_116;
          v59 = &v26[2 * v28];
          v61 = *v59;
          v60 = v59[1];
          v39 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v39)
            goto LABEL_118;
          if (v62 < v50)
            goto LABEL_76;
LABEL_67:
          v67 = v28 - 1;
          if (v28 - 1 >= v25)
          {
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
          if (!v9)
            goto LABEL_134;
          v68 = &v26[2 * v67];
          v69 = *v68;
          v70 = &v26[2 * v28];
          v71 = v70[1];
          sub_100065954((char *)(v9 + 24 * *v68), (char *)(v9 + 24 * *v70), v9 + 24 * v71, v104);
          if (v1)
          {
            v91 = v105;
LABEL_89:
            swift_bridgeObjectRelease(v91);
            if (v102 >= -1)
            {
              *(_QWORD *)(v101 + 16) = 0;
              swift_bridgeObjectRelease(v101);
              return;
            }
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
            goto LABEL_131;
          }
          if (v71 < v69)
            goto LABEL_107;
          if (v28 > v105[2])
            goto LABEL_108;
          *v68 = v69;
          v26[2 * v67 + 1] = v71;
          v72 = v105[2];
          if (v28 >= v72)
            goto LABEL_109;
          v23 = v105;
          v25 = v72 - 1;
          memmove(&v26[2 * v28], v70 + 2, 16 * (v72 - 1 - v28));
          v105[2] = v72 - 1;
          if (v72 <= 2)
            goto LABEL_76;
        }
      }
      v25 = 1;
LABEL_76:
      v3 = v102;
      if (v8 >= v102)
        goto LABEL_93;
    }
  }
  v105 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage[2];
LABEL_93:
  if (v25 >= 2)
  {
    v92 = *v99;
    while (1)
    {
      v93 = v25 - 2;
      if (v25 < 2)
        break;
      if (!v92)
        goto LABEL_136;
      v91 = v105;
      v94 = v105[2 * v93 + 4];
      v95 = v105[2 * v25 + 3];
      sub_100065954((char *)(v92 + 24 * v94), (char *)(v92 + 24 * v105[2 * v25 + 2]), v92 + 24 * v95, v104);
      if (v1)
        goto LABEL_89;
      if (v95 < v94)
        goto LABEL_122;
      if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
      {
        sub_10006CA50();
        v91 = v98;
      }
      if (v93 >= v91[2])
        goto LABEL_123;
      v96 = &v91[2 * v93 + 4];
      *v96 = v94;
      v96[1] = v95;
      v97 = v91[2];
      if (v25 > v97)
        goto LABEL_124;
      memmove(&v91[2 * v25 + 2], &v91[2 * v25 + 4], 16 * (v97 - v25));
      v105 = v91;
      v91[2] = v97 - 1;
      v25 = v97 - 1;
      v3 = v102;
      if (v97 <= 2)
        goto LABEL_104;
    }
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_104:
  swift_bridgeObjectRelease(v105);
  if (v3 < -1)
    goto LABEL_132;
  *(_QWORD *)(v101 + 16) = 0;
  swift_bridgeObjectRelease(v101);
}

uint64_t sub_100064DC4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  _QWORD *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;

  v49 = a1;
  v7 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v53 = (char *)&v47 - v10;
  v11 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v63 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v60 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v52 = (char *)&v47 - v15;
  result = __chkstk_darwin(v14);
  v67 = (char *)&v47 - v17;
  v59 = a3;
  v48 = a2;
  if (a3 != a2)
  {
    v18 = v63[9];
    v50 = (void (*)(void))v63[2];
    v51 = a4;
    v19 = v18 * (v59 - 1);
    v57 = v18;
    v20 = v18 * v59;
    v21 = v52;
    while (2)
    {
      v22 = 0;
      v64 = v49;
      v58 = v20;
      do
      {
        v23 = *a4;
        v62 = v20 + v22;
        v24 = v50;
        v50();
        v61 = v19 + v22;
        v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v21, v19 + v22 + v23, v11);
        v26 = v53;
        v27 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v25);
        v28 = UniversalControlLink.Endpoint.device.getter(v27);
        v65 = v29;
        v66 = v28;
        v30 = *(uint64_t (**)(char *, uint64_t))(v55 + 8);
        v31 = v26;
        v32 = v56;
        v33 = v30(v31, v56);
        v34 = v19;
        v35 = v11;
        v36 = v54;
        v37 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v33);
        v38 = UniversalControlLink.Endpoint.device.getter(v37);
        v40 = v39;
        v41 = v36;
        v11 = v35;
        v19 = v34;
        v20 = v58;
        v30(v41, v32);
        LOBYTE(v38) = static UniversalControlDeviceID.< infix(_:_:)(v66, v65, v38, v40);
        v42 = (void (*)(char *, uint64_t))v63[1];
        v42(v21, v11);
        result = ((uint64_t (*)(char *, uint64_t))v42)(v67, v11);
        a4 = v51;
        if ((v38 & 1) == 0)
          break;
        v43 = *v51;
        if (!*v51)
        {
          __break(1u);
          return result;
        }
        v44 = v43 + v20 + v22;
        v45 = v43 + v19 + v22;
        v46 = (void (*)(char *, uint64_t, uint64_t))v63[4];
        v46(v60, v44, v11);
        swift_arrayInitWithTakeFrontToBack(v44, v45, 1, v11);
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v46)(v45, v60, v11);
        v22 -= v57;
        ++v64;
      }
      while (v59 != v64);
      v19 += v57;
      v20 += v57;
      if (++v59 != v48)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1000650D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        v13 = *(v12 - 2);
        v14 = *(v12 - 1);
        if (result == v13 && v10 == v14)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100065198(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3;
    while (2)
    {
      v9 = v6;
      v10 = (_QWORD *)v8;
      do
      {
        result = static UniversalControlDeviceID.< infix(_:_:)(*v10, v10[1], *(v10 - 3), *(v10 - 2));
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v11 = v10[2];
        v12 = *(_OWORD *)v10;
        *(_OWORD *)v10 = *(_OWORD *)(v10 - 3);
        v10[2] = *(v10 - 1);
        *(v10 - 1) = v11;
        *(_OWORD *)(v10 - 3) = v12;
        v10 -= 3;
        ++v9;
      }
      while (v4 != v9);
      ++v4;
      v8 += 24;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

void sub_10006525C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, unint64_t, uint64_t);
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v52;
  uint64_t (*v53)(char *);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  unint64_t v73;
  unint64_t v74;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v80;
  uint64_t v82;
  uint64_t (*v83)(char *);
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t (*v87)(char *, unint64_t, uint64_t);
  uint64_t (*v88)(char *, unint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;

  v96 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v8 = *(_QWORD *)(v96 - 8);
  v9 = __chkstk_darwin(v96);
  v95 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v94 = (char *)&v82 - v11;
  v102 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v12 = __chkstk_darwin(v102);
  v93 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v92 = (char *)&v82 - v15;
  v97 = v14;
  v16 = *(_QWORD *)(v14 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v17 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_77;
  v19 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
    goto LABEL_78;
  v21 = v17 / v16;
  v22 = v19 / v16;
  v91 = *(_QWORD *)(v14 + 72);
  if (v17 / v16 >= v19 / v16)
  {
    sub_100078C44(a2, v19 / v16);
    v23 = a4 + v22 * v16;
    if (v22 * v16 < 1 || a1 >= a2)
      goto LABEL_71;
    v84 = -v16;
    v83 = *(uint64_t (**)(char *))(v97 + 16);
    v99 = a1;
    v100 = a4;
    v90 = v8;
    while (1)
    {
      v87 = (uint64_t (*)(char *, unint64_t, uint64_t))a2;
      v88 = (uint64_t (*)(char *, unint64_t, uint64_t))a3;
      v98 = v23;
      v53 = v83;
      v52 = v84;
      v101 = a3 + v84;
      v54 = v92;
      v86 = v23 + v84;
      v55 = v102;
      v83(v92);
      v56 = v93;
      v85 = a2 + v52;
      v57 = v53(v93);
      v58 = v94;
      v59 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v57);
      v60 = UniversalControlLink.Endpoint.device.getter(v59);
      v89 = v61;
      v62 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
      v63 = v58;
      v64 = v96;
      v65 = v62(v63, v96);
      v66 = v95;
      v67 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v65);
      v68 = UniversalControlLink.Endpoint.device.getter(v67);
      v70 = v69;
      v62(v66, v64);
      LOBYTE(v68) = static UniversalControlDeviceID.< infix(_:_:)(v60, v89, v68, v70);
      v71 = *(void (**)(char *, uint64_t))(v97 + 8);
      v71(v56, v55);
      v71(v54, v55);
      if ((v68 & 1) != 0)
      {
        v23 = v98;
        a3 = v101;
        if ((unint64_t)v88 >= (unint64_t)v87 && v101 < (unint64_t)v87)
        {
          v76 = v99;
          a4 = v100;
          v8 = v90;
          v16 = v91;
          if (v88 == v87)
          {
            a2 = v85;
            goto LABEL_67;
          }
          v77 = v101;
          a2 = v85;
          v78 = v85;
          goto LABEL_64;
        }
        v73 = v101;
        a2 = v85;
        v74 = v85;
      }
      else
      {
        a2 = (unint64_t)v87;
        a3 = v101;
        if ((unint64_t)v88 >= v98 && v101 < v98)
        {
          v76 = v99;
          a4 = v100;
          v8 = v90;
          v16 = v91;
          if (v88 == (uint64_t (*)(char *, unint64_t, uint64_t))v98)
          {
            v23 = v86;
            goto LABEL_67;
          }
          v77 = v101;
          v23 = v86;
          v78 = v86;
LABEL_64:
          swift_arrayInitWithTakeBackToFront(v77, v78, 1, v102);
          goto LABEL_67;
        }
        v73 = v101;
        v23 = v86;
        v74 = v86;
      }
      swift_arrayInitWithTakeFrontToBack(v73, v74, 1, v102);
      v76 = v99;
      a4 = v100;
      v8 = v90;
      v16 = v91;
LABEL_67:
      if (v23 <= a4 || a2 <= v76)
        goto LABEL_71;
    }
  }
  sub_100078C44(a1, v17 / v16);
  v23 = a4 + v21 * v16;
  if (v21 * v16 >= 1 && a2 < a3)
  {
    v90 = v8;
    v87 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v97 + 16);
    v101 = a3;
    v98 = a4 + v21 * v16;
    v25 = v102;
    v26 = v93;
    while (1)
    {
      v99 = a1;
      v100 = a4;
      v27 = v92;
      v28 = v87;
      v87(v92, a2, v25);
      v29 = v28(v26, a4, v25);
      v30 = v94;
      v31 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v29);
      v32 = UniversalControlLink.Endpoint.device.getter(v31);
      v88 = v33;
      v89 = v32;
      v34 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
      v35 = v96;
      v36 = v34(v30, v96);
      v37 = v95;
      v38 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v36);
      v39 = UniversalControlLink.Endpoint.device.getter(v38);
      v40 = a2;
      v42 = v41;
      v34(v37, v35);
      LOBYTE(v39) = static UniversalControlDeviceID.< infix(_:_:)(v89, v88, v39, v42);
      v43 = *(void (**)(char *, uint64_t))(v97 + 8);
      v43(v26, v25);
      v43(v27, v25);
      if ((v39 & 1) != 0)
        break;
      v16 = v91;
      v45 = v99;
      v44 = v100 + v91;
      if (v99 >= v100 && v99 < v44)
      {
        v48 = v101;
        if (v99 != v100)
          swift_arrayInitWithTakeBackToFront(v99, v100, 1, v102);
        a2 = v40;
LABEL_34:
        a4 = v44;
        goto LABEL_35;
      }
      swift_arrayInitWithTakeFrontToBack(v99, v100, 1, v102);
      a2 = v40;
      a4 = v44;
      v48 = v101;
LABEL_35:
      v23 = v98;
      a1 = v45 + v16;
      if (a4 >= v98 || a2 >= v48)
        goto LABEL_71;
    }
    v45 = v99;
    v44 = v100;
    v16 = v91;
    a2 = v40 + v91;
    v46 = v99 < v40 || v99 >= a2;
    v47 = v40;
    if (!v46)
    {
      v48 = v101;
      a4 = v100;
      if (v99 != v47)
        swift_arrayInitWithTakeBackToFront(v99, v47, 1, v102);
      goto LABEL_35;
    }
    swift_arrayInitWithTakeFrontToBack(v99, v40, 1, v102);
    v48 = v101;
    goto LABEL_34;
  }
LABEL_71:
  v80 = v23 - a4;
  if (v16 != -1 || v80 != 0x8000000000000000)
  {
    sub_100078C44(a4, v80 / v16);
    return;
  }
LABEL_79:
  __break(1u);
}

uint64_t sub_1000657B0(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_100078BF0(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = *((_QWORD *)v12 - 2);
      v23 = *((_QWORD *)v12 - 1);
      v24 = v12 - 16;
      v25 = *((_QWORD *)v6 - 2);
      v26 = *((_QWORD *)v6 - 1);
      v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1) & 1) == 0)
      {
        v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29)
          goto LABEL_43;
      }
      else
      {
        v28 = v21 != v6 || v20 >= v6;
        v24 = v6 - 16;
        v6 -= 16;
        if (!v28)
          goto LABEL_43;
      }
      *(_OWORD *)v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_100078BF0(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = *((_QWORD *)v4 + 1);
      v16 = *(_QWORD *)v6 == *(_QWORD *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v14, *(_QWORD *)v4, v15, 1) & 1) != 0)
        break;
      v17 = v4;
      v16 = v7 == v4;
      v4 += 16;
      if (!v16)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v17 = v6;
    v16 = v7 == v6;
    v6 += 16;
    if (v16)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  sub_100078BF0(v4, (v12 - v4) / 16, v6);
  return 1;
}

uint64_t sub_100065954(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  __int128 v16;
  unint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  if (v9 >= v11)
  {
    sub_100078C50(a2, (uint64_t)(a3 - (_QWORD)a2) / 24, a4);
    v12 = &v4[24 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v19 = a3 - 24;
    while (1)
    {
      v20 = (char *)(v19 + 24);
      v21 = v6 - 24;
      if ((static UniversalControlDeviceID.< infix(_:_:)(*((_QWORD *)v12 - 3), *((_QWORD *)v12 - 2), *((_QWORD *)v6 - 3), *((_QWORD *)v6 - 2)) & 1) != 0)
      {
        v22 = v20 != v6 || v19 >= (unint64_t)v6;
        v6 -= 24;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v23 = v20 != v12 || v19 >= (unint64_t)v12;
        v21 = v12 - 24;
        v12 -= 24;
        if (!v23)
          goto LABEL_35;
      }
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v19 = v24;
LABEL_35:
      v19 -= 24;
      if (v12 <= v4 || v6 <= v7)
        goto LABEL_39;
    }
  }
  sub_100078C50(a1, (a2 - a1) / 24, a4);
  v12 = &v4[24 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)v6, *((_QWORD *)v6 + 1), *(_QWORD *)v4, *((_QWORD *)v4 + 1)) & 1) == 0)
    {
      v14 = v4;
      v15 = v7 == v4;
      v4 += 24;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 24;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 24;
    if (v15)
      goto LABEL_12;
LABEL_11:
    v16 = *(_OWORD *)v14;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v7 = v16;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100078C50(v4, (v12 - v4) / 24, v6);
  return 1;
}

unint64_t sub_100065AF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AB150;
  if (!qword_1002AB150)
  {
    v1 = sub_10000DCA0((uint64_t *)&unk_1002AC160);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AB150);
  }
  return result;
}

unint64_t sub_100065B34()
{
  unint64_t result;

  result = qword_1002AC3E8;
  if (!qword_1002AC3E8)
  {
    result = swift_getWitnessTable(&unk_10021ED24, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AC3E8);
  }
  return result;
}

unint64_t sub_100065B74()
{
  unint64_t result;

  result = qword_1002AC3F0;
  if (!qword_1002AC3F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CodableVoid, &type metadata for CodableVoid);
    atomic_store(result, (unint64_t *)&qword_1002AC3F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableVoid()
{
  return &type metadata for CodableVoid;
}

ValueMetadata *type metadata accessor for CodableVoid.CodingKeys()
{
  return &type metadata for CodableVoid.CodingKeys;
}

unint64_t sub_100065BD4()
{
  unint64_t result;

  result = qword_1002AC3F8;
  if (!qword_1002AC3F8)
  {
    result = swift_getWitnessTable(&unk_10021ECD4, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AC3F8);
  }
  return result;
}

unint64_t sub_100065C14()
{
  unint64_t result;

  result = qword_1002AC400;
  if (!qword_1002AC400)
  {
    result = swift_getWitnessTable(&unk_10021ECFC, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AC400);
  }
  return result;
}

uint64_t sub_100065CB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  return UUID.init(uuid:)(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100065CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v0, v3);
}

void sub_100065D00()
{
  sub_100058678();
}

uint64_t sub_100065D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100065D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v4, a4);
}

void sub_100065D2C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 91;
  *(_QWORD *)(v0 - 88) = 0xE100000000000000;
}

uint64_t sub_100065D50()
{
  uint64_t v0;

  return swift_release(v0);
}

BOOL sub_100065D6C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100065D7C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 104) + 8))(v0, *(_QWORD *)(v1 - 96));
}

uint64_t sub_100065D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v2, v0, v3);
}

uint64_t sub_100065DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_100065DD0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100065DDC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100065DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UUID.init(uuid:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100065DF4()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 104));
}

void sub_100065E0C()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100065E18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void sub_100065E38()
{
  sub_100058678();
}

unint64_t sub_100065E78()
{
  return sub_100065AF0();
}

uint64_t sub_100065E98(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(15, a2);
}

uint64_t sub_100065EB4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100065EC0()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

uint64_t sub_100065ECC()
{
  return 15;
}

uint64_t sub_100065EE0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  return sub_100063458(a1, a2, a3);
}

uint64_t sub_100065EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return String.index(_:offsetBy:limitedBy:)(a1, a2, a3, v3, v4);
}

void sub_100065F00(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100065F0C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 104));
}

uint64_t sub_100065F14()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100065F20()
{
  return 15;
}

uint64_t sub_100065F2C()
{
  return 15;
}

uint64_t sub_100065F38()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B6E98);
  sub_100006FB4(v0, (uint64_t)qword_1002B6E98);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1279413829, 0xE400000000000000);
}

uint64_t sub_100065FA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t KeyPath;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v4 = v3;
  v8 = sub_1000055B0((uint64_t *)&unk_1002AC5D0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 16) = objc_msgSend(objc_allocWithZone((Class)AEAssessmentModeGestalt), "init");
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 1;
  *(_WORD *)(v4 + 57) = 257;
  *(_BYTE *)(v4 + 80) = 1;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 64) = a2;
  *(_QWORD *)(v4 + 72) = a3;
  swift_retain();
  swift_retain();
  v12 = a3;
  *(_BYTE *)(v4 + 80) = objc_msgSend(v12, "enabled");
  sub_10000B0EC();
  swift_retain();
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = swift_allocObject(&unk_100284E98, 32, 7);
  *(_QWORD *)(v15 + 24) = &off_100284E78;
  swift_unknownObjectWeakInit(v15 + 16, v4);
  swift_retain();
  v16 = sub_1000C8454(v14, (uint64_t)sub_10002D0D4, v15);
  v18 = v17;
  sub_10005FF18();
  swift_release();
  v37 = v16;
  v19 = *(void **)(v4 + 16);
  KeyPath = swift_getKeyPath(&unk_10021EE48);
  v21 = v19;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);

  sub_10005FF18();
  v22 = sub_100066CF4((uint64_t)&unk_100284EC0);
  *(_QWORD *)(v22 + 16) = v18;
  v23 = sub_100066BF0();
  sub_100066CE8();
  Publisher<>.sink(receiveValue:)(sub_100066BE8, v22, v8, v23);
  sub_10005FF18();
  sub_100066D30();
  sub_100066D0C();
  sub_10000B348();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = type metadata accessor for ClientAssertionController();
  sub_100066D38((unint64_t *)&unk_1002AC190, v25, (uint64_t (*)(uint64_t))type metadata accessor for ClientAssertionController, (uint64_t)&unk_10022A4EC);
  dispatch thunk of ObservableObject.objectWillChange.getter(v24);
  v35 = v36;
  *(_QWORD *)(sub_100066CF4((uint64_t)&unk_100284EE8) + 16) = v18;
  type metadata accessor for ObservableObjectPublisher(0);
  sub_100066CE8();
  sub_100066CC8((uint64_t)sub_10005E230);
  sub_100066D00();
  sub_100066D30();
  sub_10005FF18();
  sub_100066D0C();
  sub_10000B348();
  v26 = type metadata accessor for LoginStatusController();
  sub_100066D38(&qword_1002AC1D0, v27, (uint64_t (*)(uint64_t))type metadata accessor for LoginStatusController, (uint64_t)&unk_1002262E4);
  dispatch thunk of ObservableObject.objectWillChange.getter(v26);
  v35 = v36;
  *(_QWORD *)(sub_100066CF4((uint64_t)&unk_100284F10) + 16) = v18;
  sub_100066CE8();
  sub_100066CC8((uint64_t)sub_10005FDC0);
  sub_100066D00();
  sub_100066D30();
  sub_10005FF18();
  sub_100066D0C();
  sub_10000B348();
  v28 = type metadata accessor for UniversalControlPreferences(0);
  sub_100066D38((unint64_t *)&qword_1002AC1C0, v29, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlPreferences, (uint64_t)&protocol conformance descriptor for UniversalControlPreferences);
  dispatch thunk of ObservableObject.objectWillChange.getter(v28);
  v35 = v36;
  *(_QWORD *)(sub_100066CF4((uint64_t)&unk_100284F38) + 16) = v18;
  sub_100066CE8();
  sub_100066CC8((uint64_t)sub_10005FDC0);
  sub_100066D00();
  sub_100066D30();
  sub_10005FF18();
  sub_100066D0C();
  sub_10000B348();
  v30 = v37;
  v31 = *(_QWORD *)(v4 + 88);
  v32 = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(v4 + 88) = v37;
  *(_QWORD *)(v4 + 96) = v18;
  swift_unknownObjectRetain(v18);
  swift_bridgeObjectRetain(v30);
  sub_10002D108(v31, v32);
  swift_getObjectType(v18);
  swift_unknownObjectRetain(v18);
  swift_bridgeObjectRetain(v30);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_release();
  swift_release();

  swift_unknownObjectRelease_n(v18, 2);
  swift_bridgeObjectRelease_n(v30, 2);
  return v4;
}

uint64_t sub_1000663BC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  sub_10002D108(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return v0;
}

uint64_t sub_1000663F8()
{
  uint64_t v0;

  sub_1000663BC();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for EnablementController()
{
  return objc_opt_self(_TtC13EnsembleAgent20EnablementController);
}

uint64_t sub_100066438@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for EnablementController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

void sub_100066470()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  char v3;
  int v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  os_log_type_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  os_log_type_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  os_log_type_t v34;
  _WORD *v35;
  unsigned int v36;
  char v37;
  char v38;
  uint64_t v39;
  os_log_type_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  os_log_type_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  os_log_type_t v72;
  _WORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + 16), "isActive");
  if (v2 != *(unsigned __int8 *)(v0 + 24))
  {
    *(_BYTE *)(v0 + 24) = v2;
    sub_100066D14();
    if (v4)
    {
      if (!v3)
        swift_once(&qword_1002A9858, sub_100065F38);
      v5 = sub_10000F6E4();
      sub_10005FE9C(v5, (uint64_t)qword_1002B6E98);
      v6 = sub_10002D844();
      if (!sub_1000403A4(v6))
        goto LABEL_12;
      v7 = (_WORD *)sub_100040274();
      sub_100066CDC(v7);
      v10 = "Assessment is active, Universal Control is not allowed";
    }
    else
    {
      if (!v3)
        swift_once(&qword_1002A9858, sub_100065F38);
      v11 = sub_10000F6E4();
      sub_10005FE9C(v11, (uint64_t)qword_1002B6E98);
      v12 = sub_10002D844();
      if (!sub_1000403A4(v12))
        goto LABEL_12;
      v13 = (_WORD *)sub_100040274();
      sub_100066CDC(v13);
      v10 = "Assessment is no longer active";
    }
    sub_100066CA4((void *)&_mh_execute_header, v8, v9, v10);
    sub_100066CB8();
LABEL_12:

  }
  v14 = *(_QWORD *)(v0 + 32);
  v15 = *(unsigned __int8 *)(v14 + 24);
  if (v15 == *(unsigned __int8 *)(v0 + 25))
    goto LABEL_25;
  *(_BYTE *)(v0 + 25) = v15;
  if ((v15 & 1) != 0)
  {
    if (qword_1002A9858 != -1)
      swift_once(&qword_1002A9858, sub_100065F38);
    v16 = sub_10000F6E4();
    sub_10005FE9C(v16, (uint64_t)qword_1002B6E98);
    v17 = sub_10002D844();
    if (!sub_1000403A4(v17))
      goto LABEL_24;
    v18 = (_WORD *)sub_100040274();
    sub_100066CDC(v18);
    v21 = "Client(s) are no longer asserting disabled";
  }
  else
  {
    if (qword_1002A9858 != -1)
      swift_once(&qword_1002A9858, sub_100065F38);
    v22 = sub_10000F6E4();
    sub_10005FE9C(v22, (uint64_t)qword_1002B6E98);
    v23 = sub_10002D844();
    if (!sub_1000403A4(v23))
      goto LABEL_24;
    v24 = (_WORD *)sub_100040274();
    sub_100066CDC(v24);
    v21 = "A client is asserting disabled, Universal Control is not allowed";
  }
  sub_100066CA4((void *)&_mh_execute_header, v19, v20, v21);
  sub_100066CB8();
LABEL_24:

LABEL_25:
  v25 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 64) + 16);
  if ((v25 != 3) == *(_BYTE *)(v0 + 58))
    goto LABEL_37;
  v26 = qword_1002A9858;
  *(_BYTE *)(v0 + 58) = v25 != 3;
  if (v25 == 3)
  {
    if (v26 != -1)
      swift_once(&qword_1002A9858, sub_100065F38);
    v33 = sub_10000F6E4();
    sub_10005FE9C(v33, (uint64_t)qword_1002B6E98);
    v34 = sub_10002D844();
    if (!sub_1000403A4(v34))
      goto LABEL_36;
    v35 = (_WORD *)sub_100040274();
    sub_100066CDC(v35);
    v32 = "User moved off console, Universal Control is not allowed";
  }
  else
  {
    if (v26 != -1)
      swift_once(&qword_1002A9858, sub_100065F38);
    v27 = sub_10000F6E4();
    sub_10005FE9C(v27, (uint64_t)qword_1002B6E98);
    v28 = sub_10002D844();
    if (!sub_1000403A4(v28))
      goto LABEL_36;
    v29 = (_WORD *)sub_100040274();
    sub_100066CDC(v29);
    v32 = "User moved on console";
  }
  sub_100066CA4((void *)&_mh_execute_header, v30, v31, v32);
  sub_100066CB8();
LABEL_36:

LABEL_37:
  v36 = objc_msgSend(*(id *)(v0 + 72), "enabled");
  if (v36 == *(unsigned __int8 *)(v0 + 80))
    goto LABEL_49;
  *(_BYTE *)(v0 + 80) = v36;
  sub_100066D14();
  if ((v38 & 1) != 0)
  {
    if (!v37)
      swift_once(&qword_1002A9858, sub_100065F38);
    v39 = sub_10000F6E4();
    sub_10005FE9C(v39, (uint64_t)qword_1002B6E98);
    v40 = sub_10002D844();
    if (!sub_1000403A4(v40))
      goto LABEL_48;
    v41 = (_WORD *)sub_100040274();
    sub_100066CDC(v41);
    v44 = "User preference enabled";
  }
  else
  {
    if (!v37)
      swift_once(&qword_1002A9858, sub_100065F38);
    v45 = sub_10000F6E4();
    sub_10005FE9C(v45, (uint64_t)qword_1002B6E98);
    v46 = sub_10002D844();
    if (!sub_1000403A4(v46))
      goto LABEL_48;
    v47 = (_WORD *)sub_100040274();
    sub_100066CDC(v47);
    v44 = "User preference disabled, Universal Control is not allowed";
  }
  sub_100066CA4((void *)&_mh_execute_header, v42, v43, v44);
  sub_100066CB8();
LABEL_48:

LABEL_49:
  v48 = *(_QWORD *)(v14 + 26);
  v49 = *(_QWORD *)(v14 + 34);
  v50 = *(_BYTE *)(v14 + 42);
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 56) & 1) == 0)
    {
      sub_100066D14();
      if (!v3)
        swift_once(&qword_1002A9858, sub_100065F38);
      v51 = sub_10000F6E4();
      sub_10005FE9C(v51, (uint64_t)qword_1002B6E98);
      v52 = sub_10002D844();
      if (!os_log_type_enabled((os_log_t)v0, v52))
        goto LABEL_62;
      v53 = (uint8_t *)sub_100040274();
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v52, "Client(s) are no longer asserting force-enabled", v53, 2u);
      v54 = (uint64_t)v53;
LABEL_61:
      sub_100007958(v54);
LABEL_62:

      type metadata accessor for EnablementController();
      sub_100066C34((unint64_t *)&unk_1002B34A0, v61, (uint64_t (*)(uint64_t))type metadata accessor for EnablementController, (uint64_t)&unk_10021EE08);
      v0 = sub_100066D20();
      ObservableObjectPublisher.send()();
      sub_10000B348();
      *(_QWORD *)(v1 + 40) = v48;
      *(_QWORD *)(v1 + 48) = v49;
      *(_BYTE *)(v1 + 56) = v50;
    }
  }
  else if ((*(_BYTE *)(v0 + 56) & 1) != 0
         || static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v14 + 26), *(_QWORD *)(v14 + 34)))
  {
    sub_100066D14();
    if (!v3)
      swift_once(&qword_1002A9858, sub_100065F38);
    v55 = sub_10000F6E4();
    sub_10005FE9C(v55, (uint64_t)qword_1002B6E98);
    v56 = sub_10002D844();
    if (!os_log_type_enabled((os_log_t)v0, v56))
      goto LABEL_62;
    v57 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = swift_slowAlloc(32, -1);
    v76 = v58;
    *(_DWORD *)v57 = 136315138;
    v59 = UniversalControlDeviceID.description.getter(v48, v49);
    v75 = sub_100006FCC(v59, v60, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v57 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v56, "A client is asserting single-device with deviceID %s, Universal Control is forcibly enabled and tied to this ID.", v57, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v58);
    v54 = (uint64_t)v57;
    goto LABEL_61;
  }
  if ((*(_BYTE *)(v1 + 24) & 1) == 0 && *(_BYTE *)(v1 + 25) == 1 && *(_BYTE *)(v1 + 58) == 1)
    v62 = *(_BYTE *)(v1 + 80);
  else
    v62 = 0;
  v63 = *(_BYTE *)(v1 + 56) ^ 1 | v62;
  if ((v63 & 1) != *(_BYTE *)(v1 + 57))
  {
    sub_100066D14();
    if ((v63 & 1) != 0)
    {
      if (!v64)
        swift_once(&qword_1002A9858, sub_100065F38);
      v65 = sub_10000F6E4();
      sub_10005FE9C(v65, (uint64_t)qword_1002B6E98);
      v66 = sub_10002D844();
      if (!sub_1000403A4(v66))
        goto LABEL_79;
      v67 = (_WORD *)sub_100040274();
      sub_100066CDC(v67);
      v70 = "=== Universal Control Enabled ===";
    }
    else
    {
      if (!v64)
        swift_once(&qword_1002A9858, sub_100065F38);
      v71 = sub_10000F6E4();
      sub_10005FE9C(v71, (uint64_t)qword_1002B6E98);
      v72 = sub_10002D844();
      if (!sub_1000403A4(v72))
        goto LABEL_79;
      v73 = (_WORD *)sub_100040274();
      sub_100066CDC(v73);
      v70 = "=== Universal Control Disabled ===";
    }
    sub_100066CA4((void *)&_mh_execute_header, v68, v69, v70);
    sub_100066CB8();
LABEL_79:

    type metadata accessor for EnablementController();
    sub_100066C34((unint64_t *)&unk_1002B34A0, v74, (uint64_t (*)(uint64_t))type metadata accessor for EnablementController, (uint64_t)&unk_10021EE08);
    sub_100066D20();
    ObservableObjectPublisher.send()();
    sub_10000B348();
    *(_BYTE *)(v1 + 57) = v63 & 1;
  }
}

uint64_t sub_100066B80()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

const char *sub_100066BA4()
{
  return "isActive";
}

id sub_100066BB0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isActive");
  *a2 = (_BYTE)result;
  return result;
}

void sub_100066BE0(unsigned __int8 *a1, uint64_t a2)
{
  sub_10002C82C(*a1, a2);
}

void sub_100066BE8(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100066BE0(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100066BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC5E0;
  if (!qword_1002AC5E0)
  {
    v1 = sub_10000DCA0((uint64_t *)&unk_1002AC5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC5E0);
  }
  return result;
}

uint64_t sub_100066C34(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100066C74()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100066CA4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 2u);
}

uint64_t sub_100066CB8()
{
  uint64_t v0;

  return swift_slowDealloc(v0, -1, -1);
}

uint64_t sub_100066CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher<>.sink(receiveValue:)(a1, v3, v1, v2);
}

_WORD *sub_100066CDC(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100066CE8()
{
  uint64_t v0;

  return swift_unknownObjectRetain_n(v0, 2);
}

uint64_t sub_100066CF4(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

uint64_t sub_100066D00()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100066D0C()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100066D20()
{
  uint64_t v0;

  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t sub_100066D30()
{
  uint64_t v0;

  return AnyCancellable.store(in:)(v0 - 88);
}

uint64_t sub_100066D38(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_100066C34(a1, 255, a3, a4);
}

uint64_t sub_100066D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v1 = v0;
  v2 = type metadata accessor for CompanionLinkServer();
  swift_allocObject(v2, 40, 7);
  v3 = CompanionLinkServer.init(serviceType:)(0xD00000000000001ALL, 0x8000000100251980);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 208);
  v5 = swift_retain(v3);
  v4(v5);
  swift_release(v3);
  return v1;
}

uint64_t type metadata accessor for Beacon()
{
  return objc_opt_self(_TtC13EnsembleAgent6Beacon);
}

__n128 initializeBufferWithCopyOfBuffer for Connection(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Connection(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      v4 = v3 >= 6;
      v2 = v3 - 6;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Connection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for Connection()
{
  return &type metadata for Connection;
}

unint64_t sub_100066E84()
{
  unint64_t result;

  result = qword_1002AC688;
  if (!qword_1002AC688)
  {
    result = swift_getWitnessTable(&unk_10021EEF0, &type metadata for Connection);
    atomic_store(result, (unint64_t *)&qword_1002AC688);
  }
  return result;
}

void sub_100066EC0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_100066F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  sub_1000676C8();
  _StringGuts.grow(_:)(18);
  v3 = *(_QWORD *)(v2 - 88);
  *(_QWORD *)(v2 - 96) = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 88) = v3;
  sub_100067614();
  sub_100067690();
  sub_100067658();
  sub_100067680();
  sub_1000676A4();
  sub_100067670();
  sub_10006769C();
  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
  v4._object = (void *)0x8000000100254310;
  v4._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  return *(_QWORD *)(v2 - 96);
}

BOOL sub_100067178(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v6;
  int v7;

  v6 = a6;
  v7 = a3;
  return !static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, a4, a5) && v7 == v6;
}

void sub_1000671B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD v5[2];
  uint64_t v6;

  v5[0] = a2;
  v5[1] = a3;
  Hasher.combine(bytes:)(v5, &v6);
  Hasher._combine(_:)(a4);
}

Swift::Int sub_100067294(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  char v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[16];
  _QWORD v22[9];

  v3 = a2;
  v4 = a1;
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = HIDWORD(a1);
  v9 = a1 >> 40;
  v10 = HIWORD(a1);
  v11 = HIBYTE(a1);
  v12 = a2 >> 8;
  v14 = a2 >> 16;
  v15 = a2 >> 24;
  v16 = HIDWORD(a2);
  v17 = a2 >> 40;
  v18 = HIWORD(a2);
  v19 = HIBYTE(a2);
  Hasher.init(_seed:)(v22, 0);
  v21[0] = v4;
  v21[1] = v5;
  v21[2] = v6;
  v21[3] = v7;
  v21[4] = v8;
  v21[5] = v9;
  v21[6] = v10;
  v21[7] = v11;
  v21[8] = v3;
  v21[9] = v12;
  v21[10] = v14;
  v21[11] = v15;
  v21[12] = v16;
  v21[13] = v17;
  v21[14] = v18;
  v21[15] = v19;
  Hasher.combine(bytes:)(v21, v22);
  Hasher._combine(_:)(a3);
  return Hasher._finalize()();
}

uint64_t sub_1000673E0()
{
  uint64_t v0;

  return sub_100067174(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned __int8 *)(v0 + 16));
}

void sub_1000673EC()
{
  uint64_t v0;

  sub_100066EC0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

BOOL sub_1000673F8(uint64_t a1, uint64_t a2)
{
  return sub_100067178(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

Swift::Int sub_100067414()
{
  uint64_t v0;

  return sub_100067294(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_100067420(uint64_t a1)
{
  uint64_t v1;

  sub_1000671B0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_10006742C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_1000671B0((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t getEnumTagSinglePayload for Connection.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Connection.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100067554 + 4 * byte_10021EE9B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100067588 + 4 * byte_10021EE96[v4]))();
}

uint64_t sub_100067588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100067598);
  return result;
}

uint64_t sub_1000675A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000675ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000675B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000675B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Connection.State()
{
  return &type metadata for Connection.State;
}

unint64_t sub_1000675D8()
{
  unint64_t result;

  result = qword_1002AC690;
  if (!qword_1002AC690)
  {
    result = swift_getWitnessTable(&unk_10021EF58, &type metadata for Connection.State);
    atomic_store(result, (unint64_t *)&qword_1002AC690);
  }
  return result;
}

uint64_t sub_100067614()
{
  uint64_t v0;
  uint64_t v1;

  return UUID.init(uuid:)(v0, *(_QWORD *)(v1 - 168), *(_QWORD *)(v1 - 160), *(_QWORD *)(v1 - 152), *(_QWORD *)(v1 - 144), *(_QWORD *)(v1 - 136), *(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 120));
}

uint64_t sub_100067658()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 112) + 8))(v0, *(_QWORD *)(v1 - 104));
}

uint64_t sub_100067670()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100067680()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000599D0(8, v0, v1);
}

uint64_t sub_100067690()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

uint64_t sub_10006769C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 88));
}

uint64_t sub_1000676A4()
{
  return static String._fromSubstring(_:)();
}

uint64_t sub_1000676AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
  return 0x63656E6E6F632820;
}

void sub_1000676C8()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
}

void sub_1000676D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[2];
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  uint64_t v53;

  v2 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v50 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v43 - v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = type metadata accessor for UniversalControlDevice(0);
    sub_10000E330(&qword_1002AC880, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v52, v9, v10, v11);
    a1 = v52[0];
    v48 = v52[1];
    v13 = v52[2];
    v14 = v52[3];
    v15 = v52[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 56);
    v48 = a1 + 56;
    v13 = ~v16;
    v18 = -v16;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v15 = v19 & v17;
    swift_bridgeObjectRetain();
    v14 = 0;
  }
  v43[1] = v13;
  v46 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v47 = (unint64_t)(v13 + 64) >> 6;
  v49 = enum case for UniversalControlDevice.DeviceType.mac(_:);
  v44 = _swiftEmptyArrayStorage;
  v45 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v20 = v14;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    v23 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v23)
      goto LABEL_41;
    v24 = v23;
    v51 = v23;
    v25 = type metadata accessor for UniversalControlDevice(0);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v53, &v51, v45, v25, 7);
    v26 = v53;
    v27 = swift_unknownObjectRelease(v24);
    v14 = v20;
    if (!v26)
      goto LABEL_41;
LABEL_34:
    dispatch thunk of UniversalControlDevice.deviceType.getter(v27);
    v32 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v5, v49, v2);
    v33 = static UniversalControlDevice.DeviceType.== infix(_:_:)(v7, v5);
    v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v5, v2);
    v35 = ((uint64_t (*)(char *, uint64_t))v34)(v7, v2);
    if ((v33 & 1) != 0)
    {
      v36 = dispatch thunk of UniversalControlDevice.id.getter(v35);
      v38 = v37;
      swift_release();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100077ACC();
        v44 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v39 = v44[2];
      v40 = v39 + 1;
      if (v39 >= v44[3] >> 1)
      {
        v43[0] = v39 + 1;
        sub_100077ACC();
        v40 = v43[0];
        v44 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v41 = v44;
      v44[2] = v40;
      v42 = &v41[2 * v39];
      v42[4] = v36;
      v42[5] = v38;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_release();
    }
  }
  if (v15)
  {
    v21 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v22 = v21 | (v14 << 6);
LABEL_33:
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
    swift_retain();
    if (!v31)
      goto LABEL_41;
    goto LABEL_34;
  }
  v28 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v28 >= v47)
      goto LABEL_41;
    v29 = *(_QWORD *)(v48 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v20 + 2;
      if (v20 + 2 >= v47)
        goto LABEL_41;
      v29 = *(_QWORD *)(v48 + 8 * v14);
      if (!v29)
      {
        v14 = v20 + 3;
        if (v20 + 3 >= v47)
          goto LABEL_41;
        v29 = *(_QWORD *)(v48 + 8 * v14);
        if (!v29)
        {
          v14 = v20 + 4;
          if (v20 + 4 >= v47)
            goto LABEL_41;
          v29 = *(_QWORD *)(v48 + 8 * v14);
          if (!v29)
          {
            v14 = v20 + 5;
            if (v20 + 5 >= v47)
              goto LABEL_41;
            v29 = *(_QWORD *)(v48 + 8 * v14);
            if (!v29)
            {
              v30 = v20 + 6;
              while (v30 < v47)
              {
                v29 = *(_QWORD *)(v48 + 8 * v30++);
                if (v29)
                {
                  v14 = v30 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              sub_10005E1F4(a1);
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v15 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v14 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

void sub_100067B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for UniversalControlDevice(0);
    sub_10000E330(&qword_1002AC880, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    v6 = Set.Iterator.init(_cocoa:)(v30, v3, v4, v5);
    v1 = v30[0];
    v28 = v30[1];
    v7 = v30[2];
    v8 = v30[3];
    v9 = v30[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 < v13)
    {
      v23 = *(_QWORD *)(v28 + 8 * v22);
      v16 = v8 + 1;
      if (v23)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v23 = *(_QWORD *)(v28 + 8 * v16);
      if (v23)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v23 = *(_QWORD *)(v28 + 8 * v16);
      if (v23)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v23 = *(_QWORD *)(v28 + 8 * v16);
      if (v23)
      {
LABEL_31:
        v14 = (v23 - 1) & v23;
        v15 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_32:
        v25 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
        swift_retain();
        if (v25)
        {
          do
          {
            v26 = dispatch thunk of UniversalControlDevice.id.getter(v21);
            if (!static UniversalControlUUID.compare(lhs:rhs:)(v26, v27))
              break;
            v6 = (_QWORD *)swift_release();
            v8 = v16;
            v9 = v14;
            if ((v1 & 0x8000000000000000) == 0)
              goto LABEL_11;
LABEL_13:
            v17 = __CocoaSet.Iterator.next()(v6);
            if (!v17)
              break;
            v18 = v17;
            v29 = v17;
            v19 = type metadata accessor for UniversalControlDevice(0);
            swift_unknownObjectRetain(v18);
            swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
            v20 = v31;
            v21 = swift_unknownObjectRelease(v18);
            v16 = v8;
            v14 = v9;
          }
          while (v20);
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v23 = *(_QWORD *)(v28 + 8 * v16);
        if (!v23)
        {
          v24 = v8 + 6;
          while (v24 < v13)
          {
            v23 = *(_QWORD *)(v28 + 8 * v24++);
            if (v23)
            {
              v16 = v24 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_10005E1F4(v1);
    return;
  }
  __break(1u);
}

BOOL sub_100067E20(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v1 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t sub_100067E58()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  sub_10002D108(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_release();
  swift_release();
  return v0;
}

double sub_100067EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  sub_100068420(v2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100067ED8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  v6 = *(_BYTE *)(v3 + 40);
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  return sub_1000689CC(v4, v5, v6);
}

uint64_t sub_100067EFC(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 41);
  *(_BYTE *)(v1 + 41) = a1;
  return sub_100068A5C(v2);
}

uint64_t sub_100067F0C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 112);
  *(_BYTE *)(v1 + 112) = a1;
  return sub_100068AE0(v2);
}

void sub_100067F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  sub_10006D1AC();
  if (!v3)
    goto LABEL_3;
LABEL_2:
  sub_10006D328();
  while (1)
  {
    sub_10006D348(v6, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8 + 8), v7);
    if (v3)
      goto LABEL_2;
LABEL_3:
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v9 >= v2)
      goto LABEL_21;
    ++v5;
    if (!*(_QWORD *)(v1 + 8 * v9))
    {
      v5 = v9 + 1;
      if (v9 + 1 >= v2)
        goto LABEL_21;
      if (!*(_QWORD *)(v1 + 8 * v5))
      {
        v5 = v9 + 2;
        if (v9 + 2 >= v2)
          goto LABEL_21;
        if (!*(_QWORD *)(v1 + 8 * v5))
        {
          v5 = v9 + 3;
          if (v9 + 3 >= v2)
            goto LABEL_21;
          if (!*(_QWORD *)(v1 + 8 * v5))
            break;
        }
      }
    }
LABEL_18:
    sub_10006D310();
  }
  v10 = v9 + 4;
  if (v10 >= v2)
  {
LABEL_21:
    sub_10002645C();
    return;
  }
  if (*(_QWORD *)(v1 + 8 * v10))
  {
    v5 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v5 >= v2)
      goto LABEL_21;
    ++v10;
    if (*(_QWORD *)(v1 + 8 * v5))
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100068024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (unint64_t *)(a1 + 40);
    do
    {
      sub_10006D348(a1, *(v5 - 1), *v5, a4);
      v5 += 2;
      --v4;
    }
    while (v4);
    sub_10000E410();
    return a2;
  }
  else
  {
    v6 = a2;
    sub_10000E410();
  }
  return v6;
}

void sub_10006808C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD v13[3];
  _QWORD v14[4];
  unint64_t v15;

  v13[2] = a2;
  sub_100043078(v14, a1);
  v2 = v14[0];
  v3 = v14[1];
  v4 = v14[3];
  v5 = v15;
  v6 = (unint64_t)(v14[2] + 64) >> 6;
  if (!v15)
    goto LABEL_3;
LABEL_2:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v8 = v7 | (v4 << 6);
  while (1)
  {
    sub_100119698((uint64_t)v13, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v8 + 8));
    if (v5)
      goto LABEL_2;
LABEL_3:
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v9 >= v6)
      goto LABEL_21;
    v10 = *(_QWORD *)(v3 + 8 * v9);
    v11 = v4 + 1;
    if (!v10)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v10 = *(_QWORD *)(v3 + 8 * v11);
      if (!v10)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v10 = *(_QWORD *)(v3 + 8 * v11);
        if (!v10)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v10 = *(_QWORD *)(v3 + 8 * v11);
          if (!v10)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v10 = *(_QWORD *)(v3 + 8 * v11);
            if (!v10)
            {
              v12 = v4 + 6;
              while (v12 < v6)
              {
                v10 = *(_QWORD *)(v3 + 8 * v12++);
                if (v10)
                {
                  v11 = v12 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              sub_10002645C();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    v4 = v11;
  }
  __break(1u);
}

void sub_1000681C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v6 = 0;
  v11 = a2;
  sub_10006D1AC();
  if (!v4)
    goto LABEL_3;
LABEL_2:
  sub_10006D328();
  while (1)
  {
    sub_10011A130((uint64_t)&v10, *(_BYTE *)(*(_QWORD *)(a1 + 48) + v7));
    if (v4)
      goto LABEL_2;
LABEL_3:
    v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v8 >= v3)
      goto LABEL_21;
    ++v6;
    if (!*(_QWORD *)(v2 + 8 * v8))
    {
      v6 = v8 + 1;
      if (v8 + 1 >= v3)
        goto LABEL_21;
      if (!*(_QWORD *)(v2 + 8 * v6))
      {
        v6 = v8 + 2;
        if (v8 + 2 >= v3)
          goto LABEL_21;
        if (!*(_QWORD *)(v2 + 8 * v6))
        {
          v6 = v8 + 3;
          if (v8 + 3 >= v3)
            goto LABEL_21;
          if (!*(_QWORD *)(v2 + 8 * v6))
            break;
        }
      }
    }
LABEL_18:
    sub_10006D310();
  }
  v9 = v8 + 4;
  if (v9 >= v3)
  {
LABEL_21:
    sub_10002645C();
    return;
  }
  if (*(_QWORD *)(v2 + 8 * v9))
  {
    v6 = v9;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v6 >= v3)
      goto LABEL_21;
    ++v9;
    if (*(_QWORD *)(v2 + 8 * v6))
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1000682D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  v8 = a2;
  if (!((unint64_t)result >> 62))
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return v2;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v4 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }
      else
      {
        v6 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_retain();
      }
      sub_100119DD8(&v7, v6);
      swift_release();
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000683B4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002AC6A0);
  sub_100006FB4(v0, (uint64_t)qword_1002AC6A0);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1347635524, 0xE400000000000000);
}

void sub_100068420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  void (*v60)(_BYTE *, _QWORD);
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  _QWORD *v72;

  v67 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v3 = sub_100062044(a1);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = v3;
    v72 = _swiftEmptyArrayStorage;
    sub_1000586CC();
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v6 = a1;
      else
        v6 = a1 & 0xFFFFFFFFFFFFFF8;
      v7 = __CocoaSet.startIndex.getter(v6);
      v9 = 1;
    }
    else
    {
      v7 = sub_10019D15C(a1);
      v9 = v10 & 1;
    }
    v69 = v7;
    v70 = v8;
    v71 = v9;
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_55;
    }
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v11 = a1;
    v65 = v11;
    do
    {
      v13 = v69;
      v12 = v70;
      v14 = v71;
      v15 = sub_10006CD0C(v69, v70, v71, a1);
      v16 = dispatch thunk of UniversalControlDevice.id.getter(v15);
      v18 = v17;
      swift_release();
      v19 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0)
      {
        sub_1000586CC();
        v19 = v72;
      }
      v20 = v19[2];
      if (v20 >= v19[3] >> 1)
      {
        sub_1000586CC();
        v19 = v72;
      }
      v19[2] = v20 + 1;
      v21 = &v19[2 * v20];
      v21[4] = v16;
      v21[5] = v18;
      if ((a1 & 0xC000000000000001) != 0)
      {
        if ((v14 & 1) == 0)
          goto LABEL_56;
        v22 = __CocoaSet.Index.handleBitPattern.getter(v13, v12);
        if (v22)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v29 = sub_1000055B0((uint64_t *)&unk_1002AC938);
        v30 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v68, v29);
        __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v65);
        v30(v68, 0);
      }
      else
      {
        v24 = sub_10019D074(v13, v12, v14, a1);
        v26 = v25;
        v28 = v27;
        sub_100025618(v13, v12, v14);
        v69 = v24;
        v70 = v26;
        v71 = v28 & 1;
      }
      --v5;
    }
    while (v5);
    sub_100025618(v69, v70, v71);
    v4 = v72;
  }
  v32 = v67;
  v33 = sub_100062044(v67);
  if (!v33)
  {
    swift_bridgeObjectRelease();
    v39 = _swiftEmptyArrayStorage;
    goto LABEL_50;
  }
  v34 = v33;
  v72 = _swiftEmptyArrayStorage;
  sub_1000586CC();
  if ((v67 & 0xC000000000000001) != 0)
  {
    if (v67 < 0)
      v35 = v67;
    else
      v35 = v67 & 0xFFFFFFFFFFFFFF8;
    v36 = __CocoaSet.startIndex.getter(v35);
    v38 = 1;
  }
  else
  {
    v36 = sub_10019D15C(v67);
    v38 = v40 & 1;
  }
  v69 = v36;
  v70 = v37;
  v71 = v38;
  if (v34 < 0)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v41 = v67 & 0xFFFFFFFFFFFFFF8;
  if (v67 < 0)
    v41 = v67;
  v66 = v41;
  do
  {
    v43 = v69;
    v42 = v70;
    v44 = v71;
    v45 = sub_10006CD0C(v69, v70, v71, v32);
    v46 = dispatch thunk of UniversalControlDevice.id.getter(v45);
    v48 = v47;
    swift_release();
    v49 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0)
    {
      sub_1000586CC();
      v49 = v72;
    }
    v50 = v49[2];
    if (v50 >= v49[3] >> 1)
    {
      sub_1000586CC();
      v49 = v72;
    }
    v49[2] = v50 + 1;
    v51 = &v49[2 * v50];
    v51[4] = v46;
    v51[5] = v48;
    if ((v67 & 0xC000000000000001) != 0)
    {
      v32 = v67;
      if ((v44 & 1) == 0)
        goto LABEL_57;
      v52 = __CocoaSet.Index.handleBitPattern.getter(v43, v42);
      if (v52)
        v53 = swift_isUniquelyReferenced_nonNull_native(v52);
      else
        v53 = 1;
      v59 = sub_1000055B0((uint64_t *)&unk_1002AC938);
      v60 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v68, v59);
      __CocoaSet.formIndex(after:isUnique:)(v61, v53, v66);
      v60(v68, 0);
    }
    else
    {
      v32 = v67;
      v54 = sub_10019D074(v43, v42, v44, v67);
      v56 = v55;
      v58 = v57;
      sub_100025618(v43, v42, v44);
      v69 = v54;
      v70 = v56;
      v71 = v58 & 1;
    }
    --v34;
  }
  while (v34);
  sub_100025618(v69, v70, v71);
  swift_bridgeObjectRelease();
  v39 = v72;
LABEL_50:
  v62 = sub_100071340((uint64_t)v4, (uint64_t)v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v62)
    return;
  if (!*(_QWORD *)(v64 + 80))
  {
LABEL_58:
    __break(1u);
    return;
  }
  v63 = *(_QWORD *)(v64 + 88);
  swift_getObjectType(v63);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v63);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_unknownObjectRelease(v63);
  swift_bridgeObjectRelease();
}

uint64_t sub_1000689CC(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v3 + 40) & 1) != 0)
      return result;
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v3 + 40) & 1) != 0
    || (result = static UniversalControlUUID.compare(lhs:rhs:)(result, a2, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32))) != 0)
  {
LABEL_4:
    v4 = *(_QWORD *)(v3 + 80);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 + 88);
      swift_getObjectType(v5);
      swift_bridgeObjectRetain(v4);
      swift_unknownObjectRetain(v5);
      OS_dispatch_source_data_add.add(data:)(1uLL);
      swift_unknownObjectRelease(v5);
      return swift_bridgeObjectRelease(v4);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100068A5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 41) != (result & 1))
  {
    v2 = *(_QWORD *)(v1 + 80);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 88);
      swift_getObjectType(v3);
      swift_bridgeObjectRetain(v2);
      swift_unknownObjectRetain(v3);
      OS_dispatch_source_data_add.add(data:)(1uLL);
      swift_unknownObjectRelease(v3);
      return swift_bridgeObjectRelease(v2);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

#error "100068C4C: call analysis failed (funcsize=152)"

unint64_t sub_100068D70()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100068D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (**v50)(_QWORD, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (**v79)(_QWORD, uint64_t);
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;

  v2 = v1;
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v91 = *(_QWORD *)(v4 - 8);
  v92 = v4;
  sub_1000262EC();
  v6 = __chkstk_darwin(v5);
  v88 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v87 = (char *)&v76 - v8;
  v9 = type metadata accessor for DispatchTime(0);
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10000E5DC();
  v86 = v11;
  v94 = type metadata accessor for DispatchWorkItemFlags(0);
  v84 = *(_QWORD *)(v94 - 8);
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_10000E5DC();
  v83 = v13;
  v78 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v79 = *(void (***)(_QWORD, uint64_t))(v78 - 8);
  sub_1000262EC();
  __chkstk_darwin(v14);
  sub_10002641C();
  v17 = v16 - v15;
  v18 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1000262EC();
  __chkstk_darwin(v19);
  sub_10002641C();
  v22 = v21 - v20;
  v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_10002641C();
  v27 = v26 - v25;
  v82 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v82 - 8);
  sub_1000262EC();
  __chkstk_darwin(v28);
  sub_10002641C();
  v31 = v30 - v29;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = &_swiftEmptySetSingleton;
  *(_WORD *)(v2 + 40) = 257;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_BYTE *)(v2 + 112) = 0;
  v85 = a1;
  *(_QWORD *)(v2 + 48) = a1;
  sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v32 = swift_retain();
  v77 = v31;
  static DispatchQoS.userInitiated.getter(v32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v27, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v23);
  v95 = (void **)_swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC980, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v34 = v33;
  v35 = sub_1000055B0((uint64_t *)&unk_1002AB9C0);
  sub_10006D048((unint64_t *)&unk_1002AC990, (uint64_t *)&unk_1002AB9C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v35, v36, v18, v34);
  v37 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000027, 0x80000001002544D0, v31, v22, v27, 0);
  *(_QWORD *)(v2 + 56) = v37;
  sub_1000078E0(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v38 = v37;
  v39 = static OS_dispatch_source.makeUserDataOrSource(queue:)(v37);
  *(_QWORD *)(v2 + 64) = v39;
  v93 = v39;
  v95 = (void **)_swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC3B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v41 = v40;
  v42 = v38;
  v80 = v42;
  swift_unknownObjectRetain(v39);
  v43 = sub_1000055B0(&qword_1002AEEC0);
  sub_10006D048((unint64_t *)&qword_1002AC3C0, &qword_1002AEEC0);
  v44 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v43, v45, v78, v41);
  v46 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v37);

  v79[1](v17, v44);
  v76 = v46;
  *(_QWORD *)(v2 + 72) = v46;
  swift_unknownObjectRetain(v46);
  swift_retain();
  v48 = (void *)static OS_dispatch_queue.main.getter(v47);
  v49 = sub_1000088D8((uint64_t)&unk_100285108, 32);
  *(_QWORD *)(v49 + 24) = &off_1002850E8;
  swift_unknownObjectWeakInit(v49 + 16, v2);
  sub_100026AE4();
  v50 = (void (**)(_QWORD, uint64_t))sub_1000C8454(v48, (uint64_t)sub_10002D0D4, v49);
  v52 = v51;
  v78 = v51;
  sub_100026AEC();
  sub_10002645C();
  v53 = *(_QWORD *)(v2 + 80);
  v54 = *(_QWORD *)(v2 + 88);
  v79 = v50;
  *(_QWORD *)(v2 + 80) = v50;
  *(_QWORD *)(v2 + 88) = v52;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v52);
  sub_10002D108(v53, v54);
  swift_getObjectType(v52);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  v55 = v93;
  ObjectType = swift_getObjectType(v93);
  v57 = sub_1000088D8((uint64_t)&unk_100285130, 24);
  sub_10000F674(v57);
  v58 = sub_1000088D8((uint64_t)&unk_100285158, 24);
  swift_unknownObjectWeakInit(v58 + 16, v55);
  v59 = sub_1000088D8((uint64_t)&unk_100285180, 32);
  *(_QWORD *)(v59 + 16) = v57;
  *(_QWORD *)(v59 + 24) = v58;
  v97 = sub_10006CFFC;
  v98 = v59;
  v95 = _NSConcreteStackBlock;
  v96 = 1107296256;
  v60 = sub_10006D3A8((uint64_t)&unk_100285198);
  swift_retain();
  sub_100026AE4();
  v61 = v77;
  sub_10006D378();
  v62 = v83;
  sub_10006D384();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v61, v62, v60, ObjectType);
  _Block_release(v60);
  v84 = *(_QWORD *)(v84 + 8);
  ((void (*)(uint64_t, uint64_t))v84)(v62, v94);
  v81 = *(_QWORD *)(v81 + 8);
  v63 = v82;
  ((void (*)(uint64_t, uint64_t))v81)(v61, v82);
  swift_release();
  sub_100026AEC();
  swift_release();
  OS_dispatch_source.activate()();
  v64 = v76;
  v65 = swift_getObjectType(v76);
  v66 = sub_1000088D8((uint64_t)&unk_100285130, 24);
  sub_10000F674(v66);
  v97 = sub_10006D01C;
  v98 = v66;
  v95 = _NSConcreteStackBlock;
  v96 = 1107296256;
  v67 = sub_10006D3A8((uint64_t)&unk_1002851C0);
  sub_100026AE4();
  sub_10006D378();
  sub_10006D384();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v61, v62, v67, v65);
  _Block_release(v67);
  ((void (*)(uint64_t, uint64_t))v84)(v62, v94);
  ((void (*)(uint64_t, uint64_t))v81)(v61, v63);
  sub_100026AEC();
  v68 = swift_release();
  v69 = v86;
  static DispatchTime.distantFuture.getter(v68);
  v70 = v87;
  sub_10007A0C4();
  v71 = v88;
  sub_10007A0F4(v88);
  v72 = v70;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v69, v70, v71, v65);
  v73 = *(void (**)(char *, uint64_t))(v91 + 8);
  v74 = v92;
  v73(v71, v92);
  v73(v72, v74);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v69, v90);
  OS_dispatch_source.activate()();

  swift_unknownObjectRelease(v93);
  swift_unknownObjectRelease(v64);
  swift_unknownObjectRelease(v78);
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

_QWORD *sub_1000694FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t ObjectType;
  void (*v26)(_QWORD);
  char *v27;
  void (*v28)(_QWORD *, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t Strong;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(_QWORD *, _QWORD, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD aBlock[6];
  char v69[24];
  char v70[32];

  v58 = type metadata accessor for Logger(0);
  v56 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v58 - 8);
  __chkstk_darwin(v58);
  v55 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v62 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v52 - v14);
  v66 = type metadata accessor for DispatchTime(0);
  v16 = *(char **)(v66 - 8);
  v17 = __chkstk_darwin(v66);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  a1 += 16;
  swift_beginAccess(a1, v70, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a1);
  if (result)
  {
    v23 = result;
    v57 = v16;
    v65 = v21;
    v24 = a2 + 16;
    if (!result[13])
    {
      v54 = a2 + 16;
      result[13] = (*(uint64_t (**)(uint64_t))(*result + 368))(2);
      swift_release();
      v24 = v54;
    }
    ObjectType = swift_getObjectType(v23[9]);
    static DispatchTime.now()(ObjectType);
    *v15 = 10;
    v26 = *(void (**)(_QWORD))(v10 + 104);
    LODWORD(v55) = enum case for DispatchTimeInterval.seconds(_:);
    v56 = (void (*)(_QWORD *, _QWORD, uint64_t))v26;
    v26(v15);
    v27 = v65;
    + infix(_:_:)(v19, v15);
    v28 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
    v28(v15, v9);
    v58 = (uint64_t)v23;
    v29 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
    v30 = v19;
    v57 = v19;
    v31 = v9;
    v32 = v66;
    v29(v30, v66);
    sub_10007A0C4();
    sub_10007A0F4(v13);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v27, v15, v13, ObjectType);
    v28(v13, v31);
    v28(v15, v31);
    v33 = v27;
    v34 = v29;
    v29(v33, v32);
    swift_beginAccess(v24, v69, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v24);
    if (Strong)
    {
      v36 = Strong;
      swift_getObjectType(Strong);
      OS_dispatch_source.suspend()();
      v54 = *(_QWORD *)(v58 + 56);
      v37 = v57;
      static DispatchTime.now()(v38);
      *v15 = 5;
      v56(v15, v55, v31);
      v39 = v65;
      + infix(_:_:)(v37, v15);
      v28(v15, v31);
      v40 = v66;
      v53 = v34;
      v34(v37, v66);
      v41 = swift_allocObject(&unk_1002851F8, 24, 7);
      *(_QWORD *)(v41 + 16) = v36;
      aBlock[4] = sub_10006D040;
      aBlock[5] = v41;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10000E610;
      aBlock[3] = &unk_100285210;
      v42 = _Block_copy(aBlock);
      v43 = swift_unknownObjectRetain(v36);
      v44 = v59;
      static DispatchQoS.unspecified.getter(v43);
      v67 = _swiftEmptyArrayStorage;
      sub_10000E330((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v46 = v45;
      v47 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
      sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
      v48 = v62;
      v49 = v47;
      v50 = v64;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v49, v51, v64, v46);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v39, v44, v48, v42);
      _Block_release(v42);
      swift_unknownObjectRelease(v36);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v50);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v44, v61);
      v53(v39, v40);
      swift_release();
    }
    return (_QWORD *)swift_release();
  }
  return result;
}

unint64_t sub_100069B14()
{
  return 0xD00000000000001ELL;
}

void sub_100069B30(uint64_t a1)
{
  swift_getObjectType(a1);
  OS_dispatch_source.resume()();
}

uint64_t sub_100069B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(_QWORD *)(result + 104);
    *(_QWORD *)(result + 104) = 0;
    swift_release(result);
    return swift_release(v3);
  }
  return result;
}

void sub_100069BAC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x8000000100254490, "EnsembleAgent/DisplaySleepAssertionController.swift", 51, 2, 146, 0);
  __break(1u);
}

uint64_t sub_100069C04()
{
  uint64_t v0;

  sub_100067E58();
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t type metadata accessor for _BaseDisplaySleepAssertionController()
{
  return objc_opt_self(_TtC13EnsembleAgent36_BaseDisplaySleepAssertionController);
}

uint64_t sub_100069C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  sub_10002641C();
  result = sub_100069FFC(v0);
  if ((result & 1) != *(_BYTE *)(v0 + 112))
  {
    v4 = result;
    if (qword_1002A9860 != -1)
      swift_once(&qword_1002A9860, sub_1000683B4);
    v5 = type metadata accessor for Logger(0);
    sub_100006FB4(v5, (uint64_t)qword_1002AC6A0);
    v6 = swift_retain_n(v0, 8);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.default.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v43 = v9;
      v10 = swift_slowAlloc(38, -1);
      v42 = swift_slowAlloc(96, -1);
      v45 = v42;
      *(_DWORD *)v10 = 136446978;
      dispatch thunk of UniversalControlDevice.id.getter(v42);
      sub_10006D2DC();
      sub_10006D294();
      UUID.init(uuid:)(v11, v16, v12, v13, v14, v15);
      v17 = sub_10006D39C();
      v19 = v18;
      sub_10006D390();
      v20 = sub_1000599D0(8, v17, v19);
      v21 = static String._fromSubstring(_:)(v20);
      v23 = v22;
      swift_bridgeObjectRelease();
      v44 = sub_100006FCC(v21, v23, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v10 + 4);
      sub_10000F644();
      sub_1000267C4();
      *(_WORD *)(v10 + 12) = 2082;
      if ((*(_BYTE *)(v1 + 40) & 1) != 0)
      {
        v24 = 0;
        v25 = 0xE000000000000000;
      }
      else
      {
        sub_10006D2DC();
        sub_10006D294();
        UUID.init(uuid:)(v26, v27, v28, v29, v30, v31);
        v32 = sub_10006D39C();
        v34 = v33;
        sub_10006D390();
        v35 = sub_1000599D0(8, v32, v34);
        v24 = static String._fromSubstring(_:)(v35);
        v25 = v36;
        sub_1000267C4();
      }
      v44 = sub_100006FCC(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v10 + 14);
      sub_10000F644();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 22) = 2082;
      swift_bridgeObjectRetain();
      v38 = sub_100062038(v37);
      v40 = v39;
      sub_1000267C4();
      v44 = sub_100006FCC(v38, v40, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v10 + 24);
      sub_10000F644();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 32) = 1026;
      v41 = *(unsigned __int8 *)(v1 + 41);
      sub_10002645C();
      LODWORD(v44) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 4, v10 + 34);
      sub_10002645C();
      _os_log_impl((void *)&_mh_execute_header, v7, v43, "Local: %{public}s, Source: '%{public}s', Connected: %{public}s', userInUnlockedSession: %{BOOL,public}d", (uint8_t *)v10, 0x26u);
      swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v42);
      sub_100007958(v10);

    }
    else
    {

      swift_release_n(v1, 8);
    }
    return sub_100067F0C(v4 & 1);
  }
  return result;
}

uint64_t sub_100069FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD *v35;
  char v36[40];

  v2 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v34[-v8];
  v10 = *(_QWORD *)(a1 + 48);
  dispatch thunk of UniversalControlDevice.deviceType.getter(v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UniversalControlDevice.DeviceType.realityDevice(_:), v2);
  sub_10000E330((unint64_t *)&unk_1002AC870, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice.DeviceType, (uint64_t)&protocol conformance descriptor for UniversalControlDevice.DeviceType);
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v2, v11);
  v13 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v9, v2);
  if ((v12 & 1) != 0)
    return 0;
  if (*(_BYTE *)(a1 + 41) != 1)
    return 0;
  swift_bridgeObjectRetain();
  v15 = sub_100067E20(v14);
  swift_bridgeObjectRelease();
  if (v15)
    return 0;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = sub_1000055B0(&qword_1002AC0E0);
  inited = swift_initStackObject(v17, v36);
  *(_OWORD *)(inited + 16) = xmmword_10021EFD0;
  *(_QWORD *)(inited + 32) = v10;
  v35 = (_QWORD *)inited;
  specialized Array._endMutation()(inited);
  v19 = (uint64_t)v35;
  swift_bridgeObjectRetain();
  swift_retain();
  v20 = sub_1000682D0(v19, v16);
  v21 = v20;
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v23 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    sub_100067B58(v20);
    v25 = v24;
    swift_release();
    if (v25)
    {
      swift_bridgeObjectRelease();
      dispatch thunk of UniversalControlDevice.id.getter(v26);
      v27 = v23;
      return static UniversalControlUUID.compare(lhs:rhs:)(v27, v22) != 0;
    }
  }
  sub_1000676D8(v21);
  v29 = v28;
  swift_bridgeObjectRelease();
  if (!v29[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v35 = v29;
  swift_bridgeObjectRetain();
  sub_100036DCC(&v35);
  swift_bridgeObjectRelease();
  v30 = v35[2];
  if (v30)
  {
    v31 = v35[4];
    v22 = v35[5];
  }
  else
  {
    v31 = 0;
    v22 = 0;
  }
  v33 = swift_release();
  dispatch thunk of UniversalControlDevice.id.getter(v33);
  if (v30)
  {
    v27 = v31;
    return static UniversalControlUUID.compare(lhs:rhs:)(v27, v22) != 0;
  }
  return 1;
}

uint64_t sub_10006A298(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return sub_10006D2F8(a3, a1);
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void *sub_10006A330(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[24 * a2] <= __src || &__src[24 * a2] <= __dst)
      return memcpy(__dst, __src, 24 * a2);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A3FC(uint64_t a1, uint64_t a2)
{
  return sub_10006B3EC(a1, a2);
}

void *sub_10006A408(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A4D0(uint64_t a1, uint64_t a2)
{
  return sub_10006B3EC(a1, a2);
}

void *sub_10006A4DC(char *a1, uint64_t a2, char *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    if (&a3[16 * a2] <= a1 || &a1[16 * a2] <= a3)
      return sub_10006D250(a3, a1, 16 * a2);
    sub_10006D098();
    sub_10006D0E8();
  }
  result = (void *)sub_10006D0DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10006A570(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return sub_10006D2F8(a3, a1);
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void *sub_10006A608(char *a1, uint64_t a2, char *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    if (&a3[17 * a2] <= a1 || &a1[17 * a2] <= a3)
      return sub_10006D250(a3, a1, 17 * a2);
    sub_10006D098();
    sub_10006D0E8();
  }
  result = (void *)sub_10006D0DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10006A69C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D208();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_10006D340(v2, v3, v4, v5);
      v9 = sub_10006D12C();
      return sub_10006D0AC(v9, v10);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

void *sub_10006A724(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[64 * a2] <= __src || &__src[64 * a2] <= __dst)
      return memcpy(__dst, __src, a2 << 6);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A7EC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D284();
    v6 = v2 + 72 * v3;
    if (v4 + 72 * v3 > v2)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_10006D340(v2, v3, v4, v5);
      v9 = sub_10006D12C();
      return sub_10006D0AC(v9, v10);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_10006A884(uint64_t a1, uint64_t a2)
{
  return sub_10006A890(a1, a2);
}

uint64_t sub_10006A890(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D284();
    v3(0);
    sub_10006D2B4();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      v8 = sub_10006D12C();
      return sub_10006D0AC(v8, v9);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10006A920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D1EC();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      sub_10006D340(v2, v3, v4, v5);
      v9 = sub_10006D12C();
      return sub_10006D0AC(v9, v10);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_10006A9A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 72 * a2 <= a1 || a1 + 72 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006AA78(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002ACA38);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006AB68(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D284();
    sub_10006D340(v3, v4, v5, v6);
    sub_10006D2B4();
    if (!v9 && v8)
    {
      v8 = v7 >= v2;
      v9 = v7 == v2;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (v9 || !v8)
    {
      v10 = sub_10006D12C();
      return sub_10006D0AC(v10, v11);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  __break(1u);
  return result;
}

uint64_t sub_10006ABF4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 144 * a2 <= a1 || a1 + 144 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006ACC4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 96 * a2 <= a1 || a1 + 96 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002AC960);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006ADB4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_1000055B0((uint64_t *)&unk_1002AC970);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006AEA0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002AC9D8);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006AF90(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 80 * a2 <= a1 || a1 + 80 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002ACA48);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B080(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 368 * a2 <= a1 || a1 + 368 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002AC9E8);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B174(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002AC9F8);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B260(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 48 * a2 <= a1 || a1 + 48 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002AC358);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B350(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D1EC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1000055B0((uint64_t *)&unk_1002ACDA0);
      v6 = sub_10006D12C();
      return sub_10006D0AC(v6, v7);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_10006B3E0(uint64_t a1, uint64_t a2)
{
  return sub_10006B3EC(a1, a2);
}

uint64_t sub_10006B3EC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D208();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      v3(0);
      v8 = sub_10006D12C();
      return sub_10006D0AC(v8, v9);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10006B478(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D1EC();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1000055B0(&qword_1002AC898);
      v6 = sub_10006D12C();
      return sub_10006D0AC(v6, v7);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_10006B508(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D208();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      sub_1000055B0(&qword_1002ACA18);
      v6 = sub_10006D12C();
      return sub_10006D0AC(v6, v7);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_10006B598(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B664(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
      return swift_arrayInitWithCopy(a3, a1);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void *sub_10006B734(char *a1, uint64_t a2, char *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    if (&a3[8 * a2] <= a1 || &a1[8 * a2] <= a3)
      return sub_10006D250(a3, a1, 8 * a2);
    sub_10006D098();
    sub_10006D0E8();
  }
  result = (void *)sub_10006D0DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10006B7C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a2 < 0)
  {
    sub_10006D098();
    sub_10006D0F8();
  }
  else
  {
    sub_10006D284();
    v5 = v3 + 40 * v4;
    if (v2 + 40 * v4 > v3)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_1000055B0(&qword_1002ACA68);
      v8 = sub_10006D12C();
      return sub_10006D0AC(v8, v9);
    }
    sub_10006D098();
    sub_10006D0E8();
  }
  result = sub_10006D0DC(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10006B868(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_1000055B0(&qword_1002ACA60);
      return swift_arrayInitWithCopy(a3, a1);
    }
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

void sub_10006B958()
{
  sub_10006BA6C();
}

void sub_10006B974()
{
  sub_10006B990();
}

void sub_10006B990()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v3)
  {
    v12 = sub_10006D248(v7, v8, v9, v10, v11);
    v13 = (const void *)sub_1000088D8(v12, 16 * v3 + 32);
    v14 = j__malloc_size(v13);
    sub_10006D258((uint64_t)(v14 - 32) / 16);
  }
  v15 = sub_10006D180();
  if ((v2 & 1) != 0)
  {
    v1(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A920(v15, v16);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006BA34()
{
  sub_10006C6E0();
}

void sub_10006BA50()
{
  sub_10006BA6C();
}

void sub_10006BA6C()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v5 & 1) != 0)
  {
    sub_10006D0CC();
    if (v6 != v7)
    {
      sub_10006D164();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v4)
  {
    v13 = sub_10006D248(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000088D8(v13, 16 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_10006D258((uint64_t)(v15 - 32) / 16);
  }
  v16 = sub_10006D180();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006BB0C()
{
  sub_10006C4A8();
}

void sub_10006BB28()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0((uint64_t *)&unk_1002ACD90);
    v7 = (const void *)sub_1000088D8(v6, 17 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_10006D300(v8 - 32);
  }
  v9 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100078DE0(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A608(v9, v10, v11);
  }
  sub_10002645C();
  sub_10000B350();
}

void sub_10006BBC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0((uint64_t *)&unk_1002AC8D0);
    v7 = (const void *)sub_1000088D8(v6, 8 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_10006D300(v8 - 32);
  }
  v9 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100078D38(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006B734(v9, v10, v11);
  }
  sub_10002645C();
  sub_10000B350();
}

void sub_10006BC68()
{
  sub_10006BC84();
}

void sub_10006BC84()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(_QWORD);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10006D140();
  if ((v8 & 1) != 0)
  {
    sub_10006D0CC();
    if (v12 != v13)
    {
      sub_10006D164();
      if (v12)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v11 = v7;
  }
  if (v11 <= *(_QWORD *)(v0 + 16))
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v11;
  if (!v14)
    goto LABEL_17;
  sub_10006D248(v6, v7, v8, v9, v10);
  v15 = v2(0);
  v16 = (const void *)sub_10006D224(v15);
  v17 = j__malloc_size(v16);
  if (!v4)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v17 - v5 == 0x8000000000000000 && v4 == -1)
    goto LABEL_22;
  sub_10006D258((uint64_t)(v17 - v5) / v4);
LABEL_17:
  v19 = v2(0);
  v20 = sub_10006D264(v19);
  if ((v3 & 1) != 0)
  {
    v1(v20);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A890(v20, v21);
  }
  sub_10002645C();
  sub_10000E4E0();
}

void sub_10006BD5C()
{
  sub_10006BD78();
}

void sub_10006BD78()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v3)
  {
    v12 = sub_10006D248(v7, v8, v9, v10, v11);
    v13 = (const void *)sub_1000088D8(v12, 8 * v3 + 32);
    v14 = j__malloc_size(v13);
    sub_10006D258((uint64_t)(v14 - 32) / 8);
  }
  v15 = sub_10006D180();
  if ((v2 & 1) != 0)
  {
    v1(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A69C(v15, v16);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006BE1C()
{
  sub_10006BD78();
}

char *sub_10006BE38(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000055B0((uint64_t *)&unk_1002AC0D0);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 64);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100078F2C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10006A724(v14, v8, v13);
  }
  swift_release();
  return v11;
}

void sub_10006BF18()
{
  sub_10006BC84();
}

void sub_10006BF34()
{
  sub_10006BF50();
}

void sub_10006BF50()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v3)
  {
    v12 = sub_10006D248(v7, v8, v9, v10, v11);
    v13 = (const void *)sub_1000088D8(v12, 72 * v3 + 32);
    v14 = j__malloc_size(v13);
    sub_10006D258((uint64_t)(v14 - 32) / 72);
  }
  v15 = sub_10006D180();
  if ((v2 & 1) != 0)
  {
    v1(v15);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A7EC(v15, v16);
  }
  sub_10002645C();
  sub_10002D8A4();
}

void sub_10006BFF8()
{
  sub_10006BC84();
}

void sub_10006C014()
{
  sub_10006B990();
}

void sub_10006C030()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10006D140();
  if ((v8 & 1) != 0)
  {
    sub_10006D0CC();
    if (v12 != v13)
    {
      sub_10006D164();
      if (v12)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v11 = v7;
  }
  if (v11 <= *(_QWORD *)(v0 + 16))
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v11;
  if (!v14)
    goto LABEL_17;
  sub_10006D248(v6, v7, v8, v9, v10);
  v15 = sub_1000055B0(v2);
  v16 = (const void *)sub_10006D224(v15);
  v17 = j__malloc_size(v16);
  if (!v4)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v17 - v5 == 0x8000000000000000 && v4 == -1)
    goto LABEL_22;
  sub_10006D258((uint64_t)(v17 - v5) / v4);
LABEL_17:
  v19 = sub_1000055B0(v2);
  v20 = sub_10006D264(v19);
  if ((v3 & 1) != 0)
  {
    v1(v20);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006AB68(v20, v21);
  }
  sub_10002645C();
  sub_10000E4E0();
}

void sub_10006C108()
{
  sub_10006C030();
}

void sub_10006C124()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002AC9C8);
    v7 = (_QWORD *)sub_1000088D8(v6, 72 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100078F28(v8);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006A9A8(v8, v9, v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C1BC()
{
  sub_10006C8E0();
}

void sub_10006C1D8()
{
  sub_10006C030();
}

void sub_10006C1F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0((uint64_t *)&unk_1002ACA50);
    v7 = (_QWORD *)sub_1000088D8(v6, 144 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_10007912C(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006ABF4((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C28C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002AC958);
    v7 = (_QWORD *)sub_1000088D8(v6, 96 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100079188(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006ACC4((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C324()
{
  sub_10006C4A8();
}

void sub_10006C340()
{
  sub_10006C8E0();
}

void sub_10006C35C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002ACA40);
    v7 = (_QWORD *)sub_1000088D8(v6, 80 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_1000791E4(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006AF90((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C3F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002AC9E0);
    v7 = (_QWORD *)sub_1000088D8(v6, 368 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100079240(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006B080((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C48C()
{
  sub_10006C4A8();
}

void sub_10006C4A8()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v5 & 1) != 0)
  {
    sub_10006D0CC();
    if (v6 != v7)
    {
      sub_10006D164();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v4)
  {
    v13 = sub_10006D248(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000088D8(v13, 32 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_10006D258((uint64_t)(v15 - 32) / 32);
  }
  v16 = sub_10006D180();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C548()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002AA680);
    v7 = (_QWORD *)sub_1000088D8(v6, 48 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_10007929C(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006B260((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C5E0()
{
  sub_10006BA6C();
}

void sub_10006C5FC()
{
  sub_10006BA6C();
}

void sub_10006C618()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;

  sub_10006D1A0();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v3)
  {
    v7 = sub_1000055B0(&qword_1002AC0E0);
    v8 = (_QWORD *)sub_1000088D8(v7, 8 * v3 + 32);
    v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = (2 * ((uint64_t)(v9 - 32) / 8)) | 1;
  }
  v10 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_100078D38(v10, v11, v12);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006B508((uint64_t)v10, v11);
  }
  sub_10002645C();
  sub_10000B350();
}

void sub_10006C6C4()
{
  sub_10006C6E0();
}

void sub_10006C6E0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v5 & 1) != 0)
  {
    sub_10006D0CC();
    if (v6 != v7)
    {
      sub_10006D164();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v4)
  {
    v13 = sub_10006D248(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000088D8(v13, 8 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_10006D258((uint64_t)(v15 - 32) / 8);
  }
  v16 = sub_10006D180();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C780()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v4 != v5)
    {
      sub_10006D164();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v2)
  {
    v6 = sub_1000055B0(&qword_1002AC930);
    v7 = (_QWORD *)sub_1000088D8(v6, 40 * v2 + 32);
    sub_10006D108(v7);
  }
  v8 = (char *)sub_10006D170();
  if ((v1 & 1) != 0)
  {
    sub_1000792F8(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    sub_10006B664((unint64_t)v8, v9, (unint64_t)v10);
  }
  sub_10002645C();
  sub_10002644C();
}

void sub_10006C818()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;

  sub_10006D1A0();
  if ((v4 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D154();
  if (v3)
  {
    v7 = sub_1000055B0(&qword_1002ACA10);
    v8 = (char *)sub_1000088D8(v7, 8 * v3 + 32);
    v9 = j__malloc_size(v8);
    sub_10006D300(v9 - 32);
  }
  else
  {
    v8 = (char *)_swiftEmptyArrayStorage;
  }
  v10 = v8 + 32;
  v11 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v8 != v0 || &v11[8 * v2] <= v10)
      memmove(v8 + 32, v11, 8 * v2);
    *((_QWORD *)v0 + 2) = 0;
  }
  else
  {
    sub_10006B734(v0 + 32, v2, v10);
  }
  sub_10002645C();
  sub_10000B350();
}

void sub_10006C8E0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;

  sub_10006D140();
  if ((v5 & 1) != 0)
  {
    sub_10006D0CC();
    if (v6 != v7)
    {
      sub_10006D164();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  sub_10006D190();
  if (v4)
  {
    v13 = sub_10006D248(v8, v9, v10, v11, v12);
    v14 = (const void *)sub_1000088D8(v13, 24 * v4 + 32);
    v15 = j__malloc_size(v14);
    sub_10006D258((uint64_t)(v15 - 32) / 24);
  }
  v16 = sub_10006D180();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  sub_10002645C();
  sub_10002D8A4();
}

void sub_10006C984()
{
  char *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  sub_10006D1A0();
  if ((v3 & 1) != 0)
  {
    sub_10006D0CC();
    if (v5 != v6)
    {
      sub_10006D164();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10006D0BC();
    }
  }
  else
  {
    v4 = v2;
  }
  v7 = *((_QWORD *)v0 + 2);
  if (v4 <= v7)
    v8 = *((_QWORD *)v0 + 2);
  else
    v8 = v4;
  if (v8)
  {
    v9 = sub_1000055B0(&qword_1002AC888);
    v10 = (char *)sub_1000088D8(v9, 16 * v8 + 32);
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v7;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)_swiftEmptyArrayStorage;
  }
  v12 = v10 + 32;
  v13 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v10 != v0 || &v13[16 * v7] <= v12)
      memmove(v12, v13, 16 * v7);
    *((_QWORD *)v0 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v7);
  }
  sub_10000E410();
  sub_10000B350();
}

void sub_10006CA50()
{
  sub_10006C984();
}

void sub_10006CA64()
{
  sub_10006D1E0();
  sub_10006D2D0();
}

void sub_10006CA94()
{
  sub_10006D1E0();
  sub_10006D360();
}

void sub_10006CAC4()
{
  sub_10006D1E0();
  sub_10006D36C();
}

void sub_10006CAF4()
{
  sub_10006D1E0();
  sub_10006D360();
}

void sub_10006CB24()
{
  sub_10006D1E0();
  sub_10006C4A8();
}

void sub_10006CB5C()
{
  sub_10006BBC8();
}

void sub_10006CB70()
{
  sub_10006D1E0();
  sub_10006BD78();
}

void sub_10006CBA8()
{
  sub_10006D1E0();
  sub_10006BF50();
}

char *sub_10006CBE0(uint64_t a1)
{
  return sub_10006BE38(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10006CBF4()
{
  sub_10006D1E0();
  sub_10006D354();
}

void sub_10006CC24()
{
  sub_10006D1E0();
  sub_10006D2D0();
}

uint64_t sub_10006CC54(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10006CC68()
{
  sub_10006D1E0();
  sub_10006D2D0();
}

void sub_10006CC98()
{
  sub_10006D1E0();
  sub_10006D354();
}

void sub_10006CCC8()
{
  sub_10006C124();
}

void sub_10006CCDC()
{
  sub_10006D1E0();
  sub_10006D36C();
}

uint64_t sub_10006CD0C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          swift_retain();
          return v10;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(result, a2);
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v11 = __CocoaSet.Index.element.getter(v6, a2);
      v21 = v11;
      v12 = type metadata accessor for UniversalControlDevice(0);
      swift_unknownObjectRetain(v11);
      swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v13 = v22;
      swift_unknownObjectRelease(v11);
      v23 = v13;
      v14 = *(_QWORD *)(a4 + 40);
      sub_10000E330(&qword_1002AC880, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v12, v15);
      v17 = -1 << *(_BYTE *)(a4 + 32);
      v6 = v16 & ~v17;
      if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        v18 = ~v17;
        sub_10000E330((unint64_t *)&unk_1002AC0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
        v20 = v19;
        while (1)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v23, v12, v20) & 1) != 0)
            break;
          v6 = (v6 + 1) & v18;
          if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.element(at:)(result, a2, v7);
    v22 = v8;
    v9 = type metadata accessor for UniversalControlDevice(0);
    swift_unknownObjectRetain(v8);
    swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
    v10 = v23;
    swift_unknownObjectRelease(v8);
    return v10;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10006CF74()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006CF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10006CFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10006CFD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_10006CFFC()
{
  uint64_t v0;

  return sub_1000694FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006D004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006D014(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10006D01C()
{
  uint64_t v0;

  return sub_100069B54(v0);
}

uint64_t sub_10006D024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10006D040()
{
  uint64_t v0;

  sub_100069B30(*(_QWORD *)(v0 + 16));
}

void sub_10006D048(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_10000DCA0(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_1000050D4();
}

uint64_t sub_10006D0AC(uint64_t a1, uint64_t a2)
{
  return swift_arrayInitWithCopy(a1, a2);
}

uint64_t sub_10006D0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

size_t sub_10006D108(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_10006D12C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10006D170()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_10006D180()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_10006D224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

uint64_t sub_10006D248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000055B0(a5);
}

void *sub_10006D250(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

void sub_10006D258(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t sub_10006D264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

void sub_10006D2D0()
{
  sub_10006BC84();
}

uint64_t sub_10006D2F8(uint64_t a1, uint64_t a2)
{
  return swift_arrayInitWithCopy(a1, a2);
}

void sub_10006D300(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_10006D340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1000055B0(a4);
}

void sub_10006D348(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100119698((uint64_t)va, a2, a3);
}

void sub_10006D354()
{
  sub_10006C030();
}

void sub_10006D360()
{
  sub_10006BA6C();
}

void sub_10006D36C()
{
  sub_10006C8E0();
}

uint64_t sub_10006D378()
{
  uint64_t v0;

  return j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v0);
}

uint64_t sub_10006D384()
{
  return sub_10002DEB8();
}

uint64_t sub_10006D390()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10006D39C()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

void *sub_10006D3A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = v1;
  *(_QWORD *)(v2 - 128) = a1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t initializeBufferWithCopyOfBuffer for NotificationAlert(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_10006D408 + 4 * byte_10021F0A0[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NotificationAlert(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 2:
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(a1 + 16);
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(a1 + 24);
LABEL_4:
      result = swift_errorRelease(v4);
      break;
    case 3:
      swift_bridgeObjectRelease();
      v5 = a1 + *(int *)(sub_1000055B0(&qword_1002B28F0) + 48);
      v6 = type metadata accessor for URL(0);
      result = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v5, 1, v6);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for NotificationAlert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10006D67C + 4 * byte_10021F0A8[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_10006D67C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[1];
  *v0 = *v3;
  v0[1] = v4;
  v5 = v3[2];
  swift_bridgeObjectRetain();
  swift_errorRetain(v5);
  v0[2] = v5;
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t assignWithCopy for NotificationAlert(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_10006D8F4(result);
    v5 = (char *)&loc_10006D7D8 + 4 * byte_10021F0AC[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_10006D8F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotificationAlert(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NotificationAlert(uint64_t a1)
{
  uint64_t result;

  result = qword_1002ACAE0;
  if (!qword_1002ACAE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationAlert);
  return result;
}

_OWORD *initializeWithTake for NotificationAlert(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_1000055B0(&qword_1002B28F0) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
    {
      v10 = sub_1000055B0(qword_1002ABCC8);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 3);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for NotificationAlert(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10006D8F4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_1000055B0(&qword_1002B28F0) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for URL(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9))
      {
        v10 = sub_1000055B0(qword_1002ABCC8);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 3);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006DB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_10006DB9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[4];

  v5[0] = &unk_10021F0C8;
  v5[1] = &unk_10021F0E0;
  v5[2] = &unk_10021F0C8;
  sub_10006DC2C(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_10021F0F8, *(_QWORD *)(v2 - 8) + 64);
    v5[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v5);
  }
}

void sub_10006DC2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002ACAF0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002ACAF0);
  }
}

void sub_10006DC80(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3[2];
  if (!v3
    || ((v7 = a3[4], v8 = a3[5], v7 == a1) ? (v9 = v8 == a2) : (v9 = 0),
        v9 || (sub_10000E3A4(v7, v8) & 1) != 0 || v3 == 1))
  {
LABEL_9:
    sub_10002644C();
  }
  else
  {
    v10 = a3 + 7;
    v11 = 1;
    while (1)
    {
      v12 = v11 + 1;
      if (__OFADD__(v11, 1))
        break;
      v13 = *(v10 - 1);
      v14 = *v10;
      if ((v13 != a1 || v14 != a2) && (sub_10000E3A4(v13, v14) & 1) == 0)
      {
        v10 += 2;
        ++v11;
        if (v12 != v3)
          continue;
      }
      goto LABEL_9;
    }
    __break(1u);
  }
}

_QWORD *sub_10006DD20(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v23[2];
  id v24;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v7 = _swiftEmptyArrayStorage;
    v8 = 4;
    v20 = v6;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v24 = v9;
      sub_10006FBF0(&v24, a2, a3, v23);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      v12 = v23[0];
      if (v23[0])
      {
        v13 = v23[1];
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_100077D6C();
          v7 = v16;
        }
        v14 = v7[2];
        if (v14 >= v7[3] >> 1)
        {
          sub_100077D6C();
          v7 = v17;
        }
        v7[2] = v14 + 1;
        v15 = &v7[2 * v14];
        v15[4] = v12;
        v15[5] = v13;
        v6 = v20;
      }
      ++v8;
      if (v11 == v6)
        goto LABEL_24;
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v7 = _swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v7;
}

_QWORD *sub_10006DEF4(uint64_t a1, uint64_t (*a2)(__n128))
{
  uint64_t v2;
  uint64_t v4;
  id *v5;
  _QWORD *v6;
  id v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  v5 = (id *)(v4 + 40);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v7 = *v5;
    v8 = swift_retain();
    v9 = a2(v8);
    v11 = v10;

    swift_release();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_100077D50();
        v6 = v14;
      }
      v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_100077D50();
        v6 = v15;
      }
      v6[2] = v12 + 1;
      v13 = &v6[2 * v12];
      v13[4] = v9;
      v13[5] = v11;
    }
    v5 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v6;
}

_QWORD *sub_10006E024(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v3 = a1;
  v30 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_29;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v22 = v3;
    v5 = 0;
    v25 = v3 & 0xFFFFFFFFFFFFFF8;
    v26 = v3 & 0xC000000000000001;
    v6 = a2 & 0xFFFFFFFFFFFFFF8;
    v23 = i;
    if (a2 < 0)
      v6 = a2;
    v21 = v6;
    v24 = v3 + 32;
    while (1)
    {
      if (v26)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v22);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v25 + 16))
          goto LABEL_27;
        v7 = *(_QWORD *)(v24 + 8 * v5);
        swift_retain();
      }
      v8 = __OFADD__(v5, 1);
      v9 = v5 + 1;
      if (v8)
        goto LABEL_28;
      v27 = v9;
      if ((unint64_t)a2 >> 62)
        break;
      v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      sub_1000432E0();
      if (v3)
        goto LABEL_12;
LABEL_19:
      v16 = sub_10000E50C();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v3 = v30[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v3);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v7);
      specialized ContiguousArray._endMutation()(v17);
LABEL_21:
      v5 = v27;
      if (v27 == v23)
      {
        v18 = v30;
        goto LABEL_34;
      }
    }
    sub_1000432E0();
    v3 = _CocoaArrayWrapper.endIndex.getter(v21);
    if (!v3)
      goto LABEL_19;
LABEL_12:
    v10 = type metadata accessor for UniversalControlDisplay(0);
    v11 = 4;
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a2);
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 8 * v11);
        swift_retain();
      }
      v13 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v28 = v7;
      v29 = v12;
      v14 = sub_100066C34(&qword_1002ACC88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(&v29, &v28, v10, v14);
      swift_release();
      if ((v15 & 1) != 0)
      {
        swift_release();
        sub_10000E50C();
        goto LABEL_21;
      }
      ++v11;
      if (v13 == v3)
        goto LABEL_19;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (v3 < 0)
      v19 = v3;
    else
      v19 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  v18 = _swiftEmptyArrayStorage;
LABEL_34:
  sub_10000E50C();
  swift_bridgeObjectRelease();
  return v18;
}

void sub_10006E270(uint64_t a1, uint64_t (*a2)(uint64_t, id))
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  unint64_t v10;
  __int128 v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = 0;
    do
    {
      v6 = v5;
      while (1)
      {
        if (v6 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v11 = *(_OWORD *)(a1 + 32 + 16 * v6);
        v5 = v6 + 1;
        v7 = *(_QWORD *)(a1 + 32 + 16 * v6);
        swift_retain();
        v8 = *((id *)&v11 + 1);
        if ((a2(v7, v8) & 1) != 0)
          break;

        swift_release();
        ++v6;
        if (v3 == v5)
          goto LABEL_13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_100058950();
      v9 = v11;
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_100058950();
        v9 = v11;
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v10 + 4] = v9;
    }
    while (v3 - 1 != v6);
  }
LABEL_13:
  swift_bridgeObjectRelease();
}

void *sub_10006E3F4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v22 = v5;
    v23 = v5 & 0xC000000000000001;
    v7 = 4;
    while (1)
    {
      v8 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5) : *(id *)(v5 + 8 * v7);
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v10 = v6;
      v11 = v8;
      v12 = a3;
      v13 = objc_msgSend(v8, "identifier");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      a3 = v12;
      v17 = v14 == a2 && v16 == v12;
      if (v17)
      {
        swift_bridgeObjectRelease(v22);
        v19 = v12;
LABEL_18:
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v19);
        return v11;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, v12, 0);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        v19 = v22;
        goto LABEL_18;
      }

      ++v7;
      v6 = v10;
      v17 = v9 == v10;
      v5 = v22;
      if (v17)
      {
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v22);
        return 0;
      }
    }
    __break(1u);
LABEL_20:
    if (v5 < 0)
      v20 = v5;
    else
      v20 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
  }
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v5);
  return 0;
}

void *sub_10006E5A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = sub_100071A1C(v5, (SEL *)&selRef_uniqueId);
      v10 = v9;
      v11 = sub_100071A1C(a2, (SEL *)&selRef_hardwareIdentifier);
      if (!v10)
      {
        if (!v12)
        {
LABEL_20:

LABEL_22:
          swift_bridgeObjectRelease();
          return v6;
        }
LABEL_17:

        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      if (!v12)
        goto LABEL_17;
      if (v8 == v11 && v10 == v12)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_20;

LABEL_18:
      ++v4;
      if (v7 == v3)
        goto LABEL_28;
    }
    __break(1u);
LABEL_24:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_28:

  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_10006E778(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v5 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100026518();
  if (a2)
  {
    UUID.init(uuidString:)(a1, a2);
    swift_bridgeObjectRelease();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v8) != 1)
    {
      v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2, v7, v8);
      v20 = UUID.uuid.getter(v18, v19);
      v21 = UniversalControlUUID.init(rawValue:)(v20, v20 >> 8, v20 >> 16, v20 >> 24, HIDWORD(v20), v20 >> 40, HIWORD(v20), HIBYTE(v20));
      v10 = v21;
      v31 = v21 >> 8;
      v30 = v21 >> 16;
      v29 = v21 >> 24;
      v28 = HIDWORD(v21);
      v27 = v21 >> 40;
      v26 = HIWORD(v21);
      v25 = HIBYTE(v21);
      v24 = v22 >> 8;
      sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      v17 = v25;
      v16 = v26;
      v15 = v27;
      v14 = v28;
      v13 = v29;
      v12 = v30;
      v11 = v31;
      return v10 | (unint64_t)(unsigned __int16)(v11 << 8) | ((unint64_t)v12 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v13 << 24) | ((unint64_t)v14 << 32) | ((unint64_t)v15 << 40) | ((unint64_t)v16 << 48) | (v17 << 56);
    }
    sub_100071B0C((uint64_t)v7);
  }
  if (qword_1002A9850 != -1)
    swift_once(&qword_1002A9850, sub_10006251C);
  v10 = xmmword_1002B6E88;
  v11 = BYTE1(xmmword_1002B6E88);
  v12 = BYTE2(xmmword_1002B6E88);
  v13 = BYTE3(xmmword_1002B6E88);
  v14 = BYTE4(xmmword_1002B6E88);
  v15 = BYTE5(xmmword_1002B6E88);
  v16 = BYTE6(xmmword_1002B6E88);
  v17 = BYTE7(xmmword_1002B6E88);
  return v10 | (unint64_t)(unsigned __int16)(v11 << 8) | ((unint64_t)v12 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v13 << 24) | ((unint64_t)v14 << 32) | ((unint64_t)v15 << 40) | ((unint64_t)v16 << 48) | (v17 << 56);
}

void sub_10006EA30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_1000714C0(a1, v4, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay, &qword_1002ACC88, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    sub_100066C34(&qword_1002ACC70, v6, (uint64_t (*)(uint64_t))type metadata accessor for DisplayControllerChamois_iOS, (uint64_t)&unk_10021F238);
    ObservableObject<>.objectWillChange.getter(v3);
    ObservableObjectPublisher.send()();
    swift_release();
  }
}

void sub_10006EADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];

  v3 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  __chkstk_darwin(v3);
  v74 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain();
  v6 = (uint64_t)sub_10006E024(v5, a1);
  v8 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v6 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = _CocoaArrayWrapper.endIndex.getter(v6);
  }
  else
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = &unk_1002A9000;
  if (v9)
  {
    if (v9 < 1)
    {
      __break(1u);
      goto LABEL_39;
    }
    v66 = 0;
    v67 = v5;
    v68 = a1;
    v11 = 0;
    v12 = v8 & 0xC000000000000001;
    v13 = qword_1002B6E70;
    *(_QWORD *)&v7 = 136446466;
    v70 = v7;
    v69 = (char *)&type metadata for Any + 8;
    v71 = (_DWORD *)v9;
    v72 = v8;
    do
    {
      if (v12)
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
      }
      else
      {
        v14 = *(_QWORD *)(v8 + 8 * v11 + 32);
        swift_retain();
      }
      if (v10[265] != -1)
        swift_once(&qword_1002A9848, sub_1000603BC);
      v15 = type metadata accessor for Logger(0);
      sub_100006FB4(v15, (uint64_t)v13);
      v16 = swift_retain_n(v14, 4);
      v17 = Logger.logObject.getter(v16);
      v19 = static os_log_type_t.default.getter(v17, v18);
      if (os_log_type_enabled(v17, v19))
      {
        v20 = swift_slowAlloc(22, -1);
        v21 = swift_slowAlloc(64, -1);
        v73 = v21;
        v77[0] = v21;
        *(_DWORD *)v20 = v70;
        dispatch thunk of UniversalControlDisplay.id.getter(v21);
        v22 = v74;
        v24 = UUID.init(uuid:)(v23, v23 >> 8, v23 >> 16, v23 >> 24, HIDWORD(v23), v23 >> 40);
        v25 = v12;
        v26 = UUID.uuidString.getter(v24);
        v27 = v13;
        v29 = v28;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v22, v76);
        v30 = v26;
        v12 = v25;
        *(_QWORD *)(v20 + 4) = sub_100006FCC(v30, v29, v77);
        swift_release_n(v14, 2);
        v13 = v27;
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2082;
        dispatch thunk of UniversalControlDisplay.screenRect.getter(v31);
        v32 = CGRect.description.getter();
        *(_QWORD *)(v20 + 14) = sub_100006FCC(v32, v33, v77);
        swift_release_n(v14, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v19, "Added local display: %{public}s, screenRect: %{public}s", (uint8_t *)v20, 0x16u);
        v34 = v73;
        swift_arrayDestroy(v73, 2, v69);
        v9 = (uint64_t)v71;
        v8 = v72;
        swift_slowDealloc(v34, -1, -1);
        v35 = v20;
        v10 = (_QWORD *)&unk_1002A9000;
        swift_slowDealloc(v35, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n(v14, 5);
      }
      ++v11;
    }
    while (v9 != v11);
    swift_bridgeObjectRelease();
    v5 = v67;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v37 = (uint64_t)sub_10006E024(v36, v5);
  v39 = v37;
  if ((unint64_t)v37 >> 62)
  {
    if (v37 >= 0)
      v37 &= 0xFFFFFFFFFFFFFF8uLL;
    v40 = _CocoaArrayWrapper.endIndex.getter(v37);
  }
  else
  {
    v40 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v40)
    goto LABEL_31;
  if (v40 >= 1)
  {
    v41 = 0;
    v42 = qword_1002B6E70;
    v43 = v39 & 0xC000000000000001;
    *(_QWORD *)&v38 = 136446210;
    v70 = v38;
    v69 = (char *)&type metadata for Any + 8;
    do
    {
      if (v43)
      {
        v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v39);
      }
      else
      {
        v44 = *(_QWORD *)(v39 + 8 * v41 + 32);
        swift_retain();
      }
      if (v10[265] != -1)
        swift_once(&qword_1002A9848, sub_1000603BC);
      v45 = type metadata accessor for Logger(0);
      sub_100006FB4(v45, (uint64_t)v42);
      v46 = swift_retain_n(v44, 2);
      v47 = Logger.logObject.getter(v46);
      v49 = static os_log_type_t.default.getter(v47, v48);
      v50 = v49;
      if (os_log_type_enabled(v47, v49))
      {
        v51 = (_DWORD *)swift_slowAlloc(12, -1);
        v71 = v51;
        v52 = swift_slowAlloc(32, -1);
        v73 = v52;
        v77[0] = v52;
        *v51 = v70;
        LODWORD(v72) = v50;
        dispatch thunk of UniversalControlDisplay.id.getter(v52);
        v53 = v39;
        v54 = v40;
        v55 = v74;
        v57 = UUID.init(uuid:)(v56, v56 >> 8, v56 >> 16, v56 >> 24, HIDWORD(v56), v56 >> 40);
        v58 = UUID.uuidString.getter(v57);
        v59 = v42;
        v61 = v60;
        v62 = v55;
        v40 = v54;
        v39 = v53;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v76);
        v63 = sub_100006FCC(v58, v61, v77);
        v64 = (uint8_t *)v71;
        *(_QWORD *)(v71 + 1) = v63;
        swift_release_n(v44, 2);
        v42 = v59;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v72, "Removed local display: %{public}s", v64, 0xCu);
        v65 = v73;
        swift_arrayDestroy(v73, 1, v69);
        swift_slowDealloc(v65, -1, -1);
        v10 = (_QWORD *)&unk_1002A9000;
        swift_slowDealloc(v64, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n(v44, 3);
      }
      ++v41;
    }
    while (v40 != v41);
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_39:
  __break(1u);
}

double sub_10006F114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + 16);
  sub_100043360();
  sub_10006EA30(a1);
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  sub_10006EADC(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10006F160(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  objc_class *v37;
  void *v38;

  v4 = v3;
  v5 = a2;
  v6 = a1;
  v7 = a1 >> 8;
  v8 = a1 >> 16;
  v9 = a1 >> 24;
  v10 = HIDWORD(a1);
  v11 = a1 >> 40;
  v27 = HIWORD(a1);
  v28 = HIBYTE(a1);
  v30 = a2 >> 8;
  v31 = a2 >> 16;
  v33 = a2 >> 24;
  v34 = HIDWORD(a2);
  v35 = a2 >> 40;
  *(_QWORD *)(v4 + 16) = _swiftEmptyArrayStorage;
  v32 = HIWORD(a2);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v29 = HIBYTE(a2);
  v12 = objc_msgSend(objc_allocWithZone((Class)SBSExternalDisplayService), "init");
  v37 = (objc_class *)type metadata accessor for ExternalDisplayServiceObserver();
  v13 = objc_msgSend(objc_allocWithZone(v37), "init");
  *(_QWORD *)(v4 + 24) = v12;
  *(_QWORD *)(v4 + 32) = v13;
  *(_BYTE *)(v4 + 40) = v6;
  *(_BYTE *)(v4 + 41) = v7;
  *(_BYTE *)(v4 + 42) = v8;
  *(_BYTE *)(v4 + 43) = v9;
  *(_BYTE *)(v4 + 44) = v10;
  *(_BYTE *)(v4 + 45) = v11;
  *(_BYTE *)(v4 + 46) = v27;
  *(_BYTE *)(v4 + 47) = v28;
  *(_BYTE *)(v4 + 48) = v5;
  *(_BYTE *)(v4 + 49) = v30;
  *(_BYTE *)(v4 + 50) = v31;
  *(_BYTE *)(v4 + 51) = v33;
  *(_BYTE *)(v4 + 52) = v34;
  *(_BYTE *)(v4 + 53) = v35;
  *(_BYTE *)(v4 + 54) = v32;
  *(_BYTE *)(v4 + 55) = v29;
  *(_QWORD *)(v4 + 56) = a3;
  sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v14 = v12;
  v15 = v13;
  swift_retain();
  swift_retain();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_100285328, 32, 7);
  *(_QWORD *)(v18 + 24) = &off_100285240;
  swift_unknownObjectWeakInit(v18 + 16, v4);
  swift_retain();
  v19 = sub_1000C8454(v17, (uint64_t)sub_10002D0D4, v18);
  v21 = v20;
  sub_10005FF18();
  swift_release();
  v38 = v19;
  sub_100066C34((unint64_t *)&unk_1002ACCB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ExternalDisplayServiceObserver, (uint64_t)&unk_10021F1F0);
  dispatch thunk of ObservableObject.objectWillChange.getter(v37);
  *(_QWORD *)(sub_100066CF4((uint64_t)&unk_100285350) + 16) = v21;
  type metadata accessor for ObservableObjectPublisher(0);
  sub_100066CE8();
  sub_100071C28((uint64_t)sub_10005E230);
  sub_100041108();
  AnyCancellable.store(in:)(&v38);
  sub_10005FF18();
  sub_100066D0C();
  swift_release();
  v22 = type metadata accessor for WindowSceneController();
  sub_100066C34((unint64_t *)&qword_1002AB770, 255, (uint64_t (*)(uint64_t))type metadata accessor for WindowSceneController, (uint64_t)&protocol conformance descriptor for WindowSceneController);
  dispatch thunk of ObservableObject.objectWillChange.getter(v22);
  *(_QWORD *)(sub_100066CF4((uint64_t)&unk_100285378) + 16) = v21;
  sub_100066CE8();
  sub_100071C28((uint64_t)sub_10005FDC0);
  sub_100041108();
  AnyCancellable.store(in:)(&v38);
  sub_10005FF18();
  sub_100066D0C();
  swift_release();
  v23 = v38;
  swift_getObjectType(v21);
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRetain();
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_100066D0C();
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v4 + 64);
  v25 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 64) = v23;
  *(_QWORD *)(v4 + 72) = v21;
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRetain();
  sub_10002D108(v24, v25);
  objc_msgSend(v14, "addObserver:", v15);
  sub_100066D0C();
  swift_bridgeObjectRelease();

  swift_release();
  return v4;
}

uint64_t sub_10006F510()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 24), "removeObserver:", *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();

  swift_release();
  sub_10002D108(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_10006F55C()
{
  uint64_t v0;

  sub_10006F510();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for DisplayControllerChamois_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent28DisplayControllerChamois_iOS);
}

void sub_10006F59C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id *v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char v70[24];

  v3 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  __chkstk_darwin(v3);
  v65 = v1;
  v66 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 56);
  swift_beginAccess(v5 + 16, v70, 0, 0);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v19 = v65;
    swift_retain();
    v20 = sub_10006DD20((uint64_t)v8, a1, v19);
    swift_bridgeObjectRelease();
    v21 = v20[2];
    v64 = 0;
    if (v21)
    {
      swift_bridgeObjectRetain();
      v22 = (id *)(v20 + 5);
      v23 = _swiftEmptyArrayStorage;
      v24 = v21;
      do
      {
        v26 = (uint64_t)*(v22 - 1);
        v25 = *v22;
        v27 = *v22;
        swift_retain();
        if ((dispatch thunk of UniversalControlDisplay.isMain.getter(v28) & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
          v69 = v23;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10005896C();
            v23 = v69;
          }
          v30 = v23[2];
          if (v30 >= v23[3] >> 1)
          {
            sub_10005896C();
            v23 = v69;
          }
          v23[2] = v30 + 1;
          v31 = &v23[2 * v30];
          v31[4] = v26;
          v31[5] = v25;
        }
        else
        {

          swift_release();
        }
        v22 += 2;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = _swiftEmptyArrayStorage;
    }
    if (v23[2] == 1)
    {
      v32 = v23[4];
      swift_retain();
      v33 = swift_release();
      if (v21)
      {
        v62 = v32;
        swift_bridgeObjectRetain();
        v63 = v20;
        v34 = (id *)(v20 + 5);
        v35 = _swiftEmptyArrayStorage;
        do
        {
          v36 = *v34;
          swift_retain();
          dispatch thunk of UniversalControlDisplay.id.getter(v37);
          v39 = v38;
          v41 = v40;
          if (qword_1002A9850 != -1)
            swift_once(&qword_1002A9850, sub_10006251C);
          if (static UniversalControlUUID.compare(lhs:rhs:)(v39, v41))
          {
            v42 = v66;
            v43 = UUID.init(uuid:)(v39, v39 >> 8, v39 >> 16, v39 >> 24, HIDWORD(v39), v39 >> 40);
            v44 = UUID.uuidString.getter(v43);
            v46 = v45;
            (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v68);

            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
            {
              sub_1000776AC();
              v35 = v49;
            }
            v47 = v35[2];
            if (v47 >= v35[3] >> 1)
            {
              sub_1000776AC();
              v35 = v50;
            }
            v35[2] = v47 + 1;
            v48 = &v35[2 * v47];
            v48[4] = v44;
            v48[5] = v46;
          }
          else
          {

            swift_release();
          }
          v34 += 2;
          --v21;
        }
        while (v21);
        v20 = v63;
        swift_bridgeObjectRelease();
        v32 = v62;
      }
      __chkstk_darwin(v33);
      v51 = sub_10006DEF4((uint64_t)v20, (uint64_t (*)(__n128))sub_100071AFC);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100070818(v32, (uint64_t)v51);
      v52 = sub_1000055B0(&qword_1002AC0E0);
      v53 = (_QWORD *)swift_allocObject(v52, 40, 7);
      *((_OWORD *)v53 + 1) = xmmword_10021EFD0;
      v53[4] = v32;
      v69 = v53;
      specialized Array._endMutation()(v53);
      v54 = v69;
      v55 = v51[2];
      if (v55)
      {
        v69 = _swiftEmptyArrayStorage;
        swift_retain();
        specialized ContiguousArray.reserveCapacity(_:)(v55);
        v56 = 4;
        do
        {
          v57 = v51[v56];
          swift_retain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v58);
          v59 = v69[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v59);
          v60 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
          specialized ContiguousArray._endMutation()(v60);
          v56 += 2;
          --v55;
        }
        while (v55);
        v61 = v69;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v61 = _swiftEmptyArrayStorage;
      }
      v69 = v54;
      sub_100192638((uint64_t)v61);
      sub_10006F114((uint64_t)v69);
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_10006F114((uint64_t)_swiftEmptyArrayStorage);
    }
    return;
  }
  v64 = a1;
  v69 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)(v7);
  v9 = sub_100071A7C(v6);
  if (v9 < 0 || (v11 = v9, v9 >= 1 << *(_BYTE *)(v6 + 32)))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    v8 = v69;
    swift_bridgeObjectRelease();
    a1 = v64;
    goto LABEL_15;
  }
  v12 = v10;
  v13 = v6 + 64;
  while ((*(_QWORD *)(v13 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
  {
    if (*(_DWORD *)(v6 + 36) != v12)
      goto LABEL_49;
    v14 = *(id *)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11) + 48);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v15 = v69[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
    v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
    specialized ContiguousArray._endMutation()(v16);
    v17 = -1 << *(_BYTE *)(v6 + 32);
    if ((uint64_t)v11 >= -v17)
      goto LABEL_50;
    if ((*(_QWORD *)(v13 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_51;
    if (*(_DWORD *)(v6 + 36) != v12)
      goto LABEL_52;
    v18 = _HashTable.occupiedBucket(after:)(v11, v6 + 64, ~v17);
    if (!--v7)
      goto LABEL_14;
    v11 = v18;
    if ((v18 & 0x8000000000000000) == 0)
    {
      v12 = *(_DWORD *)(v6 + 36);
      if (v18 < 1 << *(_BYTE *)(v6 + 32))
        continue;
    }
    goto LABEL_13;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

void sub_10006FBF0(id *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint8x8_t v29;
  unint64_t v30;
  uint16x8_t v31;
  unint64_t v32;
  unint64_t v33;
  uint16x8_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64x2_t v39;
  int32x4_t v40;
  uint64x2_t v41;
  int32x4_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  double v59;
  char **v60;
  unsigned int v61;
  char **v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  id v83;
  BOOL v84;
  void *v85;
  unsigned int v86;
  unint64_t v87;
  unsigned __int8 v88;
  id v89;
  unsigned int v90;
  uint64_t v91;
  uint16x4_t v92;
  uint32x4_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  int8x16_t v96;
  unint64_t v97;
  uint32x4_t v98;
  uint64x2_t v99;
  int8x16_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint16x8_t v112;
  unint64_t v113;
  uint16x8_t v114;
  unint64_t v115;
  unint64_t v116;
  id v117;
  uint64_t v118;
  id v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  _BYTE v124[32];
  uint64_t v125;
  _OWORD v126[2];
  char v127;
  unint64_t v128;

  v118 = a3;
  v8 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v8);
  v123 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0((uint64_t *)&unk_1002B3320);
  __chkstk_darwin(v10);
  v122 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v12);
  v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = *a1;
  v19 = objc_msgSend(v117, "_FBSScene");
  v20 = objc_msgSend(v19, "settings");

  v21 = objc_msgSend(v20, "displayConfiguration");
  if (!v21)
    goto LABEL_31;
  v119 = v21;
  v22 = sub_100071A1C(v21, (SEL *)&selRef_hardwareIdentifier);
  v120 = a4;
  if (v23)
  {
    v25 = v22;
    v26 = v23;
    swift_bridgeObjectRetain();
    v27 = sub_10006E3F4(a2, v25, v26);
    v28 = objc_msgSend(v27, "arrangement");

    UUID.init(uuidString:)(v25, v26);
    swift_bridgeObjectRelease();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v14, 1, v15) == 1)
    {
      sub_100071B0C((uint64_t)v14);
      if (qword_1002A9850 != -1)
        swift_once(&qword_1002A9850, sub_10006251C);
      v30 = xmmword_1002B6E88;
      v29.i32[0] = *(_DWORD *)((char *)&xmmword_1002B6E88 + 1);
      v31 = vmovl_u8(v29);
      v114 = v31;
      v116 = BYTE5(xmmword_1002B6E88);
      v115 = BYTE6(xmmword_1002B6E88);
      v110 = BYTE7(xmmword_1002B6E88);
      v32 = BYTE8(xmmword_1002B6E88);
      v31.i32[0] = *(_DWORD *)((char *)&xmmword_1002B6E88 + 9);
      v112 = vmovl_u8(*(uint8x8_t *)v31.i8);
      v113 = BYTE13(xmmword_1002B6E88);
      v111 = BYTE14(xmmword_1002B6E88);
      v33 = HIBYTE(xmmword_1002B6E88);
    }
    else
    {
      v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
      v37 = UUID.uuid.getter(v35, v36);
      v30 = UniversalControlUUID.init(rawValue:)(v37, v37 >> 8, v37 >> 16, v37 >> 24, HIDWORD(v37), v37 >> 40, HIWORD(v37), HIBYTE(v37));
      v32 = v38;
      v39 = (uint64x2_t)vdupq_n_s64(v30);
      v40 = vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_10021F130));
      *(int16x4_t *)v40.i8 = vmovn_s32(v40);
      v114 = (uint16x8_t)v40;
      v116 = v30 >> 40;
      v115 = HIWORD(v30);
      v41 = (uint64x2_t)vdupq_n_s64(v38);
      v42 = vuzp1q_s32((int32x4_t)vshlq_u64(v41, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v41, (uint64x2_t)xmmword_10021F130));
      *(int16x4_t *)v42.i8 = vmovn_s32(v42);
      v112 = (uint16x8_t)v42;
      v113 = v38 >> 40;
      v111 = HIWORD(v38);
      v33 = HIBYTE(v38);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v110 = HIBYTE(v30);
    }
    a4 = v120;
    if (v28)
      goto LABEL_14;
  }
  else
  {
    if (qword_1002A9850 != -1)
      swift_once(&qword_1002A9850, sub_10006251C);
    v30 = xmmword_1002B6E88;
    v24.i32[0] = *(_DWORD *)((char *)&xmmword_1002B6E88 + 1);
    v34 = vmovl_u8(v24);
    v114 = v34;
    v116 = BYTE5(xmmword_1002B6E88);
    v115 = BYTE6(xmmword_1002B6E88);
    v110 = BYTE7(xmmword_1002B6E88);
    v32 = BYTE8(xmmword_1002B6E88);
    v34.i32[0] = *(_DWORD *)((char *)&xmmword_1002B6E88 + 9);
    v112 = vmovl_u8(*(uint8x8_t *)v34.i8);
    v113 = BYTE13(xmmword_1002B6E88);
    v111 = BYTE14(xmmword_1002B6E88);
    v33 = HIBYTE(xmmword_1002B6E88);
  }
  v43 = v119;
  if (!objc_msgSend(v119, "isMainDisplay"))
  {

LABEL_31:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v28 = 0;
LABEL_14:
  v106 = v33;
  v107 = v30;
  v108 = v32;
  v109 = (uint64_t)v28;
  v121 = v4;
  v44 = (void *)objc_opt_self(CADisplay);
  v45 = objc_msgSend(v44, "displays");
  v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, (char *)&type metadata for Any + 8);

  v47 = _swiftEmptyArrayStorage;
  v128 = (unint64_t)_swiftEmptyArrayStorage;
  v48 = *(_QWORD *)(v46 + 16);
  if (v48)
  {
    v105 = v44;
    v49 = v46 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100007918(v49, (uint64_t)v126);
      sub_100007918((uint64_t)v126, (uint64_t)v124);
      v50 = sub_1000078E0(0, &qword_1002ACC98, CADisplay_ptr);
      if ((swift_dynamicCast(&v125, v124, (char *)&type metadata for Any + 8, v50, 6) & 1) == 0)
        v125 = 0;
      v51 = sub_100005988(v126);
      v52 = v125;
      if (v125)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
        v54 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v53 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v54 >= v53 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
        specialized Array._endMutation()(v55);
      }
      v49 += 32;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease();
    v47 = (_QWORD *)v128;
    v44 = v105;
  }
  swift_bridgeObjectRelease();
  v56 = v119;
  v57 = v121;
  v58 = sub_10006E5A8((uint64_t)v47, v56);
  v121 = v57;
  *(_QWORD *)&v59 = swift_bridgeObjectRelease().n128_u64[0];
  v60 = &selRef_edge;
  if (!v58)
  {
    v61 = objc_msgSend(v56, "isExternal", v59);
    v62 = &selRef_TVOutDisplay;
    if (!v61)
      v62 = &selRef_mainDisplay;
    v58 = objc_msgSend(v44, *v62);
  }
  v63 = v117;
  v64 = objc_msgSend(v117, "screen", v59);
  v65 = *(_QWORD *)(v118 + 40);
  v119 = *(id *)(v118 + 48);
  if (v58)
  {
    v118 = sub_1000719B0(v58);
    v105 = v66;
  }
  else
  {
    v118 = 0;
    v105 = 0;
  }
  v67 = objc_msgSend(v63, "interfaceOrientation");
  v68 = (uint64_t)v122;
  sub_100070618((uint64_t)v67);
  v69 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v68, 0, 1, v69);
  objc_msgSend(v64, "nativeBounds");
  v71 = v70;
  v73 = v72;
  objc_msgSend(v64, "bounds");
  v75 = v74;
  v77 = v76;
  v79 = v78;
  v81 = v80;
  v82 = type metadata accessor for UTType(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v123, 1, 1, v82);
  if (v58)
  {
    v83 = objc_msgSend(v58, "externalDisplayAttributes");
    v84 = v83 == 0;
    if (v83)
    {
      v85 = v83;
      v86 = objc_msgSend(v83, "manufacturerID");

    }
    else
    {
      v86 = 0;
    }
    v89 = objc_msgSend(v58, "externalDisplayAttributes");
    v87 = (unint64_t)v89;
    if (v89)
    {
      v90 = objc_msgSend(v89, "productID");

      v88 = 0;
      v87 = v90;
      v60 = &selRef_edge;
    }
    else
    {
      v88 = 1;
    }
  }
  else
  {
    v87 = 0;
    v86 = 0;
    v88 = 1;
    v84 = 1;
  }
  memset(v126, 0, sizeof(v126));
  v127 = 1;
  v91 = type metadata accessor for UniversalControlDisplay(0);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92.i16[0] = v114.u8[0];
  v92.i16[1] = v114.u8[2];
  v92.i16[2] = v114.u8[4];
  v92.i16[3] = v114.u8[6];
  v93 = vmovl_u16(v92);
  v94.i64[0] = v93.u32[0];
  v94.i64[1] = v93.u32[1];
  v95 = v94;
  v94.i64[0] = v93.u32[2];
  v94.i64[1] = v93.u32[3];
  v96 = vorrq_s8((int8x16_t)vshlq_u64(v95, (uint64x2_t)xmmword_10021F160), (int8x16_t)vshlq_u64(v94, (uint64x2_t)xmmword_10021F150));
  v97 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)) | ((unint64_t)v116 << 40) | (v110 << 56) | ((unint64_t)v115 << 48) | v107;
  v96.i16[0] = v112.u8[0];
  v96.i16[1] = v112.u8[2];
  v96.i16[2] = v112.u8[4];
  v96.i16[3] = v112.u8[6];
  v98 = vmovl_u16(*(uint16x4_t *)v96.i8);
  v94.i64[0] = v98.u32[0];
  v94.i64[1] = v98.u32[1];
  v99 = v94;
  v94.i64[0] = v98.u32[2];
  v94.i64[1] = v98.u32[3];
  v100 = vorrq_s8((int8x16_t)vshlq_u64(v99, (uint64x2_t)xmmword_10021F160), (int8x16_t)vshlq_u64(v94, (uint64x2_t)xmmword_10021F150));
  v124[0] = v88;
  v101 = UniversalControlDisplay.init(id:displayName:mirrorPrimary:orientation:physicalSize:pixelSize:screenRect:typeIdentifier:vendorID:productID:)(v65, v119, v97, *(_QWORD *)&vorr_s8(*(int8x8_t *)v100.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)) | ((unint64_t)v113 << 40) | (v106 << 56) | ((unint64_t)v111 << 48) | v108, v118, v105, v126, v122, 0.0, 0.0, v71, v73, v75, v77, v79, v81, v123, v86 | ((unint64_t)v84 << 32), v87 | ((unint64_t)v88 << 32));
  dispatch thunk of UniversalControlDisplay.isBuiltIn.setter(objc_msgSend(v56, v60[3]) ^ 1);
  dispatch thunk of UniversalControlDisplay.isMain.setter(objc_msgSend(v56, "isMainDisplay"));

  v102 = v120;
  v103 = v109;
  *v120 = v101;
  v102[1] = v103;
}

uint64_t sub_100070618(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 2:
      result = static UniversalControlDisplay.Orientation.down.getter();
      break;
    case 3:
      result = static UniversalControlDisplay.Orientation.left.getter();
      break;
    case 4:
      result = static UniversalControlDisplay.Orientation.right.getter();
      break;
    default:
      result = static UniversalControlDisplay.Orientation.up.getter();
      break;
  }
  return result;
}

uint64_t sub_100070648(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100026518();
  if (qword_1002A9850 != -1)
    swift_once(&qword_1002A9850, sub_10006251C);
  if (!static UniversalControlUUID.compare(lhs:rhs:)(a1, a2))
    return 0;
  v6 = UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40);
  v7 = UUID.uuidString.getter(v6);
  sub_100071C3C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  return v7;
}

void sub_10007077C(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  if ((dispatch thunk of UniversalControlDisplay.isMain.getter(a1) & 1) == 0 && a2)
  {
    v5 = a2;
    v6 = sub_100071A1C(v5, (SEL *)&selRef_displayIdentifier);
    if (v7 && (sub_10006DC80(v6, v7, a3), v9 = v8, swift_bridgeObjectRelease(), (v9 & 1) == 0))

    else
      swift_retain();
  }
}

void sub_100070818(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double Height;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double Width;
  uint64_t v25;
  uint64_t v26;
  double v27;
  CGAffineTransform *Translation;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  CGAffineTransform v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  dispatch thunk of UniversalControlDisplay.id.getter(a1);
  sub_100070648(v3, v4);
  swift_bridgeObjectRetain();
  sub_10006E270(a2, sub_100071B04);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (void **)(v6 + 40);
    while (2)
    {
      v10 = (uint64_t)*(v8 - 1);
      v9 = *v8;
      swift_retain();
      v11 = v9;
      v12 = objc_msgSend(v11, "edge");
      switch((int)v12)
      {
        case 0:
          dispatch thunk of UniversalControlDisplay.screenRect.getter(v12);
          v15 = -v14;
          goto LABEL_6;
        case 1:
          v39.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v12);
          Width = CGRectGetWidth(v39);
          v40.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v25);
          v15 = (Width - CGRectGetWidth(v40)) * 0.5;
          dispatch thunk of UniversalControlDisplay.screenRect.getter(v26);
          v19 = -v27;
          goto LABEL_9;
        case 2:
          dispatch thunk of UniversalControlDisplay.screenRect.getter(v12);
          v15 = v16;
LABEL_6:
          v35.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v13);
          Height = CGRectGetHeight(v35);
          v36.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v18);
          v19 = (Height - CGRectGetHeight(v36)) * 0.5;
          goto LABEL_9;
        case 3:
          v37.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v12);
          v20 = CGRectGetWidth(v37);
          v38.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(v21);
          v15 = (v20 - CGRectGetWidth(v38)) * 0.5;
          dispatch thunk of UniversalControlDisplay.screenRect.getter(v22);
          v19 = v23;
LABEL_9:
          Translation = CGAffineTransformMakeTranslation(&v34, v15, v19);
          v32 = *(_OWORD *)&v34.c;
          v33 = *(_OWORD *)&v34.a;
          v31 = *(_OWORD *)&v34.tx;
          v41.origin.x = dispatch thunk of UniversalControlDisplay.screenRect.getter(Translation);
          *(_OWORD *)&v34.a = v33;
          *(_OWORD *)&v34.c = v32;
          *(_OWORD *)&v34.tx = v31;
          v42 = CGRectApplyAffineTransform(v41, &v34);
          dispatch thunk of UniversalControlDisplay.screenRect.setter(v42.origin.x, v42.origin.y, v42.size.width, v42.size.height);
          sub_100070818(v10, a2);
          swift_release();

          v8 += 2;
          if (!--v7)
            break;
          continue;
        default:
          v29 = (int)v12;
          type metadata accessor for CGRectEdge(0);
          LODWORD(v34.a) = v29;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v30, &v34, v30, &type metadata for UInt32);
          __break(1u);
          return;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100070A4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = sub_100071A1C(a2, (SEL *)&selRef_displayIdentifier);
  v8 = a4 == 0;
  if (v7)
  {
    if (a4)
    {
      if (v6 == a3 && v7 == a4)
        v8 = 1;
      else
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, a3, a4, 0);
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

uint64_t sub_100070AD8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100070AE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  sub_100066C34(&qword_1002ACC70, a2, (uint64_t (*)(uint64_t))type metadata accessor for DisplayControllerChamois_iOS, (uint64_t)&unk_10021F238);
  return ObservableObject<>.objectWillChange.getter(v3);
}

void sub_100070B20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(void **)(v0 + 24);
  v2 = sub_100066CF4((uint64_t)&unk_100285288);
  swift_weakInit(v2 + 16, v0);
  v4[4] = sub_100071068;
  v4[5] = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_100070E3C;
  v4[3] = &unk_1002852A0;
  v3 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, "getConnectedDisplayInfoWithCompletionHandler:", v3);
  _Block_release(v3);
}

uint64_t sub_100070BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_1002852D8, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000710B4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_1002852F0;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = swift_release();
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100066C34((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v17 = sub_10003228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v19);
}

uint64_t sub_100070DE0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10006F59C(a2);
    return swift_release();
  }
  return result;
}

double sub_100070E3C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, __n128);
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  double result;

  v3 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v4 = sub_1000078E0(0, (unint64_t *)&unk_1002ACC78, SBSConnectedDisplayInfo_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  v6 = swift_retain();
  v3(v5, v6);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100070F04()
{
  uint64_t v0;

  v0 = type metadata accessor for ExternalDisplayServiceObserver();
  sub_100066C34((unint64_t *)&unk_1002ACCB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ExternalDisplayServiceObserver, (uint64_t)&unk_10021F1F0);
  ObservableObject<>.objectWillChange.getter(v0);
  ObservableObjectPublisher.send()();
  return swift_release();
}

id sub_100070F60()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExternalDisplayServiceObserver();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_100070FB4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExternalDisplayServiceObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ExternalDisplayServiceObserver()
{
  return objc_opt_self(_TtC13EnsembleAgentP33_23F416F22A9788E7BFE15091871B792230ExternalDisplayServiceObserver);
}

uint64_t sub_100071008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ExternalDisplayServiceObserver();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100071044()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100071068(uint64_t a1)
{
  uint64_t v1;

  return sub_100070BD0(a1, v1);
}

uint64_t sub_100071070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100071080(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100071088()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000710B4()
{
  uint64_t v0;

  return sub_100070DE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000710BC(uint64_t a1, uint64_t a2)
{
  sub_1000714C0(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlInputDevice, (unint64_t *)&unk_1002ACCC0, (uint64_t)&protocol conformance descriptor for UniversalControlInputDevice);
}

uint64_t sub_1000710D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_38:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    sub_100043360();
    v5 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_10000E594();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 != v6)
    goto LABEL_24;
  if (!v5)
    goto LABEL_23;
  v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v7 = a1;
  if (!v4)
    v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = a2 & 0xFFFFFFFFFFFFFF8;
  v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v8 = a2;
  if ((unint64_t)a2 >> 62)
    v9 = v8;
  if (v7 == v9)
    goto LABEL_23;
  if (v5 < 0)
    goto LABEL_47;
  v21 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_48:
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v10 = swift_retain();
  }
  v11 = a2 & 0xC000000000000001;
  sub_10013DB94(0, (a2 & 0xC000000000000001) == 0, a2, v10);
  if ((a2 & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 32);
    swift_retain();
  }
  type metadata accessor for P2PDevice(0);
  v13 = static P2PDevice.== infix(_:_:)(v4, v12);
  swift_release();
  swift_release();
  if ((v13 & 1) == 0)
  {
LABEL_24:
    v14 = 0;
    return v14 & 1;
  }
  if (v5 != 1)
  {
    v16 = 5;
    while (1)
    {
      if (v16 - 4 >= v5)
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v21)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a1);
        if (v11)
          goto LABEL_30;
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 8 * v16);
        swift_retain();
        if (v11)
        {
LABEL_30:
          v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a2);
          goto LABEL_34;
        }
      }
      if ((unint64_t)(v16 - 4) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v17 = *(_QWORD *)(a2 + 8 * v16);
      swift_retain();
LABEL_34:
      v14 = static P2PDevice.== infix(_:_:)(v4, v17);
      swift_release();
      swift_release();
      if ((v14 & 1) != 0)
      {
        v18 = 2 - v5 + v16++;
        if (v18 != 5)
          continue;
      }
      return v14 & 1;
    }
  }
LABEL_23:
  v14 = 1;
  return v14 & 1;
}

BOOL sub_100071340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (_QWORD *)(a1 + 40);
  v5 = (_QWORD *)(a2 + 40);
  do
  {
    v6 = static UniversalControlUUID.compare(lhs:rhs:)(*(v4 - 1), *v4, *(v5 - 1), *v5);
    result = v6 == 0;
    v9 = v3-- != 0;
    if (v6)
      break;
    v4 += 2;
    v5 += 2;
  }
  while (v9);
  return result;
}

void sub_1000713C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v16;

  v2 = a1[2];
  if (v2 == a2[2])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        v5 = a1[4];
        v6 = a2[4];
        sub_100043360();
        swift_bridgeObjectRetain(v6);
        v7 = sub_100198A54(v5, v6);
        sub_10000E594();
        swift_bridgeObjectRelease();
        if ((v7 & 1) != 0 && v2 != 1)
        {
          v8 = v2 - 2;
          v9 = a1 + 5;
          v10 = a2 + 5;
          do
          {
            v12 = *v9++;
            v11 = v12;
            v13 = *v10++;
            swift_bridgeObjectRetain(v11);
            sub_100043360();
            v14 = sub_100198A54(v11, v13);
            swift_bridgeObjectRelease();
            sub_10000E594();
            v16 = v8-- != 0;
          }
          while ((v14 & 1) != 0 && v16);
        }
      }
    }
  }
  sub_10002644C();
}

void sub_1000714A4(uint64_t a1, uint64_t a2)
{
  sub_1000714C0(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (unint64_t *)&unk_1002AC0A0, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
}

void sub_1000714C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;
  uint64_t v29;

  v7 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if ((unint64_t)a2 >> 62)
    {
      v21 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
      sub_1000432E0();
      v9 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v8 != v9 || !v8)
      break;
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v10 = a1;
    if (!v7)
      v10 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v11 = a2 & 0xFFFFFFFFFFFFFF8;
    v12 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    v23 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v11 = a2;
    if ((unint64_t)a2 >> 62)
      v12 = v11;
    if (v10 == v12)
      break;
    if (v8 < 0)
    {
      __break(1u);
      return;
    }
    v7 = a3(0);
    v13 = 0;
    v14 = a2 & 0xC000000000000001;
    v24 = a2;
    v22 = a2 + 32;
    a2 = v8 - 1;
    while (v8 != v13)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 32 + 8 * v13);
        swift_retain(v15);
      }
      v29 = v15;
      if (v14)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v24);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v23 + 16))
          goto LABEL_33;
        v16 = *(_QWORD *)(v22 + 8 * v13);
        swift_retain(v16);
      }
      v28 = v16;
      v17 = sub_100066C34(a4, 255, a3, a5);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(&v29, &v28, v7, v17);
      sub_10005FF18();
      sub_100041108();
      if ((v18 & 1) != 0 && a2 != v13++)
        continue;
      return;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
}

void sub_1000716D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UniversalControlLink(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16) && v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v22 = *(_QWORD *)(v8 + 72);
    v23 = v8;
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v14 = v11 - 1;
    do
    {
      v15 = a1;
      v13(v10, a1 + v12, v4);
      v16 = a2;
      v13(v7, a2 + v12, v4);
      v17 = sub_100066C34((unint64_t *)&unk_1002ACCA0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink, (uint64_t)&protocol conformance descriptor for UniversalControlLink);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
      v19 = *(void (**)(char *, uint64_t))(v23 + 8);
      v19(v7, v4);
      v19(v10, v4);
      v21 = v14-- != 0;
      if ((v18 & 1) == 0)
        break;
      v12 += v22;
      a2 = v16;
      a1 = v15;
    }
    while (v21);
  }
  sub_10000E4E0();
}

void sub_100071848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v17;
  uint64_t v18;

  v4 = type metadata accessor for HotZone(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16) && v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    v14 = v11 - 1;
    while (1)
    {
      sub_100071B4C(a1 + v12, (uint64_t)v10);
      sub_100071B4C(a2 + v12, (uint64_t)v7);
      if ((static UniversalControlLink.== infix(_:_:)(v10, v7) & 1) == 0
        || v10[*(int *)(v4 + 20)] != v7[*(int *)(v4 + 20)])
      {
        break;
      }
      v15 = CGRegionEqualToRegion(*(_QWORD *)&v10[*(int *)(v4 + 24)], *(_QWORD *)&v7[*(int *)(v4 + 24)]);
      sub_100071B90((uint64_t)v7);
      sub_100071B90((uint64_t)v10);
      v17 = v14-- != 0;
      if (v15)
      {
        v12 += v13;
        if (v17)
          continue;
      }
      goto LABEL_15;
    }
    sub_100071B90((uint64_t)v7);
    sub_100071B90((uint64_t)v10);
  }
LABEL_15:
  sub_10000E4E0();
}

void sub_100071994(uint64_t a1, uint64_t a2)
{
  sub_1000714C0(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplay, &qword_1002ACC88, (uint64_t)&protocol conformance descriptor for UniversalControlDisplay);
}

uint64_t sub_1000719B0(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "productName");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100071A1C(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_100071A7C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_100071AFC(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_10007077C(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_100071B04(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_100070A4C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100071B0C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000055B0(&qword_1002ACC90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100071B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HotZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071B90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HotZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100071BCC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100071BF0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100071C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher<>.sink(receiveValue:)(a1, v3, v1, v2);
}

uint64_t sub_100071C3C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

_QWORD *sub_100071C48(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v8 = a3[6];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Logger(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = a3[8];
    v15 = *(uint64_t *)((char *)a2 + v13);
    *(_QWORD *)((char *)v4 + v13) = v15;
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t sub_100071D2C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  v6 = (_QWORD *)(a1 + a2[8]);
  swift_bridgeObjectRelease(*v6);
  return swift_bridgeObjectRelease(v6[1]);
}

uint64_t sub_100071DA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = a3[8];
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = (uint64_t *)(a1 + v13);
  v16 = (uint64_t *)(a2 + v13);
  v17 = *v16;
  v18 = v16[1];
  *v15 = *v16;
  v15[1] = v18;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100071E58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15);
  v19 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(v17 + 8);
  v21 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

_OWORD *sub_100071FB4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t sub_100072034(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v16[1];
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1000720F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000720FC);
}

uint64_t sub_1000720FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000F6E4();
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10007216C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072178);
}

uint64_t sub_100072178(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10000F6E4();
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConnectedDevices(uint64_t a1)
{
  uint64_t result;

  result = qword_1002ACD28;
  if (!qword_1002ACD28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConnectedDevices);
  return result;
}

uint64_t sub_100072218(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10021F298;
  v4[1] = &unk_10021F2B0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_10021F298;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000722A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain_n(a1, 2);
  v12 = (_QWORD *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(a1);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  v14 = swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = a1;
  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v14);
LABEL_2:
    sub_100057EA4(a1, a2, a3, a4);
    v9 = v8;
    goto LABEL_9;
  }
  v9 = (_QWORD *)swift_dynamicCastClass(a1, v10);
  if (!v9)
  {
    swift_unknownObjectRelease(a1);
    v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease(a1);
  return v9;
}

uint64_t sub_100072388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
  {
    sub_100077880();
    a5 = v14;
  }
  v11 = *(_QWORD *)(a5 + 16);
  if (v11 >= *(_QWORD *)(a5 + 24) >> 1)
  {
    sub_100077880();
    a5 = v15;
  }
  *(_QWORD *)(a5 + 16) = v11 + 1;
  v12 = (_QWORD *)(a5 + 32 * v11);
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  return a5;
}

uint64_t sub_1000724C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  os_log_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, _QWORD);
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, _QWORD);
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  os_log_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE v139[8];
  char v140[8];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;

  v123 = a4;
  v120 = type metadata accessor for ConnectedDevices(0);
  v7 = __chkstk_darwin(v120);
  v9 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v111 - v11;
  __chkstk_darwin(v10);
  v119 = (uint64_t *)((char *)&v111 - v13);
  v14 = sub_10000F6E4();
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  v17 = __chkstk_darwin(v16);
  v22 = a1 + 32;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = (2 * v23) | 1;
  v141 = a1;
  v142 = a1 + 32;
  v143 = 0;
  v144 = v24;
  if (!v23)
  {
    sub_100043360();
    sub_100040544();
    sub_10003B1A8();
    v65 = 0;
LABEL_25:
    v86 = swift_unknownObjectRetain(a1);
    sub_1000722A4(v86, v22, v65, v24);
    swift_unknownObjectRelease(a1);
    return a2;
  }
  v118 = (uint64_t)&v111 - v18;
  v111 = v12;
  v113 = v9;
  v112 = v21;
  v114 = v20;
  v121 = v19;
  v122 = v17;
  v116 = &v137;
  sub_100043360();
  sub_100040544();
  result = sub_10003B1A8();
  v26 = 0;
  v124 = 0;
  *(_QWORD *)&v27 = 136446466;
  v117 = v27;
  v115 = (char *)&type metadata for Any + 8;
  while (v26 < (uint64_t)(v24 >> 1))
  {
    v28 = v22 + 32 * v26;
    v29 = *(_BYTE *)(v28 + 1);
    v30 = *(unsigned __int8 *)(v28 + 2);
    v31 = *(unsigned __int8 *)(v28 + 3);
    v32 = *(unsigned __int8 *)(v28 + 4);
    v33 = *(unsigned __int8 *)(v28 + 5);
    v34 = *(unsigned __int8 *)(v28 + 6);
    v35 = *(unsigned __int8 *)(v28 + 7);
    v36 = *(_BYTE *)(v28 + 8);
    v37 = *(_BYTE *)(v28 + 9);
    v38 = *(unsigned __int8 *)(v28 + 10);
    v39 = *(unsigned __int8 *)(v28 + 11);
    v40 = *(unsigned __int8 *)(v28 + 12);
    v41 = *(unsigned __int8 *)(v28 + 13);
    v42 = *(_BYTE *)(v28 + 14);
    v43 = *(unsigned __int8 *)(v28 + 15);
    v44 = *(_QWORD *)(v28 + 16);
    v45 = *(_QWORD *)(v28 + 24);
    LOBYTE(v138) = *(_BYTE *)v28;
    BYTE1(v138) = v29;
    v134 = v31;
    v135 = v30;
    BYTE2(v138) = v30;
    BYTE3(v138) = v31;
    v132 = v33;
    v133 = v32;
    BYTE4(v138) = v32;
    BYTE5(v138) = (_BYTE)v33;
    v130 = v35;
    v131 = v34;
    BYTE6(v138) = v34;
    HIBYTE(v138) = v35;
    v139[0] = v36;
    v139[1] = v37;
    v128 = v39;
    v129 = v38;
    v139[2] = v38;
    v139[3] = v39;
    v127 = v40;
    v139[4] = v40;
    v126 = v41;
    v139[5] = v41;
    v139[6] = v42;
    v139[7] = v43;
    v136 = a2;
    v137 = a3;
    swift_bridgeObjectRetain_n(v44, 2);
    swift_bridgeObjectRetain_n(v45, 2);
    sub_100040544();
    sub_10003B1A8();
    sub_1000F0380();
    if (v46 == 3)
    {
      sub_10000E410();
      swift_bridgeObjectRelease();
      sub_10000E568();
      sub_10000E50C();
      sub_100075710();
      v49 = v47 | (v48 << 56);
      sub_100075788();
      v51 = (char **)(v50 | (v43 << 56));
      sub_100040544();
      sub_10003B1A8();
      v52 = sub_1000739BC(a2, a3, v49, (unint64_t)v51, v44, v45);
      swift_bridgeObjectRelease();
      sub_10000E568();
      v53 = sub_100071340(v52, a3);
      swift_bridgeObjectRelease();
      if ((v123 & 1) == 0 && !v53)
      {
        sub_10000E50C();
        sub_10000E410();
        sub_100075760();
        v87 = v114;
        sub_1000757CC(v114, v88, v89);
        v90 = sub_100075890(v43, (uint64_t)v140);
        v91 = Logger.logObject.getter(v90);
        v93 = static os_log_type_t.default.getter(v91, v92);
        if (sub_100075840(v93))
        {
          v94 = sub_10000797C(22);
          LODWORD(v135) = v43;
          v95 = (uint8_t *)v94;
          v96 = sub_10000797C(64);
          sub_1000756E8(v96);
          v97 = sub_100075830();
          sub_1000757B0(v97);
          sub_100075850();
          sub_100075888();
          sub_10007573C();
          v98 = sub_100075878();
          sub_100075820(v98);
          sub_100075858();
          v99 = sub_1000757F8();
          sub_1000757DC(v99);
          sub_100075850();
          v100 = "%{public}s: Pend concurrent messages: %{public}s";
          goto LABEL_30;
        }
LABEL_31:
        sub_100075888();

        ((void (*)(uint64_t, uint64_t))v51[1])(v87, v44);
        goto LABEL_32;
      }
      v54 = v125;
      sub_100073B20(v49, (unint64_t)v51, v44, v45, a2, a3);
LABEL_13:
      sub_100075868();
      sub_10000E568();
      goto LABEL_14;
    }
    sub_100075710();
    v57 = v55 | (v56 << 56);
    sub_100075788();
    v59 = v58 | (v43 << 56);
    sub_1000F42D8(v57, v59, v44);
    v54 = v60;
    v135 = v57;
    sub_1000F42D8(v57, v59, a2);
    v62 = v61;
    v51 = &v111;
    __chkstk_darwin(v61);
    *(&v111 - 2) = (char *)&v138;
    *(&v111 - 1) = (char *)&v136;
    swift_bridgeObjectRetain(v44);
    v43 = v124;
    v63 = sub_10007466C((uint64_t (*)(__int128 *))sub_100075438, (uint64_t)(&v111 - 4), v44);
    v124 = v43;
    sub_100026AF4(v44);
    if ((v63 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_10000E568();
      sub_10000E50C();
      if ((v123 & 1) == 0)
      {
        sub_10000E50C();
        sub_10000E410();
        sub_100075760();
        v87 = v112;
        sub_1000757CC(v112, v101, v102);
        v103 = sub_100075890(v43, (uint64_t)v139);
        v91 = Logger.logObject.getter(v103);
        v105 = static os_log_type_t.default.getter(v91, v104);
        if (!sub_100075840(v105))
          goto LABEL_31;
        v106 = sub_10000797C(22);
        LODWORD(v135) = v43;
        v95 = (uint8_t *)v106;
        v107 = sub_10000797C(64);
        sub_1000756E8(v107);
        v108 = sub_100075830();
        sub_1000757B0(v108);
        sub_100075850();
        sub_100075888();
        sub_10007573C();
        v109 = sub_100075878();
        sub_100075820(v109);
        sub_100075858();
        v110 = sub_1000757F8();
        sub_1000757DC(v110);
        sub_100075850();
        v100 = "%{public}s: Pend future messages: %{public}s";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v135, v100, v95, 0x16u);
        swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
        sub_100007958((uint64_t)v51);
        sub_100007958((uint64_t)v95);

        (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v87, v122);
LABEL_32:
        swift_beginAccess(&v141, &v138, 0, 0);
        sub_1000722A4(v141, v142, v143, v144);
        return a2;
      }
      sub_10007580C(v135, v59, v44, v45);
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    sub_10000E568();
    sub_10000E50C();
    v64 = v45;
    if (v62 < v54)
    {
      sub_10007580C(v135, v59, v44, v45);
      sub_100075868();
      sub_10000E568();
LABEL_14:
      swift_bridgeObjectRelease();
      result = sub_10000E410();
      a3 = v43;
      a2 = v54;
      goto LABEL_15;
    }
    v66 = v125;
    v67 = v121;
    v68 = v44;
    v69 = v118;
    sub_1000757CC(v118, v125 + *(int *)(v120 + 24), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v121 + 16));
    v70 = v119;
    sub_100075454(v66, (uint64_t)v119);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v64);
    v72 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.default.getter(v72, v73);
    LODWORD(v134) = v74;
    if (os_log_type_enabled(v72, v74))
    {
      v75 = sub_10000797C(22);
      v133 = sub_10000797C(64);
      v138 = v133;
      *(_DWORD *)v75 = v117;
      v131 = v75 + 4;
      v132 = v72;
      v76 = v64;
      v78 = *v70;
      v77 = v70[1];
      swift_bridgeObjectRetain(v77);
      v136 = sub_100006FCC(v78, v77, &v138);
      v79 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v116, v131);
      swift_bridgeObjectRelease();
      sub_100075498((uint64_t)v70);
      *(_WORD *)(v75 + 12) = 2082;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v76);
      v80 = sub_1000743DC(v135, v59, v68, v76);
      v81 = v69;
      v83 = v82;
      sub_10000E410();
      sub_10000E50C();
      v136 = sub_100006FCC(v80, v83, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v79, v75 + 14);
      sub_100026AF4(v76);
      sub_100026AF4(v68);
      swift_bridgeObjectRelease();
      v84 = v132;
      _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v134, "%{public}s: Ignore past message: %{public}s", (uint8_t *)v75, 0x16u);
      v85 = v133;
      swift_arrayDestroy(v133, 2, v115);
      sub_100007958(v85);
      sub_100007958(v75);

      result = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8))(v81, v122);
    }
    else
    {
      sub_100075498((uint64_t)v70);

      sub_100026AF4(v64);
      sub_100026AF4(v44);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v69, v44);
    }
LABEL_15:
    v26 = v143;
    v24 = v144;
    v65 = v144 >> 1;
    if (v143 != v144 >> 1)
    {
      if (v143 >= v65)
        goto LABEL_35;
      v26 = ++v143;
    }
    v22 = v142;
    if (v26 == v65)
    {
      a1 = v141;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

__n128 sub_100072E04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 *v5;
  __n128 *v6;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __n128 result;
  uint64_t *v31;
  uint64_t v32;
  __n128 *v33;
  int *v34;
  __n128 *v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __n128 v52;
  _QWORD *v53;

  v6 = v5;
  v10 = (int *)type metadata accessor for ConnectedDevices(0);
  v11 = *(_QWORD *)(*(unint64_t *)((char *)v5->n128_u64 + v10[7]) + 16);
  if (v11)
  {
    v32 = a1;
    v33 = v5;
    v34 = v10;
    v35 = a5;
    swift_bridgeObjectRetain();
    v13 = (__int128 *)(v12 + 48);
    v14 = _swiftEmptyArrayStorage;
    do
    {
      v51 = *v13;
      v15 = *((unsigned __int8 *)v13 - 16);
      v49 = *((unsigned __int8 *)v13 - 15);
      v50 = *((unsigned __int8 *)v13 - 14);
      v16 = *((unsigned __int8 *)v13 - 13);
      v17 = *((unsigned __int8 *)v13 - 12);
      v47 = *((unsigned __int8 *)v13 - 10);
      v48 = *((unsigned __int8 *)v13 - 11);
      v40 = *((unsigned __int8 *)v13 - 9);
      v41 = *((unsigned __int8 *)v13 - 3);
      v45 = *((unsigned __int8 *)v13 - 7);
      v46 = *((unsigned __int8 *)v13 - 8);
      v43 = *((unsigned __int8 *)v13 - 5);
      v44 = *((unsigned __int8 *)v13 - 6);
      v42 = *((unsigned __int8 *)v13 - 4);
      v38 = *((unsigned __int8 *)v13 - 1);
      v39 = *((unsigned __int8 *)v13 - 2);
      swift_bridgeObjectRetain();
      sub_100043360();
      if (static UniversalControlUUID.compare(lhs:rhs:)(v15 | (v49 << 8) | (v50 << 16) | (v16 << 24) | (v17 << 32) | (v48 << 40) | (v47 << 48) | (v40 << 56), v46 | (v45 << 8) | (v44 << 16) | (v43 << 24) | (v42 << 32) | (v41 << 40) | (v39 << 48) | (v38 << 56)))
      {
        v53 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        {
          sub_1000586E8();
          v14 = v53;
        }
        v18 = v14[2];
        if (v18 >= v14[3] >> 1)
        {
          sub_1000586E8();
          v14 = v53;
        }
        v14[2] = v18 + 1;
        v19 = &v14[4 * v18];
        *((_BYTE *)v19 + 32) = v15;
        *((_BYTE *)v19 + 33) = v49;
        *((_BYTE *)v19 + 34) = v50;
        *((_BYTE *)v19 + 35) = v16;
        *((_BYTE *)v19 + 36) = v17;
        *((_BYTE *)v19 + 37) = v48;
        *((_BYTE *)v19 + 38) = v47;
        *((_BYTE *)v19 + 39) = v40;
        *((_BYTE *)v19 + 40) = v46;
        *((_BYTE *)v19 + 41) = v45;
        *((_BYTE *)v19 + 42) = v44;
        *((_BYTE *)v19 + 43) = v43;
        *((_BYTE *)v19 + 44) = v42;
        *((_BYTE *)v19 + 45) = v41;
        *((_BYTE *)v19 + 46) = v39;
        *((_BYTE *)v19 + 47) = v38;
        *((_OWORD *)v19 + 3) = v51;
      }
      else
      {
        sub_10000E594();
        swift_bridgeObjectRelease();
      }
      v13 += 2;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v10 = v34;
    a5 = v35;
    a1 = v32;
    v6 = v33;
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  sub_100043360();
  swift_bridgeObjectRetain();
  v20 = sub_100072388(a3, a4, a1, a2, (uint64_t)v14);
  swift_bridgeObjectRelease();
  sub_10000E594();
  swift_release();
  v53 = (_QWORD *)v20;
  sub_100040544();
  sub_100074808(&v53);
  sub_10000E568();
  v21 = sub_1000724C4((uint64_t)v53, *(uint64_t *)((char *)v6->n128_i64 + v10[8]), *(uint64_t *)((char *)&v6->n128_i64[1] + v10[8]), 0);
  v23 = v22;
  v25 = v24;
  swift_release();
  v26 = v10[6];
  v27 = (char *)v6 + v26;
  v28 = (char *)a5 + v26;
  v29 = sub_10000F6E4();
  v52 = v6[1];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v28, v27, v29);
  a5->n128_u64[0] = 0x697665446E6E6F43;
  a5->n128_u64[1] = 0xEB00000000736563;
  result = v52;
  a5[1] = v52;
  *(unint64_t *)((char *)a5->n128_u64 + v10[7]) = v25;
  v31 = (uint64_t *)((char *)a5 + v10[8]);
  *v31 = v21;
  v31[1] = v23;
  return result;
}

uint64_t sub_10007318C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint8_t *v82;
  _BYTE *v83;
  os_log_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[16];
  uint64_t v98;
  uint64_t v99[3];
  uint64_t v100;
  uint64_t v101;

  v7 = v6;
  v89 = type metadata accessor for ConnectedDevices(0);
  v14 = __chkstk_darwin(v89);
  v88 = (uint64_t *)((char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v82 - v16);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v92 = v18;
  v93 = v19;
  v20 = __chkstk_darwin(v18);
  v91 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v82 - v22;
  v100 = a5;
  v101 = a6;
  swift_bridgeObjectRetain_n(a5, 2);
  swift_bridgeObjectRetain(a6);
  v24 = sub_1000739BC(a5, a6, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a6);
  LOBYTE(a2) = sub_100071340(v24, a6);
  swift_bridgeObjectRelease();
  v90 = v24;
  if ((a2 & 1) != 0 || sub_100071340(v24, a4))
  {
    v25 = v92;
    v26 = v88;
  }
  else
  {
    v27 = *(_QWORD *)(v7 + 16);
    v28 = *(_QWORD *)(v7 + 24);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    v29 = sub_1001450FC(v27, v28, v24, a5);
    v31 = v30;
    swift_bridgeObjectRelease();
    v32 = swift_bridgeObjectRelease();
    a5 = v29;
    a6 = v31;
    v25 = v92;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v23, v7 + *(int *)(v89 + 24), v92, v32);
    sub_100075454(v7, (uint64_t)v17);
    swift_bridgeObjectRetain_n(v29, 2);
    v33 = v23;
    v34 = swift_bridgeObjectRetain_n(v31, 2);
    v35 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.default.getter(v35, v36);
    v38 = v37;
    if (os_log_type_enabled(v35, v37))
    {
      v39 = swift_slowAlloc(32, -1);
      v86 = swift_slowAlloc(96, -1);
      v99[0] = v86;
      *(_DWORD *)v39 = 136446722;
      v84 = (os_log_t)(v39 + 4);
      v87 = v33;
      v85 = v38;
      v41 = *v17;
      v40 = v17[1];
      swift_bridgeObjectRetain(v40);
      v96 = sub_100006FCC(v41, v40, v99);
      v83 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v84);
      swift_bridgeObjectRelease();
      sub_100075498((uint64_t)v17);
      v84 = v35;
      *(_WORD *)(v39 + 12) = 2082;
      v82 = (uint8_t *)(v39 + 14);
      swift_beginAccess(&v100, v94, 0, 0);
      v42 = v101;
      swift_bridgeObjectRetain(v100);
      swift_bridgeObjectRetain(v42);
      sub_10016F6B8();
      v44 = v43;
      v46 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v96 = sub_100006FCC(v44, v46, v99);
      v47 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v83, v82);
      swift_bridgeObjectRelease();
      v48 = (uint8_t *)v39;
      *(_WORD *)(v39 + 22) = 2082;
      v25 = v92;
      v82 = v48 + 24;
      swift_bridgeObjectRetain(a5);
      swift_bridgeObjectRetain(a6);
      sub_10016F6B8();
      v50 = v49;
      v52 = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v96 = sub_100006FCC(v50, v52, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v47, v82);
      swift_bridgeObjectRelease_n(a6, 2);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease();
      v53 = v84;
      v54 = v48;
      _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v85, "%{public}s: Update merge message: %{public}s -> %{public}s", v48, 0x20u);
      v55 = v86;
      swift_arrayDestroy(v86, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      (*(void (**)(char *, uint64_t))(v93 + 8))(v87, v25);
    }
    else
    {
      sub_100075498((uint64_t)v17);

      swift_bridgeObjectRelease_n(a6, 2);
      swift_bridgeObjectRelease_n(a5, 2);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v33, v25);
    }
    v26 = v88;
    swift_beginAccess(&v100, v99, 1, 0);
    v100 = a5;
    v101 = a6;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  sub_1000F0998(a3, a5);
  v57 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58 = swift_bridgeObjectRelease();
  v59 = v93;
  v60 = v91;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v7 + *(int *)(v89 + 24), v25, v58);
  sub_100075454(v7, (uint64_t)v26);
  v61 = v90;
  swift_bridgeObjectRetain_n(v90, 2);
  v62 = swift_bridgeObjectRetain_n(v57, 2);
  v63 = Logger.logObject.getter(v62);
  v65 = static os_log_type_t.default.getter(v63, v64);
  if (os_log_type_enabled(v63, v65))
  {
    v66 = swift_slowAlloc(32, -1);
    v67 = swift_slowAlloc(96, -1);
    v98 = v67;
    *(_DWORD *)v66 = 136446722;
    v68 = *v26;
    v69 = v26[1];
    swift_bridgeObjectRetain(v69);
    v96 = sub_100006FCC(v68, v69, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v66 + 4);
    swift_bridgeObjectRelease();
    sub_100075498((uint64_t)v26);
    *(_WORD *)(v66 + 12) = 2082;
    swift_beginAccess(&v100, &v96, 0, 0);
    v70 = v101;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v70);
    sub_10016F6B8();
    v72 = v71;
    v74 = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75 = v72;
    v76 = v90;
    v95 = sub_100006FCC(v75, v74, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v66 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 22) = 2082;
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v57);
    sub_10016F6B8();
    v78 = v77;
    v80 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v95 = sub_100006FCC(v78, v80, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v66 + 24);
    swift_bridgeObjectRelease_n(v76, 2);
    swift_bridgeObjectRelease_n(v57, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v63, v65, "%{public}s: Merge message: %{public}s -> %{public}s", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);

    (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v92);
  }
  else
  {
    sub_100075498((uint64_t)v26);

    swift_bridgeObjectRelease_n(v61, 2);
    swift_bridgeObjectRelease_n(v57, 2);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v25);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_1000739BC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v11 = type metadata accessor for ConnectedDevices(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  sub_1000DF7F4();
  v15 = v14;
  swift_bridgeObjectRetain(a6);
  sub_1000DF7F4();
  v17 = v16;
  sub_10018F420(a3, a4, v15);
  LOBYTE(a4) = v18;
  sub_100075454(v6, (uint64_t)v13);
  if ((a4 & 1) != 0)
  {
    sub_10018F420(*((_QWORD *)v13 + 2), *((_QWORD *)v13 + 3), v17);
    v20 = v19;
    sub_100075498((uint64_t)v13);
    if ((v20 & 1) == 0)
    {
      sub_100191B08(v17, v15);
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    sub_100075498((uint64_t)v13);
  }
  sub_10018F420(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v17);
  if ((v21 & 1) == 0)
    goto LABEL_7;
  sub_100067F1C(v17);
LABEL_8:
  sub_100057E2C();
  v23 = v22;
  swift_bridgeObjectRelease();
  v26 = v23;
  swift_retain();
  sub_100036DCC(&v26);
  swift_release();
  return v26;
}

uint64_t sub_100073B20(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  os_log_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  os_log_t v95;
  int v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105[24];
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[16];
  uint64_t v109;
  uint64_t v110[4];
  uint64_t v111;
  uint64_t v112;

  v7 = v6;
  v100 = type metadata accessor for ConnectedDevices(0);
  v14 = __chkstk_darwin(v100);
  v99 = (uint64_t *)((char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v92 - v16);
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v103 = v18;
  v104 = v19;
  v20 = __chkstk_darwin(v18);
  v102 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (char *)&v92 - v22;
  v111 = a5;
  v112 = a6;
  swift_bridgeObjectRetain_n(a6, 2);
  swift_bridgeObjectRetain(a5);
  sub_1000DF7F4();
  v24 = v23;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a5);
  v26 = sub_1000739BC(v25, a6, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100068024(v26, v24, v27, v28);
  sub_100057E2C();
  v30 = v29;
  swift_bridgeObjectRelease();
  v110[0] = v30;
  swift_retain();
  sub_100036DCC(v110);
  swift_release();
  v31 = v110[0];
  swift_bridgeObjectRetain(a6);
  LOBYTE(v30) = sub_100071340(v31, a6);
  swift_bridgeObjectRelease();
  v101 = v31;
  if ((v30 & 1) != 0)
  {
    v32 = v103;
LABEL_4:
    v34 = v99;
    goto LABEL_9;
  }
  v33 = sub_100071340(v31, a4);
  v32 = v103;
  if (v33)
    goto LABEL_4;
  v35 = *(_QWORD *)(v7 + 16);
  v36 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a5);
  v37 = sub_1001450FC(v35, v36, v31, a5);
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = swift_bridgeObjectRelease();
  a5 = v37;
  a6 = v39;
  v41 = v98;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v104 + 16))(v98, v7 + *(int *)(v100 + 24), v32, v40);
  sub_100075454(v7, (uint64_t)v17);
  swift_bridgeObjectRetain_n(v37, 2);
  v42 = swift_bridgeObjectRetain_n(v39, 2);
  v43 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.default.getter(v43, v44);
  v46 = v45;
  if (os_log_type_enabled(v43, v45))
  {
    v47 = swift_slowAlloc(32, -1);
    v97 = swift_slowAlloc(96, -1);
    v110[0] = v97;
    *(_DWORD *)v47 = 136446722;
    v93 = v47 + 4;
    v96 = v46;
    v95 = v43;
    v49 = *v17;
    v48 = v17[1];
    swift_bridgeObjectRetain(v48);
    v107 = sub_100006FCC(v49, v48, v110);
    v94 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v93);
    swift_bridgeObjectRelease();
    sub_100075498((uint64_t)v17);
    *(_WORD *)(v47 + 12) = 2082;
    v93 = v47 + 14;
    swift_beginAccess(&v111, v105, 0, 0);
    v50 = v112;
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v50);
    sub_10016F6B8();
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107 = sub_100006FCC(v52, v54, v110);
    v55 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v94, v93);
    swift_bridgeObjectRelease();
    v56 = (uint8_t *)v47;
    *(_WORD *)(v47 + 22) = 2082;
    v32 = v103;
    v93 = (uint64_t)(v56 + 24);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    sub_10016F6B8();
    v58 = v57;
    v60 = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = sub_100006FCC(v58, v60, v110);
    v62 = v56;
    v107 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v55, v93);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease();
    v63 = v95;
    v64 = v62;
    _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v96, "%{public}s: Update concurrent message: %{public}s -> %{public}s", v62, 0x20u);
    v65 = v97;
    swift_arrayDestroy(v97, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    (*(void (**)(char *, uint64_t))(v104 + 8))(v98, v32);
  }
  else
  {
    sub_100075498((uint64_t)v17);

    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(a5, 2);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v41, v32);
  }
  v34 = v99;
  swift_beginAccess(&v111, v110, 1, 0);
  v111 = a5;
  v112 = a6;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  sub_1000F0998(a3, a5);
  v67 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = swift_bridgeObjectRelease();
  v69 = v104;
  v70 = v102;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v104 + 16))(v102, v7 + *(int *)(v100 + 24), v32, v68);
  sub_100075454(v7, (uint64_t)v34);
  v71 = v101;
  swift_retain_n(v101, 2);
  v72 = swift_bridgeObjectRetain_n(v67, 2);
  v73 = Logger.logObject.getter(v72);
  v75 = static os_log_type_t.default.getter(v73, v74);
  if (os_log_type_enabled(v73, v75))
  {
    v76 = swift_slowAlloc(32, -1);
    v77 = swift_slowAlloc(96, -1);
    v109 = v77;
    *(_DWORD *)v76 = 136446722;
    v78 = *v34;
    v79 = v34[1];
    swift_bridgeObjectRetain(v79);
    v107 = sub_100006FCC(v78, v79, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v76 + 4);
    swift_bridgeObjectRelease();
    sub_100075498((uint64_t)v34);
    *(_WORD *)(v76 + 12) = 2082;
    swift_beginAccess(&v111, &v107, 0, 0);
    v80 = v112;
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v80);
    sub_10016F6B8();
    v82 = v81;
    v84 = v83;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = v82;
    v86 = v101;
    v106 = sub_100006FCC(v85, v84, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v76 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 22) = 2082;
    swift_retain();
    swift_bridgeObjectRetain(v67);
    sub_10016F6B8();
    v88 = v87;
    v90 = v89;
    swift_release();
    swift_bridgeObjectRelease();
    v106 = sub_100006FCC(v88, v90, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v76 + 24);
    swift_release_n(v86, 2);
    swift_bridgeObjectRelease_n(v67, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v73, v75, "%{public}s: Merge concurrent message: %{public}s -> %{public}s", (uint8_t *)v76, 0x20u);
    swift_arrayDestroy(v77, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v103);
  }
  else
  {
    sub_100075498((uint64_t)v34);

    swift_release_n(v71, 2);
    swift_bridgeObjectRelease_n(v67, 2);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v32);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v67;
}

